ause it was lost or stolen, this information should be provided as `cancellation_reason`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The card can approve authorizations. If the card is linked to a cardholder with past-due requirements, you may be unable to change the card’s status to ‘active’. |\n    | `canceled`<br><br>The card will decline authorizations, and no authorization object will be recorded. This status is permanent. |\n    | `inactive`<br><br>The card will decline authorizations with the `card_inactive` reason. |\n    \n\n### More parameters\n\n*   #### \n    \n    shippingobjectPreview feature\n    \n\n### Returns\n\nReturns an updated Issuing `Card` object if a valid identifier was provided.\n\nPOST /v1/issuing/cards/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": null,  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"virtual\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Retrieve a card](https://docs.stripe.com/api/issuing/cards/retrieve)\n\nRetrieves an Issuing `Card` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Card` object if a valid identifier was provided. When requesting the ID of a card that has been deleted, a subset of the card’s information will be returned, including a `deleted` property, which will be true.\n\nGET /v1/issuing/cards/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": null,  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"virtual\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```",
  "title": "Cards | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/moving-money/regulatory-receipts",
  "markdown": "# Regulatory receipts | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about hosted transaction receipts.\n\nAll changes to a balance have a corresponding [Transaction object](https://docs.stripe.com/api/treasury/transactions/object) that provides a summary of money movements. Some transaction types are considered _regulated_ under Stripe’s money transmission licenses and require special treatment. You, the platform, must offer a transaction receipt and present disclosures to the customers of the sellers and service providers (connected accounts) on the platform taking part in regulated transactions.\n\n## Providing access to receipts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides hosted regulatory transaction receipts on all of our money movement resources, recording the URL as the value for the `hosted_regulatory_receipt_url` attribute. This hosted receipt includes a description of the transaction, amount, timing information, and relevant disclosures. Because the sellers and service providers (connected accounts) on your platform don’t have Stripe Dashboard access, you must provide them with the ability to retrieve receipts from within the product.\n\n![Hosted receipt of an outbound payment showing transaction id, amount sent, date posted, description of transaction, and a regulatory disclosure message.](https://b.stripecdn.com/docs-statics-srv/assets/receipt.4490fc802089baf86a8ee4bf9b98118a.png)\n\nRegulatory receipt\n\n#### Note\n\nDon’t store receipt URLs as they’re subject to change and only valid for 60 days.\n\nYou can find this hosted receipt in the `hosted_regulatory_receipt_url` attribute of the following objects:\n\n*   [InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers/object#inbound_transfer_object-hosted_regulatory_receipt_url)\n*   [ReceivedCredit](https://docs.stripe.com/api/treasury/received_credits/object#received_credit_object-hosted_regulatory_receipt_url)\n*   [ReceivedDebit](https://docs.stripe.com/api/treasury/received_debits/object#received_debit_object-hosted_regulatory_receipt_url)\n*   [CreditReversal](https://docs.stripe.com/api/treasury/credit_reversals/object#credit_reversal_object-hosted_regulatory_receipt_url)\n*   [DebitReversal](https://docs.stripe.com/api/treasury/debit_reversals/object#debit_reversal_object-hosted_regulatory_receipt_url)\n*   [OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/object#outbound_transfer_object-hosted_regulatory_receipt_url)\n*   [OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/object#outbound_payment_object-hosted_regulatory_receipt_url)",
  "title": "Regulatory receipts | Stripe Documentation",
  "description": "Learn about hosted transaction receipts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/marketing-treasury",
  "markdown": "# Marketing Treasury-based services | Stripe DocumentationThe Stripe Docs logo\n\n## Create precise messaging for your users that complies with regulations.\n\nMany states have statutory prohibitions on references to “banking,\" “banks,\" and “bank accounts” when the entities making these references are not state- or federally-chartered banks or credit unions. Imprecise terminology of Stripe Treasury accounts might draw scrutiny from regulators.\n\n## Recommended Terms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor your platform to efficiently leverage Stripe Treasury, you need to brand and communicate the nature of the product while being mindful of regulations. Refer to the following list of recommended terms to use in your messaging when building out your implementation of the product.\n\n*   Money management, or money management account or solution\n*   Cash management, or cash management account or solution\n*   \\[Your brand\\] account\n*   Financial services\n*   Financial account\n*   Financial product\n*   Financial service product\n*   Store of funds\n*   Wallet or open loop wallet\n*   Stored-value account\n*   Open-Loop stored-value account\n*   Prepaid access account\n*   Eligible for FDIC “pass-through” insurance\n*   Funds held at \\[Partner Bank\\], Member FDIC\n\n## Terms to Avoid![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAvoid the terms in this list for any marketing programs you create because only financial institutions licensed as banks can use them.\n\n*   Stripe or \\[Your Brand\\] bank\n*   Bank account\n*   Bank balance\n*   Banking\n*   Banking account\n*   Banking product\n*   Banking platform\n*   Deposits\n*   Mobile banking\n*   \\[Your Brand\\] pays interest\n*   \\[Your Brand\\] sets interest rates\n*   \\[Your Brand\\] advances funds\n*   Phrases that suggest your users receive banking products or services directly from bank partners, for example:\n    *   Create a \\[Bank Partner\\] bank account\n    *   A better way to bank with \\[Bank Partner\\]\n    *   Mobile banking with \\[Bank Partner\\]\n\n## Yield compliance marketing guidance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs a platform, you can provide your customers with yield, calculated as a percentage of their Treasury balance. We understand that this can be a great value proposition as part of your product. When you market and disclose yield to your potential and existing customers, don’t conflate yield with interest. We’ve outlined best practices for your marketing disclosures below. If you have any questions on how to present yield in your marketing, reach out to our compliance team at [platform-compliance@stripe.com](mailto:platform-compliance@stripe.com)\n\n*   Recommended Terms:\n    *   Always refer to yield as “yield.”\n    *   Always disclose prominently in your marketing materials that the yield percentage is subject to change and the conditions under which it might change.\n    *   Notify your existing customers whenever the yield percentage has changed. Prominently display the most recent yield percentage in their Dashboard.\n*   Terms to avoid\n    *   Never refer to yield as “interest.”\n    *   Don’t reference the Fed Funds Rate as a benchmark for setting your yield percentage.\n    *   Don’t imply that the yield is pass-through interest from a bank partner.\n\n### How to talk about FDIC insurance eligibility![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Treasury balances are stored value accounts that are held “for the benefit of” our Stripe Treasury users with our bank partners, Evolve Bank & Trust and Goldman Sachs Bank USA. We disclose to you which of our partners hold your funds. For FDIC insurance to apply to a user’s balance in a “for the benefit of” account, we must satisfy the rules for FDIC pass-through deposit insurance, unlike a bank account directly with an FDIC insured bank.\n\nWe understand that FDIC insurance eligibility can be a valuable feature to your customers. Stripe has approved the variations of the phrase “FDIC Insurance **eligible**” noted below on marketing materials, as long as certain conditions are met. **Specifically**, the statement of FDIC insurance eligibility must always be paired with two disclosures:\n\n1.  Stripe Treasury Accounts are eligible for FDIC pass-through deposit insurance if they meet certain requirements. The accounts are eligible only to the extent pass-through insurance is permitted by the rules and regulations of the FDIC, and if the requirements for pass-through insurance are satisfied. The FDIC insurance applies up to 250,000 USD per depositor, per financial institution, for deposits held in the same type of account (business versus personal, and so on).\n2.  You must also disclose that neither Stripe nor you are an FDIC insured institution and that the FDIC’s deposit insurance coverage only protects against the failure of an FDIC insured depository institution.\n\n|     |     |\n| --- | --- |\n| The following terms that incorporate the term “eligible” are approved: | Don’t use the following terms: |\n| *   “Eligible for FDIC insurance”<br>*   “FDIC insurance-eligible accounts”<br>*   “Eligible for FDIC pass-through insurance”<br>*   “Eligible for FDIC insurance up to the standard maximum deposit insurance per depositor in the same capacity\"<br>*   “Eligible for FDIC insurance up to $250K” | *   “FDIC insured”<br>*   “FDIC insured accounts”<br>*   “FDIC pass-through insurance guaranteed” |\n\nWe have also prepared these FAQs that you can use when your customers have questions about FDIC insurance eligibility or any of the disclosures:\n\n|     |     |\n| --- | --- |\n| **Is FDIC insurance impacted if a customer holds deposits in other accounts with the same institution?** | It can be. It’s your responsibility to know which insured institutions hold your funds. If you have other business-purpose accounts with the same institution where Treasury funds are held, the FDIC might aggregate all of your business account balances with that institution in applying the 250,000 USD limit. The FDIC generally does not, however, aggregate your personal accounts with your business accounts. |\n| **Does FDIC insurance eligibility protect from fraud or financial loss?** | No, FDIC insurance eligibility is applicable only in the event of a bank failure. |\n| **How do I know if the requirements for FDIC pass-through insurance are met?** | Stripe Treasury accounts are designed to be eligible for FDIC pass-through insurance. The FDIC makes the final determination about the availability of pass-through insurance at the time of a bank’s failure. |",
  "title": "Marketing Treasury-based services | Stripe Documentation",
  "description": "Create precise messaging for your users that complies with regulations.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/controls/advanced-fraud-tools/stripes-risk-score",
  "markdown": "# Stripe's risk score | Stripe DocumentationThe Stripe Docs logo\n\n## Stripe's risk scoreBeta\n\n## Evaluate the level of fraud risk associated with an authorization.\n\nIncorporate Stripe’s risk assessment into your business needs when deciding whether to approve or reject an authorization. The following statistics provide directional guidance on the performance of our tools, dependent on what you’re optimizing for: approval rate or fraud prevention. While these settings might not be customized to your business model, geography, or cardholder behavior, you can use them as a source of directional guidance when using Stripe’s tools. Contact us for support in adjusting these thresholds.\n\n|     | Network tools |     | Stripe Issuing fraud tools |     |     |\n| --- | --- | --- | --- | --- | --- |\n|     |     | Optimizing for fraud prevention | Balancing fraud prevention and approval rate | Optimizing for approval rate |\n| **Precision**: _How likely the flagged charge is true fraud_ | 2%  | 10-15% | 15-20% | 25-30% |\n| **Recall**: _% of all fraud caught by tooling by transaction volume_ | 2%  | 25-30% | 20-25% | 10-15% |\n| **% Volume Impact**: _Estimated authorization volume impacted by fraud tooling_ | 0.10% | 0.06% - 0.07% | 0.02% - 0.04% | 0.01% - 0.02% |\n\nStripe provides a composite score and risk categorization to help you assess the risk level of an authorization. The values exist on a 0-99 scale, with higher values representing higher risk. In addition to the risk score, Stripe provides an assessment of the authorization’s riskiness in an enum value. We label every authorization as ‘normal’ or ’high’.\n\nWe recommend backtesting your data against the score to assess opportunities to use the score to drive down fraud rates. For example, you might find that `fraud_score > 20` and `risk_level = normal` equates to particularly risky authorizations for your portfolio and opt to block authorizations that satisfy those conditions.\n\nPrecision and recall are inversely related. When you block more transactions, the false positive rate increases while the likelihood of allowing fraud decreases. When you block fewer transactions, the false positive rate decreases. Set your blocking thresholds accordingly based on rigorous backtesting of your data and your own risk tolerance.\n\nLearn more about the [Stripe’s risk score](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-risk_assessment-fraud_risk).\n\n## Fraud classification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhile our model is reliable, it inevitably flags:\n\n*   False positives: Non-fraudulent transactions as high risk\n*   False negatives: Fraudulent transactions as non-high risk\n\nAs Stripe refines the performance of its risk models, you can actively contribute to our refinement process by flagging both fraudulent transactions that we might not accurately identify and non-fraudulent transactions. You’ll also be strengthening the fraud prevention capabilities of the industry as a whole: when you flag a false negative, we send a fraud report to card networks, telling them about the fraudulent activity.\n\n### Use the API to report false positives and negatives![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can report false positives and false negatives while validating correct assessments (true positives and true negatives) through the [Fraud Classification API](https://docs.stripe.com/api/issuing/fraud_classification/create). Using this API is optional for accessing Stripe’s risk score. However, your contributions improve the model over time. Due to this, we recommend automating reporting with this API in the early stages of your implementation\n\nLearn more about the [Fraud Classification API](https://docs.stripe.com/api/issuing/fraud_classification/create).\n\nStripe’s risk score is currently limited to beta users. You must be an Issuing customer to join the beta. To request access to the beta, log in to your Stripe account and refresh the page. [Contact Stripe](https://stripe.com/contact/sales) for more information.",
  "title": "Stripe's risk score | Stripe Documentation",
  "description": "Evaluate the level of fraud risk associated with an authorization.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/controls/advanced-fraud-tools/compromised-card-alerting",
  "markdown": "# Compromised card alerting | Stripe DocumentationThe Stripe Docs logo\n\n## Compromised card alertingBeta\n\n## Cancel and reissue a card, file disputes, or notify a cardholder based on Stripe notifications.\n\nCanceling a card suspected to be compromised can help you prevent future fraudulent use of PANs that have been compromised. You can use these indicators to initiate communications and a reissuance workflow for cardholders. If Stripe observes that a card has been successfully used in a card testing attack, we flag the card as compromised.\n\n### Mitigate risk and take action![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen Stripe observes a successful authorization during a severe card testing attack (defined as a `risk_assessment.card_testing_risk.risk_level` of `elevated` or `highest`), the card’s `fraud_warning.type` field will have a value of `card_testing_exposure`. The `started_at` value corresponds to the date that the successful authorization in card testing attack took place. This value won’t update if the card is compromised again in a later attack.\n\nAfter Stripe sets the `type` field to `card_testing_exposure`, we recommend contacting the cardholder, canceling the card, and issuing a new one. This mitigates the risk of subsequent authorizations on what a fraudulent actor likely assumes is a valid PAN that they can use.\n\nLearn more about [compromised card alerting](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-fraud_warning)\n\nCompromised card alerting is currently limited to beta users. You must be an Issuing customer to join the beta. To request access to the beta, log in to your Stripe account and refresh the page. [Contact Stripe](https://stripe.com/contact/sales) for more information.",
  "title": "Compromised card alerting | Stripe Documentation",
  "description": "Cancel and reissue a card, file disputes, or notify a cardholder based on Stripe notifications.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/controls/real-time-authorizations/quickstart",
  "markdown": "# Set up and manage real-time authorizations\n\nSearch the docs or ask a question",
  "title": "Set up and manage real-time authorizations | Stripe Documentation",
  "description": "Learn how to set up and deploy a webhook to respond to Issuing authorizations.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/issuing/controls/real-time-authorizations/direct-webhook-migration",
  "markdown": "# Migrate to direct webhook response\n\n## Learn how to migrate Issuing real-time authorizations from API calls to direct webhook responses.\n\nYou can now [respond directly to a `issuing_authorization.request` webhook](https://docs.stripe.com/issuing/controls/real-time-authorizations) with a real-time authorization decision instead of making an API call to [approve](https://docs.stripe.com/api/issuing/authorizations/approve) and [decline](https://docs.stripe.com/api/issuing/authorizations/decline) endpoints during the webhook.\n\nResponding directly to the webhook event simplifies real-time authorizations, and removes an extra API call that can negatively impact your authorization rate with time outs.\n\nIf you’re building a new integration, use the new direct webhook response instead of making approve and decline API calls. We are deprecating the approve and decline endpoints, but existing users will continue to have access until at least the end of 2024. If you have an existing integration with real-time authorization, plan to migrate to direct webhook responses.\n\n#### Note\n\nThis guide only applies if you use the `/approve` and `/decline` endpoints for real-time authorizations.\n\n## Legacy API call flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPreviously, you needed to make an API call to `/approve` or `/decline` to make a decision for an incoming authorization request before responding to the `issuing_authorization.request` webhook.\n\n## New direct webhook response flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can now respond directly to the `issuing_authorization.request` webhook with a decision in the response body, without needing to make a separate API call. After the decision, an `issuing_authorization.created` or `issuing_authorization.updated` webhook event is still sent.\n\nLearn more about this API in the [real-time authorization documentation](https://docs.stripe.com/issuing/controls/real-time-authorizations), and build an integration with [our interactive guide](https://docs.stripe.com/issuing/controls/real-time-authorizations/quickstart).\n\nYou must respond with an HTTP status code of `200`, a `Stripe-Version` header set to a specific API version, and a Boolean of `approved` in the JSON body. The JSON body must correspond with the [specified API version](https://docs.stripe.com/api/versioning).\n\nFor controllable amount authorizations, [partial approvals](https://docs.stripe.com/issuing/purchases/authorizations?issuing-authorization-type=incremental_authorization#handling-other-authorizations) optionally include `amount`.\n\nFor direct webhook response [Authorizations](https://docs.stripe.com/api/issuing/authorizations/object), we’ve made several additions:\n\n*   Added value `webhook_error` to [request\\_history.reason](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-request_history-reason). This value is present if the webhook response fails due to validation errors.\n*   New field `request_history.reason_message`, which includes a detailed error message if the `request_history.reason` is `webhook_error`.\n\n## Migrate to direct response![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can try the direct webhook response in test mode. As a best practice, we recommend gradually shifting over from the legacy API call to responding directly to the webhook.\n\nIf you call an API method and include the direct webhook response body, the API method decision takes priority.\n\nHere’s an example of what a migration to the direct webhook might look like in Ruby. For other languages, see [our interactive guide](https://docs.stripe.com/issuing/controls/real-time-authorizations/quickstart).\n\n`# User's existing API call webhook handling code, using Sinatra. # In this example, the synchronous webhook and normal webhook share an endpoint. post '/webhook' do   payload = request.body.read    if event['type'] == 'issuing_authorization.request'     auth = event['data']['object']     # Approve with legacy API call.     Stripe::Issuing::Authorization.approve(auth[\"id\"])     status 200   elsif event['type'] == 'issuing_authorization.created'     auth = event['data']['object']     # If approved, will print \"webhook_approved\"     puts \"#{auth[\"request_history\"][-1][\"reason\"]}\"     status 200   end end`\n\nAfter testing in test mode, gradually shift traffic to the direct webhook response.\n\n`# User's API call and direct response webhook handling code, using Sinatra. # In this example, the synchronous webhook and normal webhook share an endpoint. post '/webhook' do   payload = request.body.read    if event['type'] == 'issuing_authorization.request'     auth = event['data']['object']      # Gradually shift traffic over from API approval to direct webhook response.     if should_use_direct_webhook_response?(auth[\"id\"])       # Direct webhook response.        body {         # Required field, containing decision.         \"approved\": true,       }.to_json        header {         # Required in header. Versions can be found in [https://stripe.com/docs/api/versioning](https://stripe.com/docs/api/versioning)         \"Stripe-Version\": \"2023-08-16\"       }        # Must respond with a 200.       status 200     else       # Legacy API call. Plan to remove this after traffic is completely shifted.       Stripe::Issuing::Authorization.approve(auth[\"id\"])       status 200     end   elsif event['type'] == 'issuing_authorization.created'     auth = event['data']['object']      # If approved, will print \"webhook_approved\"     puts \"#{auth[\"request_history\"][-1][\"reason\"]}\"      # Handle new reason value and field     if auth[\"request_history\"][-1][\"reason\"] == \"webhook_error\"       puts \"Direct webhook response decision failed: #{auth[\"request_history\"][-1][\"reason_message\"]}\"     end     status 200   end end`",
  "title": "Migrate to direct webhook response | Stripe Documentation",
  "description": "Learn how to migrate Issuing real-time authorizations from API calls to direct webhook responses.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/disputes/prevention/advanced-fraud-detection",
  "markdown": "# Advanced fraud detection | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about tools developers can use to maximize Stripe's ability to prevent fraudulent payments.\n\n[Stripe.js](https://docs.stripe.com/js) is Stripe’s JavaScript library designed to enable businesses to securely collect sensitive payment information from the customer’s browser. The Stripe [iOS SDK](https://docs.stripe.com/mobile/ios/basic) and [Android SDK](https://docs.stripe.com/mobile/android/basic) are the mobile app counterparts to Stripe.js.\n\nStripe.js and the mobile SDKs provide advanced fraud detection by looking at signals about device characteristics and user activity that help distinguish between legitimate and fraudulent transactions. These signals power Stripe’s fraud prevention systems, such as [Radar](https://docs.stripe.com/radar \"Radar\"). The signals are transmitted to Stripe’s back end by periodically making requests to the `m.stripe.com` endpoint.\n\nAlso, on each page where you load Stripe.js, it may load hCaptcha. hCaptcha is a type of CAPTCHA that helps stop fraud and provides additional signals to Stripe while being low friction for legitimate customers. To opt out of use of hCAPTCHA integration, reach out to [Stripe Support](https://support.stripe.com/contact/login).\n\nOur goal is to maximize payments from legitimate customers while minimizing fraud. Fraud can be one of the most challenging aspects of running an online business. Even businesses that don’t typically see significant amounts of fraud can see sudden, unexpected, and costly attacks. Stripe prevents more than 500 million USD in payment fraud for Stripe businesses every month. To do that, we collect and analyze information that helps us identify bad actors and bots, including both transactional data (such as amount, customer shipping address, date, and so on) and advanced fraud detection signals (device and activity signals).\n\nThe details of what we collect and how we use it are disclosed in our [privacy policy](https://stripe.com/privacy) and [cookie policy](https://stripe.com/cookies-policy/legal).\n\n## Types of signals![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Device characteristics![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDevice characteristics are signals about a customer’s browser, screen, or device. They help Stripe identify configurations consistent with anomalous browsing behavior, as well as compare this behavior to similar patterns observed across other businesses on Stripe’s network. Combinations of these parameters that are rare or unlikely to reflect a real user’s computing environment can expose fraudulent transactions.\n\n### Activity indicators![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAdvanced fraud detection signals also include activity indicators from actual shoppers that help us distinguish legitimate shoppers from fraudulent purchasers and bots. For example, bots tend to move through a website and checkout form much faster than a real person would; card numbers are also frequently copy-pasted rather than typed. These signals include mouse activity indicators and how long a user spends on different pages when shopping, which are both predictive of bot-like behavior across the duration of a session.\n\nStripe gathers data about the contents of the page only if they correspond to input fields in Stripe Elements. For example, Stripe might collect an email address to prefill Link signup and login. If the Stripe Element doesn’t have an email field, Stripe won’t collect that information from the contents of the page. This information is never saved. Signals corresponding to user activity are scoped to a single shopping session on a single site or app and aren’t linked across different shopping sessions, sites, or apps.\n\n## When signals are collected![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe more activity Stripe’s fraud engines can observe, the better Stripe’s fraud prevention will be. Stripe therefore encourages including Stripe.js on every page of the shopping experience, not just the checkout page. This level of Stripe.js coverage gives Stripe the richest possible set of such signals to distinguish fraudulent purchasers from real customers.\n\nIf Stripe.js isn’t used at all, the business must take on the full responsibility of [PCI compliance](https://docs.stripe.com/security/guide#validating-pci-compliance \"PCI compliance\"), and additional fraud risk.\n\nThe iOS and Android SDK collect advanced fraud detection signals for an app when the SDK object is instantiated. The data is only transmitted to Stripe during a tokenization request.\n\n## Data privacy![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis advanced fraud detection signal data is never used for advertising and won’t be rented, sold, or given to advertisers, as outlined in our [privacy policy](https://stripe.com/privacy). Stripe only uses this data for fraud detection and security purposes, and retains it for as long as it’s useful for the purposes of fraud detection and security.\n\nInternally, this data is subject to strict access control policies enforced by Stripe, and restricted to a small number of Stripe employees working on fraud prevention and security.\n\n## Disable advanced fraud detection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe users can decide to disable the collection of advanced fraud detection signals on their own websites and apps. Doing so increases their risk of fraud, especially [card testing](https://docs.stripe.com/disputes/prevention/fraud-types#card-testing). Stripe will continue to collect fraud detection signals on Stripe domains, like on [Stripe Checkout](https://docs.stripe.com/payments/checkout) payment pages.\n\nAdditionally, disabling advanced fraud detection doesn’t affect the collection of events logged when a customer interacts with Stripe-managed fields in your checkout page (we use these events to prevent fraud and make sure Stripe Elements is working) nor basic device information collected during [3D Secure 2 authentication](https://support.stripe.com/questions/3d-secure-2-device-information) (we’re required to send this information to the issuing bank for their risk analysis).\n\n### Stripe.js ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo disable advanced fraud detection signals with [Stripe.js](https://docs.stripe.com/js/including), set `advancedFraudSignals` as a query parameter in the Stripe.js script tag, or update to the latest version of the [Stripe.js module](https://github.com/stripe/stripe-js), use the `pure` export, and call `setLoadParameters`:\n\n### iOS SDK![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo disable advanced fraud detection signals with the [Stripe iOS SDK](https://github.com/stripe/stripe-ios), update to iOS SDK v19.1.1 or later. When configuring the Stripe SDK, set the `advancedFraudSignalsEnabled` property:\n\n`StripeAPI.defaultPublishableKey =` \n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n`StripeAPI.setAdvancedFraudSignalsEnabled(false)`\n\n### Android SDK![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo disable advanced fraud detection signals with the [Android SDK](https://github.com/stripe/stripe-android), update to Android SDK v14.4.0 or later. When configuring the Stripe SDK, set the `advancedFraudSignalsEnabled` property before instantiating or accessing any Stripe SDK objects:\n\n`class MyApp : Application() {     override fun onCreate() {         super.onCreate()          Stripe.advancedFraudSignalsEnabled = false          PaymentConfiguration.init(             applicationContext,`\n            \n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n        `)     } }`",
  "title": "Advanced fraud detection | Stripe Documentation",
  "description": "Learn about tools developers can use to maximize Stripe's ability to prevent fraudulent payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/including",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/api/issuing/authorizations/decline",
  "markdown": "# Decline an authorization | Stripe API Reference\n\n\\[Deprecated\\] Declines a pending Issuing `Authorization` object. This request should be made within the timeout window of the [real time authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations) flow. This method is deprecated. Instead, [respond directly to the webhook request to decline an authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations#authorization-handling).\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a declined Issuing `Authorization` object.\n\nPOST /v1/issuing/authorizations/:id/decline\n\n```\ncurl -X POST https://api.stripe.com/v1/issuing/authorizations/iauth_1JVXl82eZvKYlo2CPIiWlzrn/decline \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Create a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)Test helper\n\nCreate a test-mode authorization.\n\n### Parameters\n\n*   The total amount to attempt to authorize. This amount is in the provided currency, or defaults to the card’s currency, and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   Card associated with this authorization.\n    \n*   The currency of the authorization. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).\n    \n\n### More parameters\n\n*   #### \n    \n    is\\_amount\\_controllableboolean\n    \n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d card=ic_1Nsse72eZvKYlo2CWBGm2WQ5\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": \"ic_1Nsse72eZvKYlo2CWBGm2WQ5\",  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Capture a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)Test helper\n\nCapture a test-mode authorization.\n\n### Parameters\n\n*   The amount to capture from the authorization. If not provided, the full amount of the authorization will be captured. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   #### \n    \n    close\\_authorizationboolean\n    \n    Whether to close the authorization after capture. Defaults to true. Set to false to enable multi-capture flows.\n    \n*   Additional purchase information that is optionally provided by the merchant.\n    \n\n### Returns\n\nAn Authorization object.\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/capture\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/capture \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1FEiQC2eZvKYlo2CtahKepKy\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Beverly Hills\",          \"country\": \"US\",          \"line1\": \"123 Fake St\",          \"line2\": \"Apt 3\",          \"postal_code\": \"90210\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1528992903,      \"email\": \"jenny@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"preferred_locales\": [],      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1567541772,    \"currency\": \"usd\",    \"exp_month\": 12,    \"exp_year\": 2020,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {      \"status\": \"canceled\"    },    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"canceled\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_agreement\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Expire a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)Test helper\n\nExpire a test-mode Authorization.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/expire\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/expire \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1FEiQC2eZvKYlo2CtahKepKy\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Beverly Hills\",          \"country\": \"US\",          \"line1\": \"123 Fake St\",          \"line2\": \"Apt 3\",          \"postal_code\": \"90210\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1528992903,      \"email\": \"jenny@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"preferred_locales\": [],      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1567541772,    \"currency\": \"usd\",    \"exp_month\": 12,    \"exp_year\": 2020,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {      \"status\": \"canceled\"    },    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"canceled\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_agreement\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Finalize a test-mode authorization's amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)Test helper\n\nFinalize the amount on an Authorization prior to capture, when the initial authorization was for an estimated amount.\n\n### Parameters\n\n*   #### \n    \n    final\\_amountintegerRequired\n    \n    The final authorization amount that will be captured by the merchant. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n\n### More parameters\n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/finalize_amount \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d final_amount=1000\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"chip\",  \"balance_transactions\": [],  \"card\": \"ic_1Nsse72eZvKYlo2CWBGm2WQ5\",  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 1000,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"automated_fuel_dispensers\",    \"category_code\": \"5542\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```",
  "title": "Decline an authorization | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/authorizations/approve",
  "markdown": "# Approve an authorization | Stripe API Reference\n\n\\[Deprecated\\] Approves a pending Issuing `Authorization` object. This request should be made within the timeout window of the [real-time authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations) flow. This method is deprecated. Instead, [respond directly to the webhook request to approve an authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations#authorization-handling).\n\n### Parameters\n\n*   If the authorization’s `pending_request.is_amount_controllable` property is `true`, you may provide this value to control how much to hold for the authorization. Must be positive (use [`decline`](https://docs.stripe.com/api/issuing/authorizations/decline) to decline an authorization request).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an approved Issuing `Authorization` object.\n\nPOST /v1/issuing/authorizations/:id/approve\n\n```\ncurl -X POST https://api.stripe.com/v1/issuing/authorizations/iauth_1MvSKeLkdIwHu7ixKr8rO1HV/approve \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1MvSKeLkdIwHu7ixKr8rO1HV\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1MvSKeLkdIwHu7ixFANTvxgn\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Anytown\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"12345\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1680415995,      \"email\": null,      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"John Doe\",      \"phone_number\": null,      \"requirements\": {        \"disabled_reason\": \"requirements.past_due\",        \"past_due\": [          \"individual.card_issuing.user_terms_acceptance.ip\",          \"individual.card_issuing.user_terms_acceptance.date\",          \"individual.first_name\",          \"individual.last_name\"        ]      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1681162380,    \"currency\": \"usd\",    \"exp_month\": 8,    \"exp_year\": 2024,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {},    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_cardholder_contact\"      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_cardholder_contact\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": null,  \"created\": 1681162380,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\"  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": {    \"amount\": 700,    \"amount_details\": {      \"atm_fee\": null    },    \"currency\": \"usd\",    \"is_amount_controllable\": false,    \"merchant_amount\": 700,    \"merchant_currency\": \"usd\"  },  \"request_history\": [],  \"status\": \"pending\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Decline an authorization](https://docs.stripe.com/api/issuing/authorizations/decline)\n\n\\[Deprecated\\] Declines a pending Issuing `Authorization` object. This request should be made within the timeout window of the [real time authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations) flow. This method is deprecated. Instead, [respond directly to the webhook request to decline an authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations#authorization-handling).\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a declined Issuing `Authorization` object.\n\nPOST /v1/issuing/authorizations/:id/decline\n\n```\ncurl -X POST https://api.stripe.com/v1/issuing/authorizations/iauth_1JVXl82eZvKYlo2CPIiWlzrn/decline \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Create a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)Test helper\n\nCreate a test-mode authorization.\n\n### Parameters\n\n*   The total amount to attempt to authorize. This amount is in the provided currency, or defaults to the card’s currency, and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   Card associated with this authorization.\n    \n*   The currency of the authorization. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).\n    \n\n### More parameters\n\n*   #### \n    \n    is\\_amount\\_controllableboolean\n    \n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d card=ic_1Nsse72eZvKYlo2CWBGm2WQ5\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": \"ic_1Nsse72eZvKYlo2CWBGm2WQ5\",  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Capture a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)Test helper\n\nCapture a test-mode authorization.\n\n### Parameters\n\n*   The amount to capture from the authorization. If not provided, the full amount of the authorization will be captured. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   #### \n    \n    close\\_authorizationboolean\n    \n    Whether to close the authorization after capture. Defaults to true. Set to false to enable multi-capture flows.\n    \n*   Additional purchase information that is optionally provided by the merchant.\n    \n\n### Returns\n\nAn Authorization object.\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/capture\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/capture \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1FEiQC2eZvKYlo2CtahKepKy\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Beverly Hills\",          \"country\": \"US\",          \"line1\": \"123 Fake St\",          \"line2\": \"Apt 3\",          \"postal_code\": \"90210\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1528992903,      \"email\": \"jenny@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"preferred_locales\": [],      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1567541772,    \"currency\": \"usd\",    \"exp_month\": 12,    \"exp_year\": 2020,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {      \"status\": \"canceled\"    },    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"canceled\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_agreement\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Expire a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)Test helper\n\nExpire a test-mode Authorization.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/expire\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/expire \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1FEiQC2eZvKYlo2CtahKepKy\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Beverly Hills\",          \"country\": \"US\",          \"line1\": \"123 Fake St\",          \"line2\": \"Apt 3\",          \"postal_code\": \"90210\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1528992903,      \"email\": \"jenny@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"preferred_locales\": [],      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1567541772,    \"currency\": \"usd\",    \"exp_month\": 12,    \"exp_year\": 2020,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {      \"status\": \"canceled\"    },    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"canceled\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_agreement\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```",
  "title": "Approve an authorization | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/issuing/create_ephemeral_key_nonce",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/js/element/events/on_click",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/js/appendix/style",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/api/topups",
  "markdown": "# ups | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftopups)\n\n## [Top-ups](https://docs.stripe.com/api/topups)\n\n## [The Top-up object](https://docs.stripe.com/api/topups/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Amount transferred.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled` |\n    | `failed` |\n    | `pending` |\n    | `reversed` |\n    | `succeeded` |\n    \n\n### More attributes\n\n*   #### \n    \n    balance\\_transactionnullable stringExpandable\n    \n\n*   #### \n    \n    expected\\_availability\\_datenullable integer\n    \n*   #### \n    \n    failure\\_codenullable string\n    \n*   #### \n    \n    failure\\_messagenullable string\n    \n\n*   #### \n    \n    sourcenullable objectDeprecated\n    \n*   #### \n    \n    statement\\_descriptornullable string\n    \n*   #### \n    \n    transfer\\_groupnullable string\n    \n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"pending\",  \"transfer_group\": null}\n```\n\n## [Create a top-up](https://docs.stripe.com/api/topups/create)\n\nTop up the balance of an account\n\n### Parameters\n\n*   A positive integer representing how much to transfer.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    statement\\_descriptorstring\n    \n\n### Returns\n\nReturns the top-up object.\n\n```\ncurl https://api.stripe.com/v1/topups \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=2000 \\  -d currency=usd \\  -d description=\"Top-up for Jenny Rosen\" \\  -d statement_descriptor=Top-up\n```\n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"pending\",  \"transfer_group\": null}\n```\n\n## [Update a top-up](https://docs.stripe.com/api/topups/update)\n\nUpdates the metadata of a top-up. Other top-up details are not editable by design.\n\n### Parameters\n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nThe newly updated top-up object if the call succeeded. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/topups/tu_1NG6yj2eZvKYlo2C1FOBiHya \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"pending\",  \"transfer_group\": null,  \"metadata\": {    \"order_id\": \"6735\"  }}\n```\n\n## [Retrieve a top-up](https://docs.stripe.com/api/topups/retrieve)\n\nRetrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a top-up if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/topups/tu_1NG6yj2eZvKYlo2C1FOBiHya \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tu_1NG6yj2eZvKYlo2C1FOBiHya\",  \"object\": \"topup\",  \"amount\": 2000,  \"balance_transaction\": null,  \"created\": 123456789,  \"currency\": \"usd\",  \"description\": \"Top-up for Jenny Rosen\",  \"expected_availability_date\": 123456789,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"source\": null,  \"statement_descriptor\": \"Top-up\",  \"status\": \"pending\",  \"transfer_group\": null}\n```",
  "title": "Top-ups | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/authorizations/test_mode_create",
  "markdown": "# Create a test-mode authorization | Stripe API Reference\n\n## [Create a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)Test helper\n\nCreate a test-mode authorization.\n\n### Parameters\n\n*   The total amount to attempt to authorize. This amount is in the provided currency, or defaults to the card’s currency, and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   Card associated with this authorization.\n    \n*   The currency of the authorization. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).\n    \n\n### More parameters\n\n*   #### \n    \n    is\\_amount\\_controllableboolean\n    \n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d card=ic_1Nsse72eZvKYlo2CWBGm2WQ5\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": \"ic_1Nsse72eZvKYlo2CWBGm2WQ5\",  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Capture a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)Test helper\n\nCapture a test-mode authorization.\n\n### Parameters\n\n*   The amount to capture from the authorization. If not provided, the full amount of the authorization will be captured. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   #### \n    \n    close\\_authorizationboolean\n    \n    Whether to close the authorization after capture. Defaults to true. Set to false to enable multi-capture flows.\n    \n*   Additional purchase information that is optionally provided by the merchant.\n    \n\n### Returns\n\nAn Authorization object.\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/capture\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/capture \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1FEiQC2eZvKYlo2CtahKepKy\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Beverly Hills\",          \"country\": \"US\",          \"line1\": \"123 Fake St\",          \"line2\": \"Apt 3\",          \"postal_code\": \"90210\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1528992903,      \"email\": \"jenny@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"preferred_locales\": [],      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1567541772,    \"currency\": \"usd\",    \"exp_month\": 12,    \"exp_year\": 2020,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {      \"status\": \"canceled\"    },    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"canceled\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_agreement\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Expire a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)Test helper\n\nExpire a test-mode Authorization.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/expire\n\n```\ncurl -X POST https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/expire \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1FEiQC2eZvKYlo2CtahKepKy\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Beverly Hills\",          \"country\": \"US\",          \"line1\": \"123 Fake St\",          \"line2\": \"Apt 3\",          \"postal_code\": \"90210\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1528992903,      \"email\": \"jenny@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"preferred_locales\": [],      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1567541772,    \"currency\": \"usd\",    \"exp_month\": 12,    \"exp_year\": 2020,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {      \"status\": \"canceled\"    },    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"canceled\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_agreement\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Finalize a test-mode authorization's amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)Test helper\n\nFinalize the amount on an Authorization prior to capture, when the initial authorization was for an estimated amount.\n\n### Parameters\n\n*   #### \n    \n    final\\_amountintegerRequired\n    \n    The final authorization amount that will be captured by the merchant. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n\n### More parameters\n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/finalize_amount \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d final_amount=1000\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"chip\",  \"balance_transactions\": [],  \"card\": \"ic_1Nsse72eZvKYlo2CWBGm2WQ5\",  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 1000,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"automated_fuel_dispensers\",    \"category_code\": \"5542\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Increment a test-mode authorization](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)Test helper\n\nIncrement a test-mode Authorization.\n\n### Parameters\n\n*   #### \n    \n    increment\\_amountintegerRequired\n    \n    The amount to increment the authorization by. This amount is in the authorization currency and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   #### \n    \n    is\\_amount\\_controllableboolean\n    \n    If set `true`, you may provide [amount](https://docs.stripe.com/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.\n    \n\n### Returns\n\nAn Authorization object\n\nPOST /v1/test\\_helpers/issuing/authorizations/:id/increment\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/authorizations/iauth_1DPc772eZvKYlo2C6avLyZ25/increment \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d increment_amount=1000\n```\n\n```\n{  \"id\": \"iauth_1DPc772eZvKYlo2C6avLyZ25\",  \"object\": \"issuing.authorization\",  \"amount\": 1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": \"ic_1Nsse72eZvKYlo2CWBGm2WQ5\",  \"cardholder\": \"ich_1Ccy6F2eZvKYlo2ClnIm9bs4\",  \"created\": 1540586461,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [],  \"status\": \"reversed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```",
  "title": "Create a test-mode authorization | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/financial_accounts",
  "markdown": "# Financial Accounts | Stripe API Reference\n\n## [The FinancialAccount object](https://docs.stripe.com/api/treasury/financial_accounts/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    active\\_featuresarray of enums\n    \n    The array of paths to active Features in the Features hash.\n    \n*   The single multi-currency balance of the FinancialAccount. Positive values represent money that belongs to the user while negative values represent funds the user owes. Currently, FinancialAccounts can only carry balances in USD.\n    \n\n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    featuresnullable objectExpandable\n    \n    The features and their statuses for this FinancialAccount.\n    \n*   #### \n    \n    financial\\_addressesarray of objects\n    \n    The set of credentials that resolve to a FinancialAccount.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    pending\\_featuresarray of enums\n    \n    The array of paths to pending Features in the Features hash.\n    \n*   #### \n    \n    platform\\_restrictionsnullable object\n    \n    The set of functionalities that the platform can restrict on the FinancialAccount.\n    \n*   #### \n    \n    restricted\\_featuresarray of enums\n    \n    The array of paths to restricted Features in the Features hash.\n    \n*   The enum specifying what state the account is in.\n    \n*   Details related to the status of this FinancialAccount.\n    \n*   #### \n    \n    supported\\_currenciesarray of enums\n    \n    The currencies the FinancialAccount can hold a balance in. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.\n    \n\nThe FinancialAccount object\n\n```\n{  \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",  \"object\": \"treasury.financial_account\",  \"active_features\": [    \"financial_addresses.aba\",    \"outbound_payments.ach\",    \"outbound_payments.us_domestic_wire\"  ],  \"balance\": {    \"cash\": {      \"usd\": 0    },    \"inbound_pending\": {      \"usd\": 0    },    \"outbound_pending\": {      \"usd\": 0    }  },  \"country\": \"US\",  \"created\": 1680714349,  \"financial_addresses\": [    {      \"aba\": {        \"account_holder_name\": \"Jenny Rosen\",        \"account_number_last4\": \"7890\",        \"bank_name\": \"STRIPE TEST BANK\",        \"routing_number\": \"0000000001\"      },      \"supported_networks\": [        \"ach\",        \"us_domestic_wire\"      ],      \"type\": \"aba\"    }  ],  \"livemode\": true,  \"metadata\": null,  \"pending_features\": [],  \"restricted_features\": [],  \"status\": \"open\",  \"status_details\": {    \"closed\": null  },  \"supported_currencies\": [    \"usd\"  ],  \"features\": {}}\n```\n\n## [Create a FinancialAccount](https://docs.stripe.com/api/treasury/financial_accounts/create)\n\nCreates a new FinancialAccount. For now, each connected account can only have one FinancialAccount.\n\n### Parameters\n\n*   #### \n    \n    supported\\_currenciesarray of stringsRequired\n    \n    The currencies the FinancialAccount can hold a balance in.\n    \n*   Encodes whether a FinancialAccount has access to a particular feature. Stripe or the platform can control features via the requested field.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    platform\\_restrictionsobject\n    \n    The set of functionalities that the platform can restrict on the FinancialAccount.\n    \n\n### Returns\n\nReturns a FinancialAccount object.\n\nPOST /v1/treasury/financial\\_accounts\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"supported_currencies[]\"=usd\n```\n\n```\n{  \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",  \"object\": \"treasury.financial_account\",  \"active_features\": [    \"financial_addresses.aba\",    \"outbound_payments.ach\",    \"outbound_payments.us_domestic_wire\"  ],  \"balance\": {    \"cash\": {      \"usd\": 0    },    \"inbound_pending\": {      \"usd\": 0    },    \"outbound_pending\": {      \"usd\": 0    }  },  \"country\": \"US\",  \"created\": 1680714349,  \"financial_addresses\": [    {      \"aba\": {        \"account_holder_name\": \"Jenny Rosen\",        \"account_number_last4\": \"7890\",        \"bank_name\": \"STRIPE TEST BANK\",        \"routing_number\": \"0000000001\"      },      \"supported_networks\": [        \"ach\",        \"us_domestic_wire\"      ],      \"type\": \"aba\"    }  ],  \"livemode\": true,  \"metadata\": null,  \"pending_features\": [],  \"restricted_features\": [],  \"status\": \"open\",  \"status_details\": {    \"closed\": null  },  \"supported_currencies\": [    \"usd\"  ],  \"features\": {}}\n```\n\n## [Update a FinancialAccount](https://docs.stripe.com/api/treasury/financial_accounts/update)\n\nUpdates the details of a FinancialAccount.\n\n### Parameters\n\n*   Encodes whether a FinancialAccount has access to a particular feature, with a status enum and associated `status_details`. Stripe or the platform may control features via the requested field.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    platform\\_restrictionsobject\n    \n    The set of functionalities that the platform can restrict on the FinancialAccount.\n    \n\n### Returns\n\nReturns a FinancialAccount object.\n\nPOST /v1/treasury/financial\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts/fa_1MtZmL2eZvKYlo2Cer6cdwEC \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",  \"object\": \"treasury.financial_account\",  \"active_features\": [    \"financial_addresses.aba\",    \"outbound_payments.ach\",    \"outbound_payments.us_domestic_wire\"  ],  \"balance\": {    \"cash\": {      \"usd\": 0    },    \"inbound_pending\": {      \"usd\": 0    },    \"outbound_pending\": {      \"usd\": 0    }  },  \"country\": \"US\",  \"created\": 1680714349,  \"financial_addresses\": [    {      \"aba\": {        \"account_holder_name\": \"Jenny Rosen\",        \"account_number_last4\": \"7890\",        \"bank_name\": \"STRIPE TEST BANK\",        \"routing_number\": \"0000000001\"      },      \"supported_networks\": [        \"ach\",        \"us_domestic_wire\"      ],      \"type\": \"aba\"    }  ],  \"livemode\": true,  \"metadata\": {    \"order_id\": \"6735\"  },  \"pending_features\": [],  \"restricted_features\": [],  \"status\": \"open\",  \"status_details\": {    \"closed\": null  },  \"supported_currencies\": [    \"usd\"  ],  \"features\": {}}\n```\n\n## [Retrieve a FinancialAccount](https://docs.stripe.com/api/treasury/financial_accounts/retrieve)\n\nRetrieves the details of a FinancialAccount.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturn a FinancialAccount object.\n\nGET /v1/treasury/financial\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts/fa_1MtZmL2eZvKYlo2Cer6cdwEC \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",  \"object\": \"treasury.financial_account\",  \"active_features\": [    \"financial_addresses.aba\",    \"outbound_payments.ach\",    \"outbound_payments.us_domestic_wire\"  ],  \"balance\": {    \"cash\": {      \"usd\": 0    },    \"inbound_pending\": {      \"usd\": 0    },    \"outbound_pending\": {      \"usd\": 0    }  },  \"country\": \"US\",  \"created\": 1680714349,  \"financial_addresses\": [    {      \"aba\": {        \"account_holder_name\": \"Jenny Rosen\",        \"account_number_last4\": \"7890\",        \"bank_name\": \"STRIPE TEST BANK\",        \"routing_number\": \"0000000001\"      },      \"supported_networks\": [        \"ach\",        \"us_domestic_wire\"      ],      \"type\": \"aba\"    }  ],  \"livemode\": true,  \"metadata\": null,  \"pending_features\": [],  \"restricted_features\": [],  \"status\": \"open\",  \"status_details\": {    \"closed\": null  },  \"supported_currencies\": [    \"usd\"  ],  \"features\": {}}\n```",
  "title": "Financial Accounts | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/transactions",
  "markdown": "# Transactions | Stripe API Reference\n\nTransactions represent changes to a [FinancialAccount’s](#financial_accounts) balance.\n\n## [The Transaction object](https://docs.stripe.com/api/treasury/transactions/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   The change made to each of the FinancialAccount’s sub-balances by the Transaction.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    entriesnullable objectExpandable\n    \n    A list of TransactionEntries that are part of this Transaction. This cannot be expanded in any list endpoints.\n    \n*   The FinancialAccount associated with this object.\n    \n*   ID of the flow that created the Transaction.\n    \n*   #### \n    \n    flow\\_detailsnullable objectExpandable\n    \n    Details of the flow that created the Transaction.\n    \n*   Type of the flow that created the Transaction.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `credit_reversal`<br><br>The Transaction is associated with a CreditReversal. |\n    | `debit_reversal`<br><br>The Transaction is associated with a DebitReversal. |\n    | `inbound_transfer`<br><br>The Transaction is associated with an InboundTransfer. |\n    | `issuing_authorization`<br><br>The Transaction is associated with an Issuing authorization. |\n    | `other`<br><br>The Transaction is associated with some other money movement not listed above. |\n    | `outbound_payment`<br><br>The Transaction is associated with an OutboundPayment. |\n    | `outbound_transfer`<br><br>The Transaction is associated with an OutboundTransfer. |\n    | `received_credit`<br><br>The Transaction is associated with a ReceivedCredit. |\n    | `received_debit`<br><br>The Transaction is associated with a ReceivedDebit. |\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Status of the Transaction.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `open`<br><br>The initial state for all Transactions. The Transaction results in updates to the sub-balance amounts, but the current balance is not affected until the Transaction posts. |\n    | `posted`<br><br>Funds have successfully entered or left the account. The current balance was affected. |\n    | `void`<br><br>The Transaction never impacted the balance. For example, a Transaction would enter this state if an OutboundPayment was initiated but then canceled before the funds left the account. |\n    \n*   Hash containing timestamps of when the object transitioned to a particular `status`.\n    \n\n```\n{  \"id\": \"trxn_1MtkYw2eZvKYlo2ClMGIO54z\",  \"object\": \"treasury.transaction\",  \"amount\": -100,  \"balance_impact\": {    \"cash\": -100,    \"inbound_pending\": 0,    \"outbound_pending\": 100  },  \"created\": 1680755802,  \"currency\": \"usd\",  \"description\": \"Jane Austen (6789) | Outbound transfer | transfer\",  \"financial_account\": \"fa_1MtkYw2eZvKYlo2CrqmzUo3O\",  \"flow\": \"obt_1MtkYw2eZvKYlo2CqsyBpQts\",  \"flow_type\": \"outbound_transfer\",  \"livemode\": false,  \"status\": \"open\",  \"status_transitions\": {    \"posted_at\": null,    \"void_at\": null  }}\n```\n\n## [Retrieve a Transaction](https://docs.stripe.com/api/treasury/transactions/retrieve)\n\nRetrieves the details of an existing Transaction.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a Transaction object if a valid identifier was provided. Otherwise, returns an error.\n\nGET /v1/treasury/transactions/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/transactions/trxn_1MtkYw2eZvKYlo2ClMGIO54z \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"trxn_1MtkYw2eZvKYlo2ClMGIO54z\",  \"object\": \"treasury.transaction\",  \"amount\": -100,  \"balance_impact\": {    \"cash\": -100,    \"inbound_pending\": 0,    \"outbound_pending\": 100  },  \"created\": 1680755802,  \"currency\": \"usd\",  \"description\": \"Jane Austen (6789) | Outbound transfer | transfer\",  \"financial_account\": \"fa_1MtkYw2eZvKYlo2CrqmzUo3O\",  \"flow\": \"obt_1MtkYw2eZvKYlo2CqsyBpQts\",  \"flow_type\": \"outbound_transfer\",  \"livemode\": false,  \"status\": \"open\",  \"status_transitions\": {    \"posted_at\": null,    \"void_at\": null  }}\n```\n\n## [List all Transactions](https://docs.stripe.com/api/treasury/transactions/list)\n\nRetrieves a list of Transaction objects.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return Transactions that were created during the given date interval.\n    \n*   The results are in reverse chronological order by `created` or `posted_at`. The default is `created`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `created`<br><br>Timestamp describing when the Transaction was created. |\n    | `posted_at`<br><br>Timestamp describing when the Transaction was posted. |\n    \n*   Only return Transactions that have the given status: `open`, `posted`, or `void`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `open`<br><br>The initial state for all Transactions. The Transaction results in updates to the sub-balance amounts, but the current balance is not affected until the Transaction posts. |\n    | `posted`<br><br>Funds have successfully entered or left the account. The current balance was affected. |\n    | `void`<br><br>The Transaction never impacted the balance. For example, a Transaction would enter this state if an OutboundPayment was initiated but then canceled before the funds left the account. |\n    \n*   A filter for the `status_transitions.posted_at` timestamp. When using this filter, `status=posted` and `order_by=posted_at` must also be specified.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` Transactions, starting after Transaction `starting_after`. Each entry in the array is a separate Transaction object. If no more Transactions are available, the resulting array will be empty.\n\nGET /v1/treasury/transactions\n\n```\ncurl -G https://api.stripe.com/v1/treasury/transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkYw2eZvKYlo2CrqmzUo3O \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"trxn_1MtkYw2eZvKYlo2ClMGIO54z\",      \"object\": \"treasury.transaction\",      \"amount\": -100,      \"balance_impact\": {        \"cash\": -100,        \"inbound_pending\": 0,        \"outbound_pending\": 100      },      \"created\": 1680755802,      \"currency\": \"usd\",      \"description\": \"Jane Austen (6789) | Outbound transfer | transfer\",      \"financial_account\": \"fa_1MtkYw2eZvKYlo2CrqmzUo3O\",      \"flow\": \"obt_1MtkYw2eZvKYlo2CqsyBpQts\",      \"flow_type\": \"outbound_transfer\",      \"livemode\": false,      \"status\": \"open\",      \"status_transitions\": {        \"posted_at\": null,        \"void_at\": null      }    }    {...}    {...}  ],}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Transactions | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/received_debits",
  "markdown": "# Received Debits | Stripe API Reference\n\n## [The ReceivedDebit object](https://docs.stripe.com/api/treasury/received_debits/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    failure\\_codenullable enum\n    \n    Reason for the failure. A ReceivedDebit might fail because the FinancialAccount doesn’t have sufficient funds, is closed, or is frozen.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `account_closed`<br><br>Funds can’t be pulled from a closed FinancialAccount. |\n    | `account_frozen`<br><br>Funds can’t be pulled from a frozen FinancialAccount. |\n    | `insufficient_funds`<br><br>The FinancialAccount doesn’t have a sufficient balance. |\n    | `other`<br><br>Funds can’t be pulled from the FinancialAccount for other reasons. |\n    \n*   #### \n    \n    financial\\_accountnullable string\n    \n    The FinancialAccount that funds were pulled from.\n    \n*   #### \n    \n    hosted\\_regulatory\\_receipt\\_urlnullable string\n    \n    A [hosted transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe’s money transmission licenses.\n    \n*   #### \n    \n    initiating\\_payment\\_method\\_detailsobject\n    \n    Details about how a ReceivedDebit was created.\n    \n*   Other flows linked to a ReceivedDebit.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The network used for the ReceivedDebit.\n    \n*   #### \n    \n    reversal\\_detailsnullable object\n    \n    Details describing when a ReceivedDebit might be reversed.\n    \n*   Status of the ReceivedDebit. ReceivedDebits are created with a status of either `succeeded` (approved) or `failed` (declined). The failure reason can be found under the `failure_code`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `failed`<br><br>The ReceivedDebit was declined, and no Transaction was created. |\n    | `succeeded`<br><br>The ReceivedDebit was approved. |\n    \n*   #### \n    \n    transactionnullable stringExpandable\n    \n    The Transaction associated with this object.\n    \n\n```\n{  \"id\": \"rd_1MtkUY2eZvKYlo2CT9SYD1AF\",  \"object\": \"treasury.received_debit\",  \"amount\": 1000,  \"created\": 1680755530,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkUY2eZvKYlo2CY3s6OQyK\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKMqWuaEGMgaYNwvP2Oc6NpPGJjaET9tspjuPmbhoXvIfQj6YrtJkjCiTFYe59B8Ck4cg5jTS80A9mLSaK_4oF_LBDlNzgg\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"debit_reversal\": null,    \"inbound_transfer\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"payout\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkUY2eZvKYlo2ChymLKPp5\"}\n```\n\n## [Retrieve a ReceivedDebit](https://docs.stripe.com/api/treasury/received_debits/retrieve)\n\nRetrieves the details of an existing ReceivedDebit by passing the unique ReceivedDebit ID from the ReceivedDebit list\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a ReceivedDebit object.\n\nGET /v1/treasury/received\\_debits/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/received_debits/rd_1MtkUY2eZvKYlo2CT9SYD1AF \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rd_1MtkUY2eZvKYlo2CT9SYD1AF\",  \"object\": \"treasury.received_debit\",  \"amount\": 1000,  \"created\": 1680755530,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkUY2eZvKYlo2CY3s6OQyK\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKMqWuaEGMgaYNwvP2Oc6NpPGJjaET9tspjuPmbhoXvIfQj6YrtJkjCiTFYe59B8Ck4cg5jTS80A9mLSaK_4oF_LBDlNzgg\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"debit_reversal\": null,    \"inbound_transfer\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"payout\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkUY2eZvKYlo2ChymLKPp5\"}\n```\n\n## [List all ReceivedDebits](https://docs.stripe.com/api/treasury/received_debits/list)\n\nReturns a list of ReceivedDebits.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount that funds were pulled from.\n    \n*   Only return ReceivedDebits that have the given status: `succeeded` or `failed`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `failed`<br><br>The ReceivedDebit was declined, and no Transaction was created. |\n    | `succeeded`<br><br>The ReceivedDebit was approved. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` ReceivedDebits, starting after ReceivedDebit `starting_after`. Each entry in the array is a separate ReceivedDebit object. If no more ReceivedDebits are available, the resulting array will be empty.\n\nGET /v1/treasury/received\\_debits\n\n```\ncurl -G https://api.stripe.com/v1/treasury/received_debits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkUY2eZvKYlo2CY3s6OQyK \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/received_debits\",  \"has_more\": false,  \"data\": [    {      \"id\": \"rd_1MtkUY2eZvKYlo2CT9SYD1AF\",      \"object\": \"treasury.received_debit\",      \"amount\": 1000,      \"created\": 1680755530,      \"currency\": \"usd\",      \"description\": \"Stripe Test\",      \"failure_code\": null,      \"financial_account\": \"fa_1MtkUY2eZvKYlo2CY3s6OQyK\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKMqWuaEGMgaYNwvP2Oc6NpPGJjaET9tspjuPmbhoXvIfQj6YrtJkjCiTFYe59B8Ck4cg5jTS80A9mLSaK_4oF_LBDlNzgg\",      \"initiating_payment_method_details\": {        \"billing_details\": {          \"address\": {            \"city\": null,            \"country\": null,            \"line1\": null,            \"line2\": null,            \"postal_code\": null,            \"state\": null          },          \"email\": null,          \"name\": \"Jane Austen\"        },        \"type\": \"us_bank_account\",        \"us_bank_account\": {          \"bank_name\": \"STRIPE TEST BANK\",          \"last4\": \"6789\",          \"routing_number\": \"110000000\"        }      },      \"linked_flows\": {        \"debit_reversal\": null,        \"inbound_transfer\": null,        \"issuing_authorization\": null,        \"issuing_transaction\": null,        \"payout\": null      },      \"livemode\": false,      \"network\": \"ach\",      \"reversal_details\": {        \"deadline\": 1681084800,        \"restricted_reason\": null      },      \"status\": \"succeeded\",      \"transaction\": \"trxn_1MtkUY2eZvKYlo2ChymLKPp5\"    }    {...}    {...}  ],}\n```\n\n## [Test mode: Create a ReceivedDebit](https://docs.stripe.com/api/treasury/received_debits/test_mode_create)Test helper\n\nUse this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to pull funds from.\n    \n*   Specifies the network rails to be used. If not set, will default to the PaymentMethod’s preferred network. See the [docs](https://docs.stripe.com/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    initiating\\_payment\\_method\\_detailsobject\n    \n    Initiating payment method details for the object.\n    \n\n### Returns\n\nA test mode ReceivedDebit object.\n\nPOST /v1/test\\_helpers/treasury/received\\_debits\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/received_debits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d currency=usd \\  -d financial_account=fa_1MtkUY2eZvKYlo2CY3s6OQyK \\  -d network=ach\n```\n\n```\n{  \"id\": \"rd_1MtkUY2eZvKYlo2CT9SYD1AF\",  \"object\": \"treasury.received_debit\",  \"amount\": 1000,  \"created\": 1680755530,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkUY2eZvKYlo2CY3s6OQyK\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKMqWuaEGMgaYNwvP2Oc6NpPGJjaET9tspjuPmbhoXvIfQj6YrtJkjCiTFYe59B8Ck4cg5jTS80A9mLSaK_4oF_LBDlNzgg\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"debit_reversal\": null,    \"inbound_transfer\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"payout\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkUY2eZvKYlo2ChymLKPp5\"}\n```",
  "title": "Received Debits | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/received_credits",
  "markdown": "# Received Credits | Stripe API Reference\n\n## [The ReceivedCredit object](https://docs.stripe.com/api/treasury/received_credits/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    failure\\_codenullable enum\n    \n    Reason for the failure. A ReceivedCredit might fail because the receiving FinancialAccount is closed or frozen.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `account_closed`<br><br>Funds can’t be sent to a closed FinancialAccount. |\n    | `account_frozen`<br><br>Funds can’t be sent to a frozen FinancialAccount. |\n    | `other`<br><br>Funds can’t be sent to FinancialAccount for other reasons. |\n    \n*   #### \n    \n    financial\\_accountnullable string\n    \n    The FinancialAccount that received the funds.\n    \n*   #### \n    \n    hosted\\_regulatory\\_receipt\\_urlnullable string\n    \n    A [hosted transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe’s money transmission licenses.\n    \n*   #### \n    \n    initiating\\_payment\\_method\\_detailsobject\n    \n    Details about the PaymentMethod used to send a ReceivedCredit.\n    \n*   Other flows linked to a ReceivedCredit.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The rails used to send the funds.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `ach` |\n    | `card` |\n    | `stripe` |\n    | `us_domestic_wire` |\n    \n*   #### \n    \n    reversal\\_detailsnullable object\n    \n    Details describing when a ReceivedCredit may be reversed.\n    \n*   Status of the ReceivedCredit. ReceivedCredits are created either `succeeded` (approved) or `failed` (declined). If a ReceivedCredit is declined, the failure reason can be found in the `failure_code` field.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `failed`<br><br>The ReceivedCredit was declined, and no Transaction was created. |\n    | `succeeded`<br><br>The ReceivedCredit was approved. |\n    \n*   #### \n    \n    transactionnullable stringExpandable\n    \n    The Transaction associated with this object.\n    \n\nThe ReceivedCredit object\n\n```\n{  \"id\": \"rc_1MtkSr2eZvKYlo2CcysvUbEw\",  \"object\": \"treasury.received_credit\",  \"amount\": 1000,  \"created\": 1680755425,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkSr2eZvKYlo2CsJozwFWD\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOKVuaEGMgagXvSInCY6NpMvimqdsEKNHRrHZ3OGyVm_l5LfDMezNeY83F5Mq-rryXZ-J1z-jfFBv30wz5WxDH97VRBIzw\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"credit_reversal\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"source_flow\": null,    \"source_flow_type\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkSr2eZvKYlo2CuFFh9Rh0\"}\n```\n\n## [Retrieve a ReceivedCredit](https://docs.stripe.com/api/treasury/received_credits/retrieve)\n\nRetrieves the details of an existing ReceivedCredit by passing the unique ReceivedCredit ID from the ReceivedCredit list.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a ReceivedCredit object.\n\nGET /v1/treasury/received\\_credits/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/received_credits/rc_1MtkSr2eZvKYlo2CcysvUbEw \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rc_1MtkSr2eZvKYlo2CcysvUbEw\",  \"object\": \"treasury.received_credit\",  \"amount\": 1000,  \"created\": 1680755425,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkSr2eZvKYlo2CsJozwFWD\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOKVuaEGMgagXvSInCY6NpMvimqdsEKNHRrHZ3OGyVm_l5LfDMezNeY83F5Mq-rryXZ-J1z-jfFBv30wz5WxDH97VRBIzw\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"credit_reversal\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"source_flow\": null,    \"source_flow_type\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkSr2eZvKYlo2CuFFh9Rh0\"}\n```\n\n## [List all ReceivedCredits](https://docs.stripe.com/api/treasury/received_credits/list)\n\nReturns a list of ReceivedCredits.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount that received the funds.\n    \n*   Only return ReceivedCredits described by the flow.\n    \n*   Only return ReceivedCredits that have the given status: `succeeded` or `failed`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `failed`<br><br>The ReceivedCredit was declined, and no Transaction was created. |\n    | `succeeded`<br><br>The ReceivedCredit was approved. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` ReceivedCredits, starting after ReceivedCredit `starting_after`. Each entry in the array is a separate ReceivedCredit object. If no more ReceivedCredits are available, the resulting array will be empty.\n\nGET /v1/treasury/received\\_credits\n\n```\ncurl -G https://api.stripe.com/v1/treasury/received_credits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkSr2eZvKYlo2CsJozwFWD \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/received_credits\",  \"has_more\": false,  \"data\": [    {      \"id\": \"rc_1MtkSr2eZvKYlo2CcysvUbEw\",      \"object\": \"treasury.received_credit\",      \"amount\": 1000,      \"created\": 1680755425,      \"currency\": \"usd\",      \"description\": \"Stripe Test\",      \"failure_code\": null,      \"financial_account\": \"fa_1MtkSr2eZvKYlo2CsJozwFWD\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOKVuaEGMgagXvSInCY6NpMvimqdsEKNHRrHZ3OGyVm_l5LfDMezNeY83F5Mq-rryXZ-J1z-jfFBv30wz5WxDH97VRBIzw\",      \"initiating_payment_method_details\": {        \"billing_details\": {          \"address\": {            \"city\": null,            \"country\": null,            \"line1\": null,            \"line2\": null,            \"postal_code\": null,            \"state\": null          },          \"email\": null,          \"name\": \"Jane Austen\"        },        \"type\": \"us_bank_account\",        \"us_bank_account\": {          \"bank_name\": \"STRIPE TEST BANK\",          \"last4\": \"6789\",          \"routing_number\": \"110000000\"        }      },      \"linked_flows\": {        \"credit_reversal\": null,        \"issuing_authorization\": null,        \"issuing_transaction\": null,        \"source_flow\": null,        \"source_flow_type\": null      },      \"livemode\": false,      \"network\": \"ach\",      \"reversal_details\": {        \"deadline\": 1681084800,        \"restricted_reason\": null      },      \"status\": \"succeeded\",      \"transaction\": \"trxn_1MtkSr2eZvKYlo2CuFFh9Rh0\"    }    {...}    {...}  ],}\n```\n\n## [Test mode: Create a ReceivedCredit](https://docs.stripe.com/api/treasury/received_credits/test_mode_create)Test helper\n\nUse this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to send funds to.\n    \n*   Specifies the network rails to be used. If not set, will default to the PaymentMethod’s preferred network. See the [docs](https://docs.stripe.com/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    initiating\\_payment\\_method\\_detailsobject\n    \n    Initiating payment method details for the object.\n    \n\n### Returns\n\nA test mode ReceivedCredit object.\n\nPOST /v1/test\\_helpers/treasury/received\\_credits\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/received_credits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d currency=usd \\  -d financial_account=fa_1MtkSr2eZvKYlo2CsJozwFWD \\  -d network=ach\n```\n\n```\n{  \"id\": \"rc_1MtkSr2eZvKYlo2CcysvUbEw\",  \"object\": \"treasury.received_credit\",  \"amount\": 1000,  \"created\": 1680755425,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkSr2eZvKYlo2CsJozwFWD\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOKVuaEGMgagXvSInCY6NpMvimqdsEKNHRrHZ3OGyVm_l5LfDMezNeY83F5Mq-rryXZ-J1z-jfFBv30wz5WxDH97VRBIzw\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"credit_reversal\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"source_flow\": null,    \"source_flow_type\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkSr2eZvKYlo2CuFFh9Rh0\"}\n```",
  "title": "Received Credits | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/tokens",
  "markdown": "# Tokens | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fissuing%2Ftokens)\n\n## [Tokens](https://docs.stripe.com/api/issuing/tokens)Preview feature\n\n## [The Token object](https://docs.stripe.com/api/issuing/tokens/object)Preview feature\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Card associated with this token.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    device\\_fingerprintnullable string\n    \n    The hashed ID derived from the device ID from the card network associated with the token.\n    \n*   The last four digits of the token.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The token service provider / card network associated with the token.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `mastercard`<br><br>MasterCard token service provider. |\n    | `visa`<br><br>Visa token service provider. |\n    \n*   #### \n    \n    network\\_datanullable objectPreview featureExpandable\n    \n    Additional details obtained from the network about the token, primarily related to the token creation process. For security reasons, this is only available to view in the first 24 hours after token creation, based on the `created` value, and will be omitted unless you explicitly request it with [the `expand` parameter](https://docs.stripe.com/api/expanding_objects). Additionally, it’s only available via the [“Retrieve a token” endpoint](https://docs.stripe.com/api/issuing/tokens/retrieve) and [“Update a token status” endpoint](https://docs.stripe.com/api/issuing/tokens/update).\n    \n*   #### \n    \n    network\\_updated\\_attimestamp\n    \n    Time at which the token was last updated by the card network. Measured in seconds since the Unix epoch.\n    \n*   The usage state of the token.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Token is provisioned and usable for payments. |\n    | `deleted`<br><br>Terminal state. Token can no longer be used. |\n    | `requested`<br><br>Token has been requested to be provisioned, but has not completed the activation process. |\n    | `suspended`<br><br>Token temporarily cannot be used for payments. |\n    \n*   #### \n    \n    wallet\\_providernullable enum\n    \n    The digital wallet for this token, if one was used.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `apple_pay`<br><br>Apple Pay. |\n    | `google_pay`<br><br>Google Pay. |\n    | `samsung_pay`<br><br>Samsung Pay. |\n    \n\n```\n{  \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",  \"object\": \"issuing.token\",  \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",  \"created\": 1682059060,  \"network_updated_at\": 1682059060,  \"livemode\": false,  \"status\": \"active\",  \"last4\": \"2424\",  \"token_service_provider\": \"visa\",  \"wallet_provider\": \"apple_pay\",  \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"}\n```\n\n## [Update a token status](https://docs.stripe.com/api/issuing/tokens/update)\n\nAttempts to update the specified Issuing `Token` object to the status specified.\n\n### Parameters\n\n*   Specifies which status the token should be updated to.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Token is provisioned and usable for payments. |\n    | `deleted`<br><br>Terminal state. Token can no longer be used. |\n    | `suspended`<br><br>Token temporarily cannot be used for payments. |\n    \n\n### Returns\n\nReturns an updated Issuing `Token` object if a valid identifier was provided.\n\nPOST /v1/issuing/tokens/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/tokens/intok_1MzDbE2eZvKYlo2C26a98MDg \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d status=suspended\n```\n\n```\n{  \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",  \"object\": \"issuing.token\",  \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",  \"created\": 1682059060,  \"network_updated_at\": 1682059060,  \"livemode\": false,  \"status\": \"suspended\",  \"last4\": \"2424\",  \"token_service_provider\": \"visa\",  \"wallet_provider\": \"apple_pay\",  \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"}\n```\n\n## [Retrieve an issuing token](https://docs.stripe.com/api/issuing/tokens/retrieve)\n\nRetrieves an Issuing `Token` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Token` object if a valid identifier was provided.\n\nGET /v1/issuing/tokens/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/tokens/intok_1MzDbE2eZvKYlo2C26a98MDg \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",  \"object\": \"issuing.token\",  \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",  \"created\": 1682059060,  \"network_updated_at\": 1682059060,  \"livemode\": false,  \"status\": \"active\",  \"last4\": \"2424\",  \"token_service_provider\": \"visa\",  \"wallet_provider\": \"apple_pay\",  \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"}\n```\n\n## [List all issuing tokens for card](https://docs.stripe.com/api/issuing/tokens/list)\n\nLists all Issuing `Token` objects for a given card.\n\n### Parameters\n\n*   The Issuing card identifier to list tokens for.\n    \n*   Only return Issuing tokens that were created during the given date interval.\n    \n*   Select Issuing tokens with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Token is provisioned and usable for payments. |\n    | `deleted`<br><br>Terminal state. Token can no longer be used. |\n    | `requested`<br><br>Token has been requested to be provisioned, but has not completed the activation process. |\n    | `suspended`<br><br>Token temporarily cannot be used for payments. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` tokens, starting after token `starting_after`. Each entry in the array is a separate Issuing `Token` object. If no more tokens are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/issuing/tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d card=ic_1MytUz2eZvKYlo2CZCn5fuvZ\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/tokens\",  \"has_more\": false,  \"data\": [    {      \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",      \"object\": \"issuing.token\",      \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",      \"created\": 1682059060,      \"network_updated_at\": 1682059060,      \"livemode\": false,      \"status\": \"suspended\",      \"last4\": \"2424\",      \"token_service_provider\": \"visa\",      \"wallet_provider\": \"apple_pay\",      \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"    }    {...}    {...}  ],}\n```",
  "title": "Tokens | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/tokens/object",
  "markdown": "# The Token object | Stripe API Reference\n\n## [The Token object](https://docs.stripe.com/api/issuing/tokens/object)Preview feature\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Card associated with this token.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    device\\_fingerprintnullable string\n    \n    The hashed ID derived from the device ID from the card network associated with the token.\n    \n*   The last four digits of the token.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The token service provider / card network associated with the token.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `mastercard`<br><br>MasterCard token service provider. |\n    | `visa`<br><br>Visa token service provider. |\n    \n*   #### \n    \n    network\\_datanullable objectPreview featureExpandable\n    \n    Additional details obtained from the network about the token, primarily related to the token creation process. For security reasons, this is only available to view in the first 24 hours after token creation, based on the `created` value, and will be omitted unless you explicitly request it with [the `expand` parameter](https://docs.stripe.com/api/expanding_objects). Additionally, it’s only available via the [“Retrieve a token” endpoint](https://docs.stripe.com/api/issuing/tokens/retrieve) and [“Update a token status” endpoint](https://docs.stripe.com/api/issuing/tokens/update).\n    \n*   #### \n    \n    network\\_updated\\_attimestamp\n    \n    Time at which the token was last updated by the card network. Measured in seconds since the Unix epoch.\n    \n*   The usage state of the token.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Token is provisioned and usable for payments. |\n    | `deleted`<br><br>Terminal state. Token can no longer be used. |\n    | `requested`<br><br>Token has been requested to be provisioned, but has not completed the activation process. |\n    | `suspended`<br><br>Token temporarily cannot be used for payments. |\n    \n*   #### \n    \n    wallet\\_providernullable enum\n    \n    The digital wallet for this token, if one was used.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `apple_pay`<br><br>Apple Pay. |\n    | `google_pay`<br><br>Google Pay. |\n    | `samsung_pay`<br><br>Samsung Pay. |\n    \n\n```\n{  \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",  \"object\": \"issuing.token\",  \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",  \"created\": 1682059060,  \"network_updated_at\": 1682059060,  \"livemode\": false,  \"status\": \"active\",  \"last4\": \"2424\",  \"token_service_provider\": \"visa\",  \"wallet_provider\": \"apple_pay\",  \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"}\n```\n\n## [Update a token status](https://docs.stripe.com/api/issuing/tokens/update)\n\nAttempts to update the specified Issuing `Token` object to the status specified.\n\n### Parameters\n\n*   Specifies which status the token should be updated to.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Token is provisioned and usable for payments. |\n    | `deleted`<br><br>Terminal state. Token can no longer be used. |\n    | `suspended`<br><br>Token temporarily cannot be used for payments. |\n    \n\n### Returns\n\nReturns an updated Issuing `Token` object if a valid identifier was provided.\n\nPOST /v1/issuing/tokens/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/tokens/intok_1MzDbE2eZvKYlo2C26a98MDg \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d status=suspended\n```\n\n```\n{  \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",  \"object\": \"issuing.token\",  \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",  \"created\": 1682059060,  \"network_updated_at\": 1682059060,  \"livemode\": false,  \"status\": \"suspended\",  \"last4\": \"2424\",  \"token_service_provider\": \"visa\",  \"wallet_provider\": \"apple_pay\",  \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"}\n```\n\n## [Retrieve an issuing token](https://docs.stripe.com/api/issuing/tokens/retrieve)\n\nRetrieves an Issuing `Token` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Token` object if a valid identifier was provided.\n\nGET /v1/issuing/tokens/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/tokens/intok_1MzDbE2eZvKYlo2C26a98MDg \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",  \"object\": \"issuing.token\",  \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",  \"created\": 1682059060,  \"network_updated_at\": 1682059060,  \"livemode\": false,  \"status\": \"active\",  \"last4\": \"2424\",  \"token_service_provider\": \"visa\",  \"wallet_provider\": \"apple_pay\",  \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"}\n```\n\n## [List all issuing tokens for card](https://docs.stripe.com/api/issuing/tokens/list)\n\nLists all Issuing `Token` objects for a given card.\n\n### Parameters\n\n*   The Issuing card identifier to list tokens for.\n    \n*   Only return Issuing tokens that were created during the given date interval.\n    \n*   Select Issuing tokens with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Token is provisioned and usable for payments. |\n    | `deleted`<br><br>Terminal state. Token can no longer be used. |\n    | `requested`<br><br>Token has been requested to be provisioned, but has not completed the activation process. |\n    | `suspended`<br><br>Token temporarily cannot be used for payments. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` tokens, starting after token `starting_after`. Each entry in the array is a separate Issuing `Token` object. If no more tokens are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/issuing/tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d card=ic_1MytUz2eZvKYlo2CZCn5fuvZ\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/tokens\",  \"has_more\": false,  \"data\": [    {      \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",      \"object\": \"issuing.token\",      \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",      \"created\": 1682059060,      \"network_updated_at\": 1682059060,      \"livemode\": false,      \"status\": \"suspended\",      \"last4\": \"2424\",      \"token_service_provider\": \"visa\",      \"wallet_provider\": \"apple_pay\",      \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"    }    {...}    {...}  ],}\n```\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The Token object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/tokens/list",
  "markdown": "# List all issuing tokens for card\n\nLists all Issuing `Token` objects for a given card.\n\n### Parameters\n\n*   The Issuing card identifier to list tokens for.\n    \n*   Only return Issuing tokens that were created during the given date interval.\n    \n*   Select Issuing tokens with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Token is provisioned and usable for payments. |\n    | `deleted`<br><br>Terminal state. Token can no longer be used. |\n    | `requested`<br><br>Token has been requested to be provisioned, but has not completed the activation process. |\n    | `suspended`<br><br>Token temporarily cannot be used for payments. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` tokens, starting after token `starting_after`. Each entry in the array is a separate Issuing `Token` object. If no more tokens are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/issuing/tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d card=ic_1MytUz2eZvKYlo2CZCn5fuvZ\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/tokens\",  \"has_more\": false,  \"data\": [    {      \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",      \"object\": \"issuing.token\",      \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",      \"created\": 1682059060,      \"network_updated_at\": 1682059060,      \"livemode\": false,      \"status\": \"suspended\",      \"last4\": \"2424\",      \"token_service_provider\": \"visa\",      \"wallet_provider\": \"apple_pay\",      \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"    }    {...}    {...}  ],}\n```\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all issuing tokens for card | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/tokens/retrieve",
  "markdown": "# Retrieve an issuing token | Stripe API Reference\n\nRetrieves an Issuing `Token` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Token` object if a valid identifier was provided.\n\nGET /v1/issuing/tokens/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/tokens/intok_1MzDbE2eZvKYlo2C26a98MDg \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",  \"object\": \"issuing.token\",  \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",  \"created\": 1682059060,  \"network_updated_at\": 1682059060,  \"livemode\": false,  \"status\": \"active\",  \"last4\": \"2424\",  \"token_service_provider\": \"visa\",  \"wallet_provider\": \"apple_pay\",  \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"}\n```\n\n## [List all issuing tokens for card](https://docs.stripe.com/api/issuing/tokens/list)\n\nLists all Issuing `Token` objects for a given card.\n\n### Parameters\n\n*   The Issuing card identifier to list tokens for.\n    \n*   Only return Issuing tokens that were created during the given date interval.\n    \n*   Select Issuing tokens with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Token is provisioned and usable for payments. |\n    | `deleted`<br><br>Terminal state. Token can no longer be used. |\n    | `requested`<br><br>Token has been requested to be provisioned, but has not completed the activation process. |\n    | `suspended`<br><br>Token temporarily cannot be used for payments. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` tokens, starting after token `starting_after`. Each entry in the array is a separate Issuing `Token` object. If no more tokens are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/issuing/tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d card=ic_1MytUz2eZvKYlo2CZCn5fuvZ\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/tokens\",  \"has_more\": false,  \"data\": [    {      \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",      \"object\": \"issuing.token\",      \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",      \"created\": 1682059060,      \"network_updated_at\": 1682059060,      \"livemode\": false,      \"status\": \"suspended\",      \"last4\": \"2424\",      \"token_service_provider\": \"visa\",      \"wallet_provider\": \"apple_pay\",      \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"    }    {...}    {...}  ],}\n```\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve an issuing token | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/reports/balance-transaction-types",
  "markdown": "# Balance transaction types | Stripe DocumentationThe Stripe Docs logo\n\n## Learn more about the different types of balance transactions that represent funds moving through your Stripe account.\n\nBalance transactions are our recommended starting point for reporting on your account’s balance activity. We create them for every type of transaction that comes into, or flows out of, your Stripe account’s balance.\n\nYou can create reports that make use of balance transactions using the [API](https://docs.stripe.com/api/) or [Sigma](https://docs.stripe.com/stripe-data/query-transactions).\n\nWhen you first receive a payment in your account, we initially reflect it as a `pending` balance (less any Stripe fees). This balance becomes `available` according to your payout schedule. The [status](https://docs.stripe.com/api#balance_transaction_object-status) attribute on balance transactions indicates the type of the balance.\n\nTo classify transactions for [accounting purposes](https://docs.stripe.com/reports/reporting-categories), use the `reporting_category` field instead of the `type` field.\n\n## Balance transaction source ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBalance transactions include a [source](https://docs.stripe.com/api#balance_transaction_object-source) field that contains the ID of the related Stripe object.\n\nUse the [API](https://docs.stripe.com/api/) to retrieve additional information about the payment activity that caused the creation of the Balance transaction. Using [Sigma](https://docs.stripe.com/stripe-data/query-transactions), you can also join the `balance_transactions` table with other tables using the `source_id` column.\n\n## Balance transaction types ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can organize balance transaction types into different groups based on the underlying activity that generated the balance transactions.\n\nIf you’re not using the Connect API or Issuing API, your balance transactions belong in the first two groups (“related to charges and payments” or “related to Stripe balance changes”).\n\n### Balance transaction types related to charges and payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThese balance transaction types are related to creating and refunding charges as part of processing payments.\n\n| **Type** | **Description** |\n| --- | --- |\n| **charge** | Created when a [credit card charge](https://docs.stripe.com/payments/accept-a-payment-charges) is created successfully. |\n| **payment** | Created when a [local payment method](https://docs.stripe.com/payments/payment-methods/overview) charge is created successfully. |\n| **payment\\_failure\\_refund** | [ACH, direct debit](https://docs.stripe.com/payments/payment-methods/overview), and other [delayed notification payment methods](https://docs.stripe.com/payments/payment-methods#payment-notification) remain in a pending state until they either succeed or fail. You’ll see a pending Balance transaction of type `payment` when the payment is created. Another Balance transaction of type `payment_failure_refund` appears if the pending payment later fails. |\n| **payment\\_refund** | Created when a [local payment method](https://docs.stripe.com/payments/payment-methods/overview) refund is initiated.<br><br>Additionally, if your customer’s bank or card issuer is unable to correctly process a refund (e.g., due to a closed bank account or a problem with the card) Stripe returns the funds to your balance. The returned funds are represented as a Balance transaction with the type `payment_refund`. |\n| **payment\\_reversal** | Created when a debit/failure related to a payment is detected from a banking partner. This balance transaction takes funds that were previously credited to the merchant for a payment out of the merchant balance. |\n| **refund** | Created when a [credit card charge refund](https://docs.stripe.com/refunds) is initiated.<br><br>If you [authorize and capture](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method) separately and the capture amount is less than the initial authorization, you see a balance transaction of type `charge` for the full authorization amount and another balance transaction of type `refund` for the uncaptured portion. |\n| **refund\\_failure** | Created when a [credit card charge refund](https://docs.stripe.com/refunds) fails, and Stripe returns the funds to your balance.<br><br>This may occur if your customer’s bank or card issuer is unable to correctly process a refund (e.g., due to a closed bank account or a problem with the card). |\n\nThese balance transaction types are related to changes that affect your Stripe balance such as payouts, fees and top-ups.\n\n| **Type** | **Description** |\n| --- | --- |\n| **adjustment** | Adjustments correspond to additions or deductions from your Stripe balance that are made outside of the normal charge/refund flow. For example, some of the most common reasons for adjustments are:<br><br>*   **Refund failures**. If your customer’s bank or card issuer is unable to correctly process a refund (e.g., due to a closed bank account or a problem with the card) Stripe returns the funds to your balance. The returned funds are represented as a Balance transaction with the type `adjustment`, where the description indicates the related refund object.<br>*   **Disputes**. When a customer [disputes a charge](https://docs.stripe.com/disputes), Stripe deducts the disputed amount from your balance. The deduction is represented as a Balance transaction with the type `adjustment`, where the source object is a dispute.<br>*   **Dispute reversals**. When you [win a dispute](https://docs.stripe.com/disputes#responding-to-a-dispute), the disputed amount is returned to your balance. The returned funds are represented as a Balance transaction with the type `adjustment`, where the source object is a dispute.<br>*   In the past, fees for Stripe software and services (e.g., for Radar, Connect and Billing) were represented as adjustments.<br>*   In the past, Connect platform fee refunds were represented as adjustments.<br><br>The `description` field on the Balance transaction describes the purpose of each adjustment. |\n| **anticipation\\_repayment** | Repayments made to service an anticipation loan in Brazil. These repayments go to the financial institution to whom you have sold your receivables. |\n| **balance\\_transfer\\_inbound** | Funds moving into a balance (e.g. Issuing balance) from another balance (e.g. Stripe balance) |\n| **balance\\_transfer\\_outbound** | Funds moving from your Stripe balance to a different (e.g. Issuing) balance. |\n| **climate\\_order\\_purchase** | Funds used to purchase carbon removal units from Frontier Climate. |\n| **climate\\_order\\_refund** | Funds refunded to your balance when a Climate Order is canceled. |\n| **contribution** | Funds contributed via Stripe to a cause (currently Stripe Climate). |\n| **obligation\\_outbound** | Obligation for receivable unit received. |\n| **obligation\\_reversal\\_inbound** | Obligation for receivable unit reversed. |\n| **payment\\_network\\_reserve\\_hold** | Funds that a payment network holds in reserve (e.g. to mitigate risk). |\n| **payment\\_network\\_reserve\\_release** | Funds that a payment network releases from a reserve. |\n| **payment\\_unreconciled** | Created when a customer has unreconciled funds within Stripe for more than ninety days. This balance transaction transfers those funds to your balance. |\n| **payout** | [Payouts](https://docs.stripe.com/payouts) from your Stripe balance to your bank account. |\n| **payout\\_cancel** | Created when a payout to your bank account is cancelled and the funds are returned to your Stripe balance. |\n| **payout\\_failure** | Created when a [payout to your bank account fails](https://docs.stripe.com/payouts#payout-failures) and the funds are returned to your Stripe balance. |\n| **reserved\\_funds** | When Stripe holds your funds in reserve to mitigate risk, two balance transactions are created: one to debit the funds from your balance, and a second to credit the funds back to your balance at the end of the reserve period. |\n| **stripe\\_fee** | Fees for Stripe software and services (e.g., for [Radar](https://docs.stripe.com/radar), [Connect](https://docs.stripe.com/connect), [Billing](https://docs.stripe.com/billing), and [Identity](https://docs.stripe.com/identity)). |\n| **stripe\\_fx\\_fee** | Stripe currency conversion fee |\n| **tax\\_fee** | Taxes collected by Stripe to be remitted to the appropriate local governments. Typically, this is a tax on Stripe fees. |\n| **topup** | Funds you transferred into your Stripe balance from your bank account. [Learn more](https://docs.stripe.com/connect/top-ups). |\n| **topup\\_reversal** | If an initially successful top-up fails or is cancelled, the credit to your Stripe balance is reversed. [Learn more](https://docs.stripe.com/connect/top-ups). |\n\nThese balance transaction types are created as part of using the [Issuing API](https://docs.stripe.com/issuing).\n\n| **Type** | **Description** |\n| --- | --- |\n| **issuing\\_authorization\\_hold** | When [an issued card](https://docs.stripe.com/issuing) is used to make a purchase, an [authorization](https://docs.stripe.com/issuing/purchases/authorizations) is created. If the authorization is approved, a balance transaction is created with the type `issuing_authorization_hold` to hold the authorized amount in reserve from your account balance, until the authorization is either captured or voided. Some merchants can also update an authorization to request an additional amount (e.g., to extend a hotel booking or add a tip), and this is also represented as a balance transaction with the type `issuing_authorization_hold`. |\n| **issuing\\_authorization\\_release** | When an authorized purchase, made with [an issued card](https://docs.stripe.com/issuing), is captured by the merchant, the funds previously held for the authorization (`issuing_authorization_hold`) are released with a `issuing_authorization_release` balance transaction. Simultaneously, [an issuing transaction](https://docs.stripe.com/issuing/transactions) is created, and the purchase amount is deducted from your Stripe balance in another balance transaction with the type `issuing_transaction`. |\n| **issuing\\_dispute** | When you dispute an [Issuing transaction](https://docs.stripe.com/issuing/transactions) and funds return to your Stripe balance. |\n| **issuing\\_transaction** | When an authorized purchase, made with an [issued card](https://docs.stripe.com/issuing), has been authorized and captured by the merchant, [an issuing transaction](https://docs.stripe.com/issuing/transactions) is created, and the purchase amount is deducted from your Stripe balance with a `issuing_transaction` balance transaction. |\n\nThese balance transaction types are related to using the [Connect API](https://docs.stripe.com/connect) and related APIs, such as [instant payouts](https://docs.stripe.com/connect/instant-payouts).\n\n| **Type** | **Description** |\n| --- | --- |\n| **advance** | Incrementing available funds for [instant payouts](https://docs.stripe.com/connect/instant-payouts). This occurs when you create an instant payout and the requested payout amount is greater than your connected account’s available balance. Funds are added to your available balance and removed from your pending balance to cover the difference. |\n| **advance\\_funding** | Decrementing pending funds for [instant payouts](https://docs.stripe.com/connect/instant-payouts). This occurs when you create an instant payout and the requested payout amount is greater than your connected account’s available balance. Funds are added to your available balance and removed from your pending balance to cover the difference. |\n| **application\\_fee** | Earnings you’ve generated by collecting [platform fees](https://docs.stripe.com/connect/direct-charges#collect-fees) via [Stripe Connect charges](https://docs.stripe.com/connect/charges). |\n| **application\\_fee\\_refund** | [Platform fees](https://docs.stripe.com/connect/direct-charges#collect-fees) that you have returned to your connected accounts. |\n| **connect\\_collection\\_transfer** | If one of your connected accounts has a negative balance for 180 days, Stripe transfers a portion of your balance, to zero out that account’s balance. [Learn more](https://docs.stripe.com/connect/account-balances#understanding-connected-reserve-balances). |\n| **reserve\\_transaction** | If one of your connected accounts’ balances becomes negative, Stripe temporarily reserves a portion of your balance to ensure that funds can be covered.<br><br>If one of your connected accounts’ previously negative balance becomes less negative due to activity on account, another `reserve_transaction` is created to release a corresponding portion of the funds held in reserve. [Learn more](https://docs.stripe.com/connect/account-balances#understanding-connected-reserve-balances). |\n| **transfer** | Funds sent from your balance to the balance of your [connected accounts](https://docs.stripe.com/connect/separate-charges-and-transfers). |\n| **transfer\\_cancel** | Transfers to your connected accounts that have been cancelled. |\n| **transfer\\_failure** | Transfers to your connected accounts that failed. Transfer failures add to your platform’s balance and subtract from the connected account’s balance. |\n| **transfer\\_refund** | Transfers to your connected accounts that you [reversed](https://docs.stripe.com/connect/separate-charges-and-transfers#reversing-transfers) or that were reversed as a result of a failure in [payments](https://docs.stripe.com/payments/payment-methods/overview) made through ACH, direct debit, and other [delayed notification payment methods](https://docs.stripe.com/payments/payment-methods#payment-notification). Transfer reversals add to your platform’s balance and subtract from the connected account’s balance. |",
  "title": "Balance transaction types | Stripe Documentation",
  "description": "Learn more about the different types of balance transactions that represent funds moving through your Stripe account.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/tokens/update",
  "markdown": "# Update a token status | Stripe API Reference\n\nAttempts to update the specified Issuing `Token` object to the status specified.\n\n### Parameters\n\n*   Specifies which status the token should be updated to.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Token is provisioned and usable for payments. |\n    | `deleted`<br><br>Terminal state. Token can no longer be used. |\n    | `suspended`<br><br>Token temporarily cannot be used for payments. |\n    \n\n### Returns\n\nReturns an updated Issuing `Token` object if a valid identifier was provided.\n\nPOST /v1/issuing/tokens/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/tokens/intok_1MzDbE2eZvKYlo2C26a98MDg \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d status=suspended\n```\n\n```\n{  \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",  \"object\": \"issuing.token\",  \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",  \"created\": 1682059060,  \"network_updated_at\": 1682059060,  \"livemode\": false,  \"status\": \"suspended\",  \"last4\": \"2424\",  \"token_service_provider\": \"visa\",  \"wallet_provider\": \"apple_pay\",  \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"}\n```\n\n## [Retrieve an issuing token](https://docs.stripe.com/api/issuing/tokens/retrieve)\n\nRetrieves an Issuing `Token` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Token` object if a valid identifier was provided.\n\nGET /v1/issuing/tokens/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/tokens/intok_1MzDbE2eZvKYlo2C26a98MDg \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",  \"object\": \"issuing.token\",  \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",  \"created\": 1682059060,  \"network_updated_at\": 1682059060,  \"livemode\": false,  \"status\": \"active\",  \"last4\": \"2424\",  \"token_service_provider\": \"visa\",  \"wallet_provider\": \"apple_pay\",  \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"}\n```\n\n## [List all issuing tokens for card](https://docs.stripe.com/api/issuing/tokens/list)\n\nLists all Issuing `Token` objects for a given card.\n\n### Parameters\n\n*   The Issuing card identifier to list tokens for.\n    \n*   Only return Issuing tokens that were created during the given date interval.\n    \n*   Select Issuing tokens with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>Token is provisioned and usable for payments. |\n    | `deleted`<br><br>Terminal state. Token can no longer be used. |\n    | `requested`<br><br>Token has been requested to be provisioned, but has not completed the activation process. |\n    | `suspended`<br><br>Token temporarily cannot be used for payments. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` tokens, starting after token `starting_after`. Each entry in the array is a separate Issuing `Token` object. If no more tokens are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/issuing/tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d card=ic_1MytUz2eZvKYlo2CZCn5fuvZ\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/tokens\",  \"has_more\": false,  \"data\": [    {      \"id\": \"intok_1MzDbE2eZvKYlo2C26a98MDg\",      \"object\": \"issuing.token\",      \"card\": \"ic_1MytUz2eZvKYlo2CZCn5fuvZ\",      \"created\": 1682059060,      \"network_updated_at\": 1682059060,      \"livemode\": false,      \"status\": \"suspended\",      \"last4\": \"2424\",      \"token_service_provider\": \"visa\",      \"wallet_provider\": \"apple_pay\",      \"device_fingerprint\": \"intd_1MzDbE2eZvKYcp3095svdf\"    }    {...}    {...}  ],}\n```\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Update a token status | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/transactions/test_mode_refund",
  "markdown": "# Refund a test-mode transaction | Stripe API Reference\n\n## [Refund a test-mode transaction](https://docs.stripe.com/api/issuing/transactions/test_mode_refund)Test helper\n\nRefund a test-mode Transaction.\n\n### Parameters\n\n*   The total amount to attempt to refund. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n\n### Returns\n\nA `Transaction` object. This will be the `Transaction` object of type `capture` referenced in the request’s URL, not the new `Transaction` object of type `refund` that will be created as a side-effect of this API call. To find the newly created `Transaction` object, you can use the [Retrieve an authorization](https://stripe.com/docs/api/issuing/authorizations/retrieve) API, whose response will contain a list of related `Transaction` IDs, including the newly created `Transaction` of type `refund`. You can also use the [List all transactions](https://stripe.com/docs/api/issuing/transactions/list) API, or listen for the `issuing_transaction.created` webhook event to retrieve the newly created `Transaction` of type `refund`.\n\nPOST /v1/test\\_helpers/issuing/transactions/:id/refund\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/transactions/ipi_1GswaK2eZvKYlo2Co7wmNJhD/refund \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d refund_amount=1000\n```\n\n```\n{  \"id\": \"ipi_1GswaK2eZvKYlo2Co7wmNJhD\",  \"object\": \"issuing.transaction\",  \"amount\": -1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"authorization\": \"iauth_1GswaJ2eZvKYlo2Ct9mFMJ4S\",  \"balance_transaction\": \"txn_1GswaK2eZvKYlo2CJAFFIuHg\",  \"card\": \"ic_1Gswa82eZvKYlo2CP2jveFil\",  \"cardholder\": \"ich_1Gswa82eZvKYlo2CvobneLSo\",  \"created\": 1591905672,  \"currency\": \"usd\",  \"dispute\": null,  \"livemode\": false,  \"merchant_amount\": -1000,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE.COM\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"redaction\": null,  \"type\": \"capture\",  \"wallet\": null}\n```\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Refund a test-mode transaction | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/transactions/test_mode_create_unlinked_refund",
  "markdown": "# Create a test-mode unlinked refund\n\n## [Create a test-mode unlinked refund](https://docs.stripe.com/api/issuing/transactions/test_mode_create_unlinked_refund)Test helper\n\nAllows the user to refund an arbitrary amount, also known as a unlinked refund.\n\n### Parameters\n\n*   The total amount to attempt to refund. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   Card associated with this unlinked refund transaction.\n    \n*   The currency of the unlinked refund. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).\n    \n\n### More parameters\n\n### Returns\n\nA Transaction object\n\nPOST /v1/test\\_helpers/issuing/transactions/create\\_unlinked\\_refund\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/transactions/create_unlinked_refund \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d card=ic_1Gswa82eZvKYlo2CP2jveFil\n```\n\n```\n{  \"id\": \"ipi_1GswaK2eZvKYlo2Co7wmNJhD\",  \"object\": \"issuing.transaction\",  \"amount\": -1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"authorization\": \"iauth_1GswaJ2eZvKYlo2Ct9mFMJ4S\",  \"balance_transaction\": \"txn_1GswaK2eZvKYlo2CJAFFIuHg\",  \"card\": \"ic_1Gswa82eZvKYlo2CP2jveFil\",  \"cardholder\": \"ich_1Gswa82eZvKYlo2CvobneLSo\",  \"created\": 1591905672,  \"currency\": \"usd\",  \"dispute\": null,  \"livemode\": false,  \"merchant_amount\": -1000,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE.COM\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"redaction\": null,  \"type\": \"capture\",  \"wallet\": null}\n```\n\n## [Refund a test-mode transaction](https://docs.stripe.com/api/issuing/transactions/test_mode_refund)Test helper\n\nRefund a test-mode Transaction.\n\n### Parameters\n\n*   The total amount to attempt to refund. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n\n### Returns\n\nA `Transaction` object. This will be the `Transaction` object of type `capture` referenced in the request’s URL, not the new `Transaction` object of type `refund` that will be created as a side-effect of this API call. To find the newly created `Transaction` object, you can use the [Retrieve an authorization](https://stripe.com/docs/api/issuing/authorizations/retrieve) API, whose response will contain a list of related `Transaction` IDs, including the newly created `Transaction` of type `refund`. You can also use the [List all transactions](https://stripe.com/docs/api/issuing/transactions/list) API, or listen for the `issuing_transaction.created` webhook event to retrieve the newly created `Transaction` of type `refund`.\n\nPOST /v1/test\\_helpers/issuing/transactions/:id/refund\n\n```\ncurl https://api.stripe.com/v1/test_helpers/issuing/transactions/ipi_1GswaK2eZvKYlo2Co7wmNJhD/refund \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d refund_amount=1000\n```\n\n```\n{  \"id\": \"ipi_1GswaK2eZvKYlo2Co7wmNJhD\",  \"object\": \"issuing.transaction\",  \"amount\": -1000,  \"amount_details\": {    \"atm_fee\": null,    \"cashback_amount\": null  },  \"authorization\": \"iauth_1GswaJ2eZvKYlo2Ct9mFMJ4S\",  \"balance_transaction\": \"txn_1GswaK2eZvKYlo2CJAFFIuHg\",  \"card\": \"ic_1Gswa82eZvKYlo2CP2jveFil\",  \"cardholder\": \"ich_1Gswa82eZvKYlo2CvobneLSo\",  \"created\": 1591905672,  \"currency\": \"usd\",  \"dispute\": null,  \"livemode\": false,  \"merchant_amount\": -1000,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE.COM\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\",    \"terminal_id\": null  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"redaction\": null,  \"type\": \"capture\",  \"wallet\": null}\n```\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Create a test-mode unlinked refund | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/debit_reversals",
  "markdown": "# Debit Reversals | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftreasury%2Fdebit_reversals)\n\n## [The DebitReversal object](https://docs.stripe.com/api/treasury/debit_reversals/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   #### \n    \n    financial\\_accountnullable string\n    \n    The FinancialAccount to reverse funds from.\n    \n*   #### \n    \n    hosted\\_regulatory\\_receipt\\_urlnullable string\n    \n    A [hosted transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe’s money transmission licenses.\n    \n*   #### \n    \n    linked\\_flowsnullable object\n    \n    Other flows linked to a DebitReversal.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The rails used to reverse the funds.\n    \n*   The ReceivedDebit being reversed.\n    \n*   Status of the DebitReversal\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `failed`<br><br>The network has resolved the DebitReversal against the user. |\n    | `processing`<br><br>The DebitReversal starting state. |\n    | `succeeded`<br><br>The network has resolved the DebitReversal in the users favour. A crediting Transaction is created. |\n    \n*   Hash containing timestamps of when the object transitioned to a particular `status`.\n    \n*   #### \n    \n    transactionnullable stringExpandable\n    \n    The Transaction associated with this object.\n    \n\n```\n{  \"id\": \"debrev_1MtkMLLkdIwHu7ixIcVctOKK\",  \"object\": \"treasury.debit_reversal\",  \"amount\": 1000,  \"created\": 1680755021,  \"currency\": \"usd\",  \"financial_account\": \"fa_1MtkMLLkdIwHu7ixrkGP4bqB\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KM6SuaEGMgaqNYp8YbE6NpNWYhI1PSbr_jlZwdPHUJHYBRG6-5T1Bmpq4GkpUhVvzLMDWZWkMVIveXHgiVwLUgpMM4Jx8w\",  \"linked_flows\": null,  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_debit\": \"rd_1MtkMLLkdIwHu7ixoiUFN4qd\",  \"status\": \"processing\",  \"status_transitions\": {    \"completed_at\": null  },  \"transaction\": \"trxn_1MtkMLLkdIwHu7ix2BG3LwWW\"}\n```\n\n## [Create a DebitReversal](https://docs.stripe.com/api/treasury/debit_reversals/create)\n\nReverses a ReceivedDebit and creates a DebitReversal object.\n\n### Parameters\n\n*   #### \n    \n    received\\_debitstringRequired\n    \n    The ReceivedDebit to reverse.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a DebitReversal object.\n\nPOST /v1/treasury/debit\\_reversals\n\n```\ncurl https://api.stripe.com/v1/treasury/debit_reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d received_debit=rd_1MtkMLLkdIwHu7ixoiUFN4qd\n```\n\n```\n{  \"id\": \"debrev_1MtkMLLkdIwHu7ixIcVctOKK\",  \"object\": \"treasury.debit_reversal\",  \"amount\": 1000,  \"created\": 1680755021,  \"currency\": \"usd\",  \"financial_account\": \"fa_1MtkMLLkdIwHu7ixrkGP4bqB\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KM6SuaEGMgaqNYp8YbE6NpNWYhI1PSbr_jlZwdPHUJHYBRG6-5T1Bmpq4GkpUhVvzLMDWZWkMVIveXHgiVwLUgpMM4Jx8w\",  \"linked_flows\": null,  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_debit\": \"rd_1MtkMLLkdIwHu7ixoiUFN4qd\",  \"status\": \"processing\",  \"status_transitions\": {    \"completed_at\": null  },  \"transaction\": \"trxn_1MtkMLLkdIwHu7ix2BG3LwWW\"}\n```\n\n## [Retrieve a DebitReversal](https://docs.stripe.com/api/treasury/debit_reversals/retrieve)\n\nRetrieves a DebitReversal object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a DebitReversal object.\n\nGET /v1/treasury/debit\\_reversals/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/debit_reversals/debrev_1MtkMLLkdIwHu7ixIcVctOKK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"debrev_1MtkMLLkdIwHu7ixIcVctOKK\",  \"object\": \"treasury.debit_reversal\",  \"amount\": 1000,  \"created\": 1680755021,  \"currency\": \"usd\",  \"financial_account\": \"fa_1MtkMLLkdIwHu7ixrkGP4bqB\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KM6SuaEGMgaqNYp8YbE6NpNWYhI1PSbr_jlZwdPHUJHYBRG6-5T1Bmpq4GkpUhVvzLMDWZWkMVIveXHgiVwLUgpMM4Jx8w\",  \"linked_flows\": null,  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_debit\": \"rd_1MtkMLLkdIwHu7ixoiUFN4qd\",  \"status\": \"processing\",  \"status_transitions\": {    \"completed_at\": null  },  \"transaction\": \"trxn_1MtkMLLkdIwHu7ix2BG3LwWW\"}\n```\n\n## [List all DebitReversals](https://docs.stripe.com/api/treasury/debit_reversals/list)\n\nReturns a list of DebitReversals.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return DebitReversals for the ReceivedDebit ID.\n    \n*   Only return DebitReversals for a given resolution.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `lost`<br><br>DebitReversal was lost, and no Transactions will be created. |\n    | `won`<br><br>DebitReversal was won, and a crediting Transaction will be created. |\n    \n*   Only return DebitReversals for a given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>The DebitReversal has been canceled before it has been sent to the network and no funds have been returned to the account. (Currently not supported). |\n    | `completed`<br><br>The network has provided a resolution for the DebitReversal. If won, a crediting Transaction is created. |\n    | `processing`<br><br>The DebitReversal starting state. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` DebitReversals, starting after DebitReversal `starting_after`. Each entry in the array is a separate DebitReversal object. If no more DebitReversals are available, the resulting array will be empty.\n\nGET /v1/treasury/debit\\_reversals\n\n```\ncurl -G https://api.stripe.com/v1/treasury/debit_reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkMLLkdIwHu7ixrkGP4bqB \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/debit_reversals\",  \"has_more\": false,  \"data\": [    {      \"id\": \"debrev_1MtkMLLkdIwHu7ixIcVctOKK\",      \"object\": \"treasury.debit_reversal\",      \"amount\": 1000,      \"created\": 1680755021,      \"currency\": \"usd\",      \"financial_account\": \"fa_1MtkMLLkdIwHu7ixrkGP4bqB\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xTTJKVGtMa2RJd0h1N2l4KM6SuaEGMgaqNYp8YbE6NpNWYhI1PSbr_jlZwdPHUJHYBRG6-5T1Bmpq4GkpUhVvzLMDWZWkMVIveXHgiVwLUgpMM4Jx8w\",      \"linked_flows\": null,      \"livemode\": false,      \"metadata\": {},      \"network\": \"ach\",      \"received_debit\": \"rd_1MtkMLLkdIwHu7ixoiUFN4qd\",      \"status\": \"processing\",      \"status_transitions\": {        \"completed_at\": null      },      \"transaction\": \"trxn_1MtkMLLkdIwHu7ix2BG3LwWW\"    }    {...}    {...}  ],}\n```",
  "title": "Debit Reversals | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/account_links",
  "markdown": "# Account Links | Stripe API Reference\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [The Account Link object](https://docs.stripe.com/api/account_links/object)\n\n### Attributes\n\n*   The timestamp at which this account link will expire.\n    \n*   The URL for the account link.\n    \n\n### More attributes\n\n```\n{  \"object\": \"account_link\",  \"created\": 1680577733,  \"expires_at\": 1680578033,  \"url\": \"https://connect.stripe.com/setup/c/acct_1Mt0CORHFI4mz9Rw/TqckGNUHg2mG\"}\n```\n\n## [Create an account link](https://docs.stripe.com/api/account_links/create)\n\nCreates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.\n\n### Parameters\n\n*   The identifier of the account to create an account link for.\n    \n*   The type of account link the user is requesting. Possible values are `account_onboarding` or `account_update`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `account_onboarding`<br><br>Provides a form for inputting outstanding requirements. Send the user to the form in this mode to just collect the new information you need. |\n    | `account_update`<br><br>Displays the fields that are already populated on the account object, and allows your user to edit previously provided information. Consider framing this as “edit my profile” or “update my verification information”. |\n    \n*   #### \n    \n    refresh\\_urlstringRequired\n    \n    The URL the user will be redirected to if the account link is expired, has been previously-visited, or is otherwise invalid. The URL you specify should attempt to generate a new account link with the same parameters used to create the original account link, then redirect the user to the new account link’s URL so they can continue with Connect Onboarding. If a new account link cannot be generated or the redirect fails you should display a useful error to the user.\n    \n*   The URL that the user will be redirected to upon leaving or completing the linked flow.\n    \n\n### More parameters\n\n### Returns\n\nReturns an account link object if the call succeeded.\n\n```\ncurl https://api.stripe.com/v1/account_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d account=acct_1Mt0CORHFI4mz9Rw \\  --data-urlencode refresh_url=\"https://example.com/reauth\" \\  --data-urlencode return_url=\"https://example.com/return\" \\  -d type=account_onboarding\n```\n\n```\n{  \"object\": \"account_link\",  \"created\": 1680577733,  \"expires_at\": 1680578033,  \"url\": \"https://connect.stripe.com/setup/c/acct_1Mt0CORHFI4mz9Rw/TqckGNUHg2mG\"}\n```\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Account Links | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/moving-money/financial-accounts/into/inbound-transfers",
  "markdown": "# Moving money with Treasury using InboundTransfer objects\n\n## Learn how to transfer money from another account you own into a Treasury financial account.\n\nInbound transfers move money from an external US bank account into a financial account using the ACH network. These transfers are initiated with [InboundTransfer](https://docs.stripe.com/api/treasury/inbound_transfers) objects.\n\nInbound transfers take 2-4 business days to complete unless you’re using the same-day ACH capability. For more information, see the [Money movement timelines](https://docs.stripe.com/treasury/money-movement/timelines#inboundtransfer-transactions) guide.\n\n#### Note\n\nYou can use inbound transfers to move funds from a financial account owner’s bank account. To accept funds from an external party into a financial account, use an [ACH Debit](https://docs.stripe.com/payments/ach-debit/accept-a-payment) into the Payments balance, followed by a [payout to the financial account](https://docs.stripe.com/treasury/moving-money/payouts).\n\n[](#createibt)\n\nUse `POST /v1/treasury/inbound_transfers` to create an `InboundTransfer` object, which represents pull-based transfers from an external account that you own into your financial account. In other words, you create an `InboundTransfer` to move funds into your financial account by debiting your external US bank account. You must include the following parameters with your request:\n\n*   `amount`: The amount in cents to be transferred into the financial account.\n*   `currency`: Three-letter ISO currency code (`usd` is currently the only supported value).\n*   `financial_account`: The ID of the financial account receiving the transfer.\n*   `origin_payment_method`: The source of funds for the inbound transfer. You must first set up the account-attached payment method for inbound flows and verify the bank account using a [SetupIntent](https://docs.stripe.com/api/setup_intents). Alternatively, you can use an existing [BankAccount](https://docs.stripe.com/api/customer_bank_accounts) previously set up as a verified [ExternalAccount](https://docs.stripe.com/api/external_accounts). Whether you use a payment method or a bank account, you need the [account owner’s permission](https://docs.stripe.com/treasury/moving-money/working-with-bankaccount-objects) to debit the funds from the account.\n\nThe following JSON shows the data you can include in the body of your request.\n\n`{   // The source PaymentMethod or BankAccount. Funds are pulled from this account.   \"origin_payment_method\": \"{{PAYMENT_METHOD_ID}}\" | \"{{BANK_ACCOUNT_ID}}\",   // The destination FinancialAccount. Funds arrive in this account.   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   // The amount to debit. 10.00 USD in this case.   \"amount\": 1000,   \"currency\": \"usd\",   // An optional, internal description for the InboundTransfer.   \"description\": \"Funds for vendor payment payment_234281\",   // An optional descriptor for the InboundTransfer to send   // to the network with the debit request. Max 10 characters   \"statement_descriptor\": \"payment_1\",   // Stripe does not support updating InboundTransfers after creation.   // You can only set metadata at creation time.   \"metadata\": null | {{Hash}} }`\n\nThe following request transfers 200 USD using an account-attached payment method into the financial account with the provided ID. The `Stripe-Account` header value identifies the Stripe account that owns both the financial account and the payment method.\n\n`curl https://api.stripe.com/v1/treasury/inbound_transfers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d origin_payment_method=  {{PAYMENT_METHOD_ID}}   \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d amount=20000 \\  -d currency=usd \\  -d description=\"Funds for repair\" \\  -d statement_descriptor=\"Invoice 12\"`\n\nIf successful, the response provides the `InboundTransfer` object. The object includes a `hosted_regulatory_receipt_url` that provides access to details of the transaction for the account holder on your platform.\n\n`{     \"id\": \"{{INBOUND_TRANSFER_ID}}\",     \"object\": \"inbound_transfer\",     \"amount\": 20000,     \"created\": 1648071297,     \"currency\": \"usd\",     \"description\": \"Funds for repair\",     \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",     \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/{{IBT_URL}}\",     \"linked_flows\": null,     \"livemode\": false,     \"metadata\": {},     \"origin_payment_method\": \"{{PAYMENT_METHOD_ID}}\",     ...     \"statement_descriptor\": \"Invoice 12\",     \"status\": \"processing\",     ... }`\n\n#### Warning\n\nIn rare cases, Stripe might cancel an InboundTransfer request due to various risk factors. In these scenarios, the API request errors with response code 402. The error message provides additional detail on the risk factors that led to the intervention.\n\n### Same-day ACH![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Beta\n\nSame-day ACH is currently in beta with limited availability, subject to Stripe review and approval. To request access, email [treasury-support@stripe.com](mailto:treasury-support@stripe.com).\n\nIf you don’t have access, API calls that include same-day ACH features or parameters return an error.\n\nUsing same-day ACH enables funds to arrive in the originating financial account within the same business day if the `InboundTransfer` call successfully completes before the [cutoff time](https://docs.stripe.com/treasury/money-movement/timelines#evolve-bank-and-trust--inbound). To use same-day ACH, set the `origin_payment_method_options.us_bank_account.ach.submission` parameter to `same_day`.\n\n#### Note\n\nThe fast settlement of same-day ACH inbound transfers can expose your platform to greater financial risk than from standard ACH inbound transfers. For example, a connected account can initiate an inbound transfer that gets returned due to insufficient funds in the source account. Same-day settlement leaves more time to potentially withdraw the funds from the financial account before they’re returned. If the connected account withdraws the funds, and then the return causes a negative balance in the financial account, [your platform is responsible](https://docs.stripe.com/treasury/account-management/working-with-balances-and-transactions#overdrafts)\n\n[](#getibt)\n\nUse `GET /v1/treasury/inbound_transfers/{{INBOUND_TRANSFER_ID}}` to retrieve the `InboundTransfer` object with the associated ID.\n\nThe following JSON shows the data you can include in the body of your request. Some of the parameters in the response have additional details that are only returned when you add them as values to the `expand[]` parameter. The fields that you can expand have an “Expandable” comment in the following response example. See [Expanding Responses](https://docs.stripe.com/api/expanding_objects) to learn more about expanding object responses.\n\n`{   \"id\": \"{{INBOUND_TRANSFER_ID}}\",   \"object\": \"inbound_transfer\",   \"livemode\": false,   \"created\": \"{{Timestamp}}\",   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\", // Expandable   \"amount\": 1000,   \"currency\": \"usd\",   // The only current valid PaymentMethod type for InboundTransfers is us_bank_account   \"origin_payment_method\": \"{{PAYMENT_METHOD_ID}}\",`\n\nThe following request retrieves the `InboundTransfer` with the `id` value of `{{INBOUND_TRANSFER_ID}}`. Including `transaction` in the `expand[]` array of the body returns the relevant expanded information.\n\n`curl -G https://api.stripe.com/v1/treasury/inbound_transfers/{{INBOUND_TRANSFER_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"expand[]\"=financial_account`\n\nIf successful, the response returns the `InboundTransfer` object with the expanded information.\n\n`{     \"id\": \"{{INBOUND_TRANSFER_ID}}\",     \"object\": \"inbound_transfer\",     \"amount\": 20000,     \"created\": 1648071297,     \"currency\": \"usd\",     \"description\": \"Inbound transfer\",     \"failure_details\": null,     \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",     \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/{{INBOUND_TRANSFER_ID}}\",`\n\n[](#listibt)\n\nUse `GET /v1/treasury/inbound_transfers` to retrieve all the `InboundTransfers` for the financial account with the associated ID. You can filter the list with the standard list parameters or by `status`.\n\n`{   // Standard list parameters   \"limit\", \"starting_after\", \"ending_before\",   // Filter by status   \"status\": \"processing\" | \"succeeded\" | \"failed\",   // Filter by FinancialAccount (Required)   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\", // Required }`\n\nThe following request retrieves all the inbound transfers with a status of `succeeded` for the financial account with ID `{{FINANCIAL_ACCOUNT_ID}}`, which is attached to the connected account with ID `{{CONNECTED_ACCOUNT_ID}}`.\n\n`curl -G https://api.stripe.com/v1/treasury/inbound_transfers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d status=succeeded`\n\n[](#ibtstates)\n\nThe following table describes each status and what the possible transition states are.\n\n| STATUS | DESCRIPTION | TRANSITIONS TO STATE |\n| --- | --- | --- |\n| `processing` | The `InboundTransfer` creation succeeded. Stripe instructs movement of funds on the network. | `failed`, `canceled`, `succeeded` |\n| `failed` (terminal) | The `InboundTransfer` failed to confirm. No transaction was created, and the `payment_method` hasn’t been debited. | N/A |\n| `canceled` (terminal) | The `InboundTransfer` was canceled prior to submission to the network. Stripe voids the transaction and no funds are moved from the external bank account. | N/A |\n| `succeeded` (terminal) | The `InboundTransfer` succeeded and funds have landed in the account. A Transaction has been created. InboundTransfers can be returned after succeeding if the external account pulls back their funds, which is represented by a linked ReceivedDebit. | N/A |\n\n[](#testingibts)\n\nTo test your integration end-to-end, use the [SetupIntents requests in test mode](https://docs.stripe.com/api/setup_intents) to create a `PaymentMethod`, then pass that `PaymentMethod` into an `InboundTransfer` creation request. Valid `PaymentMethods` result in succeeded `InboundTransfers`, while invalid `PaymentMethods` (for example, of unsupported types, containing an unverified bank account, or not set up for inbound flows) throw the same errors as in live mode.\n\n[](#testingibtstate)\n\nStripe also provides a set of test `PaymentMethod` tokens you can use to trigger specific state transitions:\n\n| PAYMENT\\_METHOD VALUE | RESULT |\n| --- | --- |\n| `pm_usBankAccount` | `InboundTransfer` that transitions from `processing` to `succeeded`. |\n| `pm_usBankAccount_processing` | `InboundTransfer` that remains in the `processing` state. |\n| `pm_usBankAccount_internalFailure` | `InboundTransfer` that transitions from `processing` to `failed`. |\n\nTo test various edge cases more quickly, `PaymentMethod` tokens simulate specific failure types:\n\n| PAYMENT\\_METHOD VALUE | RESULT |\n| --- | --- |\n| `pm_usBankAccount_noAccount` | `InboundTransfer` that transitions to failed with `failure_details.code= \"no_account\"`. |\n| `pm_usBankAccount_accountClosed` | `InboundTransfer` that transitions to `failed` with `failure_details.code= \"account_closed\"`. |\n| `pm_usBankAccount_invalidAccountNumber` | `InboundTransfer` that transitions to failed with `failure_details.code= \"invalid_account_number\"`. |\n| `pm_usBankAccount_insufficientFunds` | `InboundTransfer` that transitions to failed with `failure_details.code= \"insufficient_funds\"`. |\n| `pm_usBankAccount_debitNotAuthorized` | `InboundTransfer` that transitions to failed with `failure_details.code= \"debit_not_authorized\"`. |\n| `pm_usBankAccount_dispute` | `InboundTransfer` that transitions from `processing` to `succeeded` and is later disputed. `inbound_transfer.returned` becomes `true`, and a linked `ReceivedDebit` is created. |\n\nIn all cases, the `InboundTransfer` response begins in the `processing` state. You receive [webhooks](https://docs.stripe.com/webhooks) for each relevant state transition, and fetching the `InboundTransfer` after creation returns the expected state.\n\n[](#ibthelperendpoints)\n\nStripe also provides endpoints that enable you to test `InboundTransfers` in different states. Create an `InboundTransfer`, then:\n\n*   Use the [test `succeed` endpoint](https://docs.stripe.com/api/treasury/inbound_transfers/test_mode_succeed) to move the transfer with the associated ID directly into the `succeeded` state.\n    \n    `POST /v1/test_helpers/treasury/inbound_transfers/{{INBOUND_TRANSFER_ID}}/succeed`\n    \n*   Use the [test fail endpoint](https://docs.stripe.com/api/treasury/inbound_transfers/test_mode_fail) to move the transfer with the associated ID directly into the `failed` state.\n    \n    `POST /v1/test_helpers/treasury/inbound_transfers/{{INBOUND_TRANSFER_ID}}/fail`\n    \n\nThese endpoints are particularly useful when testing error scenarios, such as returns, which would otherwise require action from the external account the InboundTransfer was pulling funds from.\n\nInclude the optional `failure_details.code` parameter in the body to indicate why the transfer failed. If you don’t provide it, the transfer fails with the default `could_not_process` failure code.\n\n`{   \"failure_details\": {     \"code\": \"account_closed\" |           \"account_frozen\" |           \"bank_account_restricted\" |           \"bank_ownership_changed\" |           \"could_not_process\" | // Generic fallback code           \"invalid_account_number\" |           \"incorrect_account_holder_name\" |           \"invalid_currency\" |           \"no_account\"   } }`\n\nTreasury also provides a `return` endpoint to simulate an InboundTransfer that succeeds, but is later returned.\n\nUse the [test return endpoint](https://docs.stripe.com/api/treasury/inbound_transfers/test_mode_return) to initiate the simulated return on the `InboundTransfer` with the associated ID.\n\n`POST /v1/test_helpers/treasury/inbound_transfers/{{INBOUND_TRANSFER_ID}}/return`\n\nAll test endpoints trigger [webhooks](https://docs.stripe.com/webhooks) for each relevant state transition, and fetching the `InboundTransfer` after transition returns the expected state.\n\n[](#ibtwebhooks)\n\nStripe emits the following `InboundTransfer` events to your [webhook](https://docs.stripe.com/webhooks) endpoint:\n\n*   `treasury.inbound_transfer.created` on `InboundTransfer` creation.\n*   `treasury.inbound_transfer.{{new_status}}` when an `InboundTransfer` changes status. Available status value options include:\n    *   `treasury.inbound_transfer.succeeded`\n    *   `treasury.inbound_transfer.failed`",
  "title": "Moving money with Treasury using InboundTransfer objects | Stripe Documentation",
  "description": "Learn how to transfer money from another account you own into a Treasury financial account.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/outbound-transfers",
  "markdown": "# Moving money with Treasury using OutboundTransfer objects\n\n## Learn how to transfer money out of Treasury financial accounts to external accounts.\n\nAn `OutboundTransfer` object facilitates money movement out of a financial account. Use `OutboundTransfer` to send funds over ACH rails or through a domestic wire transfer to an external bank account that a connected account owns.\n\nOutbound transfers typically arrive at the receiving bank between the same day and 2 business days, depending on whether you use a wire or ACH.\n\n#### Note\n\nMulti FA beta If enrolled in the Multi FA beta, you can use `OutboundTransfer` to send funds over `stripe` network rails to another financial account associated with the same connected account. Funds arrive in the destination financial account within minutes.\n\nFor more information, see the [Money movement timelines](https://docs.stripe.com/treasury/money-movement/timelines#outboundpayment-and-outboundtransfer-transactions) guide.\n\n`OutboundTransfers` support the `us_bank_account` type of payment method. Alternatively, you can use an existing [BankAccount](https://docs.stripe.com/payments/ach-debit/migrating-from-charges) that belongs to the merchant as an [ExternalAccount](https://docs.stripe.com/api/external_accounts).\n\n[](#createobt)\n\nUse `POST /v1/treasury/outbound_transfers` to create an [OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/create) for the financial account with the associated ID. Among the request’s possible parameters, four are required:\n\n*   `amount`: Amount of transfer in cents.\n*   `currency`: Three-letter ISO currency code.\n*   `financial_account`: Source financial account ID to pull funds from.\n*   `destination_payment_method`: Destination `PaymentMethod` ID or `BankAccount` ID to receive funds.\n\n``{   // The source financial account to pull funds from.   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   // The amount to send. 10.00 USD in this case.   \"amount\": 1000,   \"currency\": \"usd\",   // The destination PaymentMethod or BankAccount.   \"destination_payment_method\": \"{{PAYMENT_METHOD_ID}}\"  | \"{{BANK_ACCOUNT_ID}}\",   // Optionally, to explicitly specify a network, override the `network` value   \"destination_payment_method_options\": {     \"us_bank_account\": {       \"network\": \"ach\" | \"us_domestic_wire\"     }   },   // A description visible on the external bank statement.   \"statement_descriptor\": \"Bank xfer\",   // An optional internal description to identify this OutboundTransfer   \"description\": \"Transfer to my external account\",   // Stripe does not support updating originated transfers after creation.   // You can only set metadata at creation.   \"metadata\": nil | Hash, }``\n\nThe following request creates an `OutboundTransfer` on an account-attached `PaymentMethod` with the source of funds coming from the identified financial account.\n\n`curl https://api.stripe.com/v1/treasury/outbound_transfers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d amount=1000 \\  -d currency=usd \\  -d destination_payment_method=  {{PAYMENT_METHOD_ID}}   \\  -d statement_descriptor=\"Test xfer\" \\  -d \"destination_payment_method_options[us_bank_account][network]\"=ach`\n\nIf successful, the response returns the newly created `OutboundTransfer` object.\n\n`{     \"id\": \"{{OUTBOUND_TRANSFER_ID}}\",     \"object\": \"outbound_transfer\",     \"amount\": 1000,     \"cancelable\": true,     \"created\": 1648479987,     \"currency\": \"usd\",     \"description\": null,     \"destination_payment_method\": \"{{PAYMENT_METHOD_ID}}\",     \"destination_payment_method_details\": {`\n\n### Same-day ACH![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Beta\n\nSame-day ACH is currently in beta with limited availability, subject to Stripe review and approval. To request access, email [treasury-support@stripe.com](mailto:treasury-support@stripe.com).\n\nIf you don’t have access, API calls that include same-day ACH features or parameters return an error.\n\nUsing same-day ACH enables sending funds that arrive the same business day if the `OutboundTransfer` call successfully completes before the [cutoff time](https://docs.stripe.com/treasury/money-movement/timelines#evolve-bank-and-trust--outbound). To use same-day ACH, set the `destination_payment_method_options.us_bank_account.network` parameter to `ach` and the `destination_payment_method_options.us_bank_account.ach.submission` parameter to `same_day`.\n\n### Wire transfer: routing numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSome banks might use a separate wire transfer routing number that differs from ACH. Consequently, you might receive an error during wire creation if the routing number on the payment method doesn’t support wire transfers. If you receive this error, you need to add a new payment method with your bank’s wire routing number.\n\n### Wire transfer: recipient address![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWire transfers require ACH metadata plus recipient name and billing address. The address is the address of the account holder receiving the wire, not the address of their bank.\n\nWhen entering the `billing_details.address` for a payment method, all address fields must be complete. Attempting to send a wire with incomplete fields on the `billing_details.address` results in an error.\n\n#### Note\n\nWhen sending a wire using an `OutboundTransfer`, if you don’t fill out any address fields, Stripe defaults to the legal entity of the primary Stripe account holder.\n\n[](#retrieveobt)\n\nUse `GET /v1/treasury/outbound_transfers/{{OUTBOUND_TRANSFER_ID}}` to retrieve details for the `OutboundTransfer` with the associated ID.\n\nThe following request retrieves the `OutboundTransfer` with the associated ID, expanding the details of the `Transaction`.\n\n`curl -G https://api.stripe.com/v1/treasury/outbound_transfers/{{OUTBOUND_TRANSFER_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"expand[]\"=transaction`\n\nIf successful, the response returns the `OutboundTransfer` object with the associated ID. Some of the parameters in the response have additional details that are only returned when you add them as values to the `expand[]` parameter. The fields that you can expand have an “Expandable” comment in the following response example. See [Expanding Responses](https://docs.stripe.com/api/expanding_objects) to learn more about expanding object responses.\n\n`{   \"id\": \"{{OUTBOUND_TRANSFER_ID}}\",   \"object\": \"outbound_transfer\",   \"livemode\": Boolean,   \"created\": Timestamp,   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\", // Expandable   \"amount\": 1000,   \"currency\": \"usd\",   \"destination_payment_method\": \"{{PAYMENT_METHOD_ID}}\",   \"description\": \"Transfer to my external account\",`\n\n[](#cancelobt)\n\nUse `POST /v1/treasury/outbound_transfers/{{OUTBOUND_TRANSFER_ID}}/cancel` to cancel the `OutboundTransfer` with the associated ID. The `OutboundTransfer` object includes a `cancelable` parameter with a Boolean value to indicate whether you can cancel the transfer. After an `OutboundTransfer` submits to the network, the `cancelable` value becomes `false` and you receive an error from this endpoint for that transfer.\n\n`curl -X POST https://api.stripe.com/v1/treasury/outbound_transfers/{{OUTBOUND_TRANSFER_ID}}/cancel \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nIf successful, the response returns the `OutboundTransfer` object with a status of `canceled`.\n\n`{     \"id\": \"{{OUTBOUND_TRANSFER_ID}} \",     \"object\": \"outbound_transfer\",     \"amount\": 1000,     \"cancelable\": false,     \"created\": 1648487177,     \"currency\": \"usd\",     ...     \"status\": \"canceled\",     \"status_transitions\": {         \"canceled_at\": 1648487198,         \"failed_at\": null,         \"posted_at\": null,         \"returned_at\": null     },     \"transaction\": \"{{TRANSACTION_ID}}\" }`\n\n[](#listobt)\n\nUse `GET /v1/treasury/outbound_transfers` to list the `OutboundTransfers` sent from the financial account with the ID of the `financial_account` parameter. You can filter the list with the standard list parameters or by `status`.\n\n`{   // Standard list parameters   \"limit\", \"starting_after\", \"ending_before\",   // Filter by status   \"status\": \"processing\" | \"posted\" | \"failed\" | \"returned\" | \"canceled\",   // Filter by FinancialAccount (Required)   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\", }`\n\nThe following request retrieves `OutboundTransfers` from the financial account identified. The included parameters limit the response to the first three transfers after the `OutboundTransfer` with the provided ID.\n\n`curl -G https://api.stripe.com/v1/treasury/outbound_transfers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d limit=3 \\  -d starting_after={{OUTBOUND_TRANSFER_ID}}`\n\nIf successful, the response returns a list of [OutboundTransfer objects](https://docs.stripe.com/api/treasury/outbound_transfers/object) that satisfy any filtering conditions.\n\n[](#statesobt)\n\nThe following table describes each `status` for `OutboundTransfers` and what the possible transition states are.\n\n| STATUS | DESCRIPTION | TRANSITIONS TO STATE |\n| --- | --- | --- |\n| `processing` | The `OutboundTransfer` starting state. Funds are allotted to a pending transaction (but are still part of the current balance). The user can cancel the `OutboundTransfer` while the value of the `cancelable` parameter is `true`. | `posted`, `canceled`, `failed` |\n| `canceled` (terminal) | A user canceled the `OutboundTransfer` before posting. Stripe voids the pending transaction and returns the funds to the user. | N/A |\n| `posted` | The `OutboundTransfer` has been sent to the network and funds have left the account (with the transaction posting). | `returned` |\n| `returned` (terminal) | The `OutboundTransfer` failed to successfully arrive at the destination (for example, due to incorrect account details). Stripe returns the funds to the user with `returned_details[transaction]`. | N/A |\n| `failed` (terminal) | The `OutboundTransfer` failed to be sent to the network. Stripe voids the pending transaction and returns the funds to the user. Stripe might use this state to indicate internal errors. | N/A |\n\n[](#testingobt)\n\nIn test mode, you can specify the `destination_payment_method` as a test mode payment method. You can create your own test mode [PaymentMethods](https://docs.stripe.com/api/payment_methods) or use our test IDs when testing your integration.\n\n| TYPE | OUTCOME | PAYMENT METHOD |\n| --- | --- | --- |\n| `us_bank_account` | Default, transitions to `posted`. | `pm_usBankAccount` |\n| `us_bank_account` | Transitions to `posted`, adds one day to the original `expected_arrival_date`. | `pm_usBankAccount_expectedArrivalDateUpdated` |\n| `us_bank_account` | Remains in `processing`. | `pm_usBankAccount_processing` |\n| `us_bank_account` | Transitions to `canceled`. | `pm_usBankAccount_canceledByUser` |\n| `us_bank_account` | Transitions to `failed`. | `pm_usBankAccount_internalFailure` |\n| `us_bank_account` | Transitions to `returned` with `returned_details.code=\"no_account\"`. | `pm_usBankAccount_noAccount` |\n| `us_bank_account` | Transitions to `returned` with `returned_details.code=\"account_closed\"`. | `pm_usBankAccount_accountClosed` |\n| `us_bank_account` | Transitions to `returned` with `returned_details.code=\"invalid_account_number\"`. | `pm_usBankAccount_invalidAccountNumber` |\n\nIn all cases, the `OutboundTransfer` response is in the `processing` state. Stripe triggers [webhooks](https://docs.stripe.com/webhooks) for the relevant state transitions, and fetching the `OutboundTransfer` after creation returns the expected state.\n\n### OutboundTransfer test helper endpoints![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides endpoints to help you test `OutboundTransfers` in different states. After creating an `OutboundTransfer`, use these endpoints to move the `OutboundTransfer` directly to a new state of `posted`, `failed`, `canceled`, or `returned`.\n\n*   Use the [test post endpoint](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_post) to move the identified `OutboundTransfer` from `processing` to `posted`.\n    \n    `POST /v1/test_helpers/treasury/outbound_transfers/{{OUTBOUND_TRANSFER_ID}}/post`\n    \n*   Use the [test fail endpoint](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_fail) to move the identified `OutboundTransfer` from `processing` to `failed`.\n    \n    `POST /v1/test_helpers/treasury/outbound_transfers/{{OUTBOUND_TRANSFER_ID}}/fail`\n    \n*   Use the [test return endpoint](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_return) to move the identified `OutboundTransfer` from `posted` to `returned`.\n    \n    `POST /v1/test_helpers/treasury/outbound_transfers/{{OUTBOUND_TRANSFER_ID}}/return`\n    \n\nThese endpoints are particularly useful when testing error scenarios, such as returns, which would otherwise require outside action.\n\nFor the `return` endpoint, include the optional `returned_details.code` parameter in the body to indicate why the transfer was returned. If not provided, the transfer defaults to the `declined` return code.\n\n`{   \"returned_details\": {     \"code\": \"account_closed\" |           \"account_frozen\" |           \"bank_account_restricted\" |           \"bank_ownership_changed\" |           \"could_not_process\" |           \"invalid_account_number\" |           \"incorrect_account_holder_name\" |           \"invalid_currency\" |           \"no_account\" |           \"declined\"   } }`\n\nWe also provide a [test update endpoint](https://docs.stripe.com/api/treasury/outbound_transfers/test_mode_update) to simulate the posting of tracking details on a test mode `Outbound Transfer`. The `tracking_details` field can only be set for test mode objects.\n\nIn all cases, Stripe triggers [webhooks](https://docs.stripe.com/webhooks) for each relevant state transition, and fetching the `OutboundTransfer` after transition returns the expected state.\n\n[](#obtwebhooks)\n\nStripe emits the following `OutboundTransfer` events to your [webhook](https://docs.stripe.com/webhooks) endpoint:\n\n*   `treasury.outbound_transfer.created` on OutboundTransfer creation.\n*   `treasury.outbound_transfer.{{new_status}}` when an OutboundTransfer changes status. Available status value options include:\n    *   `treasury.outbound_transfer.posted`\n    *   `treasury.outbound_transfer.failed`\n    *   `treasury.outbound_transfer.returned`\n    *   `treasury.outbound_transfer.canceled`\n*   `treasury.outbound_transfer.expected_arrival_date_updated` when the `expected_arrival_date` of an OutboundTransfer changes.\n*   `treasury.outbound_transfer.tracking_details_updated` when the tracking details for an `OutboundTransfer` are updated.",
  "title": "Moving money with Treasury using OutboundTransfer objects | Stripe Documentation",
  "description": "Learn how to transfer money out of Treasury financial accounts to external accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/ach-debit",
  "markdown": "# ACH Direct Debit | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how businesses can accept payments with ACH Direct Debit.\n\nACH lets you accept payments from customers with a US bank account. ACH Direct Debit is a [reusable](https://docs.stripe.com/payments/payment-methods#usage), [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method. It can take [up to 4 business days](https://docs.stripe.com/payments/ach-debit#timing) to receive acknowledgement of success or failure. Because ACH Direct Debit isn’t a guaranteed payment method, there’s a risk of failed payments and [disputes](https://docs.stripe.com/payments/ach-debit#disputed-payments).\n\nAccepting bank accounts is slightly different from accepting cards:\n\n1.  Your customer must [authorize](https://docs.stripe.com/payments/ach-debit#mandates) the payment terms.\n2.  Bank accounts must be [verified](#verification).\n\n*   **Customer locations**\n    \n    US\n    \n*   **Presentment currency**\n    \n    USD\n    \n*   **Payment confirmation**\n    \n    Business-initiated\n    \n*   **Payment method family**\n    \n    Bank debit\n    \n*   **Recurring payments**\n    \n    Yes\n    \n*   **Payout timing**\n    \n    2-5 days\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\nAt checkout, the customer selects **ACH Direct Debit**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/account-info.6df4a503f8d05d1d9ddd20a6f15172df.svg)\n\nThe customer signs into their bank account to provide account information.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect.f6e6ccf58078e0a25815560086204c24.svg)\n\nThe merchant presents the mandate. The customer accepts it by completing the purchase.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\nThe customer is notified when payment is complete.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf ACH is all you want, learn how to [accept a payment](https://docs.stripe.com/payments/ach-debit/accept-a-payment) with ACH. Below are options to skip writing that code.\n\n### Dynamic payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou don’t have to integrate ACH Direct Debit and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable ACH Direct Debit. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add ACH Direct Debit from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n*   [Subscriptions](https://docs.stripe.com/billing/subscriptions/overview)\n\n### Manually add each payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you prefer to manually list payment methods or want to save ACH Direct Debit details for future payments, see the following guides:\n\n*   [Manually configure ACH Direct Debit as a payment](https://docs.stripe.com/payments/ach-debit/accept-a-payment)\n*   [Save ACH Direct Debit details for future payments](https://docs.stripe.com/payments/ach-debit/set-up-payment)\n\n## Timing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith ACH Direct Debit, it can take time for funds to become available in your Stripe balance. The amount of time it takes for funds to become available is referred to as the settlement timing. The following tables describe the settlement timings for ACH Direct Debit payments that Stripe offers.\n\nInitial payments made from select bank accounts that use temporary account numbers with Financial Connections might be subject to settlement delays.\n\n| Settlement type | Timing | Cutoff time | Additional information |\n| --- | --- | --- | --- |\n| Standard settlement (T+4) | 4 business days from payment creation | 21:00 US/Eastern | After ACH Direct Debit payments settle to your Stripe account balance, we make payouts to your bank account according to your set payout schedule. |\n| Faster settlement (T+2) | 2 business days from payment creation | 14:00 US/Eastern | This option is available only to eligible US users. You can check your eligibility and activate this option on the [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods). For more information on faster settlement, see the [Support](https://support.stripe.com/questions/two-day-settlement-for-ach-direct-debit) page. |\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/settlement-timings.a7d03de51dbe6630245b69df27038ce1.svg)\n\nA diagram showing the two settlement timings for ACH Direct Debit: standard (4 days) and faster (2 days).\n\nFor information on how to cancel payments, see [Refund and cancel payments](https://docs.stripe.com/refunds#cancel-payment).\n\n## ACH transaction failures![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nACH Direct Debit transactions can fail any time after the payment is initiated through payment confirmation. These failures can occur for a number of reasons, such as:\n\n*   Insufficient funds\n*   An invalid account number\n*   A customer disabling debits from their bank account\n\nIf a payment fails after funds have been made available in your Stripe balance, Stripe immediately removes funds from your Stripe account.\n\nIn rare situations, Stripe might receive an ACH failure from the bank after a PaymentIntent has transitioned to `succeeded`. If this happens, Stripe creates a dispute with a `reason` of:\n\n*   `insufficient_funds`\n*   `incorrect_account_details`\n*   `bank_cannot_process`\n\nStripe charges a failure fee in this situation.\n\n## Verification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLearn about [validation and verification](https://support.stripe.com/questions/nacha-bank-account-validation-rule) requirements.\n\nStripe lets your customers securely share their financial data by linking their financial accounts to your business. Use [Financial Connections](https://docs.stripe.com/financial-connections) to access customer-permissioned financial data such as tokenized account and routing numbers, balance data, ownership details, and transaction data.\n\nYour customers might enter their bank account manually instead of authenticating with Stripe Financial Connections. In these cases, Stripe provides a fully-hosted flow for collecting bank account details and verifies them with microdeposits.\n\nWhen you use [Stripe.js](https://docs.stripe.com/payments/elements), our JavaScript library for building payment flows, Stripe provides a fully-hosted collection of bank account details, instant bank verification, and (if needed) delayed verification using microdeposits. This verification process is a requirement for many businesses, and it helps reduce payment failures and fraudulent activities.\n\n## ACH Mandates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nACH Direct Debit rules require that you first get authorization from a customer to take payments before you can debit their bank account. To obtain authorization, you present a mandate to them. This mandate specifies the terms for one-time or recurring payments. The customer must agree to this mandate before you can collect any payments from their bank account.\n\nWhen you use Stripe to initiate ACH transactions with your customers, make sure you have all the necessary authorizations and approvals from your customers for Stripe to transmit an ACH debit transaction to the customer’s bank account. The information you provide Stripe about each ACH transaction must be accurate and complete, including the name of your customer that authorized you to initiate the ACH transaction to their bank account.\n\n#### Types of mandates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are two types of mandates: online and offline.\n\n*   **Online mandates**: Appear as part of the payment flow on a website. Customers accept online mandates through a user interface element, such as clicking an **Accept** or **Pay** button, or by checking a box.\n    \n*   **Offline mandates**: Require that you present the specific terms of the transaction to your customer in writing or over the phone. The customer accepts those terms when they sign the paper or verbally agree to the terms over the phone. See the [details on the offline mandate types](https://docs.stripe.com/payments/ach-debit/sec-codes) Stripe supports.\n    \n\nStripe displays an online mandate on the payment page for you if you use one of the following hosted products:\n\n*   Checkout\n*   Payment Element\n*   Hosted Invoices Page\n\n### Mandates for online custom payment forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor custom payment forms that directly integrate with the Payment Intents API, you must display the mandate terms on your payment page before confirming the PaymentIntent or SetupIntent.\n\nYou only need to display a mandate the first time you collect a customer’s bank account.\n\n#### Recommended mandate text (online)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe recommend that you use the following mandate text for your online custom payment form. This text must include the customer’s name, bank account information, and the date.\n\nFor details on displaying the correct business name for Connect users, see [merchant of record and statement descriptors](#connect-merchant-of-record).\n\nBy clicking \\[accept\\], you authorize Rocket Rides to debit the bank account specified above for any amount owed for charges arising from your use of Rocket Rides’ services and/or purchase of products from Rocket Rides, pursuant to Rocket Rides’ website and terms, until this authorization is revoked. You may amend or cancel this authorization at any time by providing notice to Rocket Rides with 30 (thirty) days notice.\n\nIf you plan to use the customer’s bank account for future payments with the [setup\\_future\\_usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage) parameter or by [saving bank details](https://docs.stripe.com/payments/ach-debit/set-up-payment) for a future payment, also include:\n\nIf you use Rocket Rides’ services or purchase additional products periodically pursuant to Rocket Rides’ terms, you authorize Rocket Rides to debit your bank account periodically. Payments that fall outside of the regular debits authorized above will only be debited after your authorization is obtained.\n\n#### Caution\n\nIf you originate recurring preauthorized debits, you must disclose to your customers how these amounts are calculated or a range the customer can anticipate. You must also give your customer at least 7 calendar days notice if you change the timing of any recurring preauthorized debits.\n\n### Mandate and microdeposit emails ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBy default, if your customer provides a [billing email address](https://docs.stripe.com/api/payment_methods/object#payment_method_object-billing_details-email), Stripe automatically emails your customer the following information:\n\n*   Confirmation of the mandate, per Nacha requirements.\n*   Notification if Stripe needs to use microdeposits to verify your customer’s bank account. These notification emails link to a hosted verification page.\n\n#### Sending custom mandate notifications (online)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can send custom mandate notifications to customers.\n\nTo send custom mandate notifications:\n\n1.  Turn off Stripe emails in the Stripe Dashboard [email settings](https://dashboard.stripe.com/settings/emails)\n2.  Send a mandate confirmation email when you receive your customer’s bank account and mandate authorization.\n\nIn the email, include the following information:\n\n*   Authorization date\n*   Account holder name\n*   Financial institution\n*   Routing number\n*   Last four digits of the account number\n\nThe following is a sample mandate confirmation email that you can send.\n\n|     |     |\n| --- | --- |\n| Agreement Date | **June 28, 2021** |\n| Account Holder Name | **Jenny Rosen** |\n| Financial Institution | **Chase Bank** |\n| Routing Number | **021000021** |\n| Account Number | \\*\\*\\*\\***6789** |\n\nThank you for signing up for direct debits from Rocket Rides. You have authorized Rocket Rides to debit the bank account specified above for any amount owed for charges arising from your use of Rocket Rides’ services and/or purchase of products from Rocket Rides, pursuant to Rocket Rides’ website and terms, until this authorization is revoked. You may amend or cancel this authorization at any time by providing notice to Rocket Rides with 30 (thirty) days notice.\n\nIf you collected the customer’s bank account for future payments with the [setup\\_future\\_usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage) parameter or by [saving bank details](https://docs.stripe.com/payments/ach-debit/set-up-payment), also include:\n\nYou have authorized Rocket Rides to debit your bank account periodically if and when you use Rocket Rides’ services or purchase more than one of Rocket Rides’ products periodically pursuant to Rocket Rides’ terms. Payments that fall outside of the regular debits authorized above will only be debited after your authorization is obtained.\n\n#### Caution\n\n## ACH disputes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nACH Direct Debit provides a dispute process for bank account holders to dispute payments. Customers can generally dispute a payment through their bank for up to 60 calendar days after a debit on a personal account, or up to 2 business days for a business account. In rare instances, a debit payment can be successfully disputed outside these timelines. This is called a late return. The late return process is primarily managed by and ultimately decided at the discretion of the banks involved in the transaction.\n\nWhen a dispute is created, Stripe sends both the [charge.dispute.created](https://docs.stripe.com/api/events/types#event_types-charge.dispute.created) and [charge.dispute.closed](https://docs.stripe.com/api/events/types#event_types-charge.dispute.closed) [webhook](https://docs.stripe.com/webhooks \"webhook\") events and deducts the amount of the dispute and associated dispute fee from your Stripe balance.\n\nUnlike credit card disputes, all ACH Direct Debit disputes are final and there is no process for appeal. If a customer successfully disputes a payment, you must contact them if you want to resolve the situation.\n\n#### Caution\n\nIf you proactively issue your customer a refund while the customer’s bank also initiates the dispute process, your customer might receive two credits for the same transaction. Follow the guidelines in the following section on refunds to avoid this situation.\n\n### Resolving disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a customer disputes an ACH Direct Debit payment, it invalidates the mandate associated with the payment method and you can’t reuse it. To attempt a charge again, you must resolve the dispute with the customer and [collect a new mandate authorization](https://docs.stripe.com/payments/ach-debit/accept-a-payment#resolving-disputes).\n\nIf they dispute a subsequent payment, Stripe blocks the bank account from further re-use. To learn more about resolution steps, see [Blocked bank accounts](https://docs.stripe.com/payments/ach-debit/blocked-bank-accounts).\n\n## ACH refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou have a maximum of 180 days from the date of the original payment to submit a refund for an ACH Direct Debit payment. Refunds require at least 3 business days to process.\n\n#### Avoid disputes\n\nIf you accidentally debit your customer, contact them immediately to avoid a payment dispute. Factors such as slightly longer settlement time periods and the way banks process ACH Direct Debit transactions can cause confusion between you, your customer, your customer’s bank, and Stripe. For example, your customer might contact both you and their bank to dispute a payment. If you proactively issue your customer a refund while the customer’s bank also initiates the dispute process, your customer might receive two credits for the same transaction, so it’s important to communicate with your customer about the processing time and the status of their refund.\n\nIf you request a refund for a payment that hasn’t completed yet (within a few hours of creating the Payment Intent), Stripe doesn’t submit the charge to the bank, essentially canceling the original payment rather than refunding it.\n\nStripe doesn’t explicitly label ACH Direct Debit refunds as refunds when we deposit the funds back to a customer’s bank account. Instead, we process refunds as a credit and include a reference to the statement descriptor for the original payment.\n\n## Statement descriptors for ACH![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEvery ACH Direct Debit payment shows up on customers’ bank statements with the _name of the merchant_. For payments created with Stripe, the name of the merchant is your Stripe account’s [statement descriptor](https://docs.stripe.com/get-started/account/statement-descriptors). You can override this default behavior for every transaction independently by using a [dynamic statement descriptor](https://docs.stripe.com/payments/payment-intents#dynamic-statement-descriptor). To do so, specify the [`statement_descriptor`](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-statement_descriptor) parameter when creating the `PaymentIntent`.\n\n#### Caution\n\nYour statement descriptor truncates to the first 16 alphanumeric characters on the bank statement. For example, if your statement descriptor is `ROCKETRIDESLIMITED`, the customer sees `ROCKETRIDESLIMIT`.\n\nAdditionally, statement descriptors cannot use the special characters `<`, `>`, `'`, or `\"`.\n\nThe table below illustrates the _merchant name_ behavior you can expect on the customer’s bank statement:\n\n| Default statement descriptor | Dynamic statement descriptor | Merchant name | Bank statement descriptor |\n| --- | --- | --- | --- |\n| Rocket Rides | Unspecified | `Rocket Rides` | `Rocket Rides` |\n| Rocket Rides | `Sunday Ride` | `Rocket Rides` | `Sunday Ride` |\n\nEach bank formats these fields differently. Depending on your customer’s bank, some fields may appear in all lowercase or uppercase.\n\n## Connect and ACH![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you use [Connect](https://docs.stripe.com/connect \"Connect\"), you must take the following into consideration before you enable and use ACH Direct Debits.\n\n### Request ACH Debit capabilities for your connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSet the `us_bank_account_ach_payments` capability to `active` on your platform account, and for any connected accounts you want to enable for ACH debits. You can also [request more account capabilities](https://docs.stripe.com/connect/account-capabilities#requesting-unrequesting).\n\n### Merchant of record and statement descriptors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [charge type](https://docs.stripe.com/connect/charges) of Connect payments might change the default statement descriptor and the merchant name that appears on the customer’s bank statement. The charge type can also change:\n\n*   The merchant of record shown on the mandate\n*   The merchant shown on confirmation emails\n*   The merchant shown on microdeposit reminder emails\n\nThe merchant of record determines the Stripe account authorized to create payments with a particular [PaymentMethod](https://docs.stripe.com/api/payment_methods/object). To learn more about sharing this authorization across multiple connected accounts, see [PaymentMethod and Mandate cloning](#payment-method-and-mandate-cloning).\n\n| Charge type | Descriptor taken from |\n| --- | --- |\n| Direct | Connected Account |\n| Destination | Platform |\n| Separate charge and transfer | Platform |\n| Destination (with `on_behalf_of`) | Connected Account |\n| Separate charge and transfer (with `on_behalf_of`) | Connected Account |\n\n### PaymentMethod and mandate cloning ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can collect customer bank accounts on the platform account and [clone](https://docs.stripe.com/payments/payment-methods/connect#cloning-payment-methods) ACH Direct debit payment methods. Cloning these methods allows you to save customer bank accounts for later use on connected accounts. When you clone ACH Direct Debit payment methods, Stripe duplicates the mandate authorization to the connected account, but we don’t send any new mandate confirmation emails.\n\n#### Caution\n\nYou can’t use a mandate authorized for a PaymentIntent or SetupIntent [`on_behalf_of`](https://docs.stripe.com/connect/charges#on_behalf_of) of a connected account with a different connected account.\n\nWhen collecting a bank account that you intend to clone to connected accounts, you must communicate to the customer that their authorization extends to connected accounts on your platform. For example, you can communicate this message to a customer through the mandate terms. Failure to communicate this message to your customers could result in customer confusion and increase the risk of disputed payments.\n\n## Testing ACH![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLearn how to test scenarios with instant verifications using [Financial Connections](https://docs.stripe.com/financial-connections/testing#web-how-to-use-test-accounts).\n\n### Send transaction emails in test mode![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the `payment_method_data.billing_details[email]` field in the form of `{any-prefix}+test_email@{any_domain}` when you collect the [payment method details](#web-collect-details).\n\n#### Common mistake\n\n### Test account numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\n| Account number | Token | Routing number | Behavior |\n| --- | --- | --- | --- |\n| `000123456789` | `pm_usBankAccount_success` | `110000000` | The payment succeeds. |\n| `000111111113` | `pm_usBankAccount_accountClosed` | `110000000` | The payment fails because the account is closed. |\n| `000111111116` | `pm_usBankAccount_noAccount` | `110000000` | The payment fails because no account is found. |\n| `000222222227` | `pm_usBankAccount_insufficientFunds` | `110000000` | The payment fails due to insufficient funds. |\n| `000333333335` | `pm_usBankAccount_debitNotAuthorized` | `110000000` | The payment fails because debits aren’t authorized. |\n| `000444444440` | `pm_usBankAccount_invalidCurrency` | `110000000` | The payment fails due to invalid currency. |\n| `000666666661` | `pm_usBankAccount_failMicrodeposits` | `110000000` | The payment fails to send microdeposits. |\n| `000555555559` | `pm_usBankAccount_dispute` | `110000000` | The payment triggers a dispute. |\n| `000000000009` | `pm_usBankAccount_processing` | `110000000` | The payment stays in processing indefinitely. Useful for testing [PaymentIntent cancellation](https://docs.stripe.com/api/payment_intents/cancel). |\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\n### Test microdeposit amounts and descriptor codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo mimic different scenarios, use these microdeposit amounts _or_ 0.01 descriptor code values.\n\n| Microdeposit values | 0.01 descriptor code values | Scenario |\n| --- | --- | --- |\n| `32` and `45` | SM11AA | Simulates verifying the account. |\n| `10` and `11` | SM33CC | Simulates exceeding the number of allowed verification attempts. |\n| `40` and `41` | SM44DD | Simulates a microdeposit timeout. |",
  "title": "ACH Direct Debit | Stripe Documentation",
  "description": "Learn how businesses can accept payments with ACH Direct Debit.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/outbound-payments",
  "markdown": "# Moving money with Treasury using OutboundPayment objects\n\n## Learn how to create outbound payments to move money out of Treasury financial accounts to third parties.\n\n`OutboundPayment` objects represent push-based transfers from your Treasury financial account to a third-party external account using ACH or wire transfer, or another financial account associated with the same platform instantly using the `stripe` network. For example, if you want to send money from your financial account to your vendor’s external US bank account, you create an `OutboundPayment` to move the funds. The receiving accounts for an `OutboundPayment` are either an external bank account or another financial account.\n\nThe typical transfer time for outbound payments can range from minutes (when using the Stripe network), same day, to 1-2 business days (when using the ACH network). For more information, see the [Money movement timelines](https://docs.stripe.com/treasury/money-movement/timelines#outboundpayment-and-outboundtransfer-transactions) guide.\n\n[](#createobp)\n\nUse `POST /v1/treasury/outbound_payments` to create an `OutboundPayment`. Among the request’s possible parameters, the following are required:\n\n*   `amount`: Amount in cents to pay.\n*   `currency`: Three-letter ISO currency code (only `usd` supported).\n*   `financial_account`: The source financial account funds are sent from.\n*   `destination_payment_method` or `destination_payment_method_data`: Information about the destination of funds for the payment.\n    *   With `destination_payment_method`, you must first set up the `PaymentMethod` for outbound flows using a [SetupIntent](https://docs.stripe.com/api/setup_intents). You must also specify the customer ID that matches the `Customer` object the `PaymentMethod` is attached to. Alternatively, you can use an existing legacy [BankAccount](https://docs.stripe.com/payments/ach-debit/migrating-from-charges) attached to the `Customer` in place of a `PaymentMethod`.\n    *   With `destination_payment_method_data`, you can specify payment method details inline. You can use this parameter to specify bank account details or when you’re [sending funds to another financial account](#create-obp-for-fa) over the Stripe network.\n\n[](#obpexternal)\n\nUse `POST /v1/treasury/outbound_payments` to create an `OutboundPayment` from the financial account identified by the ID in the `financial_account` parameter value of the body. The following request adds `statement_descriptor` and `destination_payment_method_data` information.\n\n`curl https://api.stripe.com/v1/treasury/outbound_payments \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d amount=2000 \\  -d currency=usd \\  -d statement_descriptor=payment_1 \\  -d \"destination_payment_method_data[type]\"=us_bank_account \\  -d \"destination_payment_method_data[us_bank_account][account_holder_type]\"=individual \\  -d \"destination_payment_method_data[us_bank_account][routing_number]\"=110000000 \\  -d \"destination_payment_method_data[us_bank_account][account_number]\"=1234567890 \\   --data-urlencode \"destination_payment_method_data[billing_details][email]\"=\"jenny@example.com\" \\  -d \"destination_payment_method_data[billing_details][phone]\"=7135551212 \\  -d \"destination_payment_method_data[billing_details][address][city]\"=Alvin \\  -d \"destination_payment_method_data[billing_details][address][state]\"=TX \\  -d \"destination_payment_method_data[billing_details][address][postal_code]\"=77511 \\  -d \"destination_payment_method_data[billing_details][address][line1]\"=\"123 Main St.\" \\  -d \"destination_payment_method_data[billing_details][name]\"=\"Jenny Rosen\"`\n\nIf successful, the response returns the newly created `OutboundPayment`.\n\n`` {   \"id\": \"{{OUTBOUND_PAYMENT_ID}}\",   \"object\": \"outbound_payment\",   // The source FinancialAccount. Funds are pulled from this account.   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   // The amount to send. 10.00 USD in this case.   \"amount\": 1000,   \"cancelable\": true | false,   \"currency\": \"usd\",   // The destination payment method. Either this or `destination_payment_method_data` ``\n\n### Same-day ACH![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Beta\n\nSame-day ACH is currently in beta with limited availability, subject to Stripe review and approval. To request access, email [treasury-support@stripe.com](mailto:treasury-support@stripe.com).\n\nIf you don’t have access, API calls that include same-day ACH features or parameters return an error.\n\nUsing same-day ACH enables sending funds that arrive the same business day if the `OutboundPayment` call successfully completes before the [cutoff time](https://docs.stripe.com/treasury/money-movement/timelines#evolve-bank-and-trust--outbound). To use same-day ACH, set the `destination_payment_method_options.us_bank_account.network` parameter to `ach` and the `destination_payment_method_options.us_bank_account.ach.submission` parameter to `same_day`.\n\n### Wire transfer: routing numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSome banks might use a separate wire transfer routing number that differs from ACH. Consequently, you might receive an error during wire creation if the routing number on the payment method doesn’t support wire transfers. If you receive this error, you need to add a new payment method with your bank’s wire routing number.\n\n### Wire transfer: recipient address![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWire transfers require ACH metadata plus recipient name and billing address. The address is the address of the account holder receiving the wire, not the address of their bank.\n\nWhen entering the `billing_details.address` for a payment method, all address fields must be complete. Attempting to send a wire with incomplete fields on the `billing_details.address` results in an error.\n\n#### Note\n\nWhen sending a wire using an `OutboundTransfer`, if you don’t fill out any address fields, Stripe defaults to the legal entity of the primary Stripe account holder.\n\n[](#create-obp-for-fa)\n\nTo move money between financial accounts, call `POST /v1/treasury/outbound_payments` on the origin account and specify the destination account in the `destination_payment_method_data` parameter. Both financial accounts must be associated with the same platform, but can be attached to either a connected account or the platform financial account.\n\n`curl https://api.stripe.com/v1/treasury/outbound_payments \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d financial_account={{SOURCE_FINANCIAL_ACCOUNT_ID}} \\   -d amount=2000 \\  -d currency=usd \\  -d statement_descriptor=\"Test outbound payment to FA\" \\  -d \"destination_payment_method_data[type]\"=financial_account \\  -d \"destination_payment_method_data[financial_account]\"={{DESTINATION_FINANCIAL_ACCOUNT_ID}}`\n\nThe body of your request must be `x-www-form-urlencoded`, but the following JSON defines the data you can send.\n\n``{   // The source FinancialAccount. Funds are pulled from this account.   \"financial_account\": \"{{SOURCE_FINANCIAL_ACCOUNT_ID}}\",   // The amount to send.   \"amount\": 1000,   \"currency\": \"usd\",   // The destination payment method. This parameter is the only way to   // send an OutboundPayment via the `stripe` network.   \"destination_payment_method_data\": {     \"type\": \"financial_account\",``\n\n[](#retrieveobp)\n\nUse `GET /v1/treasury/outbound_payments/{{OUTBOUND_PAYMENT_ID}}` to retrieve details for the `OutboundPayment` with the associated ID.\n\n`curl https://api.stripe.com/v1/treasury/outbound_payments/{{OUTBOUND_PAYMENT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nIf successful, the response returns the `OutboundPayment` object with the associated ID. Some of the parameters in the response have additional details that are only returned when you add them as values to the `expand[]` parameter. The fields that you can expand have an “Expandable” comment in the following response example. See [Expanding Responses](https://docs.stripe.com/api/expanding_objects) to learn more about expanding object responses.\n\n``{   \"id\": \"{{OUTBOUND_PAYMENT_ID}}\",   \"object\": \"outbound_payment\",   \"livemode\": true | false,   \"created\": \"{{Timestamp}}\",   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\", // Expandable   \"amount\": 1000,   \"currency\": \"usd\",   // Will only be set if `destination_payment_method` was used during the creation of   // the OutboundPayment``\n\n[](#cancelobp)\n\nUse `POST /v1/treasury/outbound_payments/{{OUTBOUND_PAYMENT_ID}}/cancel` to cancel the `OutboundPayment` with the associated ID. The `OutboundPayment` object includes a `cancelable` parameter with a Boolean value to indicate whether you can cancel the transfer. After an `OutboundPayment` submits to the network, the `cancelable` value becomes `false` and you receive an error from this endpoint for that transfer.\n\n`curl -X POST https://api.stripe.com/v1/treasury/outbound_payments/{{OUTBOUND_PAYMENT_ID}}/cancel \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nIf successful, the response returns the `OutboundPayment` object with the `status` value set to `canceled`.\n\n`{   \"id\": \"{{OUTBOUND_PAYMENT_ID}}\",   \"object\": \"outbound_payment\",   \"livemode\": false,   \"created\": 123456,   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   \"amount\": 1000,   \"currency\": \"usd\",   ...   \"status\": \"canceled\",`\n\n[](#listobp)\n\nUse `GET /v1/treasury/outbound_payments` to list the `OutboundPayments` from the financial account with the associated ID. You can filter the list with the standard list parameters or by `status` or by `customer`.\n\n`{   // Standard list parameters   \"limit\", \"starting_after\", \"ending_before\",   // Filter by status   \"status\": \"processing\" | \"canceled\" | \"failed\" | \"posted\" | \"returned\",   // Filter by FinancialAccount (Required)   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   // Filter by Customer   \"customer\": \"{{CUSTOMER_ID}}\", }`\n\nThe following request retrieves the last five [OutboundPayment objects](https://docs.stripe.com/api/treasury/outbound_payments/object) for the financial account attached to the platform and paid to the identified `Customer`.\n\n`curl -G https://api.stripe.com/v1/treasury/outbound_payments \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d limit=5 \\  -d customer=  {{CUSTOMER_ID}}    `\n\n[](#obpstates)\n\nThe following table describes each status and what the possible transition states are.\n\n| STATUS | DESCRIPTION | CAN TRANSITION TO STATE |\n| --- | --- | --- |\n| `processing` | The `OutboundPayment` starting state. Funds are allotted to a pending transaction (but are still part of the current balance). The user can cancel the `OutboundPayment` while the value of the `cancelable` parameter is `true`. | `posted`, `canceled`, `failed` |\n| `failed` (terminal) | `OutboundPayment` failed to confirm. Stripe voids the pending transaction and returns the funds to the user. | N/A |\n| `canceled` (terminal) | A user canceled the `OutboundPayment` before posting. Stripe voids the pending transaction and returns the funds to the user. | N/A |\n| `posted` | The `OutboundPayment` posted and funds have left the account. The underlying transaction posts. | `returned` |\n| `returned` (terminal) | `OutboundPayment` failed to successfully arrive at the destination. Funds return to the user with a transaction (`returned_details[transaction]`). | N/A |\n\n[](#testingobp)\n\nTo test your integration end-to-end, we recommend using the [SetupIntent requests in test mode](https://docs.stripe.com/treasury/moving-money/working-with-bankaccount-objects#setupintents) to create a `PaymentMethod`, then passing that `PaymentMethod` into an `OutboundPayment` creation request using the `destination_payment_method` parameter.\n\nStripe also allows test `PaymentMethod` tokens and numbers to trigger specific functionality:\n\n*   By passing in a test `PaymentMethod` token to `destination_payment_method` (for `ach` and `us_domestic_wire` networks)\n    *   If you’re passing in a test `PaymentMethod` token directly into `destination_payment_method`, you must still pass in a customer ID to the `customer` parameter. For convenience, Stripe allows you to pass in any existing test mode customer. This differs from live mode, which requires the existing `PaymentMethod` to be attached to a `Customer` and that same customer ID passed into the `customer` parameter.\n*   By passing in test routing and account numbers to `destination_payment_method_data[us_bank_account]` (for `ach` and `us_domestic_wire` networks).\n*   By passing in the ID of an existing test mode financial account owned by an intra-platform account to `destination_payment_method_data[financial_account]` (for Stripe network).\n\nIn all cases, the `OutboundPayment` response returns the processing status. Stripe triggers [webhooks](https://docs.stripe.com/webhooks) for the relevant state transitions, and fetching the `OutboundPayment` after creation returns the expected state.\n\n| CREATES | DESTINATION\\_PAYMENT\\_METHOD (WITH ANY EXISTING TEST MODE CUSTOMER) | DESTINATION\\_PAYMENT\\_METHOD\\_DATA\\[US\\_BANK\\_ACCOUNT\\] |\n| --- | --- | --- |\n| `OutboundPayment` in initial processing state | `pm_usBankAccount_processing` | *   `routing_number`: 110000000<br>*   `account_number`: 000000000009 |\n| `OutboundPayment` that transitions to `posted` (from `processing`) | `pm_usBankAccount` | *   `routing_number`: 110000000<br>*   `account_number`: 000123456789 |\n| `OutboundPayment` that transitions to `posted` (from `processing`), additionally adding one day to the original `expected_arrival_date` | `pm_usBankAccount_expectedArrivalDateUpdated` | *   `routing_number`: 110000000<br>*   `account_number`: 000123457890 |\n| `OutboundPayment` that transitions to `canceled` (from `processing`) | `pm_usBankAccount_canceledByUser` | *   `routing_number`: 110000000<br>*   `account_number`: 000000000123 |\n| `OutboundPayment` that transitions to `failed` (from `processing`) | `pm_usBankAccount_internalFailure` | *   `routing_number`: 110000000<br>*   `account_number`: 000000000234 |\n| `OutboundPayment` that transitions to `returned` due to account closure (from processing after posted) | `pm_usBankAccount_accountClosed` | *   `routing_number`: 110000000<br>*   `account_number`: 000111111113 |\n| `OutboundPayment` that transitions to returned due to no account (from processing after posted) | `pm_usBankAccount_noAccount` | *   `routing_number`: 110000000<br>*   `account_number`: 000111111116 |\n| `OutboundPayment` that transitions to `returned` due to invalid account number (from processing after posted) | `pm_usBankAccount_invalidAccountNumber` | *   `routing_number`: 110000000<br>*   `account_number`: 000111111119 |\n\n### OutboundPayment test helper endpoints![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides endpoints to help you test `OutboundPayments` in different states. Use the test endpoints to move an `OutboundPayment` you create directly to a new state of `posted`, `failed`, or `returned`.\n\n*   Use the [test post endpoint](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_post) to move the identified `OutboundPayment` from `processing` to `posted`.\n    \n    `POST /v1/test_helpers/treasury/outbound_payments/{{OUTBOUND_PAYMENT_ID}}/post`\n    \n*   Use the [test fail endpoint](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_fail) to move the identified `OutboundPayment` from `processing` to `failed`.\n    \n    `POST /v1/test_helpers/treasury/outbound_payments/{{OUTBOUND_PAYMENT_ID}}/fail`\n    \n*   Use the [test return endpoint](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_return) to move the identified `OutboundPayment` from `processing` to `returned`.\n    \n    `POST /v1/test_helpers/treasury/outbound_payments/{{OUTBOUND_PAYMENT_ID}}/return`\n    \n\nThese endpoints are particularly useful when testing error scenarios, such as returns, which would otherwise require outside action.\n\nFor the `return` endpoint, include the optional `returned_details.code` parameter in the body to indicate why the transfer was returned. If not provided, the transfer defaults to the `declined` return code.\n\n`{   \"returned_details\": {     \"code\": \"account_closed\" |           \"account_frozen\" |           \"bank_account_restricted\" |           \"bank_ownership_changed\" |           \"could_not_process\" |           \"invalid_account_number\" |           \"incorrect_account_holder_name\" |           \"invalid_currency\" |           \"no_account\" |           \"declined\"   } }`\n\nWe also provide a [test update endpoint](https://docs.stripe.com/api/treasury/outbound_payments/test_mode_update) to simulate the posting of tracking details on a test mode `Outbound Payment`. The `tracking_details` field can only be set for test mode objects.\n\nIn all cases, Stripe triggers [webhooks](https://docs.stripe.com/webhooks) for each relevant state transition, and fetching the `OutboundPayment` after transition returns the expected state.\n\n[](#obpwebhooks)\n\nStripe emits the following `OutboundPayment` events to your [webhook](https://docs.stripe.com/webhooks) endpoint:\n\n*   `treasury.outbound_payment.created` on `OutboundPayment` creation.\n*   `treasury.outbound_payment.{{new_status}}` when an `OutboundPayment` changes status. Available status value options include:\n    *   `treasury.outbound_payment.posted`\n    *   `treasury.outbound_payment.failed`\n    *   `treasury.outbound_payment.canceled`\n    *   `treasury.outbound_payment.returned`\n*   `treasury.outbound_payment.expected_arrival_date_updated` when the `expected_arrival_date` of an `OutboundPayment` changes.\n*   `treasury.outbound_payment.tracking_details_updated` when the tracking details for an `OutboundPayment` are updated.",
  "title": "Moving money with Treasury using OutboundPayment objects | Stripe Documentation",
  "description": "Learn how to create outbound payments to move money out of Treasury financial accounts to third parties.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/received_credits/test_mode_create",
  "markdown": "# Test mode: Create a ReceivedCredit\n\n## [Test mode: Create a ReceivedCredit](https://docs.stripe.com/api/treasury/received_credits/test_mode_create)Test helper\n\nUse this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to send funds to.\n    \n*   Specifies the network rails to be used. If not set, will default to the PaymentMethod’s preferred network. See the [docs](https://docs.stripe.com/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    initiating\\_payment\\_method\\_detailsobject\n    \n    Initiating payment method details for the object.\n    \n\n### Returns\n\nA test mode ReceivedCredit object.\n\nPOST /v1/test\\_helpers/treasury/received\\_credits\n\n```\ncurl https://api.stripe.com/v1/test_helpers/treasury/received_credits \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1000 \\  -d currency=usd \\  -d financial_account=fa_1MtkSr2eZvKYlo2CsJozwFWD \\  -d network=ach\n```\n\n```\n{  \"id\": \"rc_1MtkSr2eZvKYlo2CcysvUbEw\",  \"object\": \"treasury.received_credit\",  \"amount\": 1000,  \"created\": 1680755425,  \"currency\": \"usd\",  \"description\": \"Stripe Test\",  \"failure_code\": null,  \"financial_account\": \"fa_1MtkSr2eZvKYlo2CsJozwFWD\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOKVuaEGMgagXvSInCY6NpMvimqdsEKNHRrHZ3OGyVm_l5LfDMezNeY83F5Mq-rryXZ-J1z-jfFBv30wz5WxDH97VRBIzw\",  \"initiating_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"bank_name\": \"STRIPE TEST BANK\",      \"last4\": \"6789\",      \"routing_number\": \"110000000\"    }  },  \"linked_flows\": {    \"credit_reversal\": null,    \"issuing_authorization\": null,    \"issuing_transaction\": null,    \"source_flow\": null,    \"source_flow_type\": null  },  \"livemode\": false,  \"network\": \"ach\",  \"reversal_details\": {    \"deadline\": 1681084800,    \"restricted_reason\": null  },  \"status\": \"succeeded\",  \"transaction\": \"trxn_1MtkSr2eZvKYlo2CuFFh9Rh0\"}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Test mode: Create a ReceivedCredit | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/outbound_payments",
  "markdown": "# Outbound Payments | Stripe API Reference\n\n## [The Outbound Payment object](https://docs.stripe.com/api/treasury/outbound_payments/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   Returns `true` if the object can be canceled, and `false` otherwise.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   ID of the [customer](https://docs.stripe.com/api/customers) to whom an OutboundPayment is sent.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    destination\\_payment\\_methodnullable string\n    \n    The PaymentMethod via which an OutboundPayment is sent. This field can be empty if the OutboundPayment was created using `destination_payment_method_data`.\n    \n*   #### \n    \n    destination\\_payment\\_method\\_detailsnullable object\n    \n    Details about the PaymentMethod for an OutboundPayment.\n    \n*   #### \n    \n    end\\_user\\_detailsnullable object\n    \n    Details about the end user.\n    \n*   #### \n    \n    expected\\_arrival\\_datetimestamp\n    \n    The date when funds are expected to arrive in the destination account.\n    \n*   The FinancialAccount that funds were pulled from.\n    \n*   #### \n    \n    hosted\\_regulatory\\_receipt\\_urlnullable string\n    \n    A [hosted transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe’s money transmission licenses.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    returned\\_detailsnullable object\n    \n    Details about a returned OutboundPayment. Only set when the status is `returned`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    The description that appears on the receiving end for an OutboundPayment (for example, bank statement for external bank transfer).\n    \n*   Current status of the OutboundPayment: `processing`, `failed`, `posted`, `returned`, `canceled`. An OutboundPayment is `processing` if it has been created and is pending. The status changes to `posted` once the OutboundPayment has been “confirmed” and funds have left the account, or to `failed` or `canceled`. If an OutboundPayment fails to arrive at its destination, its status will change to `returned`.\n    \n*   Hash containing timestamps of when the object transitioned to a particular `status`.\n    \n*   #### \n    \n    tracking\\_detailsnullable object\n    \n    Details about network-specific tracking information if available.\n    \n*   #### \n    \n    transactionstringExpandable\n    \n    The Transaction associated with this object.\n    \n\nThe Outbound Payment object\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2Cu5d5S1kX\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": \"cus_4QFOF3xrvBT2nU\",  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": \"pm_1MtaD82eZvKYlo2CtGr4OxTt\",  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgYgdA-GrKk6NZNsf-FXPEqqbHm44fwJ57pNybbkweviYUDJGYFOw4f9cAqpfvPKQZ6y0S2C5DYyRwmDs_36\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"processing\",  \"status_transitions\": {    \"canceled_at\": null,    \"failed_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Create an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/create)\n\nCreates an OutboundPayment.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to pull funds from.\n    \n*   ID of the customer to whom the OutboundPayment is sent. Must match the Customer attached to the `destination_payment_method` passed in.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    destination\\_payment\\_methodstring\n    \n    The PaymentMethod to use as the payment instrument for the OutboundPayment. Exclusive with `destination_payment_method_data`.\n    \n*   #### \n    \n    destination\\_payment\\_method\\_dataobject\n    \n    Hash used to generate the PaymentMethod to be used for this OutboundPayment. Exclusive with `destination_payment_method`.\n    \n*   #### \n    \n    destination\\_payment\\_method\\_optionsobject\n    \n    Payment method-specific configuration for this OutboundPayment.\n    \n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    The description that appears on the receiving end for this OutboundPayment (for example, bank statement for external bank transfer). Maximum 10 characters for `ach` payments, 140 characters for `us_domestic_wire` payments, or 500 characters for `stripe` network transfers. The default value is “payment”.\n    \n\n### Returns\n\nReturns an OutboundPayment object if there were no issues with OutboundPayment creation.\n\nPOST /v1/treasury/outbound\\_payments\n\n```\ncurl https://api.stripe.com/v1/treasury/outbound_payments \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtaD72eZvKYlo2CYKM3DnUI \\  -d amount=10000 \\  -d currency=usd \\  -d customer=cus_4QFOF3xrvBT2nU \\  -d destination_payment_method=pm_1MtaD82eZvKYlo2Cn1XtS23o \\  -d description=\"OutboundPayment to a 3rd party\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2Cu5d5S1kX\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": \"cus_4QFOF3xrvBT2nU\",  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": \"pm_1MtaD82eZvKYlo2CtGr4OxTt\",  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgYgdA-GrKk6NZNsf-FXPEqqbHm44fwJ57pNybbkweviYUDJGYFOw4f9cAqpfvPKQZ6y0S2C5DYyRwmDs_36\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"processing\",  \"status_transitions\": {    \"canceled_at\": null,    \"failed_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [Retrieve an OutboundPayment](https://docs.stripe.com/api/treasury/outbound_payments/retrieve)\n\nRetrieves the details of an existing OutboundPayment by passing the unique OutboundPayment ID from either the OutboundPayment creation request or OutboundPayment list.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an OutboundPayment object if a valid identifier was provided. Otherwise, returns an error.\n\nGET /v1/treasury/outbound\\_payments/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/outbound_payments/obp_1MtaD72eZvKYlo2Cu5d5S1kX \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obp_1MtaD72eZvKYlo2Cu5d5S1kX\",  \"object\": \"treasury.outbound_payment\",  \"amount\": 10000,  \"cancelable\": false,  \"created\": 1680716009,  \"currency\": \"usd\",  \"customer\": \"cus_4QFOF3xrvBT2nU\",  \"description\": \"OutboundPayment to a 3rd party\",  \"destination_payment_method\": \"pm_1MtaD82eZvKYlo2CtGr4OxTt\",  \"destination_payment_method_details\": {    \"type\": \"us_bank_account\",    \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"  },  \"end_user_details\": {    \"ip_address\": null,    \"present\": false  },  \"expected_arrival_date\": 1680716009,  \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgYgdA-GrKk6NZNsf-FXPEqqbHm44fwJ57pNybbkweviYUDJGYFOw4f9cAqpfvPKQZ6y0S2C5DYyRwmDs_36\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"payment\",  \"status\": \"processing\",  \"status_transitions\": {    \"canceled_at\": null,    \"failed_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"}\n```\n\n## [List all OutboundPayments](https://docs.stripe.com/api/treasury/outbound_payments/list)\n\nReturns a list of OutboundPayments sent from the specified FinancialAccount.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return OutboundPayments that were created during the given date interval.\n    \n*   Only return OutboundPayments sent to this customer.\n    \n*   Only return OutboundPayments that have the given status: `processing`, `failed`, `posted`, `returned`, or `canceled`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` OutboundPayments, starting after OutboundPayments `starting_after`. Each entry in the array is a separate OutboundPayments object. If no more OutboundPayments are available, the resulting array is empty.\n\nGET /v1/treasury/outbound\\_payments\n\n```\ncurl -G https://api.stripe.com/v1/treasury/outbound_payments \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtaD72eZvKYlo2CYKM3DnUI \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/outbound_payments\",  \"has_more\": false,  \"data\": [    {      \"id\": \"obp_1MtaD72eZvKYlo2Cu5d5S1kX\",      \"object\": \"treasury.outbound_payment\",      \"amount\": 10000,      \"cancelable\": false,      \"created\": 1680716009,      \"currency\": \"usd\",      \"customer\": \"cus_4QFOF3xrvBT2nU\",      \"description\": \"OutboundPayment to a 3rd party\",      \"destination_payment_method\": \"pm_1MtaD82eZvKYlo2CtGr4OxTt\",      \"destination_payment_method_details\": {        \"type\": \"us_bank_account\",        \"destination\": \"ba_1MtaD62eZvKYlo2C8vwjm7bc\"      },      \"end_user_details\": {        \"ip_address\": null,        \"present\": false      },      \"expected_arrival_date\": 1680716009,      \"financial_account\": \"fa_1MtaD72eZvKYlo2CYKM3DnUI\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKOrhtqEGMgYgdA-GrKk6NZNsf-FXPEqqbHm44fwJ57pNybbkweviYUDJGYFOw4f9cAqpfvPKQZ6y0S2C5DYyRwmDs_36\",      \"livemode\": false,      \"metadata\": {},      \"returned_details\": null,      \"statement_descriptor\": \"payment\",      \"status\": \"processing\",      \"status_transitions\": {        \"canceled_at\": null,        \"failed_at\": null,        \"posted_at\": null,        \"returned_at\": null      },      \"transaction\": \"trxn_1MtaD72eZvKYlo2CmUu4Vs5c\"    }    {...}    {...}  ],}\n```",
  "title": "Outbound Payments | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/ach-debit/set-up-payment?platform=web&payment-ui=stripe-hosted",
  "markdown": "# Save details for future payments with ACH Direct Debit\n\nYou can use Checkout in [setup mode](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-mode) to collect payment method details in advance, with the final amount or payment date determined later. This is useful for:\n\n*   Saving payment methods to a wallet to streamline future purchases\n*   Collecting surcharges after fulfilling a service\n*   Starting a free trial for a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\")\n\n#### Note\n\nACH Direct Debit is a [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method, which means that funds aren’t immediately available after payment. A payment typically takes 4 business days to arrive in your account.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis guide shows you how to extend the foundational [set up future payments](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=stripe-hosted) Checkout integration to add support for ACH Direct Debit payments.\n\n[](#web-create-customer)\n\nCreate a [Customer](https://docs.stripe.com/api/customers \"Customers\") object when your user creates an account with your business, or retrieve an existing Customer associated with this user. Associating the ID of the Customer object with your own internal representation of a customer enables you to retrieve and use the stored payment method details later. Include an email address on the Customer to enable Financial Connections’ [return user optimization](https://docs.stripe.com/financial-connections/fundamentals#return-user-optimization).\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d email={{CUSTOMER_EMAIL}}`\n\n[](#setup-a-payment)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `us_bank_account` to the list of `payment_method_types`.\n2.  Make sure all your `line_items` use the `usd` currency.\n3.  Set the `permissions` parameter to include `payment_method`.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d mode=setup \\  -d customer={{CUSTOMER_ID}} \\   -d \"payment_method_types[]\"=card \\  -d \"payment_method_types[]\"=us_bank_account \\   --data-urlencode success_url=\"https://example.com/success\" \\   --data-urlencode cancel_url=\"https://example.com/cancel\"`\n\nBy default, collecting bank account payment information uses [Financial Connections](https://docs.stripe.com/financial-connections) to instantly verify your customer’s account, with a fallback option of manual account number entry and microdeposit verification. See the [Financial Connections docs](https://docs.stripe.com/financial-connections/ach-direct-debit-payments) to learn how to configure Financial Connections and access additional account data to optimize your ACH integration. For example, you can use Financial Connections to check an account’s balance before initiating the ACH payment.\n\n#### Note\n\nTo expand access to additional data after a customer authenticates their account, they must re-link their account with expanded permissions.\n\nDuring the Checkout session, the customer sees a dialog that gives them the option to use instant verification or provide bank account details for microdeposit verification.\n\nIf the customer opts for microdeposit verification, Stripe automatically sends two small deposits to the provided bank account. These deposits can take 1-2 business days to appear on the customer’s online bank statement. When the deposits arrive, the customer receives an email with a link to confirm these amounts and verify the bank account with Stripe. After verification completes, the payment begins processing.\n\n[](#test-integration)\n\nLearn how to test scenarios with instant verifications using [Financial Connections](https://docs.stripe.com/financial-connections/testing#web-how-to-use-test-accounts).\n\n### Send transaction emails in test mode![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the `payment_method_data.billing_details[email]` field in the form of `{any-prefix}+test_email@{any_domain}` when you collect the [payment method details](#web-collect-details).\n\n#### Common mistake\n\n### Test account numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\n| Account number | Token | Routing number | Behavior |\n| --- | --- | --- | --- |\n| `000123456789` | `pm_usBankAccount_success` | `110000000` | The payment succeeds. |\n| `000111111113` | `pm_usBankAccount_accountClosed` | `110000000` | The payment fails because the account is closed. |\n| `000111111116` | `pm_usBankAccount_noAccount` | `110000000` | The payment fails because no account is found. |\n| `000222222227` | `pm_usBankAccount_insufficientFunds` | `110000000` | The payment fails due to insufficient funds. |\n| `000333333335` | `pm_usBankAccount_debitNotAuthorized` | `110000000` | The payment fails because debits aren’t authorized. |\n| `000444444440` | `pm_usBankAccount_invalidCurrency` | `110000000` | The payment fails due to invalid currency. |\n| `000666666661` | `pm_usBankAccount_failMicrodeposits` | `110000000` | The payment fails to send microdeposits. |\n| `000555555559` | `pm_usBankAccount_dispute` | `110000000` | The payment triggers a dispute. |\n| `000000000009` | `pm_usBankAccount_processing` | `110000000` | The payment stays in processing indefinitely. Useful for testing [PaymentIntent cancellation](https://docs.stripe.com/api/payment_intents/cancel). |\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\n### Test microdeposit amounts and descriptor codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo mimic different scenarios, use these microdeposit amounts _or_ 0.01 descriptor code values.\n\n| Microdeposit values | 0.01 descriptor code values | Scenario |\n| --- | --- | --- |\n| `32` and `45` | SM11AA | Simulates verifying the account. |\n| `10` and `11` | SM33CC | Simulates exceeding the number of allowed verification attempts. |\n| `40` and `41` | SM44DD | Simulates a microdeposit timeout. |\n\n[](#use-the-payment-method)\n\nAfter completing the Checkout Session, you can [collect](https://docs.stripe.com/payments/save-and-reuse#retrieve-checkout-session) the [PaymentMethod](https://docs.stripe.com/api/payment_methods) ID. You can use these PaymentMethod IDs to initiate future payments without having to prompt the customer for their bank account a second time.\n\nWhen [creating a PaymentIntent](https://docs.stripe.com/api/payment_intents/create), provide the `payment_method` and customer IDs to charge your customer using their saved bank account information.",
  "title": "Save details for future payments with ACH Direct Debit | Stripe Documentation",
  "description": "Learn how to save payment method details for future ACH Direct Debit payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/accounts/retrieve",
  "markdown": "# Retrieve account | Stripe API Reference\n\nRetrieves the details of an account.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an [`Account`](#account_object) object if the call succeeds. If the account ID does not exist, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1Nv0FGQ9RKHgCVdK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"business_profile\": {    \"annual_revenue\": null,    \"estimated_worker_count\": null,    \"mcc\": null,    \"name\": null,    \"product_description\": null,    \"support_address\": null,    \"support_email\": null,    \"support_phone\": null,    \"support_url\": null,    \"url\": null  },  \"business_type\": null,  \"capabilities\": {},  \"charges_enabled\": false,  \"controller\": {    \"fees\": {      \"payer\": \"application\"    },    \"is_controller\": true,    \"losses\": {      \"payments\": \"application\"    },    \"requirement_collection\": \"stripe\",    \"stripe_dashboard\": {      \"type\": \"express\"    },    \"type\": \"application\"  },  \"country\": \"US\",  \"created\": 1695830751,  \"default_currency\": \"usd\",  \"details_submitted\": false,  \"email\": \"jenny.rosen@example.com\",  \"external_accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"  },  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"login_links\": {    \"object\": \"list\",    \"total_count\": 0,    \"has_more\": false,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",    \"data\": []  },  \"metadata\": {},  \"payouts_enabled\": false,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"disabled_reason\": \"requirements.past_due\",    \"errors\": [],    \"eventually_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"past_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"pending_verification\": []  },  \"settings\": {    \"bacs_debit_payments\": {      \"display_name\": null,      \"service_user_number\": null    },    \"branding\": {      \"icon\": null,      \"logo\": null,      \"primary_color\": null,      \"secondary_color\": null    },    \"card_issuing\": {      \"tos_acceptance\": {        \"date\": null,        \"ip\": null      }    },    \"card_payments\": {      \"decline_on\": {        \"avs_failure\": false,        \"cvc_failure\": false      },      \"statement_descriptor_prefix\": null,      \"statement_descriptor_prefix_kanji\": null,      \"statement_descriptor_prefix_kana\": null    },    \"dashboard\": {      \"display_name\": null,      \"timezone\": \"Etc/UTC\"    },    \"invoices\": {      \"default_account_tax_ids\": null    },    \"payments\": {      \"statement_descriptor\": null,      \"statement_descriptor_kana\": null,      \"statement_descriptor_kanji\": null    },    \"payouts\": {      \"debit_negative_balances\": true,      \"schedule\": {        \"delay_days\": 2,        \"interval\": \"daily\"      },      \"statement_descriptor\": null    },    \"sepa_debit_payments\": {}  },  \"tos_acceptance\": {    \"date\": null,    \"ip\": null,    \"user_agent\": null  },  \"type\": \"none\"}\n```\n\n## [List all connected accounts](https://docs.stripe.com/api/accounts/list)\n\nReturns a list of accounts connected to your platform via [Connect](https://docs.stripe.com/connect). If you’re not a platform, the list is empty.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` accounts, starting after account `starting_after`. Each entry in the array is a separate [`Account`](#account_object) object. If no more accounts are available, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",      \"object\": \"account\",      \"business_profile\": {        \"annual_revenue\": null,        \"estimated_worker_count\": null,        \"mcc\": null,        \"name\": null,        \"product_description\": null,        \"support_address\": null,        \"support_email\": null,        \"support_phone\": null,        \"support_url\": null,        \"url\": null      },      \"business_type\": null,      \"capabilities\": {},      \"charges_enabled\": false,      \"controller\": {        \"fees\": {          \"payer\": \"application\"        },        \"is_controller\": true,        \"losses\": {          \"payments\": \"application\"        },        \"requirement_collection\": \"stripe\",        \"stripe_dashboard\": {          \"type\": \"express\"        },        \"type\": \"application\"      },      \"country\": \"US\",      \"created\": 1695830751,      \"default_currency\": \"usd\",      \"details_submitted\": false,      \"email\": \"jenny.rosen@example.com\",      \"external_accounts\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"      },      \"future_requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [],        \"disabled_reason\": null,        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"login_links\": {        \"object\": \"list\",        \"total_count\": 0,        \"has_more\": false,        \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",        \"data\": []      },      \"metadata\": {},      \"payouts_enabled\": false,      \"requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [          \"business_profile.mcc\",          \"business_profile.url\",          \"business_type\",          \"external_account\",          \"representative.first_name\",          \"representative.last_name\",          \"tos_acceptance.date\",          \"tos_acceptance.ip\"        ],        \"disabled_reason\": \"requirements.past_due\",        \"errors\": [],        \"eventually_due\": [          \"business_profile.mcc\",          \"business_profile.url\",          \"business_type\",          \"external_account\",          \"representative.first_name\",          \"representative.last_name\",          \"tos_acceptance.date\",          \"tos_acceptance.ip\"        ],        \"past_due\": [          \"business_profile.mcc\",          \"business_profile.url\",          \"business_type\",          \"external_account\",          \"representative.first_name\",          \"representative.last_name\",          \"tos_acceptance.date\",          \"tos_acceptance.ip\"        ],        \"pending_verification\": []      },      \"settings\": {        \"bacs_debit_payments\": {          \"display_name\": null,          \"service_user_number\": null        },        \"branding\": {          \"icon\": null,          \"logo\": null,          \"primary_color\": null,          \"secondary_color\": null        },        \"card_issuing\": {          \"tos_acceptance\": {            \"date\": null,            \"ip\": null          }        },        \"card_payments\": {          \"decline_on\": {            \"avs_failure\": false,            \"cvc_failure\": false          },          \"statement_descriptor_prefix\": null,          \"statement_descriptor_prefix_kanji\": null,          \"statement_descriptor_prefix_kana\": null        },        \"dashboard\": {          \"display_name\": null,          \"timezone\": \"Etc/UTC\"        },        \"invoices\": {          \"default_account_tax_ids\": null        },        \"payments\": {          \"statement_descriptor\": null,          \"statement_descriptor_kana\": null,          \"statement_descriptor_kanji\": null        },        \"payouts\": {          \"debit_negative_balances\": true,          \"schedule\": {            \"delay_days\": 2,            \"interval\": \"daily\"          },          \"statement_descriptor\": null        },        \"sepa_debit_payments\": {}      },      \"tos_acceptance\": {        \"date\": null,        \"ip\": null,        \"user_agent\": null      },      \"type\": \"none\"    }    {...}    {...}  ],}\n```\n\n## [Delete an account](https://docs.stripe.com/api/accounts/delete)\n\nWith [Connect](https://docs.stripe.com/connect), you can delete accounts you manage.\n\nTest-mode accounts can be deleted at any time.\n\nLive-mode accounts where Stripe is responsible for negative account balances cannot be deleted, which includes Standard accounts. Live-mode accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be deleted when all [balances](https://docs.stripe.com/api/balance/balanace_object) are zero.\n\nIf you want to delete your own account, use the [account information tab in your account settings](https://dashboard.stripe.com/settings/account) instead.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter if the call succeeds. If the account ID does not exist, this call raises [an error](#errors).\n\n```\ncurl -X DELETE https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"deleted\": true}\n```\n\n## [Reject an account](https://docs.stripe.com/api/account/reject)\n\nWith [Connect](https://docs.stripe.com/connect), you can reject accounts that you have flagged as suspicious.\n\nOnly accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be rejected. Test-mode accounts can be rejected at any time. Live-mode accounts can only be rejected after all balances are zero.\n\n### Parameters\n\n*   The reason for rejecting the account. Can be `fraud`, `terms_of_service`, or `other`.\n    \n\n### Returns\n\nReturns an account with `payouts_enabled` and `charges_enabled` set to false on success. If the account ID does not exist, this call raises [an error](#errors).\n\nPOST /v1/accounts/:id/reject\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/reject \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d reason=fraud\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"business_profile\": {    \"annual_revenue\": null,    \"estimated_worker_count\": null,    \"mcc\": null,    \"name\": null,    \"product_description\": null,    \"support_address\": null,    \"support_email\": null,    \"support_phone\": null,    \"support_url\": null,    \"url\": null  },  \"business_type\": null,  \"capabilities\": {},  \"charges_enabled\": false,  \"controller\": {    \"fees\": {      \"payer\": \"application\"    },    \"is_controller\": true,    \"losses\": {      \"payments\": \"application\"    },    \"requirement_collection\": \"stripe\",    \"stripe_dashboard\": {      \"type\": \"express\"    },    \"type\": \"application\"  },  \"country\": \"US\",  \"created\": 1385798567,  \"default_currency\": \"usd\",  \"details_submitted\": true,  \"email\": \"jenny.rosen@example.com\",  \"external_accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"  },  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"login_links\": {    \"object\": \"list\",    \"total_count\": 0,    \"has_more\": false,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",    \"data\": []  },  \"metadata\": {},  \"payouts_enabled\": true,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [      \"business_profile.mcc\",      \"business_profile.product_description\",      \"business_profile.support_phone\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"person_8UayFKIMRJklog.first_name\",      \"person_8UayFKIMRJklog.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"disabled_reason\": \"rejected.fraud\",    \"errors\": [],    \"eventually_due\": [      \"business_profile.mcc\",      \"business_profile.product_description\",      \"business_profile.support_phone\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"person_8UayFKIMRJklog.first_name\",      \"person_8UayFKIMRJklog.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"past_due\": [      \"business_profile.mcc\",      \"business_profile.product_description\",      \"business_profile.support_phone\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"person_8UayFKIMRJklog.first_name\",      \"person_8UayFKIMRJklog.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"pending_verification\": []  },  \"settings\": {    \"bacs_debit_payments\": {      \"display_name\": null,      \"service_user_number\": null    },    \"branding\": {      \"icon\": null,      \"logo\": null,      \"primary_color\": null,      \"secondary_color\": null    },    \"card_issuing\": {      \"tos_acceptance\": {        \"date\": null,        \"ip\": null      }    },    \"card_payments\": {      \"decline_on\": {        \"avs_failure\": false,        \"cvc_failure\": false      },      \"statement_descriptor_prefix\": null,      \"statement_descriptor_prefix_kanji\": null,      \"statement_descriptor_prefix_kana\": null    },    \"dashboard\": {      \"display_name\": null,      \"timezone\": \"Etc/UTC\"    },    \"invoices\": {      \"default_account_tax_ids\": null    },    \"payments\": {      \"statement_descriptor\": null,      \"statement_descriptor_kana\": null,      \"statement_descriptor_kanji\": null    },    \"payouts\": {      \"debit_negative_balances\": true,      \"schedule\": {        \"delay_days\": 2,        \"interval\": \"daily\"      },      \"statement_descriptor\": null    },    \"sepa_debit_payments\": {}  },  \"tos_acceptance\": {    \"date\": null,    \"ip\": null,    \"user_agent\": null  },  \"type\": \"none\"}\n```\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve account | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/financial_connections/sessions/object",
  "markdown": "# The Session object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    account\\_holdernullable object\n    \n    The account holder for whom accounts are collected in this session.\n    \n*   The accounts that were collected as part of this Session.\n    \n*   A value that will be passed to the client to launch the authentication flow.\n    \n*   Filters applied to this session that restrict the kinds of accounts to collect.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   #### \n    \n    permissionsarray of enums\n    \n    Permissions requested for accounts collected during this session.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `balances`<br><br>Requests access for balance data on accounts collected in this session. |\n    | `ownership`<br><br>Requests access for ownership data on accounts collected in this session. |\n    | `payment_method`<br><br>Requests permission for the creation of a payment method from an account collected in this session. |\n    | `transactions`<br><br>Requests access for transaction data on accounts collected in this session. |\n    \n*   #### \n    \n    prefetchnullable array of enums\n    \n    Data features requested to be retrieved upon account creation.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `balances`<br><br>Requests to prefetch balance data on accounts collected in this session. |\n    | `ownership`<br><br>Requests to prefetch ownership data on accounts collected in this session. |\n    | `transactions`<br><br>Requests to prefetch transaction data on accounts collected in this session. |\n    \n*   #### \n    \n    return\\_urlnullable string\n    \n    For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.\n    \n\n```\n{  \"id\": \"fcsess_1MwtnGLkdIwHu7ixs7NPQ7dq\",  \"object\": \"financial_connections.session\",  \"account_holder\": {    \"customer\": \"cus_NiKSWdaFz2F6I0\",    \"type\": \"customer\"  },  \"accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/financial_connections/accounts\"  },  \"client_secret\": \"fcsess_client_secret_KRJTKvCY3IKoYTrW18EazcO3\",  \"filters\": {    \"countries\": [      \"US\"    ]  },  \"livemode\": false,  \"permissions\": [    \"balances\",    \"payment_method\"  ]}\n```\n\n## [Create a Session](https://docs.stripe.com/api/financial_connections/sessions/create)\n\nTo launch the Financial Connections authorization flow, create a `Session`. The session’s `client_secret` can be used to launch the flow using Stripe.js.\n\n### Parameters\n\n*   #### \n    \n    account\\_holderobjectRequired\n    \n    The account holder to link accounts for.\n    \n*   #### \n    \n    permissionsarray of stringsRequired\n    \n    List of data features that you would like to request access to.\n    \n    Possible values are `balances`, `transactions`, `ownership`, and `payment_method`.\n    \n*   Filters to restrict the kinds of accounts to collect.\n    \n*   List of data features that you would like to retrieve upon account creation.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `balances`<br><br>Requests to prefetch balance data on accounts collected in this session. |\n    | `ownership`<br><br>Requests to prefetch ownership data on accounts collected in this session. |\n    | `transactions`<br><br>Requests to prefetch transaction data on accounts collected in this session. |\n    \n*   For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.\n    \n\n### Returns\n\nReturns the `Session` object.\n\nPOST /v1/financial\\_connections/sessions\n\n```\ncurl https://api.stripe.com/v1/financial_connections/sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"account_holder[type]\"=customer \\  -d \"account_holder[customer]\"=cus_NiKSWdaFz2F6I0 \\  -d \"permissions[]\"=payment_method \\  -d \"permissions[]\"=balances \\  -d \"filters[countries][]\"=US\n```\n\n```\n{  \"id\": \"fcsess_1MwtnGLkdIwHu7ixs7NPQ7dq\",  \"object\": \"financial_connections.session\",  \"account_holder\": {    \"customer\": \"cus_NiKSWdaFz2F6I0\",    \"type\": \"customer\"  },  \"accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/financial_connections/accounts\"  },  \"client_secret\": \"fcsess_client_secret_KRJTKvCY3IKoYTrW18EazcO3\",  \"filters\": {    \"countries\": [      \"US\"    ]  },  \"livemode\": false,  \"permissions\": [    \"balances\",    \"payment_method\"  ]}\n```\n\n## [Retrieve a Session](https://docs.stripe.com/api/financial_connections/sessions/retrieve)\n\nRetrieves the details of a Financial Connections `Session`\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Session` object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\nGET /v1/financial\\_connections/sessions/:id\n\n```\ncurl https://api.stripe.com/v1/financial_connections/sessions/fcsess_1MwtnGLkdIwHu7ixs7NPQ7dq \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fcsess_1MwtnGLkdIwHu7ixs7NPQ7dq\",  \"object\": \"financial_connections.session\",  \"account_holder\": {    \"customer\": \"cus_NiKSWdaFz2F6I0\",    \"type\": \"customer\"  },  \"accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/financial_connections/accounts\"  },  \"client_secret\": \"fcsess_client_secret_KRJTKvCY3IKoYTrW18EazcO3\",  \"filters\": {    \"countries\": [      \"US\"    ]  },  \"livemode\": false,  \"permissions\": [    \"balances\",    \"payment_method\"  ]}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The Session object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/ach-debit/set-up-payment?platform=web",
  "markdown": "# Save details for future payments with ACH Direct Debit\n\n## Learn how to save payment method details for future ACH Direct Debit payments.\n\nYou can use the [Setup Intents API](https://docs.stripe.com/payments/setup-intents) to collect payment method details in advance, with the final amount or payment date determined later. This is useful for:\n\n*   Saving payment methods to a wallet to streamline future purchases\n*   Collecting surcharges after fulfilling a service\n*   Starting a free trial for a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\")\n\n#### Note\n\nACH Direct Debit is a [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method, which means that funds aren’t immediately available after payment. A payment typically takes 4 business days to arrive in your account.\n\n[](#web-create-customer)\n\nCreate a [Customer](https://docs.stripe.com/api/customers \"Customers\") object when your user creates an account with your business, or retrieve an existing Customer associated with this user. Associating the ID of the Customer object with your own internal representation of a customer enables you to retrieve and use the stored payment method details later. Include an email address on the Customer to enable Financial Connections’ [return user optimization](https://docs.stripe.com/financial-connections/fundamentals#return-user-optimization).\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d email={{CUSTOMER_EMAIL}}`\n\n[](#web-create-setup-intent)\n\nA [SetupIntent](https://docs.stripe.com/api/setup_intents) is an object that represents your intent to set up a customer’s payment method for future payments. The `SetupIntent` tracks the steps of this set-up process.\n\nCreate a SetupIntent on your server with [payment\\_method\\_types](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-payment_method_types) set to us\\_bank\\_account and specify the Customer’s [id](https://docs.stripe.com/api/customers/object#customer_object-id).\n\nBy default, collecting bank account payment information uses [Financial Connections](https://docs.stripe.com/financial-connections) to instantly verify your customer’s account, with a fallback option of manual account number entry and microdeposit verification. See the [Financial Connections docs](https://docs.stripe.com/financial-connections/ach-direct-debit-payments) to learn how to configure Financial Connections and access additional account data to optimize your ACH integration. For example, you can use Financial Connections to check an account’s balance before initiating the ACH payment.\n\n#### Note\n\nTo expand access to additional data after a customer authenticates their account, they must re-link their account with expanded permissions.\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer={{CUSTOMER_ID}} \\   -d \"payment_method_types[]\"=us_bank_account \\  -d \"payment_method_options[us_bank_account][financial_connections][permissions][]\"=payment_method \\  -d \"payment_method_options[us_bank_account][financial_connections][permissions][]\"=balances`\n\n### Retrieve the client secret![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe SetupIntent includes a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") that the client side uses to securely complete the payment process. You can use different approaches to pass the client secret to the client side.\n\nRetrieve the client secret from an endpoint on your server, using the browser’s `fetch` function. This approach is best if your client side is a single-page application, particularly one built with a modern frontend framework like React. Create the server endpoint that serves the client secret:\n\n`get '/secret' do   intent = # ... Create or retrieve the SetupIntent   {client_secret: intent.client_secret}.to_json end`\n\nAnd then fetch the client secret with JavaScript on the client side:\n\n`(async () => {   const response = await fetch('/secret');   const {client_secret: clientSecret} = await response.json();   // Render the form using the clientSecret })();`\n\n[](#web-collect-details)\n\nWhen a customer clicks to pay with ACH Direct Debit, we recommend you use Stripe.js to submit the payment to Stripe. [Stripe.js](https://docs.stripe.com/payments/elements) is our foundational JavaScript library for building payment flows. It will automatically handle integration complexities, and enables you to easily extend your integration to other payment methods in the future.\n\nInclude the Stripe.js script on your checkout page by adding it to the `head` of your HTML file.\n\nCreate an instance of Stripe.js with the following JavaScript on your checkout page.\n\n`// Set your publishable key. Remember to change this to your live publishable key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\nRather than sending the entire SetupIntent object to the client, use its [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") from the previous step. This is different from your API keys that authenticate Stripe API requests.\n\nHandle the client secret carefully because it can complete the Payment Method setup process. Don’t log it, embed it in URLs, or expose it to anyone but the customer.\n\nUse [stripe.collectBankAccountForSetup](https://docs.stripe.com/js/setup_intents/collect_bank_account_for_setup) to collect bank account details with [Financial Connections](https://docs.stripe.com/financial-connections), create a [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\"), and attach that PaymentMethod to the SetupIntent. Including the account holder’s name in the `billing_details` parameter is required to create an ACH Direct Debit PaymentMethod.\n\n`// Use the form that already exists on the web page. const paymentMethodForm = document.getElementById('payment-method-form'); const confirmationForm = document.getElementById('confirmation-form');  paymentMethodForm.addEventListener('submit', (ev) => {   ev.preventDefault();   const accountHolderNameField = document.getElementById('account-holder-name-field');   const emailField = document.getElementById('email-field');    // Calling this method will open the instant verification dialog.   stripe.collectBankAccountForSetup({     clientSecret: clientSecret,     params: {       payment_method_type: 'us_bank_account',       payment_method_data: {         billing_details: {           name: accountHolderNameField.value,           email: emailField.value,         },       },     },     expand: ['payment_method'],   })   .then(({setupIntent, error}) => {     if (error) {       console.error(error.message);       // PaymentMethod collection failed for some reason.     } else if (setupIntent.status === 'requires_payment_method') {       // Customer canceled the hosted verification modal. Present them with other       // payment method type options.     } else if (setupIntent.status === 'requires_confirmation') {       // We collected an account - possibly instantly verified, but possibly       // manually-entered. Display payment method details and mandate text       // to the customer and confirm the intent once they accept       // the mandate.       confirmationForm.show();     }   }); });`\n\nThe [Financial Connections authentication flow](https://docs.stripe.com/financial-connections/fundamentals#authentication-flow) automatically handles bank account details collection and verification. When your customer completes the authentication flow, the [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") automatically attaches to the SetupIntent, and creates a [Financial Connections Account](https://docs.stripe.com/api/financial_connections/accounts).\n\n#### Common mistake\n\nBank accounts that your customers link through manual entry and microdeposits won’t have access to additional bank account data like balances, ownership, and transactions.\n\nTo provide the best user experience on all devices, set the viewport `minimum-scale` for your page to 1 using the viewport `meta` tag.\n\n`<meta name=\"viewport\" content=\"width=device-width, minimum-scale=1\" />`\n\n[\n\n## Collect mandate acknowledgement and submit![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-collect-mandate-and-submit)\n\nBefore you can complete the SetupIntent and save the payment method details for the customer, you must obtain authorization for payment by displaying mandate terms for the customer to accept.\n\nTo be compliant with Nacha rules, you must obtain authorization from your customer before you can initiate payment by displaying mandate terms for them to accept. For more information on mandates, see [Mandates](https://docs.stripe.com/payments/ach-debit#mandates).\n\nWhen the customer accepts the mandate terms, you must confirm the SetupIntent. Use [stripe.confirmUsBankAccountSetup](https://docs.stripe.com/js/setup_intents/confirm_us_bank_account_setup) to complete the payment when the customer submits the form.\n\n`confirmationForm.addEventListener('submit', (ev) => {   ev.preventDefault();   stripe.confirmUsBankAccountSetup(clientSecret)   .then(({setupIntent, error}) => {     if (error) {       console.error(error.message);       // The payment failed for some reason.     } else if (setupIntent.status === \"requires_payment_method\") {       // Confirmation failed. Attempt again with a different payment method.     } else if (setupIntent.status === \"succeeded\") {       // Confirmation succeeded! The account is now saved.       // Display a message to customer.     } else if (setupIntent.next_action?.type === \"verify_with_microdeposits\") {       // The account needs to be verified via microdeposits.       // Display a message to consumer with next steps (consumer waits for       // microdeposits, then enters a statement descriptor code on a page sent to them via email).     }   }); });`\n\n#### Note\n\n[stripe.confirmUsBankAccountSetup](https://docs.stripe.com/js/setup_intents/confirm_us_bank_account_setup) may take several seconds to complete. During that time, disable resubmittals of your form and show a waiting indicator (for example, a spinner). If you receive an error, show it to the customer, re-enable the form, and hide the waiting indicator.\n\nIf successful, Stripe returns a SetupIntent object, with one of the following possible statuses:\n\n| Status | Description | Next Steps |\n| --- | --- | --- |\n| `succeeded` | The bank account has been instantly verified or verification was not necessary. | No action needed |\n| `requires_action` | Further action needed to complete bank account verification. | Step 6: [Verifying bank accounts with microdeposits](https://docs.stripe.com/payments/ach-debit/accept-a-payment#web-verify-with-microdeposits) |\n\nAfter successfully confirming the SetupIntent, an email confirmation of the mandate and collected bank account details must be sent to your customer. Stripe handles these by default, but you can choose to [send custom notifications](https://docs.stripe.com/payments/ach-debit#mandate-and-microdeposit-emails) if you prefer.\n\n[](#web-verify-with-microdeposits)\n\nNot all customers can verify the bank account instantly. This step only applies if your customer has elected to opt out of the instant verification flow in the previous step.\n\nIn these cases, Stripe sends a `descriptor_code` microdeposit and might fall back to an `amount` microdeposit if any further issues arise with verifying the bank account. These deposits take 1-2 business days to appear on the customer’s online statement.\n\n*   **Descriptor code**. Stripe sends a single, 0.01 USD microdeposit to the customer’s bank account with a unique, 6-digit `descriptor_code` that starts with SM. Your customer uses this string to verify their bank account.\n*   **Amount**. Stripe sends two, non-unique microdeposits to the customer’s bank account, with a statement descriptor that reads `ACCTVERIFY`. Your customer uses the deposit amounts to verify their bank account.\n\nThe result of the [stripe.confirmUsBankAccountSetup](https://docs.stripe.com/js/setup_intents/confirm_us_bank_account_setup) method call in the previous step is a SetupIntent in the `requires_action` state. The SetupIntent contains a `next_action` field that contains some useful information for completing the verification.\n\n`next_action: {   type: \"verify_with_microdeposits\",   verify_with_microdeposits: {     arrival_date: 1647586800,     hosted_verification_url: \"[https://payments.stripe.com/…](https://payments.stripe.com/%E2%80%A6)\",     microdeposit_type: \"descriptor_code\"   } }`\n\nIf you supplied a [billing email](https://docs.stripe.com/api/payment_methods/object#payment_method_object-billing_details-email), Stripe notifies your customer via this email when the deposits are expected to arrive. The email includes a link to a Stripe-hosted verification page where they can confirm the amounts of the deposits and complete verification.\n\n#### Warning\n\nVerification attempts have a limit of ten failures for descriptor-based microdeposits and three for amount-based ones. If you exceed this limit, we can no longer verify the bank account. In addition, microdeposit verifications have a timeout of 10 days. If you can’t verify microdeposits in that time, the SetupIntent reverts to requiring new payment method details. Clear messaging about what these microdeposits are and how you use them can help your customers avoid verification issues.\n\n### Optional: Send custom email notifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOptionally, you can send [custom email notifications](https://docs.stripe.com/payments/ach-debit#mandate-and-microdeposit-emails) to your customer. After you set up custom emails, you need to specify how the customer responds to the verification email. To do so, choose _one_ of the following:\n\n*   Use the Stripe-hosted verification page. To do this, use the `verify_with_microdeposits[hosted_verification_url]` URL in the [`next_action`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-verify_with_microdeposits-hosted_verification_url) object to direct your customer to complete the verification process.\n    \n*   If you prefer not to use the Stripe-hosted verification page, create a form on your site. Your customers then use this form to relay microdeposit amounts to you and verify the bank account using [Stripe.js](https://docs.stripe.com/js/payment_intents/verify_microdeposits_for_payment).\n    \n    *   At minimum, set up the form to handle the `descriptor code` parameter, which is a 6-digit string for verification purposes.\n    *   Stripe also recommends that you set your form to handle the `amounts` parameter, as some banks your customers use may require it.\n    \n    Integrations only pass in the `descriptor_code` _or_ `amounts`. To determine which one your integration uses, check the value for `verify_with_microdeposits[microdeposit_type]` in the `next_action` object.\n    \n\n``stripe.verifyMicrodepositsForSetup(clientSecret, {   // Provide either a descriptor_code OR amounts, not both   descriptor_code: `SMT86W`,   amounts: [32, 45], });``\n\nWhen the bank account is successfully verified, Stripe returns the SetupIntent object with a `status` of `succeeded`, and sends a [setup\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-setup_intent.succeeded) [webhook](https://docs.stripe.com/webhooks \"webhook\") event.\n\nVerification can fail for several reasons. The failure may happen synchronously as a direct error response, or asynchronously through a [setup\\_intent.setup\\_failed](https://docs.stripe.com/api/events/types#event_types-setup_intent.setup_failed) webhook event (shown in the following examples).\n\n`{   \"error\": {     \"code\": \"payment_method_microdeposit_verification_amounts_mismatch\",     \"message\": \"The amounts provided do not match the amounts that were sent to the bank account. You have {attempts_remaining} verification attempts remaining.\",     \"type\": \"invalid_request_error\"   } }`\n\n| Error Code | Synchronous or Asynchronous | Message | Status change |\n| --- | --- | --- | --- |\n| `payment_method_microdeposit_failed` | Synchronously, or asynchronously through webhook event | Microdeposits failed. Please check the account, institution and transit numbers provided | `status` is `requires_payment_method`, and `last_setup_error` is set. |\n| `payment_method_microdeposit_verification_amounts_mismatch` | Synchronously | The amounts provided do not match the amounts that were sent to the bank account. You have {attempts\\_remaining} verification attempts remaining. | Unchanged |\n| `payment_method_microdeposit_verification_attempts_exceeded` | Synchronously, or asynchronously through webhook event | Exceeded number of allowed verification attempts | `status` is `requires_payment_method`, and `last_setup_error` is set. |\n| `payment_method_microdeposit_verification_timeout` | Asynchronously through webhook event | Microdeposit timeout. Customer hasn’t verified their bank account within the required 10 day period. | `status` is `requires_payment_method`, and `last_setup_error` is set. |\n\n[](#test-integration)\n\nLearn how to test scenarios with instant verifications using [Financial Connections](https://docs.stripe.com/financial-connections/testing#web-how-to-use-test-accounts).\n\n### Send transaction emails in test mode![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you collect the bank account details and accept a mandate, send the mandate confirmation and microdeposit verification emails in test mode. To do this, provide an email in the `payment_method_data.billing_details[email]` field in the form of `{any-prefix}+test_email@{any_domain}` when you collect the [payment method details](#web-collect-details).\n\n#### Common mistake\n\n### Test account numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides several test account numbers and corresponding tokens you can use to make sure your integration for manually-entered bank accounts is ready for production.\n\n| Account number | Token | Routing number | Behavior |\n| --- | --- | --- | --- |\n| `000123456789` | `pm_usBankAccount_success` | `110000000` | The payment succeeds. |\n| `000111111113` | `pm_usBankAccount_accountClosed` | `110000000` | The payment fails because the account is closed. |\n| `000111111116` | `pm_usBankAccount_noAccount` | `110000000` | The payment fails because no account is found. |\n| `000222222227` | `pm_usBankAccount_insufficientFunds` | `110000000` | The payment fails due to insufficient funds. |\n| `000333333335` | `pm_usBankAccount_debitNotAuthorized` | `110000000` | The payment fails because debits aren’t authorized. |\n| `000444444440` | `pm_usBankAccount_invalidCurrency` | `110000000` | The payment fails due to invalid currency. |\n| `000666666661` | `pm_usBankAccount_failMicrodeposits` | `110000000` | The payment fails to send microdeposits. |\n| `000555555559` | `pm_usBankAccount_dispute` | `110000000` | The payment triggers a dispute. |\n| `000000000009` | `pm_usBankAccount_processing` | `110000000` | The payment stays in processing indefinitely. Useful for testing [PaymentIntent cancellation](https://docs.stripe.com/api/payment_intents/cancel). |\n\nBefore test transactions can complete, you need to verify all test accounts that automatically succeed or fail the payment. To do so, use the test microdeposit amounts or descriptor codes below.\n\n### Test microdeposit amounts and descriptor codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo mimic different scenarios, use these microdeposit amounts _or_ 0.01 descriptor code values.\n\n| Microdeposit values | 0.01 descriptor code values | Scenario |\n| --- | --- | --- |\n| `32` and `45` | SM11AA | Simulates verifying the account. |\n| `10` and `11` | SM33CC | Simulates exceeding the number of allowed verification attempts. |\n| `40` and `41` | SM44DD | Simulates a microdeposit timeout. |\n\n[](#web-future-payments)\n\nWhen the SetupIntent succeeds, it will create a new [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") attached to a [Customer](https://docs.stripe.com/api/customers). These can be used to initiate future payments without having to prompt the customer for their bank account a second time.\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\" \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"payment_method\"=\"{{PAYMENT_METHOD_ID}}\" \\   -d \"payment_method_types[]\"=\"us_bank_account\" \\   -d \"confirm\"=\"true\"`",
  "title": "Save details for future payments with ACH Direct Debit | Stripe Documentation",
  "description": "Learn how to save payment method details for future ACH Direct Debit payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/financial_accounts/create",
  "markdown": "# Create a FinancialAccount | Stripe API Reference\n\nCreates a new FinancialAccount. For now, each connected account can only have one FinancialAccount.\n\n### Parameters\n\n*   #### \n    \n    supported\\_currenciesarray of stringsRequired\n    \n    The currencies the FinancialAccount can hold a balance in.\n    \n*   Encodes whether a FinancialAccount has access to a particular feature. Stripe or the platform can control features via the requested field.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    platform\\_restrictionsobject\n    \n    The set of functionalities that the platform can restrict on the FinancialAccount.\n    \n\n### Returns\n\nReturns a FinancialAccount object.\n\nPOST /v1/treasury/financial\\_accounts\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"supported_currencies[]\"=usd\n```\n\n```\n{  \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",  \"object\": \"treasury.financial_account\",  \"active_features\": [    \"financial_addresses.aba\",    \"outbound_payments.ach\",    \"outbound_payments.us_domestic_wire\"  ],  \"balance\": {    \"cash\": {      \"usd\": 0    },    \"inbound_pending\": {      \"usd\": 0    },    \"outbound_pending\": {      \"usd\": 0    }  },  \"country\": \"US\",  \"created\": 1680714349,  \"financial_addresses\": [    {      \"aba\": {        \"account_holder_name\": \"Jenny Rosen\",        \"account_number_last4\": \"7890\",        \"bank_name\": \"STRIPE TEST BANK\",        \"routing_number\": \"0000000001\"      },      \"supported_networks\": [        \"ach\",        \"us_domestic_wire\"      ],      \"type\": \"aba\"    }  ],  \"livemode\": true,  \"metadata\": null,  \"pending_features\": [],  \"restricted_features\": [],  \"status\": \"open\",  \"status_details\": {    \"closed\": null  },  \"supported_currencies\": [    \"usd\"  ],  \"features\": {}}\n```\n\n## [Update a FinancialAccount](https://docs.stripe.com/api/treasury/financial_accounts/update)\n\nUpdates the details of a FinancialAccount.\n\n### Parameters\n\n*   Encodes whether a FinancialAccount has access to a particular feature, with a status enum and associated `status_details`. Stripe or the platform may control features via the requested field.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    platform\\_restrictionsobject\n    \n    The set of functionalities that the platform can restrict on the FinancialAccount.\n    \n\n### Returns\n\nReturns a FinancialAccount object.\n\nPOST /v1/treasury/financial\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts/fa_1MtZmL2eZvKYlo2Cer6cdwEC \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",  \"object\": \"treasury.financial_account\",  \"active_features\": [    \"financial_addresses.aba\",    \"outbound_payments.ach\",    \"outbound_payments.us_domestic_wire\"  ],  \"balance\": {    \"cash\": {      \"usd\": 0    },    \"inbound_pending\": {      \"usd\": 0    },    \"outbound_pending\": {      \"usd\": 0    }  },  \"country\": \"US\",  \"created\": 1680714349,  \"financial_addresses\": [    {      \"aba\": {        \"account_holder_name\": \"Jenny Rosen\",        \"account_number_last4\": \"7890\",        \"bank_name\": \"STRIPE TEST BANK\",        \"routing_number\": \"0000000001\"      },      \"supported_networks\": [        \"ach\",        \"us_domestic_wire\"      ],      \"type\": \"aba\"    }  ],  \"livemode\": true,  \"metadata\": {    \"order_id\": \"6735\"  },  \"pending_features\": [],  \"restricted_features\": [],  \"status\": \"open\",  \"status_details\": {    \"closed\": null  },  \"supported_currencies\": [    \"usd\"  ],  \"features\": {}}\n```\n\n## [Retrieve a FinancialAccount](https://docs.stripe.com/api/treasury/financial_accounts/retrieve)\n\nRetrieves the details of a FinancialAccount.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturn a FinancialAccount object.\n\nGET /v1/treasury/financial\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts/fa_1MtZmL2eZvKYlo2Cer6cdwEC \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",  \"object\": \"treasury.financial_account\",  \"active_features\": [    \"financial_addresses.aba\",    \"outbound_payments.ach\",    \"outbound_payments.us_domestic_wire\"  ],  \"balance\": {    \"cash\": {      \"usd\": 0    },    \"inbound_pending\": {      \"usd\": 0    },    \"outbound_pending\": {      \"usd\": 0    }  },  \"country\": \"US\",  \"created\": 1680714349,  \"financial_addresses\": [    {      \"aba\": {        \"account_holder_name\": \"Jenny Rosen\",        \"account_number_last4\": \"7890\",        \"bank_name\": \"STRIPE TEST BANK\",        \"routing_number\": \"0000000001\"      },      \"supported_networks\": [        \"ach\",        \"us_domestic_wire\"      ],      \"type\": \"aba\"    }  ],  \"livemode\": true,  \"metadata\": null,  \"pending_features\": [],  \"restricted_features\": [],  \"status\": \"open\",  \"status_details\": {    \"closed\": null  },  \"supported_currencies\": [    \"usd\"  ],  \"features\": {}}\n```\n\n## [List all FinancialAccounts](https://docs.stripe.com/api/treasury/financial_accounts/list)\n\nReturns a list of FinancialAccounts.\n\n### Parameters\n\n*   Only return FinancialAccounts that were created during the given date interval.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` FinancialAccounts, starting after FinancialAccount `starting_after`. Each entry in the array is a separate `FinancialAccount` object. If no more FinancialAccounts are available, the resulting array is empty.\n\nGET /v1/treasury/financial\\_accounts\n\n```\ncurl -G https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/financial_accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",      \"object\": \"treasury.financial_account\",      \"active_features\": [        \"financial_addresses.aba\",        \"outbound_payments.ach\",        \"outbound_payments.us_domestic_wire\"      ],      \"balance\": {        \"cash\": {          \"usd\": 0        },        \"inbound_pending\": {          \"usd\": 0        },        \"outbound_pending\": {          \"usd\": 0        }      },      \"country\": \"US\",      \"created\": 1680714349,      \"financial_addresses\": [        {          \"aba\": {            \"account_holder_name\": \"Jenny Rosen\",            \"account_number_last4\": \"7890\",            \"bank_name\": \"STRIPE TEST BANK\",            \"routing_number\": \"0000000001\"          },          \"supported_networks\": [            \"ach\",            \"us_domestic_wire\"          ],          \"type\": \"aba\"        }      ],      \"livemode\": true,      \"metadata\": null,      \"pending_features\": [],      \"restricted_features\": [],      \"status\": \"open\",      \"status_details\": {        \"closed\": null      },      \"supported_currencies\": [        \"usd\"      ],      \"features\": {}    }    {...}    {...}  ],}\n```\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Create a FinancialAccount | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/expand",
  "markdown": "# Expanding responses | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to reduce the number of requests you make to the Stripe API by expanding objects in responses.\n\nThis guide describes how to request additional properties from the API. You will learn to modify your requests to include:\n\n*   properties from related objects\n*   properties from distantly related objects\n*   additional properties on all objects in a list\n*   properties that aren’t included by default in a response\n\n## How it works ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Stripe API is organized into resources represented by objects with state, configuration, and contextual properties. These objects all have unique IDs that you can use to retrieve, update, and delete them. The API also uses these IDs to link related objects together. A [Checkout Session](https://docs.stripe.com/api/checkout/sessions/object), for example, links to a [Customer](https://docs.stripe.com/api/customers/object) by the [Customer ID](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-customer).\n\n`{   \"id\": \"cs_test_KdjLtDPfAjT1gq374DMZ3rHmZ9OoSlGRhyz8yTypH76KpN4JXkQpD2G0\",   \"object\": \"checkout.session\",   ...   \"customer\": \"cus_HQmikpKnGHkNwW\",   ... }`\n\nIn cases where you need information from a linked object, you can retrieve the linked object in a new call using its ID. However, this approach requires two API requests to access just one value. If you need information from multiple linked objects, each would also require separate requests, which all adds to the latency and complexity of your application.\n\nThe API has an Expand feature that allows you to retrieve linked objects in a single call, effectively replacing the object ID with all its properties and values. For example, say you wanted to access details on a customer tied to a given Checkout Session. You would retrieve the Checkout Session and pass the `customer` property to the `expand` array, which tells Stripe to include the entire Customer object in the response:\n\n`curl -G https://api.stripe.com/v1/checkout/sessions/`\n\n`{{SESSION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"expand[]\"=customer`\n\nWhich returns the Checkout Session with the full Customer object instead of its ID:\n\n`{   \"id\": \"cs_test_KdjLtDPfAjT1gq374DMZ3rHmZ9OoSlGRhyz8yTypH76KpN4JXkQpD2G0\",   \"object\": \"checkout.session\",   ...   \"customer\": {     \"id\": \"cus_HQmikpKnGHkNwW\",     \"object\": \"customer\",     ...     \"metadata\": {       \"user_id\": \"user_xyz\"     },     ...   } }`\n\n#### Note\n\nNot all properties can be expanded. The API reference marks expandable properties with the “Expandable” label.\n\n## Expanding multiple properties ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo expand multiple properties in one call, add additional items to the expand array. For example, if you want to expand both the [customer](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-customer) and the [payment\\_intent](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-payment_intent) for a given Checkout Session, you would pass `expand` an array with both the `customer` and `payment_intent` strings:\n\n`curl -G https://api.stripe.com/v1/checkout/sessions/`\n\n`{{SESSION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"expand[]\"=customer \\  -d \"expand[]\"=payment_intent`\n\n## Expanding multiple levels ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf the value you want is nested deeply across multiple linked resources, you can reach it by recursively expanding using dot notation. For instance, if you needed to know the type of payment method that was used for a given Checkout Session, you would first retrieve the Checkout Session’s payment intent, then retrieve the payment intent’s linked payment method to get its type. With `expand`, you can do this in one call:\n\n`curl -G https://api.stripe.com/v1/checkout/sessions/`\n\n`{{SESSION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"expand[]\"=\"payment_intent.payment_method\"`\n\nWhich returns the Checkout Session with the full [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) and [PaymentMethod](https://docs.stripe.com/api/payment_methods/object) objects instead of their IDs:\n\n`{   \"id\": \"cs_test_KdjLtDPfAjT1gq374DMZ3rHmZ9OoSlGRhyz8yTypH76KpN4JXkQpD2G0\",   \"object\": \"checkout.session\",   ...   \"mode\": \"payment\",   \"payment_intent\": {     \"id\": \"pi_1GkXXDLHughnNhxyLlsnvUuY\",     \"object\": \"payment_intent\",     \"amount\": 100,     ...     \"charges\": {...},     \"client_secret\": \"pi_1GkXXDLHughnNhxyLlsnvUuY_secret_oLbwpm0ME0ieJ9Aykz2SwKzj5\",     ...     \"payment_method\": {       \"id\": \"pm_1GkXXuLHughnNhxy8xpAdGtf\",       \"object\": \"payment_method\",       \"billing_details\": {...},       \"card\": {...},`\n\n#### Note\n\nExpansions have a maximum depth of four levels. Meaning that an `expand` string can contain no more than four properties: `property1.property2.property3.property4`.\n\n## Expanding properties in lists ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen the API returns a list of objects, you can use the `data` keyword to expand a given property on each object in that list. For example, say you need information about the payment methods used by one of your customers. To get this information, you would [list the customer’s PaymentIntents](https://docs.stripe.com/api/payment_intents/list#list_payment_intents-customer), which returns an object with the following structure:\n\n`{   \"object\": \"list\",   \"data\": [     {       \"id\": \"pi_1GrvBKLHughnNhxy6N28q8gt\",       \"object\": \"payment_intent\",       \"amount\": 1000,       ...       \"payment_method\": \"pm_1GrvBxLHughnNhxyJjtBtHcc\",       ...     },`\n\n#### Note\n\nAll lists returned in the API have the above structure, where the `data` property contains the array of objects being listed. You can use the `data` keyword in any position in an expand string to move the expand cursor into the list.\n\nRather than looping through each payment intent in the list and retrieving the linked payment methods in separate calls, you can expand all the payment methods at once using the `data` keyword:\n\n`curl -G https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"expand[]\"=\"data.payment_method\"`\n\nThe list then includes the full payment method object on each payment intent:\n\n`{   \"object\": \"list\",   \"data\": [     {       \"id\": \"pi_1GrvBKLHughnNhxy6N28q8gt\",       \"object\": \"payment_intent\",       \"amount\": 1000,       ...       \"payment_method\": {         \"id\": \"pm_1GrvBxLHughnNhxyJjtBtHcc\",         \"object\": \"payment_method\",         \"billing_details\": {...},         \"card\": {           \"brand\": \"visa\",           ...`\n\n#### Note\n\nExpanding responses has performance implications. To keep requests fast, try to limit many nested expansions on list requests.\n\n## Using expansion to request includable properties![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn some cases, resources have properties that aren’t included by default. One example is the Checkout Session’s [line\\_items](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-line_items) property, which is only included in responses if requested using the `expand` parameter, for example:\n\n`curl -G https://api.stripe.com/v1/checkout/sessions/`\n\n`{{SESSION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"expand[]\"=line_items`\n\n#### Note\n\nLike other expandable properties, the API reference marks properties that are includable with the “Expandable” label.\n\n## Using expansion with webhooks ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can’t receive [webhook](https://docs.stripe.com/webhooks \"webhook\") events with properties auto-expanded. Objects sent in events are always in their minimal form. To access nested values in expandable properties, you must retrieve the object in a separate call within your webhook handler.",
  "title": "Expanding responses | Stripe Documentation",
  "description": "Learn how to reduce the number of requests you make to the Stripe API by expanding objects in responses.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/financial_accounts/object",
  "markdown": "# The FinancialAccount object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    active\\_featuresarray of enums\n    \n    The array of paths to active Features in the Features hash.\n    \n*   The single multi-currency balance of the FinancialAccount. Positive values represent money that belongs to the user while negative values represent funds the user owes. Currently, FinancialAccounts can only carry balances in USD.\n    \n\n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   #### \n    \n    featuresnullable objectExpandable\n    \n    The features and their statuses for this FinancialAccount.\n    \n*   #### \n    \n    financial\\_addressesarray of objects\n    \n    The set of credentials that resolve to a FinancialAccount.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    pending\\_featuresarray of enums\n    \n    The array of paths to pending Features in the Features hash.\n    \n*   #### \n    \n    platform\\_restrictionsnullable object\n    \n    The set of functionalities that the platform can restrict on the FinancialAccount.\n    \n*   #### \n    \n    restricted\\_featuresarray of enums\n    \n    The array of paths to restricted Features in the Features hash.\n    \n*   The enum specifying what state the account is in.\n    \n*   Details related to the status of this FinancialAccount.\n    \n*   #### \n    \n    supported\\_currenciesarray of enums\n    \n    The currencies the FinancialAccount can hold a balance in. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.\n    \n\nThe FinancialAccount object\n\n```\n{  \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",  \"object\": \"treasury.financial_account\",  \"active_features\": [    \"financial_addresses.aba\",    \"outbound_payments.ach\",    \"outbound_payments.us_domestic_wire\"  ],  \"balance\": {    \"cash\": {      \"usd\": 0    },    \"inbound_pending\": {      \"usd\": 0    },    \"outbound_pending\": {      \"usd\": 0    }  },  \"country\": \"US\",  \"created\": 1680714349,  \"financial_addresses\": [    {      \"aba\": {        \"account_holder_name\": \"Jenny Rosen\",        \"account_number_last4\": \"7890\",        \"bank_name\": \"STRIPE TEST BANK\",        \"routing_number\": \"0000000001\"      },      \"supported_networks\": [        \"ach\",        \"us_domestic_wire\"      ],      \"type\": \"aba\"    }  ],  \"livemode\": true,  \"metadata\": null,  \"pending_features\": [],  \"restricted_features\": [],  \"status\": \"open\",  \"status_details\": {    \"closed\": null  },  \"supported_currencies\": [    \"usd\"  ],  \"features\": {}}\n```\n\n## [Create a FinancialAccount](https://docs.stripe.com/api/treasury/financial_accounts/create)\n\nCreates a new FinancialAccount. For now, each connected account can only have one FinancialAccount.\n\n### Parameters\n\n*   #### \n    \n    supported\\_currenciesarray of stringsRequired\n    \n    The currencies the FinancialAccount can hold a balance in.\n    \n*   Encodes whether a FinancialAccount has access to a particular feature. Stripe or the platform can control features via the requested field.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    platform\\_restrictionsobject\n    \n    The set of functionalities that the platform can restrict on the FinancialAccount.\n    \n\n### Returns\n\nReturns a FinancialAccount object.\n\nPOST /v1/treasury/financial\\_accounts\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"supported_currencies[]\"=usd\n```\n\n```\n{  \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",  \"object\": \"treasury.financial_account\",  \"active_features\": [    \"financial_addresses.aba\",    \"outbound_payments.ach\",    \"outbound_payments.us_domestic_wire\"  ],  \"balance\": {    \"cash\": {      \"usd\": 0    },    \"inbound_pending\": {      \"usd\": 0    },    \"outbound_pending\": {      \"usd\": 0    }  },  \"country\": \"US\",  \"created\": 1680714349,  \"financial_addresses\": [    {      \"aba\": {        \"account_holder_name\": \"Jenny Rosen\",        \"account_number_last4\": \"7890\",        \"bank_name\": \"STRIPE TEST BANK\",        \"routing_number\": \"0000000001\"      },      \"supported_networks\": [        \"ach\",        \"us_domestic_wire\"      ],      \"type\": \"aba\"    }  ],  \"livemode\": true,  \"metadata\": null,  \"pending_features\": [],  \"restricted_features\": [],  \"status\": \"open\",  \"status_details\": {    \"closed\": null  },  \"supported_currencies\": [    \"usd\"  ],  \"features\": {}}\n```\n\n## [Update a FinancialAccount](https://docs.stripe.com/api/treasury/financial_accounts/update)\n\nUpdates the details of a FinancialAccount.\n\n### Parameters\n\n*   Encodes whether a FinancialAccount has access to a particular feature, with a status enum and associated `status_details`. Stripe or the platform may control features via the requested field.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    platform\\_restrictionsobject\n    \n    The set of functionalities that the platform can restrict on the FinancialAccount.\n    \n\n### Returns\n\nReturns a FinancialAccount object.\n\nPOST /v1/treasury/financial\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts/fa_1MtZmL2eZvKYlo2Cer6cdwEC \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",  \"object\": \"treasury.financial_account\",  \"active_features\": [    \"financial_addresses.aba\",    \"outbound_payments.ach\",    \"outbound_payments.us_domestic_wire\"  ],  \"balance\": {    \"cash\": {      \"usd\": 0    },    \"inbound_pending\": {      \"usd\": 0    },    \"outbound_pending\": {      \"usd\": 0    }  },  \"country\": \"US\",  \"created\": 1680714349,  \"financial_addresses\": [    {      \"aba\": {        \"account_holder_name\": \"Jenny Rosen\",        \"account_number_last4\": \"7890\",        \"bank_name\": \"STRIPE TEST BANK\",        \"routing_number\": \"0000000001\"      },      \"supported_networks\": [        \"ach\",        \"us_domestic_wire\"      ],      \"type\": \"aba\"    }  ],  \"livemode\": true,  \"metadata\": {    \"order_id\": \"6735\"  },  \"pending_features\": [],  \"restricted_features\": [],  \"status\": \"open\",  \"status_details\": {    \"closed\": null  },  \"supported_currencies\": [    \"usd\"  ],  \"features\": {}}\n```\n\n## [Retrieve a FinancialAccount](https://docs.stripe.com/api/treasury/financial_accounts/retrieve)\n\nRetrieves the details of a FinancialAccount.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturn a FinancialAccount object.\n\nGET /v1/treasury/financial\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/financial_accounts/fa_1MtZmL2eZvKYlo2Cer6cdwEC \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",  \"object\": \"treasury.financial_account\",  \"active_features\": [    \"financial_addresses.aba\",    \"outbound_payments.ach\",    \"outbound_payments.us_domestic_wire\"  ],  \"balance\": {    \"cash\": {      \"usd\": 0    },    \"inbound_pending\": {      \"usd\": 0    },    \"outbound_pending\": {      \"usd\": 0    }  },  \"country\": \"US\",  \"created\": 1680714349,  \"financial_addresses\": [    {      \"aba\": {        \"account_holder_name\": \"Jenny Rosen\",        \"account_number_last4\": \"7890\",        \"bank_name\": \"STRIPE TEST BANK\",        \"routing_number\": \"0000000001\"      },      \"supported_networks\": [        \"ach\",        \"us_domestic_wire\"      ],      \"type\": \"aba\"    }  ],  \"livemode\": true,  \"metadata\": null,  \"pending_features\": [],  \"restricted_features\": [],  \"status\": \"open\",  \"status_details\": {    \"closed\": null  },  \"supported_currencies\": [    \"usd\"  ],  \"features\": {}}\n```\n\n## [List all FinancialAccounts](https://docs.stripe.com/api/treasury/financial_accounts/list)\n\nReturns a list of FinancialAccounts.\n\n### Parameters\n\n*   Only return FinancialAccounts that were created during the given date interval.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` FinancialAccounts, starting after FinancialAccount `starting_after`. Each entry in the array is a separate `FinancialAccount` object. If no more FinancialAccounts are available, the resulting array is empty.\n\nGET /v1/treasury/financial\\_accounts\n\n```\ncurl -G https://api.stripe.com/v1/treasury/financial_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/financial_accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fa_1MtZmL2eZvKYlo2Cer6cdwEC\",      \"object\": \"treasury.financial_account\",      \"active_features\": [        \"financial_addresses.aba\",        \"outbound_payments.ach\",        \"outbound_payments.us_domestic_wire\"      ],      \"balance\": {        \"cash\": {          \"usd\": 0        },        \"inbound_pending\": {          \"usd\": 0        },        \"outbound_pending\": {          \"usd\": 0        }      },      \"country\": \"US\",      \"created\": 1680714349,      \"financial_addresses\": [        {          \"aba\": {            \"account_holder_name\": \"Jenny Rosen\",            \"account_number_last4\": \"7890\",            \"bank_name\": \"STRIPE TEST BANK\",            \"routing_number\": \"0000000001\"          },          \"supported_networks\": [            \"ach\",            \"us_domestic_wire\"          ],          \"type\": \"aba\"        }      ],      \"livemode\": true,      \"metadata\": null,      \"pending_features\": [],      \"restricted_features\": [],      \"status\": \"open\",      \"status_details\": {        \"closed\": null      },      \"supported_currencies\": [        \"usd\"      ],      \"features\": {}    }    {...}    {...}  ],}\n```",
  "title": "The FinancialAccount object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/external_account_bank_accounts/create",
  "markdown": "# Create a bank account | Stripe API Reference\n\nWhen you create a new bank account, you must specify a [connected account](#accounts) to create it on. You can only specify connected accounts where [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nIf the bank account’s owner has no other external account in the bank account’s currency, the new bank account will become the default for that currency. However, if the owner already has a bank account for that currency, the new account will become the default only if the `default_for_currency` parameter is set to `true`.\n\n### Parameters\n\n*   #### \n    \n    external\\_accountobject | stringRequired\n    \n    Either a token, like the ones returned by [Stripe.js](https://docs.stripe.com/js), or a dictionary containing a user’s bank account details (with the options shown below).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n\n### Returns\n\nReturns the bank account object\n\nPOST /v1/accounts/:id/external\\_accounts\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d external_account=btok_1NAiJy2eZvKYlo2Cnh6bIs9c\n```\n\n```\n{  \"id\": \"ba_1NAiJy2eZvKYlo2CvChQKz5k\",  \"object\": \"bank_account\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {},  \"routing_number\": \"110000000\",  \"status\": \"new\"}\n```\n\n## [Update a bank account](https://docs.stripe.com/api/external_account_bank_accounts/update)\n\nUpdates the metadata, account holder name, account holder type of a bank account belonging to a connected account and optionally sets it as the default for its currency. Other bank account details are not editable by design.\n\nYou can only update bank accounts when [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts).\n\nYou can re-enable a disabled bank account by performing an update call without providing any arguments or changes.\n\n### Parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n    When set to true, this becomes the default external account for its currency.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    account\\_holder\\_namestring\n    \n*   #### \n    \n    account\\_holder\\_typestring\n    \n\n### Returns\n\nReturns the bank account object.\n\nPOST /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/ba_1NAiwl2eZvKYlo2CRdCLZSxO \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ba_1NAiwl2eZvKYlo2CRdCLZSxO\",  \"object\": \"bank_account\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"routing_number\": \"110000000\",  \"status\": \"new\",  \"account\": \"acct_1032D82eZvKYlo2C\"}\n```\n\n## [Retrieve a bank account](https://docs.stripe.com/api/external_account_bank_accounts/retrieve)\n\nBy default, you can see the 10 most recent external accounts stored on a [connected account](https://docs.stripe.com/connect/accounts) directly on the object. You can also retrieve details about a specific bank account stored on the account.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the bank account object.\n\nGET /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/ba_1NAinX2eZvKYlo2CpFGcuuEG \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ba_1NAinX2eZvKYlo2CpFGcuuEG\",  \"object\": \"bank_account\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"customer\": null,  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {},  \"routing_number\": \"110000000\",  \"status\": \"new\"}\n```\n\n## [List all bank accounts](https://docs.stripe.com/api/external_account_bank_accounts/list)\n\nYou can see a list of the bank accounts that belong to a [connected account](https://docs.stripe.com/connect/accounts). Note that the 10 most recent external accounts are always available by default on the corresponding Stripe object. If you need more than those 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional bank accounts.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of the bank accounts stored on the account.\n\nGET /v1/accounts/:id/external\\_accounts\n\n```\ncurl -G https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d object=bank_account\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ba_1NB1IV2eZvKYlo2CByiLrMWv\",      \"object\": \"bank_account\",      \"account_holder_name\": \"Jane Austen\",      \"account_holder_type\": \"company\",      \"account_type\": null,      \"bank_name\": \"STRIPE TEST BANK\",      \"country\": \"US\",      \"currency\": \"usd\",      \"fingerprint\": \"1JWtPxqbdX5Gamtc\",      \"last4\": \"6789\",      \"metadata\": {},      \"routing_number\": \"110000000\",      \"status\": \"new\",      \"account\": \"acct_1032D82eZvKYlo2C\"    }    {...}    {...}  ],}\n```\n\n## [Delete a bank account](https://docs.stripe.com/api/external_account_bank_accounts/delete)\n\nYou can delete destination bank accounts from a connected account where [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nThere are restrictions for deleting a bank account with `default_for_currency` set to true. You cannot delete a bank account if any of the following apply:\n\n*   The bank account’s `currency` is the same as the connected account’s [default\\_currency](https://docs.stripe.com/api/accounts/object#account_object-default_currency).\n*   There is another external account (card or bank account) with the same currency as the bank account.\n\nTo delete a bank account, you must first replace the default external account by setting `default_for_currency` with another external account in the same currency.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the deleted bank account object.\n\nDELETE /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/ba_1NAz2w2eZvKYlo2CgeR2w6yU \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ba_1NAz2w2eZvKYlo2CgeR2w6yU\",  \"object\": \"bank_account\",  \"deleted\": true}\n```",
  "title": "Create a bank account | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/moving-money/notification-of-change",
  "markdown": "# ACH Notification of Change handling\n\n## Learn how external account information is updated.\n\nWhen you originate an ACH transaction with Stripe (for example, using `InboundTransfer`, `OutboundTransfer`, or `OutboundPayment` objects with Treasury), the financial institution receiving the transaction might return a Notification of Change (NOC). This is a message indicating that new information is available about the destination account (such as a new account number or routing number).\n\nACH network rules require Stripe to update saved account information when we receive an NOC. We automatically process the NOC by updating the relevant `PaymentMethod` or `BankAccount` object and notify you through a webhook. You might want to monitor these webhooks to inform your users that account information has changed or to update account information that you’ve persisted outside of Stripe.\n\n| NOC type | Fields updated |\n| --- | --- |\n| Account number | `account_number`, `last4`, `fingerprint` |\n| Routing number | `routing_number`, `fingerprint` |\n| Account use (for example, checking or savings) | `account_type`, `fingerprint` |\n\nNOCs aren’t processed for `OutboundPayment` objects where payment method details are provided inline (using `destination_payment_method_data`) as there is no persisted `PaymentMethod` or `BankAccount` object in this case to update.\n\n## NOC for a PaymentMethod![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen we receive an NOC for a transaction originated with a `PaymentMethod` object:\n\n*   Stripe updates the `PaymentMethod` and triggers a `payment_method.updated` webhook.\n*   If the `PaymentMethod` is attached to a `Customer` (for use with `OutboundPayment` objects), Stripe triggers a `customer.source.updated` webhook.\n*   If the `PaymentMethod` is attached directly to a Stripe account (for use with `InboundTransfer` or `OutboundTransfer` objects), Stripe triggers an `account.external_account.updated` webhook.\n\n## NOC for a BankAccount![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen we receive an NOC for a transaction originated with a `BankAccount` object:\n\n*   Stripe updates the `BankAccount` object.\n*   If the `BankAccount` is attached to a `Customer` (for use with `OutboundPayment` objects), Stripe triggers a `customer.source.updated` webhook.\n*   If the `BankAccount` is attached directly to a Stripe account (for use with `InboundTransfer` or `OutboundTransfer` objects), Stripe triggers an `account.external_account.updated` webhook.\n\nIn cases where the `BankAccount` that’s set up as your platform’s primary external account is updated, Stripe also notifies you by email. We don’t send an email for updates to external accounts that are attached to your connected accounts’ Stripe accounts, or for updates to external accounts attached to `Customer` objects.",
  "title": "ACH Notification of Change handling | Stripe Documentation",
  "description": "Learn how external account information is updated.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/payouts/object",
  "markdown": "# The Payout object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The amount (in cents) that transfers to your bank account or debit card.\n    \n*   Date that you can expect the payout to arrive in the bank. This factors in delays to account for weekends or bank holidays.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    statement\\_descriptornullable string\n    \n    Extra information about a payout that displays on the user’s bank statement.\n    \n*   Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it’s submitted to the bank, when it becomes `in_transit`. The status changes to `paid` if the transaction succeeds, or to `failed` or `canceled` (within 5 business days). Some payouts that fail might initially show as `paid`, then change to `failed`.\n    \n\n### More attributes\n\n*   #### \n    \n    application\\_feenullable stringExpandableConnect only\n    \n*   #### \n    \n    application\\_fee\\_amountnullable integerConnect only\n    \n\n*   #### \n    \n    balance\\_transactionnullable stringExpandable\n    \n\n*   #### \n    \n    destinationnullable stringExpandable\n    \n*   #### \n    \n    failure\\_balance\\_transactionnullable stringExpandable\n    \n*   #### \n    \n    failure\\_codenullable enum\n    \n*   #### \n    \n    failure\\_messagenullable string\n    \n\n*   #### \n    \n    original\\_payoutnullable stringExpandable\n    \n*   #### \n    \n    reconciliation\\_statusenum\n    \n*   #### \n    \n    reversed\\_bynullable stringExpandable\n    \n\n```\n{  \"id\": \"po_1OaFDbEcg9tTZuTgNYmX0PKB\",  \"object\": \"payout\",  \"amount\": 1100,  \"arrival_date\": 1680652800,  \"automatic\": false,  \"balance_transaction\": \"txn_1OaFDcEcg9tTZuTgYMR25tSe\",  \"created\": 1680648691,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"ba_1MtIhL2eZvKYlo2CAElKwKu2\",  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"metadata\": {},  \"method\": \"standard\",  \"original_payout\": null,  \"reconciliation_status\": \"not_applicable\",  \"reversed_by\": null,  \"source_type\": \"card\",  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"bank_account\"}\n```\n\n## [Create a payout](https://docs.stripe.com/api/payouts/create)\n\nTo send funds to your own bank account, create a new payout object. Your [Stripe balance](#balance) must cover the payout amount. If it doesn’t, you receive an “Insufficient Funds” error.\n\nIf your API key is in test mode, money won’t actually be sent, though every other action occurs as if you’re in live mode.\n\nIf you create a manual payout on a Stripe account that uses multiple payment source types, you need to specify the source type balance that the payout draws from. The [balance object](#balance_object) details available and pending amounts by source type.\n\n### Parameters\n\n*   A positive integer in cents representing how much to payout.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    A string that displays on the recipient’s bank or card statement (up to 22 characters). A `statement_descriptor` that’s longer than 22 characters return an error. Most banks truncate this information and display it inconsistently. Some banks might not display it at all.\n    \n\n### More parameters\n\n### Returns\n\nReturns a payout object if no initial errors are present during the payout creation (invalid routing number, insufficient funds, and so on). We initially mark the status of the payout object as `pending`.\n\n```\ncurl https://api.stripe.com/v1/payouts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1100 \\  -d currency=usd\n```\n\n```\n{  \"id\": \"po_1OaFDbEcg9tTZuTgNYmX0PKB\",  \"object\": \"payout\",  \"amount\": 1100,  \"arrival_date\": 1680652800,  \"automatic\": false,  \"balance_transaction\": \"txn_1OaFDcEcg9tTZuTgYMR25tSe\",  \"created\": 1680648691,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"ba_1MtIhL2eZvKYlo2CAElKwKu2\",  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"metadata\": {},  \"method\": \"standard\",  \"original_payout\": null,  \"reconciliation_status\": \"not_applicable\",  \"reversed_by\": null,  \"source_type\": \"card\",  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"bank_account\"}\n```\n\n## [Update a payout](https://docs.stripe.com/api/payouts/update)\n\nUpdates the specified payout by setting the values of the parameters you pass. We don’t change parameters that you don’t provide. This request only accepts the metadata as arguments.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the payout object if the update succeeds. This call raises [an error](#errors) if update parameters are invalid.\n\n```\ncurl https://api.stripe.com/v1/payouts/po_1OaFDbEcg9tTZuTgNYmX0PKB \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"po_1OaFDbEcg9tTZuTgNYmX0PKB\",  \"object\": \"payout\",  \"amount\": 1100,  \"arrival_date\": 1680652800,  \"automatic\": false,  \"balance_transaction\": \"txn_1OaFDcEcg9tTZuTgYMR25tSe\",  \"created\": 1680648691,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"ba_1MtIhL2eZvKYlo2CAElKwKu2\",  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"method\": \"standard\",  \"original_payout\": null,  \"reconciliation_status\": \"not_applicable\",  \"reversed_by\": null,  \"source_type\": \"card\",  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"bank_account\"}\n```\n\n## [Retrieve a payout](https://docs.stripe.com/api/payouts/retrieve)\n\nRetrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list. Stripe returns the corresponding payout information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a payout object if a you provide a valid identifier. raises [An error](#errors) occurs otherwise.\n\n```\ncurl https://api.stripe.com/v1/payouts/po_1OaFDbEcg9tTZuTgNYmX0PKB \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"po_1OaFDbEcg9tTZuTgNYmX0PKB\",  \"object\": \"payout\",  \"amount\": 1100,  \"arrival_date\": 1680652800,  \"automatic\": false,  \"balance_transaction\": \"txn_1OaFDcEcg9tTZuTgYMR25tSe\",  \"created\": 1680648691,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"ba_1MtIhL2eZvKYlo2CAElKwKu2\",  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"metadata\": {},  \"method\": \"standard\",  \"original_payout\": null,  \"reconciliation_status\": \"not_applicable\",  \"reversed_by\": null,  \"source_type\": \"card\",  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"bank_account\"}\n```\n\n## [List all payouts](https://docs.stripe.com/api/payouts/list)\n\nReturns a list of existing payouts sent to third-party bank accounts or payouts that Stripe sent to you. The payouts return in sorted order, with the most recently created payouts appearing first.\n\n### Parameters\n\n*   Only return payouts that have the given status: `pending`, `paid`, `failed`, or `canceled`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` payouts, starting after payout `starting_after`. Each entry in the array is a separate payout object. If no other payouts are available, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/payouts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/payouts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"po_1OaFDbEcg9tTZuTgNYmX0PKB\",      \"object\": \"payout\",      \"amount\": 1100,      \"arrival_date\": 1680652800,      \"automatic\": false,      \"balance_transaction\": \"txn_1OaFDcEcg9tTZuTgYMR25tSe\",      \"created\": 1680648691,      \"currency\": \"usd\",      \"description\": null,      \"destination\": \"ba_1MtIhL2eZvKYlo2CAElKwKu2\",      \"failure_balance_transaction\": null,      \"failure_code\": null,      \"failure_message\": null,      \"livemode\": false,      \"metadata\": {},      \"method\": \"standard\",      \"original_payout\": null,      \"reconciliation_status\": \"not_applicable\",      \"reversed_by\": null,      \"source_type\": \"card\",      \"statement_descriptor\": null,      \"status\": \"pending\",      \"type\": \"bank_account\"    }    {...}    {...}  ],}\n```",
  "title": "The Payout object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/top-ups",
  "markdown": "# Add funds to your platform balance\n\n## Platforms can add funds to their balance from a bank account.\n\nPlatforms can add funds to their Stripe balance to pay connected accounts for goods or services. There are a number of different use cases for adding funds to pay connected accounts for goods or services, including:\n\n*   Paying bonuses or other one-off [payouts](https://docs.stripe.com/payouts \"payout\"), independent of specific charges.\n*   Providing customer discounts while still paying full price for goods or services to sellers.\n*   Adding funds from non-Stripe income (for example, checks or funds from another processor).\n*   Enabling faster payouts (for example, pay a vendor before incoming funds become available).\n\nWhere permitted, Platforms can also add funds to their Stripe balance to send funds to recipients off of Stripe (for example, via [cross-border payouts](https://docs.stripe.com/connect/cross-border-payouts)). They can also pay out added funds to other accounts they own.\n\n## Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAll of these requirements must be met to add funds to your Stripe balance:\n\n*   Your platform is in the US and the connected account receiving the funds either is in the US or has a [recipient](https://docs.stripe.com/connect/service-agreement-types#recipient) service agreement.\n*   Your platform profile is approved. You can check the status in your [settings](https://dashboard.stripe.com/connect/settings/profile) after completing the platform profile.\n\nWhen adding funds to your balance, best practice is to use a manual payout schedule. If you enable automatic payouts, you can’t control whether the system uses added funds for payouts. You can configure your schedule in your [payout settings](https://dashboard.stripe.com/settings/payouts).\n\n#### Note\n\nIf you’re new to [Connect](https://docs.stripe.com/connect \"Connect\"), start with a guide to add funds to your platform balance and [pay out money](https://docs.stripe.com/connect/add-and-pay-out-guide).\n\n[](#confirm-funding-purpose)\n\nTo add funds, go to the [Balance](https://dashboard.stripe.com/test/balance/overview) section in the Dashboard.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/balance_card.9038431ffab8e9df92d41f8b5a08010f.png)\n\nClick **Add to balance** and select why you are adding funds to your account.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/add_funds_modal_with_issuing.f3dc58497698fb2a62b6461b7ed4fba6.png)\n\nClick **Pay out connected accounts** to add funds that are paid out to your connected accounts. If you are adding funds to your balance to cover future refunds and disputes, or to repay your platform’s negative balance, click **Cover negative balances** and see [adding funds to your Stripe balance](https://docs.stripe.com/get-started/account/add-funds).\n\n[](#verify-bank-account)\n\nYou must use a verified bank account to add funds. You’ll go through the verification process in the Dashboard when you first attempt to add funds from an unverified bank account.\n\nIf your bank account is unverified, you’ll need to confirm two microdeposits from Stripe. These deposits appear on your online banking statement within 1-2 business days. You’ll see `ACCTVERIFY` for the statement description.\n\nStripe notifies you in the Dashboard and through email when the microdeposits should have arrived in your account. To complete the verification process, click the Dashboard notification in the [Balance](https://dashboard.stripe.com/balance/overview) section, enter the two microdeposit amounts, and click **Verify account**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/top-ups4.85d1f2d8440f525714d0f2d20775e2d1.png)\n\n[](#add-funds)\n\nOnce verified, you can use the [Dashboard](https://dashboard.stripe.com/test/balance/overview) or the [API](https://docs.stripe.com/api#topups) to add funds to your account balance.\n\n1.  In the Dashboard, go to the [Balance](https://dashboard.stripe.com/test/balance/overview) section.\n2.  In the **Add to balance** window, enter an amount in USD and click **Connect payouts**.\n3.  In the resulting modal window (shown below), enter an amount in USD.\n4.  Verify the amount and click **Add funds.**\n5.  The resulting object is called a [top-up](https://docs.stripe.com/api/topups/object) and can be viewed in the [Top-ups](https://dashboard.stripe.com/test/topups) section of the Dashboard.\n6.  After the funds are available in your platform’s Stripe balance, you can transfer funds to a connected account through the [API](https://docs.stripe.com/api#transfers) or the [Dashboard](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#sending-funds). In the Dashboard, transfer funds to a connected account by clicking **Add funds** in the **Balance** section of the connected account’s detail page.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/topup_modal.5523d356678b312020e4e063e7de8eb4.png)\n\n## View your funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nView your added funds in the Dashboard on [Top-ups](https://dashboard.stripe.com/test/topups) tab under the [Balance](https://dashboard.stripe.com/balance/overview) page. Each time you add funds, a top-up object is made that has a unique ID with the format `tu_XXXXXX`, which you can see on the detailed view for the top-up.\n\n## Settlement timing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUS platforms add funds via ACH debit, and can take 5-6 business days to become available in your Stripe balance. You can request a review of your account for faster settlement timing by contacting [Stripe Support](https://support.stripe.com/contact).\n\nAs we learn more about your account, Stripe might be able to decrease your settlement timing automatically.\n\nAdding funds for future refunds and disputes or to repay a negative balance can happen through [bank or wire transfer](https://docs.stripe.com/get-started/account/add-funds), and be available in 1-2 business days.\n\n## Testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use the Dashboard or the API to [test adding funds to your balance](https://docs.stripe.com/connect/testing#testing-top-ups).",
  "title": "Add funds to your platform balance | Stripe Documentation",
  "description": "Platforms can add funds to their balance from a bank account.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/external_account_bank_accounts/create?lang=node",
  "markdown": "# Create a bank account | Stripe API Reference\n\nWhen you create a new bank account, you must specify a [connected account](#accounts) to create it on. You can only specify connected accounts where [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nIf the bank account’s owner has no other external account in the bank account’s currency, the new bank account will become the default for that currency. However, if the owner already has a bank account for that currency, the new account will become the default only if the `default_for_currency` parameter is set to `true`.\n\n### Parameters\n\n*   #### \n    \n    external\\_accountobject | stringRequired\n    \n    Either a token, like the ones returned by [Stripe.js](https://docs.stripe.com/js), or a dictionary containing a user’s bank account details (with the options shown below).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n\n### Returns\n\nReturns the bank account object\n\nPOST /v1/accounts/:id/external\\_accounts\n\n```\nconst stripe = require('stripe')('sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc');const externalAccount = await stripe.accounts.createExternalAccount(  'acct_1032D82eZvKYlo2C',  {    external_account: 'btok_1NAiJy2eZvKYlo2Cnh6bIs9c',  });\n```\n\n```\n{  \"id\": \"ba_1NAiJy2eZvKYlo2CvChQKz5k\",  \"object\": \"bank_account\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {},  \"routing_number\": \"110000000\",  \"status\": \"new\"}\n```\n\n## [Update a bank account](https://docs.stripe.com/api/external_account_bank_accounts/update)\n\nUpdates the metadata, account holder name, account holder type of a bank account belonging to a connected account and optionally sets it as the default for its currency. Other bank account details are not editable by design.\n\nYou can only update bank accounts when [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts).\n\nYou can re-enable a disabled bank account by performing an update call without providing any arguments or changes.\n\n### Parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n    When set to true, this becomes the default external account for its currency.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    account\\_holder\\_namestring\n    \n*   #### \n    \n    account\\_holder\\_typestring\n    \n\n### Returns\n\nReturns the bank account object.\n\nPOST /v1/accounts/:id/external\\_accounts/:id\n\n```\nconst stripe = require('stripe')('sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc');const externalAccount = await stripe.accounts.updateExternalAccount(  'acct_1032D82eZvKYlo2C',  'ba_1NAiwl2eZvKYlo2CRdCLZSxO',  {    metadata: {      order_id: '6735',    },  });\n```\n\n```\n{  \"id\": \"ba_1NAiwl2eZvKYlo2CRdCLZSxO\",  \"object\": \"bank_account\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"routing_number\": \"110000000\",  \"status\": \"new\",  \"account\": \"acct_1032D82eZvKYlo2C\"}\n```\n\n## [Retrieve a bank account](https://docs.stripe.com/api/external_account_bank_accounts/retrieve)\n\nBy default, you can see the 10 most recent external accounts stored on a [connected account](https://docs.stripe.com/connect/accounts) directly on the object. You can also retrieve details about a specific bank account stored on the account.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the bank account object.\n\nGET /v1/accounts/:id/external\\_accounts/:id\n\n```\nconst stripe = require('stripe')('sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc');const externalAccount = await stripe.accounts.retrieveExternalAccount(  'acct_1032D82eZvKYlo2C',  'ba_1NAinX2eZvKYlo2CpFGcuuEG');\n```\n\n```\n{  \"id\": \"ba_1NAinX2eZvKYlo2CpFGcuuEG\",  \"object\": \"bank_account\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"customer\": null,  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {},  \"routing_number\": \"110000000\",  \"status\": \"new\"}\n```\n\n## [List all bank accounts](https://docs.stripe.com/api/external_account_bank_accounts/list)\n\nYou can see a list of the bank accounts that belong to a [connected account](https://docs.stripe.com/connect/accounts). Note that the 10 most recent external accounts are always available by default on the corresponding Stripe object. If you need more than those 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional bank accounts.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of the bank accounts stored on the account.\n\nGET /v1/accounts/:id/external\\_accounts\n\n```\nconst stripe = require('stripe')('sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc');const externalAccounts = await stripe.accounts.listExternalAccounts(  'acct_1032D82eZvKYlo2C',  {    object: 'bank_account',  });\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ba_1NB1IV2eZvKYlo2CByiLrMWv\",      \"object\": \"bank_account\",      \"account_holder_name\": \"Jane Austen\",      \"account_holder_type\": \"company\",      \"account_type\": null,      \"bank_name\": \"STRIPE TEST BANK\",      \"country\": \"US\",      \"currency\": \"usd\",      \"fingerprint\": \"1JWtPxqbdX5Gamtc\",      \"last4\": \"6789\",      \"metadata\": {},      \"routing_number\": \"110000000\",      \"status\": \"new\",      \"account\": \"acct_1032D82eZvKYlo2C\"    }    {...}    {...}  ],}\n```\n\n## [Delete a bank account](https://docs.stripe.com/api/external_account_bank_accounts/delete)\n\nYou can delete destination bank accounts from a connected account where [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nThere are restrictions for deleting a bank account with `default_for_currency` set to true. You cannot delete a bank account if any of the following apply:\n\n*   The bank account’s `currency` is the same as the connected account’s [default\\_currency](https://docs.stripe.com/api/accounts/object#account_object-default_currency).\n*   There is another external account (card or bank account) with the same currency as the bank account.\n\nTo delete a bank account, you must first replace the default external account by setting `default_for_currency` with another external account in the same currency.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the deleted bank account object.\n\nDELETE /v1/accounts/:id/external\\_accounts/:id\n\n```\nconst stripe = require('stripe')('sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc');const deleted = await stripe.accounts.deleteExternalAccount(  'acct_1032D82eZvKYlo2C',  'ba_1NAz2w2eZvKYlo2CgeR2w6yU');\n```\n\n```\n{  \"id\": \"ba_1NAz2w2eZvKYlo2CgeR2w6yU\",  \"object\": \"bank_account\",  \"deleted\": true}\n```",
  "title": "Create a bank account | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/moving-money/standard-entry-class",
  "markdown": "# ACH Standard Entry Class (SEC) handling\n\n## Learn how SEC codes are determined for ACH transfers.\n\nEach ACH transaction has an associated Standard Entry Class (SEC) code that describes the accounts involved and how the transaction was authorized.\n\nStripe Treasury determines the SEC code based on whether the account receiving the ACH entry is owned by a company or an individual. You specify the account holder type in [destination\\_payment\\_method\\_data.us\\_bank\\_account.account\\_holder\\_type](https://docs.stripe.com/api/treasury/outbound_payments/create#create_outbound_payment-destination_payment_method_data-us_bank_account-account_holder_type) when:\n\n*   You make [OutboundPayments](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/outbound-payments)\n*   You set up a [stored PaymentMethod](https://docs.stripe.com/treasury/moving-money/working-with-bankaccount-objects#setupintents)\n\nOnly send [InboundTransfers](https://docs.stripe.com/treasury/moving-money/financial-accounts/into/inbound-transfers) and [OutboundTransfers](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/outbound-transfers) to accounts owned by the FinancialAccount owner and with a `company` owner type.\n\nSEC codes are determined based on the receiving account’s owner type as follows:\n\n| Money movement | Owner type | SEC code |\n| --- | --- | --- |\n| InboundTransfer | `company` | `CCD` |\n| OutboundTransfer | `company` | `CCD` |\n| OutboundPayment | `company` | `CCD` |\n| OutboundPayment | `individual` | `PPD` |",
  "title": "ACH Standard Entry Class (SEC) handling | Stripe Documentation",
  "description": "Learn how SEC codes are determined for ACH transfers.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/ach-deprecated",
  "markdown": "# ACH Direct Debit with Charges\n\n## ACH Direct Debit with ChargesDeprecated\n\n## Legacy guide for accepting ACH payments with our older Charges API.\n\n#### Legacy\n\nThe content below describes a Legacy method for collecting ACH payments.\n\nIf you’re building a new integration, use one of our current methods for [accepting ACH payments](https://docs.stripe.com/payments/ach-debit) instead.\n\nIf you have an existing integration that accepts ACH payments using the Charges API, we recommend [migrating to the Payment Intents API](https://docs.stripe.com/payments/ach-debit/migrating-from-charges). The Payment Intents API includes built-in instant verification.\n\nStripe allows you to accept ACH payments in nearly the same way as you accept credit card payments, by providing a verified bank account as the `source` argument for a charge request. However, accepting bank accounts requires a slightly different initial workflow than accepting credit cards:\n\n1.  You must first [verify](#verifying) bank accounts.\n2.  Your customer must [authorize](#authorization) you to use them.\n\nAfter taking both steps for a bank account, your customer can use it like other payment methods, including for recurring charges and [Connect](#connect) applications. The two key differences between using bank accounts and credit cards are:\n\n*   ACH payments take up to 5 business days to receive acknowledgment of their success or failure. Because of this, your Stripe balance takes up to 7 business days to reflect ACH payments in your available Stripe balance.\n*   You can only accept funds in USD and only from US bank accounts. In addition, your account must have a US (USD) bank account to accept ACH payments.\n\n## Collecting and verifying bank accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBefore you can create an ACH charge, you must first collect and verify your customer’s bank account and routing number. In order to properly identify the bank account, you also need to collect the name of the person or business who owns the account, and if the account is owned by an individual or a company. Stripe provides two methods for doing so: instant collection and verification with [Plaid](https://plaid.com/docs/auth/partnerships/stripe/) or collection using [Stripe.js](https://docs.stripe.com/payments/elements) with delayed-verification using microdeposits. You may incur additional costs when using Plaid, depending on the size of your business. Take this into account when making your decision.\n\nBecause charging a bank account requires both verification of the account and customer authorization to use it, the best practice is to store the bank account on a `Customer` object in Stripe so you can reuse it.\n\n## Using Plaid ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![plaid logo](https://b.stripecdn.com/docs-statics-srv/assets/plaid.291ca97692152302c6cbab16a1c39257.png)\n\nPlaid provides the quickest way to collect and verify your customer’s banking information. Using the Stripe + Plaid integration, you can instantly receive a verified bank account, which allows for immediate charging. This is done using [Plaid Link](https://plaid.com/docs/auth/partnerships/stripe/), and you receive the Stripe bank account token directly from Plaid.\n\n**Step 1: Set up your Plaid account**\n\nIf you don’t have a Plaid account, [create one](https://plaid.com/docs/auth/partnerships/stripe). Your account is automatically enabled for integration access. To verify that your Plaid account is enabled for the Stripe integration, go to the [Integrations](https://dashboard.plaid.com/team/integrations) section of the account dashboard. Make sure your Stripe account is connected there.\n\n**Step 2: Fetch a Link token**\n\nA `link_token` is a one-time use token that initializes Plaid Link. You can create a link\\_token and configure it for your specific Link flow by calling the [Create Link Token](https://plaid.com/docs/#create-link-token) endpoint from your server.\n\n`curl https://sandbox.plaid.com/link/token/create \\   -H \"Content-Type: application/json\" \\   -d \"{\\\"client_id\\\": \\\"{{PLAID_CLIENT_ID}}\\\",\\\"secret\\\": \\\"{{PLAID_SECRET}}\\\",\\\"client_name\\\": \\\"My App\\\",\\\"user\\\": {\\\"client_user_id\\\": \\\"Stripe test\\\"},\\\"products\\\": [\\\"auth\\\"],\\\"country_codes\\\": [\\\"US\\\"],\\\"language\\\": \\\"en\\\", \\\"webhook\\\": \\\"https://webhook.sample.com/\\\"}\"`\n\n**Step 3: Integrate with Plaid Link**\n\nIntegrating with Link only takes a few lines of client-side JavaScript and a small server-side handler to exchange the Link `public_token` for a Plaid `access_token` and a Stripe bank account token.\n\n`<button id=\"link-button\">Link Account</button>  <script src=\"https://cdn.plaid.com/link/v2/stable/link-initialize.js\"></script> <script type=\"text/javascript\"> (async function() {    const configs = {     // Pass the link_token generated in step 2.     token: '{{LINK_TOKEN}}',     onLoad: function() {       // The Link module finished loading.     },     onSuccess: function(public_token, metadata) {       // The onSuccess function is called when the user has       // successfully authenticated and selected an account to       // use.       //       // When called, you will send the public_token       // and the selected account ID, metadata.accounts,       // to your backend app server.       //       // sendDataToBackendServer({       //   public_token: public_token,       //   account_id: metadata.accounts[0].id       // });       console.log('Public Token: ' + public_token);       switch (metadata.accounts.length) {         case 0:           // Select Account is disabled: https://dashboard.plaid.com/link/account-select           break;         case 1:           console.log('Customer-selected account ID: ' + metadata.accounts[0].id);           break;         default:           // Multiple Accounts is enabled: https://dashboard.plaid.com/link/account-select       }     },     onExit: async function(err, metadata) {       // The user exited the Link flow.       if (err != null) {           // The user encountered a Plaid API error           // prior to exiting.       }       // metadata contains information about the institution       // that the user selected and the most recent       // API request IDs.       // Storing this information can be helpful for support.     },   };    var linkHandler = Plaid.create(configs);    document.getElementById('link-button').onclick = function() {     linkHandler.open();   }; })(); </script>`\n\n**Step 4: Write server-side handler**\n\nThe Link module handles the entire onboarding flow securely and quickly, but doesn’t actually retrieve account data for a user. Instead, the Link module returns a `public_token` and an `accounts` array, which is a property on the `metadata` object, and part of the `onSuccess` callback.\n\nThe `accounts` array contains information about bank accounts associated with the credentials entered by the user, and may contain multiple accounts if the user has more than one bank account at the institution. To avoid any confusion about which account your user wants to use with Stripe, set [Select Account](https://dashboard.plaid.com/link/account-select) to **Enabled for one account** in the Plaid developer dashboard. When you select this setting, it means the accounts array will always contain exactly one element.\n\nWhen your server has the `public_token` and `account_id`, you must make two calls to the Plaid server to get the Stripe bank account token along with the Plaid `access_token` to use for other Plaid API requests.\n\n`curl https://sandbox.plaid.com/item/public_token/exchange \\   -H \"Content-Type: application/json\" \\   -d \"{\\\"client_id\\\": \\\"{{PLAID_CLIENT_ID}}\\\", \\\"secret\\\": \\\"{{PLAID_SECRET}}\\\", \\\"public_token\\\": \\\"{{PLAID_LINK_PUBLIC_TOKEN}}\\\"}\" curl https://sandbox.plaid.com/processor/stripe/bank_account_token/create \\   -H \"Content-Type: application/json\" \\   -d \"{\\\"client_id\\\": \\\"{{PLAID_CLIENT_ID}}\\\", \\\"secret\\\": \\\"{{PLAID_SECRET}}\\\", \\\"access_token\\\": \\\"{{PLAID_ACCESS_TOKEN}}\\\", \\\"account_id\\\": \\\"{{PLAID_ACCOUNT_ID}}\\\"}\"`\n\nThe response contains a verified Stripe bank account token ID. You can attach this token to a Stripe `Customer` object, or create a charge directly on it.\n\n`{   \"stripe_bank_account_token\": \"btok_PSpOThjFqK9TW3BFpayt\",   \"request_id\": \"[Unique request ID]\" }`\n\n**Step 5: Get ready for production**\n\nPlaid uses different API hosts for test and production requests. The above request uses Plaid’s Sandbox environment, which uses simulated data. To test with live users, use Plaid’s Development environment. Plaid’s Development environment supports up to 100 live objects, which you won’t be billed for. When it’s time to go live, use [Plaid’s Production environment](https://plaid.com/docs/auth/partnerships/stripe/#step4).\n\n## Manually collecting and verifying bank accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPlaid supports instant verification for many of the most popular banks. However, if Plaid doesn’t support your customer’s bank or you don’t want to integrate with Plaid, collect and verify the customer’s bank using Stripe alone.\n\nFirst, use [Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=bank_account) to securely collect your customer’s bank account information, receiving a representative token in return. When you have that, attach it to a Stripe customer in your account. To comply with [Nacha rules](https://www.nacha.org/newrules), make sure you provide a valid account holder name for the customer.\n\n`curl https://api.stripe.com/v1/customers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"name\"=\"Jenny Rosen\" \\   -d \"source\"=\"btok_4XNshPRgmDRCVi\"`\n\n[Customer](https://docs.stripe.com/api/customers \"Customers\") bank accounts require verification. When using Stripe without Plaid, Stripe automatically sends two small deposits for this purpose. These deposits take 1-2 business days to appear on the customer’s online statement. The statement has a description that includes `ACCTVERIFY`. Your customer must relay these amounts to you.\n\nWhen accepting these amounts, be aware that the limit is three failed verification attempts. If you exceed this limit, we can’t verify the bank account. Clear messaging about what these microdeposits are and how you use them can help your customers avoid verification issues. As soon as you have these amounts, you can verify the bank account.\n\n`curl https://api.stripe.com/v1/customers/cus_AFGbOSiITuJVDs/sources/ba_17SHwa2eZvKYlo2CUx7nphbZ/verify \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amounts[]\"=32 \\   -d \"amounts[]\"=45`\n\nAfter we verify the bank account, you can make charges against it.\n\nBefore creating an ACH charge, get authorization from your customer to debit their account. Doing so ensures compliance with the ACH network and helps protect you from disputes, additional fees, and reversed payments. See the [support page](https://support.stripe.com/questions/collect-ach-authorization-from-customers) for more information on authorization requirements.\n\n## Creating an ACH charge![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo create a charge on a verified bank account, use the stored `Customer` object the same way you would when using a card.\n\n`curl https://api.stripe.com/v1/charges \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1500 \\  -d currency=usd \\  -d customer=cus_AFGbOSiITuJVDs`\n\nAttempting to charge an unverified bank account results in an error with the message “The customer’s bank account must be verified in order to create an ACH payment.”\n\nIf the customer has multiple stored sources (of any type), specify which bank account to use by passing its ID in as the [source](https://docs.stripe.com/api#create_charge-source) parameter.\n\n## Testing this integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can mimic successful and failed ACH charges using the following bank routing and account numbers:\n\n*   Routing number: `110000000`\n*   Account number:\n    *   `000123456789` (success)\n    *   `000111111116` (failure upon use)\n    *   `000111111113`(account closed)\n    *   `000222222227` (NSF/insufficient funds)\n    *   `000333333335` (debit not authorized)\n    *   `000444444440` (invalid currency)\n\nTo mimic successful and failed bank account verifications, use these meaningful amounts:\n\n*   `[32, 45]` (success)\n*   `[any other number combinations]` (failure)\n\n## ACH payments workflow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nACH payments take up to 5 business days to receive acknowledgment of their success or failure:\n\n*   When created, ACH charges have the initial status of `pending`.\n*   A _pending_ balance transaction is immediately created reflecting the payment amount, less our fee.\n*   Payments created on or after 22:00 UTC are currently processed on the next business day.\n*   During the following 4 business days, the payment transitions to either `succeeded` or `failed` depending on the customer’s bank.\n*   Successful ACH payments are reflected in your Stripe available balance after 7 business days, at which point the funds are available for automatic or manual transfer to your bank account.\n*   Failed ACH payments reverse the _pending_ balance transaction created.\n*   Your customer sees the payment reflected on their bank statement 1-2 days after creating the charge. (Your customer knows if the payment succeeds before the bank notifies Stripe.)\n\nFailures can happen for a number of reasons such as insufficient funds, a bad account number, or the customer disabling debits from their bank account.\n\nIn rare situations, Stripe might receive an ACH failure from the bank after a payment has transitioned to `succeeded`. If this happens, Stripe creates a dispute with a `reason` of:\n\n*   `insufficient_funds`\n*   `incorrect_account_details`\n*   `bank_cannot_process`\n\nStripe charges a failure fee in this situation.\n\n## Handling disputes in this integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDisputes on ACH payments are fundamentally different than those on credit card payments. If a customer’s bank accepts the request to return the funds for a disputed charge, Stripe immediately removes the funds from your Stripe account. Unlike credit card disputes, you can’t contest ACH reversals. You must contact your customer to resolve the situation.\n\nCustomers can generally dispute an ACH Direct Debit payment through their bank for up to 60 calendar days after a debit on a personal account, or up to 2 business days for a business account. In rare instances, a debit payment can be successfully disputed outside these timelines.\n\n### Risk of double-crediting with ACH refunds and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you proactively issue your customer a refund while their bank also initiates the dispute process, they may receive two credits for the same transaction.\n\nWhen issuing a refund for an ACH payment, you must notify your customer immediately that you’re issuing the refund and that it may take 2-5 business days for the funds to appear in their bank account.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can refund ACH charges, for up to 90 days from the date of the original payment, using the [Refund endpoint](https://docs.stripe.com/api#refunds), but the timing and risks associated with ACH refunds are different from card refunds. If a refund for an ACH charge succeeds, Stripe won’t send any notification. If a refund for an ACH charge fails, however, you’ll receive a `charge.refund.updated` notification, which means that we haven’t been able to process the refund. You must return the funds to your customer outside of Stripe. This is rare—normally occurring when an account is frozen between the original charge and the refund request.\n\n## ACH-specific webhook notifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen using ACH, you’ll receive many of the standard charge [webhook](https://docs.stripe.com/webhooks \"webhook\") notifications, with a couple of notable differences:\n\n*   After creating the charge, you receive a `charge.pending` notification. You won’t receive `charge.succeeded` or `charge.failed` notification until up to 5 business days later.\n*   You receive a `charge.succeeded` notification after the charge has transitioned to `succeeded` and the funds are available in your balance.\n*   You receive a `charge.failed` notification if the ACH transfer fails for any reason. The charge’s `failure_code` and `failure_message` will be set, and the funds are reversed from your Stripe pending balance at this point.\n*   You receive a `customer.source.updated` notification when the bank account is properly verified. The bank account’s `status` is set to `verified`.\n*   If the bank account couldn’t be verified because either of the two small deposits failed, you receive a `customer.source.updated` notification. The bank account’s `status` is set to `verification_failed`.\n\n## Connect support ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith [Connect](https://docs.stripe.com/connect \"Connect\"), your platform can earn money while [processing charges](https://docs.stripe.com/connect/charges). You can either:\n\n*   Create the customer on the connected account, then create a [direct charge](https://docs.stripe.com/connect/direct-charges)\n*   Create the customer [on the platform account](https://docs.stripe.com/connect/cloning-customers-across-accounts), then create a [destination charge](https://docs.stripe.com/connect/destination-charges) using the `transfer_data` parameter (as in the code below)\n\n`curl https://api.stripe.com/v1/charges \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1500 \\  -d currency=usd \\  -d customer=cus_AFGbOSiITuJVDs \\  -d \"transfer_data[amount]\"=850 \\  -d \"transfer_data[destination]\"={{CONNECTED_STRIPE_ACCOUNT_ID}}`\n\n## Services Agreement![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse of the live mode API is subject to the Stripe [Services Agreement](https://stripe.com/legal). Let us know if you have any questions on that agreement.",
  "title": "ACH Direct Debit with Charges | Stripe Documentation",
  "description": "Legacy guide for accepting ACH payments with our older Charges API.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/risk-management/best-practices",
  "markdown": "# Best practices for risk management\n\n## Protect your integration by implementing best practices for preventing, mitigating, and responding to payments risk.\n\nThese best practices for protecting your Connect integration are based on what we’ve learned from thousands of platforms, extensions, and plug-ins.\n\n## Decide your approach to negative balance liability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBecause your choice of negative balance liability can significantly impact your platform and connected accounts, consider it carefully before onboarding any accounts. We advise that new platforms have Stripe take responsibility for negative balances on connected accounts. Only consider taking responsibility as the platform if you’re confident in your ability to manage merchant risk.\n\n## Best practices for both approaches![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Prevent fraudulent transactions by enabling Radar![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you enable Radar, payment risk scoring is on by default at the user level, preventing transactions with high fraud risk. For information on using Radar with connected accounts, see [Using Radar with Connect](https://docs.stripe.com/connect/radar).\n\n### Manage notifications and communications with Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Webhook notifications ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe uses [webhooks](https://docs.stripe.com/webhooks \"webhook\") to notify you of your connected accounts’ activities. Set up [Connect webhooks](https://docs.stripe.com/connect/webhooks) so you can avoid delays in fund transfers by promptly responding to connected account updates and Stripe requests.\n\nStripe requests additional information if the provided user information fails verification. An incorrect date of birth or last name might be the result of a data entry error. You can help your connected accounts respond to failed verifications by directing them to [Stripe-hosted onboarding](https://docs.stripe.com/connect/hosted-onboarding) or [Embedded onboarding](https://docs.stripe.com/connect/embedded-onboarding), or request the data yourself if you use [API onboarding](https://docs.stripe.com/connect/api-onboarding).\n\nWhen a user updates their account information (for example, bank account), Stripe sends you a notification of the change.\n\n#### Accounts to review![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [Accounts to Review](https://dashboard.stripe.com/connect/accounts_to_review) tab in your Connect Dashboard helps you monitor the risk and onboarding status of all of your connected accounts. This tab allows you to view any risk or onboarding restrictions that impact your accounts or that will impact them in the future. It also provides clear instructions on how to resolve open requirements.\n\n#### Support transparency![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use your Connect dashboard to [view support cases](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#view-and-unblock-support-cases) that your connected accounts have opened with Stripe and help unblock them by providing additional context. Specifically, you can view a list of support cases, review conversations between connected accounts and Stripe, and send private messages to Stripe Support with information to help resolve issues.\n\n### Concerns about sanctions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAs a US company, Stripe complies with all sanctions programs administered by the US Office of Foreign Assets Control (OFAC), along with a number of other national and international sanctions regimes. That includes prohibitions against interactions with certain individuals and entities, as well as comprehensive bans on business dealings involving certain countries or regions targeted by sanctions regimes.\n\nStripe screens all accounts, including connected accounts, in compliance with our own obligations under sanctions regimes. If a connected account is flagged as a possible sanctions concern, Stripe pauses payouts from that account and emails the platform to request additional information. If you have a preferred email address for receiving sanctions-related requests, [contact Stripe Support](https://support.stripe.com/contact).\n\nPayouts from the connected account remain paused until the review has been cleared. Disregarding or violating sanctions can lead to fines, regulatory action, and loss of licensing for both Stripe and our users.\n\n## Best practices for platform negative balance liability connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Core considerations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPlatforms can bring merchant risk management in-house and further tailor their connected accounts’ experiences using risk tooling that Stripe provides. For additional details on strategy and approach to risk management, see our [guide on risk management for software platforms](https://stripe.com/guides/introduction-to-risk-management). Starting a risk management solution involves several investments. Some of the core considerations include:\n\n*   Screening and detection: Risk screening infrastructure to understand the risk profile of connected accounts and prevent or reduce fraud and credit risk. This includes building detection mechanisms to identify risky connected accounts.\n*   Monitoring and mitigation: Systems to monitor risk signals and take action (such as pausing payouts, pay-ins, and so on) to mitigate exposure in response to changes in risk signals over time. Building workflows in your product to make sure that users have resolution paths in response to actions, such as uploading identity documents, verifying legal entity information or providing additional risk related information.\n*   Risk specialists: Risk operations teams can monitor risk exposure and intervene in response to signals. Make sure that your operations teams can support connected account owners with questions about risk actions taken on their account.\n\n### Reduce the risk of fraudulent merchants using your platform ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBefore going live, establish best practices for preventing fraud and managing risk. There’s no foolproof method to detect bad actors. Mitigate [fraud risk](https://docs.stripe.com/disputes/prevention/fraud-types) by following risk management best practices to assess an account’s holistic risk profile. The more you understand your connected account and their business, the better the risk assessment. Stripe recommends that you:\n\n*   Verify your connected accounts before they can do business through your platform.\n*   Examine an account’s online presence through social or professional profiles like Facebook, Twitter, or LinkedIn.\n*   Closely review the account’s website, including considering whether it’s appropriate for them to have one.\n*   Collect any appropriate licenses for their business.\n*   Confirm their email address if it’s linked to their business domain. For example, send an email to an address at that domain and require a response from it.\n*   Collect and verify platform-appropriate information such as a physical address, inventory list, or selling history.\n*   Monitor activity on your platform to get a sense of typical behavior, which you can use to identify future suspicious behavior.\n*   Pause payments or payouts when suspicious behavior is detected.\n*   Use the built-in fraud tools to identify and prevent fraud on individual charge attempts. For information on how Radar works with Connect, see [Using Radar with Connect](https://docs.stripe.com/connect/radar).\n*   Add additional verifications to Connect onboarding and disable payouts or payments until the checks pass.\n\nIf you suspect that a connected account is committing fraud, Stripe recommends rejecting that account. That reduces losses by preventing the account from receiving more funds and helps improve Stripe’s fraud detection systems.\n\n### Prevent account take-overs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBad actors can target your connected accounts and compromise them, an attack known as account takeover (ATO). Attackers commonly obtain account credentials using methods like phishing, data breaches, and guessable passwords. They use the credentials to create unauthorized transactions and other fraudulent activities on the account. To help prevent account takeovers, it’s good practice to:\n\n*   Require two-factor authentication when your connected account users log in\n*   Educate your connected accounts about phishing and other vulnerabilities\n*   Enforce unique password policies\n*   Monitor anomalous login activity, especially when it involves new device identifiers or IP addresses\n*   Monitor changes to sensitive account data such as passwords, email addresses, and bank account information that originates from new devices\n*   Use identity checks to assist in two-factor authentication recovery or in response to suspicious activity\n\n### Mitigate credit risks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nManaging [disputes and chargebacks](https://docs.stripe.com/disputes/prevention) are a normal part of doing business when accepting card payments. To build an effective strategy for preventing disputes, employ a number of different methods. The following subsections contain some recommendations to help you manage your exposure, protect your business, and support your accounts.\n\n### Account monitoring![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMonitor your accounts. The more you understand your connected account and their business, the better you can assess their risk.\n\n*   Examine connected account balances through [the API](https://docs.stripe.com/connect/account-balances#accounting-for-negative-balances) or [the Dashboard](https://docs.stripe.com/connect/dashboard/viewing-all-accounts). In the [Dashboard’s accounts overview](https://dashboard.stripe.com/test/connect/accounts/overview), use filters to investigate accounts that might require you to take action, such as accounts with negative balances.\n*   Review financial activity on an account. When viewing the account in the Dashboard, click **View financial reports** in the **Activity** card.\n*   Create alerts to monitor riskier accounts so you can quickly adjust your strategies. Riskier accounts have higher dispute rates (dispute activity above 0.75% is generally considered excessive), sharply reduced volume, or negative balances.\n\n### Riskier accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor newer sellers or service providers that might be riskier, consider delaying or holding payouts until goods or services are delivered. Learn more about [account balances](https://docs.stripe.com/connect/account-balances) and [payout scheduling](https://docs.stripe.com/connect/manage-payout-schedule).\n\nFor platforms with users on manual payouts, you can update your payout creation logic to defer or slow down payouts for riskier accounts.\n\nFor connected accounts that receive automatic payouts, you can slow them by extending the payout schedule on a per-account basis in the Dashboard or by setting [settings.payouts.schedule](https://docs.stripe.com/api/accounts/update#update_account-settings-payouts-schedule) in the API. When [viewing the account in the Dashboard](https://dashboard.stripe.com/test/connect/accounts/overview), click **Edit payout schedule** in the **Balance** card’s overflow menu :\n\n![Edit the payout schedule in the Stripe Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/edit-payout-schedule.0ad82911f52d981bc62e0a046efca02a.png)\n\n### Impact from chargebacks and negative balances![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConsider product or service refunds instead of having to manage chargebacks and negative balances. It might be better for the customer and also less expensive for you. Your options include:\n\n*   Issue refunds. You can check whether the connected account’s balance can cover the refund using the [Dashboard](https://docs.stripe.com/connect/dashboard/viewing-all-accounts) or by [retrieving it](https://docs.stripe.com/api/balance/balance_retrieve) using the API. If their balance can’t cover the refund, you can [reverse the transfer](https://docs.stripe.com/connect/separate-charges-and-transfers#reverse-transfers) without issuing the refund, which results in a negative balance on the account.\n*   Issue refunds based on certain parameters. For example, you can wait until the account’s balance is no longer negative to issue refunds or immediately issue the refund knowing that future payments can cover the amount.\n*   Proactively cancel and refund charges that are likely to be disputed. The loss on the transaction might be better for the account than getting a chargeback. In addition, there are costs that come with chargebacks and the [potential scrutiny](https://docs.stripe.com/disputes/monitoring-programs) from card networks.\n*   Permit your team to handle refunds by [adding them to your platform account](https://docs.stripe.com/get-started/account/teams/roles).\n*   Pause collection of recurring payments for [subscriptions](https://docs.stripe.com/billing/subscriptions/pause-payment) that are at high risk for chargebacks. That gives you more control over when to resume the [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"). For example, if your platform offers classes that have been canceled for the next few months, you can pause collection of payments for those classes.\n*   Protect your platform from negative balances by [adding funds](https://docs.stripe.com/connect/top-ups) to your platform balance.\n*   If you have access to [Stripe Sigma](https://docs.stripe.com/stripe-data), use it to generate a report of each account’s [negative balance over time](https://dashboard.stripe.com/sigma/queries/templates/Account%20balances%20for%20each%20connected%20account).\n\n### Negative balances on accounts Australia Canada Europe (SEPA, UK) New Zealand US![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your connected accounts are in Australia, Canada, Europe (SEPA countries, including the UK), New Zealand, or the US, you can allow Stripe to cover negative balances by automatically debiting their external accounts. In New Zealand, automatic debiting is only supported for connected accounts where Stripe is responsible for collecting updated information when requirements are due or change (including Standard and Express accounts). Otherwise, connected accounts can cover negative balances with future payment volume.\n\nBy default, automatic debiting is set to false for connected accounts where the platform is responsible for collecting updated information when requirements are due or change (including Custom accounts). You can toggle the automatic debits setting on an account using the Dashboard or by setting [debit\\_negative\\_balances](https://docs.stripe.com/api/accounts/object#account_object-settings-payouts-debit_negative_balances) using the API.\n\nFrom the [Dashboard](https://dashboard.stripe.com/test/connect/accounts/overview), select an account and open the **Balance** card’s overflow menu (). You can view all connected accounts that have the automatic debits setting turned off by using the **Debit negative balances** filter:\n\n![Stripe Dashboard using the Debit negative balances filter](https://b.stripecdn.com/docs-statics-srv/assets/debit-negative-balances-filter.ae29916e89cbf02aad1826a8e6e9ba50.png)\n\n### Use Stripe’s tools to manage merchant risks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides platforms with several tools to monitor and manage risk.\n\n**Loss prevention tools**\n\n*   **[Debit Negative Balances](https://docs.stripe.com/connect/account-balances#automatically-debit-connected-accounts)**: For connected accounts in certain countries, you can allow Stripe to automatically debit their external accounts to cover negative balances. Otherwise, negative balances can be covered by future payment volume. You can toggle the automatic debits setting on an account using the Dashboard or by setting [debit\\_negative\\_balances](https://docs.stripe.com/api/accounts/object#account_object-settings-payouts-debit_negative_balances) using the Accounts API.\n    \n*   **[Set payout timing](https://docs.stripe.com/connect/manage-payout-schedule)**: You can set default [delay\\_days](https://docs.stripe.com/api/accounts/update#update_account-settings-payouts-schedule-delay_days) for payouts to connected accounts that are considered risky or are located in countries with higher fraud rates.\n    \n\n**Additional risk signals**\n\n*   **[Identity](https://docs.stripe.com/identity)**: Streamline risk processes by providing ID verification during onboarding or prior to enabling payouts.\n*   **[Financial Connections](https://docs.stripe.com/financial-connections)**: Minimize fraud by matching bank account ownership with the identity of a connected account user before accepting payments or payouts. Fully underwrite accounts with a deep understanding of balance and transaction data.\n\n**Actioning**\n\n*   **[Pause payouts](https://docs.stripe.com/connect/pausing-payments-or-payouts-on-connected-accounts)**: In the Dashboard, you can pause payouts as a first line of defense after you identify suspicious activity. Pausing payouts stops a connected account from completing payouts to their bank account.\n*   **[Pause payments](https://docs.stripe.com/connect/pausing-payments-or-payouts-on-connected-accounts)**: In the Dashboard, you can pause payments as a second line of defense. Pausing payments on a suspicious connected account limits your exposure by stopping it from collecting payments through your platform.\n*   **[Reject account](https://docs.stripe.com/api/account/reject)**: You can use the API or Dashboard to remove fraudulent or risky connected accounts from your platform. Rejecting an account is permanent and should only be used as the last line of defense.",
  "title": "Best practices for risk management | Stripe Documentation",
  "description": "Protect your integration by implementing best practices for preventing, mitigating, and responding to payments risk.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/setup_intents/create",
  "markdown": "# Create a SetupIntent | Stripe API Reference\n\nCreates a SetupIntent object.\n\nAfter you create the SetupIntent, attach a payment method and [confirm](https://docs.stripe.com/api/setup_intents/confirm) it to collect any required permissions to charge the payment method later.\n\n### Parameters\n\n*   #### \n    \n    automatic\\_payment\\_methodsobject\n    \n    When you enable this parameter, this SetupIntent accepts payment methods that you enable in the Dashboard and that are compatible with its other parameters.\n    \n*   Set to `true` to attempt to confirm this SetupIntent immediately. This parameter defaults to `false`. If a card is the attached payment method, you can provide a `return_url` in case further authentication is necessary.\n    \n*   ID of the Customer this SetupIntent belongs to, if one exists.\n    \n    If present, the SetupIntent’s payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.\n    \n*   Indicates how the payment method is intended to be used in the future. If not provided, this value defaults to `off_session`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `off_session`<br><br>Use `off_session` if your customer may or may not be in your checkout flow. |\n    | `on_session`<br><br>Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. |\n    \n\n### More parameters\n\n*   #### \n    \n    confirmation\\_tokenstringonly when confirm=true\n    \n*   #### \n    \n    flow\\_directionsarray of enums\n    \n*   #### \n    \n    mandate\\_dataobjectonly when confirm=true\n    \n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n*   #### \n    \n    payment\\_method\\_configurationstring\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_optionsobject\n    \n*   #### \n    \n    payment\\_method\\_typesarray of strings\n    \n*   #### \n    \n    return\\_urlstringonly when confirm=true\n    \n\n### Returns\n\nReturns a SetupIntent object.\n\n```\ncurl https://api.stripe.com/v1/setup_intents \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"payment_method_types[]\"=card\n```\n\n```\n{  \"id\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG\",  \"object\": \"setup_intent\",  \"application\": null,  \"cancellation_reason\": null,  \"client_secret\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG_secret_NXDICkPqPeiBTAFqWmkbff09lRmSVXe\",  \"created\": 1678942624,  \"customer\": null,  \"description\": null,  \"flow_directions\": null,  \"last_setup_error\": null,  \"latest_attempt\": null,  \"livemode\": false,  \"mandate\": null,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"single_use_mandate\": null,  \"status\": \"requires_payment_method\",  \"usage\": \"off_session\"}\n```\n\n## [Update a SetupIntent](https://docs.stripe.com/api/setup_intents/update)\n\nUpdates a SetupIntent object.\n\n### Parameters\n\n*   ID of the Customer this SetupIntent belongs to, if one exists.\n    \n    If present, the SetupIntent’s payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.\n    \n\n### More parameters\n\n*   #### \n    \n    flow\\_directionsarray of enums\n    \n*   #### \n    \n    payment\\_method\\_configurationstring\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_optionsobject\n    \n*   #### \n    \n    payment\\_method\\_typesarray of strings\n    \n\n### Returns\n\nReturns a SetupIntent object.\n\nPOST /v1/setup\\_intents/:id\n\n```\ncurl https://api.stripe.com/v1/setup_intents/seti_1Mm8s8LkdIwHu7ix0OXBfTRG \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG\",  \"object\": \"setup_intent\",  \"application\": null,  \"cancellation_reason\": null,  \"client_secret\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG_secret_NXDICkPqPeiBTAFqWmkbff09lRmSVXe\",  \"created\": 1678942624,  \"customer\": null,  \"description\": null,  \"flow_directions\": null,  \"last_setup_error\": null,  \"latest_attempt\": null,  \"livemode\": false,  \"mandate\": null,  \"metadata\": {    \"order_id\": \"6735\"  },  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"single_use_mandate\": null,  \"status\": \"requires_payment_method\",  \"usage\": \"off_session\"}\n```\n\n## [Retrieve a SetupIntent](https://docs.stripe.com/api/setup_intents/retrieve)\n\nRetrieves the details of a SetupIntent that has previously been created.\n\nClient-side retrieval using a publishable key is allowed when the `client_secret` is provided in the query string.\n\nWhen retrieved with a publishable key, only a subset of properties will be returned. Please refer to the [SetupIntent](#setup_intent_object) object reference for more details.\n\n### Parameters\n\n*   #### \n    \n    client\\_secretstringRequired if using publishable key\n    \n    The client secret of the SetupIntent. We require this string if you use a publishable key to retrieve the SetupIntent.\n    \n\n### Returns\n\nReturns a SetupIntent if a valid identifier was provided.\n\nGET /v1/setup\\_intents/:id\n\n```\ncurl https://api.stripe.com/v1/setup_intents/seti_1Mm8s8LkdIwHu7ix0OXBfTRG \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG\",  \"object\": \"setup_intent\",  \"application\": null,  \"cancellation_reason\": null,  \"client_secret\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG_secret_NXDICkPqPeiBTAFqWmkbff09lRmSVXe\",  \"created\": 1678942624,  \"customer\": null,  \"description\": null,  \"flow_directions\": null,  \"last_setup_error\": null,  \"latest_attempt\": null,  \"livemode\": false,  \"mandate\": null,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"single_use_mandate\": null,  \"status\": \"requires_payment_method\",  \"usage\": \"off_session\"}\n```\n\n## [List all SetupIntents](https://docs.stripe.com/api/setup_intents/list)\n\nReturns a list of SetupIntents.\n\n### Parameters\n\n*   Only return SetupIntents for the customer specified by this customer ID.\n    \n*   Only return SetupIntents that associate with the specified payment method.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` SetupIntents, starting after SetupIntent `starting_after`. Each entry in the array is a separate SetupIntent object. If no more SetupIntents are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/setup_intents \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/setup_intents\",  \"has_more\": false,  \"data\": [    {      \"id\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG\",      \"object\": \"setup_intent\",      \"application\": null,      \"cancellation_reason\": null,      \"client_secret\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG_secret_NXDICkPqPeiBTAFqWmkbff09lRmSVXe\",      \"created\": 1678942624,      \"customer\": null,      \"description\": null,      \"flow_directions\": null,      \"last_setup_error\": null,      \"latest_attempt\": null,      \"livemode\": false,      \"mandate\": null,      \"metadata\": {},      \"next_action\": null,      \"on_behalf_of\": null,      \"payment_method\": null,      \"payment_method_options\": {        \"card\": {          \"mandate_options\": null,          \"network\": null,          \"request_three_d_secure\": \"automatic\"        }      },      \"payment_method_types\": [        \"card\"      ],      \"single_use_mandate\": null,      \"status\": \"requires_payment_method\",      \"usage\": \"off_session\"    }    {...}    {...}  ],}\n```\n\n## [Cancel a SetupIntent](https://docs.stripe.com/api/setup_intents/cancel)\n\nYou can cancel a SetupIntent object when it’s in one of these statuses: `requires_payment_method`, `requires_confirmation`, or `requires_action`.\n\nAfter you cancel it, setup is abandoned and any operations on the SetupIntent fail with an error. You can’t cancel the SetupIntent for a Checkout Session. [Expire the Checkout Session](https://docs.stripe.com/api/checkout/sessions/expire) instead.\n\n### Parameters\n\n*   #### \n    \n    cancellation\\_reasonstring\n    \n    Reason for canceling this SetupIntent. Possible values are: `abandoned`, `requested_by_customer`, or `duplicate`\n    \n\n### Returns\n\nReturns a SetupIntent object if the cancellation succeeds. Returns an error if the SetupIntent is already canceled or isn’t in a cancelable state.\n\nPOST /v1/setup\\_intents/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/setup_intents/seti_1Mm8s8LkdIwHu7ix0OXBfTRG/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG\",  \"object\": \"setup_intent\",  \"application\": null,  \"cancellation_reason\": null,  \"client_secret\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG_secret_NXDICkPqPeiBTAFqWmkbff09lRmSVXe\",  \"created\": 1678942624,  \"customer\": null,  \"description\": null,  \"flow_directions\": null,  \"last_setup_error\": null,  \"latest_attempt\": null,  \"livemode\": false,  \"mandate\": null,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"single_use_mandate\": null,  \"status\": \"canceled\",  \"usage\": \"off_session\"}\n```",
  "title": "Create a SetupIntent | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/outbound_transfers",
  "markdown": "# Outbound Transfers | Stripe API Reference\n\n## [The OutboundTransfer object](https://docs.stripe.com/api/treasury/outbound_transfers/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   Returns `true` if the object can be canceled, and `false` otherwise.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    destination\\_payment\\_methodnullable string\n    \n    The PaymentMethod used as the payment instrument for an OutboundTransfer.\n    \n*   #### \n    \n    destination\\_payment\\_method\\_detailsobject\n    \n    Details about the PaymentMethod for an OutboundTransfer\n    \n*   #### \n    \n    expected\\_arrival\\_datetimestamp\n    \n    The date when funds are expected to arrive in the destination account.\n    \n*   The FinancialAccount that funds were pulled from.\n    \n*   #### \n    \n    hosted\\_regulatory\\_receipt\\_urlnullable string\n    \n    A [hosted transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe’s money transmission licenses.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    returned\\_detailsnullable object\n    \n    Details about a returned OutboundTransfer. Only set when the status is `returned`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    Information about the OutboundTransfer to be sent to the recipient account.\n    \n*   Current status of the OutboundTransfer: `processing`, `failed`, `canceled`, `posted`, `returned`. An OutboundTransfer is `processing` if it has been created and is pending. The status changes to `posted` once the OutboundTransfer has been “confirmed” and funds have left the account, or to `failed` or `canceled`. If an OutboundTransfer fails to arrive at its destination, its status will change to `returned`.\n    \n*   Hash containing timestamps of when the object transitioned to a particular `status`.\n    \n*   #### \n    \n    tracking\\_detailsnullable object\n    \n    Details about network-specific tracking information if available.\n    \n*   #### \n    \n    transactionstringExpandable\n    \n    The Transaction associated with this object.\n    \n\nThe OutboundTransfer object\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 500,  \"cancelable\": true,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1234567890\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYCCwVOvUY6NpO8ArWrjrz6Hxk3d8tQ4d_RvOqMTOeq6js5eE94-f-7DwBzjjD1wxIUhOyub1KFYH8QKxj9oA\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"processing\",  \"status_transitions\": {    \"canceled_at\": null,    \"failed_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Create an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/create)\n\nCreates an OutboundTransfer.\n\n### Parameters\n\n*   Amount (in cents) to be transferred.\n    \n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    The FinancialAccount to pull funds from.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    destination\\_payment\\_methodstring\n    \n    The PaymentMethod to use as the payment instrument for the OutboundTransfer.\n    \n*   #### \n    \n    destination\\_payment\\_method\\_optionsobject\n    \n    Hash describing payment method configuration details.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    Statement descriptor to be shown on the receiving end of an OutboundTransfer. Maximum 10 characters for `ach` transfers or 140 characters for `us_domestic_wire` transfers. The default value is “transfer”.\n    \n\n### Returns\n\nReturns an OutboundTransfer object if there were no issues with OutboundTransfer creation. The status of the created OutboundTransfer object is initially marked as `processing`.\n\nPOST /v1/treasury/outbound\\_transfers\n\n```\ncurl https://api.stripe.com/v1/treasury/outbound_transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1Mtaaz2eZvKYlo2CUf56sIA1 \\  -d destination_payment_method=pm_1234567890 \\  -d amount=500 \\  -d currency=usd \\  -d description=\"OutboundTransfer to my external bank account\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 500,  \"cancelable\": true,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1234567890\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYCCwVOvUY6NpO8ArWrjrz6Hxk3d8tQ4d_RvOqMTOeq6js5eE94-f-7DwBzjjD1wxIUhOyub1KFYH8QKxj9oA\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"processing\",  \"status_transitions\": {    \"canceled_at\": null,    \"failed_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [Retrieve an OutboundTransfer](https://docs.stripe.com/api/treasury/outbound_transfers/retrieve)\n\nRetrieves the details of an existing OutboundTransfer by passing the unique OutboundTransfer ID from either the OutboundTransfer creation request or OutboundTransfer list.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an OutboundTransfer object if a valid identifier was provided. Otherwise, returns an error.\n\nGET /v1/treasury/outbound\\_transfers/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/outbound_transfers/obt_1Mtaaz2eZvKYlo2CUu1tWGAl \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",  \"object\": \"treasury.outbound_transfer\",  \"amount\": 500,  \"cancelable\": true,  \"created\": 1680717489,  \"currency\": \"usd\",  \"description\": \"OutboundTransfer to my external bank account\",  \"destination_payment_method\": \"pm_1234567890\",  \"destination_payment_method_details\": {    \"billing_details\": {      \"address\": {        \"city\": \"San Francisco\",        \"country\": \"US\",        \"line1\": \"1234 Fake Street\",        \"line2\": null,        \"postal_code\": \"94102\",        \"state\": \"CA\"      },      \"email\": null,      \"name\": \"Jane Austen\"    },    \"type\": \"us_bank_account\",    \"us_bank_account\": {      \"account_holder_type\": \"company\",      \"account_type\": \"checking\",      \"bank_name\": \"STRIPE TEST BANK\",      \"fingerprint\": \"AP24Iso0btGp4N10\",      \"last4\": \"6789\",      \"network\": \"ach\",      \"routing_number\": \"110000000\"    }  },  \"expected_arrival_date\": 1680825600,  \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYCCwVOvUY6NpO8ArWrjrz6Hxk3d8tQ4d_RvOqMTOeq6js5eE94-f-7DwBzjjD1wxIUhOyub1KFYH8QKxj9oA\",  \"livemode\": false,  \"metadata\": {},  \"returned_details\": null,  \"statement_descriptor\": \"transfer\",  \"status\": \"processing\",  \"status_transitions\": {    \"canceled_at\": null,    \"failed_at\": null,    \"posted_at\": null,    \"returned_at\": null  },  \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"}\n```\n\n## [List all OutboundTransfers](https://docs.stripe.com/api/treasury/outbound_transfers/list)\n\nReturns a list of OutboundTransfers sent from the specified FinancialAccount.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return OutboundTransfers that have the given status: `processing`, `canceled`, `failed`, `posted`, or `returned`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` OutboundTransfers, starting after OutboundTransfer `starting_after`. Each entry in the array is a separate OutboundTransfer object. If no more OutboundTransfers are available, the resulting array is empty.\n\nGET /v1/treasury/outbound\\_transfers\n\n```\ncurl -G https://api.stripe.com/v1/treasury/outbound_transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3 \\  -d financial_account=fa_1Mtaaz2eZvKYlo2CUf56sIA1\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/outbound_transfers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"obt_1Mtaaz2eZvKYlo2CUu1tWGAl\",      \"object\": \"treasury.outbound_transfer\",      \"amount\": 500,      \"cancelable\": true,      \"created\": 1680717489,      \"currency\": \"usd\",      \"description\": \"OutboundTransfer to my external bank account\",      \"destination_payment_method\": \"pm_1234567890\",      \"destination_payment_method_details\": {        \"billing_details\": {          \"address\": {            \"city\": \"San Francisco\",            \"country\": \"US\",            \"line1\": \"1234 Fake Street\",            \"line2\": null,            \"postal_code\": \"94102\",            \"state\": \"CA\"          },          \"email\": null,          \"name\": \"Jane Austen\"        },        \"type\": \"us_bank_account\",        \"us_bank_account\": {          \"account_holder_type\": \"company\",          \"account_type\": \"checking\",          \"bank_name\": \"STRIPE TEST BANK\",          \"fingerprint\": \"AP24Iso0btGp4N10\",          \"last4\": \"6789\",          \"network\": \"ach\",          \"routing_number\": \"110000000\"        }      },      \"expected_arrival_date\": 1680825600,      \"financial_account\": \"fa_1Mtaaz2eZvKYlo2CUf56sIA1\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKLHttqEGMgYCCwVOvUY6NpO8ArWrjrz6Hxk3d8tQ4d_RvOqMTOeq6js5eE94-f-7DwBzjjD1wxIUhOyub1KFYH8QKxj9oA\",      \"livemode\": false,      \"metadata\": {},      \"returned_details\": null,      \"statement_descriptor\": \"transfer\",      \"status\": \"processing\",      \"status_transitions\": {        \"canceled_at\": null,        \"failed_at\": null,        \"posted_at\": null,        \"returned_at\": null      },      \"transaction\": \"trxn_1Mtaaz2eZvKYlo2Cn9D12psR\"    }    {...}    {...}  ],}\n```",
  "title": "Outbound Transfers | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/transaction_entries",
  "markdown": "# Transaction Entries | Stripe API Reference\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [The TransactionEntry object](https://docs.stripe.com/api/treasury/transaction_entries/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   The current impact of the TransactionEntry on the FinancialAccount’s balance.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   When the TransactionEntry will impact the FinancialAccount’s balance.\n    \n*   The FinancialAccount associated with this object.\n    \n*   Token of the flow associated with the TransactionEntry.\n    \n*   #### \n    \n    flow\\_detailsnullable objectExpandable\n    \n    Details of the flow associated with the TransactionEntry.\n    \n*   Type of the flow associated with the TransactionEntry.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `credit_reversal`<br><br>The Transaction is associated with a CreditReversal. |\n    | `debit_reversal`<br><br>The Transaction is associated with a DebitReversal. |\n    | `inbound_transfer`<br><br>The Transaction is associated with an InboundTransfer. |\n    | `issuing_authorization`<br><br>The Transaction is associated with an Issuing authorization. |\n    | `other`<br><br>The Transaction is associated with some other money movement not listed above. |\n    | `outbound_payment`<br><br>The Transaction is associated with an OutboundPayment. |\n    | `outbound_transfer`<br><br>The Transaction is associated with an OutboundTransfer. |\n    | `received_credit`<br><br>The Transaction is associated with a ReceivedCredit. |\n    | `received_debit`<br><br>The Transaction is associated with a ReceivedDebit. |\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   #### \n    \n    transactionstringExpandable\n    \n    The Transaction associated with this object.\n    \n*   The specific money movement that generated the TransactionEntry.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `credit_reversal`<br><br>The TransactionEntry was generated by a CreditReversal. |\n    | `credit_reversal_posting`<br><br>The TransactionEntry was generated by a posted CreditReversal. |\n    | `debit_reversal`<br><br>The TransactionEntry was generated by a DebitReversal. |\n    | `inbound_transfer`<br><br>The TransactionEntry was generated by an InboundTransfer. |\n    | `inbound_transfer_return`<br><br>The TransactionEntry was generated by an InboundTransferReturn. |\n    | `issuing_authorization_hold`<br><br>The TransactionEntry was generated by an Issuing authorization hold. |\n    | `issuing_authorization_release`<br><br>The TransactionEntry was generated by an Issuing authorization release. |\n    | `other`<br><br>The TransactionEntry was generated by some other money movement. |\n    | `outbound_payment`<br><br>The TransactionEntry was generated by an OutboundPayment. |\n    | `outbound_payment_cancellation`<br><br>The TransactionEntry was generated by a cancelled OutboundPayment. |\n    | Show 10 more |\n    \n\nThe TransactionEntry object\n\n```\n{  \"id\": \"trxne_1MtkgV2eZvKYlo2CmofEnIwJ\",  \"object\": \"treasury.transaction_entry\",  \"balance_impact\": {    \"cash\": 0,    \"inbound_pending\": 0,    \"outbound_pending\": -1000  },  \"created\": 1680756271,  \"currency\": \"usd\",  \"effective_at\": 1680756271,  \"financial_account\": \"fa_1MtkgV2eZvKYlo2CdxyvnHeQ\",  \"flow\": \"obt_1MtkgV2eZvKYlo2CCxhXVFLB\",  \"flow_type\": \"outbound_transfer\",  \"livemode\": false,  \"transaction\": \"trxn_1MtkgV2eZvKYlo2CRYxD7KLh\",  \"type\": \"outbound_transfer\"}\n```\n\n## [Retrieve a TransactionEntry](https://docs.stripe.com/api/treasury/transaction_entries/retrieve)\n\nRetrieves a TransactionEntry object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a TransactionEntry object.\n\nGET /v1/treasury/transaction\\_entries/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/transaction_entries/trxne_1MtkgV2eZvKYlo2CmofEnIwJ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"trxne_1MtkgV2eZvKYlo2CmofEnIwJ\",  \"object\": \"treasury.transaction_entry\",  \"balance_impact\": {    \"cash\": 0,    \"inbound_pending\": 0,    \"outbound_pending\": -1000  },  \"created\": 1680756271,  \"currency\": \"usd\",  \"effective_at\": 1680756271,  \"financial_account\": \"fa_1MtkgV2eZvKYlo2CdxyvnHeQ\",  \"flow\": \"obt_1MtkgV2eZvKYlo2CCxhXVFLB\",  \"flow_type\": \"outbound_transfer\",  \"livemode\": false,  \"transaction\": \"trxn_1MtkgV2eZvKYlo2CRYxD7KLh\",  \"type\": \"outbound_transfer\"}\n```\n\n## [List all TransactionEntries](https://docs.stripe.com/api/treasury/transaction_entries/list)\n\nRetrieves a list of TransactionEntry objects.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return TransactionEntries that were created during the given date interval.\n    \n*   The results are in reverse chronological order by `created` or `effective_at`. The default is `created`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `created`<br><br>Timestamp describing when the TransactionEntry was created. |\n    | `effective_at`<br><br>Timestamp describing when the TransactionEntry was effective. |\n    \n*   Only return TransactionEntries associated with this Transaction.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` TransactionEntries, starting after TransactionEntry `starting_after`. Each entry in the array is a separate TransactionEntry object. If no more TransactionEntries are available, the resulting array is empty.\n\nGET /v1/treasury/transaction\\_entries\n\n```\ncurl -G https://api.stripe.com/v1/treasury/transaction_entries \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkgV2eZvKYlo2CdxyvnHeQ \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/transaction_entries\",  \"has_more\": false,  \"data\": [    {      \"id\": \"trxne_1MtkgV2eZvKYlo2CmofEnIwJ\",      \"object\": \"treasury.transaction_entry\",      \"balance_impact\": {        \"cash\": 0,        \"inbound_pending\": 0,        \"outbound_pending\": -1000      },      \"created\": 1680756271,      \"currency\": \"usd\",      \"effective_at\": 1680756271,      \"financial_account\": \"fa_1MtkgV2eZvKYlo2CdxyvnHeQ\",      \"flow\": \"obt_1MtkgV2eZvKYlo2CCxhXVFLB\",      \"flow_type\": \"outbound_transfer\",      \"livemode\": false,      \"transaction\": \"trxn_1MtkgV2eZvKYlo2CRYxD7KLh\",      \"type\": \"outbound_transfer\"    }    {...}    {...}  ],}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Transaction Entries | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/received-debits",
  "markdown": "# Moving money with Treasury using ReceivedDebit objects\n\n## Learn how external account holders can pull funds from a Treasury financial account.\n\nCertain processes initiated outside of Stripe Treasury result in money being pulled out of a Treasury financial account. This includes:\n\n*   Spending money on a card through [Stripe Issuing](https://docs.stripe.com/issuing/purchases/transactions#using-with-stripe-treasury)\n*   Pulling money out of a financial account into an external account using ACH debits\n*   Pulling money out of a platform’s financial account into that platform’s Stripe Payments balance using [top-ups](https://docs.stripe.com/treasury/moving-money/payouts#top-ups)\n\nThese money movements result in the creation of `ReceivedDebit` objects. You don’t create `ReceivedDebits` directly, rather you observe `ReceivedDebit` object creation with webhooks. If there are insufficient funds in the account, the `ReceivedDebit` fails in most cases.\n\n[](#retrieverecdeb)\n\nUse `GET /v1/treasury/received_debits/{{RECEIVED_DEBIT_ID}}` to retrieve the `ReceivedDebit` with the associated ID.\n\n`curl https://api.stripe.com/v1/treasury/received_debits/{{RECEIVED_DEBIT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \"`\n\nIf successful, the response returns the `ReceivedDebit` object with the associated ID. Some of the parameters in the response have additional details that are only returned when you add them as values to the `expand[]` parameter. The fields that you can expand have an “Expandable” comment in the following response example. See [Expanding Responses](https://docs.stripe.com/api/expanding_objects) to learn more about expanding object responses.\n\n`{   \"id\": \"{{RECEIVED_DEBIT_ID}}\",   \"object\": \"received_debit\",   \"livemode\": Boolean,   \"created\": Timestamp,   // The FinancialAccount funds have been pulled from   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\", // Expandable   \"amount\": 1000,   \"currency\": \"usd\",   \"description\": \"Testing\",`\n\n[](#listrecdeb)\n\nUse `GET /v1/treasury/received_debits` to retrieve all `ReceivedDebits` for a financial account. You must specify a financial account ID for the `financial_account` parameter. You can filter the results by the standard list parameters or by `status`.\n\n`{   // Standard list parameters   \"limit\", \"starting_after\", \"ending_before\",   // Filter by FinancialAccount (Required)   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   // Filter by status   \"status\": \"succeeded\" | \"failed\" }`\n\nThe following request retrieves the last successful [ReceivedDebit object](https://docs.stripe.com/api/treasury/received_debits/object) that occurred before the provided `ReceivedDebit` for the financial account identified.\n\n`curl -G https://api.stripe.com/v1/treasury/received_debits \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d limit=1 \\  -d ending_before={{RECEIVED_DEBIT_ID}}`\n\n[](#test-received-debit)\n\nStripe Treasury provides test endpoints for `ReceivedDebit` objects. Use `POST /v1/test_helpers/treasury/received_debits` to simulate `ReceivedDebit` creation in test mode. You can’t create `ReceivedDebit` objects in live mode, so using this endpoint enables you to test the flow of funds when a third party initiates creation of a `ReceivedDebit`. Set `financial_account` to the ID of the financial account to send money from. Set `network` to `ach` and optionally provide the ABA financial address details for the `source_details.aba` parameter. As in live mode, test mode `ReceivedDebits` fail if there are insufficient funds available.\n\n[](#webhookrecdeb)\n\nStripe emits the following `ReceivedDebit` events to your [webhook](https://docs.stripe.com/webhooks) endpoint:\n\n*   `treasury.received_debit.created` on `ReceivedDebit` creation.",
  "title": "Moving money with Treasury using ReceivedDebit objects | Stripe Documentation",
  "description": "Learn how external account holders can pull funds from a Treasury financial account.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/treasury/moving-money/financial-accounts/into/received-credits",
  "markdown": "# Moving money with Treasury using ReceivedCredit objects\n\n## Learn how to move money into a Treasury financial account from another Treasury financial account or bank account.\n\nWhen funds move into a financial account, Stripe creates a corresponding [ReceivedCredit](https://docs.stripe.com/api/treasury/received_credits) object on the account. A `ReceivedCredit` contains information on how the funds were sent and from what account, where possible. You can send funds to a financial account with the account’s routing and account numbers for `ach` and `us_domestic_wire`, or the financial account ID for transfers between financial accounts.\n\nWhen the origin of the funds is another Treasury financial account, the `ReceivedCredit` contains a `linked_flows.source_flow` reference to the originating money movement. In this case, the source `OutboundPayment` has `stripe` as its `network` value.\n\n[](#retrieverc)\n\nUse `GET /v1/treasury/received_credits/{{RECEIVED_CREDIT_ID}}` to retrieve the [ReceivedCredit](https://docs.stripe.com/api/treasury/received_credits) with the specified ID.\n\nThe following request retrieves the `ReceivedCredit` with the specified ID. The response for this request includes expanded [Transaction object](https://docs.stripe.com/api/treasury/transactions) details.\n\n`curl -G https://api.stripe.com/v1/treasury/received_credits/{{RECEIVED_CREDIT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"expand[]\"=transaction`\n\nIf successful, the response provides the requested `ReceivedCredit` object. Some of the parameters in the response have additional details that are only returned when you add them as values to the `expand[]` parameter of your request. The fields that you can expand have an `Expandable` comment in the following response example. See [Expanding Responses](https://docs.stripe.com/api/expanding_objects) to learn more about expanding object responses.\n\n`{   \"id\": \"{{RECEIVED_CREDIT_ID}}\",   \"object\": \"received_credit\",   \"livemode\": true | false,   \"created\": \"{{Timestamp}}\",   // The FinancialAccount that received the funds   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\", // Expandable   \"amount\": 1000,   \"currency\": \"usd\",   // The description of this movement sent by the originator`\n\n[](#listrc)\n\nUse `GET /v1/treasury/received_credits` to retrieve all of the `ReceivedCredits` for the financial account with the ID of the required `financial_account` parameter. You can filter the list with the standard list parameters, by `status`, or by `linked_flows.source_flow_type`.\n\n``{   // Standard list parameters   \"limit\", \"starting_after\", \"ending_before\",   // Filter by FinancialAccount (required)   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   // Filter by status   \"status\": \"succeeded\" | \"failed\",   // Filter by `source_flow_type`   \"linked_flows.source_flow_type\": nil | \"payout\" | \"outbound_payment\" }``\n\nThe following request retrieves the `ReceivedCredits` that have a status of `failed` for the specified financial account.\n\n`curl -G https://api.stripe.com/v1/treasury/received_credits \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d financial_account=  {{FINANCIAL_ACCOUNT_ID}}   \\  -d status=failed`\n\nIf successful, the response includes the [ReceivedCredit](https://docs.stripe.com/api/treasury/received_credits) objects that match the criteria specified in the request.\n\n[](#testingrc)\n\nUse `POST /v1/test_helpers/treasury/received_credits` to simulate receiving funds in a financial account. To simulate a bank transfer from an account outside of Stripe to your financial account, set `initiating_payment_method_details` to the values of the external bank account, and set `network` to `ach` or `us_domestic_wire`.\n\nThe following request creates a test mode `ReceivedCredit` from an external bank account using an `OutboundPayment` between two financial accounts on the same platform.\n\n`curl https://api.stripe.com/v1/test_helpers/treasury/received_credits \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d financial_account={{DESTINATION_FINANCIAL_ACCOUNT_ID}} \\   -d network=ach \\  -d amount=1234 \\  -d currency=usd`\n\nIf successful, the response returns a `ReceivedCredit` object. The following is an example of a response for a bank transfer.\n\n`{   \"financial_account\": \"{{FINANCIAL_ACCOUNT_ID}}\",   \"network\": \"ach\",   \"amount\": \"1234\",   \"currency\": \"usd\",   \"description\": \"Test\",   \"source_details\": {     \"type\": \"aba\",     \"aba\": {       \"country\": \"US\",       \"routing_number\": \"12341234\",       \"account_number\": \"0123456789\",       \"account_holder_name\": \"Jenny Rosen\",     }   } }`\n\n[](#webhooksrc)\n\nStripe emits the following `ReceivedCredit` events to your [webhook](https://docs.stripe.com/webhooks) endpoint:\n\n*   `treasury.received_credit.created` on `ReceivedCredit` creation.\n*   `treasury.received_credit.{{new_status}}` when an `ReceivedCredit` changes status. Available status value options include:\n    *   `treasury.received_credit.succeeded`\n    *   `treasury.received_credit.failed`\n*   `treasury.received_credit.reversed` on `ReceivedCredit` [reversal](https://docs.stripe.com/treasury/moving-money/financial-accounts/into/credit-reversals).",
  "title": "Moving money with Treasury using ReceivedCredit objects | Stripe Documentation",
  "description": "Learn how to move money into a Treasury financial account from another Treasury financial account or bank account.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/credit_reversals/object",
  "markdown": "# The CreditReversal object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Amount (in cents) transferred.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   The FinancialAccount to reverse funds from.\n    \n*   #### \n    \n    hosted\\_regulatory\\_receipt\\_urlnullable string\n    \n    A [hosted transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe’s money transmission licenses.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The rails used to reverse the funds.\n    \n*   The ReceivedCredit being reversed.\n    \n*   Status of the CreditReversal\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>The CreditReversal has been canceled before it has been sent to the network and no funds have left the account. (Currently not supported). |\n    | `posted`<br><br>The CreditReversal has been sent to the network and funds have left the account (with the Transaction posting) |\n    | `processing`<br><br>The CreditReversal starting state. Funds are “held” by a pending Transaction (but they are still part of the current balance). |\n    \n*   Hash containing timestamps of when the object transitioned to a particular `status`.\n    \n*   #### \n    \n    transactionnullable stringExpandable\n    \n    The Transaction associated with this object.\n    \n\nThe CreditReversal object\n\n```\n{  \"id\": \"credrev_1Mtklw2eZvKYlo2CJG2MWJM7\",  \"object\": \"treasury.credit_reversal\",  \"amount\": 1000,  \"created\": 1680756608,  \"currency\": \"usd\",  \"financial_account\": \"fa_1Mtklw2eZvKYlo2CNHscZzs2\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKICfuaEGMgYv0T_PcXU6NpP_n6wAfI9LKta3LkDRNQT8oLGdQf7JcXsskGjrq1LICpYVy5a3oOBI5gaVvTy8MtwpT1PTpQ\",  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_credit\": \"rc_1Mtklw2eZvKYlo2CxuluQFPR\",  \"status\": \"processing\",  \"status_transitions\": {    \"posted_at\": null  },  \"transaction\": \"trxn_1Mtklw2eZvKYlo2CKkbNA2TS\"}\n```\n\n## [Create a CreditReversal](https://docs.stripe.com/api/treasury/credit_reversals/create)\n\nReverses a ReceivedCredit and creates a CreditReversal object.\n\n### Parameters\n\n*   #### \n    \n    received\\_creditstringRequired\n    \n    The ReceivedCredit to reverse.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a CreditReversal object.\n\nPOST /v1/treasury/credit\\_reversals\n\n```\ncurl https://api.stripe.com/v1/treasury/credit_reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d received_credit=rc_1MtkGJLkdIwHu7ixWPuY9DGn\n```\n\n```\n{  \"id\": \"credrev_1Mtklw2eZvKYlo2CJG2MWJM7\",  \"object\": \"treasury.credit_reversal\",  \"amount\": 1000,  \"created\": 1680756608,  \"currency\": \"usd\",  \"financial_account\": \"fa_1Mtklw2eZvKYlo2CNHscZzs2\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKICfuaEGMgYv0T_PcXU6NpP_n6wAfI9LKta3LkDRNQT8oLGdQf7JcXsskGjrq1LICpYVy5a3oOBI5gaVvTy8MtwpT1PTpQ\",  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_credit\": \"rc_1Mtklw2eZvKYlo2CxuluQFPR\",  \"status\": \"processing\",  \"status_transitions\": {    \"posted_at\": null  },  \"transaction\": \"trxn_1Mtklw2eZvKYlo2CKkbNA2TS\"}\n```\n\n## [Retrieve a CreditReversal](https://docs.stripe.com/api/treasury/credit_reversals/retrieve)\n\nRetrieves the details of an existing CreditReversal by passing the unique CreditReversal ID from either the CreditReversal creation request or CreditReversal list\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a CreditReversal object.\n\nGET /v1/treasury/credit\\_reversals/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/credit_reversals/credrev_1Mtklw2eZvKYlo2CJG2MWJM7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"credrev_1Mtklw2eZvKYlo2CJG2MWJM7\",  \"object\": \"treasury.credit_reversal\",  \"amount\": 1000,  \"created\": 1680756608,  \"currency\": \"usd\",  \"financial_account\": \"fa_1Mtklw2eZvKYlo2CNHscZzs2\",  \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKICfuaEGMgYv0T_PcXU6NpP_n6wAfI9LKta3LkDRNQT8oLGdQf7JcXsskGjrq1LICpYVy5a3oOBI5gaVvTy8MtwpT1PTpQ\",  \"livemode\": false,  \"metadata\": {},  \"network\": \"ach\",  \"received_credit\": \"rc_1Mtklw2eZvKYlo2CxuluQFPR\",  \"status\": \"processing\",  \"status_transitions\": {    \"posted_at\": null  },  \"transaction\": \"trxn_1Mtklw2eZvKYlo2CKkbNA2TS\"}\n```\n\n## [List all CreditReversals](https://docs.stripe.com/api/treasury/credit_reversals/list)\n\nReturns a list of CreditReversals.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return CreditReversals for the ReceivedCredit ID.\n    \n*   Only return CreditReversals for a given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>The CreditReversal has been canceled before it has been sent to the network and no funds have left the account. (Currently not supported). |\n    | `posted`<br><br>The CreditReversal has been sent to the network and funds have left the account (with the Transaction posting) |\n    | `processing`<br><br>The CreditReversal starting state. Funds are “held” by a pending Transaction (but they are still part of the current balance). |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` CreditReversals, starting after CreditReversal `starting_after`. Each entry in the array is a separate CreditReversal object. If no more CreditReversal are available, the resulting array will be empty.\n\nGET /v1/treasury/credit\\_reversals\n\n```\ncurl -G https://api.stripe.com/v1/treasury/credit_reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkGJLkdIwHu7ix6FAcfxof \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/credit_reversals\",  \"has_more\": false,  \"data\": [    {      \"id\": \"credrev_1Mtklw2eZvKYlo2CJG2MWJM7\",      \"object\": \"treasury.credit_reversal\",      \"amount\": 1000,      \"created\": 1680756608,      \"currency\": \"usd\",      \"financial_account\": \"fa_1Mtklw2eZvKYlo2CNHscZzs2\",      \"hosted_regulatory_receipt_url\": \"https://payments.stripe.com/regulatory-receipt/CBQaFwoVYWNjdF8xMDMyRDgyZVp2S1lsbzJDKICfuaEGMgYv0T_PcXU6NpP_n6wAfI9LKta3LkDRNQT8oLGdQf7JcXsskGjrq1LICpYVy5a3oOBI5gaVvTy8MtwpT1PTpQ\",      \"livemode\": false,      \"metadata\": {},      \"network\": \"ach\",      \"received_credit\": \"rc_1Mtklw2eZvKYlo2CxuluQFPR\",      \"status\": \"processing\",      \"status_transitions\": {        \"posted_at\": null      },      \"transaction\": \"trxn_1Mtklw2eZvKYlo2CKkbNA2TS\"    }    {...}    {...}  ],}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The CreditReversal object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/get-started/account/checklist",
  "markdown": "# Account checklist | Stripe DocumentationThe Stripe Docs logo\n\n## Complete this checklist before taking your Stripe account live.\n\nThe items in this checklist apply to all Stripe accounts, regardless of how or where you signed up for Stripe. We also have checklists for [taking your integration live](https://docs.stripe.com/get-started/checklist/go-live) and adhering to [website payment best practices](https://docs.stripe.com/get-started/checklist/website). For the safety and security of your Stripe account, follow these steps before going live:\n\n*   Enable two-step authentication\n    \n    For security purposes, [enable two-factor authentication (2FA)](https://support.stripe.com/questions/how-do-i-enable-two-step-verification) on your Stripe account. Two-factor authentication requires that you log in with both your username and password, and enter a code sent to your mobile device. Using 2FA makes it harder for someone else to access your Stripe account.\n    \n*   Confirm your statement descriptor and public information\n    \n    The [statement descriptor](https://docs.stripe.com/get-started/account/activate#public-business-information) appears on customer statements when you charge their card. Missing or incorrect information can result in confused customers creating disputes, so make sure to review your statement descriptor in the [Dashboard](https://dashboard.stripe.com/settings/public). Statement descriptors are limited to between 5 and 22 characters. They must contain at least 5 letters and can’t use the following special characters: `<`, `>`, `\\`, `'`, or `\"`. Stripe also recommends that you add text to your site that tells your users what they’ll see on their statements.\n    \n    The card issuer can automatically include other account information—for example, business name, address, email, or phone number—to show on your customer’s statements. Check that all of this information in your Stripe account is acceptable for your customers to see.\n    \n*   Set up email notifications\n    \n    Stripe can notify you of account activity by email. You can choose events to be notified of in your [Communication preferences](https://dashboard.stripe.com/settings/communication-preferences). If multiple [team members](https://docs.stripe.com/get-started/account/teams) have access to your account, each one can set their own notification preferences. At a minimum, we recommend turning on emails for successful charges and disputes.\n    \n*   Set up SMS from Stripe for critical account health updates\n    \n    Choose the events to receive notification of in your [Communication preferences](https://dashboard.stripe.com/settings/communication-preferences). Any [team member](https://docs.stripe.com/get-started/account/teams) with account access can set their own notification preferences.\n    \n*   Prevent and manage fraud and disputes\n    \n    [Fraud and disputes](https://docs.stripe.com/disputes/prevention) are unfortunate realities in all commerce. While Stripe is constantly improving its tools to help reduce these incidents, we recommend that you’re set up to:\n    \n    *   Regularly review [payments in the Dashboard](https://dashboard.stripe.com/test/payments).\n    *   [Report charges](https://docs.stripe.com/radar/risk-evaluation) that appear suspicious using the Dashboard or API.\n    *   Have [evidence](https://docs.stripe.com/disputes/responding#respond) at the ready for disputes.\n    *   Prevent and mitigate [card testing](https://docs.stripe.com/disputes/prevention/card-testing).\n*   Review your bank account information\n    \n    Incorrect bank information is a common cause of [payout delays](https://docs.stripe.com/payouts#payout-failures). Before accepting live charges, confirm [your bank details](https://dashboard.stripe.com/settings/payouts) are correct. If you process charges in [multiple currencies](https://docs.stripe.com/currencies) and have multiple bank accounts, also confirm you’ve established the correct default currency. Multiple bank accounts for additional currencies are optional as Stripe can convert any payments into your default currency.\n    \n    When reviewing your bank information, set your preferred [payout schedule](https://docs.stripe.com/payouts#payout-schedule). The recommended and default option is daily—as funds become available—but you can change this to best suit your business and reporting needs.\n    \n*   Give your team members access to your Stripe account\n    \n    You can give your [team members](https://docs.stripe.com/get-started/account/teams) access to your Stripe account. Stripe even lets you give different team members different permissions depending on their [roles](https://docs.stripe.com/get-started/account/teams/roles).\n    \n    Whenever you give a team member access to your Stripe account, don’t give them your login credentials. We also recommend that you ask your team members to enable 2FA.\n    \n    If a team member no longer needs access to your Stripe account, remove them from your account.\n    \n*   Understand industry-specific restrictions\n    \n    Review our [Prohibited & Restricted businesses list](https://stripe.com/legal/restricted-businesses) to determine if your business operates in an industry that Stripe restricts or prohibits.\n    \n    If your business operates in a restricted industry, you might need to provide additional documentation before you can use Stripe as your payment processor. If your business operates in a prohibited industry, you won’t be able to use Stripe.\n    \n    If you have any questions about onboarding requirements or restrictions applicable to your business, [contact us](https://stripe.com/contact).",
  "title": "Account checklist | Stripe Documentation",
  "description": "Complete this checklist before taking your Stripe account live.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/get-started/account",
  "markdown": "# Create an account | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to activate and manage your Stripe account.\n\nYou can begin using your Stripe account in [test mode](https://docs.stripe.com/test-mode \"test mode\") as soon as you [create it](https://dashboard.stripe.com/register). In test mode, you can simulate using all of Stripe’s features without moving real money. After you activate your account, you can accept payments, create additional accounts, start a team, and set up a custom email domain.\n\nStripe generates an ID for your account. This ID is different from your account’s name and uniquely identifies your account. You can find your account ID in your [Account](https://dashboard.stripe.com/settings/account) and [Profile](https://dashboard.stripe.com/settings/user) settings.\n\n## Get started with a Stripe account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Manage your account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
  "title": "Create an account | Stripe Documentation",
  "description": "Learn how to activate and manage your Stripe account.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/get-started/account/add-funds",
  "markdown": "# Add funds to your Stripe balance\n\n## Cover increased refunds and chargebacks by adding funds to your balance.\n\nTo keep your business healthy when your account has a negative balance or when you expect an increase in customer refunds, you can add funds directly to your Stripe balance using a wire or bank transfer.\n\nYou can proactively add funds to use for future refunds or chargebacks. These funds are held separately from your earnings, [payouts](https://docs.stripe.com/payouts \"payout\"), and funds from other Stripe products.\n\n## Add funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo add funds to your balance using the Dashboard:\n\n1.  Determine how much you want to add to your balance.\n    \n2.  Go to the [Balances](https://dashboard.stripe.com/balance/overview) page in the Dashboard, and click **Add to balance**.\n    \n3.  Select whether you want to use a wire or local bank transfer, review Stripe’s bank information, and click **Done**.\n    \n4.  Initiate the transfer from your bank account.\n    \n5.  After your bank has sent the funds, return to [Balances](https://dashboard.stripe.com/balance/overview), and click **Add to balance**.\n    \n6.  _(Optional)_ If the dialog prompts you for a receipt, upload a screenshot or the file that proves that your bank transferred the funds.\n    \n    *   To fund your Stripe balance faster, we might ask you to include a screenshot or PDF of your bank’s transfer or wire confirmation.\n7.  Click **Confirm Transfer**.\n    \n\n![Add to your balance](https://b.stripecdn.com/docs-statics-srv/assets/balance.33f25616b262a378ffd6c0623ef9f5ac.png)\n\nAdd to your balance\n\n## View and use your funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo see the total amount of funds set aside for future refunds, disputes, or negative balances, go to **Future refunds or disputes or negative balance** in the [Balances](https://dashboard.stripe.com/balance/overview) page. Stripe uses these funds first when it processes a refund or a customer disputes a payment. If no funds remain, we process refunds and disputes from your available balance. If you receive an email from Stripe about debiting your bank account, first check your balance.\n\n#### Payouts\n\nIf you don’t need to have extra funds set aside, you can pay them out to your bank.\n\n## Settlement timing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFunds typically show up in your balance within 1 to 7 business days, depending on the method used to add funds. For ACH transfers, it usually takes 1 to 5 business days.\n\nTo have funds settle to your account without delay, make sure the wire or transfer from your bank includes your Stripe unique reference code in the transfer memo. Find this unique reference code on the [Balances](https://dashboard.stripe.com/balance/overview) page in the Dashboard.",
  "title": "Add funds to your Stripe balance | Stripe Documentation",
  "description": "Cover increased refunds and chargebacks by adding funds to your balance.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/get-started/account/teams",
  "markdown": "# Start a team | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to invite and interact with team members.\n\nYou can [invite members](https://dashboard.stripe.com/settings/team?invite_shown=true) of your team to access your Stripe account. You must assign each team member at least one role before you can invite them. Roles protect your sensitive information and restrict the actions team members can perform on your account. See the [list of actions](https://docs.stripe.com/get-started/account/teams/roles) that each role can and can’t perform before assigning the role to a team member.\n\nYou can invite team members individually, or invite multiple users at the same time by separating their email addresses with a comma or space. You can also assign multiple roles to a team member, which gives them the combined set of permissions granted by those roles. Invites to your Stripe account expire after 10 days.\n\n![Invite a team member to access your Stripe account](https://b.stripecdn.com/docs-statics-srv/assets/invite-team-members.56ae9525e14e736f8fd9d7045b7e96f1.png)\n\nInvite a team member to access your Stripe account\n\nAfter a team member has accepted their invite, you can edit their role at any time from your account’s [Team](https://dashboard.stripe.com/settings/team) settings. To edit a team member’s role, click the overflow menu (), then click **Edit**.\n\n## Mention team members ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can mention team members when you add a note to a payment. If you mention a team member, they receive an email notification with the note and a link to the associated payment.\n\n![Mention a team member when you add a note to a payment](https://b.stripecdn.com/docs-statics-srv/assets/mention-team-members.b21aa27e9cf6862239796d842d869428.png)\n\nMention a team member\n\n## Receive email notifications ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can configure email notifications under **Communication preferences** in your [Profile](https://dashboard.stripe.com/settings/user), and apply them on a per-user basis. If your team members also want to receive notifications, they must customize their own settings. Stripe sends email notifications to you when any of the following events occur:\n\n*   A successful payment is received.\n*   An [application fee](https://docs.stripe.com/connect/direct-charges#collect-fees) is collected from a connected account.\n*   A payment is [disputed](https://docs.stripe.com/disputes) by a customer.\n*   A payment is marked as [elevated risk](https://docs.stripe.com/radar/risk-evaluation#elevated-risk) by Stripe or a custom [Stripe Radar](https://docs.stripe.com/radar) rule.\n*   You’re mentioned in a note.\n*   A customer sends an incorrect amount to pay their [invoice](https://docs.stripe.com/invoicing).\n*   A [webhook](https://docs.stripe.com/webhooks) delivery fails.\n\nFor a full list of notification events, go to your **Communication preferences** under **Profile**.",
  "title": "Start a team | Stripe Documentation",
  "description": "Learn how to invite and interact with team members.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/get-started/account/branding",
  "markdown": "# Branding your Stripe account | Stripe DocumentationThe Stripe Docs logo\n\nCustomize the appearance of your emails, checkout, payment links, customer portal, and invoices in your [Branding settings](https://dashboard.stripe.com/account/branding).\n\n## Branding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIcons and logos must be in JPG or PNG format, less than 512kb in size, and equal to or greater than 128px by 128px.\n\n*   **Icon**—A square, digital-friendly icon or logo.\n*   **Logo**—A non-square logo to override some uses of the icon.\n*   **Brand color**—Used on receipts, invoices, and the customer portal.\n*   **Accent color**—Used as a background on emails and pages.\n\n### Apply brand settings ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBrand settings apply to your whole account and take effect in many places.\n\n| Setting | Emails | Checkout & Payment Links | Customer portal | Hosted Invoice Page | Invoice PDFs |\n| --- | --- | --- | --- | --- | --- |\n| **Icon** | Yes | Yes | Yes | Yes | Yes |\n| **Logo** | No  | Yes | No  | No  | Yes |\n| **Brand color** | Yes | No  | Yes | Yes | Yes |\n| **Accent color** | Yes (background color) | Yes | Yes | Yes | No  |\n\n### Branding with Connect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you maintain a platform with Connect, the customer portal uses the brand settings of the connected account under these circumstances:\n\n*   The platform uses direct charges\n*   The platform uses destination charges with `on_behalf_of`\n\nFor all other connected accounts, you can configure the brand settings with the [Accounts](https://docs.stripe.com/api/accounts/object#account_object-settings-branding) API.\n\n## Customize policies and contact information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can display your return, refund, and legal policies, and your support contact information to your customers on Checkout. Go to [Checkout Settings](https://dashboard.stripe.com/settings/checkout) to configure the information you want to display, including:\n\n*   Details about your return and refund policies\n*   Your support phone number, email, and website\n*   Links to your terms of service and privacy policy\n\nPresenting this information can increase buyer confidence and minimize cart abandonment.\n\n#### Configure support and legal policies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFrom [Checkout Settings](https://dashboard.stripe.com/settings/checkout), add support contact information to your sessions by enabling **Contact information**. Similarly, add links to your **Terms of service** and **Privacy policy** to your sessions by enabling **Legal policies**. If you require customers to implicitly consent to your legal policies when they complete their checkout, select the **Display agreement to legal terms** checkbox.\n\nYou must add your support contact information and legal policy links in your [Public Detail Settings](https://dashboard.stripe.com/settings/public).\n\nThe following previews show how Checkout displays a dialog with the support contact information, links to the store legal policies, and information about the payment terms.\n\n![A checkout page with contact information.](https://b.stripecdn.com/docs-statics-srv/assets/contact-modal.2b81bc2e74657f7c94a45a743439c81f.png)\n\nPreview of contact information on Checkout.\n\n![A checkout page with legal policies.](https://b.stripecdn.com/docs-statics-srv/assets/legal-modal.9351cb51408c2a9f5c0ae23aab03e138.png)\n\nPreview of legal policies on Checkout.\n\n#### Configure return and refund policies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDisplay your return, refund, or exchange policies, by enabling **Return and Refund policies**. Although businesses that sell physical goods use return policies, businesses that sell digital goods or customized physical goods typically use refund policies. Because they’re not mutually exclusive, you can select both options if your business sells both categories of goods. You can edit your return and refund details, including:\n\n*   Whether you accept returns, refunds, or exchanges\n*   Whether returns, refunds, or exchanges are free or if they’re subject to a fee\n*   How many days after a purchase you’ll accept returns, refunds, or exchanges\n*   How customers can return items shipped to them\n*   Whether you accept in-store returns\n*   A link to the full return and refund policy\n*   A custom message\n\nIf you accept free returns, refunds, or exchanges, Checkout highlights the policy for customers.\n\nThe following previews show how Checkout displays a return policy. In this example, it’s for purchases that can be returned by shipping them or in-store for a full refund (or exchange) for up to 60 days. You can display similar information for refunds.\n\n![Preview of return policies on Checkout](https://b.stripecdn.com/docs-statics-srv/assets/return-policy-modal.0c7a9ff71b8bc2c155842532801e06a8.png)\n\nPreview of return policies on Checkout.\n\n![Preview of a policy highlight on Checkout](https://b.stripecdn.com/docs-statics-srv/assets/policy-highlight.334828420693a33d376977a2c0fe5851.png)\n\nPreview of a policy highlight on Checkout.\n\n## Other customization options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   **Custom domains**\n    \n    Checkout, Payment Links, and customer portal pages use stripe.com as the default domain. You can optionally set up your own [custom domain](https://docs.stripe.com/payments/checkout/custom-domains) for those products.\n    \n*   **Custom email domain**\n    \n    By default, when Stripe sends invoices, receipts, and failed payment notifications to your customers, it sends them from the stripe.com domain. Set up your own [custom domain](https://docs.stripe.com/get-started/account/email-domain) to change this.\n    \n*   **Payments, debits, and bank transfer emails**\n    \n    You can decide which emails your customers receive about payments, debits, and bank transfers in your [Customer emails settings](https://dashboard.stripe.com/settings/emails). You can also choose the default language to use for emails when you don’t know a customer’s preference.\n    \n*   **Billing (subscription and invoicing) emails**\n    \n    You can turn on customer emails for [Billing](https://docs.stripe.com/billing/revenue-recovery/customer-emails) and [Invoicing](https://docs.stripe.com/invoicing/send-email) in the Dashboard or through the API.",
  "title": "Branding your Stripe account | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/get-started/account/multiple-accounts",
  "markdown": "# Multiple accounts | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to create and manage multiple Stripe accounts.\n\nYou can create additional Stripe accounts associated with your email address. You might create some accounts yourself, or you might be given access to other accounts as a [team member](https://docs.stripe.com/get-started/account/teams). To create a new account, click on the name of your current Stripe account in the upper-left corner, and select **New account**. To switch the account you’re currently viewing in the [Dashboard](https://dashboard.stripe.com/), click on the name of your current Stripe account in the upper-left corner and then select the account to switch to.\n\nYou must use separate Stripe accounts for projects, websites, or businesses that operate independently from one another. When you activate a new account, it’s subject to Stripe’s standard policies and pricing—it doesn’t inherit any special status or other similar considerations that might apply to your existing account.\n\nUsing additional accounts has a number of benefits:\n\n*   **Separate tax and legal entity information**: You can only associate each account with the tax ID and legal entity of one business. If you operate multiple businesses that have separate tax ID information (for example, separate legal entities), you must create additional accounts for each.\n    \n*   **Unique statement descriptor and public business information**: Using the same Stripe account for separate businesses can cause confusion as the [public business information](https://docs.stripe.com/get-started/account/activate#public-business-information) used is the same for both. For example, a customer who purchases from your business “XYZ” might see a charge from your business “ABC” on their statement, potentially resulting in a dispute. Each additional account has its own public information to accurately describe your business and payments.\n    \n*   **Reporting and reconciliation**: Separating the payments processed by your businesses helps you find payments, create and export [reports](https://docs.stripe.com/reports), and reconcile payouts to your bank account.\n    \n*   **Payouts to separate bank accounts**: Each additional account can use a separate bank account for [payouts](https://docs.stripe.com/payouts) (although you can use the same bank account if you want).\n    \n\nIf your business requires multiple separate accounts for local acquiring or maintaining separate business lines, you can create an [organization](https://docs.stripe.com/get-started/account/orgs) for centralized reporting and management.\n\nWhen you have multiple projects or businesses that operate under the same legal entity, you can use the same tax ID and business information across multiple accounts. Make sure to provide suitable [public business information](https://docs.stripe.com/get-started/account/activate#public-business-information) to avoid customer confusion.",
  "title": "Multiple accounts | Stripe Documentation",
  "description": "Learn how to create and manage multiple Stripe accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/custom-domains",
  "markdown": "# Use your custom domain | Stripe DocumentationThe Stripe Docs logo\n\nIn this section, you’ll create the DNS records you need to connect your domain. As you go through each step, check each checkbox to keep track of where you are in the process.\n\nSelect the tab that matches your DNS provider from the tabs below—this gives you specific, guided instructions for creating the required DNS records. If your DNS provider isn’t an option, follow the Standard instructions:\n\nThese are standard instructions for creating your DNS records. If you have issues with any of the steps, please contact your DNS provider for more assistance.\n\n#### Note\n\nTo track your progress, go through each step and check it off when you’ve completed it.\n\n*   Sign into your DNS provider\n    \n    Most DNS providers have a control panel you can sign into to manage your DNS. Find your provider’s control panel page and sign in.\n    \n*   Find the page to manage the DNS for your domain\n    \n    Now that you’re logged in, find where you can manage the DNS records for your domain in your provider’s control panel.\n    \n    If you’re having issues finding the right page, you can:\n    \n    *   See if your DNS provider has a help article for adding new DNS records that can point you in the right direction.\n    *   Contact your DNS provider for additional support.\n*   From your DNS control panel, add a new record that maps your desired subdomain to Checkout. Most DNS providers ask you for the record type, name, value, and TTL or expiration when creating a new record.\n    \n    #### Note\n    \n    This record is what connects your subdomain to Stripe Checkout.\n    \n    Enter these values and save the new DNS record:\n    \n    | Field | Instructions | Description |\n    | --- | --- | --- |\n    | **Type** | Select `CNAME` from the dropdown | What kind of DNS record this is. |\n    | **Name** | If your custom subdomain is **checkout.powdur.me**, enter `checkout` | For CNAME records, this field is the first part of your subdomain (the part leading up to the first period). |\n    | **Value** | Enter `hosted-checkout.stripecdn.com` | This is what the new subdomain record points to–in this case, Stripe.<br><br>Some providers may expect a trailing period (`.`) after the CNAME value. Make sure to verify that your CNAME value matches the format your provider expects. |\n    | **TTL/Expiry** | Enter `300` | An expiration of 5 minutes (300 seconds) is OK. Your DNS provider might not allow you to change the TTL value. If this field is missing or you can’t change it, it’s safe to ignore this part of the configuration. |\n    \n*   From your DNS control panel, add a new TXT record.\n    \n    #### Note\n    \n    This TXT record lets us verify that you’re the owner of this domain. This is required to issue TLS certificates for your domain, so you can continue to accept payments securely.\n    \n    Enter these values and save the new DNS record:\n    \n    | Field | Instructions | Description |\n    | --- | --- | --- |\n    | **Type** | Select `TXT` from the dropdown | What kind of DNS record this is. |\n    | **Name** | If your custom domain is **checkout.powdur.me**, enter `_acme-challenge.checkout` | For TXT records, this field is the subdomain portion of your domain. |\n    | **Value** | Visit the [Dashboard settings](https://dashboard.stripe.com/settings/custom-domains) and click **View instructions** to copy the correct TXT value record. | This is a long, unique string used for domain verification. |\n    | **TTL/Expiry** | Enter `300` | An expiration of 5 minutes (300 seconds) is OK. Your DNS provider might not allow you to change the TTL value. If this field is missing or you can’t change it, it’s safe to ignore this part of the configuration. |\n    \n*   Verify your CNAME record is setup\n    \n    After you save your DNS record, verify that it has the correct values.\n    \n    1.  Wait up to 10 minutes for your DNS provider to update its nameservers.\n    2.  Replace **checkout.powdur.me** with your custom domain in the following command and run it from your terminal:\n    \n    `nslookup -querytype=CNAME checkout.powdur.me`\n    \n    You should see output like:\n    \n    `<your subdomain> \tcanonical name = hosted-checkout.stripecdn.com.`\n    \n    When you see that output, move onto the next step.\n    \n*   After you save your DNS record, verify that it has the correct values.\n    \n    1.  Wait up to 10 minutes for your DNS provider to update its nameservers.\n    2.  Replace **checkout.powdur.me** with your custom domain in the following command and run it from your terminal:\n    \n    `nslookup -querytype=TXT _acme-challenge.checkout.powdur.me`\n    \n    You should see output like this:\n    \n    `_acme-challenge.<your domain>   text = \"<your unique TXT record value>\"`\n    \n    If you don’t see your unique TXT record value in the output, wait a bit longer and try running the command again.\n    \n    When you finish this step, your DNS records are configured.\n    \n\nNow that you’ve created your DNS records and verified them, Stripe verifies the connection and provisions your domain on our end. We’ll send you an email and a Dashboard notification when the domain is ready for you to enable it. You can also visit the [Dashboard settings](https://dashboard.stripe.com/settings/custom-domains) at any time to see the current status of your custom domain connection.",
  "title": "Use your custom domain | Stripe Documentation",
  "description": "Learn how to bring your own custom domain to Stripe Checkout, Payment Links, and customer portal.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/get-started/account/statement-descriptors",
  "markdown": "# Statement descriptors | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how statement descriptors work.\n\nStatement descriptors explain charges or payments on bank statements. Using clear and accurate statement descriptors can reduce chargebacks and disputes. Banks and card networks require the inclusion of certain types of information that help customers understand their statements, and statement descriptors provide this information.\n\nWhen you activate your account, you can set a single statement descriptor (static statement descriptor) that appears on all customer statements. For card charges, you can also create a statement descriptor that contains a static prefix associated with your account but with a dynamic suffix associated with each charge. This enables you to specify details about the product, service, or payment on bank or card statements.\n\nMost banks display this information consistently, but some might display it incorrectly or not at all.\n\n## Statement descriptor requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA complete statement descriptor—either a single static descriptor or the combination of a prefix and suffix—must meet the following requirements:\n\n*   Contains only Latin characters.\n*   Contains between 5 and 22 characters, inclusive.\n*   Contains at least one letter (if using a prefix and a suffix, both require at least one letter).\n*   Doesn’t contain any of the following special characters: `<`, `>`, `\\`, `'` `\"` `*`.\n*   Reflects your Doing Business As (DBA) name.\n*   Contains more than a single common term or common website URL. A website URL only is acceptable if it provides a clear and accurate description of a transaction on a customer’s statement.\n\nA static prefix, also called a shortened descriptor in the Dashboard, must contain between 2 and 10 characters, inclusive. The remaining characters are reserved for the dynamic suffix.\n\n## Set the static statement descriptor ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou set a static statement descriptor or the shortened descriptor (prefix) in the [Dashboard](https://dashboard.stripe.com/settings/public). This value appears on all customer statements for charges or payments.\n\nA static statement descriptor is sufficient if:\n\n*   Your business provides only a single product or service.\n*   Your customers understand a static value for any transaction with your business.\n*   You prefer to provide the same statement descriptor for all transactions.\n\nFor card charges, consider a static prefix with dynamic suffix if:\n\n*   You provide multiple products or services.\n*   Your customers might not understand a single value for all their transactions with your business.\n*   You prefer to provide transaction-specific details on the statement descriptor.\n\nSet both the statement descriptor and the shortened statement descriptor for flexibility in setting statement descriptors on charges.\n\nIf you set the statement descriptor on card charges and don’t set a prefix (shortened descriptor), Stripe truncates the account statement descriptor as needed to set the prefix value. If the account statement descriptor contains fewer than 10 characters, we don’t truncate it.\n\n## Set a dynamic suffix ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDynamic suffixes are supported only for card charges. The suffix should specify details about the transaction so your customer can understand it clearly on their statement. The suffix is concatenated with the prefix, the `*` symbol, and a space to form the complete statement descriptor that your customer sees.\n\nMake sure that the total length of the concatenated descriptor is no more than 22 characters, including the `*` symbol and the space. If the prefix is `RUNCLUB` (7 characters), the dynamic suffix can contain up to 13 characters—for example, `9-22-19 10K` (11 characters) or `OCT MARATHON` (12 characters). The computed statement descriptor is `RUNCLUB* 9-22-19 10K` or `RUNCLUB* OCT MARATHON`.\n\nFor card charges, providing a dynamic statement descriptor requires the `statement_descriptor_suffix` value. For non-card charges, if you set a value only for `statement_descriptor` on a payment intent, Stripe uses it in place of the account statement descriptor (static descriptor).\n\nThe following examples show how to add a suffix to the PaymentIntent object.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d statement_descriptor_suffix=\"example descriptor\"`\n\n## Set the statement descriptor on non-card charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the `statement_descriptor` parameter to set the complete statement descriptor for non-card charges. Attempting to set this parameter for card charges results in a 400 error. For payments made with a card, use `statement_descriptor_suffix` instead.\n\n## Set Japanese statement descriptors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nJapanese merchants can set kanji and kana statement descriptors. Providing clear and easy to understand statement descriptors is important to reduce confusion and chargebacks. We recommend setting statement descriptors in all three supported scripts (kanji, kana, and Latin characters).\n\nYou can change your account’s [static](https://docs.stripe.com/get-started/account/statement-descriptors#static) kanji and kana statement descriptors and shortened descriptors (prefix) in the [Dashboard](https://dashboard.stripe.com/settings/public).\n\nFor card charges, you can set [dynamic suffixes](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) in kanji and kana on Payment Intents and Checkout Sessions. We compute the full descriptor that cardholders see by concatenating the shortened prefix and separators, in the same way as `statement_descriptor_suffix`.\n\nThe following example shows how to set kanji and kana suffixes on a Payment Intent.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=jpy \\  -d \"payment_method_types[]\"=card \\  -d statement_descriptor_suffix=\"example descriptor\" \\  -d \"payment_method_options[card][statement_descriptor_suffix_kanji]\"=\"漢字サフィックス\" \\  -d \"payment_method_options[card][statement_descriptor_suffix_kana]\"=\"カナサフィックス\"`\n\n### Requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhile Japanese statement descriptors share some requirements with [English requirements](https://docs.stripe.com/get-started/account/statement-descriptors#requirements), the following table shows additional requirements for kanji and kana descriptors.\n\n|     | Kanji | Kana |\n| --- | --- | --- |\n| Maximum total length | 17  | 22  |\n| Minimum prefix length | 1   | 2   |\n| Maximum prefix length | 10  | 10  |\n| Supported character type | Kanji, kana, and Latin | Kana |\n| Validation rule | `< > \\ ' \" * ＊` are not allowed | Only kana, spaces, dashes, and dots are allowed |\n\n#### Note\n\nTotal length is the length of either the static descriptor or the concatenated descriptor (prefix + separator + suffix). Descriptors exceeding the maximum length are truncated.\n\n### Issuer behavior![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nJapanese statement descriptors are available only when both of these are true:\n\n*   The card is a Visa or Mastercard issued in Japan.\n*   The charge is processed by a Japanese merchant or on behalf of a Japanese merchant.\n\nWhile most issuers use a Japanese statement descriptor rather than a Latin one, it is ultimately up to the issuer to decide which statement descriptor (kanji, kana, or Latin) to show on the cardholder’s statement.\n\nThe [calculated\\_statement\\_descriptor](https://docs.stripe.com/api/charges/object#charge_object-calculated_statement_descriptor) in API responses is always the Latin statement descriptor, but it doesn’t mean the issuer needs to select the Latin statement descriptor rather than the Japanese one.\n\n### `ST*` prefix![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the behavior described above, Japanese merchants’ JPY-denominated Mastercard payments are prefixed with `ST*` (or `ＳＴ＊` for kanji descriptors) automatically to comply with brand requirements.\n\n### Statement descriptor display timing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStatement descriptors for Japanese merchants’ JPY-denominated payments are sent to issuers at time of payment capture. As a result, they usually take a few days to appear on cardholder statements. In the meantime, depending on the card, a temporary descriptor might be visible to cardholders:\n\n*   **Mastercard:** `ST*ONLINE PAYMENT`, `ＳＴ＊オンライン決済` (kanji), or `ST*オンラインケッサイ` (kana)\n*   **Visa, JCB, Diners Club, and Discover:** the account’s default statement descriptor",
  "title": "Statement descriptors | Stripe Documentation",
  "description": "Learn how statement descriptors work.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/get-started/account/sso",
  "markdown": "# Single sign-on (SSO) | Stripe DocumentationThe Stripe Docs logo\n\n## Authenticate to the Stripe Dashboard with an Identity Provider.\n\n#### Note\n\nSingle sign-on for the Dashboard is currently in invite only beta.\n\nSSO is an account security feature which allows customers to mandate sign-in requirements and team member access to systems like the Stripe Dashboard. Specifically, Stripe supports Security Assertion Markup Language (SAML) version 2.0, which allows for the creation and authentication of team member accounts to be deferred to an Identity Provider (IdP).\n\nSSO is an account security feature which allows customers to mandate sign-in requirements and team member access to systems like the Stripe Dashboard. It leverages authentication decisions defined through an IdP, such as password policies and mandating two-factor authentication and allows new team members to instantly sign in to the Dashboard using Just-in-Time (JIT) account provisioning.\n\n#### Security incidents\n\nIf your IdP is compromised, unauthorized parties might be able to access your Stripe account. You’re responsible for mitigating your exposure to security incidents by assessing the security requirements of your business as well as selecting and implementing security procedures and controls.\n\n## Features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe supports the following SSO features:\n\n*   **SSO configuration options**: Configure Stripe accounts to either mandate SSO for all team members or allow sign-in using SSO or email and password.\n*   **JIT account creation**: Provision new Stripe accounts for team members without existing access, upon their first SSO sign-in.\n*   **Custom Dashboard roles for team members**: Configure Dashboard roles through the IdP. This is compatible with [user roles](https://docs.stripe.com/get-started/account/teams).\n*   **IdP-initiated login**: Directly authenticate from an IdP’s website or browser extension, assuming the IdP supports Service-Provider-Initiated login.\n\nStripe doesn’t support the following features:\n\n*   **User Deletion in SAML**: Due to the limitations of SAML, Stripe won’t be notified if user access is revoked in IdP. When users try to log in again through SSO after the current session expires, Stripe revokes their access. If this needs to happen instantly, you can delete the users in your [Team settings](https://dashboard.stripe.com/settings/team).\n*   **System for Cross-domain Identity Management (SCIM)**: SCIM is a protocol that an IdP can use to synchronize user identity lifecycle processes (for example, provisioning and deprovisioning access, and populating user details) with the service provider, such as Stripe.",
  "title": "Single sign-on (SSO) | Stripe Documentation",
  "description": "Authenticate to the Stripe Dashboard with an Identity Provider.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/handle-verification-updates",
  "markdown": "# Handle verification updates | Stripe DocumentationThe Stripe Docs logo\n\n## Help your connected accounts maintain compliance with changing verification requirements.\n\nBefore your connected accounts can accept payments and send payouts, you must fulfill what are typically called Know Your Customer (KYC) requirements. To do so, you must collect [certain information about your connected accounts](https://docs.stripe.com/connect/required-verification-information) and send it to Stripe for verification.\n\nStripe frequently updates KYC requirements, often due to changes implemented by financial regulators, card networks, and other financial institutions.\n\n#### Get risk requirements with the API\n\nAs part of a current beta, you can handle current and upcoming risk-related account issues with the [account.requirements](https://docs.stripe.com/api/accounts/object#account_object-requirements) attribute. To learn more about how to participate in the beta, [submit your email.](#)\n\nThese updates might require you to take the following actions:\n\n1.  Modify your onboarding flow to account for the changed requirements.\n2.  Collect updated information from affected connected accounts and handle verification responses.\n\nWhen [upcoming requirements updates](https://support.stripe.com/user/questions/onboarding-requirements-updates) affect your connected accounts, we’ll notify you.\n\nIf you use embedded or Stripe-hosted onboarding, you can proactively collect information to fulfill [future requirements](https://docs.stripe.com/api/accounts/object#account_object-future_requirements). For embedded onboarding, include the `collectionOptions` attribute in the [embedded onboarding component](https://docs.stripe.com/connect/supported-embedded-components/account-onboarding). For Stripe-hosted onboarding, specify the `collection_options` parameter when [creating account links](https://docs.stripe.com/api/account_links/create#create_account_link-collection_options).\n\n### API version considerations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn [API version 2023-10-16](https://docs.stripe.com/upgrades#2023-10-16) and later, the `account` object’s [requirements.errors](https://docs.stripe.com/api/accounts/object#account_object-requirements-errors) array specifies the latest verification error types in the `code` attribute. We recommend upgrading to API version 2023-10-16 and using `requirements.errors`.\n\nIf you can’t update to version 2023-10-16, earlier versions of the `requirements.errors` array include a `detailed_code` field to return verification errors that weren’t compatible with the `code` attribute. The `detailed_code` attribute doesn’t appear in the API reference.\n\nIf you’re using account or remediation links to collect new requirements, set the [API version to 2021-09-07](https://docs.stripe.com/libraries/set-version) or later.\n\nIf you’re receiving `account.updated` events. Set the webhooks [API version to 2021-09-07](https://docs.stripe.com/upgrades#2021-09-07) or later.\n\n[](#modify-your-onboarding-flow)\n\n### Onboarding flow options ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen requirements change, we update Stripe-hosted and embedded onboarding flows to reflect the changes. However, if you use a custom API-based onboarding flow, you must update it to handle any changed requirements.\n\nRegardless of the onboarding flow type, you must address requirements changes for your existing connected accounts.\n\n| Onboarding Flow Type | Description | Update Responsibility |\n| --- | --- | --- |\n| [API-based](https://docs.stripe.com/connect/custom/onboarding#api-based-onboarding) | You build custom flows using Stripe APIs for your connected accounts. Your integration must meet all of Stripe’s onboarding requirements. | You’re responsible for identifying requirements changes and updating your flows to handle them. |\n| [Embedded](https://docs.stripe.com/connect/custom/onboarding#embedded-onboarding) new | (**Recommended method**) Your connected accounts interact with a [highly themeable](https://docs.stripe.com/connect/customize-connect-embedded-components) and [customizable](https://docs.stripe.com/connect/embedded-onboarding#customize-policies-shown-to-your-users) UI in an embedded component without leaving your application. | You don’t have to update your onboarding flow when requirements change. Stripe automatically updates embedded onboarding components accordingly. |\n| [Stripe-hosted](https://docs.stripe.com/connect/custom/onboarding#stripe-hosted-onboarding) | Your application redirects your connected accounts to Stripe to complete the onboarding process in a co-branded interface. | You don’t have to update your onboarding flow when requirements change. Stripe automatically updates hosted onboarding accordingly. |\n\nIf you use embedded components or Stripe-hosted onboarding, requirements changes don’t require you to update your onboarding flow. Skip to the section on [collecting updated information](#collect-updated-information-from-affected-users).\n\nIf you use a custom API-based onboarding flow, handle updated requirements by following these steps or by replacing your onboarding flow with embedded components or Stripe-hosted onboarding.\n\n#### Note\n\nYou can’t use the API to respond to Stripe risk reviews. You can enable your connected accounts to respond using embedded components, Stripe-hosted onboarding, or remediation links. You can also use the Dashboard to respond to risk reviews on behalf of your connected accounts.\n\n### Modify your API-based onboarding flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### 1\\. Preview updated verification requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen verification requirements change, you must collect updated information by [a certain date](https://support.stripe.com/user/questions/onboarding-requirements-updates). Otherwise, connected accounts won’t be able to use the capabilities you request (for example, `card_payments`). See details about the [information you need to collect](https://docs.stripe.com/connect/required-verification-information) based on an account’s region, capabilities requested, and other factors.\n\nYou can avoid disruption of your connected accounts’ capabilities by planning the collection of updated information before the `current_deadline`. To preview information about upcoming requirements changes, look at the Account object’s [future\\_requirements hash](https://docs.stripe.com/api/accounts/object#account_object-future_requirements).\n\n`{   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   \"object\": \"account\",   \"future_requirements\": {     \"current_deadline\": 1656608400,     \"currently_due\": [       \"company.tax_id\"     ],     \"disabled_reason\": null,     \"errors\": [],     \"eventually_due\": [       \"company.tax_id\"     ],     \"past_due\": [],     \"pending_verification\": []   },   ... }`\n\n#### Note\n\n#### 2\\. Add required fields to your onboarding flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you’ve identified the updated information you need to collect, add corresponding fields to your onboarding flow and update your connected accounts using the Accounts API.\n\nTo avoid disruption to your connected accounts, have your onboarding flow address all requirements listed in the Account object’s [future\\_requirements.currently\\_due](https://docs.stripe.com/api/accounts/object#account_object-future_requirements-currently_due) list.\n\nYou can also prepare for requirements that will apply when an account reaches their thresholds by considering the [future\\_requirements.eventually\\_due](https://docs.stripe.com/api/accounts/object#account_object-future_requirements-eventually_due) list.\n\n#### 3\\. Test your updated onboarding flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo simulate future verification requirements, create a test account using the Accounts API with `enforce_future_requirements` in the email field. That populates the account’s `requirements` hash with all known future verification requirements.\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"controller[stripe_dashboard][type]\"=none \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[losses][payments]\"=application \\  -d \"controller[requirement_collection]\"=application \\  -d country=US \\  -d business_type=individual \\  -d \"capabilities[card_payments][requested]\"=true \\  -d \"capabilities[transfers][requested]\"=true \\   --data-urlencode email=\"jenny.rosen+enforce_future_requirements@example.com\"`\n\nTo verify that your updated onboarding flow fulfills the account requirements, onboard the test account and check its `requirements` hash. If your flow covers all the requirements, the [currently\\_due](https://docs.stripe.com/api/accounts/object#account_object-requirements-currently_due) list is empty.\n\n#### 4\\. Listen for account status changes to enable functionality ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDetect account status changes by listening to the `account.updated` event. After an account has gone through your onboarding flow, inspect the `currently_due` and `pending_verification` lists in the account’s `requirements` hash. When both are empty, and `requirements.disabled_reason` is null, you can enable functionality for the account. When `payouts_enabled` is true, the account can receive payouts. When `charges_enabled` is true, unlock payments for the account.\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\n`{   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   \"object\": \"account\",   \"charges_enabled\": true,   \"payouts_enabled\": true,   \"requirements\": {     \"alternatives\": [],     \"current_deadline\": null,     \"currently_due\": [],     \"disabled_reason\": null,     \"errors\": [],     \"eventually_due\": [],     \"past_due\": [],     \"pending_verification\": []   },   ... }`\n\n[](#collect-updated-information-from-affected-users)\n\nYou can collect updated information from your connected accounts using embedded components, Stripe-hosted onboarding, or the Stripe API. We recommend either integrating embedded components or directing your connected accounts to [Stripe-hosted onboarding using Account Links](https://docs.stripe.com/connect/custom/hosted-onboarding).\n\nIn all cases, follow these steps:\n\n### 1\\. Adjust your integration to handle new verification responses ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen Stripe receives updated information about your connected accounts, it takes time to verify the associated account fields. Until we complete verification, assume that any related functionality remains disabled. To detect field verification updates, listen for [account.updated](https://docs.stripe.com/api/events/types#event_types-account.updated) events and inspect them for [verification errors](https://docs.stripe.com/connect/handling-api-verification#validation-and-verification-errors). If you don’t resolve an error before its deadline, it disables requested capabilities for affected accounts.\n\nA disabled capability’s `requirements` hash contains a [disabled\\_reason](https://docs.stripe.com/api/capabilities/object#capability_object-requirements-disabled_reason) that you can use to determine the action you must take. To investigate or to provide required information, use the [Accounts to review tab](https://docs.stripe.com/connect/dashboard/review-actionable-accounts) in your Connect Dashboard.\n\n### 2\\. Identify accounts with outstanding requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn your Connect Dashboard, select [Accounts to review](https://dashboard.stripe.com/connect/accounts_to_review). It displays a list of connected accounts with current or future outstanding requirements. You can filter the list by account issue and status.\n\nYou can also see what information each connected account must provide, and the deadline, in the account object’s [future\\_requirements](https://docs.stripe.com/api/accounts/object#account_object-future_requirements) hash or by using a [Sigma query](https://docs.stripe.com/stripe-data/query-connect-data).\n\n### 3\\. Prepare for enforcement of updated requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn the enforcement date for an account (`future_requirements.current_deadline`), the contents of the `future_requirements` hash move to the `requirements` hash and Stripe generates an [account.updated](https://docs.stripe.com/api/events/types#event_types-account.updated) event. Because this enforcement can cause more accounts to require review, use the enforcement date as a reminder to check the [Accounts to review tab](https://docs.stripe.com/connect/dashboard/review-actionable-accounts) in your Connect Dashboard.\n\n#### Note\n\nWe plan to introduce a feature that lets you start enforcing requirements before the deadline by applying updated verification requirements to connected accounts. It will let you proactively catch and resolve issues in your updated integration by applying requirements to connected accounts in batches.\n\n### 4\\. Send connected accounts to the information collection flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf any account has [currently\\_due](https://docs.stripe.com/api/accounts/object#account_object-requirements-currently_due) requirements or [verification errors](https://docs.stripe.com/api/accounts/object#account_object-requirements-errors), you must address them by the requirements [current\\_deadline](https://docs.stripe.com/api/accounts/object#account_object-requirements-current_deadline). At that deadline, the requirements in the `requirements.currently_due` array are added to the `requirements.past_due` array and any associated capabilities become disabled until you provide the information and resolve the errors.\n\nFuture requirements can immediately affect an account’s capabilities when they become current requirements. Make sure to address all requirements before their deadlines, even if they’re still in `future_requirements`.\n\nWhen your accounts have `requirements` that are `currently_due`, direct your accounts to address any issues according to your onboarding flow or with remediation links:\n\n*   **API-based onboarding:** Use your [custom onboarding flow](https://docs.stripe.com/connect/custom/onboarding#api-based-onboarding), optionally collecting `future_requirements` as well.\n*   **Embedded onboarding:** Render the [embedded onboarding component](https://docs.stripe.com/connect/custom/onboarding#embedded-onboarding) for affected accounts.\n*   **Stripe-hosted onboarding:** Use the [Account Links API](https://docs.stripe.com/api/account_links) to generate a single-use link to [Stripe-hosted onboarding](https://docs.stripe.com/connect/custom/onboarding#stripe-hosted-onboarding). Send your connected accounts to this link from your application.\n*   **Remediation links:** Use the Dashboard to generate [remediation links](https://docs.stripe.com/connect/dashboard/remediation-links) that your connected accounts can use to provide required information.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Handling verification with the API](https://docs.stripe.com/connect/handling-api-verification)\n*   [Required verification information](https://docs.stripe.com/connect/required-verification-information)\n*   [Testing Connect](https://docs.stripe.com/connect/testing)\n*   [Testing account identity verification](https://docs.stripe.com/connect/testing-verification)",
  "title": "Handle verification updates | Stripe Documentation",
  "description": "Help your connected accounts maintain compliance with changing verification requirements.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/adaptive-pricing",
  "markdown": "# Adaptive Pricing | Stripe DocumentationThe Stripe Docs logo\n\n## Let customers pay in their local currency with Adaptive Pricing (formerly Automatic Currency Conversion).\n\n#### Regional considerations\n\nAdaptive Pricing is available to businesses in the following regions:\n\nAustralia\n\nBrazil\n\nBulgaria\n\nCanada\n\nCzech Republic\n\nDenmark\n\nEU\n\nHong Kong\n\nHungary\n\nIndia\n\nJapan\n\nLiechtenstein\n\nMalaysia\n\nMexico\n\nNew Zealand\n\nNorway\n\nPoland\n\nRomania\n\nSingapore\n\nSweden\n\nSwitzerland\n\nThailand\n\nUnited Arab Emirates\n\nUnited Kingdom\n\nUnited States\n\nAdaptive Pricing lets your customers pay in their local currency in more than 50 countries.\n\nWith Adaptive Pricing, Stripe automatically calculates the localized price and handles all currency conversion. The presentment currency is inferred from the buyer’s public IP address. Enabling Adaptive Pricing can increase conversion rates from global buyers, and businesses have had on average a 17% increase in international revenue.\n\nUse Adaptive Pricing to:\n\n*   Display pricing in local currencies based on location\n*   Calculate prices in real-time using an exchange rate guaranteed for 24 hours\n*   Unlock payment methods that require local currency\n*   Ensure regulatory compliance in all supported currencies\n\n![A customer in Canada views a price localized from USD to CAD](https://b.stripecdn.com/docs-statics-srv/assets/localized-price.dbd22a8f02691381a7aeef78fa6c909a.png)\n\n## Enable Adaptive Pricing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEnable Adaptive Pricing in your [payment settings](https://dashboard.stripe.com/settings/adaptive-pricing). You can enable Adaptive Pricing in test mode and live mode. Disabling Adaptive Pricing doesn’t affect Checkout Sessions that have already been converted.\n\nAdaptive Pricing works with Checkout, Payment Links, Pricing Table, and local payment methods.\n\n### Webhooks and reporting![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Caution\n\nEnabling Adaptive Pricing can affect some parts of your integration, like webhook handling and reporting. Review your integration to make sure it can handle [webhooks](#webhooks-reporting) and PaymentIntent objects with local currencies.\n\n*   Use the [currency\\_conversion](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-currency_conversion) hash on the Checkout Session object to determine what your customer would have paid in the default currency.\n*   Use the [BalanceTransactions API](https://docs.stripe.com/api/balance_transactions) to determine how much you receive after fees.\n\n[](#supported-currencies)\n\nMerchants in supported regions can automatically convert prices to the local currencies of their customers in the following markets:\n\n*   United Arab Emirates (AED)\n    \n\n[](#local-payment-methods)\n\nYou can configure which payment methods you accept in your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods).\n\nAdaptive Pricing can increase usage of local payment methods significantly (up to 6.5x on some merchants) by ensuring customers have the option to pay in their currency and with payment methods most relevant to them. As an example, iDEAL is used by 70% of all e-commerce transactions in the Netherlands, but only works with EUR.\n\nAdaptive Pricing enables the following payment methods:\n\n[](#restrictions)\n\nAdaptive Pricing does not yet work with Connect or Elements.\n\nAdditionally, Adaptive Pricing requires the [currency for your prices](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-currency) to be the same as your default settlement currency. Prices automatically convert during checkout. This applies to [prices](https://docs.stripe.com/products-prices/manage-prices#prices-create) you create and reference with a price ID and prices you create inline with [price\\_data](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items-price_data) when you create a Checkout Session.\n\nAdaptive Pricing does not apply for Checkout Sessions that:\n\n*   Contain explicitly defined [manual currency prices](https://docs.stripe.com/payments/checkout/manual-currency-prices).\n*   Are in `subscription` mode.\n*   Use Connect parameters like `application_fee_amount`, `on_behalf_of`, and `transfer_data`.\n*   Use [`capture_method`](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-payment_intent_data-capture_method) as `manual`.\n*   Set the [currency](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-currency) value on creation.\n*   Present the customer a local currency that is also configured as a [settlement currency](https://docs.stripe.com/payouts#supported-accounts-and-settlement-currencies). For example, if an account settles in `eur` or `gbp` and prices in `eur`, customers with local currency `gbp` don’t see Adaptive Pricing. Customers with local currency other than `eur` or `gbp`, such as `jpy`, see Adaptive Pricing.\n\nIn Sessions that aren’t supported by Adaptive Pricing, Checkout presents prices in the original currency that you’ve set your prices in.\n\n[](#exchange-rate)\n\nStripe uses the mid-market exchange rate and applies a fee to guarantee the rate for the duration of the Checkout Session (up to 24 hours) through settlement. If the exchange rate changes by more than 2% in that time, Stripe might use the updated exchange rate to calculate your payout.\n\nLearn more about how Stripe handles [currency conversions](https://docs.stripe.com/currencies/conversions) and [Adaptive Pricing fees](https://support.stripe.com/questions/adaptive-pricing#:~:text=Adaptive%20Pricing%20is%20a%20Checkout,latest%20Stripe%2Dprovided%20exchange%20rates).\n\n[](#refunds)\n\nStripe pays out refunds in the currency your customer pays in using the latest Stripe-provided exchange rate. This means that you might pay more or less to cover the refund depending on how the exchange rate changes.\n\n### Example refund![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe ignore Stripe fees in this example for simplicity. Suppose:\n\n1.  You’re a US business that uses Checkout to sell a product for 100 USD and have activated Adaptive Pricing.\n2.  A customer in Canada views your Checkout page, sees the localized price of 137 CAD at an exchange rate of 1.37 CAD per 1 USD, and completes the purchase.\n3.  Stripe processes the payment, converting the 137 CAD to 100 USD to pay you in your settlement currency.\n4.  Later, when the exchange rate has changed to 1.40 CAD per 1 USD, you issue a full refund to the customer.\n5.  Stripe deducts 97.86 USD from your account, exchanging it at 1.40 CAD per 1 USD to pay out the 137 CAD refund.\n\nLearn more about how Stripe helps you manage [refunds](https://docs.stripe.com/refunds).\n\n[](#webhooks-reporting)\n\nDepending on the user-selected currency, both the Checkout Session and the underlying PaymentIntent objects update automatically to reflect the selected currency and amount. After a user pays in local currency, the Checkout Session object’s currency and total amount is in local currency and contains a `currency_conversion` hash to reflect what the user would have paid in the default currency. Learn more about what’s [deposited in your account after fees](https://docs.stripe.com/api/balance_transactions).\n\nThe [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) webhook event contains a `currency_conversion` hash that includes the `amount_total` and `amount_subtotal` in the `source_currency`. The amounts reflect what your customer would have paid in the source currency.\n\n`{   \"id\":` \n\n`'{{EVENT_ID}}'`\n\n`,   \"object\": \"event\",   \"type\": \"checkout.session.completed\",   \"data\": {     \"object\": {       \"id\":   '{{SESSION_ID}}'  ,       \"object\": \"checkout.session\",       \"currency\": \"cad\",       \"amount_total\": 2055,       \"amount_subtotal\": 2055,       \"currency_conversion\": {         \"amount_subtotal\": 1500,         \"amount_total\": 1500,         \"source_currency\": \"usd\",         \"fx_rate\": \"1.37\"       }     }   } }`\n\n[](#testing)\n\nTo test local currency presentment for Checkout, Payment Links, and the [pricing table](https://docs.stripe.com/payments/checkout/pricing-table), pass in a location-formatted customer email that includes a suffix in a `+location_XX` format in the local part of the email. `XX` must be a valid [two-letter ISO country code](https://www.nationsonline.org/oneworld/country_code_list.htm).\n\nFor example, to test currency presentment for a customer in France, pass in an email like `test+location_FR@example.com`.\n\nWhen you visit the URL for a Checkout Session, Payment Link, or pricing table created with a location-formatted email, you see the same currency as a customer does in the specified country.\n\n### Testing Checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you create a Checkout Session, pass the location-formatted email as [customer\\_email](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-customer_email) to simulate Checkout from a particular country.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"line_items[0][price]\"=\"{{PRICE_ID}}\" \\  -d \"line_items[0][quantity]\"=1 \\  -d mode=payment \\  -d success_url=\"https://example.com/success\" \\   --data-urlencode customer_email=\"test+location_FR@example.com\"`\n\nYou can also create a [Customer](https://docs.stripe.com/api/customers/create) and specify their email that contains the `+location_XX` suffix. Stripe test cards work as usual.\n\nWhen it’s possible to present the customer’s local currency in Checkout, the [Checkout Session](https://docs.stripe.com/api/checkout/sessions/object) object changes. Fields like `currency`, `payment_method_types`, and `amount_total` reflect the local currency and price.\n\n### Testing Payment Links![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor Payment Links, pass the location-formatted email as the `prefilled_email` [URL parameter](https://docs.stripe.com/payment-links/customize#customize-checkout-with-url-parameters) to test currency presentment for customers in different countries.\n\n### Testing Pricing table![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor the pricing table, pass the location-formatted email as the [customer-email](https://docs.stripe.com/payments/checkout/pricing-table#customer-email) attribute to test currency presentment for customers in different countries.",
  "title": "Adaptive Pricing | Stripe Documentation",
  "description": "Let customers pay in their local currency with Adaptive Pricing (formerly Automatic Currency Conversion).",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/how-checkout-works",
  "markdown": "# How Checkout works | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Checkout to collect payments on your website.\n\nStripe Checkout is a prebuilt payment form that allows businesses to securely accept payments online. Checkout’s built-in features allow you to reduce your development time. It supports 40+ payment methods, including [Link](https://docs.stripe.com/payments/link), Stripe’s 1-click payment solution. You can accept payments by embedding Checkout directly into your website or directing customers to a Stripe-hosted payment page.\n\nYou can also customize Checkout and access additional functionality with the [Checkout Session API](https://docs.stripe.com/api/checkout/sessions) and the Stripe Dashboard. For a complete list of features, see its [built-in and customizable features](https://docs.stripe.com/payments/checkout/how-checkout-works#features).\n\nCheckout supports payments for both [one-time purchases](https://docs.stripe.com/payments/online-payments) and [subscriptions](https://docs.stripe.com/subscriptions).\n\n## Checkout lifecycle ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  When customers are ready to complete their purchase, your application creates a new Checkout Session.\n2.  The Checkout Session provides a URL that redirects customers to a Stripe-hosted payment page.\n3.  Customers enter their payment details on the payment page and complete the transaction.\n4.  After the transaction, a [webhook](https://docs.stripe.com/webhooks \"webhook\") [fulfills the order](https://docs.stripe.com/checkout/fulfillment) using the [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) event.\n\n## Low-code integration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCheckout requires minimal coding and is the best choice for most integrations because of its prebuilt functionalities and customization options. You can integrate Checkout by creating a Checkout Session and collecting customer payment details. Collect payment by [embedding a payment form](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=embedded-form) in your website or redirecting customers to a [Stripe-hosted payment page](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\n[Compare Checkout](https://docs.stripe.com/payments/online-payments#compare-features-and-availability) to other Stripe payment options to determine the best one for you. Checkout displays a payment form to collect customer payment information, validates cards, handles errors, and so on.\n\n## Built-in and customizable features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Checkout has the following built-in and customizable features:\n\n### Built-in features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   PayPal, Google Pay, Apple Pay, and Link\n*   Responsive mobile design\n*   SCA-ready\n*   CAPTCHAs\n*   PCI compliance\n*   Card validation\n*   Error messaging\n*   [Adjustable quantities](https://docs.stripe.com/payments/checkout/adjustable-quantity)\n*   [Automatic tax collection](https://docs.stripe.com/tax/checkout)\n*   International language support\n*   [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing)\n\n### Customizable features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   [Collect taxes](https://docs.stripe.com/payments/checkout/taxes)\n*   [Custom branding with colors, buttons, and font](https://docs.stripe.com/payments/checkout/customization)\n*   [Cross-sells](https://docs.stripe.com/payments/checkout/cross-sells)\n*   [Global payment methods](https://docs.stripe.com/payments/dashboard-payment-methods)\n*   [Subscription upsells](https://docs.stripe.com/payments/checkout/upsells)\n*   [Custom domains](https://docs.stripe.com/payments/checkout/custom-domains) (Stripe-hosted page only)\n*   [Email receipts](https://docs.stripe.com/receipts)\n*   [Apply discounts](https://docs.stripe.com/payments/checkout/discounts)\n*   [Custom success page](https://docs.stripe.com/payments/checkout/custom-success-page)\n*   [Recover abandoned carts](https://docs.stripe.com/payments/checkout/abandoned-carts)\n*   [Autofill payment details with Link](https://docs.stripe.com/payments/checkout/customization#link)\n*   [Collect Tax IDs](https://docs.stripe.com/tax/checkout/tax-ids)\n*   [Collect shipping information](https://docs.stripe.com/payments/collect-addresses?payment-ui=checkout)\n*   [Collect phone numbers](https://docs.stripe.com/payments/checkout/phone-numbers)\n*   [Set the subscription billing cycle date](https://docs.stripe.com/payments/checkout/billing-cycle)\n\n### Custom branding ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can set fonts, colors, icons, and field styles for your Stripe-hosted Checkout page using your Stripe Dashboard’s [Branding settings](https://dashboard.stripe.com/settings/branding/checkout). Toggle between `Stripe-hosted` and `embedded` to see the branding options for the integration type you chose. For more information, see [Customize your integration](https://docs.stripe.com/payments/checkout/customization).\n\n### Custom domains ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you use Stripe’s [custom domain feature](https://docs.stripe.com/payments/checkout/custom-domains), you can serve Stripe-hosted Checkout pages on a subdomain of your custom domain. Custom domains are a paid feature. For information, see [Pricing and fees](https://stripe.com/pricing).\n\n## Checkout Session ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Checkout Session is a programmatic representation of what your customers see on the payment form. After creating a Checkout Session, redirect your customers to the Session’s URL to complete the purchase. When customers complete their purchase, you can [fulfill their orders](https://docs.stripe.com/checkout/fulfillment) by configuring webhooks on Checkout Session events. This code snippet from the [quickstart guide](https://docs.stripe.com/checkout/quickstart) is an example of how to create a Checkout Session in your application.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1 \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\"`\n\n### One-time and recurring payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAllow customers to make one-time payments or subscribe to a product or service by setting the [mode](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-mode) parameter in a Checkout Session.\n\n| Mode | Purchase type |\n| --- | --- |\n| Payment | One-time purchases |\n| [Subscription](https://docs.stripe.com/billing/subscriptions/overview) | *   Recurring purchases<br>*   Mixed cart: Recurring purchases with one-time purchases |\n\n### Mixed cart ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCreate a mixed cart in Checkout that lets your customers purchase Subscription items and one-time purchase items at the same time. To create a mixed cart, set the `mode` parameter to `subscription` and include the Price IDs, or `price_data`, for each line\\_item in the [line\\_items](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items) array. Price IDs come from Price objects created using the Stripe Dashboard or API and allow you to store information about your product catalog in Stripe.\n\nYou can also use [price\\_data](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items-price_data) to reference information from an external database where you’re hosting price and product details without storing product catalog information on Stripe. For more information, see [Build a subscriptions integration](https://docs.stripe.com/billing/subscriptions/build-subscriptions).\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"={{RECURRING_PRICE_ID}} \\   -d \"line_items[0][quantity]\"=1 \\  -d \"line_items[1][price]\"={{ONE_TIME_PRICE_ID}} \\   -d \"line_items[1][quantity]\"=1 \\  -d mode=subscription \\   --data-urlencode success_url=\"https://example.com/success\" \\   --data-urlencode cancel_url=\"https://example.com/cancel\"`\n\n### Payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can view, enable, and disable different payment methods in the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) at any time. Stripe enables certain payment methods for you by default. We might also enable additional payment methods after notifying you. View our [complete list of payment methods](https://docs.stripe.com/payments/payment-methods/overview).\n\n### Save payment details and default payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can [save payment details for future use](https://docs.stripe.com/payments/save-and-reuse) by sending an API parameter when you create a Session. Options to save payment details include:\n\n*   **Single payment**—If your Checkout Session uses `payment` mode, set the [payment\\_intent\\_data.setup\\_future\\_usage](https://docs.stripe.com/payments/payment-intents#future-usage) parameter.\n*   **Subscription payment**—If your Checkout Session uses `subscription` mode, Stripe saves the payment method by default.\n*   **Multiple saved payment methods**—If a customer has multiple payment methods saved, you can store a default payment method to the Customer object’s [default\\_payment\\_method](https://docs.stripe.com/api/customers/object#customer_object-invoice_settings-default_payment_method) field. However, by default, these payment methods don’t appear for return purchases in Checkout. [(Learn more)](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=checkout#save-payment-method-details).\n\n## Complete a transaction ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFulfill orders when a customer completes their purchase by running webhooks after the [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) event sends a notification. Webhooks are HTTP calls that run when an event occurs. For example, if a customer doesn’t make a purchase and their cart expires, you can set a webhook on the [checkout.session.expired](https://docs.stripe.com/api/events/types#event_types-checkout.session.expired) event and return items to your inventory or you can send them a cart [abandonment](https://docs.stripe.com/payments/checkout/abandoned-carts) email.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Checkout quickstart](https://docs.stripe.com/checkout/quickstart)\n*   [Fulfill your orders](https://docs.stripe.com/checkout/fulfillment)\n*   [Collect taxes in Checkout](https://docs.stripe.com/payments/checkout/taxes)\n*   [Manage limited inventory with Checkout](https://docs.stripe.com/payments/checkout/managing-limited-inventory)\n*   [Automatically convert to local currencies in Checkout with Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing)",
  "title": "How Checkout works | Stripe Documentation",
  "description": "Learn how to use Checkout to collect payments on your website.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/payment-element/migration",
  "markdown": "# Migrate to the Payment Element\n\n## Learn how to migrate your existing integration with individual payment method Elements into a single Element.\n\n#### Note\n\n#### Interested in using Stripe Billing, Tax, discounts, shipping, or currency conversion?\n\nWe’re developing a Payment Element integration that manages subscriptions, tax, discounts, shipping, and currency conversion. Read the [Build a checkout page](https://docs.stripe.com/checkout/custom-checkout) guide to learn more.\n\nPreviously, each payment method (cards, iDEAL, and so on) required a separate Element. By migrating to the Payment Element, you can accept many payment methods with a single Element.\n\nPaymentIntents and SetupIntents each have their own set of migration guidelines. See the appropriate guide for your integration path, including example code.\n\nIf your existing integration uses the [Payment Intents](https://docs.stripe.com/payments/payment-intents) API to create and track payments or save card details during a payment, follow the steps below to use the Payment Element.\n\n[](#enable-payment-methods)\n\n#### Caution\n\nThis integration path doesn’t support BLIK or pre-authorized debits that use the Automated Clearing Settlement System (ACSS).\n\nView your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) and enable the payment methods you want to support. You need at least one payment method enabled to create a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\").\n\nBy default, Stripe enables cards and other prevalent payment methods that can help you reach more customers, but we recommend turning on additional payment methods that are relevant for your business and customers. See [Payment method integration options](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) for product and payment method support, and our [pricing page](https://stripe.com/pricing/local-payment-methods) for fees.\n\n[](#one-time-update-elements)\n\nNext, update your client-side code to pass `mode`, `currency`, and `amount` when you create the Elements instance. For use with a PaymentIntent, set the `mode` to `'payment'` and the `currency` and `amount` to what you’ll charge your customer.\n\n`const stripe =     Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`); const elements = stripe.elements();`\n\n`const stripe =     Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`); const options = {   mode: 'payment',   currency: 'usd',   amount: 1099, }; const elements = stripe.elements(options);`\n\n[](#one-time-add-payment-element)\n\nYou can now replace the Card Element and individual payment methods Elements with the Payment Element. The Payment Element automatically adjusts to collect input fields based on the payment method and country (for example, full billing address collection for SEPA Direct Debit) so you don’t have to maintain customized input fields anymore.\n\nThe following example replaces `CardElement` with `PaymentElement`:\n\n`<form id=\"payment-form\">   <div id=\"card-element\">   </div>   <div id=\"payment-element\">     <!-- Mount the Payment Element here -->   </div>   <button id=\"submit\">Submit</button> </form>`\n\n`const cardElement = elements.create(\"card\"); cardElement.mount(\"#card-element\"); const paymentElement = elements.create(\"payment\"); paymentElement.mount(\"#payment-element\");`\n\nIf your payment flow already always collects details like the customer’s name or email address, you can prevent the Payment Element from collecting this information by passing the [fields](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-fields) option when creating the Payment Element. If you disable the collection of a certain field, you must pass that same data back with [stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment).\n\n[](#one-time-payment-intent)\n\nThe Payment Element allows you to accept multiple payment methods. You can manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow. We prioritize payment methods that increase conversion and are most relevant to the customer’s currency and location.\n\nAny of the additional elements options passed when creating the Elements group in the earlier step should also be passed when creating the PaymentIntent.\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -H \"Stripe-Version: 2024-06-20\" \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\" \\   -d \"payment_method_types[]\"=card \\   -d \"automatic_payment_methods[enabled]\"=true \\`\n\n#### Caution\n\nEach payment method needs to support the currency passed in the PaymentIntent and your business needs to be based in one of the countries each payment method supports. See the [Payment method integration options](https://docs.stripe.com/payments/payment-methods/integration-options) page for more details about what’s supported.\n\n[](#one-time-update-method)\n\nInstead of using individual confirm methods like `stripe.confirmCardPayment` or `stripe.confirmP24Payment`, use [stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment) to collect payment information and submit it to Stripe.\n\nTo confirm the PaymentIntent, make the following updates to your submit handler:\n\n*   Call `await elements.submit()` to trigger form validation and collect any data required for [wallets](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-wallets).\n*   Optional: Move PaymentIntent creation to the submit handler. This way you only create the PaymentIntent when you’re sure of the final amount.\n*   Pass the `elements` instance you used to create the Payment Element and the `clientSecret` from the PaymentIntent as parameters to `stripe.confirmPayment`.\n\nWhen called, `stripe.confirmPayment` attempts to complete any [required actions](https://docs.stripe.com/payments/paymentintents/lifecycle), such as authenticating your customers by displaying a 3DS dialog or redirecting them to a bank authorization page. When confirmation is complete, users are directed to the `return_url` you configured, which normally corresponds to a page on your website that [provides the status of the payment](https://docs.stripe.com/payments/accept-a-payment#web-post-payment).\n\nIf you want to keep the same checkout flow for card payments and only redirect for redirect-based payment methods, you can set [redirect](https://docs.stripe.com/js/payment_intents/confirm_payment#confirm_payment_intent-options-redirect) to `if_required`.\n\nThe following code example replaces `stripe.confirmCardPayment` with `stripe.confirmPayment`:\n\n`// Create the PaymentIntent and obtain clientSecret const res = await fetch(\"/create-intent\", {   method: \"POST\",   headers: {\"Content-Type\": \"application/json\"}, });  const {client_secret: clientSecret} = await res.json();  const handleSubmit = async (event) => {   event.preventDefault();    if (!stripe) {     // Stripe.js hasn't yet loaded.     // Make sure to disable form submission until Stripe.js has loaded.     return;   }    setLoading(true);    const {error} = await stripe.confirmCardPayment(clientSecret, {     payment_method: {       card: elements.getElement(CardElement)     }   });    if (error) {     handleError(error);   } };`\n\n`const handleSubmit = async (event) => {   event.preventDefault();    if (!stripe) {     // Stripe.js hasn't yet loaded.     // Make sure to disable form submission until Stripe.js has loaded.     return;   }    setLoading(true);    // Trigger form validation and wallet collection   const {error: submitError} = await elements.submit();   if (submitError) {     handleError(submitError);     return;   }    // Create the PaymentIntent and obtain clientSecret   const res = await fetch(\"/create-intent\", {     method: \"POST\",     headers: {\"Content-Type\": \"application/json\"},   });    const {client_secret: clientSecret} = await res.json();    // Use the clientSecret and Elements instance to confirm the setup   const {error} = await stripe.confirmPayment({     elements,     clientSecret,     confirmParams: {       return_url: '[https://example.com/order/123/complete](https://example.com/order/123/complete)',     },     // Uncomment below if you only want redirect for redirect-based payments     // redirect: \"if_required\",   });    if (error) {     handleError(error);   } };`\n\n[](#post-payment)\n\nStripe sends a [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded) event when the payment completes. Use the [Dashboard webhook tool](https://dashboard.stripe.com/webhooks) or follow the [webhook guide](https://docs.stripe.com/webhooks/quickstart) to receive these events and run actions, such as sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes, and malicious clients could manipulate the response. Setting up your integration to listen for asynchronous events is what enables you to accept [different types of payment methods](https://stripe.com/payments/payment-methods-guide) with a single integration.\n\nIn addition to handling the `payment_intent.succeeded` event, we recommend handling these other events when collecting payments with the Payment Element:\n\n| Event | Description | Action |\n| --- | --- | --- |\n| [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.succeeded) | Sent when a customer successfully completes a payment. | Send the customer an order confirmation and fulfill their order. |\n| [payment\\_intent.processing](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.processing) | Sent when a customer successfully initiates a payment, but the payment has yet to complete. This event is most commonly sent when the customer initiates a bank debit. It’s followed by either a `payment_intent.succeeded` or `payment_intent.payment_failed` event in the future. | Send the customer an order confirmation that indicates their payment is pending. For digital goods, you might want to fulfill the order before waiting for payment to complete. |\n| [payment\\_intent.payment\\_failed](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.payment_failed) | Sent when a customer attempts a payment, but the payment fails. | If a payment transitions from `processing` to `payment_failed`, offer the customer another attempt to pay. |\n\n[](#test-the-integration)\n\n| Card number | Scenario | How to test |\n| --- | --- | --- |\n|     | The card payment succeeds and doesn’t require authentication. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card payment requires [authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\"). | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card is declined with a decline code like `insufficient_funds`. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The UnionPay card has a variable length of 13-19 digits. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n\nSee [Testing](https://docs.stripe.com/testing) for additional information to test your integration.",
  "title": "Migrate to the Payment Element | Stripe Documentation",
  "description": "Learn how to migrate your existing integration with individual payment method Elements into a single Element.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/migration",
  "markdown": "# Checkout migration guide | Stripe DocumentationThe Stripe Docs logo\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/migration.4db0b4061fb36d6a43762c3f23ef9c00.png)\n\nThe legacy version of Checkout presented customers with a modal dialog that collected card information, and returned a token or a source to your website. In contrast, the current version of Checkout is a smart payment page hosted by Stripe that creates payments or [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"). It supports Apple Pay, Dynamic [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\"), and [many other features](https://docs.stripe.com/payments/checkout).\n\nThe current version of Checkout provides more flexibility, with support for dynamic line items, [Connect](https://docs.stripe.com/connect \"Connect\"), re-using existing [Customers](https://docs.stripe.com/api/customers \"Customers\"), and advanced subscription features. You can also use the client-only integration if you want to get started more quickly or if you have a simpler product catalog.\n\nTo migrate from the legacy version to the current version, follow the guide that most closely represents your business model. Each guide recommends an integration path along with example code.\n\n*   [Dynamic product catalog and pricing](#api-products)\n    \n    If you have a large product catalog or require support for dynamically generated line items (such as donations or taxes).\n    \n*   [Dynamic subscriptions](#api-subscriptions)\n    \n    If you’re a SaaS provider billing users and need support for advanced features.\n    \n*   [Connect platforms and marketplaces](#connect)\n    \n    If you’re operating a marketplace connecting service providers with customers.\n    \n*   [Saving payment methods for future use](#setup-mode)\n    \n    If you’re operating a business which doesn’t charge the customer until after services rendered.\n    \n*   [Simple product catalog with fixed pricing](#client-products)\n    \n    If you’re selling a few products with pre-determined prices.\n    \n*   [Simple subscriptions](#client-subscriptions)\n    \n    If you’re a SaaS provider with a monthly subscription plan.\n    \n\nAs you follow the relevant migration guide, you can also reference the [conversion table](#parameter-conversion) for a mapping of specific parameters and configuration options between the two versions of Checkout.\n\n## Dynamic product catalog and pricing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re selling products where the amount or line items are determined dynamically (say, with a large product catalog or for donations), see [accepting one-time payments](https://docs.stripe.com/payments/accept-a-payment?integration=checkout).\n\nYou may have used the legacy version of Checkout to create a token or source on the client, and passed it to your server to create a charge. The current version of the Checkout server integration reverses this flow—you create a Session on your server, pass its ID to your client, redirect your customer to Checkout, who then gets redirected back to your application upon success.\n\n### Before ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the legacy version of Checkout, you’d display the dynamic amount and description and collect card information from your customer.\n\n`<form action=\"/purchase\" method=\"POST\">   <script     src=\"[https://checkout.stripe.com/checkout.js](https://checkout.stripe.com/checkout.js)\"     class=\"stripe-button\"     data-key=`\n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n    `data-name=\"Custom t-shirt\"     data-description=\"Your custom designed t-shirt\"     data-amount=\"{{ORDER_AMOUNT}}\"     data-currency=\"usd\">   </script> </form>`\n\nNext, you’d send the resulting token or source to your server and charge it.\n\n`curl https://api.stripe.com/v1/customers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"email\"=\"customer@example.com\" \\   -d \"source\"=\"{{STRIPE_TOKEN}}\" curl https://api.stripe.com/v1/charges \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"description\"=\"Custom t-shirt\" \\   -d \"amount\"=\"{{ORDER_AMOUNT}}\" \\   -d \"currency\"=\"usd\"`\n\n### After ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the current version of Checkout, first create a Checkout Session on your server.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"line_items[][price_data][product]\"=\"{{PRODUCT_ID}}\" \\   -d \"line_items[][price_data][unit_amount]\"=1500 \\   -d \"line_items[][price_data][currency]\"=\"usd\" \\   -d \"line_items[][quantity]\"=1 \\   -d \"mode\"=\"payment\" \\   -d \"success_url\"=\"[https://example.com/success](https://example.com/success)\" \\   -d \"cancel_url\"=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n#### Note\n\nIf you use one of our [Client libraries](https://docs.stripe.com/libraries), upgrade to the latest version of the library in order to use the Checkout Sessions API.\n\nNext, pass the Session ID to your client and redirect your customer to Checkout to complete payment.\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n``); const checkoutButton = document.getElementById('checkout-button');  checkoutButton.addEventListener('click', () => {   stripe.redirectToCheckout({     // Make the id field from the Checkout Session creation API response     // available to this file, so you can provide it as argument here     // instead of the {{CHECKOUT_SESSION_ID}} placeholder.     sessionId: '{{CHECKOUT_SESSION_ID}}'   })   // If `redirectToCheckout` fails due to a browser or network   // error, display the localized error message to your customer   // using `error.message`. });``\n\nThe customer is redirected to the `success_url` after they complete payment.\n\nIf you need to fulfill purchased goods after the payment, refer to [Checkout purchase fulfillment](https://docs.stripe.com/checkout/fulfillment).\n\n## Dynamic subscriptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re providing subscription services that are dynamically determined or require support for other advanced features, see [setting up a subscription](https://docs.stripe.com/billing/subscriptions/build-subscriptions).\n\nYou may have used the legacy version of Checkout to create a token or source on the client, and passed it to your server to create a customer and subscription. The current version of the Checkout server integration reverses this flow—you first create a Session on your server, pass its ID to your client, redirect your customer to Checkout, who then gets redirected back to your application upon success.\n\n### Before ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the legacy version of Checkout, you’d display the subscription information and collect card information from your customer.\n\n`<form action=\"/subscribe\" method=\"POST\">   <script     src=\"[https://checkout.stripe.com/checkout.js](https://checkout.stripe.com/checkout.js)\"     class=\"stripe-button\"     data-key=`\n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n    `data-name=\"Gold Tier\"     data-description=\"Monthly subscription with 30 days trial\"     data-amount=\"2000\"     data-label=\"Subscribe\">   </script> </form>`\n\nNext, you’d send the resulting token or source to your server to create a customer and a subscription.\n\n`curl https://api.stripe.com/v1/customers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"email\"=\"customer@example.com\" \\   -d \"source\"=\"{{STRIPE_TOKEN}}\" curl https://api.stripe.com/v1/subscriptions \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"items[0][price]\"=\"{PRICE_ID}\" \\   -d \"trial_period_days\"=30`\n\n### After ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the current version of Checkout, first create a Checkout Session on your server.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"subscription_data[trial_period_days]\"=30 \\   -d \"line_items[][price]\"=\"{PRICE_ID}\" \\   -d \"line_items[][quantity]\"=1 \\   -d \"mode\"=\"subscription\" \\   -d \"success_url\"=\"[https://example.com/success](https://example.com/success)\" \\   -d \"cancel_url\"=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n#### Note\n\nIf you use one of our [Client libraries](https://docs.stripe.com/libraries), upgrade to the latest version of the library in order to use the Checkout Sessions API.\n\nNext, pass the Session ID to your client and redirect your customer to Checkout to complete payment.\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n``); const checkoutButton = document.getElementById('checkout-button');  checkoutButton.addEventListener('click', () => {   stripe.redirectToCheckout({     // Make the id field from the Checkout Session creation API response     // available to this file, so you can provide it as argument here     // instead of the {{CHECKOUT_SESSION_ID}} placeholder.     sessionId: '{{CHECKOUT_SESSION_ID}}'   })   // If `redirectToCheckout` fails due to a browser or network   // error, display the localized error message to your customer   // using `error.message`. });``\n\nThe customer is redirected to the `success_url` after the customer and subscription have been created.\n\nIf you need to fulfill purchased services after the payment, refer to [Checkout Purchase Fulfillment](https://docs.stripe.com/checkout/fulfillment).\n\nYou can also [update subscription information](https://docs.stripe.com/payments/checkout/subscriptions/update-payment-details) using Checkout.\n\n## Connect platforms and marketplaces ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re operating a Connect platform or marketplace and create payments involving connected accounts, consider using the current version of the Checkout server integration.\n\nThe following example demonstrates using the Checkout Sessions API to process a direct charge. Follow the guide for details on how to create [destination charges](https://docs.stripe.com/connect/destination-charges?platform=web&ui=stripe-hosted).\n\n### Before ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the legacy version of Checkout, you would collect card information from your customer on the client.\n\n`<form action=\"/purchase\" method=\"POST\">   <script     src=\"[https://checkout.stripe.com/checkout.js](https://checkout.stripe.com/checkout.js)\"     class=\"stripe-button\"     data-key=`\n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n    `data-name=\"Food Marketplace\"     data-description=\"10 cucumbers from Roger's Farm\"     data-amount=\"2000\">   </script> </form>`\n\nNext, you’d send the resulting token or source to your server and charge it on behalf of the connected account.\n\n`curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"source\"=\"{{TOKEN_ID}}\" \\   -d \"description\"=\"10 cucumbers from Roger\\\"s Farm\" \\   -d \"amount\"=2000 \\   -d \"currency\"=\"usd\" \\   -d \"application_fee_amount\"=200 \\   -H \"Stripe-Account: {{CONNECTED_STRIPE_ACCOUNT_ID}}\"`\n\n### After ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the current version of Checkout, first create a Checkout Session on your server on behalf of the connected account.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"line_items[][price]\"=\"{{PRICE_ID}}\" \\   -d \"line_items[][quantity]\"=1 \\   -d \"payment_intent_data[application_fee_amount]\"=200 \\   -d \"mode\"=\"payment\" \\   -d \"success_url\"=\"[https://example.com/success](https://example.com/success)\" \\   -d \"cancel_url\"=\"[https://example.com/cancel](https://example.com/cancel)\" \\   -H \"Stripe-Account: {{CONNECTED_STRIPE_ACCOUNT_ID}}\"`\n\n#### Note\n\nIf you use one of our [Client libraries](https://docs.stripe.com/libraries), upgrade to the latest version of the library to use the Checkout Sessions API.\n\nNext, pass the Session ID to your client and redirect your customer to Checkout to complete payment. Make sure to provide the connected account’s ID when initializing Stripe.js.\n\n`// Initialize Stripe.js with the same connected account ID used when creating // the Checkout Session. const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n``, {   stripeAccount:   '{{CONNECTED_ACCOUNT_ID}}'  }); const checkoutButton = document.getElementById('checkout-button');  checkoutButton.addEventListener('click', () => {   stripe.redirectToCheckout({     // Make the id field from the Checkout Session creation API response     // available to this file, so you can provide it as argument here     // instead of the {{CHECKOUT_SESSION_ID}} placeholder.     sessionId: '{{CHECKOUT_SESSION_ID}}'   })   // If `redirectToCheckout` fails due to a browser or network   // error, display the localized error message to your customer   // using `error.message`. });``\n\nThe customer is redirected to the `success_url` after they complete payment.\n\nIf you need to fulfill purchased goods or services after the payment, refer to [Checkout Purchase Fulfillment](https://docs.stripe.com/checkout/fulfillment).\n\n## Saving payment methods for future use ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re providing services that don’t charge your customers immediately, see [setting up future payments](https://docs.stripe.com/payments/save-and-reuse?platform=checkout).\n\nYou may have used the legacy version of Checkout to create a token or source on the client, and passed it to your server to save for later use. The current version of the Checkout server integration reverses this flow—you first create a Session on your server, pass its ID to your client, redirect your customer to Checkout, who then gets redirected back to your application upon success.\n\n### Before ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the legacy version of Checkout, you’d display the charge information and collect card information from your customer.\n\n`<form action=\"/subscribe\" method=\"POST\">   <script     src=\"[https://checkout.stripe.com/checkout.js](https://checkout.stripe.com/checkout.js)\"     class=\"stripe-button\"     data-key=`\n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n    `data-name=\"Cleaning Service\"     data-description=\"Charged after your home is spotless\"     data-amount=\"2000\">   </script> </form>`\n\nNext, you would send the resulting token or source to your server to eventually create a charge.\n\n`curl https://api.stripe.com/v1/customers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"email\"=\"customer@example.com\" \\   -d \"source\"=\"{{STRIPE_TOKEN}}\" curl https://api.stripe.com/v1/charges \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"description\"=\"Cleaning service\" \\   -d \"amount\"=\"{{ORDER_AMOUNT}}\" \\   -d \"currency\"=\"usd\"`\n\n### After ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the current version of Checkout, first create a Checkout Session on your server using [setup mode](https://docs.stripe.com/payments/save-and-reuse?platform=checkout).\n\n#### Note\n\nIf you use one of our [Client libraries](https://docs.stripe.com/libraries), upgrade to the latest version of the library to use the Checkout Sessions API.\n\nNext, pass the Session ID to your client and redirect your customer to Checkout to gather payment method details.\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n``); const checkoutButton = document.getElementById('checkout-button');  checkoutButton.addEventListener('click', () => {   stripe.redirectToCheckout({     // Make the id field from the Checkout Session creation API response     // available to this file, so you can provide it as argument here     // instead of the {{CHECKOUT_SESSION_ID}} placeholder.     sessionId: '{{CHECKOUT_SESSION_ID}}'   })   // If `redirectToCheckout` fails due to a browser or network   // error, display the localized error message to your customer   // using `error.message`. });``\n\nThe customer is redirected to the `success_url` after they complete the flow.\n\nFrom there, you can [retrieve the Setup Intent](https://docs.stripe.com/payments/save-and-reuse#retrieve-checkout-session) from the Checkout flow and use it to prepare your transaction.\n\n## Simple product catalog with fixed pricing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re selling products with fixed pricing (such as t-shirts or e-books), see the guide on [one-time payments](https://docs.stripe.com/payments/checkout/client) to learn how to generate a code snippet to add to your website.\n\nYou may have used the legacy version of Checkout to create a token or source on the client, and passed it to your server to create a charge. The current version of Checkout automatically creates the payment for you, and no server integration is required.\n\n### Client-side code ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n`<form action=\"/pay\" method=\"POST\">   <script     src=\"[https://checkout.stripe.com/checkout.js](https://checkout.stripe.com/checkout.js)\"     class=\"stripe-button\"     data-key=`\n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n    `data-name=\"T-shirt\"     data-description=\"Comfortable cotton t-shirt\"     data-amount=\"500\"     data-currency=\"usd\">   </script> </form>`\n\n`var stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  var checkoutButton = document.querySelector('#checkout-button'); checkoutButton.addEventListener('click', function () {   stripe.redirectToCheckout({     lineItems: [{       // Define the product and price in the Dashboard first, and use the price       // ID in your client-side code.       price: '{PRICE_ID}',       quantity: 1     }],     mode: 'payment',     successUrl: '[https://www.example.com/success](https://www.example.com/success)',     cancelUrl: '[https://www.example.com/cancel](https://www.example.com/cancel)'   }); });`\n\n### Server-side code ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n`curl https://api.stripe.com/v1/customers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"email\"=\"{{STRIPE_EMAIL}}\" \\   -d \"source\"=\"{{STRIPE_TOKEN}}\" curl https://api.stripe.com/v1/charges \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"description\"=\"T-shirt\" \\   -d \"amount\"=500 \\   -d \"currency\"=\"usd\"`\n\nThe current version of Checkout automatically creates payments for you. After your customer pays, they’re redirected to the [successUrl](https://docs.stripe.com/js/deprecated/redirect_to_checkout#stripe_checkout_redirect_to_checkout-options-successUrl) configured on the client. Then learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment) after the payment.\n\nThe [conversion table](#parameter-conversion) below provides a mapping of configuration options between the two versions of Checkout. For a full list of configuration options for the current version, see the [`redirectToCheckout`](https://docs.stripe.com/js#stripe-redirect-to-checkout) reference.\n\n## Simple subscriptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re providing a simple subscription service (such as monthly access to software), see the guide on [subscriptions](https://docs.stripe.com/billing/quickstart) to learn how to create a plan in the Dashboard and generate a code snippet to add to your website.\n\nYou may have used the legacy version of Checkout to create a token or source on the client, and passed it to your server to create a customer and a subscription. The current version of Checkout, however, automatically creates both the customer and the subscription for you, and no server integration is required.\n\n### Client-side code ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n`<form action=\"/subscribe\" method=\"POST\">   <script     src=\"[https://checkout.stripe.com/checkout.js](https://checkout.stripe.com/checkout.js)\"     class=\"stripe-button\"     data-key=`\n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n    `data-name=\"Gold Tier\"     data-description=\"Monthly subscription\"     data-amount=\"2000\"     data-currency=\"usd\"     data-label=\"Subscribe\">   </script> </form>`\n\n`var stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n``);  var checkoutButton = document.querySelector('#checkout-button'); checkoutButton.addEventListener('click', function () {   stripe.redirectToCheckout({     lineItems: [{       // Define the product and price in the Dashboard first, and use the price       // ID in your client-side code. You may also pass a SKU id into the `price`       // field       price: '{PRICE_ID}',       quantity: 1     }],     mode: 'subscription',     successUrl: '[https://www.example.com/success](https://www.example.com/success)',     cancelUrl: '[https://www.example.com/cancel](https://www.example.com/cancel)'   }); });``\n\n### Server-side code ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n`curl https://api.stripe.com/v1/customers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"email\"=\"{{STRIPE_EMAIL}}\" \\   -d \"source\"=\"{{STRIPE_TOKEN}}\" curl https://api.stripe.com/v1/subscriptions \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"items[][price]\"=\"{PRICE_ID}\" \\   -d \"items[][quantity]\"=1`\n\nThe current version of Checkout automatically creates subscriptions for you. After the subscription is created, your customer is redirected to the [successUrl](https://docs.stripe.com/js/deprecated/redirect_to_checkout#stripe_checkout_redirect_to_checkout-options-successUrl) configured on the client. Then learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment) after the payment.\n\nThe [conversion table](#parameter-conversion) below provides a mapping of configuration options between the two versions of Checkout. For a full list of configuration options for the current version, see the [`redirectToCheckout`](https://docs.stripe.com/js#stripe-redirect-to-checkout) reference.\n\n## Parameter conversion ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe current version of Checkout supports most of the functionality of the legacy version of Checkout. However, the two versions do not share the same API. The table below maps parameters and configuration options between the legacy version and the current version.\n\nFor a full list of configuration options accepted by the current version of Checkout, see the [Stripe.js reference](https://docs.stripe.com/js#stripe-redirect-to-checkout) and the [API reference](https://docs.stripe.com/api/checkout/sessions) for Checkout Sessions.\n\n| Legacy version | Current version | Integration tips |\n| --- | --- | --- |\n| `allowRememberMe` | *   Not supported | The current version of Checkout doesn’t support Remember Me. To reuse existing customers, we recommend specifying the `customer` parameter when creating a [Checkout Session](https://docs.stripe.com/api/checkout/sessions/create). |\n| `amount` | *   Automatically calculated as the sum of amounts over all `line_items`.<br>*   Client-only integration: Automatically calculated as the sum of amounts over all prices. | The total amount is the sum of the line items you pass to Checkout. |\n| `billingAddress` | *   `Session.billing_address_collection`<br>*   Client-only integration: `billingAddressCollection` | Checkout automatically collects the billing address when required for fraud-prevention or regulatory purposes. Set this parameter to `required` to always collect the billing address. |\n| `billingAddress` | *   `Session.billing_address_collection`<br>*   Client-only integration: `billingAddressCollection` | Checkout automatically collects the billing address when required for fraud-prevention or regulatory purposes. Set this parameter to `required` to always collect the billing address. |\n| `closed` | *   `cancelUrl` | When a customer wants to close Checkout, they either close the browser tab or navigate to the `cancelUrl`. |\n| `currency` | *   `Session.currency`<br>*   Client-only integration: The price’s `currency` |     |\n| `description` | *   `Session.line_items.description` or `product.description`<br>*   Client-only integration: The price’s `product.description` | If you specify a price, Checkout displays an automatically computed description of how often payments occur. If you specify `Session.line_items`, Checkout displays the `name` for each line item. |\n| `email` | *   `Session.customer_email`<br>*   Client-only integration: `customerEmail` | If you already know your customer’s email, specify it here so they do not need to enter it again. |\n| `image` | *   **Business branding** Upload your business logo or icon in the Dashboard.<br>*   **Product images** Specify images for each line item with`product.images` | Checkout uses specific images for your business’s [branding](https://docs.stripe.com/payments/checkout/customization#branding) and for the products you’re selling. Checkout displays your business logo by default and falls back to your business icon alongside your business name. |\n| `key` | *   No longer a parameter passed to Checkout |\n| `locale` | *   `Session.locale`<br>*   Client-only integration: `locale` | You can specify a supported [locale](https://docs.stripe.com/payments/checkout/customization#localization) when creating a Checkout Session. |\n| `name` | *   `product.name` for prices specified in `Session.line_items`<br>*   Client-only integration: The `product.name` for the price | If you specify a price, Checkout displays the name of the product that belongs to the price. If you specify `Session.line_items`, Checkout displays the `name` for each line item. |\n| `panelLabel` | *   `submit_type` | Checkout automatically customizes the button text depending on the items you’re selling. For one-time payments, use [submit\\_type](https://docs.stripe.com/payments/checkout/customization#submit-button) to customize the button text. |\n| `shippingAddress` | *   `session.shipping_address_collection` | [Collect shipping address information](https://docs.stripe.com/payments/collect-addresses?payment-ui=checkout) by passing an array of `allowed_countries` that you want to ship to. |\n| `token` or `source` | *   `successUrl` | There is no longer a callback in JavaScript when the payment completes. As your customer is paying on a different page, set the `successUrl` to redirect your customer after they’ve completed payment. |\n| `zipCode` | *   Automatically collected by Checkout | Checkout automatically collects the postal code when required for fraud-prevention or regulatory purposes. |\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Add more payment methods](https://docs.stripe.com/payments/dashboard-payment-methods#view-dash)\n*   [Add discounts](https://docs.stripe.com/payments/checkout/discounts)\n*   [Collect taxes](https://docs.stripe.com/payments/checkout/taxes)\n*   [Collect tax IDs](https://docs.stripe.com/tax/checkout/tax-ids)\n*   [Add shipping](https://docs.stripe.com/payments/collect-addresses?payment-ui=checkout)\n*   [Customize your branding](https://docs.stripe.com/payments/checkout/customization)\n*   [Customize your success page](https://docs.stripe.com/payments/checkout/custom-success-page)",
  "title": "Checkout migration guide | Stripe Documentation",
  "description": "Learn how to migrate from the legacy version of Checkout to the current version.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/amazon-pay",
  "markdown": "# Amazon Pay payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to accept payments with Amazon Pay.\n\n[Amazon Pay](https://pay.amazon.com/) is a wallet payment method that lets your customers check out the same way as on Amazon.com.\n\nWhen customers select Amazon Pay as their payment method, Stripe redirects them to Amazon’s website, where they can check out using the shipping and payment information stored in their Amazon account. After completing the payment, Amazon redirects them back to your website.\n\n*   **Customer locations**\n    \n    Worldwide\n    \n*   **Presentment currency**\n    \n    USD\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Wallet\n    \n*   **Recurring payments**\n    \n    Yes\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    Yes\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Amazon Pay and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Amazon Pay. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Amazon Pay from the Dashboard:\n\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf your integration requires manually listing payment methods, learn how to [manually configure Amazon Pay as a payment](https://docs.stripe.com/payments/amazon-pay/accept-a-payment).\n\n[](#refunds)\n\nAmazon Pay supports partial or full refunds for up to 90 days after the original purchase, and processes them asynchronously. After Stripe initiates a refund, Amazon Pay issues the refund to the customer’s original form of payment. We notify you of the final refund status using the `charge.refund.updated` [webhook](https://docs.stripe.com/webhooks \"webhook\") event. When a refund succeeds, the [Refund](https://docs.stripe.com/api/refunds/object) object’s status transitions to `succeeded`. In the rare instance that a refund fails, the Refund object’s status transitions to `failed` and we return the amount to your Stripe balance. You then need to arrange an alternative way to provide your customer with a refund.\n\n[](#disputed-payments)\n\nCustomers must authenticate Amazon Pay payments by logging into their Amazon account. This requirement helps reduce the risk of fraud or unrecognized payments.\n\nCustomers have up to 240 calendar days from the date of purchase to file a dispute. The dispute process works like this:\n\n*   After the customer initiates a dispute, Stripe notifies you through email, the Stripe Dashboard, and an API `charge.dispute.created` event (if your integration is set up to receive [webhooks](https://docs.stripe.com/webhooks)).\n    \n*   Stripe holds back the disputed amount from your balance until Amazon resolves the dispute.\n    \n*   Stripe requests that you upload compelling evidence that you fulfilled the purchase order [using the Stripe Dashboard](https://docs.stripe.com/disputes/responding#respond). This evidence can include:\n    \n    *   A received return confirmation (for shipped goods returned from the customer to you)\n    *   The tracking ID\n    *   The shipping date\n    *   A record of purchase for intangible goods, such as IP address or email receipt\n    *   A record of purchase for services or physical goods, such as phone number or proof of receipt\n*   This information helps Amazon determine if a dispute is valid or if it should be rejected. Make sure the evidence you provide contains as much detail as possible from what the customer provided at checkout. You must submit the requested information within 10 calendar days. Amazon Pay makes a decision within 90 calendar days of evidence submission. If Amazon resolves the dispute with you winning, Stripe returns the disputed amount to your Stripe balance. If Amazon rules in favor of the customer, the balance charge becomes permanent.\n    \n\n#### Note\n\n## Supported currencies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can create Amazon Pay payments in the currencies that map to your country. The default local currency for Amazon Pay is `usd` and customers also see their purchase amount in `usd`.\n\n| Currency | Country |\n| --- | --- |\n| `usd` | United States |\n\n[](#available-payment-methods)\n\nUse Amazon Pay to store card credentials. They support the following alternative payment methods:\n\n| Country | Payment methods |\n| --- | --- |\n| United States | Amazon Private Label Credit Card, Amazon Co-branded Credit Card Equal Monthly Payments, Citi Afford, Shop with Points, ACH Direct Debit, Credit Option, Credit Line, Affirm Interest Bearing Installments Product, and Monthly Invoice with Amazon. |",
  "title": "Amazon Pay payments | Stripe Documentation",
  "description": "Learn how to accept payments with Amazon Pay.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/apple-pay",
  "markdown": "# Apple Pay | Stripe DocumentationThe Stripe Docs logo\n\nApple Pay is compatible with most Stripe products and features. Stripe users can accept [Apple Pay](https://stripe.com/apple-pay) in iOS applications in iOS 9 and above, and on the web in Safari starting with iOS 10 or macOS Sierra. There are no additional fees to process Apple Pay payments, and [pricing](https://stripe.com/pricing) is the same as for other card transactions.\n\nApple Pay is available to cardholders at participating banks in supported countries. For more information, refer to Apple’s [participating banks](https://support.apple.com/en-us/ht204916) documentation.\n\nFor sales of physical goods, services, and certain other things, your app can accept Apple Pay or any other Stripe-supported payment method. Those payments are processed through Stripe, and you only need to pay Stripe’s [processing fees](https://stripe.com/pricing). However, sales of digital products, content, and certain other things must use Apple’s [in-app purchases](https://developer.apple.com/in-app-purchase). Those payments are processed by Apple and are subject to their transaction fees.\n\nStripe offers a variety of methods to add Apple Pay as a payment method. For integration details, select the method you prefer:\n\nWith the [Stripe iOS SDK](https://github.com/stripe/stripe-ios), you can accept both Apple Pay and traditional credit card payments. Before starting, you need to be enrolled in the [Apple Developer Program](https://developer.apple.com/programs/). Next, follow these steps:\n\n1.  [Set up Stripe](#setup)\n2.  [Register for an Apple Merchant ID](#merchantid)\n3.  [Create a new Apple Pay certificate](#csr)\n4.  [Integrate with Xcode](#xcode-pay)\n5.  [Check if Apple Pay is supported](#check-if-apple-pay-supported)\n6.  [Create the payment request](#create-payment-request)\n7.  [Present the payment sheet](#present-payment-sheet)\n8.  [Submit the payment to Stripe](#handle-payment)\n\n[](#setup)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\n### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis integration requires endpoints on your server that talk to the Stripe API. Use the official libraries for access to the Stripe API from your server:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Stripe iOS SDK](https://github.com/stripe/stripe-ios) is open source, [fully documented](https://stripe.dev/stripe-ios/index.html), and compatible with apps supporting iOS 13 or above.\n\nTo install the SDK, follow these steps:\n\n1.  In Xcode, select **File** > **Add Packages…** and enter `https://github.com/stripe/stripe-ios-spm` as the repository URL.\n2.  Select the latest version number from our [releases page](https://github.com/stripe/stripe-ios/releases).\n3.  Add the **StripeApplePay** product to the [target of your app](https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app).\n\nConfigure the SDK with your Stripe [publishable key](https://dashboard.stripe.com/test/apikeys) on app start. This enables your app to make requests to the Stripe API.\n\n`import UIKit import StripeApplePay  @main class AppDelegate: UIResponder, UIApplicationDelegate {      func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {         StripeAPI.defaultPublishableKey =` \n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n        `// do any other necessary launch configuration         return true     } }`\n\n#### Note\n\nUse your [test mode](https://docs.stripe.com/keys#obtain-api-keys) keys while you test and develop, and your [live mode](https://docs.stripe.com/keys#test-live-modes) keys when you publish your app.\n\n[](#merchantid)\n\nObtain an Apple Merchant ID by [registering for a new identifier](https://developer.apple.com/account/resources/identifiers/add/merchant) on the Apple Developer website.\n\nFill out the form with a description and identifier. Your description is for your own records and you can modify it in the future. Stripe recommends using the name of your app as the identifier (for example, `merchant.com.{{YOUR_APP_NAME}}`).\n\n[](#csr)\n\nCreate a certificate for your app to encrypt payment data.\n\nGo to the [iOS Certificate Settings](https://dashboard.stripe.com/settings/ios_certificates) in the Dashboard, click **Add new application**, and follow the guide.\n\nDownload a Certificate Signing Request (CSR) file to get a secure certificate from Apple that allows you to use Apple Pay.\n\nOne CSR file must be used to issue exactly one certificate. If you switch your Apple Merchant ID, you must go to the [iOS Certificate Settings](https://dashboard.stripe.com/settings/ios_certificates) in the Dashboard to obtain a new CSR and certificate.\n\n[](#xcode-pay)\n\nAdd the Apple Pay capability to your app. In Xcode, open your project settings, click the **Signing & Capabilities** tab, and add the **Apple Pay** capability. You might be prompted to log in to your developer account at this point. Select the merchant ID you created earlier, and your app is ready to accept Apple Pay.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/xcode.a701d4c1922d19985e9c614a6f105bf1.png)\n\nEnable the Apple Pay capability in Xcode\n\n[](#check-if-apple-pay-supported)\n\n#### Note\n\nBefore displaying Apple Pay as a payment option in your app, determine if the user’s device supports Apple Pay and that they have a card added to their wallet:\n\nCheckoutViewController.swift\n\n`import StripeApplePay import PassKit  class CheckoutViewController: UIViewController, ApplePayContextDelegate {     let applePayButton: PKPaymentButton = PKPaymentButton(paymentButtonType: .plain, paymentButtonStyle: .black)      override func viewDidLoad() {         super.viewDidLoad()         // Only offer Apple Pay if the customer can pay with it         applePayButton.isHidden = !StripeAPI.deviceSupportsApplePay()         applePayButton.addTarget(self, action: #selector(handleApplePayButtonTapped), for: .touchUpInside)     }      // ...continued in next step }`\n\n[](#create-payment-request)\n\nWhen the user taps the **Apple Pay** button, call [StripeAPI paymentRequestWithMerchantIdentifier:country:currency:](https://stripe.dev/stripe-ios/stripe-payments/Classes/StripeAPI.html#/c:@M@StripeCore@objc(cs)StripeAPI(cm)paymentRequestWithMerchantIdentifier:country:currency:) to create a [PKPaymentRequest](https://developer.apple.com/documentation/passkit/pkpaymentrequest).\n\nThen, configure the `PKPaymentRequest` to display your business name and the total. You can also collect information like billing details or shipping information.\n\nSee [Apple’s documentation](https://developer.apple.com/design/human-interface-guidelines/apple-pay/overview/checkout-and-payment/#customize-the-payment-sheet) for full guidance on how to customize the payment request.\n\nCheckoutViewController.swift\n\n`func handleApplePayButtonTapped() {     let merchantIdentifier = \"merchant.com.your_app_name\"     let paymentRequest = StripeAPI.paymentRequest(withMerchantIdentifier: merchantIdentifier, country: \"US\", currency: \"USD\")      // Configure the line items on the payment request     paymentRequest.paymentSummaryItems = [         // The final line should represent your company;         // it'll be prepended with the word \"Pay\" (that is, \"Pay iHats, Inc $50\")         PKPaymentSummaryItem(label: \"iHats, Inc\", amount: 50.00),     ]     // ...continued in next step }`\n\n[](#present-payment-sheet)\n\nCreate an [STPApplePayContext](https://stripe.dev/stripe-ios/stripe-applepay/Classes/STPApplePayContext.html) instance with the `PKPaymentRequest` and use it to present the Apple Pay sheet:\n\nCheckoutViewController.swift\n\n`func handleApplePayButtonTapped() {     // ...continued from previous step      // Initialize an STPApplePayContext instance     if let applePayContext = STPApplePayContext(paymentRequest: paymentRequest, delegate: self) {         // Present Apple Pay payment sheet         applePayContext.presentApplePay(on: self)     } else {         // There is a problem with your Apple Pay configuration     } }`\n\n[\n\n## Submit the payment to Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-payment)\n\n### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nMake an endpoint that creates a PaymentIntent with an [amount](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount) and [currency](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-currency). Always decide how much to charge on the server side, a trusted environment, as opposed to the client side. This prevents malicious customers from choosing their own prices.\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\"`\n\n### Client-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nImplement `applePayContext(_:didCreatePaymentMethod:completion:)` to call the completion block with the PaymentIntent client secret retrieved from the endpoint above.\n\nAfter you call the completion block, `STPApplePayContext` completes the payment, dismisses the Apple Pay sheet, and calls `applePayContext(_:didCompleteWithStatus:error:)` with the status of the payment. Implement this method to show a receipt to your customer.\n\nCheckoutViewController.swift\n\n`extension CheckoutViewController {     func applePayContext(_ context: STPApplePayContext, didCreatePaymentMethod paymentMethod: StripeAPI.PaymentMethod, paymentInformation: PKPayment, completion: @escaping STPIntentClientSecretCompletionBlock) {         let clientSecret = ... // Retrieve the PaymentIntent client secret from your backend (see Server-side step above)         // Call the completion block with the client secret or an error         completion(clientSecret, error)     }      func applePayContext(_ context: STPApplePayContext, didCompleteWith status: STPApplePayContext.PaymentStatus, error: Error?) {           switch status {         case .success:             // Payment succeeded, show a receipt view             break         case .error:             // Payment failed, show the error             break         case .userCancellation:             // User canceled the payment             break         @unknown default:             fatalError()         }     } }`\n\nFinally, [handle post-payment events](https://docs.stripe.com/payments/accept-a-payment?platform=ios&mobile-ui=payment-element#ios-post-payment) to do things like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\n### Troubleshooting ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re seeing errors from the Stripe API when attempting to create tokens, you most likely have a problem with your Apple Pay Certificate. You’ll need to generate a new certificate and upload it to Stripe, as described on this page. Make sure you use a CSR obtained from your Dashboard and not one you generated yourself. Xcode often incorrectly caches old certificates, so in addition to generating a new certificate, Stripe recommends creating a new Apple Merchant ID as well.\n\nIf you receive the error:\n\n> You haven’t added your Apple merchant account to Stripe\n\nit’s likely your app is sending data encrypted with a previous (non-Stripe) CSR/Certificate. Make sure any certificates generated by non-Stripe CSRs are revoked under your Apple Merchant ID. If this doesn’t resolve the issue, delete the merchant ID in your Apple account and re-create it. Then, create a new certificate based on the same (Stripe-provided) CSR that was previously used. You don’t need to upload this new certificate to Stripe. When finished, toggle the Apple Pay Credentials off and on in your app to ensure they refresh properly.\n\n## App Clips![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `StripeApplePay` module is a lightweight Stripe SDK optimized for use in an [App Clip](https://developer.apple.com/app-clips/). Follow [the above steps](https://docs.stripe.com/apple-pay?platform=ios#accept) to add the `StripeApplePay` module to your App Clip’s target.\n\n#### Note\n\nThe `StripeApplePay` module is only supported in Swift. Objective-C users must import `STPApplePayContext` from the `Stripe` module.\n\n### Migrating from STPApplePayContext![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re an existing user of `STPApplePayContext` and wish to switch to the lightweight Apple Pay SDK, follow these steps:\n\n1.  In your App Clip target’s dependencies, replace the `Stripe` module with the `StripeApplePay` module.\n2.  In your code, replace `import Stripe` with `import StripeApplePay`.\n3.  Replace your usage of `STPApplePayContextDelegate` with the new `ApplePayContextDelegate` protocol.\n4.  Change your implementation of `applePayContext(_:didCreatePaymentMethod:completion:)` to accept a `StripeAPI.PaymentMethod`.\n5.  Change your implementation of `applePayContext(_:didCompleteWith:error:)` to accept an `STPApplePayContext.PaymentStatus`.\n\n`import Stripe  class CheckoutViewController: UIViewController, STPApplePayContextDelegate {     func applePayContext(_ context: STPApplePayContext,       didCreatePaymentMethod paymentMethod: STPPaymentMethod,       paymentInformation: PKPayment,       completion: @escaping STPIntentClientSecretCompletionBlock) {         // ...     }      func applePayContext(_ context: STPApplePayContext,       didCompleteWith status: STPPaymentStatus,       error: Error?) {         // ...     } }`\n\n`import StripeApplePay  class CheckoutViewController: UIViewController, ApplePayContextDelegate {     func applePayContext(_ context: STPApplePayContext,       didCreatePaymentMethod paymentMethod: StripeAPI.PaymentMethod,       paymentInformation: PKPayment,       completion: @escaping STPIntentClientSecretCompletionBlock) {         // ...     }      func applePayContext(_ context: STPApplePayContext,       didCompleteWith status: STPApplePayContext.PaymentStatus,       error: Error?) {         // ...     } }`\n\n## Recurring payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn iOS 16 or later, you can adopt [merchant tokens](https://developer.apple.com/apple-pay/merchant-tokens/) by setting the `recurringPaymentRequest` or `automaticReloadPaymentRequest` properties on `PKPaymentRequest`.\n\nCheckoutViewController.swift\n\n`extension CheckoutViewController {   func handleApplePayButtonTapped() {     let request = StripeAPI.paymentRequest(withMerchantIdentifier: merchantIdentifier, country: \"US\", currency: \"USD\")      let billing = PKRecurringPaymentSummaryItem(label: \"My Subscription\", amount: NSDecimalNumber(string: \"59.99\"))     billing.startDate = Date()     billing.endDate = Date().addingTimeInterval(60 * 60 * 24 * 365)     billing.intervalUnit = .month      request.recurringPaymentRequest = PKRecurringPaymentRequest(paymentDescription: \"Recurring\",                                                                 regularBilling: billing,                                                                 managementURL: URL(string: \"[https://my-backend.example.com/customer-portal](https://my-backend.example.com/customer-portal)\")!)     request.recurringPaymentRequest?.billingAgreement = \"You'll be billed $59.99 every month for the next 12 months. To cancel at any time, go to Account and click 'Cancel Membership.'\"     request.paymentSummaryItems = [billing]   } }`\n\nTo learn more about how to use recurring payments with Apple Pay, see [Apple’s PassKit documentation](https://developer.apple.com/documentation/passkit/pkpaymentrequest).\n\n## Order tracking![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo adopt [order tracking](https://developer.apple.com/design/human-interface-guidelines/technologies/wallet/designing-order-tracking) in iOS 16 or later, implement the [`applePayContext(context:willCompleteWithResult:handler:)`](https://github.com/stripe/stripe-ios/blob/22.8.0/StripeApplePay/StripeApplePay/Source/ApplePayContext/STPApplePayContext.swift#L38) function in your `ApplePayContextDelegate`. Stripe calls your implementation after the payment is complete, but before iOS dismisses the Apple Pay sheet.\n\nIn your implementation:\n\n1.  Fetch the order details from your server for the completed order.\n2.  Add these details to the provided [`PKPaymentAuthorizationResult`](https://developer.apple.com/documentation/passkit/pkpaymentauthorizationresult).\n3.  Call the provided completion handler on the main queue.\n\nTo learn more about order tracking, see [Apple’s Wallet Orders documentation](https://developer.apple.com/documentation/walletorders).\n\nCheckoutViewController.swift\n\n`extension CheckoutViewController {     func applePayContext(_ context: STPApplePayContext, willCompleteWithResult authorizationResult: PKPaymentAuthorizationResult, handler: @escaping (PKPaymentAuthorizationResult) -> Void) {         // Fetch the order details from your service         MyAPIClient.shared.fetchOrderDetails(orderID: myOrderID) { myOrderDetails             authorizationResult.orderDetails = PKPaymentOrderDetails(                 orderTypeIdentifier: myOrderDetails.orderTypeIdentifier, // \"com.myapp.order\"                 orderIdentifier: myOrderDetails.orderIdentifier, // \"ABC123-AAAA-1111\"                 webServiceURL: myOrderDetails.webServiceURL, // \"[https://my-backend.example.com/apple-order-tracking-backend](https://my-backend.example.com/apple-order-tracking-backend)\"                 authenticationToken: myOrderDetails.authenticationToken) // \"abc123\"             // Call the handler block on the main queue with your modified PKPaymentAuthorizationResult             handler(authorizationResult)         }     } }`\n\nStripe test card information can’t be saved to Wallet in iOS. Instead, Stripe recognizes when you’re using your test [API keys](https://docs.stripe.com/keys) and returns a successful test card token for you to use. This allows you to make test payments using a live card without it being charged.",
  "title": "Apple Pay | Stripe Documentation",
  "description": "Allow customers to securely make payments using Apple Pay on their iPhone, iPad, or Apple Watch.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/client",
  "markdown": "# One-time payments with Checkout | Stripe DocumentationThe Stripe Docs logo\n\n## One-time payments with CheckoutClient-only integration\n\n## Learn how to accept one-time card payments with just a few lines of code.\n\nWith the client-only integration, you define your products directly in the Stripe Dashboard and reference them by ID on the client side. This approach makes it possible to integrate Checkout into your website without any server-side code.\n\n#### Warning\n\n[\n\n## Enable Checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#enable-checkout)\n\nTo begin using Checkout, log into the Stripe Dashboard and navigate to the [Checkout settings](https://dashboard.stripe.com/settings/checkout). From here you can enable the client-only integration and customize the look and feel of your checkout page.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout-disabled.ec8f13a264bf2e39b83378dd40e547e0.png)\n\n[\n\n## Create products and prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-products-and-prices)\n\nTo use Checkout, you first need to create a [Product](https://docs.stripe.com/api/products \"Products\") and a [Price](https://docs.stripe.com/api/prices \"Prices\"). Different physical goods or levels of service should be represented by products. Each product’s pricing is represented by one or more prices.\n\nFor example, you can create a T-shirt _product_ that has 2 _prices_ for different currencies: 20 USD and 15 EUR. This allows you to change and add prices without needing to change the details of your underlying products. You can either create a product and price [through the API](https://docs.stripe.com/api/prices) or through [the Stripe Dashboard](https://dashboard.stripe.com/products).\n\n#### Note\n\nProducts created in test mode can be copied to live mode so that you don’t need to re-create them. In the Product detail view in the Dashboard, click **Copy to live mode** in the upper right corner. You can only do this once for each product created in test mode. Subsequent updates to the test product are not reflected for the live product.\n\nMake sure you are in test mode by toggling the **View test data** button at the bottom of the Stripe Dashboard. Next, define the items you want to sell. To create a new product and price:\n\n*   Navigate to the [Products](https://dashboard.stripe.com/test/products) section in the Dashboard\n*   Click **Add product**\n*   Select **One time** when setting the price\n\nThe product name, description, and image that you supply are displayed to customers in Checkout.\n\n[\n\n## Redirect to Checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#generate-checkout-button)\n\nTo use Checkout on your website, you must add a snippet of code that includes the desired price. You can use the Dashboard to generate the necessary code, or you can write it yourself.\n\nIn the [Products section](https://dashboard.stripe.com/products) of the Dashboard, select the product that you want to sell.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/price-listing.ae7c9fe11492c36509feb1e6b2364228.png)\n\nIn the product detail view, click the **Get Checkout code snippet** selection in the overflow menu next to a price to generate a code snippet that you can add to your website.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/snippet-generator.de62343b5dc9ef77465daf373f6cba9f.png)\n\nCopy and paste the snippet into the body of a web page. The snippet adds a button to the page that, when clicked, redirects the customer to Checkout. You can include multiple checkout buttons on the same page.\n\nWhen your customer successfully completes their payment, they’re redirected to the success URL that you specified when configuring the code snippet. Typically, this is a page on your website that informs the customer that their payment succeeded.\n\nWhen your customer clicks on your logo in a Checkout session without completing a payment, Checkout redirects them back to your website by navigating to the cancel URL you specified when configuring the code snippet. Typically, this is the page on your website that the customer viewed prior to redirecting to Checkout.\n\nBefore going live, make sure to [configure your domains list](https://dashboard.stripe.com/account/checkout/settings) in the Dashboard to match the success and cancel URLs.\n\n#### Caution\n\nDon’t rely on the redirect to the `success_url` alone for detecting payment initiation, as:\n\n*   Malicious users could directly access the `success_url` without paying and gain access to your goods or services.\n*   Customers may not always reach the `success_url` after a successful payment—they might close their browser tab before the redirect occurs.\n\n[\n\n## Confirm the payment is successful![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#payment-success)\n\nWhen your customer completes a payment, they’re redirected to the URL that you specified as the `success_url`. This is typically a page on your website that informs your customer that their payment was successful.\n\nUse the Dashboard, a custom [webhook](https://docs.stripe.com/webhooks \"webhook\"), or a third-party plugin to handle post-payment events like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nSuccessful payments appear in the Dashboard’s [list of payments](https://dashboard.stripe.com/payments). When you click a payment, it takes you to the payment detail page. The **Checkout summary** section contains billing information and the list of items purchased, which you can use to manually fulfill the order.\n\n![Checkout summary](https://b.stripecdn.com/docs-statics-srv/assets/source.16d3029596357c80a8efdbbfe106108a.png)\n\n#### Note\n\nStripe can help you keep up with incoming payments by sending you email notifications whenever a customer successfully completes one. Use the Dashboard to [configure email notifications](https://dashboard.stripe.com/settings/user).\n\nYou can use plugins like [Zapier](https://stripe.com/works-with/zapier) to automate updating your purchase fulfillment systems with information from Stripe payments.\n\nSome examples of automation supported by plugins include:\n\n*   Updating spreadsheets used for order tracking in response to successful payments\n*   Updating inventory management systems in response to successful payments\n*   Triggering notifications to internal customer service teams using email or chat applications\n\n[\n\n## Test the integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#testing)\n\nThere are several test cards you can use to make sure your integration is ready for production. Use them with any CVC, postal code, and future expiration date.\n\n| Number | Description |\n| --- | --- |\n|     | Succeeds and immediately processes the payment. |\n|     | 3D Secure 2 authentication must be completed for a successful payment. |\n|     | Always fails with a decline code of `insufficient_funds`. |\n\nFor the full list of test cards see our guide on [testing](https://docs.stripe.com/testing).\n\n### Apple Pay and Google Pay ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nNo configuration or integration changes are required to enable Apple Pay or Google Pay in Stripe Checkout. These payments are handled the same way as other card payments.\n\nThe Apple Pay button is displayed in a given Checkout Session if all of the following apply:\n\n*   Apple Pay is enabled for Checkout in your [Stripe Dashboard](https://dashboard.stripe.com/settings/checkout).\n*   The customer’s device is running macOS 10.14.1+ or iOS 12.1+.\n*   The customer is using the Safari browser.\n*   The customer has a valid card registered with Apple Pay.\n\nThis ensures that Checkout only displays the Apple Pay button to customers who are able to use it.",
  "title": "One-time payments with Checkout | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-js/elements/payment-request-button",
  "markdown": "# Payment Request Button | Stripe DocumentationThe Stripe Docs logo\n\nThe Payment Request Button Element dynamically displays wallet options during checkout, giving you a single integration for [Apple Pay](https://docs.stripe.com/apple-pay), [Google Pay](https://docs.stripe.com/google-pay), and [Link](#link-prb). Alternatively, you can use the [Express Checkout Element](https://docs.stripe.com/elements/express-checkout-element) to offer multiple one-click payment buttons to your customers. [Compare](https://docs.stripe.com/elements/express-checkout-element/comparison) the Express Checkout Element and Payment Request Button.\n\nCustomers see Apple Pay or Google Pay if they enabled them on their device, and depending on the browser they use. If Link appears, it could be because customers:\n\n*   Don’t have Apple Pay or Google Pay enabled on their device.\n*   Use Chrome with active, authenticated Link sessions.\n\n| Browser + Wallet | Payment Button |\n| --- | --- |\n| Safari + Apple Pay enabled | Apple Pay |\n| Chrome + Link authenticated | Link |\n| Chrome + Google Pay enabled and Link not authenticated | Google Pay |\n| Chrome on iOS 16 + Apple Pay and Google Pay enabled | Apple Pay |\n| Any browser + No active Apple Pay or Google Pay | Link |\n\n[\n\n## Prerequisites![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#prerequisites)\n\nBefore you start, you need to:\n\n*   Review the requirements for each payment button type:\n    \n    *   Apple Pay and Google Pay don’t display for IP addresses in India, so plan your integration testing accordingly.\n    *   Apple Pay requires macOS 10.12.1+ or iOS 10.1+.\n    *   Compatible devices automatically support Google Pay.\n*   **[Register and verify your domain](https://docs.stripe.com/payments/payment-methods/pmd-registration)** in both test mode and live mode.\n    \n*   **[Add a payment method to your browser.](#testing)** For example, you can save a card in Chrome, add a card to your Google Pay account, or add a card to your Wallet for Safari.\n    \n*   **Serve your application over HTTPS.** This is a requirement both in development and production. One way to get started is to use a service such as [ngrok](https://ngrok.com/).\n    \n\n[\n\n## Set up Stripe Elements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#set-up-stripe-elements)\n\nElements is available as part of [Stripe.js](https://docs.stripe.com/payments/elements). Include this in your page and create a container to use for the `paymentRequestButton` Element:\n\n`<script src=\"[https://js.stripe.com/v3/](https://js.stripe.com/v3/)\"></script> <div id=\"payment-request-button\">   <!-- A Stripe Element will be inserted here. --> </div>`\n\nYour Stripe publishable [API key](https://docs.stripe.com/keys) is also required as it identifies your website to Stripe:\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`, {   apiVersion: \"2024-06-20\", });`\n\n[\n\n## Create a paymentRequest instance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-payment-request-instance)\n\nCreate an instance of [`stripe.paymentRequest`](https://docs.stripe.com/js#stripe-payment-request) with all required options.\n\n`const paymentRequest = stripe.paymentRequest({   country: 'US',   currency: 'usd',   total: {     label: 'Demo total',     amount: 1099,   },   requestPayerName: true,   requestPayerEmail: true, });`\n\n#### Note\n\nUse the `requestPayerName` parameter to collect the payer’s billing address for Apple Pay and Link. You can use the billing address to perform address verification and block fraudulent payments. All other payment methods automatically collect the billing address when one is available.\n\n[\n\n## Create and mount the paymentRequestButton![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#mount-element)\n\nCreate the `paymentRequestButton` Element and check to make sure that your customer has an active payment method using `canMakePayment()`. If they do, mount the Element to the container to display the **Payment Request** button. If they don’t, you can’t mount the Element, and we recommend that you show a traditional checkout form instead.\n\n#### Note\n\nIf you accept Apple Pay with the Payment Request Button, you must offer Apple Pay as the primary payment option on your website per [Apple guidelines](https://developer.apple.com/apple-pay/acceptable-use-guidelines-for-websites/#:~:text=canMakePaymentWithActiveCard). Internally, the Payment Request Button uses the Apple Pay `canMakePaymentWithActiveCard` API.\n\n`const elements = stripe.elements(); const prButton = elements.create('paymentRequestButton', {   paymentRequest, });  (async () => {   // Check the availability of the Payment Request API first.   const result = await paymentRequest.canMakePayment();   if (result) {     prButton.mount('#payment-request-button');   } else {     document.getElementById('payment-request-button').style.display = 'none';   } })();`\n\n[\n\n## Create a PaymentIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-payment)\n\nStripe uses a [PaymentIntent](https://docs.stripe.com/api/payment_intents) object to represent your intent to collect payment from a customer, tracking charge attempts and payment state changes throughout the process.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/accept-a-payment-web.d86e3fb67cf265d70d77d77244464e0a.png)\n\nCreate a `PaymentIntent` on your server with an amount and currency. Always decide how much to charge on the server side, a trusted environment, as opposed to the client. This prevents malicious customers from being able to choose their own prices.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card`\n\nIncluded in the returned PaymentIntent is a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\"), which you use to securely complete the payment process instead of passing the entire PaymentIntent object. Send the client secret back to the client to use in the next step.\n\n[\n\n## Complete the payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#complete-payment)\n\nListen to the `paymentmethod` event to receive a [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") object. Pass the PaymentMethod ID and the PaymentIntent’s client secret to [stripe.confirmCardPayment](https://docs.stripe.com/js#stripe-confirm-card-payment) to complete the payment.\n\n``paymentRequest.on('paymentmethod', async (ev) => {   // Confirm the PaymentIntent without handling potential next actions (yet).   const {paymentIntent, error: confirmError} = await stripe.confirmCardPayment(     clientSecret,     {payment_method: ev.paymentMethod.id},     {handleActions: false}   );    if (confirmError) {     // Report to the browser that the payment failed, prompting it to     // re-show the payment interface, or show an error message and close     // the payment interface.     ev.complete('fail');   } else {     // Report to the browser that the confirmation was successful, prompting     // it to close the browser payment method collection interface.     ev.complete('success');     // Check if the PaymentIntent requires any actions and, if so, let Stripe.js     // handle the flow. If using an API version older than \"2019-02-11\"     // instead check for: `paymentIntent.status === \"requires_source_action\"`.     if (paymentIntent.status === \"requires_action\") {       // Let Stripe.js handle the rest of the payment flow.       const {error} = await stripe.confirmCardPayment(clientSecret);       if (error) {         // The payment failed -- ask your customer for a new payment method.       } else {         // The payment has succeeded -- show a success message to your customer.       }     } else {       // The payment has succeeded -- show a success message to your customer.     }   } });``\n\n#### Caution\n\nThe customer can dismiss the payment interface in some browsers even after they authorize the payment. This means that you might receive a [cancel event](https://docs.stripe.com/js#payment-request-on) on your PaymentRequest object after receiving a `paymentmethod` event. If you use the `cancel` event as a hook for canceling the customer’s order, make sure you also refund the payment that you just created.\n\n[\n\n## Test your integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#testing)\n\nTo test your integration, you must use HTTPS and a supported browser. If you use the `paymentRequestButton` Element within an iframe, the iframe must have the [allow](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-allowpaymentrequest) attribute set to equal “payment \\*”.\n\nStripe Elements doesn’t support Google Pay or Apple Pay for Stripe accounts and customers in India. Therefore, you can’t test your Google Pay or Apple Pay integration if the tester’s IP address is in India, even if the Stripe account is based outside India.\n\nIn addition, each payment method and browser has specific requirements:\n\n#### Safari![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Safari on Mac running macOS Sierra or later\n*   A compatible device with a card in its Wallet paired to your Mac with Handoff, or a Mac with TouchID. You can find instructions on the [Apple Support site](https://support.apple.com/en-us/HT204681).\n*   A [verified domain with Apple Pay](https://docs.stripe.com/payments/payment-methods/pmd-registration).\n*   When using an iframe, its origin must match the top-level origin (except for Safari 17 when specifying `allow=\"payment\"` attribute). Two pages have the same origin if the protocol, host (full domain name), and port (if specified) are the same for both pages.\n\n#### Mobile Safari![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Mobile Safari on iOS 10.1 or later\n*   A card in your Wallet (go to **Settings** > **Wallet & Apple Pay**).\n*   A [verified domain with Apple Pay](https://docs.stripe.com/payments/payment-methods/pmd-registration).\n*   When using an iframe, its origin must match the top-level origin (except for Safari 17 when specifying `allow=\"payment\"` attribute). Two pages have the same origin if the protocol, host (full domain name), and port (if specified) are the same for both pages.\n\nAs of iOS 16, Apple Pay might work in some non-Safari mobile browsers with a card saved in your Wallet.\n\n## Collect shipping information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo collect shipping information, begin by including `requestShipping: true` when creating the payment request.\n\nYou can also provide an array of `shippingOptions` at this point, if your shipping options don’t depend on the customer’s address.\n\n``const paymentRequest = stripe.paymentRequest({   country: 'US',   currency: 'usd',   total: {     label: 'Demo total',     amount: 1099,   },    requestShipping: true,   // `shippingOptions` is optional at this point:   shippingOptions: [     // The first shipping option in this list appears as the default     // option in the browser payment interface.     {       id: 'free-shipping',       label: 'Free shipping',       detail: 'Arrives in 5 to 7 days',       amount: 0,     },   ], });``\n\nNext, listen to the `shippingaddresschange` event to detect when a customer selects a shipping address. Use the address to fetch valid shipping options from your server, update the total, or perform other business logic. You can anonymize the address data on the `shippingaddresschange` event in the browser to not reveal sensitive information that isn’t necessary for shipping cost calculation.\n\nThe customer must provide valid `shippingOptions` at this point to proceed in the flow.\n\n`paymentRequest.on('shippingaddresschange', async (ev) => {   if (ev.shippingAddress.country !== 'US') {     ev.updateWith({status: 'invalid_shipping_address'});   } else {     // Perform server-side request to fetch shipping options     const response = await fetch('/calculateShipping', {       data: JSON.stringify({         shippingAddress: ev.shippingAddress       })     });     const result = await response.json();      ev.updateWith({       status: 'success',       shippingOptions: result.supportedShippingOptions,     });   } });`\n\n## Display line items ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse [`displayItems`](https://docs.stripe.com/js/payment_request/create#stripe_payment_request-options-displayItems) to display [`PaymentItem`](https://docs.stripe.com/js/appendix/payment_item_object) objects and show the price breakdown in the browser’s payment interface.\n\n`const paymentRequest = stripe.paymentRequest({   country: 'US',   currency: 'usd',   total: {     label: 'Demo total',     amount: 2000,   },    displayItems: [     {       label: 'Sample item',       amount: 1000,     },     {       label: 'Shipping cost',       amount: 1000,     }   ], });`\n\n## Style the button ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the following parameters to customize the Element:\n\n`elements.create('paymentRequestButton', {   paymentRequest,   style: {     paymentRequestButton: {       type: 'default',       // One of 'default', 'book', 'buy', or 'donate'       // Defaults to 'default'        theme: 'dark',       // One of 'dark', 'light', or 'light-outline'       // Defaults to 'dark'        height: '64px',       // Defaults to '40px'. The width is always '100%'.     },   }, });`\n\n### Using your own button ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you want to design your own button instead of using the `paymentRequestButton` Element, you can show your custom button based on the result of [paymentRequest.canMakePayment()](https://docs.stripe.com/js#payment-request-can-make-payment). Then, use [paymentRequest.show()](https://docs.stripe.com/js#payment-request-show) to display the browser interface when your button is clicked.\n\nWhen building your own button, follow the Apple Pay [Human Interface Guidelines](https://developer.apple.com/design/human-interface-guidelines) and Google Pay [Brand Guidelines](https://developers.google.com/pay/api/web/guides/brand-guidelines).\n\n#### Caution\n\nLink isn’t supported in custom button configurations and won’t display for the customer if you decide to use one.\n\n## Add an Apple Pay merchant token for merchant initiated transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSet up your Payment Request Button to request an [Apple Pay MPAN](https://docs.stripe.com/apple-pay/merchant-tokens) to facilitate merchant initiated transactions (MIT) for recurring, auto-load, or deferred payments.\n\n1.  Create an instance of the [Payment Request](#create-payment-request-instance).\n2.  Pass the `applePay` object relevant to your MPAN use case (choose from the drop-down to see use case code samples).\n3.  Include relevant parameters for your use case.\n\n`const paymentRequest = stripe.paymentRequest({   applePay: {     recurringPaymentRequest: {       paymentDescription: 'My subscription',       managementURL: '[https://example.com/billing](https://example.com/billing)',       regularBilling: {         amount: 2500,         label: 'Monthly subscription fee',         recurringPaymentIntervalUnit: 'month',         recurringPaymentIntervalCount: 1,       },     },   },   // Other options });`\n\n## Use the Payment Request Button with Stripe Connect ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Connect](https://docs.stripe.com/connect \"Connect\") platforms that either create direct charges or add the token to a Customer on the connected account must take additional steps when using the Payment Request Button.\n\n1.  On your frontend, before creating the `PaymentRequest` instance, set the `stripeAccount` option on the Stripe instance:\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`, {   apiVersion: \"2024-06-20\",   stripeAccount: 'CONNECTED_STRIPE_ACCOUNT_ID', });`\n\n1.  [Register all domains](https://docs.stripe.com/payments/payment-methods/pmd-registration?dashboard-or-api=api#register-your-domain-while-using-connect) where you plan to show the Payment Request Button.\n\n## Link for the Payment Request Button ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen new customers come to your site, they can use [Link in the Payment Request Button](https://docs.stripe.com/payments/link/payment-request-button-link) to pay with their saved payment details. With [Link](https://docs.stripe.com/payments/link/what-is-link), they don’t need to manually enter their payment information. Link requires [domain registration](https://docs.stripe.com/payments/payment-methods/pmd-registration).\n\n[\n\n## Disclose Stripe to your customers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#disclose-cookies)\n\nStripe collects information on customer interactions with Elements to provide services to you, prevent fraud, and improve its services. This includes using cookies and IP addresses to identify which Elements a customer saw during a single checkout session. You’re responsible for disclosing and obtaining all rights and consents necessary for Stripe to use data in these ways. For more information, visit our [privacy center](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe).",
  "title": "Payment Request Button | Stripe Documentation",
  "description": "Collect payment and address information from customers who use Apple Pay, Google Pay, or Link.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/google-pay",
  "markdown": "# Google Pay | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to accept payments using Google Pay.\n\nGoogle Pay allows customers to make payments in your app or website using any credit or debit card saved to their Google Account, including those from Google Play, YouTube, Chrome, or an Android device. Use the Google Pay API to request any credit or debit card stored in your customer’s Google account.\n\nGoogle Pay is fully compatible with Stripe’s products and features (for example, recurring payments), allowing you to use it in place of a traditional payment form whenever possible. Use it to accept payments for physical goods, donations, [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"), and so on.\n\n## Using Stripe and Google Pay versus the Google Play billing system![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor sales of physical goods and services, your app can accept Google Pay or any other Stripe-supported payment method. Those payments are processed through Stripe, and you only need to pay Stripe’s [processing fees](https://stripe.com/pricing). However, in-app purchases of digital products and content must use the [Google Play billing system](https://developer.android.com/google/play/billing). Those payments are processed by Google and are subject to their transaction fees.\n\nFor more information about which purchases must use the Google Play billing system, see Google Play’s [developer terms](https://support.google.com/googleplay/android-developer/answer/10281818).\n\n## Accept a payment using Google Pay in your Android app ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n`GooglePayLauncher`, part of the Stripe Android SDK, is the fastest and easiest way to start accepting Google Pay in your Android apps.\n\n[](#html-js-prerequisites)\n\nTo support Google Pay in Android, you need the following:\n\n*   A `minSdkVersion` of `19` or higher.\n*   A `compileSdkVersion` of `28` or higher.\n\nAdditionally, if you wish to test with your own device, you need to [add a payment method to your Google Account](https://support.google.com/wallet/answer/12058983?visit_id=637947092743186187-653786796&rd=1).\n\n[](#setup)\n\nTo use Google Pay, first enable the Google Pay API by adding the following to the `<application>` tag of your **AndroidManifest.xml**:\n\n`<application>   ...   <meta-data     android:name=\"com.google.android.gms.wallet.api.enabled\"     android:value=\"true\" /> </application>`\n\nThis guide assumes you’re using the latest version of the Stripe Android SDK.\n\n`dependencies {     implementation 'com.stripe:stripe-android:20.48.0' }`\n\nFor more details, see Google Pay’s [Set up Google Pay API](https://developers.google.com/pay/api/android/guides/setup) for Android.\n\n[](#button)\n\nAdd the Google Pay button to your app by following [Google’s tutorial](https://developers.google.com/pay/api/android/guides/tutorial#add-button). This ensures you’re using the correct assets.\n\n[](#instantiate)\n\nNext, create an instance of [GooglePayLauncher](https://github.com/stripe/stripe-android/blob/master/payments-core/src/main/java/com/stripe/android/googlepaylauncher/GooglePayLauncher.kt) in your `Activity` or `Fragment`. This must be done in `Activity#onCreate()`.\n\n`GooglePayLauncher.Config` exposes both required and optional properties that configure `GooglePayLauncher`. See `GooglePayLauncher.Config` for more details on the configuration options.\n\n``import com.google.android.gms.wallet.button.PayButton  class CheckoutActivity : AppCompatActivity() {     // fetch client_secret from backend     private lateinit var clientSecret: String      private lateinit var googlePayButton: PayButton      override fun onCreate(savedInstanceState: Bundle?) {         super.onCreate(savedInstanceState)         setContentView(R.layout.checkout_activity)          PaymentConfiguration.init(this, PUBLISHABLE_KEY)          googlePayButton = /* TODO: Initialize button by following Google's guide. */          val googlePayLauncher = GooglePayLauncher(             activity = this,             config = GooglePayLauncher.Config(                 environment = GooglePayEnvironment.Test,                 merchantCountryCode = \"US\",                 merchantName = \"Widget Store\"             ),             readyCallback = ::onGooglePayReady,             resultCallback = ::onGooglePayResult         )          googlePayButton.setOnClickListener {             // launch `GooglePayLauncher` to confirm a Payment Intent             googlePayLauncher.presentForPaymentIntent(clientSecret)         }     }      private fun onGooglePayReady(isReady: Boolean) {         // implemented below     }      private fun onGooglePayResult(result: GooglePayLauncher.Result) {         // implemented below     } }``\n\nAfter instantiating `GooglePayLauncher`, the `GooglePayLauncher.ReadyCallback` instance is called with a flag indicating whether Google Pay is available and ready to use. This flag can be used to update your UI to indicate to your customer that Google Pay is ready to be used.\n\n`import com.google.android.gms.wallet.button.PayButton  class CheckoutActivity : AppCompatActivity() {     // continued from above      private lateinit var googlePayButton: PayButton      private fun onGooglePayReady(isReady: Boolean) {         googlePayButton.isEnabled = isReady     } }`\n\n[](#launch-google-pay)\n\nAfter Google Pay is available and your app has obtained a `PaymentIntent` or `SetupIntent` client secret, launch `GooglePayLauncher` using the appropriate method. When confirming a `PaymentIntent`, use `GooglePayLauncher#presentForPaymentIntent(clientSecret)`. When confirming a `SetupIntent`, use `GooglePayLauncher#presentForSetupIntent(clientSecret)`.\n\n``import com.google.android.gms.wallet.button.PayButton  class CheckoutActivity : AppCompatActivity() {     // fetch client_secret from backend     private lateinit var clientSecret: String      private lateinit var googlePayButton: PayButton      override fun onCreate(savedInstanceState: Bundle?) {         super.onCreate(savedInstanceState)          // instantiate `googlePayLauncher`          googlePayButton.setOnClickListener {             // launch `GooglePayLauncher` to confirm a Payment Intent             googlePayLauncher.presentForPaymentIntent(clientSecret)         }     } }``\n\n[\n\n## Handle the result![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-result)\n\nFinally, implement `GooglePayLauncher.ResultCallback` to handle the result of the `GooglePayLauncher` operation.\n\nThe result can be `GooglePayLauncher.Result.Completed`, `GooglePayLauncher.Result.Canceled`, or `GooglePayLauncher.Result.Failed`.\n\n``class CheckoutActivity : AppCompatActivity() {     // continued from above      private fun onGooglePayResult(result: GooglePayLauncher.Result) {         when (result) {             GooglePayLauncher.Result.Completed -> {                 // Payment succeeded, show a receipt view             }             GooglePayLauncher.Result.Canceled -> {                 // User canceled the operation             }             is GooglePayLauncher.Result.Failed -> {                 // Operation failed; inspect `result.error` for the exception             }         }     } }``\n\n[](#going-live)\n\nFollow [Google’s instructions](https://developers.google.com/pay/api/android/guides/test-and-deploy/request-prod-access) to request production access for your app. Choose the integration type **Gateway** when prompted, and provide screenshots of your app for review.\n\nAfter your app has been approved, test your integration in production by setting the environment to `GooglePayEnvironment.Production`, and launching Google Pay from a signed, release build of your app. Remember to use your live mode [API keys](https://docs.stripe.com/keys). You can use a `PaymentIntent` with [`capture_method` = `manual`](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-capture_method) to process a transaction without capturing the payment.\n\n## Creating a PaymentMethod![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you confirm your payment on your server, you can use `GooglePayPaymentMethodLauncher` to only collect a `PaymentMethod` instead of confirm payment.\n\n``import com.google.android.gms.wallet.button.PayButton  class CheckoutActivity : AppCompatActivity() {     private lateinit var googlePayButton: PayButton      override fun onCreate(savedInstanceState: Bundle?) {         super.onCreate(savedInstanceState)         setContentView(R.layout.checkout_activity)          PaymentConfiguration.init(this, PUBLISHABLE_KEY)          googlePayButton = /* TODO: Initialize button by following Google's guide. */          val googlePayLauncher = GooglePayPaymentMethodLauncher(             activity = this,             config = GooglePayPaymentMethodLauncher.Config(                 environment = GooglePayEnvironment.Test,                 merchantCountryCode = \"FR\",                 merchantName = \"Widget Store\"             ),             readyCallback = ::onGooglePayReady,             resultCallback = ::onGooglePayResult         )          googlePayButton.setOnClickListener {             googlePayLauncher.present(                 currencyCode = \"EUR\",                 amount = 2500             )         }     }      private fun onGooglePayReady(isReady: Boolean) {         googlePayButton.isEnabled = isReady     }      private fun onGooglePayResult(         result: GooglePayPaymentMethodLauncher.Result     ) {         when (result) {             is GooglePayPaymentMethodLauncher.Result.Completed -> {                 // Payment details successfully captured.                 // Send the paymentMethodId to your server to finalize payment.                 val paymentMethodId = result.paymentMethod.id             }             GooglePayPaymentMethodLauncher.Result.Canceled -> {                 // User canceled the operation             }             is GooglePayPaymentMethodLauncher.Result.Failed -> {                 // Operation failed; inspect `result.error` for the exception             }         }     } }``",
  "title": "Google Pay | Stripe Documentation",
  "description": "Learn how to accept payments using Google Pay.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/paypal",
  "markdown": "# PayPal payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about PayPal, a digital wallet popular with businesses in Europe.\n\nPayPal is a payment method that enables customers in any country to pay using their PayPal account.\n\nTo pay using PayPal, customers are redirected from your website to PayPal. They choose a funding source: PayPal wallet, linked card or bank account, or buy now, pay later. Then they authenticate the payment. After successful authorization, the customer is redirected back to your website. You receive an [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) of the payment’s success or failure.\n\n*   **Customer locations**\n    \n    Worldwide\n    \n*   **Presentment currency**\n    \n    EUR, GBP, USD, CHF, CZK, DKK, NOK, PLN, SEK, AUD, CAD, HKD, NZD, SGD\n    \n*   **Payment method family**\n    \n    Wallets\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payout timing**\n    \n    [Standard payout timing](https://docs.stripe.com/payouts#payout-speed) applies\n    \n*   **Connect support**\n    \n    Partial (requires manual approval, see details below)\n    \n*   **Recurring payments**\n    \n    Requires approval\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / Yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect.f6e6ccf58078e0a25815560086204c24.svg)\n\nCustomer is redirected to PayPal and enters login details\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/pincode-sms.d10a5a14a3a7e5d3c00942531f9143cd.svg)\n\nCustomer completes authorization process\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect-success.740e23b33b6f52a746e8ec50285e2805.svg)\n\nCustomer is notified that payment is complete\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\n(Optional) Customer returns back to business’s site for payment confirmation\n\n## Connect support ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPayPal is available for online marketplaces using [Stripe Connect](https://stripe.com/connect). These online marketplaces include businesses such as Deliveroo and ManoMano that collect payments from customers, and later pay out to sub-accounts or service providers. PayPal isn’t available for platforms that onboard other businesses and enable them to accept payments directly, such as Shopify or Squarespace.\n\n#### Note\n\nOnline marketplaces need to submit an onboarding request from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) to get access to PayPal. Stripe sends email updates about the progress of all requests, and the current status is also reflected on the [Payment Method Settings page](https://dashboard.stripe.com/settings/payment_methods).\n\nThe following [Connect charges](https://docs.stripe.com/connect/charges) types, typically used by online marketplaces, are available to businesses using PayPal.\n\n| Destination charges | Separate charges and transfers | Direct charges | on\\_behalf\\_of |\n| --- | --- | --- | --- |\n|     |     |     |     |\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAdd PayPal and other payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) without making updates to your code. For each customer, Stripe determines the list of supported payment methods most likely to drive conversion. Learn how to [accept PayPal and other payment methods automatically](https://docs.stripe.com/payments/accept-a-payment) with Checkout or Elements. To accept PayPal and other payment methods without any code, use [Payment Links](https://docs.stripe.com/payment-links).\n\nWhen you’re ready to go live, follow the steps to [activate PayPal payments](https://docs.stripe.com/payments/paypal/connect-your-paypal-account).\n\n## Disputed payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCustomers must authenticate payments with their PayPal accounts, helping to reduce the risk of fraud or unrecognized payments. However, customers can still dispute transactions after they complete payment. Some common reasons for disputes are customers determining that items weren’t as described, or not receiving items at all. You can submit evidence to contest a dispute directly from the Stripe Dashboard.\n\nLearn how to [manage PayPal disputes](https://docs.stripe.com/payments/paypal/disputed-payments) in the Dashboard.\n\nFor certain dispute types, PayPal enables you communicate directly to customers to try resolving the dispute. Contacting customers directly must be handled through the PayPal dashboard, and not the Stripe Dashboard.\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPayPal payments can be refunded up to 180 days after the original payment. Stripe uses either your Stripe balance or your PayPal balance to refund the payment, depending on the [settlement preference you selected](https://docs.stripe.com/payments/paypal/choose-settlement-preference).\n\nYou can use the Stripe Dashboard or API to initiate refund requests, as with other payment methods. If you choose to settle funds to Stripe, refunds will be withdrawn from the funds available in your Stripe account. If you choose to settle funds to PayPal, refunds funded using your PayPal balance or any other funding source available on your PayPal account.\n\n## Reporting![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayPal fees are included in the **Less fees** sections of [Balance and Balance Activity reports](https://dashboard.stripe.com/reports/balance). PayPal fees aren’t included in your [tax invoice from Stripe](https://dashboard.stripe.com/settings/documents). You can access these documents from your PayPal dashboard.\n\n## Seller protection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayPal’s Seller Protection program offers coverage for sellers under eligible transactions. It includes scenarios such as unauthorized transactions or buyers’ claims of non-receipt of item. For more information on the Seller Protection program and eligibility, visit [PayPal Seller Protection](https://www.paypal.com/uk/legalhub/seller-protection).\n\n## Prohibited business categories![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the business categories restricted from using Stripe overall, PayPal requires pre-approval to accept payments for certain services. Refer to the [PayPal Acceptable Use Policy](https://www.paypal.com/us/legalhub/acceptableuse-full) for details.\n\n## Minimum and maximum charge amounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayPal doesn’t have a minimum charge amount, but Stripe enforces the same [minimum and maximum charge amounts](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts) for PayPal as for other payment methods.",
  "title": "PayPal payments | Stripe Documentation",
  "description": "Learn about PayPal, a digital wallet popular with businesses in Europe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/elements/express-checkout-element/comparison",
  "markdown": "# Express Checkout Element comparison | Stripe DocumentationThe Stripe Docs logo\n\n## Compare the features for the Express Checkout Element and the Payment Request Button.\n\nLike the [Payment Request Button](https://docs.stripe.com/stripe-js/elements/payment-request-button), you can use the [Express Checkout Element](https://docs.stripe.com/elements/express-checkout-element) to accept card or [wallet](https://docs.stripe.com/payments/wallets) payments through one or more payment buttons. While both Elements support common payment flows, the Express Checkout Element provides instant access to additional payment methods.\n\nIf you currently use the Payment Request Button, you can [migrate](https://docs.stripe.com/elements/express-checkout-element/migration) to the Express Checkout Element.\n\n| Features | Express Checkout Element | Payment Request Button |\n| --- | --- | --- |\n| Accept all Stripe-supported [card brands](https://docs.stripe.com/payments/cards#supported-card-brands) through wallet pay buttons |     |     |\n| Accept payments with other payment methods |     |     |\n| Enable faster checkout with [Link](https://docs.stripe.com/payments/link) |     |     |\n| Enable using different [funding sources](https://docs.stripe.com/payments/link/add-link-elements-integration#multiple-funding-sources) with Link |     |     |\n| Support Apple Pay [merchant tokens](https://developer.apple.com/apple-pay/merchant-tokens/) |     |     |\n| Display multiple buttons (such as Apple Pay and Google Pay) at the same time |     |     |\n| Change the button appearance and theme |     |     |\n| Handle [3D Secure](https://docs.stripe.com/payments/3d-secure) authentication |     |     |",
  "title": "Express Checkout Element comparison | Stripe Documentation",
  "description": "Compare the features for the Express Checkout Element and the Payment Request Button.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/elements/express-checkout-element/migration",
  "markdown": "# Migrate to the Express Checkout Element\n\n## Migrate your existing integration with the Payment Request Button Element to the Express Checkout Element.\n\nThe [Payment Request Button Element](https://docs.stripe.com/stripe-js/elements/payment-request-button) allows you to accept card payments only through [Apple Pay](https://docs.stripe.com/apple-pay), [Google Pay](https://docs.stripe.com/google-pay), or [Link](https://docs.stripe.com/payments/link). When you migrate to the [Express Checkout Element](https://docs.stripe.com/elements/express-checkout-element), you can accept card or [wallet](https://docs.stripe.com/payments/wallets) payments through one or more payment buttons, including [PayPal](https://docs.stripe.com/payments/paypal). See the [comparison guide](https://docs.stripe.com/elements/express-checkout-element/comparison) for more details.\n\n| If your existing integration uses | Do the following |\n| --- | --- |\n| [Payment Intents](https://docs.stripe.com/api/payment_intents) API to create and track payments or save card details during a payment | Follow the steps in this guide to use the Express Checkout Element. |\n| [Charges](https://docs.stripe.com/api/charges) API with tokens | Migrate to the [Payment Intents API](https://docs.stripe.com/payments/payment-intents/migration#web) before proceeding. |\n\n[](#enable-payment-methods)\n\nEnable the payment methods you want to support in your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods). You must enable at least one payment method.\n\nBy default, Stripe enables cards and other common payment methods. You can enable additional payment methods that are relevant for your business and customers. See the [payment method integration options](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) for product and payment method support and our [pricing page](https://stripe.com/pricing/local-payment-methods) for fees.\n\n[](#one-time-update-elements)\n\nNext, update your client-side code to pass the mode (payment), amount, and currency. These values determine which payment methods to show to your customers.\n\nFor example, if you pass the `eur` currency on the `PaymentIntent` and enable OXXO in the Dashboard, your customer won’t see OXXO because OXXO doesn’t support `eur` payments.\n\nStripe evaluates the currency, payment method restrictions, and other parameters to determine the list of supported payment methods. We prioritize payment methods that increase conversion and are most relevant to the currency and customer location.\n\n`const stripe =     Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`); const elements = stripe.elements();`\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`); const options = {   mode: 'payment',   amount: 1099,   currency: 'usd', }; const elements = stripe.elements(options);`\n\n[](#one-time-payment-intent)\n\nThe `PaymentIntent` includes the payment methods shown to customers during checkout. You can manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow.\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -H \"Stripe-Version: 2024-06-20\" \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\" \\   -d \"automatic_payment_methods[enabled]\"=true \\`\n\nIf your existing integration supports multiple payment methods or you want to accept payment methods other than cards, you can [enable more payment methods](https://dashboard.stripe.com/settings/payment_methods) in the Dashboard.\n\n[](#one-time-add-express-checkout-element)\n\nReplace the Payment Request Button Element with the Express Checkout Element. The examples below demonstrate how to replace `PaymentRequestButtonElement` with `ExpressCheckoutElement`.\n\nYou no longer need to create a `paymentRequest` object. Instead, pass the properties through the `click` event once.\n\n`<div id=\"payment-request-button\"> </div>`\n\n`<div id=\"express-checkout-element\">   <!-- Mount the Express Checkout Element here --> </div>`\n\n`const paymentRequest = stripe.paymentRequest({   country: 'US',   currency: 'usd',   total: {     label: 'Demo total',     amount: 1099,   },   requestPayerName: true,   requestPayerEmail: true, }); const paymentRequestButton = elements.create('paymentRequestButton', {   paymentRequest: paymentRequest, }); paymentRequestButton.mount(\"#payment-request-button\"); paymentRequest.canMakePayment().then(function(result) {   if (result) {     prButton.mount('#payment-request-button');   } else {     document.getElementById('payment-request-button').style.display = 'none';   } });`\n\n`const expressCheckoutElement = elements.create(\"expressCheckout\"); expressCheckoutElement.mount(\"#express-checkout-element\"); expressCheckoutElement.on('click', (event) => {   const options = {     emailRequired: true   };   event.resolve(options); });`\n\n[](#one-time-update-method)\n\nListen to the [confirm](https://docs.stripe.com/js/elements_object/express_checkout_element_confirm_event) event to handle confirmation. To collect and submit payment information to Stripe, use [stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment) instead of individual confirmation methods like `stripe.confirmCardPayment`.\n\nInstead of a PaymentMethod ID, `stripe.confirmPayment` uses the Elements instance from the Express Checkout Element and the client secret from the created `PaymentIntent`.\n\nWhen called, `stripe.confirmPayment` attempts to complete any required actions, such as authenticating your customers by displaying a 3DS dialog or redirecting them to a bank authorization page. After confirmation completes, users are directed to the [return\\_url](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-return_url) that you configured, which corresponds to a page on your website that provides the payment status.\n\nIf you want the checkout flow for card payments to redirect only for payment methods that require it, you can set [redirect](https://docs.stripe.com/js/payment_intents/confirm_payment#confirm_payment_intent-options-redirect) to `if_required`. This doesn’t apply to the Express Checkout Element.\n\nThe example below replaces `stripe.confirmCardPayment` with `stripe.confirmPayment`.\n\n`paymentRequest.on('paymentmethod', function(ev) {   stripe.confirmCardPayment(     '{{CLIENT_SECRET}}',     {payment_method: ev.paymentMethod.id},     {handleActions: false}   ).then(function(confirmResult) {     if (confirmResult.error) {       ev.complete('fail');     } else {       ev.complete('success');       if (confirmResult.paymentIntent.status === \"requires_action\") {         stripe.confirmCardPayment(clientSecret).then(           function(result) {             if (result.error) {               // The payment failed -- ask your customer for a new payment method.             } else {               // The payment succeeded.             }           }         );       } else {         // The payment succeeded.       }     }   }); });`\n\n``expressCheckoutElement.on('confirm', async (event) => {   const {error} = await stripe.confirmPayment({     // `Elements` instance that's used to create the Express Checkout Element.     elements,     // `clientSecret` from the created PaymentIntent     clientSecret,     confirmParams: {       return_url: '[https://example.com/order/123/complete](https://example.com/order/123/complete)',     },     // Uncomment below if you only want redirect for redirect-based payments.     // redirect: 'if_required',   });    if (error) {     // This point is reached only if there's an immediate error when confirming the payment. Show the error to your customer (for example, payment details incomplete).   } else {     // Your customer will be redirected to your `return_url`.   } });``\n\n[](#post-payment)\n\nStripe sends a [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded) event when the payment completes. Use the [Dashboard webhook tool](https://dashboard.stripe.com/webhooks) or follow the [webhook guide](https://docs.stripe.com/webhooks/quickstart) to receive these events and run actions, such as sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes, and malicious clients could manipulate the response. Setting up your integration to listen for asynchronous events is what enables you to accept [different types of payment methods](https://stripe.com/payments/payment-methods-guide) with a single integration.\n\nIn addition to handling the `payment_intent.succeeded` event, we recommend handling these other events when collecting payments with the Payment Element:\n\n| Event | Description | Action |\n| --- | --- | --- |\n| [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.succeeded) | Sent when a customer successfully completes a payment. | Send the customer an order confirmation and fulfill their order. |\n| [payment\\_intent.processing](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.processing) | Sent when a customer successfully initiates a payment, but the payment has yet to complete. This event is most commonly sent when the customer initiates a bank debit. It’s followed by either a `payment_intent.succeeded` or `payment_intent.payment_failed` event in the future. | Send the customer an order confirmation that indicates their payment is pending. For digital goods, you might want to fulfill the order before waiting for payment to complete. |\n| [payment\\_intent.payment\\_failed](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.payment_failed) | Sent when a customer attempts a payment, but the payment fails. | If a payment transitions from `processing` to `payment_failed`, offer the customer another attempt to pay. |",
  "title": "Migrate to the Express Checkout Element | Stripe Documentation",
  "description": "Migrate your existing integration with the Payment Request Button Element to the Express Checkout Element.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/customization/font-compatibility",
  "markdown": "# Font compatibility | Stripe DocumentationThe Stripe Docs logo\n\nBe Vietnam Pro`bg`, `el`, `ja`, `ko`, `ru`, `th`, `zh`, `zh-HK`, `zh-TW`Bitter`el`, `ja`, `ko`, `th`, `zh`, `zh-HK`, `zh-TW`Chakra Petch`bg`, `el`, `ja`, `ko`, `ru`, `zh`, `zh-HK`, `zh-TW`Hahmlet`bg`, `el`, `ja`, `ko`, `ru`, `th`, `zh`, `zh-HK`, `zh-TW`Inconsolata`bg`, `el`, `ja`, `ko`, `ru`, `th`, `zh`, `zh-HK`, `zh-TW`Inter`ja`, `ko`, `th`, `zh`, `zh-HK`, `zh-TW`Lato`bg`, `cs`, `el`, `hr`, `ja`, `ko`, `lt`, `lv`, `mt`, `ro`, `ru`, `sl`, `th`, `vi`, `zh`, `zh-HK`, `zh-TW`Lora`el`, `ja`, `ko`, `th`, `zh`, `zh-HK`, `zh-TW`M PLUS 1 Code`bg`, `el`, `ko`, `lt`, `lv`, `ru`, `sk`, `sl`, `th`, `tr`Montserrat`el`, `hr`, `ja`, `ko`, `ru`, `th`, `zh`, `zh-HK`, `zh-TW`Nunito`el`, `ja`, `ko`, `th`, `zh`, `zh-HK`, `zh-TW`Noto Sans`ja`, `ko`, `th`Noto Serif`th`Open Sans`ja`, `ko`, `th`, `zh`, `zh-HK`, `zh-TW`PT Sans`el`, `ja`, `ko`, `th`, `vi`, `zh`, `zh-HK`, `zh-TW`PT Serif`el`, `ja`, `ko`, `th`, `vi`, `zh`, `zh-HK`, `zh-TW`Pridi`bg`, `el`, `ja`, `ko`, `ru`, `zh`, `zh-HK`, `zh-TW`Raleway`el`, `ja`, `ko`, `th`, `zh`, `zh-HK`, `zh-TW`Roboto`ja`, `ko`, `zh`, `zh-HK`, `zh-TW`Roboto Slab`ja`, `ko`, `th`, `zh`, `zh-HK`, `zh-TW`Source Sans Pro`bg`, `el`, `ja`, `ko`, `ru`, `th`, `zh`, `zh-HK`, `zh-TW`Titillium Web`bg`, `el`, `ja`, `ko`, `th`, `vi`, `zh`, `zh-HK`, `zh-TW`Ubuntu Mono`ja`, `ko`, `th`, `zh`, `zh-HK`, `zh-TW`Zen Maru Gothic`bg`, `cs`, `el`, `hr`, `ko`, `lt`, `lv`, `pl`, `ro`, `ru`, `sk`, `th`, `vi`",
  "title": "Font compatibility | Stripe Documentation",
  "description": "Learn about font support for different locales.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/customization",
  "markdown": "# Customize Checkout | Stripe DocumentationThe Stripe Docs logo\n\nYou can customize the text that your customers see, as well as the policies Checkout displays.\n\n### Add custom text![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can present additional text to customers when they pay with Stripe Checkout, such as shipping and processing times.\n\n#### Warning\n\nYou are prohibited from using this feature to create custom text that will violate or create ambiguity with the Stripe generated text on Checkout, obligations under your Stripe agreement, Stripe’s policies, and applicable laws.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1 \\  -d mode=payment \\  -d \"shipping_address_collection[allowed_countries][0]\"=US \\   --data-urlencode \"custom_text[shipping_address][message]\"=\"Please note that we can't guarantee 2-day delivery for PO boxes at this time.\" \\   --data-urlencode \"custom_text[submit][message]\"=\"We'll email you instructions on how to get started.\" \\   --data-urlencode \"custom_text[after_submit][message]\"=\"Learn more about **your purchase** on our [product page]([https://www.stripe.com/).](https://www.stripe.com/))\" \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n![Custom text near shipping address collection](https://b.stripecdn.com/docs-statics-srv/assets/shipping-address-custom-text.b0b578d66d2bd415d0b0fe03106d27df.png)\n\nCustom text near the shipping address collection fields\n\n![Custom text above the pay button](https://b.stripecdn.com/docs-statics-srv/assets/submit-custom-text.bf46135c06b7c33c1ce9c9b09e4206c9.png)\n\nCustom text above the **Pay** button\n\n![Custom text below the pay button](https://b.stripecdn.com/docs-statics-srv/assets/custom-text-after-submit.32dbd97008b3f189145bcd07c4562bb4.png)\n\nCustom text after the **Pay** button\n\nYour custom text can be up to 1200 characters in length. However, Stripe Checkout is optimized for conversion, and adding extra information might affect your conversion rate. You can bold text or insert a link using [Markdown syntax](https://www.markdownguide.org/cheat-sheet/).\n\n### Customize policies and contact information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can display your return, refund, legal policies, and support contact information to your customers on Checkout. Go to [Checkout Settings](https://dashboard.stripe.com/settings/checkout) to configure the information you want to display, including:\n\n*   Details about your return and refund policies\n*   Your support phone number, email, and website\n*   Links to your terms of service and privacy policy\n\nPresenting this information can increase buyer confidence and minimize cart abandonment.\n\n#### Configure support and legal policies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFrom [Checkout Settings](https://dashboard.stripe.com/settings/checkout), add support contact information to your sessions by enabling **Contact information**. Similarly, add links to your **Terms of service** and **Privacy policy** to your sessions by enabling **Legal policies**. If you require customers to implicitly consent to your legal policies when they complete their checkout, select the **Display agreement to legal terms** checkbox.\n\nYou must add your support contact information and legal policy links in your [Public Detail Settings](https://dashboard.stripe.com/settings/public).\n\nThe following previews show how Checkout displays a dialog with the support contact information, links to the store legal policies, and information about the payment terms.\n\n![A checkout page with contact information.](https://b.stripecdn.com/docs-statics-srv/assets/contact-modal.2b81bc2e74657f7c94a45a743439c81f.png)\n\nPreview of contact information on Checkout.\n\n![A checkout page with legal policies.](https://b.stripecdn.com/docs-statics-srv/assets/legal-modal.9351cb51408c2a9f5c0ae23aab03e138.png)\n\nPreview of legal policies on Checkout.\n\n#### Configure return and refund policies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDisplay your return, refund, or exchange policies, by enabling **Return and Refund policies**. Although businesses that sell physical goods use return policies, businesses that sell digital goods or customized physical goods typically use refund policies. Because they’re not mutually exclusive, you can select both options if your business sells both categories of goods. You can edit your return and refund details, including:\n\n*   Whether you accept returns, refunds, or exchanges\n*   Whether returns, refunds, or exchanges are free or if they’re subject to a fee\n*   How many days after a purchase you’ll accept returns, refunds, or exchanges\n*   How customers can return items shipped to them\n*   Whether you accept in-store returns\n*   A link to the full return and refund policy\n*   A custom message\n\nIf you accept free returns, refunds, or exchanges, Checkout highlights the policy for customers.\n\nThe following previews show how Checkout displays a return policy. In this example, it’s for purchases that can be returned by shipping them or in-store for a full refund (or exchange) for up to 60 days. You can display similar information for refunds.\n\n![Preview of return policies on Checkout](https://b.stripecdn.com/docs-statics-srv/assets/return-policy-modal.0c7a9ff71b8bc2c155842532801e06a8.png)\n\nPreview of return policies on Checkout.\n\n![Preview of a policy highlight on Checkout](https://b.stripecdn.com/docs-statics-srv/assets/policy-highlight.334828420693a33d376977a2c0fe5851.png)\n\nPreview of a policy highlight on Checkout.\n\n#### Collect a terms of service agreement![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBusinesses often require their customers to agree to their terms of service before they can pay. This might depend on the type of product or subscription. Checkout helps you collect the necessary agreement by requiring a customer to accept your terms before paying.\n\n![Collect terms of service agreement](https://b.stripecdn.com/docs-statics-srv/assets/terms-of-service-consent-collection.dec90bde6d1a3c5d4c0b3e7b8e644a52.png)\n\nCollect terms of service agreement\n\nYou can collect a terms of service agreement with Stripe Checkout when you create a Session:\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=2 \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\" \\  -d \"consent_collection[terms_of_service]\"=required \\   --data-urlencode \"custom_text[terms_of_service_acceptance][message]\"=\"I agree to the [Terms of Service]([https://example.com/terms)](https://example.com/terms))\"`\n\nWhen `consent_collection.terms_of_service='required'`, Checkout dynamically displays a checkbox for collecting the customer’s terms of service agreement. If `consent_collection.terms_of_service='none'`, Checkout won’t display the checkbox and won’t require customers to accept the terms of service. Before requiring agreement to your terms, set your terms of service URL in your business’ [Public details](https://dashboard.stripe.com/settings/public). Setting a privacy policy URL is optional—Checkout also links to your privacy policy when a URL to your Privacy policy is set in your [Public details](https://dashboard.stripe.com/settings/public).\n\nAfter a customer completes checkout, you can verify that the customer accepted your terms of service by looking at the Session object in the `checkout.session.completed` webhook, or by retrieving the Session using the API. When the terms are accepted, the Session’s [`consent.terms_of_service`](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-consent) field is set to `accepted`.\n\nYou can customize the text that appears next to the checkbox by using `custom_text.terms_of_service_acceptance`. You need to set `consent_collection.terms_of_service='required'`. To use your own terms, insert a Markdown link. For example: `I agree to the [Terms of Service](https://example.com/terms)`\n\n#### Warning\n\nConsult your legal and compliance advisors before making any changes to this text. You may not use this feature to display custom text that violates or creates ambiguity with the Stripe-generated text on Checkout, obligations under your Stripe agreement, Stripe policies, and applicable laws.\n\n#### Collect consent for promotional emails![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can send promotional emails to inform customers of new products and to share coupons and discounts. Before doing so, you must [collect their consent](https://docs.stripe.com/payments/checkout/promotional-emails-consent) to receive promotional emails.",
  "title": "Customize Checkout | Stripe Documentation",
  "description": "Customize the appearance and behavior of Checkout.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/during-payment/charge-shipping?payment-ui=payment-links",
  "markdown": "# Charge for shipping | Stripe DocumentationThe Stripe Docs logo\n\n## Create different shipping rates for your customers.\n\nShipping rates let you display various shipping options—like standard, express, and overnight—with more accurate delivery estimates. Charge your customer for shipping using different Stripe products, some of which require coding. Before you create a shipping rate, learn how to [collect billing and shipping addresses](https://docs.stripe.com/payments/collect-addresses).\n\n#### Third-party plugins\n\nIf you’re using a third-party application with Stripe (for example, [Thrivecart](https://support.thrivecart.com/help/setting-your-physical-fulfilment-shipping-options/) or [Shopify](https://help.shopify.com/en/manual/shipping/setting-up-and-managing-your-shipping/setting-up-shipping-rates)) and want to adjust the shipping rate, visit the docs for that service.\n\n1.  Create a [payment link](https://dashboard.stripe.com/test/payment-links/create) and select **Collect customers’ addresses** with the **Billing and shipping addresses** option.\n2.  Select the countries you ship to.\n3.  Click **Add shipping rates** to select an existing shipping rate or add a new one. You can only use shipping rates with one-time prices on payment links.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/create-payment-link-with-shipping-rate.299819920f996e92c28c393f7a9d91cc.png)\n\nAdd a new shipping rate for a payment link in the Dashboard",
  "title": "Charge for shipping | Stripe Documentation",
  "description": "This guide covers setting shipping rates for Stripe Payment Links, Checkout, and Elements.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/limit-subscriptions",
  "markdown": "# Limit customers to one subscription\n\n## Direct customers to manage their subscription when they already have one.\n\nYou can redirect customers that already have an active subscription to the [customer portal](https://docs.stripe.com/billing/subscriptions/customer-portal \"customer portal\") or your website to manage their subscription. This redirection works with [Checkout](https://docs.stripe.com/payments/checkout \"Stripe Checkout\") (including the [pricing table](https://docs.stripe.com/payments/checkout/pricing-table)) and Payment Links.\n\nStripe uses either the [Customer object](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-customer) (if you provide it in the checkout session) or the email address to detect if a customer already has an active subscription.\n\n![Manage subscription](https://b.stripecdn.com/docs-statics-srv/assets/manage-subscription.47036dfee120d3651fc3819c8b7abfbb.png)\n\n## Active subscription statuses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nActive subscriptions have the following [four statuses](https://docs.stripe.com/api/subscriptions/object#subscription_object-status):\n\n*   `Active`\n*   `PastDue`\n*   `Unpaid`\n*   `Paused`\n\n## Direct your customers to the customer portal or your website![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  [Activate the no-code customer portal](https://docs.stripe.com/customer-management/activate-no-code-customer-portal) to allow your customers to log in and manage their subscriptions. You need to keep the login link for the customer portal enabled to keep this feature enabled. Disabling the login link disables this feature, which means that customers can create multiple subscriptions.\n2.  Enable redirecting your customers to the customer portal in your [Checkout and Payment Links settings](https://dashboard.stripe.com/settings/checkout#subscriptions).\n\n![Subscription settings](https://b.stripecdn.com/docs-statics-srv/assets/subscription-settings.28f8c4efc7a1ca0efceeee8ebeae4786.png)",
  "title": "Limit customers to one subscription | Stripe Documentation",
  "description": "Direct customers to manage their subscription when they already have one.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/customer-portal",
  "markdown": "# Customer self-service with a customer portal\n\n## Allow your customers to manage their own accounts and subscriptions.\n\nProvide self-service functions to your customers by setting up a customer portal. You can configure it entirely in the Dashboard, or implement more powerful features, such as multiple configurations for different customers or for [connected accounts](https://docs.stripe.com/connect \"connected account\"), using the API.\n\nYou can fully automate many of your customer interactions by combining a customer portal with customer communications controlled by [Stripe Billing automations](https://docs.stripe.com/billing/automations). You create and manage automations in the Dashboard.\n\n## Get started with the customer portal![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](https://docs.stripe.com/customer-management/activate-no-code-customer-portal \"Set up a customer portal\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/No-code.3f0b11f68b584b5471c4f0922566ae29.svg)](https://docs.stripe.com/customer-management/activate-no-code-customer-portal \"Set up a customer portal\")\n\nCreate and configure a customer portal using the Dashboard.\n\n## Customer portal features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA customer portal allows your customers to self-manage their payment details, invoices, and subscriptions in one place.\n\n|     |     |\n| --- | --- |\n| See what your customers can do in the customer portal | **Key customer portal features**<br><br>*   Download invoices<br>*   Update payment methods<br>*   Cancel a subscription<br>*   Update customer information<br>*   Upgrade and downgrade subscriptions<br><br>[View demo](https://billing.stripe.com/customer-portal-demo) |\n\n| Feature | Description |\n| --- | --- |\n| Customer management | Offer your customers a self-serve method to:<br><br>*   Update billing information, including their tax IDs<br>*   Update payment methods<br>*   Update subscriptions<br>*   Cancel, pause, resume, and view subscriptions<br>*   Pay, download, and view current and past invoices |\n| Cancellation deflection | Reduce churn by offering your customers a coupon when they try to cancel their subscription. Customers who cancel anyway can share why. You can collect those reasons through webhooks or Stripe Sigma. |\n| Interoperability | Use the portal with other Stripe products:<br><br>*   [Checkout](https://docs.stripe.com/payments/checkout)<br>*   [Payment Links](https://docs.stripe.com/payment-links)<br>*   [Connect](https://docs.stripe.com/connect)<br>*   [Invoices](https://docs.stripe.com/invoicing)<br>*   [Billing](https://docs.stripe.com/billing)<br>*   [Stripe Tax](https://docs.stripe.com/tax) |\n| Localization support | Automatically localize the portal based on your customers’ preferred language. To view a localized version of the portal, set your browser’s default language to the language you want to preview. See the full list of supported languages in the table below. |\n| Customized branding | Configure the portal to match your branding, including your icon, logo, colors, and business information. |\n| Payment methods | Manage payment methods to make it convenient for your customers to pay you. See the full list of [supported payment methods](#supported-payment-methods). Read the [payment methods](https://docs.stripe.com/payments/payment-methods/integration-options) guide to learn more. |\n| Invoice-only support | Yes. You don’t need to use subscriptions for the customer portal to be useful for your business and your customers. To preview invoicing management in the portal, complete the following step<br><br>1.  Turn on test mode in the Dashboard (nothing you do in test mode affects your live setup).<br>2.  Go to the [Customers page](https://dashboard.stripe.com/customers), and select a customer.<br>3.  Create a new invoice for the customer.<br>4.  Click **Actions**, then **Open customer portal**. For security reasons, the quick view option isn’t available for live mode customers. |\n| Language support | **Languages supported by the customer portal**<br><br>*   Bulgarian (bg)<br>*   Chinese Simplified (zh)<br>*   Chinese Traditional—Hong Kong (zh-Hant-HK)<br>*   Chinese Traditional—Taiwan (zh-Hant-TW)<br>*   Croatian (hr)<br>*   Czech (cs)<br>*   Danish (da)<br>*   Dutch (nl)<br>*   English, US (en)<br>*   English, UK (en-GB)<br>*   Estonian (et)<br>*   Filipino (fil)<br>*   Finnish (fi)<br>*   French, France (fr)<br>*   French, Canada (fr-CA)<br>*   German (de)<br>*   Greek (el)<br>*   Hungarian (hu)<br>*   Indonesian (id)<br>*   Italian (it)<br>*   Japanese (ja)<br>*   Korean (ko)<br>*   Latvian (lv)<br>*   Lithuanian (lt)<br>*   Malay (ms)<br>*   Maltese (mt)<br>*   Norwegian Bokmål (nb-NO)<br>*   Polish (pl)<br>*   Portuguese, Portugal (pt)<br>*   Portuguese, Brazil (pt-BR)<br>*   Romanian (ro)<br>*   Russian (ru)<br>*   Slovak (sk)<br>*   Slovenian (sl)<br>*   Spanish, Spain (es)<br>*   Spanish, Latin America (es-419)<br>*   Swedish (sv)<br>*   Thai (th)<br>*   Turkish (tr)<br>*   Vietnamese (vi) |\n| Stripe Connect compatibility | The customer portal works with Stripe Connect. If you’re using the customer portal with Stripe Connect, make sure you configure the customer portal for the platform instead of a connected account. |\n| Ephemeral sessions | Portal sessions are temporary. New portal sessions expire after a 5 minute period. If a customer uses it within that time period, the session expires within 1 hour of the most recent activity. |\n\n### Customer portal limitations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe customer portal has the following limitations:\n\n*   If subscriptions use any of the following, customers can only _cancel_ them in the portal (they can’t _update_ such subscriptions):\n    \n    *   [Multiple products](https://docs.stripe.com/billing/subscriptions/multiple-products)\n    *   [Usage-based billing](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing)\n    *   Sending invoices for collection. Read more about the `collection_method` [parameter](https://docs.stripe.com/api/subscriptions/object#subscription_object-collection_method). If you use the Dashboard to create the subscription, you make this selection in the **Payment method** section.\n    *   Unsupported payment methods\n*   Customers can’t update or cancel subscriptions that currently have an update scheduled with a [subscription schedule](https://docs.stripe.com/billing/subscriptions/subscription-schedules).\n    \n*   Customers can only modify subscriptions if the new price has the same [tax behavior](https://docs.stripe.com/api/prices/create#create_price-tax_behavior) as the initial price. Additionally, no modifications are allowed if the tax behavior is `unspecified`, even if the tax behavior of the new price is `unspecified`. Learn more about the `tax_behavior` parameter and how it [relates to subscriptions](https://docs.stripe.com/billing/taxes/collect-taxes?tax-calculation=stripe-tax#product-and-price-setup).\n    \n*   The portal doesn’t display the payment method section if the portal doesn’t support the customer’s default payment method.\n    \n*   Customers can’t define multiple [Prices](https://docs.stripe.com/api/prices) with the same `product` and `recurring.interval` values. For example, to offer a magazine for 4.00 USD per month regular price and 3.00 USD per month for students, create a separate student magazine [Product](https://docs.stripe.com/api/product) version.\n    \n*   Customer modifications to a `trialing` subscription will end the free trial and create an invoice for immediate payment.\n    \n*   When you [allow customers to switch plans](https://docs.stripe.com/customer-management/configure-portal#configure-subscription-management), you can specify a maximum of 10 products for them to choose from.\n    \n\n## Supported payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| [Payment method](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type) | Description | Currencies | Merchant Country | Limitations |\n| --- | --- | --- | --- | --- |\n| ACH Direct Debit (`us_bank_account`) | Stripe users can receive bank transfers directly from customers. | USD | US  | None |\n| AU BECS Debit (`au_becs_debit`) | Bulk Electronic Clearing System (BECS) Direct Debit payments from customers with an Australian bank account. | AUD | AUS | None |\n| Boleto (`boleto`) | Boleto is a popular payment method in Brazil where customers pay by using a Boleto voucher with a generated number. | BRL | BR  | You must have a Brazilian Stripe account to accept Boleto from your customers. |\n| Cards (`card`) | Cards are one of the most popular ways to pay online, with broad global reach. There are different types of cards and several steps in the process. | Most currencies | Most locations | None |\n| Cash App Pay (`cashapp`) | Cash App is a popular consumer app in the US that allows customers to bank, invest, send, and receive money using their digital wallet. | USD | US  | None |\n| Link (`link`) | Link saves and autofills payment and shipping information for your customers so they don’t need to enter payment details manually. | Most currencies | Most locations | None |\n| PayPal (`paypal`) | PayPal is a payment method that enables customers in any country to pay using their PayPal account. | Most currencies | Europe | [Requires approval](https://docs.stripe.com/payments/paypal/set-up-future-payments#enable-recurring-payments-support-from-stripe-dashboard) |\n| Pre-authorized debits (`acss_debit`) | PADs are a low-cost, high volume batch processing network for financial transactions in Canada. | CAD, USD | CA, US | None |\n| SEPA direct debit (`sepa_debit`) | The Single Euro Payments Area (SEPA) is an initiative of the European Union to simplify payments within and across member countries. | EUR | AU, CA, Europe, HK, JP, MX, NZ, SG, US | None |\n| UK BACS Debit (`uk_bacs_debit`) | Bacs Direct Debit is a reusable, delayed notification payment method available to bank account holders from the United Kingdom. | GBP | UK  | You must have a UK Stripe account and a UK bank account to accept UK BACS Debit from your customers. |\n\n## Other hosted resources to use with the customer portal![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe offers multiple prebuilt resources so you can bill your customers quickly and maximize revenue retention and recovery.\n\n[](https://docs.stripe.com/payment-links \"Payment links\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/link.f0b2a66175b477e86a89e39eba75fb6c.svg)](https://docs.stripe.com/payment-links \"Payment links\")\n\nShare a link with your customers to get them signed up for your service through a payment page hosted by Stripe.\n\n[](https://docs.stripe.com/payments/checkout \"Checkout\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4abfc4af6b46ecac81ce96bc8ff0213e.svg)](https://docs.stripe.com/payments/checkout \"Checkout\")\n\nLet your customers sign up through a prebuilt payment form. You can embed it in your site or redirect your users to a page hosted by Stripe.\n\n[](https://docs.stripe.com/payments/checkout/pricing-table \"Pricing table\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/pricing-table.f5d39b6bee7ac0aa8441b103ac986988.png)](https://docs.stripe.com/payments/checkout/pricing-table \"Pricing table\")\n\nCreate a pricing table in the Stripe Dashboard and embed the table in your site. Your customers select a plan then pay through Stripe Checkout.",
  "title": "Customer self-service with a customer portal | Stripe Documentation",
  "description": "Allow your customers to manage their own accounts and subscriptions.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/promotion_codes",
  "markdown": "# Promotion Code | Stripe API Reference\n\n## [The Promotion Code object](https://docs.stripe.com/api/promotion_codes/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer.\n    \n*   Hash describing the coupon for this promotion code.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n\n### More attributes\n\n*   #### \n    \n    customernullable stringExpandable\n    \n*   #### \n    \n    expires\\_atnullable timestamp\n    \n\n*   #### \n    \n    max\\_redemptionsnullable integer\n    \n\nThe Promotion Code object\n\n```\n{  \"id\": \"promo_1MiM6KLkdIwHu7ixrIaX4wgn\",  \"object\": \"promotion_code\",  \"active\": true,  \"code\": \"A1H1Q1MG\",  \"coupon\": {    \"id\": \"nVJYDOag\",    \"object\": \"coupon\",    \"amount_off\": null,    \"created\": 1678040164,    \"currency\": null,    \"duration\": \"repeating\",    \"duration_in_months\": 3,    \"livemode\": false,    \"max_redemptions\": null,    \"metadata\": {},    \"name\": null,    \"percent_off\": 25.5,    \"redeem_by\": null,    \"times_redeemed\": 0,    \"valid\": true  },  \"created\": 1678040164,  \"customer\": null,  \"expires_at\": null,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {},  \"restrictions\": {    \"first_time_transaction\": false,    \"minimum_amount\": null,    \"minimum_amount_currency\": null  },  \"times_redeemed\": 0}\n```\n\n## [Create a promotion code](https://docs.stripe.com/api/promotion_codes/create)\n\nA promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.\n\n### Parameters\n\n*   The coupon for this promotion code.\n    \n*   The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for a specific customer. If left blank, we will generate one automatically.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns the promotion code object.\n\n```\ncurl https://api.stripe.com/v1/promotion_codes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d coupon=nVJYDOag\n```\n\n```\n{  \"id\": \"promo_1MiM6KLkdIwHu7ixrIaX4wgn\",  \"object\": \"promotion_code\",  \"active\": true,  \"code\": \"A1H1Q1MG\",  \"coupon\": {    \"id\": \"nVJYDOag\",    \"object\": \"coupon\",    \"amount_off\": null,    \"created\": 1678040164,    \"currency\": null,    \"duration\": \"repeating\",    \"duration_in_months\": 3,    \"livemode\": false,    \"max_redemptions\": null,    \"metadata\": {},    \"name\": null,    \"percent_off\": 25.5,    \"redeem_by\": null,    \"times_redeemed\": 0,    \"valid\": true  },  \"created\": 1678040164,  \"customer\": null,  \"expires_at\": null,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {},  \"restrictions\": {    \"first_time_transaction\": false,    \"minimum_amount\": null,    \"minimum_amount_currency\": null  },  \"times_redeemed\": 0}\n```\n\n## [Update a promotion code](https://docs.stripe.com/api/promotion_codes/update)\n\nUpdates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nThe updated promotion code object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/promotion\\_codes/:id\n\n```\ncurl https://api.stripe.com/v1/promotion_codes/promo_1MiM6KLkdIwHu7ixrIaX4wgn \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"promo_1MiM6KLkdIwHu7ixrIaX4wgn\",  \"object\": \"promotion_code\",  \"active\": true,  \"code\": \"A1H1Q1MG\",  \"coupon\": {    \"id\": \"nVJYDOag\",    \"object\": \"coupon\",    \"amount_off\": null,    \"created\": 1678040164,    \"currency\": null,    \"duration\": \"repeating\",    \"duration_in_months\": 3,    \"livemode\": false,    \"max_redemptions\": null,    \"metadata\": {},    \"name\": null,    \"percent_off\": 25.5,    \"redeem_by\": null,    \"times_redeemed\": 0,    \"valid\": true  },  \"created\": 1678040164,  \"customer\": null,  \"expires_at\": null,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {    \"order_id\": \"6735\"  },  \"restrictions\": {    \"first_time_transaction\": false,    \"minimum_amount\": null,    \"minimum_amount_currency\": null  },  \"times_redeemed\": 0}\n```\n\n## [Retrieve a promotion code](https://docs.stripe.com/api/promotion_codes/retrieve)\n\nRetrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing `code` use [list](https://docs.stripe.com/api/promotion_codes/list) with the desired `code`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a promotion code if a valid promotion code ID was provided. Raises [an error](#errors) otherwise.\n\nGET /v1/promotion\\_codes/:id\n\n```\ncurl https://api.stripe.com/v1/promotion_codes/promo_1MiM6KLkdIwHu7ixrIaX4wgn \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"promo_1MiM6KLkdIwHu7ixrIaX4wgn\",  \"object\": \"promotion_code\",  \"active\": true,  \"code\": \"A1H1Q1MG\",  \"coupon\": {    \"id\": \"nVJYDOag\",    \"object\": \"coupon\",    \"amount_off\": null,    \"created\": 1678040164,    \"currency\": null,    \"duration\": \"repeating\",    \"duration_in_months\": 3,    \"livemode\": false,    \"max_redemptions\": null,    \"metadata\": {},    \"name\": null,    \"percent_off\": 25.5,    \"redeem_by\": null,    \"times_redeemed\": 0,    \"valid\": true  },  \"created\": 1678040164,  \"customer\": null,  \"expires_at\": null,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {},  \"restrictions\": {    \"first_time_transaction\": false,    \"minimum_amount\": null,    \"minimum_amount_currency\": null  },  \"times_redeemed\": 0}\n```",
  "title": "Promotion Code | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/abandoned-carts",
  "markdown": "# Recover abandoned carts | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to recover abandoned Checkout pages and boost revenue.\n\n[Customers](https://docs.stripe.com/api/customers \"Customers\") may leave Checkout before completing their purchase. In e-commerce, this is known as [cart abandonment](https://docs.stripe.com/payments/checkout/compliant-promotional-emails). To help bring customers back to Checkout, create a recovery flow where you follow up with customers over email to complete their purchases. You can do this with webhooks (see below) or with [no-code Cart Recovery Emails](https://docs.stripe.com/no-code/cart-recovery-emails).\n\nCart abandonment emails fall into the broader category of _promotional emails_, which includes emails that inform customers of new products and that share coupons and discounts. Customers must agree to receive promotional emails before you can contact them.\n\nCheckout helps you:\n\n1.  Collect consent from customers to send them promotional emails.\n2.  Get notified when customers abandon Checkout so you can send cart abandonment emails.\n\n[](#collect-promotional-consent)\n\nConfigure Checkout to collect consent for promotional content. See the [full guide](https://docs.stripe.com/payments/checkout/promotional-emails-consent) for more details.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=2 \\  -d customer=  {{CUSTOMER_ID}}   \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\" \\  -d \"consent_collection[promotions]\"=auto`\n\nIf you collect the customer’s email address and request consent for promotional content before redirecting to Checkout, you may skip using `consent_collection[promotions]`.\n\n[](#configure-recovery)\n\nA Checkout Session becomes abandoned when it reaches its [expires\\_at](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-expires_at) timestamp and the buyer hasn’t completed checking out. When this occurs, the session is no longer accessible and Stripe fires the `checkout.session.expired` [webhook](https://docs.stripe.com/webhooks \"webhook\"), which you can listen to and try to bring the customer back to a new Checkout Session to complete their purchase.\n\nTo use this feature, enable `after_expiration.recovery` when you create the session.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1 \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"consent_collection[promotions]\"=auto \\  -d \"after_expiration[recovery][enabled]\"=true \\  -d \"after_expiration[recovery][allow_promotion_codes]\"=true`\n\n[](#webhook)\n\nListen to the `checkout.session.expired` webhook to be notified when customers abandon Checkout and sessions expire. When the session expires with recovery enabled, the webhook payload contains [after\\_expiration](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-after_expiration-recovery), which includes a URL denoted by `after_expiration.recovery.url` that you can embed in cart abandonment emails. When the customer opens this URL, **it creates a new Checkout Session that’s a copy of the original expired session**. The customer uses this copied session to complete the purchase on a Stripe-hosted payment page.\n\n#### Note\n\nFor security purposes, the recovery URL for a session is usable for 30 days, denoted by the `after_expiration.recovery.expires_at` timestamp.\n\n`{   \"id\": \"evt_123456789\",   \"object\": \"event\",   \"type\": \"checkout.session.expired\",   // ...other webhook attributes   \"data\": {     \"object\": {       \"id\": \"cs_12356789\",       \"object\": \"checkout.session\",       // ...other Checkout Session attributes       \"consent_collection\": {         \"promotions\": \"auto\",       },       \"consent\": {         \"promotions\": \"opt_in\"       },       \"after_expiration\": {         \"recovery\": {           \"enabled\": true,           \"url\": \"[https://buy.stripe.com/r/live_asAb1724](https://buy.stripe.com/r/live_asAb1724)\",           \"allow_promotion_code\": true,           \"expires_at\": 1622908282,         }       }     }   } }`\n\n[](#send-recovery-emails)\n\nTo send recovery emails, create a webhook handler for expired sessions and send an email that embeds the session’s recovery URL. One customer may abandon multiple Checkout Sessions, each triggering its own `checkout.session.expired` webhook so make sure to record when you send recovery emails to customers and avoid spamming them.\n\n``// Find your endpoint's secret in your Dashboard's webhook settings const endpointSecret = 'whsec_...';  // Using Express const app = require('express')();  // Use body-parser to retrieve the raw body as a buffer const bodyParser = require('body-parser');  const sendRecoveryEmail = (email, recoveryUrl) => {   // TODO: fill me in   console.log(\"Sending recovery email\", email, recoveryUrl); }  app.post('/webhook', bodyParser.raw({type: 'application/json'}), (request, response) => {   const payload = request.body;   const sig = request.headers['stripe-signature'];    let event;    try {     event = stripe.webhooks.constructEvent(payload, sig, endpointSecret);   } catch (err) {     return response.status(400).send(`Webhook Error: ${err.message}`);   }    // Handle the checkout.session.expired event   if (event.type === 'checkout.session.expired') {     const session = event.data.object;      // When a Checkout Session expires, the buyer's email is not returned in     // the webhook payload unless they give consent for promotional content     const email = session.customer_details?.email     const recoveryUrl = session.after_expiration?.recovery?.url      // Do nothing if the Checkout Session has no email or recovery URL     if (!email || !recoveryUrl) {       return response.status(200).end();     }      // Check if the buyer has consented to promotional emails and     // avoid spamming people who abandon Checkout multiple times     if (       session.consent?.promotions === 'opt_in'       && !hasSentRecoveryEmailToCustomer(email)     ) {       sendRecoveryEmail(email, recoveryUrl)     }   }   response.status(200).end(); });``",
  "title": "Recover abandoned carts | Stripe Documentation",
  "description": "Learn how to recover abandoned Checkout pages and boost revenue.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/free-trials",
  "markdown": "# Configure a free trial without collecting payment details\n\n## Use Stripe Checkout to collect a customer's information for a free trial without collecting their payment details.\n\nStripe Checkout lets you sign up customers for a free trial of a subscription service without collecting their payment details. At the end of the trial period you specify, use Stripe to configure a reminder email to collect a customer’s payment details.\n\n[](#section-1)\n\nCreate a Checkout Session with the following:\n\n*   A `subscription_data` parameter with:\n    *   `trial_period_days` set to the length (in days) of your free trial. In this example, the trial period is 30 days.\n    *   `trial_settings[end_behavior][missing_payment_method]` set to `cancel` (or `pause`) if the trial ends without a payment method attached. View [Use trial periods](https://docs.stripe.com/billing/subscriptions/trials#create-free-trials-without-payment) to learn more.\n*   The `payment_method_collection` parameter set to `if_required`. This tells Stripe that collecting payment information at checkout is optional.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d mode=subscription \\   --data-urlencode success_url=\"https://example.com/success\" \\   --data-urlencode cancel_url=\"https://example.com/cancel\" \\   -d \"line_items[0][price]\"={{PRICE_ID}} \\   -d \"line_items[0][quantity]\"=1 \\  -d \"subscription_data[trial_settings][end_behavior][missing_payment_method]\"=cancel \\  -d \"subscription_data[trial_period_days]\"=30 \\  -d payment_method_collection=if_required`\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/skip-payment-method-collection.44ef515675b659555a1d80475114f89f.png)\n\n[](#collect-payment)\n\nBefore the trial expires, collect payment details from your customer.\n\nUnder **Manage free trial messaging** in your [Subscriptions and emails settings](https://dashboard.stripe.com/settings/billing/automatic), you can choose to automatically send a reminder email when a customer’s trial is about to expire.\n\nNext, select the **Link to a Stripe-hosted page** option so the reminder email contains a link for the customer to add or update their payment details. We don’t send free trial reminder emails in test mode. Learn more about how to [set up free trial reminders](https://docs.stripe.com/billing/revenue-recovery/customer-emails#trial-ending-reminders).\n\nYou must comply with card network requirements when offering trials. Learn more about [compliance requirements for trials and promotion](https://docs.stripe.com/billing/subscriptions/trials#compliance).",
  "title": "Configure a free trial without collecting payment details | Stripe Documentation",
  "description": "Use Stripe Checkout to collect a customer's information for a free trial without collecting their payment details.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/guest-customers",
  "markdown": "# Guest customers | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to track the activity of guest customers.\n\nThe [Customer object](https://docs.stripe.com/api/customers) represents a customer of your business, and it helps tracking subscriptions and payments that belong to the same customer. Checkout Sessions that don’t create Customers are associated with [guest customers](https://dashboard.stripe.com/customers?type=guest) instead. Stripe automatically groups guest customers in the Dashboard based on them having used the same card, email, or phone to make payments. This unified view helps you review purchasing behavior, refunds, chargebacks, or fraud.\n\nCheckout supports passing in a [`customer`](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-customer) to enable you to [prefill customer information](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted#handling-existing-customers) on the Checkout page and to associate the payment or subscription with a specific customer.\n\nIf you don’t pass in a `customer`, you can set [`customer_creation`](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-customer_creation) to configure whether or not Checkout automatically creates a Customer object when the session is confirmed.\n\n## Managing and monitoring guest customers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nEven though you can’t manage or monitor guest customers in the same way as with Checkout Sessions that create Customers, you can still manage them and monitor their activity.\n\n### Grouping payments under guest customers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe use credit card number as the unique identifier to group credit card payments of your guest customers under the same guest identity. See the [guest customer support page](https://support.stripe.com/questions/guest-customer-faq) for additional details on the matching logic. If the same credit card was used by different guest customers (for example, two spouses using the same credit card to checkout at different times), all guest payments for that credit card show up together under one guest customer. Because we group by credit card, we consider it the same guest customer.\n\n### Updating your privacy policy or other privacy notices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou’re in the best position to know whether this feature is consistent with your privacy policy or other privacy notices. It’s a good practice to review your privacy notices and privacy policy when considering any new feature. Guest customers give you a view of your existing guest data, which can help you better detect fraud and help you manage customer service inquiries.\n\n### Exporting guest customer data from the Dashboard ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can export guest customer data from the [Customers](https://dashboard.stripe.com/customers) tab in the Dashboard. Guest customer information isn’t included in exports from the [Payments](https://dashboard.stripe.com/payments) tab.\n\n### Not seeing any guest customers in the Guests tab ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you don’t see any guest customers under the **Guests** tab, this is because your Stripe integration is passing a Customer ID when creating Checkout Sessions. We only create guest customers for payments without a specific Customer object associated with them.",
  "title": "Guest customers | Stripe Documentation",
  "description": "Learn how to track the activity of guest customers.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/discounts",
  "markdown": "# Add discounts for one-time payments with Checkout\n\n## Reduce the amount charged to a customer by discounting their subtotal with coupons and promotion codes.\n\nYou can use discounts in Checkout to reduce the amount charged to a customer for one-time payments. Coupons and promotion codes allow for great flexibility in how you define and use them. They can:\n\n*   Apply a discount to an entire purchase subtotal\n*   Apply a discount to specific products\n*   Reduce the total charged by a percentage or a flat amount\n*   Create customer-facing promotion codes on top of coupons to share directly with customers\n\nTo use coupons for discounting [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") with Checkout and Billing, see [Discounts for subscriptions](https://docs.stripe.com/billing/subscriptions/coupons).\n\n## Coupons![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCoupons specify a fixed value discount. You can create customer-facing promotion codes that map to a single underlying coupon.\n\nThis means that the codes `FALLPROMO` and `SPRINGPROMO` can both point to one 25% off coupon.\n\n### Create a coupon![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCoupons are created in the [Dashboard](https://dashboard.stripe.com/coupons) or with the [API](https://docs.stripe.com/api#coupons):\n\n`curl https://api.stripe.com/v1/coupons \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d percent_off=20 \\  -d duration=once`\n\nIf you want to create a session with an applied discount, pass the [coupon ID](https://docs.stripe.com/api/coupons/object#coupon_object-id) in the `coupon` parameter of the [discounts](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-discounts) array. Checkout currently supports up to one coupon or promotion code.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1 \\  -d \"discounts[0][coupon]\"=  {{COUPON_ID}}   \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n## Configure a coupon![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCoupons have the following parameters that you can use for one-time payments:\n\n*   `id`, a unique identifier for the coupon\n*   `currency`\n*   `percent_off` or `amount_off`\n*   `max_redemptions`\n*   `redeem_by`, the latest date at which this coupon can be applied\n*   `applies_to`, limits the products that the coupon applies to\n\n#### Note\n\nThe coupon object adds discounts to both one-time payments and subscriptions. Some coupon object parameters, like `duration`, only apply to [subscriptions](https://docs.stripe.com/billing/subscriptions/coupons).\n\n### Limit redemption usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `max_redemptions` and `redeem_by` values apply to the coupon across every application. For example, you can restrict a coupon to the first 50 usages of it, or you can make a coupon expire by a certain date.\n\n### Limit eligible products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can limit the products that are eligible for discounts using a coupon by adding the product IDs to the `applies_to` hash in the Coupon object. Any promotion codes that map to this coupon only apply to the list of eligible products.\n\n### Delete a coupon![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can delete coupons in the Dashboard or the API. Deleting a coupon prevents it from being applied to future transactions or customers.\n\nPromotion codes are customer-facing codes created on top of coupons. You can also specify additional restrictions that control when a customer can apply the promotion. You can share these codes with customers who can enter them into Checkout to apply a discount.\n\n### Create a promotion code![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo create a [promotion code](https://docs.stripe.com/api/promotion_codes), specify an existing `coupon` and any restrictions (for example, limiting it to a specific `customer`). If you have a specific code to give to your customer (for example, `FALL25OFF`), set the `code`. If you leave this field blank, we’ll generate a random `code` for you.\n\nThe `code` is case-insensitive and unique across active promotion codes for any customer. For example:\n\n*   You can create multiple customer-restricted promotion codes with the same `code`, but you can’t reuse that `code` for a promotion code redeemable by any customer.\n*   If you create a promotion code that is redeemable by any customer, you can’t create another active promotion code with the same `code`.\n*   You can create a promotion code with `code: NEWUSER`, inactivate it by passing `active: false`, and then create a new promotion code with `code: NEWUSER`.\n\nPromotion codes can be created in the coupons section of the [Dashboard](https://dashboard.stripe.com/coupons/create) or with the [API](https://docs.stripe.com/api#promotion_codes):\n\n`curl https://api.stripe.com/v1/promotion_codes \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d coupon={{COUPON_ID}} \\   -d code=VIPCODE`\n\nEnable user-redeemable promotion codes using the [allow\\_promotion\\_codes](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-allow_promotion_codes) parameter in a Checkout Session. This enables a field in Checkout to allow users to input promotion codes.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price_data][unit_amount]\"=2000 \\  -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\  -d \"line_items[0][price_data][currency]\"=usd \\  -d \"line_items[0][quantity]\"=1 \\  -d mode=payment \\  -d allow_promotion_codes=true \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\nWith Promotion Code object parameters, you can customize eligible customers, redemptions, and other limits.\n\n### Limit by customer![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo limit a promotion to a particular customer, specify a `customer` when creating the promotion code. If no customer is specified, the code can be redeemed by any customer.\n\n### Limit by first-time order![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can also limit the promotion code to first-time customers with the `first_time_transaction` parameter of the `restrictions` attribute. If the `customer` isn’t defined, or if a defined `customer` has no prior payments or non-void [invoices](https://docs.stripe.com/api/invoices \"invoices\"), it’s considered a first-time transaction.\n\n#### Note\n\nSessions that don’t create [Customers](https://docs.stripe.com/api/customers) instead create [Guest Customers](https://support.stripe.com/questions/guest-customer-faq) in the Dashboard. Promotion codes limited to first-time customers are still accepted for these Sessions.\n\n### Set a minimum amount![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith promotion codes, you can set a minimum transaction amount for eligible discount by configuring the `minimum_amount` and the `minimum_amount_currency` properties. Since promotion code restrictions are checked at redemption time, the minimum transaction amount only applies to the initial payment for a subscription.\n\n### Customize expirations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can set an expiration date on the promotion code using `expires_at`. If the underlying coupon already has `redeem_by` set, then the expiration date for the promotion code can’t be later than that of the coupon. If `promotion_code[expires_at]` isn’t specified, the coupon’s `redeem_by` automatically populates `expires_at`.\n\nFor example, you might have plans to support a coupon for a year, but you only want it to be redeemable for one week after a customer receives it. You would set `coupon[redeem_by]` to one year from now, and set each `promotion_code[expires_at]` to one week after it is created.\n\n### Limit redemptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can limit the number of redemptions by using `max_redemptions`, which works similarly to the coupon parameter. If the underlying coupon already has `max_redemptions` set, then the `max_redemptions` for the promotion code can’t be greater than that of the coupon.\n\nFor example, you might want a seasonal sale coupon to be redeemable by the first 50 customers, but the winter promotion can only use 20 of those redemptions. In this scenario, you would set `coupon[max_redemptions]: 50` and `promotion_code[max_redemptions]: 20`.\n\n### Inactive promotions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can set whether a promotion code is currently redeemable by using the `active` parameter. However, if the underlying coupon for a promotion code becomes invalid, all of its promotion codes become permanently inactive. Similarly, if a promotion code reaches its `max_redemptions` or `expires_at`, it becomes permanently inactive. You can’t reactivate these promotion codes.\n\n### Deleting promotions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can delete promotions in the Dashboard or the API. Deleting a promotion prevents it from being applied to future transactions or customers.",
  "title": "Add discounts for one-time payments with Checkout | Stripe Documentation",
  "description": "Discounts in Checkout allow you to reduce the amount charged to a customer for one-time payments by discounting their subtotal with coupons and promotion codes.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/cross-sells",
  "markdown": "# sells | Stripe DocumentationThe Stripe Docs logo\n\n## Cross-sells\n\n## Enable customers to purchase complementary products at checkout by using cross-sells.\n\n![Cross-sell product in Checkout](https://b.stripecdn.com/docs-statics-srv/assets/cross-sell-session.32236b96e980634a6c0060050eea5dbf.png)\n\nA cross-sell is a product that you can add to an order using Checkout.\n\nCross-sells enable customers to optionally purchase other related products using Checkout. Cross-sells can increase your average order value and revenue.\n\nFor Checkout to offer a product as a cross-sell, the product must meet the following criteria:\n\n*   The product must be associated with only a single [Price](https://docs.stripe.com/api/prices/object#price_object-product).\n*   The [currency](https://docs.stripe.com/api/prices/object#price_object-currency) of the cross-sell product’s price must match the currency of the other prices in the Checkout Session.\n*   If the cross-sell product’s price [type](https://docs.stripe.com/api/prices/object#price_object-type) is `recurring`, the Checkout Session must be in subscription mode and its recurring interval must match the recurring interval of the other prices in the Checkout Session.\n*   If you’re using [subscription upsells](https://docs.stripe.com/payments/checkout/upsells), cross-sells only support products with non-recurring prices. For example, you can cross-sell a one-time setup fee while also upselling a monthly subscription to annual billing.\n*   If you’re using [automatic taxes](https://docs.stripe.com/tax), cross-sells only support products with prices with specified [tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-behavior). You can either [set tax behavior for a price](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#setting-tax-behavior-on-a-price-(optional)) or set the default tax behavior for all prices under [Tax Settings](https://dashboard.stripe.com/test/settings/tax) in the Stripe Dashboard.\n\n## Create a cross-sell ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![Configure a cross-sell on the Product detail page](https://b.stripecdn.com/docs-statics-srv/assets/add-cross-sell.685564769c217a27f88b9ab9605d9c65.gif)\n\nConfigure a cross-sell on the Product detail page.\n\nYou can configure a cross-sell in the [Dashboard](https://dashboard.stripe.com/products?active=true) on the Product details page. Visit the Product details page for the product from which you want to cross-sell another complementary product. You’ll see a **Cross-sells** section with a dropdown menu containing your other Products. Select a Product with a single Price. After you configure it, all eligible Checkout Sessions cross-sell the product selected from the dropdown menu. For example, a customer purchasing a ‘Togethere Professional’ subscription would be cross-sold the ‘Professional Services: Deployment’ product.\n\n## Checkout experience ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn Checkout, buyers see an option to add the cross-sell to their purchase. If buyers add the cross-sell to the Checkout Session, they can also remove it. If they remove it, the option to add the cross-sell appears again.\n\n#### Note\n\nThe quantity of cross-sell line items cannot be adjusted. The current maximum is 1.\n\n![Customer preview of a cross-sell on the Product detail page](https://b.stripecdn.com/docs-statics-srv/assets/cross-sell-preview.cc9b1a4716015a18004f62de760cf29a.gif)\n\nCustomer preview.\n\n## Retrieve Checkout Session line items ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter a customer adds a cross-sell, the `line_items` for the Checkout Session update to reflect the addition. When [fulfilling your order](https://docs.stripe.com/checkout/fulfillment#create-payment-event-handler) using the `checkout.session.completed` webhook, make sure to [retrieve the line items](https://docs.stripe.com/api/checkout/sessions/line_items).\n\n## Remove a cross-sell ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo remove a cross-sell, click the **x** next to it. After you remove it, the product won’t be offered to any new Checkout Sessions.\n\n![Remove a cross-sell from the Product detail page](https://b.stripecdn.com/docs-statics-srv/assets/remove-cross-sell.a08765b1278a8187c282964f89641b92.gif)\n\nRemove a cross-sell.",
  "title": "Cross-sells | Stripe Documentation",
  "description": "Enable customers to purchase complementary products at checkout by using cross-sells.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/customer_sessions/object",
  "markdown": "# The Customer Session object | Stripe API Reference\n\n### Attributes\n\n*   The client secret of this Customer Session. Used on the client to set up secure access to the given `customer`.\n    \n    The client secret can be used to provide access to `customer` from your frontend. It should not be stored, logged, or exposed to anyone other than the relevant customer. Make sure that you have TLS enabled on any page that includes the client secret.\n    \n*   This hash defines which component is enabled and the features it supports.\n    \n*   The Customer the Customer Session was created for.\n    \n*   The timestamp at which this Customer Session will expire.\n    \n\n### More attributes\n\nThe Customer Session object\n\n```\n{  \"object\": \"customer_session\",  \"client_secret\": \"_POpxYpmkXdtttYtZQYhrsOJZ2RCQ9kCqqXRU6qrP5c4Jgje\",  \"components\": {    \"buy_button\": {      \"enabled\": false    },    \"pricing_table\": {      \"enabled\": true    }  },  \"customer\": \"cus_PO34b57IOUb83c\",  \"expires_at\": 1684790027,  \"livemode\": false}\n```\n\n## [Create a Customer Session](https://docs.stripe.com/api/customer_sessions/create)\n\nCreates a Customer Session object that includes a single-use client secret that you can use on your front-end to grant client-side API access for certain customer resources.\n\n### Parameters\n\n*   Configuration for each component. Exactly 1 component must be enabled.\n    \n*   The ID of an existing customer for which to create the Customer Session.\n    \n\n### Returns\n\nReturns a Customer Session object.\n\nPOST /v1/customer\\_sessions\n\n```\ncurl https://api.stripe.com/v1/customer_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_PO34b57IOUb83c \\  -d \"components[pricing_table][enabled]\"=true\n```\n\n```\n{  \"object\": \"customer_session\",  \"client_secret\": \"_POpxYpmkXdtttYtZQYhrsOJZ2RCQ9kCqqXRU6qrP5c4Jgje\",  \"components\": {    \"buy_button\": {      \"enabled\": false    },    \"pricing_table\": {      \"enabled\": true    }  },  \"customer\": \"cus_PO34b57IOUb83c\",  \"expires_at\": 1684790027,  \"livemode\": false}\n```\n\n## [Disputes](https://docs.stripe.com/api/disputes)\n\nA dispute occurs when a customer questions your charge with their card issuer. When this happens, you have the opportunity to respond to the dispute with evidence that shows that the charge is legitimate.\n\nRelated guide: [Disputes and fraud](https://docs.stripe.com/disputes)\n\n## [Events](https://docs.stripe.com/api/events)\n\nEvents are our way of letting you know when something interesting happens in your account. When an interesting event occurs, we create a new `Event` object. For example, when a charge succeeds, we create a `charge.succeeded` event, and when an invoice payment attempt fails, we create an `invoice.payment_failed` event. Certain API requests might create multiple events. For example, if you create a new subscription for a customer, you receive both a `customer.subscription.created` event and a `charge.succeeded` event.\n\nEvents occur when the state of another API resource changes. The event’s data field embeds the resource’s state at the time of the change. For example, a `charge.succeeded` event contains a charge, and an `invoice.payment_failed` event contains an invoice.\n\nAs with other API resources, you can use endpoints to retrieve an [individual event](#retrieve_event) or a [list of events](#list_events) from the API. We also have a separate [webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the `Event` objects directly to an endpoint on your server. You can manage webhooks in your [account settings](https://dashboard.stripe.com/account/webhooks). Learn how to [listen for events](https://docs.stripe.com/webhooks) so that your integration can automatically trigger reactions.\n\nWhen using [Connect](https://docs.stripe.com/connect), you can also receive event notifications that occur in connected accounts. For these events, there’s an additional `account` attribute in the received `Event` object.\n\nWe only guarantee access to events through the [Retrieve Event API](#retrieve_event) for 30 days.\n\n## [Files](https://docs.stripe.com/api/files)\n\nThis object represents files hosted on Stripe’s servers. You can upload files with the [create file](#create_file) request (for example, when uploading dispute evidence). Stripe also creates files independently (for example, the results of a [Sigma scheduled query](#scheduled_queries)).\n\nRelated guide: [File upload guide](https://docs.stripe.com/file-upload)\n\n## [File Links](https://docs.stripe.com/api/file_links)\n\nTo share the contents of a `File` object with non-Stripe users, you can create a `FileLink`. `FileLink`s contain a URL that you can use to retrieve the contents of the file without authentication.\n\n## [Mandates](https://docs.stripe.com/api/mandates)\n\nA Mandate is a record of the permission that your customer gives you to debit their payment method.\n\n## [Setup Attempts](https://docs.stripe.com/api/setup_attempts)\n\nA SetupAttempt describes one attempted confirmation of a SetupIntent, whether that confirmation is successful or unsuccessful. You can use SetupAttempts to inspect details of a specific attempt at setting up a payment method using a SetupIntent.\n\n## [Confirmation Token](https://docs.stripe.com/api/confirmation_tokens)\n\nConfirmationTokens help transport client side data collected by Stripe JS over to your server for confirming a PaymentIntent or SetupIntent. If the confirmation is successful, values present on the ConfirmationToken are written onto the Intent.\n\nTo learn more about how to use ConfirmationToken, visit the related guides:\n\n*   [Finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server)\n*   [Build two-step confirmation](https://docs.stripe.com/payments/build-a-two-step-confirmation).\n\n## [Tokens](https://docs.stripe.com/api/tokens)\n\nTokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. A token representing this information is returned to your server to use. Use our [recommended payments integrations](https://docs.stripe.com/payments) to perform this process on the client-side. This guarantees that no sensitive card data touches your server, and allows your integration to operate in a PCI-compliant way.\n\nIf you can’t use client-side tokenization, you can also create tokens using the API with either your publishable or secret API key. If your integration uses this method, you’re responsible for any PCI compliance that it might require, and you must keep your secret API key safe. Unlike with client-side tokenization, your customer’s information isn’t sent directly to Stripe, so we can’t determine how it’s handled or stored.\n\nYou can’t store or use tokens more than once. To store card or bank account information for later use, create [Customer](https://docs.stripe.com/api#customers) objects or [External accounts](https://docs.stripe.com/api#external_accounts). [Radar](https://docs.stripe.com/radar), our integrated solution for automatic fraud protection, performs best with integrations that use client-side tokenization.\n\nEndpoints\n\n[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_bank_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_card)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_cvc_update)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_person)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_pii)[GET/v1/tokens/:id](https://docs.stripe.com/api/tokens/retrieve)\n\n## [Cash Balance](https://docs.stripe.com/api/cash_balance)\n\nA customer’s `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The Customer Session object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/checkout/fulfillment",
  "markdown": "# Fulfill Checkout and Payment Link payments\n\n## Learn how to fulfill payments received with Checkout and Payment Links.\n\nWhen you receive a payment, you might need to take action to provide your customer with what they paid for. For example, you might need to grant them access to a service, or you might need to ship them physical goods. This process is known as fulfillment, and you have two ways to handle this process when using [Checkout](https://docs.stripe.com/payments/checkout \"Stripe Checkout\") and [Payment Links](https://docs.stripe.com/payment-links \"Payment Links\"):\n\n*   **Manually**: You can manually fulfill orders using information that Stripe makes available to you. For example, you can monitor the [Dashboard](https://docs.stripe.com/dashboard/basics), check payment notification emails, or look at reports and then fulfill orders.\n*   **Automatically**: You can build an automated fulfillment system. Recommended\n\nThe first option works for low volume or experimental ventures, but for most situations we recommend automating fulfillment. The rest of this guide shows you how to build an automatic fulfillment system.\n\n## Automatic fulfillment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe automatic fulfillment system outlined below uses a combination of [webhooks](https://docs.stripe.com/webhooks \"webhook\") and a redirect to your website to trigger fulfillment. You must use webhooks to make sure fulfillment happens for every payment, and redirects let your customers access services or fulfillment details immediately after paying.\n\n#### Note\n\nPayment Links use Checkout, so all of the information below applies to both Payment Links and Checkout unless otherwise noted.\n\n[](#create-fulfillment-function)\n\nCreate a function on your server to fulfill Checkout payments. Webhooks trigger this function, and it’s called when customers are sent to your website after completing Checkout. This guide refers to this function as `fulfill_checkout`, but you can name the function whatever you wish.\n\nYour `fulfill_checkout` function must:\n\n1.  Correctly handle being called multiple times with the same Checkout Session ID.\n2.  Accept a [Checkout Session](https://docs.stripe.com/api/checkout/sessions \"checkout session\") ID as an argument.\n3.  Retrieve the Checkout Session from the API with the [line\\_items](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-line_items) property [expanded](https://docs.stripe.com/api/expanding_objects).\n4.  Check the [payment\\_status](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-payment_status) property to determine if it requires fulfillment.\n5.  Perform fulfillment of the line items.\n6.  Record fulfillment status for the provided Checkout Session.\n\nUse the code below as a starting point for your `fulfill_checkout` function. The `TODO` comments indicate any functionality you must implement.\n\n#### Note\n\nThe code snippets below might name the `fulfill_checkout` function `fulfillCheckout` or `FulfillCheckout` depending on the language selected, but they all represent the same function.\n\n`def fulfill_checkout(session_id)   # Set your secret key. Remember to switch to your live secret key in production.   # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys)   Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n  `puts \"Fullfilling Checkout Session #{session_id}\"    # TODO: Make this function safe to run multiple times,   # even concurrently, with the same session ID    # TODO: Make sure fulfillment hasn't already been   # peformed for this Checkout Session    # Retrieve the Checkout Session from the API with line_items expanded   checkout_session = Stripe::Checkout::Session.retrieve({     id: session_id,     expand: ['line_items'],   })    # Check the Checkout Session's payment_status property   # to determine if fulfillment should be peformed   if checkout_session.payment_status != 'unpaid'     # TODO: Perform fulfillment of the line items      # TODO: Record/save fulfillment status for this     # Checkout Session   end end`\n\n#### Note\n\nDepending on the payment methods you accept and your business needs, you might want to have your `fulfill_checkout` function do the following:\n\n*   Provision access to services.\n*   Trigger shipment of goods.\n*   Save a copy of the payment details and line items in your own database.\n*   Send the customer a custom receipt email if you don’t have [Stripe’s receipts](https://docs.stripe.com/receipts) enabled.\n*   Reconcile line items and quantities purchased if you allow customers to adjust quantities in Checkout.\n*   Update inventory or stock records.\n\n[\n\n## Create a payment event handler![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-payment-event-handler)\n\nTo trigger fulfillment, create a webhook event handler to listen for payment events and trigger your `fulfill_checkout` function.\n\nWhen someone pays you with Checkout, it creates a `checkout.session.completed` event. Set up an endpoint on your server to accept, process, and confirm receipt of these events.\n\nSome payment methods aren’t instant, such as [ACH direct debit](https://docs.stripe.com/payments/ach-debit) and other bank transfers. Funds won’t be immediately available when Checkout completes. Delayed payment methods generate a `checkout.session.async_payment_succeeded` event when payment succeeds later.\n\n#### Note\n\nThe webhook secret (`whsec_...`) shown in the code below comes from either the Stripe CLI or your webhook endpoint. You can use the Stripe CLI for local testing, and Stripe uses a webhook endpoint to send events to your handler when it’s running on a server. See the next section for more details.\n\n`require 'sinatra'  # Use the secret provided by Stripe CLI for local testing # or your webhook endpoint's secret. endpoint_secret = 'whsec_...'  post '/webhook' do   event = nil    # Verify webhook signature and extract the event   # See [https://stripe.com/docs/webhooks#verify-events](https://stripe.com/docs/webhooks#verify-events) for more information.   begin     sig_header = request.env['HTTP_STRIPE_SIGNATURE']     payload = request.body.read     event = Stripe::Webhook.construct_event(payload, sig_header, endpoint_secret)   rescue JSON::ParserError => e     # Invalid payload     return status 400   rescue Stripe::SignatureVerificationError => e     # Invalid signature     return status 400   end    if event['type'] == 'checkout.session.completed' ||   event['type'] == 'checkout.session.async_payment_succeeded'     fulfill_checkout(event['data']['object']['id'])   end    status 200 end`\n\nYou might also want to listen for and handle `checkout.session.async_payment_failed` events. For example, you can send an email to your customer when a delayed payment fails.\n\n[\n\n## Test your event handler locally![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#test-event-handler)\n\nThe quickest way to develop and test your webhook event handler is with the [Stripe CLI](https://docs.stripe.com/stripe-cli). If you don’t have the Stripe CLI, follow the [install guide](https://docs.stripe.com/stripe-cli#install) to get started.\n\nWhen the Stripe CLI is installed, you can test your event handler locally. Run your server (for example, on `localhost:4242`), then run the [stripe listen](https://docs.stripe.com/cli/listen) command to have the Stripe CLI forward events to your local server:\n\n`stripe listen --forward-to localhost:4242/webhook  Ready! Your webhook signing secret is 'whsec_<REDACTED>' (^C to quit)`\n\nAdd the webhook secret (`whsec_...`) to your event handling code, then test fulfillment by going through Checkout as a customer:\n\n*   Press the checkout button that takes you to Checkout, or visit your Payment Link\n*   Provide the following test data in Checkout:\n    *   Enter `4242 4242 4242 4242` as the card number\n    *   Enter any future date for card expiry\n    *   Enter any 3-digit number for CVV\n    *   Enter any billing postal code (`90210`)\n*   Press the **Pay** button\n\nWhen the payment completes, verify the following:\n\n*   On your command line, where `stripe listen` is running, it shows a `checkout.session.completed` event forwarded to your local server.\n*   Your server logs show the expected output from your `fulfill_checkout` function.\n\n[](#create-webhook-endpoint)\n\nAfter testing locally, get your webhook event handler up and running on your server. Next, [create a webhook endpoint](https://docs.stripe.com/webhooks#register-webhook) to send `checkout.session.completed` events to your server, then test the Checkout flow again.\n\n[\n\n## Configure a landing page URL![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#configure-landing-page-url)\n\nConfigure Checkout to send your customer to a page on your website after they complete Checkout. Include the `{CHECKOUT_SESSION_ID}` placeholder in your page’s URL, which is replaced with the Checkout Session ID when your customer is redirected from Checkout.\n\n### Hosted Checkout ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor Checkout Sessions with the default [ui\\_mode](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-ui_mode) of `hosted`, set the `success_url`.\n\n#### Note\n\nWhen you have a webhook endpoint set up to listen for `checkout.session.completed` events and you set a `success_url`, Checkout waits for your server to respond to the webhook event delivery before redirecting your customer. If you use this approach, make sure your server responds to `checkout.session.completed` events as quickly as possible.\n\n### Checkout with a non-default `ui_mode` ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor Checkout Sessions with [ui\\_mode](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-ui_mode) not set to `hosted`, set the `return_url`.\n\n### Payment Links ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor Payment Links you create with the API, set the [after\\_completion.redirect.url](https://docs.stripe.com/api/payment_links/payment_links/create#create_payment_link-after_completion-redirect-url).\n\nFor Payment Links you [create in the Dashboard](https://dashboard.stripe.com/payment-links/create):\n\n1.  Go to the **After Payment** tab.\n2.  Select **Don’t show confirmation page**.\n3.  Provide the URL to your landing page that includes the `{CHECKOUT_SESSION_ID}` placeholder (for example, `https://example.com/after-checkout?session_id={CHECKOUT_SESSION_ID}`)\n\n[\n\n## Trigger fulfillment on your landing page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#trigger-fulfillment-on-landing-page)\n\n[Listening to webhooks](#create-payment-event-handler) is required to make sure you always trigger fulfillment for every payment, but webhooks can sometimes be delayed. To optimize your payment flow and guarantee immediate fulfillment when your customer is present, trigger fulfillment from your landing page as well.\n\nUse the Checkout Session ID from the URL you specified in the previous step to do the following:\n\n1.  When your server receives a request for your Checkout landing page, extract the Checkout Session ID from the URL.\n2.  Run your `fulfill_checkout` function with the ID provided.\n3.  Render the page after the fulfillment attempt is complete.\n\nWhen you render your landing page you can display the following:\n\n*   Details from the fulfillment process.\n*   Links or information about services the customer now has access to.\n*   Shipping or logistical details for physical goods.\n\n#### Webhooks are required\n\nYou can’t rely on triggering fulfillment only from your Checkout landing page, because your customers aren’t guaranteed to visit that page. For example, someone can pay successfully in Checkout and then lose their connection to the internet before your landing page loads.\n\n[Set up a webhook event handler](#create-payment-event-handler) to have Stripe send payment events directly to your server, bypassing the client entirely. Webhooks are the most reliable way to know when you get paid. If webhook event delivery fails, we [retry several times](https://docs.stripe.com/webhooks#retries).",
  "title": "Fulfill Checkout and Payment Link payments | Stripe Documentation",
  "description": "Learn how to fulfill payments received with Checkout and Payment Links.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/payment_links/payment_links/object",
  "markdown": "# The Payment Link object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Whether the payment link’s `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated.\n    \n*   #### \n    \n    line\\_itemsobjectExpandable\n    \n    The line items representing what is being sold.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The public URL that can be shared with customers.\n    \n\n### More attributes\n\n*   #### \n    \n    allow\\_promotion\\_codesboolean\n    \n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n*   #### \n    \n    application\\_fee\\_amountnullable integerConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentnullable floatConnect only\n    \n\n*   #### \n    \n    billing\\_address\\_collectionenum\n    \n*   #### \n    \n    consent\\_collectionnullable object\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    inactive\\_messagenullable string\n    \n*   #### \n    \n    invoice\\_creationnullable object\n    \n\n*   #### \n    \n    on\\_behalf\\_ofnullable stringExpandableConnect only\n    \n*   #### \n    \n    payment\\_intent\\_datanullable object\n    \n*   #### \n    \n    payment\\_method\\_collectionenum\n    \n*   #### \n    \n    payment\\_method\\_typesnullable array of enums\n    \n*   #### \n    \n    phone\\_number\\_collectionobject\n    \n*   #### \n    \n    restrictionsnullable object\n    \n*   #### \n    \n    shipping\\_address\\_collectionnullable object\n    \n*   #### \n    \n    shipping\\_optionsarray of objects\n    \n\n*   #### \n    \n    subscription\\_datanullable object\n    \n\n*   #### \n    \n    transfer\\_datanullable objectConnect only\n    \n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {},  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```\n\n## [Create a payment link](https://docs.stripe.com/api/payment_links/payment_links/create)\n\nCreates a payment link.\n\n### Parameters\n\n*   #### \n    \n    line\\_itemsarray of objectsRequired\n    \n    The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. Metadata associated with this Payment Link will automatically be copied to [checkout sessions](https://docs.stripe.com/api/checkout/sessions) created by this payment link.\n    \n\n### More parameters\n\n*   #### \n    \n    allow\\_promotion\\_codesboolean\n    \n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    billing\\_address\\_collectionenum\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n*   #### \n    \n    payment\\_intent\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_collectionenum\n    \n*   #### \n    \n    payment\\_method\\_typesarray of enums\n    \n*   #### \n    \n    phone\\_number\\_collectionobject\n    \n\n*   #### \n    \n    shipping\\_address\\_collectionobject\n    \n*   #### \n    \n    shipping\\_optionsarray of objects\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the payment link.\n\n```\ncurl https://api.stripe.com/v1/payment_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"line_items[0][price]\"=price_1MoC3TLkdIwHu7ixcIbKelAC \\  -d \"line_items[0][quantity]\"=1\n```\n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {},  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```\n\n## [Update a payment link](https://docs.stripe.com/api/payment_links/payment_links/update)\n\nUpdates a payment link.\n\n### Parameters\n\n*   Whether the payment link’s `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated.\n    \n*   #### \n    \n    line\\_itemsarray of objects\n    \n    The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. Metadata associated with this Payment Link will automatically be copied to [checkout sessions](https://docs.stripe.com/api/checkout/sessions) created by this payment link.\n    \n\n### More parameters\n\n*   #### \n    \n    allow\\_promotion\\_codesboolean\n    \n\n*   #### \n    \n    billing\\_address\\_collectionenum\n    \n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    payment\\_intent\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_collectionenum\n    \n*   #### \n    \n    payment\\_method\\_typesarray of enums\n    \n\n*   #### \n    \n    shipping\\_address\\_collectionobject\n    \n\n### Returns\n\nUpdated payment link.\n\nPOST /v1/payment\\_links/:id\n\n```\ncurl https://api.stripe.com/v1/payment_links/plink_1MoC3ULkdIwHu7ixZjtGpVl2 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```\n\n## [Retrieve a payment link's line items](https://docs.stripe.com/api/payment_links/line_items)\n\nWhen retrieving a payment link, there is an includable **line\\_items** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` payment link line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more line items are available, the resulting array will be empty.\n\nGET /v1/payment\\_links/:id/line\\_items\n\n```\ncurl https://api.stripe.com/v1/payment_links/plink_1N4CWjLkdIwHu7ix2Y2F1kqb/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"li_NpsHNiHSaDeU0X\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 1099,      \"amount_tax\": 0,      \"amount_total\": 1099,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1N4AEsLkdIwHu7ix7Ssho8Cl\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1683237782,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NppuJWzzNnD5Ut\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 1    }  ],  \"has_more\": false,  \"url\": \"/v1/payment_links/plink_1N4CWjLkdIwHu7ix2Y2F1kqb/line_items\"}\n```\n\n## [Retrieve payment link](https://docs.stripe.com/api/payment_links/payment_links/retrieve)\n\nRetrieve a payment link.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the payment link.\n\nGET /v1/payment\\_links/:id\n\n```\ncurl https://api.stripe.com/v1/payment_links/plink_1MoC3ULkdIwHu7ixZjtGpVl2 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {},  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```",
  "title": "The Payment Link object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/payment_links/payment_links/update",
  "markdown": "# Update a payment link | Stripe API Reference\n\nUpdates a payment link.\n\n### Parameters\n\n*   Whether the payment link’s `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated.\n    \n*   #### \n    \n    line\\_itemsarray of objects\n    \n    The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. Metadata associated with this Payment Link will automatically be copied to [checkout sessions](https://docs.stripe.com/api/checkout/sessions) created by this payment link.\n    \n\n### More parameters\n\n*   #### \n    \n    allow\\_promotion\\_codesboolean\n    \n\n*   #### \n    \n    billing\\_address\\_collectionenum\n    \n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    payment\\_intent\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_collectionenum\n    \n*   #### \n    \n    payment\\_method\\_typesarray of enums\n    \n\n*   #### \n    \n    shipping\\_address\\_collectionobject\n    \n\n### Returns\n\nUpdated payment link.\n\nPOST /v1/payment\\_links/:id\n\n```\ncurl https://api.stripe.com/v1/payment_links/plink_1MoC3ULkdIwHu7ixZjtGpVl2 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```\n\n## [Retrieve a payment link's line items](https://docs.stripe.com/api/payment_links/line_items)\n\nWhen retrieving a payment link, there is an includable **line\\_items** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` payment link line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more line items are available, the resulting array will be empty.\n\nGET /v1/payment\\_links/:id/line\\_items\n\n```\ncurl https://api.stripe.com/v1/payment_links/plink_1N4CWjLkdIwHu7ix2Y2F1kqb/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"li_NpsHNiHSaDeU0X\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 1099,      \"amount_tax\": 0,      \"amount_total\": 1099,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1N4AEsLkdIwHu7ix7Ssho8Cl\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1683237782,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NppuJWzzNnD5Ut\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 1    }  ],  \"has_more\": false,  \"url\": \"/v1/payment_links/plink_1N4CWjLkdIwHu7ix2Y2F1kqb/line_items\"}\n```\n\n## [Retrieve payment link](https://docs.stripe.com/api/payment_links/payment_links/retrieve)\n\nRetrieve a payment link.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the payment link.\n\nGET /v1/payment\\_links/:id\n\n```\ncurl https://api.stripe.com/v1/payment_links/plink_1MoC3ULkdIwHu7ixZjtGpVl2 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {},  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```\n\n## [List all payment links](https://docs.stripe.com/api/payment_links/payment_links/list)\n\nReturns a list of your payment links.\n\n### Parameters\n\n*   Only return payment links that are active or inactive (e.g., pass `false` to list all inactive payment links).\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` payment links, starting after payment link `starting_after`. Each entry in the array is a separate payment link object. If no more payment links are available, the resulting array will be empty. This request should never raise an error.\n\n```\ncurl -G https://api.stripe.com/v1/payment_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/payment_links\",  \"has_more\": false,  \"data\": [    {      \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",      \"object\": \"payment_link\",      \"active\": true,      \"after_completion\": {        \"hosted_confirmation\": {          \"custom_message\": null        },        \"type\": \"hosted_confirmation\"      },      \"allow_promotion_codes\": false,      \"application_fee_amount\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null      },      \"billing_address_collection\": \"auto\",      \"consent_collection\": null,      \"currency\": \"usd\",      \"custom_fields\": [],      \"custom_text\": {        \"shipping_address\": null,        \"submit\": null      },      \"customer_creation\": \"if_required\",      \"invoice_creation\": {        \"enabled\": false,        \"invoice_data\": {          \"account_tax_ids\": null,          \"custom_fields\": null,          \"description\": null,          \"footer\": null,          \"issuer\": null,          \"metadata\": {},          \"rendering_options\": null        }      },      \"livemode\": false,      \"metadata\": {},      \"on_behalf_of\": null,      \"payment_intent_data\": null,      \"payment_method_collection\": \"always\",      \"payment_method_types\": null,      \"phone_number_collection\": {        \"enabled\": false      },      \"shipping_address_collection\": null,      \"shipping_options\": [],      \"submit_type\": \"auto\",      \"subscription_data\": {        \"description\": null,        \"invoice_settings\": {          \"issuer\": {            \"type\": \"self\"          }        },        \"trial_period_days\": null      },      \"tax_id_collection\": {        \"enabled\": false      },      \"transfer_data\": null,      \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"    }    {...}    {...}  ],}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Update a payment link | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/payment-method-rules",
  "markdown": "# Payment method rules | Stripe DocumentationThe Stripe Docs logo\n\n## Control when payment methods are available to your buyers.\n\nPayment method rules allow you to set conditions on payment methods directly from the Dashboard without any custom logic or code. Rules allow you to:\n\n*   Hide or show a payment method if the order amount is over or under a certain amount\n*   Hide or show a payment method for buyers in certain countries or using certain currencies\n\n## Payment method rules considerations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNon-card payment methods can help offer improved unit economics compared to cards and they often drive higher AOV and conversion rates.\n\nWhen you turn on these payment methods, you might want to apply specific business logic to control when payment methods are available to your buyers. With payment method rules, you can apply these insights directly in Dashboard—no code required.\n\nPayment method rules is compatible with Stripe [A/B Testing](https://docs.stripe.com/payments/a-b-testing). This allows you to run A/B tests using the targeting criteria you select or test additional criteria. For example, you can test the impact of only showing a specific payment method when the price is greater than a certain dollar amount.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   You must use either the Stripe [Payment Element](https://docs.stripe.com/payments/payment-element) or [Checkout](https://docs.stripe.com/payments/checkout).\n*   You must use [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) to enable additional payment methods from the Stripe Dashboard, which won’t require any code changes.\n    *   To set up dynamic payment methods for direct users, see the [payment method integration](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) guide.\n    *   Connect To set up dynamic payment methods for Connect platforms, see [Upgrading to dynamic payment methods](https://docs.stripe.com/connect/dynamic-payment-methods).\n\n[](#set-rule-conditions)\n\n1.  In your Dashboard, go to [Payment methods settings](https://dashboard.stripe.com/test/settings/payment_methods).\n2.  In the payment method row, select **Create custom rules**.\n    \n    ![Klarna Row](https://b.stripecdn.com/docs-statics-srv/assets/pmt-klarna-row.931f50a1bd9a4d872657f0372dead2d8.png)\n    \n3.  Set custom rules (for example, a new minimum of 100 USD for Klarna), then select **Apply Overrides**. The configured payment method now has a **Customized** tag. A customized payment method appears only in Checkout or Payment Element sessions that meet its targeting criteria.\n\n![A checkout page showing Klarna.](https://b.stripecdn.com/docs-statics-srv/assets/pmt-checkout-klarna-present.fab9fed6ec4dfc1e187b38beb944fc65.png)\n\nBefore\n\n![A checkout page with Klarna hidden.](https://b.stripecdn.com/docs-statics-srv/assets/pmt-checkout-klarna-hidden.e1d585ab6318861be8aa813cdde91fb4.png)\n\nAfter",
  "title": "Payment method rules | Stripe Documentation",
  "description": "Control when payment methods are available to your buyers.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/payment-method-configurations",
  "markdown": "# Payment method configurations | Stripe DocumentationThe Stripe Docs logo\n\n## Create different sets of payment methods to display to customers based on specific checkout scenarios.\n\nPayment method configurations allows [dynamic payment method](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) users to display different sets of payment methods to customers for specific checkout scenarios.\n\nYou can create a configuration to:\n\n*   Display a unique set of payment methods for certain products\n*   Enable a set of payment methods for your one-time payment checkout flow and a different set of payment methods for your subscription checkout flow\n*   Connect Offer connected accounts access to additional payment methods for a different subscription fee\n\nAfter you create a payment method configuration, you can toggle each payment method on or off for a given scenario directly in Dashboard—no code required. Then at checkout, select which configuration you want to use. Stripe ranks the payment methods that are enabled within that configuration to optimize for conversion.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   You must use either the Stripe [Payment Element](https://docs.stripe.com/payments/payment-element) or [Checkout](https://docs.stripe.com/payments/checkout).\n*   You must use [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) to enable additional payment methods from the Stripe Dashboard, which won’t require any code changes.\n    *   To set up dynamic payment methods for direct users, see the [payment method integration](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) guide.\n    *   Connect To set up dynamic payment methods for Connect platforms, see [Upgrading to dynamic payment methods](https://docs.stripe.com/connect/dynamic-payment-methods).\n\n[](#create-payment-method-configuration)\n\nBy default, you have one payment method configuration called **Default Config**. You can create additional payment method configurations using both the Stripe Dashboard and the API.\n\n1.  In your Dashboard, go to [Payment methods settings](https://dashboard.stripe.com/test/settings/payment_methods).\n2.  In the **Configuration Management** section, click the overflow menu (), then select **Create a configuration**.\n3.  Give your new configuration a name.\n4.  Click **Save configuration**.\n\n![Payment method configuration page](https://b.stripecdn.com/docs-statics-srv/assets/payment-method-configurations.a766550ad4dd95854a7a9b9f178e1d45.png)\n\nThe page displays your new configuration. All payment methods are initially disabled by default.\n\nTo switch between configurations, use the **Select configuration** dropdown near the top of the page.\n\n[](#enable-payment-methods)\n\nIn the Dashboard, open the configuration and turn on the payment methods that you want to make available to buyers when using that configuration. A buyer sees only payment methods that are turned on and compatible with the payment location and currency.\n\n#### Note\n\nSome payment methods don’t show edit controls until you expand them.\n\n[](#section-4)\n\nCopy the `configuration ID` in the Dashboard from the configuration you want to use in your checkout flow.\n\nIf you’re using the [deferred intent creation integration path](https://docs.stripe.com/payments/accept-a-payment-deferred), pass the `payment_method_configuration` ID when you create your Payment Element component. The Payment Element automatically pulls the payment methods associated with that configuration and ranks them to best convert buyers.\n\n`const options = {    mode: 'payment',    amount: 1099,    currency: 'usd',    payment_method_configuration: 'pmc_234' }`\n\nIf you aren’t using a Payment Element, pass the `payment_method_configuration` ID when you [create a Checkout session](https://docs.stripe.com/api/checkout/sessions/create).\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d mode=payment \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1 \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\" \\  -d currency=usd \\  -d payment_method_configuration=pmc_234`\n\nTo see how your payment methods appear to customers, enter a transaction ID or set an order amount and currency in the [Dashboard](https://dashboard.stripe.com/settings/payment_methods/review).\n\n[](#create-payment-intent)\n\nCreate a PaymentIntent on your server using the payment method configuration.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d \"automatic_payment_methods[enabled]\"=true \\  -d payment_method_configuration=pmc_123`\n\nIn the latest version of the API, the `automatic_payment_methods` parameter is optional because it’s enabled by default.",
  "title": "Payment method configurations | Stripe Documentation",
  "description": "Create different sets of payment methods to display to customers based on specific checkout scenarios.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/payment-methods/pmd-registration",
  "markdown": "# Register domains for payment methods\n\n## Register and verify domains to use payment methods (including Link, Apple Pay, and Google Pay) in Elements or Checkout's embeddable payment form.\n\nTo use certain payment methods with [Elements](https://docs.stripe.com/payments/elements \"Stripe Elements\") or [Checkout’s embeddable payment form](https://docs.stripe.com/payments/checkout/how-checkout-works?payment-ui=embedded-form), you must register every web domain that will show the payment method. This includes registering top-level domains and subdomains. For example, if you have the domain **yourdomain.com** and subdomains like **shop.yourdomain.com** and **www.yourdomain.com**, this guide explains how to register them.\n\nAfter you register a domain, that domain is ready for use with other payment methods that you might enable in the future.\n\nThe following payment methods require registration:\n\n*   Google Pay\n*   Link\n*   PayPal\n*   Apple Pay (additional verification step required)\n\n#### Apple Pay and merchant validation\n\nThe Apple Pay documentation describes their process of “merchant validation,\" which Stripe handles for you behind the scenes. You don’t need to create an Apple Merchant ID or CSR. Instead, follow the steps in this guide.\n\n## Testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou also need to register domains for testing. When testing locally, you can use a tool such as [ngrok](https://ngrok.com/) to get an HTTPS domain. You can either register in test mode, or register in live mode and the domain will also be registered in test mode automatically. Remember to register your domains in live mode before going live.\n\nYou can create and manage domains in the Dashboard on the [Payment method domains page](https://dashboard.stripe.com/settings/payment_method_domains) for use in production and testing.\n\n#### Using Connect\n\nConnect platforms that create direct charges must use the API to manage domains for their [connected accounts](#register-a-domain-using-connect), not the Stripe Dashboard.\n\n## Register your domain![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo register a domain:\n\n1.  On the [Payment method domains page](https://dashboard.stripe.com/settings/payment_method_domains), click **Add a new domain**.\n2.  Enter your domain name.\n3.  Click **Save and continue**.\n4.  If you’re setting up Apple Pay, verify ownership of your domain with Apple by following the steps described later on this page.\n5.  (Optional) Repeat steps 1-4 for additional domains that you need to register.\n\nAfter completing these steps, your domain shows up on the Payment method domains page.\n\n### Using an iframe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   When using an iframe, its origin must match the top-level origin, except in Safari 17+. Two pages have the same origin if the protocol, host (full domain name), and port (if specified) are the same for both pages.\n*   When using a cross-origin iframe in Safari 17+ you must specify the `allow=“payment”` attribute. To enable Apple Pay, you must also register the source domain that the iframe loads.\n\n## Verify ownership of your domain with Apple Pay ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDuring registration, Stripe automatically attempts to verify ownership of your domain with Apple. If the domain isn’t already verified, register your domain and then follow these steps to verify your registered domain with Apple Pay.\n\n#### Common mistake\n\nApple attempts to request your domain association file, so it needs to be publicly available to [Apple’s servers](https://developer.apple.com/documentation/apple_pay_on_the_web/setting_up_your_server#3179116).\n\n1.  Download the [domain association file](https://stripe.com/files/apple-pay/apple-developer-merchantid-domain-association).\n2.  Host the file at `/.well-known/apple-developer-merchantid-domain-association`. For example, if you register `https://yourdomain.com`, make that file available at `https://yourdomain.com/.well-known/apple-developer-merchantid-domain-association`.\n3.  Click **Verify**.\n\n## Manage your domain![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can see a list of all of your domains in the Dashboard.\n\nTo disable a domain, click the row action and then click **Disable**. If a domain is disabled, the payment methods no longer appear in Elements or Checkout’s embeddable payment form on that domain.\n\nTo enable a disabled domain, click the row action and then click **Enable**.\n\n## Register your domain while using Connect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnect platforms must register all domains where Elements or Checkout’s embeddable payment form displays the payment methods listed above. The domain where the charge is being run needs to be registered for the user running the charge.\n\nIf the platform creates [direct charges](https://docs.stripe.com/connect/direct-charges), use your platform’s secret key to authenticate the request and set the Stripe-Account header to your connected account’s Stripe ID.\n\nIf the platform creates [destination charges](https://docs.stripe.com/connect/destination-charges) or [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers), use your platform’s secret key to authenticate the request and omit the Stripe-Account header.\n\nLearn more about [Making API calls for connected accounts](https://docs.stripe.com/connect/authentication).\n\n`curl https://api.stripe.com/v1/payment_method_domains \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d domain_name=\"example.com\"`",
  "title": "Register domains for payment methods | Stripe Documentation",
  "description": "Register and verify domains to use payment methods (including Link, Apple Pay, and Google Pay) in Elements or Checkout's embeddable payment form.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/cards",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Cards\n\n## Learn more about accepting card payments with Stripe.\n\nCards are linked to a debit or credit account at a bank. To complete a payment online, customers enter their card information at checkout. [Cards are enabled](https://docs.stripe.com/payments/payment-methods/integration-options#low-code) by default and are supported by all Stripe products. You can manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow.\n\n## The payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA customer initiates a card payment at checkout by entering their credit card information. Depending on their card network and country location, customers have some card functionalities like additional security verification steps.\n\n![A flowchart showing the three required and one optional step for a customer to pay with card.](https://b.stripecdn.com/docs-statics-srv/assets/pay-with-card.059eb99f8cad148c1aea3bb2a29b8284.svg)\n\nCards can act as the funding source for other Stripe payment products and methods like [Link](https://docs.stripe.com/payments/link) and [wallets](https://docs.stripe.com/payments/wallets). For instance, customers can leverage Link to save their card payment data for fast checkout with any merchant that has Link enabled.\n\nWith wallets, customers can store their card details in a [digital wallet](https://docs.stripe.com/payments/payment-methods \"digital wallet\"). From your end, their payment method is managed using a `wallet`, but for the customer, the transaction shows up in their card history as a charge from their digital wallet provider.\n\n## Supported card brands ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe supports several card brands, from large global networks like Visa and Mastercard to local networks like Cartes Bancaires in France or Interac in Canada. When you integrate Stripe, you can begin accepting a diversity of card brands without any additional configurations, including:\n\n*   American Express\n*   China UnionPay (CUP)\n*   Discover & Diners Club\n*   eftpos Australia\n*   Japan Credit Bureau (JCB)\n*   Mastercard\n*   Visa\n\nSome card brands require additional configuration, such as [Cartes Bancaires](https://docs.stripe.com/payments/cartes-bancaires) and [Interac](https://docs.stripe.com/terminal/payments/regional?integration-country=CA#interac-payments).\n\n### Online card brand capabilities ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following table describes some of the different features and restrictions of each card brand online, including limitations on countries where Stripe users can accept the brand (Stripe Account Country), countries where most cardholders of the brand are located (Customer Country) and support for key features like 3D Secure Authentication, and [Wallets](https://docs.stripe.com/payments/wallets) (like Apple Pay and Google Pay).\n\n#### Note\n\nStripe supports processing payments in [135+ currencies](https://docs.stripe.com/currencies), but some card brand networks have limitations on [supported currencies](https://docs.stripe.com/currencies#presentment-currencies) that charges can be made with.\n\n| Card Brand | Stripe Account Country | Customer Country | 3D Secure Authentication | Wallets |\n| --- | --- | --- | --- | --- |\n| **Visa** | All countries | Global |     |     |\n| **Mastercard** | All countries | Global |     |     |\n| **American Express** | All countries except Brazil, Malaysia, Thailand, and the United Arab Emirates | Global, except India1 |     |     |\n| **Discover & Diners Club** | Canada, Japan, United Kingdom, United States, and the following European Economic Area countries: Austria, Belgium, Cyprus, Denmark, Estonia, Finland, France, Germany, Greece, Ireland, Italy, Latvia, Lithuania, Luxembourg, Malta, Netherlands, Norway, Poland, Portugal, Slovakia, Slovenia, Spain, Sweden, and Switzerland | Global |     |     |\n| **China UnionPay** | Australia, Canada, Hong Kong, Malaysia, New Zealand, Singapore, United Kingdom, United States, Switzerland, and all countries in the European Economic Area except Croatia, Iceland, and Lichtenstein | Global |     | Not supported |\n| **Japan Credit Bureau (JCB)** | Australia, Canada, Hong Kong, Japan, New Zealand, Singapore, Switzerland, United Kingdom, United States, and all countries in the European Economic Area except Iceland | Global | Hong Kong, Japan, Singapore, Switzerland, United Kingdom, and all countries in the European Economic Area except Iceland |     |\n| **Cartes Bancaires** | All countries in the [SEPA](https://en.wikipedia.org/wiki/Single_Euro_Payments_Area) region | France |     | Not supported |\n| **eftpos** | Australia | Australia | Not supported, payments will be routed to the co-brand network | Not supported |\n\n### Exclude card brands ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can disallow the use of specific card brands in the following ways:\n\n*   If you use Stripe Radar, [set up a rule](https://docs.stripe.com/radar/rules) to reject the desired brands.\n*   Add custom client-side code that checks the [brand](https://docs.stripe.com/api/cards/object#card_object-brand) of a card.\n*   Use the Payment Element to [filter cards by brand](https://docs.stripe.com/payments/customize-payment-methods#filter-card-brands).\n\n## Geographic considerations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe, along with other platforms, offer a solid infrastructure that handles secure payments and complies with specific regulations from different regions. This becomes particularly important with the roll-out of Strong Customer Authentication (SCA) rules in regulated markets like Europe and India, wherein additional verification steps are usually necessary.\n\nIt’s essential to ensure your Stripe integration is lined up with SCA rules and 3D Secure (3DS) criteria. Moreover, adjusting your approach to suit regional nuances—like installment payments and card brand preferences—is vital for seamless, compliant, and user-centered transactions.\n\n### SCA and 3D Secure ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSome banks, especially in regulated regions like Europe and India, might prompt the customer to authenticate a purchase (for example, by texting the customer a code to enter on the bank’s website). This authentication step is part of [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") (SCA) Requirements. Making sure that your integration meets SCA requirements for 3DS can sometimes require extra steps.\n\n[SCA](https://docs.stripe.com/strong-customer-authentication), a rule in effect as of September 14, 2019, as part of PSD2 regulation in Europe, requires changes to how your European customers authenticate online payments. Card payments require a different user experience, namely [3DS](https://docs.stripe.com/payments/3d-secure), to meet SCA requirements.\n\nStripe supports 3DS by default in Stripe Checkout, Payment Links, and a Hosted Invoice Page. You can configure your integration to use 3DS with Subscriptions and [Connect](https://docs.stripe.com/connect \"Connect\") with the following:\n\n*   [Payment Intents API](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\")\n*   [Setup Intents API](https://docs.stripe.com/api/setup_intents \"Setup Intents API\")\n*   Elements\n*   Mobile SDKs\n\n### Installments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSome regions have card brands that support installment payments - which are managed by the card issuer and not by creating Subscriptions or using SetupIntents with Stripe.\n\nIf you want to create recurring payments and your region or card network doesn’t support [Messes sin interesses](https://docs.stripe.com/payments/mx-installments) or Installments in Brazil, see how to [set up future payments](https://docs.stripe.com/payments/save-and-reuse) or [Subscriptions](https://docs.stripe.com/billing/subscriptions/overview).\n\n### Card brand choice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe European Union requires businesses to allow their customers the option to pick which card brand processes their transaction because cards in the EU might have both a local network, like Cartes Bancaires, and an affiliated card network, like Visa or Mastercard. You can enable this choice using Elements or Payments APIs so that [customers can choose which card brand](https://docs.stripe.com/co-badged-cards-compliance) processes their payment.\n\n### Accept card payments in India ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Reserve Bank of India (RBI) has specific regulations for online transactions that apply to Stripe accounts in India. Stripe Support includes a consolidated list of important resources, for many payment methods in the [India FAQs](https://support.stripe.com/questions/india-faq).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Integrate card payment methods](https://docs.stripe.com/payments/payment-methods/integration-options)\n*   [Understand card updates and change default payment methods](https://docs.stripe.com/payments/cards/overview#card-updates)\n*   [Customize the way PaymentElements handle cards](https://docs.stripe.com/payments/customize-payment-methods)",
  "title": "Cards | Stripe Documentation",
  "description": "Learn more about accepting card payments with Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/sources/credit-transfers",
  "markdown": "# Credit transfers (Sources) | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about bank transfers with Stripe.\n\n#### Warning\n\nBank transfers let customers send money to you directly from their bank account. Bank transfers are often used by:\n\n*   Software or services businesses accepting large, one-off payments from other businesses.\n*   Businesses that want a low-cost alternative to cards for large one-time consumer payments, like car or auction purchases.\n\nBank transfers might not be a good fit for your business if:\n\n*   You accept many low value transactions. Customers have to initiate bank transfers through their bank account, and can send the wrong amount.\n*   You need payments to be completed at a specific time. It might take a customer hours or even days to send payment through their bank and bank transfers have varying speeds by market\n*   You frequently send refunds. Most bank transfer methods don’t support refunds directly. To refund a transaction, Stripe contacts the customer to find the best way to refund them. The customer might not always respond.\n\n## Payment experience![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAt checkout, you instruct the customer to send funds to an account number provided by Stripe (known as a “virtual account number”). The customer initiates the transfer from their bank’s site, app, ATM, or in-person branch.\n\n![Figure describing the four step payment flow. First, customer elects pay by bank transfer. Next, they receive a virtual bank account number created by Stripe. Then, they send payment through their bank to the virtual account number. Finally, they are notified payment is complete.](https://b.stripecdn.com/docs-statics-srv/assets/payment_flow.eb89dee4d8cf3a2bd038b6c790fd0cf4.svg)\n\nSome bank transfer methods let you control the amount the customer sends, or reuse virtual account numbers.\n\n## Product support![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Payment method | Customer country | PaymentIntents | Checkout | Connect | Invoicing | Subscriptions | Payment Element | Payment Links | Mobile Payment Element |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| [Multibanco (beta)](https://docs.stripe.com/sources/multibanco) | Portugal |     |     |     |     |     |     |     |     |\n\n## Additional bank transfer methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe is expanding support for bank transfers to the PaymentIntents API, including automatic reconciliation and refunds. You can read more on [Bank Transfer Payments](https://docs.stripe.com/payments/bank-transfers).\n\n*   JPY bank transfers in Japan\n*   GBP bank transfers in the UK\n*   EUR bank transfers in SEPA countries\n*   MXN bank transfers in Mexico\n*   USD bank transfers in the US\n\nPlease [contact us](https://support.stripe.com/contact) if you’re interested in joining one of these betas or would like to request another bank transfer method.",
  "title": "Credit transfers (Sources) | Stripe Documentation",
  "description": "Learn about bank transfers with Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/local-markets/korea",
  "markdown": "# Korean payment methods | Stripe DocumentationThe Stripe Docs logo\n\n## Korean payment methodsBeta\n\n## Accept wallets and all local cards in South Korea without a local entity.\n\nYou can localize your customer experience and accept payments from the majority of payment methods available in Korea without a local Korean entity by using Stripe and our local processor partner.\n\nCard usage is popular in Korea, with many different card issuers but not a single predominant brand. Customers typically pay by selecting their card issuer and authenticating through their card or bank’s app rather than manually entering their card details. Wallets are also becoming more popular in Korea. To provide a familiar experience to customers and increase conversion rates, offer a selection of local wallets and cards.\n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCustomers who pay with a local card are redirected to the local processor to select their issuer. In this demo, the customer is paying with their Shinhan card.\n\nAfter the customer enters their information in Stripe’s checkout page and clicks **Pay**, they’re redirected to the checkout page of the payment method provider or local processor to complete the payment.\n\n## Available payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can accept popular local wallets and all local cards.\n\nPopular local wallets include:\n\n*   [Naver Pay](https://pay.naver.com/)\n*   [Kakao Pay](https://www.kakaopay.com/)\n*   [Samsung Pay](https://www.samsung.com/us/apps/samsung-wallet/)\n*   [PayCo](https://www.payco.com/)\n\nAll locally issued cards are supported, including:\n\n*   [Shinhan Card](https://www.shinhancard.com/)\n*   [Hyundai Card](https://www.hyundaicard.com/)\n*   [Samsung Card](https://www.samsungcard.com/company/english/main/UHPPCI0245M0.jsp)\n\n#### Caution\n\nMake sure that in providing goods and services to Korean customers, your business complies with Korean legal and tax requirements. Use Stripe Tax to [collect tax in Korea](https://docs.stripe.com/tax/supported-countries/asia-pacific/south-korea).\n\n*   **Customer locations**\n    \n    Korea\n    \n*   **Presentment currency**\n    \n    KRW\n    \n*   **Payment confirmation**\n    \n    Customer-authenticated\n    \n*   **Payment method family**\n    \n    Local markets\n    \n*   **Recurring payments**\n    \n    Yes\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    Yes\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / Yes\n    \n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Korean payment methods and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Korean payment methods. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Korean payment methods from the Dashboard:\n\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\n### Integrate through the API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can also use the [Payment Intents API](https://docs.stripe.com/payments/payment-intents) to accept payments from Korean customers using local cards and local payment methods. Follow our guide to [test your integration’s redirect-handling logic by simulating a payment that uses a redirect flow](https://docs.stripe.com/testing?testing-method=payment-methods#redirects).\n\n## Payment process![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustomers who elect to pay with Korean cards or payment methods are redirected to the local processor or underlying payment method provider’s checkout page as applicable, where they [authorize the transaction](https://docs.stripe.com/payments/payment-methods#customer-actions). After the payment is approved, funds are available in your Stripe account after 4 days.\n\nWe currently support the all local Korean cards and the majority of Korean payment methods\n\n## Installments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLocal card issuers in Korea may offer installments on purchases 50,000 KRW and above. This enables customers to pay for their purchase over time, for example, to complete the payment over 3 months. Installments are popular with customers who want to purchase goods with higher order values.\n\nInstallments are solely between customers and their card issuers. As a business, you receive the full amount for your purchase up front, and your customer is responsible for completing the installment payments to the issuer. In the event that your customer is unable to complete their installments to their issuer, you keep the funds.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayments made with Korean payment methods can only be submitted for refund within 365 calendar days from the date of the original charge. After 365 days, it’s no longer possible to refund the charge.\n\n## Fraud and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLocal cards and payment methods in Korea enforce strong authentication, which helps reduce the risk of fraud or unrecognized payments. Customers have up to 365 calendar days from the date of purchase to file a dispute. Stripe may request you to provide information and documentation in cases of customer disputes. After a customer files a dispute, you have up to 5 days to submit evidence upon notification. Make sure you comply promptly with these requests. When using Korean payment methods, you must make a reasonable effort to detect fraud or unauthorized transactions, and to minimize disputes.",
  "title": "Korean payment methods | Stripe Documentation",
  "description": "Accept wallets and all local cards in South Korea without a local entity.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/real-time",
  "markdown": "# Real-time payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about real-time payments with Stripe.\n\nReal-time payment methods let customers directly transfer money from their bank account or alternate funding source using an authenticating intermediary, like a phone number. Because this payment method type increases transaction speeds, it can improve conversion rates. Stripe supports real-time payments in Brazil, Singapore, Thailand, Sweden, and India.\n\n## Payment process ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe real-time payment method process is as follows:\n\n1.  Stripe sends the customer an identifier that lists the payable amount.\n2.  The customer makes the payment through their application or third-party service.\n3.  The application or third-party service communicates with the customers bank to secure the funds.\n\nWhen a customer uses a real-time payment method, their statement lists the application or third-party service as the payment type.\n\n## Product and country support ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following table lists what products and which countries support each real-time payment method:\n\n| Payment method | Customer country | Payment Intents | Checkout | Connect | Invoicing | Subscriptions |\n| --- | --- | --- | --- | --- | --- | --- |\n| [Pix](https://docs.stripe.com/payments/pix) | Brazil |     |     |     |     |     |\n| [Pay by Bank](https://docs.stripe.com/payments/pay-by-bank) | United Kingdom |     |     |     |     |     |\n| [PayNow](https://docs.stripe.com/payments/paynow) | Singapore |     |     |     | \\*  | \\*  |\n| [PromptPay](https://docs.stripe.com/payments/promptpay) | Thailand |     |     |     | \\*  | \\*  |\n| [Swish](https://docs.stripe.com/payments/swish) | Sweden |     |     |     |     |     |\n| UPI | India |     |     |     |     |     |\n\n\\* Invoices and subscriptions only support the `send_invoice` [collection method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method).",
  "title": "Real-time payments | Stripe Documentation",
  "description": "Learn about real-time payments with Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/hosted-invoice-page/scheduled-payments",
  "markdown": "# Scheduled payments | Stripe DocumentationThe Stripe Docs logo\n\n## Let your customers schedule their payments through the Hosted Invoice Page.\n\nStripe offers flexibility by enabling your customers to schedule payments for a future date through the [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page). The scheduled payments feature lets your customers take action immediately so that they won’t forget to pay. Your customers can also go back to the Hosted Invoice Page at any time and update their payment method and or scheduled date.\n\n#### Note\n\nThe scheduled payments feature is currently only available in the US.\n\n![Allow your customer to schedule their payments](https://b.stripecdn.com/docs-statics-srv/assets/hip-scheduled-payment-web-mobile.0729fa213232ddd1c6470c88d9ad661b.png)\n\nAllow your customers to schedule their payments\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFrom the [Invoice template](https://dashboard.stripe.com/settings/billing/invoice), you can enable or disable scheduled payments for all invoices, including those that are outstanding. You can’t leverage the Stripe API to toggle the scheduled payments feature, or receive webhooks when an end merchant schedules a payment.\n\n![Turn on the scheduled payments feature for your customers](https://b.stripecdn.com/docs-statics-srv/assets/settings-scheduled-payments.313042ca8b7e49ee4fa08a0c3c50b8cf.png)\n\nTurn on the scheduled payments feature for your customers\n\nIf your customer chooses to schedule their payment, the invoice appears on your [Invoices page](https://dashboard.stripe.com/test/invoices) under **Scheduled**. A badge also appears next to the invoice that indicates the invoice’s scheduled status. Hovering over the badge tells you the invoice’s scheduled and estimated delivery dates.\n\n## End customer features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAn end customer that receives a Stripe invoice and pays it through the Hosted Invoice Page can:\n\n*   Choose whether to initiate payment now, or on a future date.\n*   See the invoice due date using the calendar popup.\n*   Know the estimated date a payment will reach your account.\n*   Be warned if the payment delivery is past the due date.\n*   Cancel or edit the scheduled payment before the due date.\n\n#### Note\n\nYour customers can still choose to schedule payments past the due date.\n\n![A past due payment delivery](https://b.stripecdn.com/docs-statics-srv/assets/hip-scheduled-payment-past-due.a868bc3e45e003425cf46cdf2711342b.png)\n\nA past due payment delivery\n\n## Email notifications ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe sends email notifications to your customers when a payment has been scheduled, and 3 days before the payment initiates (to make sure that they have enough funds). Both emails contain a link to the Hosted Invoice Page for reference.\n\n#### Note\n\nIf a customer doesn’t have an associated email, they won’t receive payment reminders.\n\nAfter Stripe initiates the payment, the customer receives an email receipt. You can also configure Stripe to send email notifications upon failed payment attempts, or if your customer’s card on file is about to expire. To learn more, see [Send email reminders](https://docs.stripe.com/invoicing/send-email).\n\n![Invoicing email notifications](https://b.stripecdn.com/docs-statics-srv/assets/hip-scheduled-payment-reminder.69e7aefd8919ce80950bca3727ebfe46.png)\n\nInvoicing email notifications\n\n## Limitations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour customer faces certain limitations when they use the scheduled payments feature.\n\n### Collection method ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   The scheduled payments feature is supported only when [collection\\_method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method) is set to `send_invoice`.\n\n### Payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   Only credit cards are supported.\n    \n*   Apple and Google Pay aren’t supported.\n    \n*   International cards might be declined due to regulatory requirements for step-up authentication (3DS). (We email the customer in these instances.)\n    \n\n### Invoice due dates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   The scheduled payments feature isn’t available if the invoice is due the same day, next day, or is already past due.\n    \n*   You can’t schedule a payment that’s 60 days or more out from the current date. For example, you can’t schedule a payment for February 21, 2022, if the current date is December 23, 2021.",
  "title": "Scheduled payments | Stripe Documentation",
  "description": "Let your customers schedule their payments through the Hosted Invoice Page.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/integration/automatic-advancement-collection",
  "markdown": "# Automatic invoice advancement | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how Stripe Invoicing handles automatic advancement and collection.\n\nUnless you explicitly disable it, invoices you create in the [Dashboard](https://dashboard.stripe.com/invoices) ​automatically finalize when they leave the draft state. Invoices you create with the API, however, ​​won’t automatically finalize. You must turn on automatic collection by setting the [auto\\_advance](https://docs.stripe.com/api/invoices/update#update_invoice-auto_advance) property on the invoice to `true`. You must also configure a webhook endpoint to receive their associated events. When you turn `auto_advance` to `false`, you’re responsible for transitioning the invoice between statuses. To learn more, see [Webhooks and finalizing invoices](https://docs.stripe.com/billing/subscriptions/webhooks#understand).\n\n#### Note\n\nWhen you turn on automatic collection, Stripe does everything to drive the invoice towards payment—including automatically finalizing draft invoices after one hour. During this wait period, the invoice shows a **Scheduled** status.\n\n## Update automatic advancement ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can toggle the `auto_advance` property on `draft` and `open` invoices. Automatic advancement and collection ​​never occur on invoices that are marked `uncollectible`, `void`, or `paid`. For these invoices, `auto_advance` is always set to `false`:\n\n`curl https://api.stripe.com/v1/invoices/id \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d auto_advance=false`\n\n## Pause automatic advancement ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn some cases, you might want to stop Stripe from automatically advancing your invoices toward collection. For example, if you want to:\n\n*   Use your own business logic to manage the lifecycle of an invoice.\n*   ​Decide if and when to send invoice emails on a per-invoice basis.\n\n​​In both of these cases, use the `auto_advance` property to disable the automatic advancement and collection behavior.\n\n## Automatic advancement feature comparison ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you set `auto_advance` to `false`, Stripe disables most of the automatic features for Invoicing—leaving collection up to you. The following table outlines some key changes in the behavior of automatic collection, depending on whether `auto_advance` is set to `true` or `false`:\n\n| Feature | True | False |\n| --- | --- | --- |\n| Finalize drafts to open | (after [approximately 1-hour](https://docs.stripe.com/billing/subscriptions/overview#subscription-lifecycle)) |     |\n| Emailing invoices |     |     |\n| Attempting payments |     |     |\n| Retries (email and charge) |     |     |\n| Invoice reminder emails |     |     |\n| 3D Secure reminder emails |     |     |\n| Email receipts |     |     |\n\n#### Legend![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   \\= Can be enabled depending on your settings.\n*   \\= Configurable in your settings.\n*   \\= Not enabled. The invoice isn’t automatically transitioned.",
  "title": "Automatic invoice advancement | Stripe Documentation",
  "description": "Learn how Stripe Invoicing handles automatic advancement and collection.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/au-becs-debit",
  "markdown": "# BECS Direct Debit payments in Australia\n\n## Learn how to accept payments with BECS Direct Debit in Australia.\n\nStripe users in Australia can accept Bulk Electronic Clearing System (BECS) Direct Debit payments from customers with an Australian bank account.\n\nAs part of the payment process, businesses must collect a mandate that includes the customer’s bank account details (account holder’s name, the Bank-State-Branch or BSB number, and the bank account number) and must also accept the mandate Service Agreement. This gives the business an authorization to debit the account. Stripe can generate this mandate for businesses to present to their customers.\n\nBECS Direct Debit is a [reusable](https://docs.stripe.com/payments/payment-methods#usage), [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method. This means that it can take up to three business days to receive notification on the success or failure of a payment after you initiate a debit from the customer’s account.\n\nFor new users, BECS Direct Debit transactions have a default limit of 1,500 AUD per transaction and 4,500 AUD per week. If you need higher limits, contact [support](https://support.stripe.com/contact).\n\n*   **Customer locations**\n    \n    Australia\n    \n*   **Presentment currency**\n    \n    AUD\n    \n*   **Payment confirmation**\n    \n    Business-intiated\n    \n*   **Payment method family**\n    \n    Bank debits\n    \n*   **Recurring payments**\n    \n    Yes\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Verification Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUsing BECS Direct Debit requires you to complete additional [identity verification](https://support.stripe.com/questions/common-questions-about-stripe-identity#how-verification-works) steps. We prompt you to complete these steps after you request access from the [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods). If you require further assistance, please [contact support](https://support.stripe.com/contact).\n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\nCustomer selects BECS Direct Debit at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/account-info.6df4a503f8d05d1d9ddd20a6f15172df.svg)\n\nCustomer completes the Direct Debit Request\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\nCustomer gets notification that the payment is complete\n\nPreview the payment flow using the test information below or view the [sample code](https://github.com/stripe-samples/au-becs-debit-payment) on GitHub.\n\n*   Any name\n*   Any email address\n*   Test BSB number: 000-000\n*   Test bank account number: 000123456\n\n[Preview BECS payment flow](https://codesandbox.io/p/devbox/stripe-sample-au-becs-debit-payment-v0n15)\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate BECS Direct Debit and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable BECS Direct Debit. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\nIf you prefer to manually list payment methods or want to save BECS Direct Debit details for future payments, see the following guides:\n\n*   [Manually configure BECS Direct Debit as a payment](https://docs.stripe.com/payments/au-becs-debit/accept-a-payment)\n*   [Save BECS Direct Debit details for future payments](https://docs.stripe.com/payments/au-becs-debit/set-up-payment)\n\n## Debit notification emails![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe BECS scheme advises that you notify your customer when a mandate is established and each time you debit their account. By default, Stripe automatically sends emails to the customer.\n\nIf you decide to send your customer a custom notification:\n\n*   Turn off Stripe emails in the [Stripe Dashboard email settings](https://dashboard.stripe.com/account/emails).\n    \n*   Use the [payment\\_intent.processing](https://docs.stripe.com/api/events/types#event_types-payment_intent.processing) event to trigger debit initiation emails.\n    \n*   It’s best to share (a link to) the mandate in the mandate notification\n    \n*   The pre-debit notifications ideally include:\n    \n    *   The last 4 digits of the customer’s bank account\n    *   The amount to be debited\n    *   Your contact information\n    *   The day you plan to debit the customer’s bank account\n*   The BECS guidelines suggest sending notifications at least 14 calendar days before you create a payment, but this isn’t mandatory. The default Stripe pre-debit email happens the day before the account gets debited. These pre-debit notifications should help you avoid unnecessary debit failures and disputes. For recurring payments of the same amount (for example, a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") of a fixed amount), you can include multiple upcoming debits with corresponding dates in a single notice.\n    \n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBECS Direct Debit provides a dispute process for bank account holders to dispute payments so you should familiarize yourself with this process if you decide to accept BECS Direct Debit payments.\n\nFor up to 7 years, a customer can dispute a debit payment through their bank on a “no questions asked” basis. Their bank honors all disputes within this period. If they dispute a charge and their bank accepts the request to return the funds, Stripe immediately removes the funds from your Stripe account.\n\nIf a dispute gets created, Stripe sends both the `charge.dispute.created` and `charge.dispute.closed` [webhook](https://docs.stripe.com/webhooks \"webhook\") events, and deducts the amount of the dispute and associated dispute fee from your Stripe balance.\n\nUnlike [credit card disputes](https://docs.stripe.com/disputes), all BECS Direct Debit disputes are final and can’t be appealed. If a customer successfully disputes a payment, contact them to resolve the situation. ​​If you can come to an agreement and your customer is willing to return the funds to you, they need to make a new payment.\n\n#### Warning\n\nIf you proactively issue your customer a refund while the customer’s bank also initiates the dispute process, your customer might receive two credits for the same transaction. You should follow the [refund guidelines](#refunds) to avoid this.\n\n## Mandates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDuring the payment process, businesses must collect a mandate that authorizes them to debit the account. In the BECS Direct Debit system, these mandates are called Direct Debit Requests, or DDRs.\n\nBank account holders can request the cancellation of active mandates at any time. To cancel a mandate, a bank account holder must either contact their bank or the party they established the mandate with. Canceling a mandate invalidates any future debit requests that you issue using it. If you want to accept additional payments from your customer, establish a new mandate with them.\n\n### Mandate events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Event name | Description |\n| --- | --- |\n| `mandate.updated` | Occurs whenever a mandate is canceled by the customer or due to a permanent debit failure. The `status` property will change to `inactive`. |\n\nYou can see the events in your Dashboard, but you should still set up a [webhook endpoint](https://docs.stripe.com/webhooks).\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRefunds for payments made with BECS Direct Debit must be issued within 90 days from the date of the original payment. Refunds require additional time to process (typically 3-5 business days). If you accidentally debit your customer, contact them immediately to avoid a payment dispute.\n\nRefunds are processed only after the payment process completes. If you create a full or partial refund on a payment that hasn’t completed yet, the refund process starts when the `Charge`​ object’s status transitions to `succeeded​`. If the `Charge`​ object’s status transitions to `failed`​, the full or partial refund is marked as canceled because the money was never debited from the customer’s bank account.\n\nBECS doesn’t explicitly label refunds when they’re deposited back into a bank account. Instead, refunds are processed as a credit and include a visible reference to the original payment’s statement descriptor.\n\nDue to longer settlement time periods and how banks process BECS Direct Debit transactions, there is potential for confusion between you, your customer, your customer’s bank, and Stripe. For example, your customer might contact both you and their bank to dispute a payment. If you proactively issue your customer a refund while the customer’s bank also initiates the dispute process, your customer might receive two credits for the same transaction.\n\nWhen issuing a refund, you should inform your customer immediately that the refund can take up to 5 business days to arrive in their bank account. Stripe won’t automatically send the customer any email to inform them about this.\n\n## Statement descriptors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEvery BECS Direct Debit payment shows two fields on the customers’ bank statements: the _name of the merchant_ and the _lodgement reference_ unique to this transaction.\n\nFor BECS Direct Debit payments created with Stripe, the name of the merchant is your Stripe account’s [statement descriptor](https://docs.stripe.com/get-started/account/statement-descriptors). You can override this default behavior for every transaction independently by using a [dynamic statement descriptor](https://docs.stripe.com/payments/payment-intents#dynamic-statement-descriptor). To do so, specify the `statement_descriptor` parameter when creating the `PaymentIntent`.\n\n#### Caution\n\nYour statement descriptor gets truncated to the first 9 alphanumeric characters in the lodgement reference, followed by a unique ID. For example, if your statement descriptor is `ROCKETRIDES`, the customer will see `ROCKETRID_XXXXXXX`.\n\nThe table below illustrates the _merchant name_ and _lodgement reference_ behavior you can expect on the customer’s bank statement:\n\n| Default statement descriptor | Dynamic statement descriptor | Merchant name | Lodgement reference |\n| --- | --- | --- | --- |\n| Rocket Rides | Unspecified | `RocketRides` | `RocketRid_AB1234CD` |\n| Rocket Rides | `Sunday Ride` | `RocketRides` | `SundayRid_AB1234CD` |\n\nEach bank in Australia formats these fields differently. Depending on your customer’s bank, some fields might appear in all lowercase or all uppercase.\n\n### Statement descriptors and Connect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe charge type of Connect payments changes the statement descriptor and the merchant name, which appear on the customer’s bank statement.\n\n| Charge type | Descriptor taken from |\n| --- | --- |\n| Direct | Connected Account |\n| Destination | Platform |\n| Separate charge and transfer | Platform |\n| Destination (with `on_behalf_of`) | Connected Account |\n| Separate charge and transfer (with `on_behalf_of`) | Connected Account |\n\nYou can’t use a mandate collected for a `PaymentIntent` `on_behalf_of` a Connected Account with a different Connected Account.",
  "title": "BECS Direct Debit payments in Australia | Stripe Documentation",
  "description": "Learn how to accept payments with BECS Direct Debit in Australia.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/japan-config-guide",
  "markdown": "# Best practices for setting up invoices in Japan\n\nWe recommend the following best practices when you make sales to business customers because Business-to-Business (B2B) sales require compliant invoices (適格請求書等) under the [Qualified Invoice System](https://www.nta.go.jp/taxes/shiraberu/zeimokubetsu/shohi/keigenzeiritsu/pdf/0020006-027.pdf) (適格請求書等保存方式, also known as インボイス制度) in order for the purchaser to claim a tax credit. Registered businesses (適格請求書等発行事業者)​​ can issue this type of invoice. There’s no obligation to issue invoices for Business-to-Consumer (B2C) sales.\n\nWe don’t automatically populate all of the fields on an invoice. In Japan, a missed or improperly added field can render an invoice noncompliant. If you intend to utilize the Qualified Invoice System, make sure that you include the required fields when you prepare your invoices.\n\nYou can use [tax calculation with Stripe Tax or Tax Rates](https://docs.stripe.com/billing/taxes/collect-taxes) to assist with including tax information in your invoices.\n\n![A sample invoice with various fields annotated, to be referenced against the table below](https://b.stripecdn.com/docs-statics-srv/assets/invoice-japan-config-annotations.91eb9198fe857fae2b437125d15460a1.png)\n\n[](#Invoice-fields)\n\nThe following table explains the ways that you can populate different invoice fields with reference to the Qualified Invoice System. To make sure that your invoices are compliant and adhere to applicable geographic requirements, we recommend that you consult with your tax and legal advisors.\n\n| Key | Field | Requirements | How to populate |\n| --- | --- | --- | --- |\n| 1   | Invoice number | There’s no requirement to show invoice numbers. | Stripe populates this by default. You can change how invoices are numbered (customer or account level) in the [Invoice template](https://dashboard.stripe.com/settings/billing/invoice). |\n| 2   | Date of issue | You must use this field to list the transaction date (取引年月日), or set line item supply dates. | Stripe populates this by default. |\n| 3   | Date due | While there’s no requirement to display the date that a customer must pay an invoice by, it’s a best practice to do so. | Stripe populates this by default. |\n| 4a  | Business company name (適格請求書発行事業者の氏名又は名称) | This is required. | Stripe populates this by default from the value in [**Public business information**](https://dashboard.stripe.com/settings/public) section of the Dashboard. |\n| 4b  | Business company address | There’s no requirement to display your address. | Enter your **Support address** under [Public business information](https://dashboard.stripe.com/settings/public). You can also default to your business address as listed in your [account settings](https://dashboard.stripe.com/settings/account). |\n| 5   | Business registration number | ​​Invoices require a business registration number (適格請求書発行事業者の登録番号). | Add your business registration number as **JP TRN** in your [invoice settings](https://dashboard.stripe.com/settings/billing/invoice). |\n| 6a  | Recipient name (書類の交付を受ける事業者の氏名又は名称) | This is required. | Stripe populates this by default from the Customer details. |\n| 6b  | Recipient address | There’s no requirement to display the recipient address. | You can add this field by clicking the **Additional details** button when you first create a customer. |\n| 7   | Name of the good or service (取引内容) | This is required. | Stripe populates this by default from the Invoice Items. |\n| 8   | Invoice line item supply date (取引年月日) | This is required when the supply date of individual line items is different from the invoice send date. | You can display line item supply dates by clicking the toggle under **Item options**. |\n| 9   | Price of the good or service | It’s considered a best practice to show the unit price, quantity, and total payable amount for each invoice line item. | Stripe populates this by default. |\n| 10  | Invoice line item tax rate percentage | This is required to indicate if an item is subject to the reduced tax rate (軽減税率). It’s sufficient to display the tax percentage amount for an invoice line item. You aren’t required to display the cash amount of the tax per invoice line item. | Determine the tax to display on an invoice using either of the following methods:<br><br>*   Use [Stripe Tax](https://docs.stripe.com/tax/invoicing) to automatically calculate the tax.<br>*   Or, manually add the tax rate when you create an item:<br>    1.  Select **Item taxes and coupons**.<br>    2.  Enter your desired tax rate.<br>    3.  **Create a [new tax rate](https://dashboard.stripe.com/test/tax-rates)**.<br>    4.  On the [invoice settings](https://dashboard.stripe.com/settings/billing/invoice) page, configure the taxes to round after subtotaling. This setting applies to all invoices generated from your account. |\n| 11  | Invoice subtotal (excludes tax) | This is required. | Stripe populates this by default. |\n| 12  | Total tax amounts and rates (税率ごとに区分して合計した対価の額、適用税率、消費税額) | This is required and must include the total tax amount per tax rate. | Stripe populates this by default. |\n| 13  | Invoice total (includes tax) | This is required. | Stripe populates this by default. |\n\n[](#facilitate-customer-payment)\n\nAfter you set up your invoices to meet Japanese requirements, you can facilitate customer payment by:\n\n*   Adding the most popular Japanese payment methods. By accepting a wider range of payment methods, such as [Bank Transfers](https://docs.stripe.com/payments/bank-transfers), you can lower your costs and increase conversions (especially with large customers).\n*   Using the [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page).\n*   [Localizing your Invoices](https://docs.stripe.com/invoicing/customize#customer-language) to the language of your customers.\n*   Allowing a single invoice to be [paid over multiple due dates](https://docs.stripe.com/invoicing/payment-plans). By reflecting a payment schedule, you can extend more flexible net terms or collect a deposit.\n    \n    If you provide a financial product or service, please consult with your legal advisors regarding applicable restrictions and requirements before setting up invoices. Installment payments, lending, credit, and Buy Now Pay Later services are subject to regulation in Japan and you may need to register or obtain approvals before engaging in those services.\n    \n\n[](#refunds)\n\nIf you need to produce a refund document (適格返還請求書) for your customer, you can [issue a credit note](https://docs.stripe.com/invoicing/dashboard/credit-notes). If you’ve completed the steps above to create invoices with the necessary fields, such as your business registration number (適格請求書発行事業者の登録番号), the credit notes will also contain them.\n\n[](#connect-platforms)\n\nMake sure your connected account’s invoices contain the necessary information required by the Qualified Invoice System, such as the account’s tax ID and business details. You can [configure the information](https://docs.stripe.com/invoicing/connect#account-tax-ids) shown on invoices and receipts that Connect creates.\n\nIf you use manual taxes on invoices, [configure](https://docs.stripe.com/billing/taxes/tax-rates#rounding) the taxes to round after subtotaling, rather than at the line item level. This setting applies to all invoices generated across your connected accounts and across different geographies.",
  "title": "Best practices for setting up invoices in Japan | Stripe Documentation",
  "description": "Learn the best practices for setting up invoices in Japan.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/global-config-guide",
  "markdown": "# Best practices for setting up invoices in Europe\n\nThe following table explains the ways that you can populate different invoice fields. To ensure that your invoices are compliant and adhere to geographic and business regulations, Stripe recommends that you consult with your tax and legal advisors.\n\n| Key | Field | Required? | How to populate |\n| --- | --- | --- | --- |\n| 1   | Invoice number | This is always required. | Stripe populates this by default. You can change how invoices are numbered (customer or account level) in the [Invoice template](https://dashboard.stripe.com/settings/billing/invoice). |\n| 2   | Date of issue | This is always required. | Stripe populates this by default. |\n| 3   | Date due | There’s no requirement to display the date by which a customer must pay an invoice. However, it’s a best practice. | Stripe populates this by default. |\n| 4a  | Merchant company name | This is always required. | Stripe populates this by default. |\n| 4b  | Merchant company address | Sending an invoice to another business always requires this field. | Enter your **Support address** under [Public business information](https://dashboard.stripe.com/settings/public). You can also default to your business address as listed in your [account settings](https://dashboard.stripe.com/settings/account). |\n| 5   | Merchant VAT ID | ​​Invoices generally require a merchant VAT ID (or tax ID). If you sell goods or services to a business customer in another EU country, you must mention your VAT ID, which is a number that contains a country prefix. | Add your relevant tax or VAT ID by navigating to **Manage tax information** in the **Invoice template**. |\n| 6a  | Recipient name | This is always required. | Stripe populates this by default. |\n| 6b  | Recipient address | This is always required. | You can add this field by clicking the **Additional details** button when you first create a customer. |\n| 7   | Recipient VAT ID | Sending an invoice to another business typically requires this field. ​​If you sell goods or services to a business customer in another EU country, you must mention the customer’s VAT ID, which is a number that contains a country prefix. | You can add this field by:<br><br>1.  Clicking **Add additional details** (just like with the recipient address) when you create a new customer, and scrolling down to **Tax ID** at the bottom of the dialog.<br>2.  Adding it as a custom field under **Advanced options** when you create an invoice. |\n| 8   | Name of the good or service | This is always required. | Stripe populates this by default. |\n| 9   | Invoice line item supply date | This is always required when the supply date of individual line items is different from the invoice send date. | You can display line item supply dates by clicking the toggle under **Item options**. |\n| 10  | Price of the good or service | For an invoice to be compliant, it must display tax-exclusive prices. For each invoice line item, you must show the following:<br><br>1.  Unit price (excluding VAT).<br>2.  Quantity.<br>3.  Any applicable discounts.<br>4.  Total amount payable (excluding VAT), which is the unit price times the quantity, minus discounts. | You must display tax-exclusive prices to comply with EU invoicing rules.1 |\n| 11  | Invoice line item tax rate percentage2 | This is always required. It’s sufficient to display the tax percentage amount for an invoice line item. You’re not required to display the cash amount per invoice line item. | You can determine the tax to display on an invoice by:<br><br>1.  Using [Stripe Tax](https://docs.stripe.com/tax/invoicing) to automatically calculate the tax.<br>2.  ​​Manually adding the tax rate when you are create an item. Select **Item taxes and coupons**, enter your desired tax rate, then **Create a [new tax rate](https://dashboard.stripe.com/test/tax-rates)**. |\n| 12  | Invoice subtotal (excludes VAT) | This is always required. | Stripe populates this by default. |\n| 13  | VAT amount | This is always required. | Stripe populates this by default. |\n| 14  | Invoice total (includes VAT) | This is always required. | Stripe populates this by default. |\n| N/A | Custom fields | In some European countries, you must also display additional information including the business registration number, purchase order (PO), or payment due date. | Under **Advanced options** in the [Invoice Editor](https://dashboard.stripe.com/invoices/create), click **Add custom field**. |\n\n1To display tax-exclusive prices with Stripe Tax, select **No** under **Include tax in price** to exclude tax. This excludes tax in prices in the invoice PDF, the Invoice Details page, and in the invoice email. You can also select **Yes** under **Include tax in price**, then check the **Display tax-exclusive prices** option in the **Items Options** dialog of the **Items** section. This excludes tax in prices in the invoice PDF, but includes tax on the Invoice Details page and in the email. If you’re adding tax rates manually for a business, you can either set **Include tax in price** to **No**, or set **Include tax in price** to **Yes** and check **Display tax-exclusive prices** in the **Items Options** dialog. The second approach includes tax on the Invoice Details page and in the email, but not in the invoice PDF.\n\n2​​If a transaction isn’t subject to tax, you must state the reason for not applying it. For example, if the tax liability shifts to your customer (that is, your customer now has to account for tax), you must mention it as a “reverse charge” on the invoice. In the case of an EU business selling to another EU business, you must mention “zero-rated intra-Community supply.\" To include these references in your invoice, add a custom field under **Advanced options** in the [Invoice Editor](https://dashboard.stripe.com/test/invoices/create).",
  "title": "Best practices for setting up invoices in Europe | Stripe Documentation",
  "description": "Learn the best practices for setting up invoices in Europe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/payment-methods/bacs-debit",
  "markdown": "# Bacs Direct Debit payments in the UK\n\n## Learn how to accept payments with Bacs Direct Debit in the UK.\n\nStripe users in the UK can accept Bacs Direct Debit payments from customers with a UK bank account.\n\nTo debit an account, businesses must collect a mandate from their customers. The mandate includes the customer’s sort code, account number, name, email, and full address. Stripe can generate this mandate for businesses to present to their customers.\n\nBACS Direct Debit transactions have a limit of 100,000 GBP each. New users have an additional weekly limit of 10,000 GBP, which quickly increases as you process more BACS Direct Debit payments. If you need higher limits, [contact support](https://support.stripe.com/?contact=true).\n\nBacs Direct Debit is a [reusable, delayed notification payment method](https://docs.stripe.com/payments/payment-methods#payment-notification). That means it takes 3 business days to confirm the success or failure of a payment when a mandate is already in place, but when you must collect a new mandate, it can take 6 business days.\n\n*   **Customer locations**\n    \n    UK\n    \n*   **Presentment currency**\n    \n    GBP\n    \n*   **Payment confirmation**\n    \n    Business-initiated\n    \n*   **Payment method family**\n    \n    Bank debit\n    \n*   **Recurring payments**\n    \n    Yes\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Verification Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUsing Bacs Direct Debit requires you to complete additional [identity verification](https://support.stripe.com/questions/common-questions-about-stripe-identity#how-verification-works) steps. We prompt you to complete these steps after you request access from the [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods). If you require further assistance, please [contact support](https://support.stripe.com/contact).\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Bacs Direct Debit and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Bacs Direct Debit. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Bacs Direct Debit from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n*   [Subscriptions](https://docs.stripe.com/billing/subscriptions/overview)\n\nIf you prefer to manually list payment methods or want to save Bacs Direct Debit details for future payments, see the following guides:\n\n*   [Manually configure Bacs Direct Debit as a payment](https://docs.stripe.com/payments/bacs-debit/accept-a-payment)\n*   [Save Bacs Direct Debit details for future payments](https://docs.stripe.com/payments/bacs-debit/save-bank-details)\n\n## Debit notifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBacs Direct Debit requires that customers are notified of the following:\n\n*   When payment details are initially collected and confirmed\n*   Each time a debit will be made on their account\n\nBy default, Stripe automatically sends emails to the customer for the above cases. You can [customize the colors and logo](https://dashboard.stripe.com/account/branding) for these emails to fit the design and branding of your business.\n\nIf you require sending your own customer email notifications, [follow these steps](https://docs.stripe.com/payments/bacs-debit/email-customization) to customize your Business Display Name and contact us for approval of your email templates.\n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBacs Direct Debit provides a [dispute process](https://stripe.com/legal/bacs-direct-debit-guarantee) for customers to dispute payments.\n\n#### Caution\n\n[Customers](https://docs.stripe.com/api/customers \"Customers\") can dispute a payment through their bank for an unlimited period of time.\n\nWhen a dispute is created, Stripe sends a `charge.dispute.created` [webhook](https://docs.stripe.com/webhooks \"webhook\") event and deducts the dispute amount from your Stripe balance. Bacs Direct Debit disputes don’t incur a fee.\n\nUnlike [credit card disputes](https://docs.stripe.com/disputes), Bacs Direct Debit disputes are final and can’t be appealed. If a customer successfully disputes a payment, you must contact them if you want to resolve the situation. If you’re able to come to an arrangement and your customer is willing to return the funds to you, they must make a new payment.\n\n## Mandates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs part of the payment process, businesses must collect a mandate which gives them authorization to debit an account. For Bacs, this mandate is called a Direct Debit Instruction, or DDI. You can find information on how to collect a mandate with Stripe [Checkout](https://docs.stripe.com/payments/checkout) on the [Accept a payment](https://docs.stripe.com/payments/bacs-debit/accept-a-payment) page.\n\nCustomers can request the cancellation of a mandate at any time. To cancel a mandate, a customer must either reach out to the party they established the mandate with, or to their bank. Canceling a mandate invalidates any future debit requests that you issue using this mandate. If you want to accept additional payments from your customer, you need to establish a new mandate with them.\n\n### Mandate events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe mandate can change at any time after you’ve collected it. This might be the result of the customer instructing their bank to amend the mandate or because of a change in the bank itself (for example, the customer changes to a different one). Stripe sends the following events when the mandate changes:\n\n| Event name | Description | Can accept payments? |\n| --- | --- | --- |\n| `mandate.updated` | Occurs whenever a mandate is rejected, canceled, or reactivated by the Bacs network. Check [mandate.status](https://docs.stripe.com/api/mandates/object#mandate_object-status) to determine if the mandate can continue to be used. | Yes, if the new status is `active` |\n| `payment_method.automatically_updated` | Occurs when a customer’s bank account details change. | Yes |\n\nThese events are available in the [Dashboard](https://dashboard.stripe.com/events), but you can set up a [webhook](https://docs.stripe.com/webhooks \"webhook\") to handle these programatically.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRefunds for payments made with Bacs Direct Debit must be submitted within 180 days from the date of the original payment. Refunds require additional time to process (typically 3-4 business days). If you accidentally debit your customer, please contact them immediately to avoid a payment dispute.\n\n#### Warning\n\nRefunds aren’t part of the Bacs Direct Debit scheme and are provided outside of Bacs Direct Debit by Stripe. Since Bacs Direct Debit has an indefinite indemnity period, if a customer creates a [dispute](https://docs.stripe.com/disputes) _any time after_ a refund has been issued, you can lose both the disputed amount and the amount you refunded separately.\n\nYou can issue full or partial refunds for Direct Debit payments by using the API to [create a refund](https://docs.stripe.com/api#create_refund) with the [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) object.\n\nRefunds are processed only after the payment process is complete. If you create a full or partial refund on a payment that hasn’t completed yet, the refund process starts when the [Charge](https://docs.stripe.com/api/charges/object) object’s status transitions to `succeeded`. If the [Charge](https://docs.stripe.com/api/charges/object) object’s status transitions to `failed`, the full or partial refund is marked as canceled because the money was never debited from the customer’s bank account.\n\n## Timing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIt takes 3 business days to confirm the success or failure of a Bacs Direct Debit payment when a mandate is already in place and 6 business days when a new mandate must be collected. Payments made after 20:00 UTC are submitted the following business day.\n\nIn some cases, the bank might notify us of a payment failure after the payment has been marked as successful in your Stripe account. In this case the payment failure is identified as a dispute with the appropriate reason code.\n\nThis table shows the Bacs timeline in business days from the time (T) that a payment is made when a new mandate must be collected:\n\n|     |     |\n| --- | --- |\n| T+0 | Mandate submitted |\n| T+3 | Mandate is active and the payment is submitted |\n| T+5 | Funds leave the customer’s bank account |\n| T+6 | Funds are available in Stripe |\n\n## Checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Checkout](https://stripe.com/checkout) creates a secure, Stripe-hosted payment page that lets you collect payments quickly. You can use Checkout to collect Bacs Direct Debit payments, or collect payment details that you can use to initiate payments at a later date.\n\n### Request the bacs\\_debit\\_payments capability ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPlatforms in the UK don’t need to request the `bacs_debit_payments` capability for their UK Connect accounts when performing [destination charges](https://docs.stripe.com/connect/destination-charges). Platforms outside the UK might still need to process Bacs Direct Debit payments for their UK Connect accounts, and they must have the `bacs_debit_payments` capability enabled.\n\nIn both scenarios, you must [request the `bacs_debit_payments` capability](https://docs.stripe.com/connect/account-capabilities) if you want to use the [on\\_behalf\\_of](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-on_behalf_of) parameter.\n\nRequesting the `bacs_debit_payments` capability with `settings.bacs_debit_payments.display_name` automatically enables custom branding. This allows you to collect mandates using the connected account’s chosen display name as the statement descriptor.\n\nEach account that uses custom branding incurs a 50 GBP monthly fee.\n\nIf you don’t want to use custom branding, you can do either of the following:\n\n*   Request the capability without specifying `settings.bacs_debit_payments.display_name`\n*   Set the default value of `settings.bacs_debit_payments.display_name = Stripe` before requesting the capability\n\n## Custom Branding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUpgrade to Custom Branding if you want to customize your customer’s bank statements, Stripe Checkout, and customer emails for direct debits to show your business name.\n\nYou can enable Custom Branding for your account in your [Bacs Direct Debit settings](https://dashboard.stripe.com/settings/payment_methods).\n\nFor your Express or Custom accounts, you can enable Custom Branding by selecting `settings.bacs_debit_payments.display_name` in the [API](https://docs.stripe.com/api/accounts/object#account_object-settings-bacs_debit_payments-display_name).\n\nYou can do this during account creation or when updating the account after setup.\n\nIf you request the `bacs_debit_payments` capability without specifying `settings.bacs_debit_payments.display_name`, the account defaults to Stripe branding.\n\nCustom Branding is charged at 50 GBP per active month. Your business name is shown for new mandates created 5 business days after your request. To expedite Custom Branding or apply it to multiple connected accounts for a single fee, [contact us](https://support.stripe.com/contact).\n\nIf you don’t use your custom branding for a long period of time, your account automatically reverts back to the default Stripe branding.",
  "title": "Bacs Direct Debit payments in the UK | Stripe Documentation",
  "description": "Learn how to accept payments with Bacs Direct Debit in the UK.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/sepa-debit",
  "markdown": "# SEPA Direct Debit payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Single Euro Payments Area (SEPA) Direct Debit, a common payment method in the European Union.\n\nThe [Single Euro Payments Area (SEPA)](https://en.wikipedia.org/wiki/Single_Euro_Payments_Area) is an initiative of the European Union to simplify payments within and across member countries. They established and enforced banking standards to allow for the direct debiting of every EUR-denominated bank account within the SEPA region.\n\nIn order to debit an account, businesses must collect their customer’s name and bank account number in IBAN format. During the payment flow, customers must accept a mandate that gives the business an authorization to debit the account. Stripe is able to generate this mandate for businesses to present to their customers. Locate the ID of the mandate used for this payment on the Charge under the [payment\\_method\\_details.sepa\\_debit.mandate](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-sepa_debit-mandate) property. Then, use the mandate ID to [retrieve the Mandate](https://docs.stripe.com/api/mandates/retrieve).\n\nSEPA Direct Debit is a [reusable](https://docs.stripe.com/payments/payment-methods#usage), [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method. This means that it can take up to 14 business days to receive notification on the success or failure of a payment after you initiate a debit from the customer’s account, though the average is 7 to 8 business days.\n\nSEPA Direct Debit transactions have a limit of 10,000 EUR each. For new users, there’s an additional weekly limit of 10,000 EUR, which quickly increases as you process more SEPA direct debit payments. If you need higher limits, [contact support.](https://support.stripe.com/contact)\n\n*   **Customer locations**\n    \n    Europe\n    \n*   **Payment method family**\n    \n    Bank debit\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Presentment currency**\n    \n    EUR\n    \n*   **Recurring Payments**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Payment confirmation**\n    \n    Business-initiated\n    \n*   **Refunds/ Partial refunds**\n    \n    Yes/yes\n    \n\n## Verification Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUsing SEPA Direct Debit requires you to complete additional [identity verification](https://support.stripe.com/questions/common-questions-about-stripe-identity#how-verification-works) steps. We prompt you to complete these steps after you request access from the [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods). If you require further assistance, please [contact support](https://support.stripe.com/contact).\n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\n[Customer](https://docs.stripe.com/api/customers \"Customers\") selects SEPA Direct Debit at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/account-info.6df4a503f8d05d1d9ddd20a6f15172df.svg)\n\nCustomer provides full name, IBAN, and authorizes mandate\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\nCustomer gets notification that the payment is complete\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate SEPA Direct Debit and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable SEPA Direct Debit. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add SEPA Direct Debit from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n*   [Subscriptions](https://docs.stripe.com/billing/subscriptions/overview)\n\nIf you prefer to manually list payment methods or want to save SEPA Direct Debit details for future payments, see the following guides:\n\n*   [Manually configure SEPA Direct Debit as a payment](https://docs.stripe.com/payments/sepa-debit/accept-a-payment)\n*   [Save SEPA Direct Debit details for future payments](https://docs.stripe.com/payments/sepa-debit/set-up-payment)\n\n## Debit notification emails![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [SEPA Direct Debit rulebook](http://www.europeanpaymentscouncil.eu/index.cfm/sepa-direct-debit/sepa-direct-debit-core-scheme-sdd-core) requires that you notify your customer each time you debit their account. For this case, by default, Stripe automatically sends the customer an email.\n\n#### Note\n\nWhen processing SEPA Direct Debit payments using the Stripe [Creditor ID](https://docs.stripe.com/payments/sepa-debit#creditor-identifiers-(creditor-id)), debit notification emails are always sent automatically by Stripe.\n\nIf you decide to send your customer a custom notification:\n\n*   Turn off Stripe emails in the [Stripe Dashboard email settings](https://dashboard.stripe.com/account/emails). However, if you use the Sources API, you can only control emails using [mandate.notification\\_method](https://docs.stripe.com/api/sources/update#update_source-mandate-notification_method) (for more information, see [notifying customers of recurring payments](https://docs.stripe.com/sources/sepa-debit#notifying-customers-of-recurring-payments)).\n*   Use the [payment\\_intent.processing](https://docs.stripe.com/api/events/types#event_types-payment_intent.processing) event to trigger debit initiation emails.\n*   The email must include:\n    *   The last 4 digits of the debtor’s bank account\n    *   The mandate reference (`sepa_debit[reference]` on the Mandate)\n    *   The amount to be debited\n    *   Your SEPA creditor identifier\n    *   Your contact information\n*   It’s standard to send notifications at least 14 calendar days before you create a payment. However, SEPA rules let you send notifications closer to the payment date—just make sure your mandate clearly states when customers can expect to receive a notification. The mandate provided by Stripe specifies this can happen up to two calendar days in advance of future payments, allowing you to send notifications at payment creation. For recurring payments of the same amount (for example, a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") of a fixed amount), you may indicate multiple upcoming debits with corresponding dates in a single notice.\n\n## Creditor Identifiers (Creditor ID)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA SEPA Creditor Identifier (Creditor ID) is an ID associated with each SEPA Direct Debit payment that identifies the company requesting the payment. While companies may have multiple creditor identifiers, each creditor identifier is unique and allows your customers to easily identify the debits on their account.\n\nBy default your Stripe account is configured to use a Stripe Creditor ID when collecting SEPA Direct Debit Payments. `Stripe Payments` will appear on bank statements alongside your configurable [Stripe statement descriptor](https://docs.stripe.com/get-started/account/statement-descriptors). We recommend configuring a recognizable statement descriptor to ensure customers recognize payments and to reduce the risk of disputes. If you’re using the Stripe Creditor ID, we also recommend you use Stripe Checkout to collect mandates from your customers for SEPA Direct Debits.\n\nIf you’re based in the EU, Stripe recommends that you use your own Creditor ID to both reduce dispute rates and improve your customer experience. You can configure your own Creditor ID on the [Payment Method Settings](https://dashboard.stripe.com/settings/payment_methods) page. When using your own Creditor ID your business name appears on statements instead of Stripe’s and you can use the [Stripe statement descriptor](https://docs.stripe.com/get-started/account/statement-descriptors) for per-payment customization.\n\n#### Note\n\nAfter you’ve collected live SEPA Direct Debit payments on your account, you can’t change your Creditor ID in the dashboard. If you need help with this issue, contact [Stripe support](https://support.stripe.com/contact) for information about migrating to a new Creditor ID.\n\n### Creditor identifiers and Connect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe charge type of Connect payments changes the creditor identifier and name which appear on the customer’s bank statement.\n\n## Failed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSEPA Debit payment failures can occur for a number of reasons, such as a customer’s account being frozen or having insufficient funds.\n\nWhen a payment fails, Stripe provides a failure reason in the `failure_code` field on the `Charge`. Stripe also provides an extended description in the `failure_message` field on the `Charge`.\n\nThe following table lists the possible SEPA Debit payment failure codes with recommended next steps.\n\n| Failure code | Explanation | Next steps |\n| --- | --- | --- |\n| refer\\_to\\_customer | We don’t have detailed information about the payment failure because your customer’s bank didn’t provide a reason code. | Reach out to your customer for additional information. |\n| insufficient\\_funds | The payment process can’t be completed because your customer’s bank account lacks the necessary funds. | Reach out to your customer to verify that they have the required funds, then retry the transaction. |\n| debit\\_disputed | Your customer requested that their bank refund this payment. | Reach out to your customer to resolve any dispute, then retry the transaction. |\n| authorization\\_revoked | Your customer revoked their authorization and refused this payment. | Reach out to your customer to understand the reasons for this revocation, then collect a new mandate and retry the transaction. |\n| debit\\_not\\_authorized | The payment lacks an authorized mandate. | Collect a new mandate and retry the transaction. |\n| account\\_closed | The payment can’t be processed because your customer’s bank account is closed. | Reach out to your customer for new account details, then try the transaction again. |\n| bank\\_account\\_restricted | The payment can’t be processed because your customer’s bank has blocked Direct Debits, due to either the bank’s actions or your customer’s. | Reach out to your customer to understand the reason for the block. If the bank unblocks the account, attempt the transaction again. |\n| debit\\_authorization\\_not\\_match | The transaction can’t be processed due to missing or incorrect mandate information. | Collect a new mandate from your customer, then attempt the transaction again. |\n| recipient\\_deceased | The mandate was set up on the account of a possibly deceased individual. | Verify your customer’s status before proceeding further. |\n| branch\\_does\\_not\\_exist | The payment can’t be processed because the bank branch associated with your customer’s IBAN does not exist. | Reach out to your customer to provide new bank details, then attempt the transaction again. |\n| incorrect\\_account\\_holder\\_name | The transaction can’t be processed because your customer’s account information is missing or incorrect. | Collect a new mandate and ask your customer to provide their name and address exactly as it appears on their bank account. Then, retry the transaction. |\n| invalid\\_account\\_number | The transaction can’t be processed because the IBAN provided by your customer is incorrect. | Reach out to your customer for correct bank details, then attempt the transaction again. |\n| generic\\_could\\_not\\_process | Stripe can’t identify a particular reason for the payment failure. | Reach out to [https://stripe.com/support](https://stripe.com/support) for more information. |\n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSEPA Direct Debit provides a dispute process for customers to dispute payments.\n\nCustomers can dispute a payment through their bank on a “no questions asked” basis up to eight weeks after their account is debited. Any disputes within this period are automatically honored.\n\nAfter eight weeks and up to 13 months, a customer can only dispute a payment with their bank if the debit is considered unauthorized. If this occurs, we automatically provide the bank with the mandate that the customer approved. This does not guarantee cancellation of the dispute; the bank can still decide that the debit was unauthorized and the customer is entitled to a refund.\n\nA dispute can also occur if the bank is unable to debit the customer’s account because of an issue (for example, the account is frozen or has insufficient funds), but has already provided the funds to make the charge successful. If this occurs, the bank reclaims the funds in the form of a dispute.\n\nWhen a dispute is created, a `charge.dispute.created` [webhook](https://docs.stripe.com/webhooks \"webhook\") event is sent and Stripe deducts the dispute amount and dispute fee from your Stripe balance. The dispute fee varies based on your account’s default settlement currency:\n\n| Settlement Currency | Failure Fee | Dispute Fee |\n| --- | --- | --- |\n| AUD | 5 AUD | 25 AUD |\n| BGN | 7 BGN | 30 BGN |\n| CAD | 5 CAD | 20 CAD |\n| CHF | 3 CHF | 15 CHF |\n| CZK | 85 CZK | 360 CZK |\n| DKK | 25 DKK | 115 DKK |\n| EUR | 3.50 EUR | 15 EUR |\n| GBP | 3 GBP | 13 GBP |\n| HKD | 30 HKD | 130 HKD |\n| HUF | 1350 HUF | 5750 HUF |\n| JPY | 550 JPY | 2375 JPY |\n| MXN | 65 MXN | 280 MXN |\n| NOK | 40 NOK | 175 NOK |\n| NZD | 5 NZD | 30 NZD |\n| PLN | 15 PLN | 65 PLN |\n| RON | 15 RON | 75 RON |\n| SEK | 40 SEK | 175 SEK |\n| SGD | 5 SGD | 20 SGD |\n| USD | 5 USD | 15 USD |\n| ZAR | 70 ZAR | 300 ZAR |\n\nUnlike [credit card disputes](https://docs.stripe.com/disputes), SEPA Direct Debit disputes are final and there is no process for appeal. If a customer successfully disputes a payment, you must contact them if you want to resolve the situation. If you’re able to come to an arrangement and your customer is willing to return the funds to you, they must make a new payment.\n\nIn general, each dispute includes the reason for its creation, but this varies from country to country. For example, disputed payments in Germany do not provide additional information for privacy reasons.\n\nIf a payment is disputed, and that payment is associated with a multi-use mandate, that mandate could be deactivated. Make sure to check the status of such mandates after a dispute. You have to recollect mandate acceptance from your customers if their previous mandate is deactivated.\n\n## Payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSEPA Direct Debit payments are subject to a 5 business day [payout timing](https://docs.stripe.com/payouts#standard-payout-timing) if your current payout timing is less than 5 business days or 7 calendar days. When you reach 35,000 USD of SEPA Direct Debit processing volume, payout timing for SEPA Direct Debit payments returns to normal.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustomers can dispute a payment with their bank even after it has been refunded, resulting in two credits for the same payment. To prevent fraud, refunds may be disabled upon first refund attempt until your account has been reviewed. The review can take up to 2 business days. If you need assistance processing a refund please contact us via [support.stripe.com/contact](https://support.stripe.com/contact/) for further information.\n\nFor accounts with refunds enabled, Stripe recommends issuing refunds on SEPA Direct Debit payments only when:\n\n*   It is a trusted and verified customer\n*   You have confirmed with the customer that you’re refunding the payment\n*   7 business days have passed since you initiated the payment\n\nRefunds for payments made with SEPA Direct Debit must be submitted within 180 days from the date of the original payment. Refunds require additional time to process (typically three to four business days). If you accidentally debit your customer, please contact them immediately to avoid a payment dispute.\n\nSEPA does not explicitly label refunds when the funds are deposited back to a customer’s bank account. Instead, refunds are processed as a credit and include a visible reference to the original payment’s statement descriptor.\n\nWhen issuing a refund, you should inform your customer immediately that the refund can take up to five business days to arrive in their bank account.",
  "title": "SEPA Direct Debit payments | Stripe Documentation",
  "description": "Learn about Single Euro Payments Area (SEPA) Direct Debit, a common payment method in the European Union.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/link/what-is-link",
  "markdown": "# Link authentication and payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how Link works.\n\n[Link](https://stripe.com/payments/link) is Stripe’s fast-checkout solution. It securely saves and autofills customer address and payment details, with support for credit cards, debit cards, US bank accounts, and other payment methods. Customers can save their shipping and payment details on your site or the checkout page of a different business—Link saves and autofills the information on any site where Link’s enabled.\n\nIf your customer wants to make changes to their account, view their purchase history, or reach out to the Link customer support team, have them visit [link.com](https://www.link.com/).\n\n## Link authentication ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nHere’s how Link authenticates existing customers:\n\n1.  Link automatically detects if a customer is enrolled by using their email address, phone number, or browser cookie.\n2.  The customer receives a one-time passcode to authenticate their session.\n3.  After authentication succeeds, Link autofills their card (or bank payment) details and shipping information, allowing them to pay with one click.\n4.  After a customer enrolls with Link, they can add backup payment methods and change shipping addresses.\n\nLink is a wallet and works with [Checkout](https://docs.stripe.com/payments/checkout), [Payment Links](https://docs.stripe.com/payment-links), [Web Elements](https://docs.stripe.com/payments/elements), [Mobile Elements](https://docs.stripe.com/payments/link/mobile-payment-element-link), and [Invoicing](https://docs.stripe.com/invoicing). To accept payments using Link, go to your [payment method settings](https://dashboard.stripe.com/settings/payment_methods).\n\n## Link instant bank payments Beta ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nLink instant bank payments let you accept payments from customers with a US bank account. This gives your customers a choice in how they pay without you needing to manage the operational complexity of [ACH Direct Debit](https://docs.stripe.com/payments/ach-debit).\n\nUnlike ACH Direct Debit, where it can take up to four business days to successfully process a transaction, Link instant bank payments are instantly authorized. With this, settlement timing matches your card payments and you’re protected from bank-initiated returns that might occur after authorization.\n\nYou can’t accept both ACH Direct Debit and Link instant bank payments. If you’d rather accept ACH Direct Debit, you can toggle it on in your [payment method settings](https://dashboard.stripe.com/settings/payment_methods). To learn more about ACH transaction fees, see its [pricing details](https://stripe.com/pricing#pricing-details).\n\n#### Note\n\nAccess to Link instant bank payments is currently limited to beta users. If you’re interested in getting early access, please enter your email address in the signup form below.\n\nWhen Link instant bank payments is enabled, a **Bank** tab appears on your checkout page. To be eligible for this beta, you must meet the following conditions:\n\n*   Your integration must use Checkout or the Payment Element.\n*   **Enablement**: You must enable Link on your account through your [payment settings dashboard](https://dashboard.stripe.com/settings/payment_methods) or [Link settings](https://dashboard.stripe.com/settings/link). You must also disable ACH Direct Debit in your payment method settings.\n*   **Parameters**: You use [automatic\\_payment\\_methods](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-automatic_payment_methods) in your integration. Alternatively, you can update your integration to set [payment\\_method\\_type](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-payment_method_types) to `link`.\n*   **Two-step authentication**: You’ve enabled [two-step authentication](https://support.stripe.com/questions/enable-two-step-authentication) on your Stripe account.\n*   **Onboarding criteria**: You must satisfy a set of onboarding criteria, including but not limited to: being a US business and having a history of Stripe usage.",
  "title": "Link authentication and payments | Stripe Documentation",
  "description": "Learn how Link works.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/elements/address-element/collect-addresses?platform=react-native",
  "markdown": "# Listen for address input | Stripe DocumentationThe Stripe Docs logo\n\nUse the Address Element to collect local and international addresses for your customers.\n\n![Examples of a checkout process where a user selects the Add Shipping Address option. Then they are taken to a new screen to add their shipping address into a form. As they type in their address, auto-complete suggestions are presented for your user to choose from.](https://b.stripecdn.com/docs-statics-srv/assets/android-overview.6061212dc737aa700b79242cb5f77782.png)\n\n[](#react-native-setup)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nThe [React Native SDK](https://github.com/stripe/stripe-react-native) is open source and fully documented. Internally, it uses the native [iOS](https://github.com/stripe/stripe-ios) and [Android](https://github.com/stripe/stripe-android) SDKs. To install Stripe’s React Native SDK, run one of the following commands in your project’s directory (depending on which package manager you use):\n\n`yarn add @stripe/stripe-react-native`\n\nNext, install some other necessary dependencies:\n\n*   For iOS, navigate to the **ios** directory and run `pod install` to make sure that you also install the required native dependencies.\n*   For Android, you don’t need to install any more dependencies.\n\n### Stripe initialization![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo initialize Stripe in your React Native app, either wrap your payment screen with the `StripeProvider` component, or use the `initStripe` initialization method. Only the API [publishable key](https://docs.stripe.com/keys#obtain-api-keys) in `publishableKey` is required. The following example shows how to initialize Stripe using the `StripeProvider` component.\n\n`import { StripeProvider } from '@stripe/stripe-react-native';  function App() {   return (     <StripeProvider       publishableKey=`\n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n    `>       // Your app code here     </StripeProvider>   ); }`\n\n#### Note\n\nUse your API keys for [test mode](https://docs.stripe.com/keys#obtain-api-keys) while you test and develop, and your [live mode](https://docs.stripe.com/keys#test-live-modes) keys when you publish your app.\n\n[](#react-native-setup-autocomplete)\n\nAutocomplete is enabled by default on iOS, but to enable autocomplete suggestions on Android, you need to include the [Google Places SDK](https://developers.google.com/maps/documentation/places/android-sdk/overview) dependency in your app’s `build.gradle`:\n\n`dependencies {     implementation 'com.google.android.libraries.places:places:2.6.0' }`\n\nAddress autocomplete suggestions requires a Google Places API key. Follow the [Google Places SDK setup guide](https://developers.google.com/maps/documentation/places/android-sdk/cloud-setup) to generate your API key.\n\n[](#react-native-configure-address-element)\n\nYou can configure the Address Element with details such as displaying default values, setting allowed countries, customizing the appearance, and so on. See the [list of available options](https://github.com/stripe/stripe-react-native/blob/master/src/components/AddressSheet.tsx#L19-L51) for more information.\n\n`<AddressSheet   appearance={{     colors: {       primary: '#F8F8F2',       background: '#272822'     }   }}   defaultValues={{     phone: '111-222-3333',     address: {       country: 'United States',       city: 'San Francisco',     },   }}   additionalFields={{     phoneNumber: 'required',   }}   allowedCountries={['US', 'CA', 'GB']}   primaryButtonTitle={'Use this address'}   sheetTitle={'Shipping Address'}   googlePlacesApiKey={'(optional) YOUR KEY HERE'} />`\n\n[](#react-native-retrieve-address-details)\n\nRetrieve the address details by setting the `visible` property to `true`, and adding callback methods for the `onSubmit` and `onError` properties:\n\n``<AddressSheet   visible={true}   onSubmit={async (addressDetails) => {     // Make sure to set `visible` back to false to dismiss the address element.     setAddressSheetVisible(false);      // Handle result and update your UI   }}   onError={(error) => {     if (error.code === AddressSheetError.Failed) {       Alert.alert('There was an error.', 'Check the logs for details.');       console.log(err?.localizedMessage);     }    // Make sure to set `visible` back to false to dismiss the address element.     setAddressSheetVisible(false);   }} />``",
  "title": "Listen for address input | Stripe Documentation",
  "description": "Collect addresses to use in custom ways using an event listener",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/elements/address-element/collect-addresses",
  "markdown": "# Listen for address input | Stripe DocumentationThe Stripe Docs logo\n\nYou can configure the Address Element to suit your needs.\n\n### Autocomplete![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Address Element has a built in address autocomplete feature that uses the [Google Maps API Places Library](https://developers.google.com/maps/documentation/javascript/places). By default, the autocomplete is enabled with a Stripe provided Google Maps API key if any of the following conditions are met:\n\n*   In a single page checkout flow where the [Payment Element](https://docs.stripe.com/payments/payment-element) is mounted in the same elements group as the Address Element.\n*   In a checkout flow that uses the Address Element in an active [Link](https://docs.stripe.com/payments/link) session.\n\nTo enable autocomplete in the Address Element for all other scenarios, you can use the [`autocomplete`](https://docs.stripe.com/js/elements_object/create_address_element#address_element_create-options-autocomplete) option with `mode` set to `google_maps_api`. Set the `apiKey` to be your own [Google Maps API key](https://developers.google.com/maps/documentation/javascript/get-api-key#create-api-keys) that’s configured to allow the [Places API](https://developers.google.com/maps/documentation/javascript/places#add-places-api-to-the-api-keys-api-restrictions-list) usage. Your Google Maps API key is only used when the Stripe provided Google Maps API key isn’t available.\n\n#### Note\n\nIf you’ve deployed a [CSP](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) and want to enable autocomplete with your own Google Maps API key, include `https://maps.googleapis.com` as a `connect-src` and `script-src` directive. Refer to the [Google Maps API official guide](https://developers.google.com/maps/documentation/javascript/content-security-policy) for the most updated CSP requirement.\n\n`const addressElement = elements.create(\"address\", {   mode: \"shipping\",   autocomplete: {     mode: \"google_maps_api\",     apiKey: \"{YOUR_GOOGLE_MAPS_API_KEY}\",   }, });`\n\n### Prefill address form![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Address Element accepts a [`defaultValues`](https://docs.stripe.com/js/elements_object/create_address_element#address_element_create-options-defaultValues) which lets you prefill the address form when the page loads. An Address Element with all values prefilled looks similar to:\n\n`const addressElement = elements.create(\"address\", {   mode: \"shipping\",   defaultValues: {     name: 'Jane Doe',     address: {       line1: '354 Oyster Point Blvd',       line2: '',       city: 'South San Francisco',       state: 'CA',       postal_code: '94080',       country: 'US',     },   }, });`\n\n### Other options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRefer to [Stripe.js](https://docs.stripe.com/js/elements_object/create_address_element#address_element_create-options) for the complete list of options in detail.\n\n`// Sample of a options object const addressElement = elements.create(\"address\", {   mode: 'shipping',   allowedCountries: ['US'],   blockPoBox: true,   fields: {     phone: 'always',   },   validation: {     phone: {       required: 'never',     },   }, });`",
  "title": "Listen for address input | Stripe Documentation",
  "description": "Collect addresses to use in custom ways using an event listener",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/element/express_checkout_element",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/docs/js/element/express_checkout_element",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/js/element/mount",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/js/appendix/supported_browsers",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/payments/payment-element/best-practices",
  "markdown": "# Payment Element integration best practices\n\n## Learn about best practices before building your Payment Element integration.\n\nUse the checklist on this page to make sure you build your Payment Element integration for optimal performance. The following features enable you to access additional integration options. For example, if you use [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods), you can use [payment method rules](https://docs.stripe.com/payments/payment-method-rules) to present payment methods with custom criteria.\n\n## Integration checklist![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Choose the Payment Element’s [layout](https://docs.stripe.com/payments/payment-element#layout) to match the style of your site, then run an A/B test to confirm the best choice. If you have over 4 payment methods, we recommend the accordion layout.\n    \n*   [Style the Payment Element](https://docs.stripe.com/payments/payment-element#appearance) to match the visual design of your website using the Appearance API. You can apply this style to any element you add to your integration.\n    \n*   Choose how to collect a payment\n    \n    Consider if you want to [collect a payment](https://docs.stripe.com/payments/accept-a-payment-deferred?type=payment) before you create the PaymentIntent API call. To [accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=elements), you must create a PaymentIntent that contains an amount and currency, and confirm that payment to trigger Stripe to make a charge. However, you can alternate the order that you collect the payment and create the PaymentIntent. We recommend that you [collect the payment first](https://docs.stripe.com/payments/accept-a-payment-deferred?type=payment).\n    \n*   Send [metadata](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-metadata) in your PaymentIntent to allow metadata to show up in your reports. This indexes your metadata to make sure that it’s searchable in the Stripe Dashboard. You can use this metadata to find and reference transactions.\n    \n*   Make sure to use the latest API\n    \n    Check to make sure your PaymentIntent uses the [latest API version](https://docs.stripe.com/upgrades#api-versions).\n    \n*   Select the payment methods you want to display\n    \n    Use [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods), part of the default Stripe integration, to present eligible payment methods to your customers. Stripe handles the logic for dynamically displaying the most relevant eligible payment methods to each customer to maximize conversion based on factors such as the amount, currency, location, and so on. Dynamic payment methods allow you to:\n    \n    *   Choose the [payment methods](https://stripe.com/guides/payment-methods-guide) that your customers can use from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods).\n    *   Use additional features, such as [payment method rules](https://docs.stripe.com/payments/payment-method-rules), which allows you to present payment methods using custom criteria.\n*   When your integration is complete, test and [View how payment methods appear to customers](https://dashboard.stripe.com/settings/payment_methods/review). From the **Review displayed payment methods** form, enter a [PaymentIntent ID](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-id) to learn which payment methods were and weren’t available for that specific transaction. You can also simulate which payment methods display in a given scenario by changing factors such as the amount, currency, capture method, and future usage.\n    \n\n## Additional features checklist![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   After you integrate your UI and dynamic payment methods, enable [Link](https://docs.stripe.com/payments/link/payment-element-link) in the [Payment Method settings page](https://dashboard.stripe.com/settings/payment_methods). Link securely saves and fills in customer payment and shipping details. It supports various payment methods, including credit cards, debit cards, and US bank accounts. For logged-in customers that already use Link, this feature prefills their information, regardless of whether they initially saved it on the checkout page of another business.\n    \n*   Add the Link Authentication Element\n    \n    To collect and prefill shipping addresses and sell physical goods, we recommend using the [Link Authentication Element](https://docs.stripe.com/payments/elements/link-authentication-element) to create a single email input field for both email collection and Link authentication.\n    \n*   The Address Element streamlines collection of shipping and billing information during checkout. It integrates with other elements and prefills addresses with Link. It supports auto-suggestions for new address entry using free Google Autocomplete support.\n    \n    *   In `shipping` mode, customers have the option to use their shipping address as their billing address.\n    *   In `billing` mode, Stripe hides billing fields within the Payment Element to make sure that customers only need to enter their details once.\n*   Add the Payment Method Messaging Element\n    \n    If you choose to offer BNPLs, we recommend that you promote them ahead of checkout to help drive awareness, increase order value, and positively impact conversion using the [Payment Method Messaging Element](https://docs.stripe.com/payments/payment-method-messaging).\n    \n    *   You can display this unified embeddable component on product detail, cart, and payment pages.\n    *   This element includes support for [Affirm](https://docs.stripe.com/payments/affirm), [Afterpay](https://docs.stripe.com/payments/afterpay-clearpay), and [Klarna](https://docs.stripe.com/payments/klarna).\n*   Add the Express Checkout Element\n    \n    Use the [Express Checkout Element](https://docs.stripe.com/elements/express-checkout-element) to show customers multiple one-click payment buttons in a single UI component, including [Apple Pay](https://docs.stripe.com/apple-pay), [Google Pay](https://docs.stripe.com/google-pay), [PayPal](https://docs.stripe.com/payments/paypal), and [Link](https://docs.stripe.com/payments/link/express-checkout-element-link).\n    \n\n## Next steps![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=elements)",
  "title": "Payment Element integration best practices | Stripe Documentation",
  "description": "Learn about best practices before building your Payment Element integration.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/payment-element/design-an-integration",
  "markdown": "# Design an integration | Stripe DocumentationThe Stripe Docs logo\n\n## Learn what choices you need to make before integrating the Payment Element.\n\nBefore building your Payment Element integration, choose an integration path that aligns with your business requirements.\n\nThe diagram below provides an overview of the integration guides available when integrating the Payment Element.\n\nThe sections below demonstrate the two architectural choices required when integrating the Payment Element.\n\n[](#when-to-create-intent)\n\nThe Payment Element collects payment information from your customer and populates it onto either a [PaymentIntent](https://docs.stripe.com/api/payment_intents) or a [SetupIntent](https://docs.stripe.com/api/setup_intents) object, depending on whether you’re collecting payment or setting up a payment method for future use. When a customer enters your checkout, you can either:\n\n*   **Create only the Payment Element**: Defer creating and confirming the PaymentIntent or SetupIntent until the customer submits the payment form by pressing the **Pay** button. Choose this option if:\n    \n    *   You have a multi-page checkout flow where the page for collecting payment details comes before the page for payment submission or order summary. Learn how to [build two-step confirmation](https://docs.stripe.com/payments/build-a-two-step-confirmation).\n        \n    *   You have a dynamic checkout page where the amount can change based on customer selections, such as changing the items or quantity of items being purchased, or adding discount codes. By deferring Intent creation until after the customer presses **Pay**, you eliminate the need to synchronize your Intent with the changes made on the client. This is necessary because changes to amount affect the eligibility of certain payment methods. Learn how to [collect payment details before creating a PaymentIntent](https://docs.stripe.com/payments/accept-a-payment-deferred) if you’re confirming the Intent on your client and how to [finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server) if you’re confirming the Intent on your server.\n        \n*   **Create both the PaymentIntent/SetupIntent and the Payment Element**: Create the PaymentIntent or SetupIntent before loading the checkout page and then create the Payment Element, associating the two by providing the Intent’s `client_secret` [as a parameter when creating the Elements object](https://docs.stripe.com/js/elements_object/create#stripe_elements-options-clientSecret). Choose this option if:\n    \n    *   You have a static checkout page and want to quickly set up your integration. Learn how to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=elements).\n\n[](#where-to-confirm-intent)\n\nPayment information collected by the Payment Element is transferred onto the PaymentIntent or SetupIntent at confirmation time. When the customer presses **Pay**, you can either:\n\n*   **Confirm the PaymentIntent/SetupIntent on your client**: Code on your client calls a Stripe SDK, which invokes the API to confirm the Intent. The Stripe SDK also automatically handles additional next actions that might be required, such as authenticating with [3D Secure](https://docs.stripe.com/payments/3d-secure), and also localizes [error](https://docs.stripe.com/api/errors) messages. Choose this option if:\n    \n    *   You don’t require the additional control of confirming the Intent on your server, and you prefer the quickest integration.\n*   **Confirm the PaymentIntent/SetupIntent on your server**: Code on your server directly invokes the API to confirm the Intent. If next actions are required, you must handle them either manually or by using a Stripe SDK, e.g. [`stripe.handleNextAction`](https://docs.stripe.com/js/payment_intents/handle_next_action). Choose this option if:\n    \n    *   You have to execute business logic on your server before the confirmation, such as payment method restrictions or adjusting application fees. After your business logic runs, immediately confirm the Intent on your server to guarantee that the client can’t make any changes that could invalidate your business logic.",
  "title": "Design an integration | Stripe Documentation",
  "description": "Learn what choices you need to make before integrating the Payment Element.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/grabpay",
  "markdown": "# GrabPay payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about GrabPay, a common payment method in Southeast Asia.\n\nGrabPay is a payment method developed by [Grab](https://www.grab.com/sg/pay/). GrabPay is a digital wallet - customers maintain a balance in their wallets that they pay out with.\n\nIn order to pay with GrabPay, customers are redirected to GrabPay’s website, where they have to authenticate the transaction using a one-time password. After authenticating, customers will be redirected back to your website.\n\n*   **Customer locations**\n    \n    Singapore, Malaysia\n    \n*   **Presentment currency**\n    \n    SGD, MYR\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Digital wallet\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis demo shows the customer experience when using GrabPay.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate GrabPay and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable GrabPay. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add GrabPay from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf your integration requires manually listing payment methods, learn how to [manually configure GrabPay as a payment](https://docs.stripe.com/payments/grabpay/accept-a-payment).\n\nCheck out the GrabPay [sample on GitHub](https://github.com/stripe-samples/accept-a-payment).\n\n[](#refunds)\n\nGrabPay payments can be refunded up to 90 days after the original payment. Refunds for GrabPay payments are asynchronous and take up to 5 minutes to complete. We will notify you of the final refund status using the `charge.refund.updated` [webhook](https://docs.stripe.com/webhooks \"webhook\") event. When a refund succeeds, the [Refund](https://docs.stripe.com/api/refunds/object) object’s status transitions to `succeeded`. In the rare instance that a refund fails, the Refund object’s status will transition to `failed` and we will return the amount to your Stripe balance. You will then need to arrange an alternative way of providing your customer with a refund.\n\n[](#disputed-payments)\n\nGrabPay payments have a low risk of fraud or unrecognized payments because the customer must authenticate the payment with Grab. Therefore, there is no dispute process that can result in a chargeback and funds being withdrawn from your Stripe account.",
  "title": "GrabPay payments | Stripe Documentation",
  "description": "Learn about GrabPay, a common payment method in Southeast Asia.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/wechat-pay",
  "markdown": "# WeChat Pay payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about WeChat Pay, a digital wallet popular with customers from China.\n\nAs China’s largest internet company, Tencent offers a number of web and mobile products across social networking, communications, media, games, finance, and so on. WeChat, owned by Tencent, is China’s leading mobile app with over 1 billion monthly active users.\n\nWeChat is a leading lifestyle ‘super app’ used for messaging between people, as well as connecting people, services and businesses in China and around the world through a number of e-commerce and social features inside the app. WeChat Pay, the payment wallet inside the WeChat app, has over 800 million users.\n\nChinese consumers can use WeChat Pay to pay for goods and services inside of businesses’ apps and websites. WeChat Pay users buy most frequently in gaming, e-commerce, travel, online education and food/nutrition.\n\n*   **Customer locations**\n    \n    Chinese consumers, overseas Chinese, and Chinese travelers\n    \n*   **Presentment currency**\n    \n    CNY, AUD, CAD, EUR, GBP, HKD, JPY, SGD, USD, DKK, NOK, SEK, CHF (depending on business location)\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Digital wallet\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Partial (request an invite to create charges [on behalf of](https://docs.stripe.com/connect/charges#on_behalf_of) other accounts)\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate WeChat Pay and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable WeChat Pay. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add WeChat Pay from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n*   [Subscriptions](https://docs.stripe.com/billing/subscriptions/overview)\n\nIf your integration requires manually listing payment methods, learn how to [manually configure WeChat Pay as a payment](https://docs.stripe.com/payments/wechat-pay/accept-a-payment).\n\n## Disputed payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWeChat payments have a low risk of fraud or unrecognized payments because the customer must authenticate the payment via the WeChat Pay app. Therefore, there is no dispute process that can result in a chargeback and funds being withdrawn from your Stripe account.\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPayments made with WeChat Pay can only be submitted for refund within 180 days from the date of the original charge. After 180 days, it is no longer possible to refund the charge. Refunds for WeChat Pay payments are asynchronous. Stripe notifies you of the final refund status using the `charge.refund.updated` [webhook](https://docs.stripe.com/webhooks \"webhook\") event. When a refund succeeds, the [Refund](https://docs.stripe.com/api/refunds/object) object’s status transitions to `succeeded`. In the rare instance that a refund fails, the Refund object’s status transitions to `failed` and Stripe returns the amount to your Stripe balance. You will then need to arrange an alternative way of providing your customer with a refund.\n\n## Supported currencies ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can create WeChat Pay payments in the currencies that map to your country. The default local currency for WeChat Pay is `cny` and customers also see their purchase amount in `cny`.\n\n| Currency | Country |\n| --- | --- |\n| `cny` | All countries |\n| `aud` | Australia |\n| `cad` | Canada |\n| `eur` | Austria, Belgium, Denmark, Finland, France, Germany, Ireland, Italy, Luxembourg, Netherlands, Norway, Portugal, Spain, Sweden, Switzerland |\n| `gbp` | United Kingdom |\n| `hkd` | Hong Kong |\n| `jpy` | Japan |\n| `sgd` | Singapore |\n| `usd` | United States |\n| `dkk` | Denmark |\n| `nok` | Norway |\n| `sek` | Sweden |\n| `chf` | Switzerland |",
  "title": "WeChat Pay payments | Stripe Documentation",
  "description": "Learn about WeChat Pay, a digital wallet popular with customers from China.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/secure-remote-commerce",
  "markdown": "# Secure Remote Commerce program guide\n\n## Accept payments via Secure Remote Commerce in your existing Stripe integration.\n\n[Secure Remote Commerce (SRC)](https://www.mastercard.us/en-us/merchants/grow-your-business/find-solutions-by-need/improve-checkout/secure-digital-checkout.html) is an easy and secure way to pay online and is powered by the global payments industry to protect users’ payment information. Users can add cards from Visa, Mastercard, American Express, and Discover to enable Click to Pay simply and securely. Secure Remote Commerce delivers an enhanced online checkout experience and supports all network brands participating in SRC.\n\n#### Note\n\nBefore implementing, please refer to the [implementation requirements](https://developer.mastercard.com/page/masterpass-requirements-and-best-practices). By using Secure Remote Commerce through Stripe, you agree to the [Operating Rules](https://masterpass.com/assets/pdf/masterpassoperatingrules.pdf). Note that Mastercard offers SRC through its Masterpass platform.\n\n## Integrating the Secure Remote Commerce button ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo get started, generate your Masterpass **Checkout ID** in the [Dashboard](https://dashboard.stripe.com/account/payments/settings) and configure your sandbox and production callback URLs. Note that Mastercard is offering SRC as an update to their Masterpass service, so you will see references to Masterpass within the documentation and code.\n\nTo use SRC on your website, add the following script tag to your HTML document:\n\n| Parameter | Description |\n| --- | --- |\n| `locale` | The country (and language) of the merchant. `en_US` is currently the only valid value as SRC is only available to US merchants. |\n| `checkoutid` | The Checkout ID from Mastercard, copied from the Masterpass section of the [Dashboard](https://dashboard.stripe.com/account/payments/settings) |\n\nTo display the Masterpass button, use one of the following images:\n\nFor a button with black Masterpass text\n\nFor a button with white Masterpass text\n\n| Parameter | Description |\n| --- | --- |\n| `locale` | The country (and language) of the merchant. `en_US` is currently the only valid value as SRC is only available to US merchants. |\n| `paymentmethod` | The list of accepted card brands, comma separated (for example: “master,amex,visa,diners,discover,jcb,maestro”). |\n| `checkoutid` | The Checkout ID from Mastercard, copied from the Masterpass section of the [Dashboard](https://dashboard.stripe.com/account/payments/settings) |\n\nAttach a click handler to the image and use it to invoke the `masterpass.checkout` function with the desired parameters:\n\n`const button = document.getElementById('mpbutton');  button.addEventListener('click', (ev) =>   masterpass.checkout({     checkoutId: '{{MASTERPASS_CHECKOUT_ID}}',     allowedCardTypes: ['master', 'amex', 'visa'],     amount: '10.00',     currency: 'USD',     cartId: '{{UNIQUE_ID}}',     callbackUrl: '{{CALLBACK_URL}}'   }));`\n\nThe `masterpass.checkout` function requires the following parameters:\n\n| Parameter | Description |\n| --- | --- |\n| `checkoutId` | The Checkout ID for your Masterpass project, copied from the [Dashboard](https://dashboard.stripe.com/account/payments/settings) |\n| `allowedCardTypes` | A list of the Masterpass-compatible payment providers that you want to support |\n| `amount` | The amount of the transaction, expressed in decimal format |\n| `currency` | The currency to use for the transaction |\n| `cartId` | A unique string that you generate to identify the purchase |\n| `callbackUrl` | You can use this optional parameter to override the default callbackUrl configured when activating Masterpass. |\n\nFor more details about the `masterpass.checkout` function and the parameters that it accepts, refer to [Mastercard’s documentation](https://developer.mastercard.com/documentation/masterpass-merchant-integration-v7/7#standard-checkout1).\n\n## Completing the payment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen the user clicks the Masterpass button on your checkout page, it takes them to the Masterpass website where they can select an existing payment method from their account or input a new one. When the user completes the process, Masterpass redirects them to the callback URL that you configured when activating Masterpass, or to the specified callback URL when invoking `masterpass.checkout` function. It appends an `oauth_verifier` URL query parameter that your application can use to complete the transaction.\n\nIn the route handler for the redirect destination, extract the URL query parameter and use it to [confirm](https://docs.stripe.com/api/payment_intents/confirm) the [PaymentIntent](https://docs.stripe.com/api/payment_intents) that you have created at the beginning of the checkout flow. See [accept a payment](https://docs.stripe.com/payments/accept-a-payment) to learn how to manage your checkout flow using Payment Intents.\n\nThe following code example demonstrates how to confirm a PaymentIntent with SRC in Node.js with the Express framework:\n\n`app.get('/callback', async (req, res) => {   // retrieve the PaymentIntent ID created at the beginning of the checkout flow.   const payment_intent_id = '{{PAYMENT_INTENT_ID}}';    const payment_intent = await stripe.paymentIntents.confirm(payment_intent_id, {     amount: 1000,     currency: 'usd',     payment_method_data: {       type: 'card',       card: {         masterpass: {           cart_id: '{{UNIQUE_ID}}',           transaction_id: req.query.oauth_verifier,         },       },     },   });    res.send('<h1>Charge succeeded</h1>'); });`\n\n## Testing Secure Remote Commerce ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo test your SRC integration against Mastercard’s sandbox, create a new SRC user account during the checkout process on your website. Configure the account to use one of the [test cards](https://developer.mastercard.com/masterpass/documentation/migration/masterpass_to_src_migration/#mastercard-test-cards) from the Masterpass documentation. Complete the checkout process as normal, selecting the test card as your payment method. If everything works correctly, Mastercard redirects you back to your application, which creates the charge as expected.\n\nThe SRC integration only works correctly when included on an http or https page. Serving from the filesystem is not supported, even during testing.",
  "title": "Secure Remote Commerce program guide | Stripe Documentation",
  "description": "Accept payments via Secure Remote Commerce in your existing Stripe integration.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/revolut-pay",
  "markdown": "# Revolut Pay payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Revolut Pay, a digital wallet payment method used in the United Kingdom and the European Union.\n\nRevolut Pay, developed by [Revolut](https://www.revolut.com/business/revolut-pay/), a global finance app, is a digital wallet payment method. Revolut Pay uses the customer’s stored balance or cards to fund the payment, and offers the option for non-Revolut customers to save their details after their first purchase.\n\nWhen customers select Revolut Pay as their payment method, Stripe redirects them to Revolut Pay’s website, where they have to authenticate with their account details or checkout as a first time user. After authenticating, Revolut Pay redirects customers back to your website.\n\n*   **Customer locations**\n    \n    UK and EU customers\n    \n*   **Presentment currency**\n    \n    EUR Beta, GBP\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Digital wallet\n    \n*   **Recurring payments**\n    \n    Yes\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    Yes\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Revolut Pay and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Revolut Pay. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Revolut Pay from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n*   [Subscriptions](https://docs.stripe.com/billing/subscriptions/overview)\n\nIf your integration requires manually listing payment methods, learn how to [manually configure Revolut Pay as a payment](https://docs.stripe.com/payments/revolut-pay/accept-a-payment).\n\nCheck out the Revolut Pay [sample on GitHub](https://github.com/stripe-samples/accept-a-payment).\n\n[](#refunds)\n\nRevolut Pay supports full and partial refunds. The refund period is up to 180 days after the purchase. Refunds for Revolut Pay payments are asynchronous and take up to 5 minutes to complete. We notify you of the final refund status using the `charge.refund.updated` [webhook](https://docs.stripe.com/webhooks \"webhook\") event. When a refund succeeds, the status of the [Refund object](https://docs.stripe.com/api/refunds/object) transitions to `succeeded`. If a refund fails, the status of the Refund object transitions to `failed` and we return the amount to your Stripe balance. You then need to arrange an alternative way of providing a refund.\n\n[](#disputed-payments)\n\nCustomers must authenticate Revolut Pay payments by logging into their Revolut account. This requirement helps reduce the risk of fraud or unrecognized payments. With [Revolut’s Buyer Protection Policy](https://www.revolut.com/legal/buyer-protection-policy/), customers can file a dispute, which can result in a chargeback and funds being withdrawn from your Stripe account.\n\nCustomers have up to 120 calendar days from the date of purchase to file a dispute. The dispute process works like this:\n\n*   After the customer initiates a dispute, Stripe notifies you through email, the Stripe Dashboard, and an API `charge.dispute.created` event (if your integration is set up to receive [webhooks](https://docs.stripe.com/webhooks)).\n    \n*   Stripe holds back the disputed amount from your balance until Revolut resolves the dispute.\n    \n*   Stripe requests that you upload compelling evidence that you fulfilled the purchase order [using the Stripe Dashboard](https://docs.stripe.com/disputes/responding#respond). This evidence can include:\n    \n    *   A received return confirmation (for shipped goods returned from the customer to you)\n    *   The tracking ID\n    *   The shipping date\n    *   A record of purchase for intangible goods, such as IP address or email receipt\n    *   A record of purchase for services or physical goods, such as phone number or proof of receipt\n*   This information helps Revolut determine if a dispute is valid or if they need to reject it. Make sure the evidence you provide contains as much detail as possible from what the customer provided at checkout. You must submit the requested information within 14 calendar days. Revolut makes a decision within 35 calendar days of evidence submission. If Revolut resolves the dispute in your favor, Stripe returns the disputed amount to your Stripe balance. If Revolut rules in favor of the customer, the balance charge becomes permanent.\n    \n\n#### Note\n\n## Supported currencies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can create Revolut Pay payments in the currencies that map to your country. Currently, we support `gbp` and `eur`. The default local currency for Revolut Pay UK customers is `gbp` and for other EU customers it’s `eur`.\n\n| Currency | Country |\n| --- | --- |\n| `gbp` | United Kingdom |\n| `eur` | Austria, Belgium, Bulgaria, Croatia, Cyprus, Czech Republic, Denmark, Estonia, Finland, France, Germany, Greece, Hungary, Ireland, Italy, Latvia, Liechtenstein, Lithuania, Luxembourg, Malta, Netherlands, Norway, Poland, Portugal, Romania, Slovakia, Slovenia, Spain, Sweden |",
  "title": "Revolut Pay payments | Stripe Documentation",
  "description": "Learn about Revolut Pay, a digital wallet payment method used in the United Kingdom and the European Union.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/cartes-bancaires",
  "markdown": "# Cartes Bancaires (CB) | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Cartes Bancaires, a common payment method in France.\n\nCartes Bancaires is France’s local card network. More than 95% of these cards are co-branded with either Visa or Mastercard, meaning you can process these cards over either Cartes Bancaires or the Visa or Mastercard networks. Businesses processing co-badged cards in the EEA must provide customers a choice of which network they prefer at checkout time. See our [guide for co-badged cards compliance](https://docs.stripe.com/co-badged-cards-compliance) for more information.\n\nCartes Bancaires will likely have a positive effect on your acceptance rate in France. If a charge is declined on the Cartes Bancaires network for a technical reason, Stripe [automatically retries the charge](https://stripe.com/payments/features#authorization) on Visa or Mastercard’s networks.\n\nAs with Visa and Mastercard, cardholders can dispute Cartes Bancaires charges. Because Cartes Bancaires dispute rules are more stringent, there are fewer reasons that a cardholder can dispute a charge, which on average leads to a lower dispute rate compared to Visa and Mastercard for many of our merchants. Merchants cannot contest Cartes Bancaires disputes - the dispute fee is 0 Euro on Cartes Bancaires.\n\n## Availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMerchants located in these [countries](https://docs.stripe.com/connect/payment-method-available-countries#cartes-bancaires) have Cartes Bancaires available. If your business isn’t based in France, Cartes Bancaires won’t be fully enabled until your account has processed 50 EUR from Cartes Bancaires eligible cards. French Stripe accounts with the “type of business” set as “Particulier / Micro-entrepreneur / Auto-entrepreneur” are eligible for Cartes Bancaires after providing their business tax ID in the Dashboard settings.\n\n## Integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you can already [accept card payments](https://docs.stripe.com/payments/accept-a-payment), you can accept Cartes Bancaires. See the [co-badged cards compliance guide](https://docs.stripe.com/co-badged-cards-compliance) to learn how to best handle customer priority selection, and to find multiple test cards that you can use to test your integration as soon as it’s active. If you require that Cartes Bancaires is never the default network for any payments, please contact [support](https://support.stripe.com/contact).",
  "title": "Cartes Bancaires (CB) | Stripe Documentation",
  "description": "Learn about Cartes Bancaires, a common payment method in France.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/acss-debit",
  "markdown": "# Pre-authorized debit payments in Canada\n\n## Learn how to accept pre-authorized debit payments in Canada.\n\nStripe users in Canada and the United States can accept pre-authorized debit payments (PADs) from customers with a Canadian bank account using the Automated Clearing Settlement System (ACSS) provided by [Payments Canada](https://www.payments.ca/).\n\nBefore debiting a customer’s bank account, businesses must first collect a [mandate](#mandates) from the customer defining a specific payment schedule or terms. The mandate includes the customer’s institution number, transit number, account number, name and email.\n\nWhen you use Stripe.js, our foundational JavaScript library for building payment flows, Stripe provides a hosted solution for collecting mandates from customers using your preferred terms, as well as fully-hosted collection of bank account details and instant bank verification (and delayed verification using micro-deposits in rare cases). This verification process is a requirement to accept PADs, and can also help to reduce payment failures and fraudulent activities.\n\nCanadian pre-authorized debits are a [reusable](https://docs.stripe.com/payments/payment-methods#usage), [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method. This means that it can take up to 5 business days after initiating a payment to receive notification of success or failure. PADs are not a guaranteed payment method, there is a risk of failed payments and [disputes](#disputed-payments).\n\n*   **Customer locations**\n    \n    CA\n    \n*   **Presentment currency**\n    \n    CAD, USD (in [rare cases](#presentment-currency))\n    \n*   **Payment confirmation**\n    \n    Business-initiated\n    \n*   **Payment method family**\n    \n    Bank debit\n    \n*   **Recurring payments**\n    \n    Yes\n    \n*   **Payout timing**\n    \n    5-7 days\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\n[Customer](https://docs.stripe.com/api/customers \"Customers\") selects pre-authorized debit at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/account-info.6df4a503f8d05d1d9ddd20a6f15172df.svg)\n\nCustomer provides bank information and accepts mandate\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\nCustomer gets notification that the payment is complete\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Note\n\nSubscription mode in [Checkout](https://docs.stripe.com/payments/checkout) isn’t yet supported. To learn about early access when this feature is available, [contact us](mailto:payment-methods-feedback@stripe.com?subject=PADs%20Subscription%20Mode%20User%20Interest) to join the waitlist.\n\nYou don’t have to integrate Canadian pre-authorized debit and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Canadian pre-authorized debit. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Canadian pre-authorized debit from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Subscriptions](https://docs.stripe.com/billing/subscriptions/overview)\n\nIf you prefer to manually list payment methods or want to save Canadian pre-authorized debit details for future payments, see the following guides:\n\n*   [Manually configure Canadian pre-authorized debit as a payment](https://docs.stripe.com/payments/acss-debit/accept-a-payment)\n*   [Save Canadian pre-authorized debit details for future payments](https://docs.stripe.com/payments/acss-debit/set-up-payment)\n\n## Mandates![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDuring the payment flow, Stripe helps you collect a mandate which gives your business authorization to debit the customer’s account. In Canada, these are called pre-authorized debit agreements or PAD agreements. The mandate collection, confirmation and pre-debit notification requirements for pre-authorized debits are governed by Payments Canada’s [Rule H1 for pre-authorized debits (PADs)](https://www.payments.ca/sites/default/files/h1eng.pdf).\n\nInstructions for collecting mandate acceptance can be found on the [Accept a payment](https://docs.stripe.com/payments/acss-debit/accept-a-payment) page. In the unlikely event that your business requires a custom agreement, information on how to create a mandate that meets Payments Canada requirements can be found on the [Custom PAD mandate agreements](https://docs.stripe.com/payments/acss-debit/custom-pad-agreement) page.\n\nStripe will initiate the first debit immediately after mandate acceptance. Your customers must receive confirmation of a new mandate within 5 days after they have accepted the mandate (see [Mandate and debit notification emails](#mandate-and-debit-notification-emails)).\n\nCustomers can at any time request the cancellation of a mandate, including by properly giving oral notice of cancellation. To cancel a mandate, a customer must either reach out to the business they established the mandate with, or to their bank. Canceling a mandate invalidates any further debit requests that you issue using this mandate. If you wish to accept additional payments from the customer, a new mandate must be established with them.\n\n### Payment Schedule![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach PAD mandate must specify a [payment schedule](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-acss_debit-mandate_options-payment_schedule) that defines when and how debits can be automatically charged to a customer.\n\n| Schedule | Use Case |\n| --- | --- |\n| `interval` | Subsequent payments for set interval PADs can be charged to customers outside of your checkout flow on a specified schedule or based on triggering events clearly described in the mandate with an [interval description](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-acss_debit-mandate_options-interval_description).<br><br>One or more debits that occur with predictability, such as:<br><br>*   a one-time payment on a specific date<br>*   on a set of dates<br>*   on a regular basis (for example, weekly, monthly)<br>*   on the occurrence of certain criteria or events<br><br>Some example `interval_description` values for which you could debit:<br><br>*   on the 5th of every month<br>*   on completion of checkout<br>*   on acceptance of a contract<br>*   when a customer balance owing reaches $100<br>*   when any invoice becomes due |\n| `sporadic` | Debits that are infrequent or irregular and not at specified or predictable periods or time. Sporadic PADs can be charged to customers at arbitrary times, but only with the express authorization of the customer at the time of payment (such as logging into your website).<br><br>An example of a sporadic payment could be a balance owed by the customer where payment is triggered by the customer rather than automatically by you at a certain time. Collecting bank account details and a `sporadic` mandate ahead of time would allow your customer to trigger payment with a single step. |\n| `combined` | A mandate that would allow both `interval` and `sporadic` debits. |\n\n## Mandate and debit notification emails![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [Payments Canada network rules](https://www.payments.ca/sites/default/files/h1eng.pdf) require that you notify your customer:\n\n*   When a mandate is established\n*   Each time a debit is made on their account\n\nIn addition, should your customer’s bank account need to be verified using micro-deposits, Stripe will send reminder emails linking to a hosted verification page.\n\nBy default, Stripe automatically sends emails to the customer for these cases. You can [customize the colors and logo](https://dashboard.stripe.com/account/branding) for these emails to fit the design and branding of your business.\n\n#### Warning\n\nIf you prefer to send custom notifications, all of these emails must be supported. It is not possible to send custom notifications for only one of them.\n\nTo send custom notifications:\n\n*   Turn off Stripe emails in the [Stripe Dashboard email settings](https://dashboard.stripe.com/account/emails)\n*   Send a **mandate confirmation** email when you have collected your customer’s bank account and mandate authorization.\n    *   Mandate confirmation emails must be sent no later than 5 calendar days after your customer has accepted the mandate. Stripe will initiate the first debit immediately after mandate acceptance.\n    *   The email must include the mandate you created for the debit (see [Custom PAD mandate agreements](https://docs.stripe.com/payments/acss-debit/custom-pad-agreement)) and the bank account information collected from your customer, including the institution number, transit number and last four digits of the account number.\n*   Use the [charge.pending](https://docs.stripe.com/api/events/types#event_types-charge.pending) event to trigger **debit notification** emails.\n    *   Debit notification emails must include: your contact information, the last 4 digits of your customer’s bank account, and the amount to be debited.\n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCanadian pre-authorized debits provide a dispute process for bank account holders to dispute payments. Customers can dispute a debit payment through their bank on a “no questions asked” basis for up to 90 calendar days after a debit on a personal account or up to 10 business days for a business account. The customer’s bank can honor any dispute within this period.\n\nWhen a dispute is created, Stripe sends both the [charge.dispute.created](https://docs.stripe.com/api/events/types#event_types-charge.dispute.created) and [charge.dispute.closed](https://docs.stripe.com/api/events/types#event_types-charge.dispute.closed) [webhook](https://docs.stripe.com/webhooks \"webhook\") events, and deducts the amount of the dispute and associated dispute fee from your Stripe balance.\n\nUnlike [credit card disputes](https://docs.stripe.com/disputes), all PAD disputes are final and there is no process for appeal. If a customer successfully disputes a payment, you must contact them if you want to resolve the situation. If you’re able to come to an arrangement and your customer is willing to return the funds to you, they must make a new payment.\n\n#### Warning\n\nIf you proactively issue your customer a refund while the customer’s bank also initiates the dispute process, your customer might receive two credits for the same transaction. You should follow the guidelines in the following section on refunds to avoid this happening.\n\n## Payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPre-authorized debit payments are subject to a minimum 5 business day [payout timing](https://docs.stripe.com/payouts#standard-payout-timing) from charge creation. If your payout timing is longer than 5 business days, payouts from PAD payments will be unified with card payouts.\n\n## Presentment currency Optional![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMost bank accounts in Canada hold Canadian dollars (CAD), with a small number of accounts in other currencies, including US dollars (USD). It is possible to accept PAD payments in either CAD or USD, but choosing the correct currency for your customer is important to avoid payment failures.\n\nUnlike many card-based payment methods, you might not be able to successfully debit a CAD account in USD or debit a USD account in CAD. Most often, attempting to do so will result in a delayed payment failure that will take up to 5 business days.\n\nTo avoid these failures, it is safest to take PAD payments in CAD unless you are confident your customer’s account will accept USD debits.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRefunds for PADs must be submitted within 180 days from the date of the original payment. Refunds require additional time to process (typically 3 business days). If you accidentally debit your customer, please contact them immediately to avoid a payment dispute.\n\nRefunds are processed only after the payment process is complete. If you create a full or partial refund on a payment that hasn’t yet completed, the refund is actioned when the `Charge` object’s status transitions to `succeeded`. If the `Charge` object’s status transitions to `failed`, the full or partial refund is marked as canceled because the money was never debited from the customer’s bank account.\n\nPAD refunds are not explicitly labeled as refunds when the funds are deposited back to a customer’s bank account. Instead, refunds are processed as a credit and include a reference to the original payment’s statement descriptor.\n\nDue to longer settlement time periods and how banks process PAD transactions, there is potential for confusion between you, your customer, your customer’s bank, and Stripe. For example, your customer might contact both you and their bank to dispute a payment. If you proactively issue your customer a refund while the customer’s bank also initiates the dispute process, your customer might receive two credits for the same transaction.\n\nWhen issuing a refund, you should inform your customer immediately that the refund typically takes 3 business days to arrive in their bank account.\n\n## Statement descriptors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEvery PAD payment shows up on customers’ bank statements with the _name of the merchant_. For PAD payments created with Stripe, the name of the merchant is your Stripe account’s [statement descriptor](https://docs.stripe.com/get-started/account/statement-descriptors). You can override this default behavior for every transaction independently by using a [dynamic statement descriptor](https://docs.stripe.com/payments/payment-intents#dynamic-statement-descriptor). To do so, you can specify the [`statement_descriptor`](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-statement_descriptor) parameter when creating the `PaymentIntent`.\n\n#### Caution\n\nPlease note that your statement descriptor will be truncated to the first 15 alphanumeric characters on the bank statement. For example, if your statement descriptor is `ROCKETRIDESLIMITED`, the customer will see `ROCKETRIDESLIMI`.\n\nAdditionally, statement descriptors cannot use the special characters `<`, `>`, `'`, or `\"`.\n\nThe table below illustrates the _merchant name_ behavior you can expect on the customer’s bank statement:\n\n| Default statement descriptor | Dynamic statement descriptor | Merchant name | Bank statement descriptor |\n| --- | --- | --- | --- |\n| Rocket Rides | Unspecified | `Rocket Rides` | `Rocket Rides` |\n| Rocket Rides | `Sunday Ride` | `Rocket Rides` | `Sunday Ride` |\n\nEach bank in Canada formats these fields differently. Depending on your customer’s bank, some fields might appear in all lowercase or uppercase.\n\n### Statement descriptors and Connect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe charge type of Connect payments changes the statement descriptor and the merchant name, which appears on the customer’s bank statement.\n\n| Charge type | Descriptor taken from |\n| --- | --- |\n| Direct | Connected Account |\n| Destination | Platform |\n| Separate charge and transfer | Platform |\n| Destination (with `on_behalf_of`) | Connected Account |\n| Separate charge and transfer (with `on_behalf_of`) | Connected Account |\n\nA mandate collected for a `PaymentIntent` `on_behalf_of` a Connected Account cannot be used with a different Connected Account.",
  "title": "Pre-authorized debit payments in Canada | Stripe Documentation",
  "description": "Learn how to accept pre-authorized debit payments in Canada.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/fpx",
  "markdown": "# FPX payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about FPX, a common payment method in Malaysia.\n\nFinancial Process Exchange (FPX) is a Malaysia-based payment method that allows customers to complete transactions online using their bank credentials. Bank Negara Malaysia (BNM), the Central Bank of Malaysia, and 11 other major Malaysian financial institutions are members of the PayNet Group, which owns and operates FPX. It’s one of the most popular online payment methods in Malaysia, with nearly 90 million transactions in 2018 according to BNM.\n\nIn order to pay with FPX, customers are redirected to their online banking environment where they have to perform two-step authorization. The exact customer experience varies depending on their bank. The FPX payment flow is well understood and intuitive to Malaysian customers.\n\nAs part of being regulatory compliant, Stripe requires merchants to provide their Business Registration Number (BRN) to process FPX charges and receive payouts.\n\n*   **Customer locations**\n    \n    Malaysia\n    \n*   **Presentment currency**\n    \n    MYR\n    \n*   **Payment confirmation**\n    \n    Customer-authenticated\n    \n*   **Payment method family**\n    \n    Authenticated bank debit\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Payout timing**\n    \n    5 business days\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Watch a video](#payment-flow-video)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\nCustomer selects FPX at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/select-bank.8f253f020c5c5bd6f81ef281739fe9e2.svg)\n\nChooses bank and gets redirected\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect.f6e6ccf58078e0a25815560086204c24.svg)\n\nCustomer enters account credentials\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/pincode-sms.d10a5a14a3a7e5d3c00942531f9143cd.svg)\n\nCustomer completes authorization process\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect-success.740e23b33b6f52a746e8ec50285e2805.svg)\n\nCustomer gets notification that payment is complete\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\n(Optional) Customer returns back to business’s site for payment confirmation\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate FPX and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable FPX. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add FPX from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf your integration requires manually listing payment methods, learn how to [manually configure FPX as a payment](https://docs.stripe.com/payments/fpx/accept-a-payment).\n\nCheck out the FPX [sample on GitHub](https://github.com/stripe-samples/accept-a-payment).\n\n[](#disputed-payments)\n\nThe risk of fraud or unrecognized payments is low because the customer must authenticate the payment with their bank. As a result, you won’t have disputes that turn into chargebacks, with funds withdrawn from your Stripe account.\n\n[](#refunds)\n\nFPX payments can be refunded up to 60 days after the original payment. Refunds for FPX payments are asynchronous and take approximately 1 week to complete. We’ll notify you of the final refund status using the `charge.refund.updated` [webhook](https://docs.stripe.com/webhooks \"webhook\") event. When a refund succeeds, the [Refund](https://docs.stripe.com/api/refunds/object) object’s status transitions to `succeeded`. A refund can fail if the customer’s bank is unable to process it correctly (for example, the bank account is closed). In the rare instance that a refund fails, the Refund object’s status will transition to `failed` and we’ll return the amount to your Stripe balance. You’ll then need to arrange an alternative way of providing your customer with a refund.",
  "title": "FPX payments | Stripe Documentation",
  "description": "Learn about FPX, a common payment method in Malaysia.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/bancontact",
  "markdown": "# Bancontact payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Bancontact, a common payment method in Belgium.\n\nBancontact is the most popular online payment method in Belgium, with over 15 million cards in circulation. [Customers](https://docs.stripe.com/api/customers \"Customers\") use a Bancontact card or mobile app linked to a Belgian bank account to make online payments that are secure, guaranteed, and confirmed immediately.\n\nIn order to pay with Bancontact, customers are redirected to the Bancontact website or mobile app to [authorize the payment](https://docs.stripe.com/payments/payment-methods#customer-actions) and then return to your website where there is [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) about the success or failure of the payment.\n\n*   **Customer locations**\n    \n    Belgium\n    \n*   **Presentment currency**\n    \n    EUR\n    \n*   **Payment confirmation**\n    \n    Customer-authenticated\n    \n*   **Payment method family**\n    \n    Authenticated bank-debit\n    \n*   **Recurring payments**\n    \n    via SEPA Direct Debit\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flows ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\nCustomer selects Bancontact at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect.f6e6ccf58078e0a25815560086204c24.svg)\n\nCustomer is redirected to Bancontact and enters credentials\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect-success.740e23b33b6f52a746e8ec50285e2805.svg)\n\nCustomer is notified that payment is complete\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\n(Optional) Customer returns back to business’s site for payment confirmation\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\nCustomer selects Bancontact at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/alipay-redirect.a7d55d9f51dfd309abbb223e64bcec9c.svg)\n\nCustomer is redirected to Bancontact and scans QR code\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/mobile-pincode.7ddc36e8cb2d507facc1c0eb19ce7435.svg)\n\nCustomer enters pincode\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/mobile-redirect.043807104eb6fd382652e3ea987daf95.svg)\n\nCustomer is notified that payment is complete\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\n(Optional) Customer returns back to business’s site for payment confirmation\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Bancontact and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Bancontact. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Bancontact from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf you prefer to manually list payment methods or want to save Bancontact details for future payments, see the following guides:\n\n*   [Manually configure Bancontact as a payment](https://docs.stripe.com/payments/bancontact/accept-a-payment)\n*   [Save Bancontact details for future payments](https://docs.stripe.com/payments/bancontact/set-up-payment)\n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe risk of fraud or unrecognized payments is low because the customer must authenticate the payment with their bank. As a result, you won’t have disputes that turn into chargebacks, with funds withdrawn from your Stripe account.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBancontact payments can be refunded up to 180 days after the original payment date.",
  "title": "Bancontact payments | Stripe Documentation",
  "description": "Learn about Bancontact, a common payment method in Belgium.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/blik",
  "markdown": "# BLIK payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about BLIK, a common payment method in Poland.\n\nBLIK is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method that requires customers to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payments. When customers want to pay online using BLIK, they request a six-digit code from their banking application and enter it into the payment collection form.\n\nThe bank sends a push notification to your customer’s mobile phone asking to authorize the payment inside their banking application. The BLIK code is valid for 2 minutes; customers have 60 seconds to authorize the payment after starting a payment. After 60 seconds, it times out and they must request a new BLIK code. Customers typically approve BLIK payments in less than 10 seconds.\n\n*   **Customer locations**\n    \n    Poland\n    \n*   **Presentment currency**\n    \n    PLN\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Authenticated bank debit\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/blik_payment_flow_1.7e386c77d6410d13caf823130b7ec68a.svg)\n\nCustomer selects BLIK at checkout.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/blik_payment_flow_2.5caa9f807d50579710cc01b361a2d0fc.svg)\n\nCustomer is directed to their mobile banking app to generate a 6-digit code.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/blik_payment_flow_3.8e52c5c894b439baae7bec85b96b71b2.svg)\n\nCustomer puts the code into the checkout.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/blik_payment_flow_4.a93b15c949981d6a0b61463ff201fc53.svg)\n\nCustomer is notified that payment is complete.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate BLIK and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable BLIK. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\nIf you prefer to manually list payment methods, learn how to [manually configure BLIK as a payment](https://docs.stripe.com/payments/blik/accept-a-payment).\n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBLIK has a claims process that allows transaction disputes. Customers can open disputes for cases of suspected fraud, double payments, or a difference between an order and a transaction amount.\n\nAfter the customer initiates a dispute, Stripe notifies you using:\n\n*   Email\n*   The Stripe Dashboard\n*   An API `charge.dispute.created` event (if your integration is set up to receive [webhooks](https://docs.stripe.com/webhooks))\n\nStripe holds back the disputed amount from your balance until BLIK resolves the dispute.\n\nWe request that you upload compelling evidence proving that you fulfilled the purchase order [using the Stripe Dashboard](https://docs.stripe.com/disputes/responding#respond). This evidence can include the:\n\n*   Tracking ID\n*   Shipping date\n*   Record of purchase for intangible goods, such as IP address or email receipt\n*   Record of purchase for services or physical goods, such as phone number or proof of receipt\n*   Record of refund (for purchase you have already refunded)\n\nTo handle disputes programmatically, [respond to disputes using the API](https://docs.stripe.com/disputes/api).\n\nThis information helps BLIK determine if a dispute is valid. Make sure the evidence you provide contains as much detail as possible from what the customer provided at checkout. You must submit the requested information within 12 calendar days. If BLIK resolves the dispute with you winning, we return the disputed amount to your Stripe balance. If BLIK rules in favor of the customer, the balance charge becomes permanent.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBLIK supports full and partial refunds. Depending on the bank, refunds are processed immediately or within a couple of hours.\n\n## Connect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you use [Connect](https://docs.stripe.com/connect \"Connect\"), you must consider the following before you enable and use BLIK.\n\n### Request BLIK capabilities for your connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSet the `blik_payments` capability to `active` on your platform account, and on any connected accounts you want to enable BLIK for. You can also [request more account capabilities](https://docs.stripe.com/connect/account-capabilities#requesting-unrequesting).\n\n### Merchant of record and statement descriptors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [charge type](https://docs.stripe.com/connect/charges) of Connect payments might change the default statement descriptor and the merchant name that appears on the customer’s banking application and confirmation emails.\n\n| Charge type | Descriptor taken from |\n| --- | --- |\n| Direct | Connected Account |\n| Destination | Platform |\n| Separate charge and transfer | Platform |\n| Destination (with `on_behalf_of`) | Connected Account |\n| Separate charge and transfer (with `on_behalf_of`) | Connected Account |",
  "title": "BLIK payments | Stripe Documentation",
  "description": "Learn about BLIK, a common payment method in Poland.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/paynow",
  "markdown": "# PayNow payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about PayNow, a popular payment method in Singapore.\n\nPayNow is a Singapore based payment method that allows customers to make a payment using their preferred app from participating banks and participating non-bank financial institutions.\n\nCustomers see a QR code when checking out with PayNow. They complete the payment by scanning it using [a participating app](https://www.abs.org.sg/consumer-banking/pay-now). You receive confirmation from Stripe instantly when they complete the payment.\n\n*   **Customer locations**\n    \n    Singapore\n    \n*   **Presentment currency**\n    \n    SGD\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Real-time payments\n    \n*   **Billing support**\n    \n    Yes\n    \n*   **Payout timing**\n    \n    T+1 availability\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Not applicable\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / Yes\n    \n*   **Pricing**\n    \n    1.3%\n    \n\n[](#refunds)\n\nYou don’t have to integrate PayNow and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable PayNow. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add PayNow from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n*   [Subscriptions](https://docs.stripe.com/billing/subscriptions/overview)\n\nIf your integration requires manually listing payment methods, learn how to [manually configure PayNow as a payment](https://docs.stripe.com/payments/paynow/accept-a-payment).\n\n[](#refunds)\n\nYou can refund PayNow payments up to 90 days after the original payment. Refunds for PayNow payments are asynchronous and Stripe notifies you of the final refund status using the `charge.refund.updated` [webhook](https://docs.stripe.com/webhooks \"webhook\") event. When a refund succeeds, the status of the [Refund](https://docs.stripe.com/api/refunds/object) object transitions to `succeeded`. If a refund fails, the status of the Refund object transitions to `failed` and Stripe returns the amount to your Stripe balance. At this point, you need to arrange an alternative way of providing your customer with a refund.\n\n[](#statement-descriptors)\n\nCustomized statement descriptors aren’t supported by PayNow, the value specified in the [statement\\_descriptor](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-statement_descriptor) is ignored. Stripe’s company name (`STRIPE PAYMENTS SINGAPORE PTE. LTD.`) is shown when your customers complete payments on their mobile app. It’s also shown on bank statements along with the amount and a Stripe-generated reference code.\n\n[](#repeated-payments)\n\nTo prevent your customers from being charged multiple times, after your customer successfully completes a transaction, any subsequent attempts to pay using the same QR code are rejected. The rejection behavior depends on the bank and payment app used by the customer to attempt the transaction. If your customers contact you about repeated payments, you can advise them to check for text messages or notifications from their bank or payment app, which will show that the payment attempt was rejected.\n\n[](#payout-timing)\n\nBy default, it takes 1 day from the time of the transaction for the funds to be available in your Stripe balance. Stripe pays out available funds to your bank account according to the payout schedule set on your Stripe account.\n\nFor example, if the payment was made on Wednesday, the funds are available in your Stripe balance on Thursday. If you’re on an automatic daily payout schedule, the funds are paid out on Thursday. If you’re on a weekly (Monday) payout schedule, the funds are paid out on the coming Monday.\n\n[](#disputed-payments)\n\nPayNow payments have a low risk of fraud or unrecognized payments because the customer must authenticate the payment through participating apps. As a result, there’s no dispute process that can result in a chargeback and funds being withdrawn from your Stripe account.",
  "title": "PayNow payments | Stripe Documentation",
  "description": "Learn about PayNow, a popular payment method in Singapore.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/eps",
  "markdown": "# EPS payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about EPS, a common payment method in Austria.\n\nEPS is an Austria-based payment method that lets customers complete transactions online using their bank credentials. All Austrian banks support EPS, and over 80% of Austrian online retailers accept it.\n\nEPS redirects customers to their bank’s website to [authenticate a payment](https://docs.stripe.com/payments/payment-methods#customer-actions). You receive [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) about the success or failure of a payment.\n\n*   **Customer locations**\n    \n    Austria\n    \n*   **Presentment currency**\n    \n    EUR\n    \n*   **Payment confirmation**\n    \n    Customer-authenticated\n    \n*   **Payment method family**\n    \n    Authenticated bank debit\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\nCustomer selects EPS at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/select-bank.8f253f020c5c5bd6f81ef281739fe9e2.svg)\n\nCustomer chooses their bank and is redirected to that bank’s login page\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect.f6e6ccf58078e0a25815560086204c24.svg)\n\nCustomer enters account credentials\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/pincode-sms.d10a5a14a3a7e5d3c00942531f9143cd.svg)\n\nCustomer completes authorization process (with scanner or SMS)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect-success.740e23b33b6f52a746e8ec50285e2805.svg)\n\nCustomer is notified that payment is complete\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\n(Optional) Customer returns back to the business’s site for payment confirmation\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate EPS and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable EPS. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add EPS from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf your integration requires manually listing payment methods, learn how to [manually configure EPS as a payment](https://docs.stripe.com/payments/eps/accept-a-payment).\n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe risk of fraud or unrecognized payments is low because the customer must authenticate the payment with their bank. As a result, you won’t have disputes that turn into chargebacks, with funds withdrawn from your Stripe account.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEPS payments can be refunded up to 180 days after the original payment date.",
  "title": "EPS payments | Stripe Documentation",
  "description": "Learn about EPS, a common payment method in Austria.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/giropay",
  "markdown": "# giropay payments | Stripe DocumentationThe Stripe Docs logo\n\n## giropay paymentsDeprecated\n\n## Learn about giropay, a common payment method in Germany.\n\n#### Warning\n\nOur financial partners are deprecating Giropay. No new business onboarding or transactions will be possible after June 30, 2024. Read our [support page](https://support.stripe.com/questions/june-2024-update-to-giropays-availability) for more details.\n\ngiropay is a German payment method based on online banking, introduced in 2006. It allows customers to complete transactions online using their online banking environment, with funds debited from their bank account. Depending on their bank, customers confirm payments on giropay using a second factor of authentication or a PIN. giropay accounts for 10% of online checkouts in Germany.\n\ngiropay redirects customers to their website to [authenticate a payment](https://docs.stripe.com/payments/payment-methods#customer-actions) and there is [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) about the success or failure of a payment.\n\n*   **Customer locations**\n    \n    Germany\n    \n*   **Presentment currency**\n    \n    EUR\n    \n*   **Payment confirmation**\n    \n    Customer-authenticated\n    \n*   **Payment method family**\n    \n    Authenticated bank debit\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis demo shows the customer experience when using Giropay.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate giropay and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable giropay. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add giropay from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf your integration requires manually listing payment methods, learn how to [manually configure giropay as a payment](https://docs.stripe.com/payments/giropay/accept-a-payment).\n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe risk of fraud or unrecognized payments is low because the customer must authenticate the payment with their bank. As a result, you won’t have disputes that turn into chargebacks, with funds withdrawn from your Stripe account.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\ngiropay payments can be refunded up to 180 days after the original payment date.",
  "title": "giropay payments | Stripe Documentation",
  "description": "Learn about giropay, a common payment method in Germany.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/p24",
  "markdown": "# Przelewy24 payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Przelewy24, a common payment method in Poland.\n\nPrzelewy24 is a Poland-based payment method aggregator that allows customers to complete transactions online using bank transfers and other methods. Bank transfers account for 30% of online payments in Poland and Przelewy24 provides a way for customers to pay with over 165 banks.\n\nPrzelewy24 redirects customers to their website to [authenticate a payment](https://docs.stripe.com/payments/payment-methods#customer-actions) and there is [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) about the success or failure of a payment.\n\n*   **Customer locations**\n    \n    Poland\n    \n*   **Presentment currency**\n    \n    EUR or PLN\n    \n*   **Payment confirmation**\n    \n    Customer-authenticated\n    \n*   **Payment method family**\n    \n    Authenticated bank debit\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\nCustomer selects Przelewy24 at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/select-bank.8f253f020c5c5bd6f81ef281739fe9e2.svg)\n\nCustomer is redirected to Przelewy24 and chooses bank\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect.f6e6ccf58078e0a25815560086204c24.svg)\n\nCustomer enters account credentials\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/pincode-sms.d10a5a14a3a7e5d3c00942531f9143cd.svg)\n\nCustomer completes authorization process\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect-success.740e23b33b6f52a746e8ec50285e2805.svg)\n\nCustomer is notified that payment is complete\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\n(Optional) Customer returns back to business’s site for payment confirmation\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Przelewy24 and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Przelewy24. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Przelewy24 from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf your integration requires manually listing payment methods, learn how to [manually configure Przelewy24 as a payment](https://docs.stripe.com/payments/p24/accept-a-payment).\n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe risk of fraud or unrecognized payments is low because the customer must authenticate the payment with their bank. As a result, you won’t have disputes that turn into chargebacks, with funds withdrawn from your Stripe account.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayments made with Przelewy24 can only be submitted for refund within 180 days from the date of the original charge. After 180 days, it is no longer possible to refund the charge.",
  "title": "Przelewy24 payments | Stripe Documentation",
  "description": "Learn about Przelewy24, a common payment method in Poland.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/twint",
  "markdown": "# TWINT payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about TWINT, a popular payment method in Switzerland.\n\nTWINT is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) payment method used in Switzerland. It allows customers to [authenticate and approve](https://docs.stripe.com/payments/payment-methods#customer-actions) payments using an approved TWINT mobile app.\n\nYou get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed.\n\n*   **Customer locations**\n    \n    Switzerland\n    \n*   **Presentment currency**\n    \n    CHF\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Bank Redirects\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    [Standard payout timing](https://docs.stripe.com/payouts#payout-speed) applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds/Partial refunds**\n    \n    Yes/yes\n    \n*   **Maximum Amount** CHF 5000.00\n    \n\n## Payment flows ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCustomers pay with TWINT by using one of the following methods:\n\n*   **Mobile**: Customers follow a mobile redirect from your website or mobile app to a TWINT app, where they authorize the payment, then return to your website or mobile app.\n    \n*   **Desktop**: Customers scan a QR code you present on your website using a TWINT app, which allows them to authorize the payment.\n    \n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate TWINT and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable TWINT. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add TWINT from the Dashboard:\n\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf you prefer to manually list payment methods, learn how to [manually configure TWINT as a payment method](https://docs.stripe.com/payments/twint/accept-a-payment).\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can refund TWINT charges up to 365 days after the payment completes. Refunds usually take a few minutes to complete. TWINT supports full and partial refunds. You can also issue multiple partial refunds up to the amount of the original charge.\n\n## Disputed payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBuyers can dispute TWINT transactions by filing a complaint with their bank. TWINT disputes are rare, with 25-50 disputes recorded for every 1,000,000 transactions.\n\n## TWINT with Connect ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use [Stripe Connect](https://docs.stripe.com/connect/overview) with TWINT to process payments on behalf of a connected account. Connect users can use TWINT with the following account and charge types:\n\n### Enable TWINT for connected accounts that use the Stripe Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnected accounts that use the Stripe Dashboard can enable TWINT in their [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods) in the Dashboard. To check which accounts have enabled TWINT, use the `capabilities` hash in our [accounts webhooks or APIs](https://docs.stripe.com/api/accounts/object#account_object-capabilities-twint_payments) to see if the `twint_payments` capability is set to `active`.\n\n### Enable TWINT for connected accounts that use the Express Dashboard or a dashboard that isn’t hosted by Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFollow the instructions to [enable payment methods for your connected accounts](https://docs.stripe.com/connect/account-capabilities). The name of your connected account is the name customers see during checkout and in the TWINT app.",
  "title": "TWINT payments | Stripe Documentation",
  "description": "Learn about TWINT, a popular payment method in Switzerland.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/afterpay-clearpay",
  "markdown": "# Afterpay and Clearpay payments | Stripe DocumentationThe Stripe Docs logo\n\n## Offer your customers flexible financing while getting paid upfront with Afterpay (also known as Clearpay in the UK).\n\nAfterpay is a global payment method that allows your customers to split purchases into 4 interest-free installments, or longer term interest-bearing monthly installments (US only).\n\nTo pay with Afterpay, customers are redirected to Afterpay’s site, where they authorize the payment by agreeing to the terms of a payment plan, then return to your website to complete the order. Afterpay offers payment options based on factors such as customer credit, prior account history, order amount, and the type of goods or services being underwritten. After payment acceptance, the full amount of the order (minus fees) is made available to your Stripe account upfront, and Afterpay collects the purchase amount from your customer, who repays Afterpay directly over time. For more information, see [Payment options and limits](#collection-schedule).\n\n*   **Customer locations**\n    \n    United States, Canada, United Kingdom, Australia, New Zealand\n    \n*   **Presentment currency**\n    \n    USD, CAD, GBP, AUD, or NZD\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Buy Now, Pay Later\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    Yes\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n#### Note\n\nAfterpay and Clearpay only support domestic transactions, meaning you can only sell to customers in the same country as your business. If you’re using [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods), Stripe handles a customer’s payment method eligibility automatically. If you use [payment\\_method\\_types](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-payment_method_types), you must either configure your integration so that it only presents Afterpay and Clearpay to eligible customers, or use dynamic payment methods.\n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis demo shows the customer experience when using Afterpay.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Afterpay and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Afterpay. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n[Payment Links](https://docs.stripe.com/payment-links) also supports adding Afterpay from the Dashboard.\n\nIf you prefer to manually list payment methods, learn how to [manually configure Afterpay as a payment](https://docs.stripe.com/payments/afterpay-clearpay/accept-a-payment).\n\nYou can also let customers know Afterpay payments are available by including the [Payment Method Messaging Element](https://docs.stripe.com/payments/payment-method-messaging) on your product, cart, and payment pages. We recommend adding a site messaging Element to help drive conversion.\n\n## Payment options and limits ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPayment options vary by cart order size and country. In the US, Afterpay presents customers with Pay in 4, monthly installments, or both options. For all other markets, Afterpay presents customers with Pay in 4 only.\n\n*   **Pay in 4**: customers pay for purchases in four or fewer interest-free, bi-weekly payments over a 6 week term.\n*   **Monthly installments**: (US only) customers pay for purchases over a 6 or 12 month term that includes capped interest.\n\nAfterpay collects the first installment from the customer immediately, and the next installment either 2 weeks or 1 month after, depending on the payment schedule. You can accept payments from customers in the same country that you registered your Stripe account. Payments must also match the local currency of the country.\n\nThe following table lists total transaction limits and installment schedules by country.\n\n| Stripe account and customer country | Currency | Transaction limits |\n| --- | --- | --- |\n| Australia | AUD | 1 - 2,000 AUD |\n| Canada | CAD | 1 - 2,000 CAD |\n| New Zealand | NZD | 1 - 2,000 NZD |\n| United Kingdom | GBP | 1 - 1,200 GBP |\n| United States | USD | 1 - 4,000 USD |\n\n### United States![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Prohibited business categories![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the categories of [businesses restricted from using Stripe overall](https://stripe.com/restricted-businesses), the following categories are prohibited from using Afterpay.\n\n*   Alcohol\n*   Donations\n*   Pre-orders\n*   NFTs\n*   B2B\n\nFor the complete list, see the [terms of service](https://stripe.com/afterpay-clearpay/legal#restricted-businesses).\n\n## Adding Afterpay branding to your website![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLet your customers know you accept payments with Afterpay by including the [Payment Method Messaging Element](https://docs.stripe.com/payments/payment-method-messaging) on your product and cart pages.\n\nAfterpay also provides static [visual assets and branding guidance](https://www.afterpay.com/retailer-resources). In AU, CA, NZ and the US, consumers know Afterpay as ‘Afterpay’. In the UK, they know it as ‘Clearpay’. Make sure you pick the right location (see the footer in the [Afterpay documentation](https://www.afterpay.com/retailer-resources)) so that you get the appropriate assets. For Clearpay, see the [UK assets and branding guidance](https://www.clearpay.co.uk/en-GB/retailer-resources).\n\n## Disputed payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCustomers must authenticate Afterpay payments by logging into their Afterpay account. This requirement helps reduce the risk of fraud or unrecognized payments. Afterpay covers losses incurred from customer fraud or the inability to repay installments. However, Stripe might contact you on behalf of Afterpay and request to stop or pause a shipment before any losses are incurred. It’s important to comply promptly with these requests.\n\nCustomers can dispute Afterpay payments in certain cases—for example, if they don’t receive the goods they paid for. Customers have up to 120 calendar days from the date of purchase to file a dispute. The dispute process works like this:\n\nAfter the customer initiates a dispute, Stripe notifies you using:\n\n*   Email\n*   The Stripe Dashboard\n*   An API `charge.dispute.created` event (if your integration is set up to receive [webhooks](https://docs.stripe.com/webhooks))\n\nStripe holds back the disputed amount from your balance until Afterpay resolves the dispute.\n\nStripe requests that you upload compelling evidence that you fulfilled the purchase order [using the Stripe Dashboard](https://docs.stripe.com/disputes/responding#respond). This evidence can include:\n\n*   A received return confirmation (for shipped goods returned from the customer to you)\n*   The tracking ID\n*   The shipping date\n*   A record of purchase for intangible goods, such as IP address or email receipt\n*   A record of purchase for services or physical goods, such as phone number or proof of receipt\n\nIf you prefer to handle disputes programmatically, you can [respond to disputes using the API](https://docs.stripe.com/disputes/api).\n\nThis information helps Afterpay determine if a dispute is valid or if they should reject it. Make sure the evidence you provide contains as much detail as possible from what the customer provided at checkout. You must submit the requested information within 14 calendar days. Afterpay makes a decision within 30 calendar days of evidence submission. If Afterpay resolves the dispute with you winning, Stripe returns the disputed amount to your Stripe balance. If Afterpay rules in favor of the customer, the balance charge becomes permanent.\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can refund Afterpay charges up to 120 days after the original payment. Refunds for Afterpay payments are asynchronous.\n\n## Connect ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use [Stripe Connect](https://docs.stripe.com/connect/overview) with Afterpay to process payments on behalf of a connected account. [Connect](https://docs.stripe.com/connect \"Connect\") users can use Afterpay with the following charge types:\n\nStripe and Afterpay rely on merchant category codes (MCC) to determine eligibility of the connected accounts against the Afterpay [prohibited business categories](#prohibited-business-categories). Make sure that you set [correct MCCs](https://docs.stripe.com/connect/setting-mcc) for your connected accounts that use the Express Dashboard or a dashboard that isn’t hosted by Stripe.",
  "title": "Afterpay and Clearpay payments | Stripe Documentation",
  "description": "Offer your customers flexible financing while getting paid upfront with Afterpay (also known as Clearpay in the UK).",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/affirm",
  "markdown": "# Affirm payments | Stripe DocumentationThe Stripe Docs logo\n\n## Offer your US and Canadian customers flexible financing while getting paid upfront with Affirm\n\n[Affirm](https://www.affirm.com/) is a popular payment method in the US and Canada that gives your customers a way to split purchases over a series of payments. Pay in 4 interest-free installments or in monthly installments of up to 36 months.\n\nTo pay with Affirm, customers are redirected to Affirm’s site, where they [authorize](https://docs.stripe.com/payments/payment-methods#customer-actions) the payment by agreeing to the terms of a payment plan, then return to your website to complete the order. Affirm offers payment options based on factors such as customer credit, prior account history, order amount, and the type of goods or services being underwritten. After payment acceptance, the full amount of the order (minus fees) is made available to your Stripe account upfront, and Affirm collects the purchase amount from your customer, who repays Affirm directly over time.\n\n*   **Customer locations**\n    \n    United States, Canada\n    \n*   **Presentment currency**\n    \n    USD or CAD\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Buy Now, Pay Later\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    Standard\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes, by email from Stripe\n    \n*   **Manual capture support**\n    \n    Yes\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n#### Note\n\nAffirm only supports domestic transactions, meaning you can only sell to customers in the same country as your business. If you’re using [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods), Stripe handles a customer’s payment method eligibility automatically. If you use [payment\\_method\\_types](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-payment_method_types), you must either configure your integration so that it only presents Affirm to eligible customers, or use dynamic payment methods.\n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis demo shows the customer experience when using Affirm.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Affirm and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Affirm. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n[Payment Links](https://docs.stripe.com/payment-links) also supports adding Affirm from the Dashboard.\n\nIf you prefer to manually list payment methods, learn how to [manually configure Affirm as a payment](https://docs.stripe.com/payments/affirm/accept-a-payment).\n\nYou can also let customers know Affirm payments are available by including the [Payment Method Messaging Element](https://docs.stripe.com/payments/payment-method-messaging) on your product, cart, and payment pages. We recommend adding a site messaging Element to help drive conversion.\n\n## Payment options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDepending on the cart order size, Affirm presents customers with Pay in 4, monthly installments, or both.\n\n*   **Pay in 4**: customers pay for purchases in four or fewer interest-free, bi-weekly payments over an 8 week term. Available for cart sizes between $50 and $250\\*.\n*   **Monthly Installments**: customers pay for purchases over a longer term of up to 36 months, which might include interest. Available for cart sizes between 100 USD and 30,000 USD\\*.\n\n\\* Term lengths and cart ranges are determined by Affirm and might change at their discretion.\n\n## Prohibited and restricted business categories![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the categories of [businesses restricted from using Stripe overall](https://stripe.com/restricted-businesses), the following categories are prohibited from using Affirm.\n\n*   Business to business services\n*   Home improvement services, including contractors and special trade contractors\n*   Titled goods and auto loans, including entire cars, boats, and other motor vehicles (parts and services allowed)\n*   Professional services (including legal, consulting, and accounting)\n*   NFTs\n*   Pre-orders\n\nHealthcare services are approved to use Affirm, however they’re subject to additional requirements. For the complete list of prohibited businesses and additional requirements, see [the Affirm Payment Terms](https://stripe.com/legal/affirm).\n\n## Adding Affirm branding to your website![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Payment Method Messaging Element](https://docs.stripe.com/payments/payment-method-messaging) on your site to let customers know that you offer Affirm ahead of checkout. You must comply with Affirm’s [marketing compliance guides](https://docs.affirm.com/developers/docs/compliance_and_guidelines) and use the Affirm [guide](https://businesshub.affirm.com/hc/en-us/articles/10653174159636-Affirm-Marketing-Compliance-Guides) that relates to the Affirm payment options you offer your customers.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nReturns are subject to the return policy that you display on your website. If your business allows returns, you can [refund](https://docs.stripe.com/refunds) Affirm transactions as you normally would for card payments. Affirm supports partial or full refunds for up to 120 days after the original purchase, and processes them asynchronously. After Stripe initiates a refund, Affirm pauses the customer’s payment plan and refunds the customer for any payments they’ve already made, minus any interest paid. Stripe doesn’t credit back the processing fees in the event of a refund.\n\n## Disputes and fraud![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustomers must authenticate Affirm payments by logging into their Affirm account. This requirement helps reduce the risk of fraud or unrecognized payments. While Affirm covers losses incurred from customer fraud, Stripe might contact you on behalf of Affirm and request to stop or pause shipment before any losses are incurred. Comply promptly with these requests.\n\nCustomers can dispute Affirm payments in certain cases—for example, if they receive faulty goods or don’t receive them at all. Customers have up to 60 calendar days from the date of purchase to file a dispute. The dispute process works like this:\n\nAfter the customer initiates a dispute, Stripe notifies you using:\n\n*   Email notification\n*   Stripe Dashboard\n*   An API `charge.dispute.created` event (if your integration is set up to receive [webhooks](https://docs.stripe.com/webhooks))\n\nStripe holds back the disputed amount from your balance until Affirm resolves the dispute, which can take a maximum of 30 calendar days from dispute creation.\n\nStripe requests that you upload compelling evidence that you fulfilled the purchase order [using the Stripe Dashboard](https://docs.stripe.com/disputes/responding#respond). This evidence can include:\n\n*   Received return confirmation (for shipped goods returned from the customer to you)\n*   Tracking ID\n*   Shipping date\n*   Record of purchase for intangible goods, such as IP address or email receipt\n*   Record of purchase for services or physical goods, such as phone number or proof of receipt\n\nIf you would rather handle disputes programmatically, you can [respond to disputes using the API](https://docs.stripe.com/disputes/api).\n\nThis information helps Affirm determine if a dispute is valid or if they should reject it. Make sure the evidence you provide contains as much detail as possible from what the customer provided at checkout. You must submit the requested information within 15 calendar days. Affirm makes a decision within 15 calendar days of evidence submission. If Affirm resolves the dispute with you winning, Stripe returns the disputed amount to your Stripe balance. If Affirm rules in favor of the customer, the balance charge becomes permanent.\n\n## Customer emails![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter a customer uses Affirm to make a purchase, Affirm emails the customer with updates. These updates include information about the following events:\n\n*   Affirm confirms or denies a loan. Affirms sends these updates when the payment\\_intent succeeds or when Affirm denies the loan.\n*   A [refund](https://docs.stripe.com/refunds) completes.\n*   A payment is cancelled, which results in Affirm cancellling the loan.\n*   The customer completes a payment as part of the payment plan.\n\nAffirm only sends email updates about Affirm’s loan issuance to your customer. You should continue to separately send emails related to the purchase such as order confirmation and shipping updates.\n\n## Connect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use [Stripe Connect](https://docs.stripe.com/connect) with Affirm to process payments on behalf of a connected account. [Connect](https://docs.stripe.com/connect \"Connect\") users can use Affirm with the following charge types:\n\n### Request Affirm capability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMake sure you [request](https://docs.stripe.com/connect/account-capabilities#requesting-unrequesting) the `affirm_payments` capability and it’s set to `active` on both your platform account and any connected accounts you want to enable.\n\n### Set correct MCC![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe and Affirm rely on merchant category codes (MCC) to determine eligibility of the connected accounts against the Affirm [prohibited business categories](https://docs.stripe.com/payments/affirm#prohibited-and-restricted-business-categories). Make sure that you set [correct MCCs](https://docs.stripe.com/connect/setting-mcc) for your connected accounts that use the Express Dashboard or a dashboard that isn’t hosted by Stripe.\n\n### Merchant of record![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [charge type](https://docs.stripe.com/connect/charges) of Connect payments might change the merchant name that appears on Affirm’s website or app during the redirect. The merchant of record determines the Stripe account authorized to create payments with a particular [PaymentMethod](https://docs.stripe.com/api/payment_methods/object).",
  "title": "Affirm payments | Stripe Documentation",
  "description": "Offer your US and Canadian customers flexible financing while getting paid upfront with Affirm",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/klarna",
  "markdown": "# Klarna payments | Stripe DocumentationThe Stripe Docs logo\n\n## Offer flexible payment options and get paid up front with Klarna.\n\nKlarna is a global payment method that gives customers a range of payment options during checkout. These payment options make it convenient for customers to purchase items in all price ranges.\n\nTo pay with Klarna, customers are redirected to Klarna’s site, where they select their preferred payment option, then return to your website to complete the order. Klarna presents payment options based on the customer’s billing address and transaction amount. After payment acceptance, the full amount of the order (minus fees) is made available to your Stripe account up front, and Klarna collects the purchase amount from your customer, including any future installment payments, if applicable.\n\nThis demo shows the customer experience when using Klarna.\n\nThe following tabs capture Klarna’s properties and country availability:\n\n*   **Supported customer countries**\n    \n    Australia, Austria, Belgium, Canada, Czechia, Denmark, Finland, France, Greece, Germany, Ireland, Italy, Netherlands, New Zealand, Norway, Poland, Portugal, Spain, Sweden, Switzerland, United Kingdom, and the United States\n    \n*   **Presentment currency**\n    \n    AUD, CAD, CHF, CZK, DKK, EUR, GBP, NOK, NZD, PLN, SEK, or USD\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Buy Now, Pay Later\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    Yes\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / Yes\n    \n\nIf you’re based in the EEA, UK, or Switzerland, then you can transact with consumers across the EEA, UK, and Switzerland, provided the presentment currency matches the currency of the customer’s country. For example, a Swedish business can present in EUR to accept Klarna from a buyer in Germany.\n\nIf you’re based outside of the EEA, UK, or Switzerland, then you can only transact with customers within your country, and the presentment currency must be the currency of your country. For example, an Australian business must present in AUD, and can only transact with buyers in Australia.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Klarna and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Klarna. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\nYou can also [manually list](https://docs.stripe.com/payments/klarna/accept-a-payment) Klarna as a payment method and use it with [Payment Links](https://docs.stripe.com/payment-links) or the [Payment Method Messaging Element](https://docs.stripe.com/payments/payment-method-messaging).\n\n## Payment options ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDepending on the customer’s billing country and the transaction amount, Klarna can present customers with various payment options. Cart ranges and geographic availability for payment options are determined by Klarna and may change at their discretion. Regardless of the underlying payment option selected, Stripe makes the full amount of the funds (minus fees) available to you upfront and Klarna collects the purchase amount from your customer, who repays Klarna directly. These options include:\n\n*   **Pay now**: Customers pay for the purchase immediately using a linked card, bank debit, or bank transfer.\n*   **Pay later**: Customers pay for the purchase in a single payment in 30 days.\n*   **Pay in 3 or 4** (also known as Installments): Customers pay for the purchase in three or four interest-free payments. The total transaction amount is typically spread equally across the installments, but Klarna might occasionally charge your customer more in the first installment based on the customer’s purchase power and other credit factors.\n*   **Financing** (also known as Monthly installments): Customers pay for the purchase over a longer term of up to 36 months, which might include interest. Not all customers are approved for the maximum amount, and approval is subject to credit worthiness.\n\nThe following tables list the supported payment options for the countries in each region. If a payment option isn’t listed for a country, it isn’t currently supported.\n\n### Canada\n\n### United States\n\n## Prohibited business categories![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the industry and business categories listed in [Prohibited and restricted business](https://stripe.com/restricted-businesses), the following categories aren’t allowed to use Klarna:\n\n*   Charities\n*   Political organizations, parties, or initiatives\n*   B2B\n\nFor more information about Klarna eligibility for your account, navigate to your [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods).\n\n## Klarna branding ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nLet your customers know you accept payments with Klarna by including the [Payment Method Messaging Element](https://docs.stripe.com/payments/payment-method-messaging) on your product and cart pages. You must comply with Klarna’s [marketing compliance guides](https://docs.klarna.com/marketing/solutions/grab-and-go).\n\nIf you’re in the UK, there are [FCA](https://www.fca.org.uk/) regulatory requirements in the UK regarding advertising Klarna’s BNPL payment methods. Failure to comply can result in criminal charges. Per these requirements, you must only advertise Klarna with messaging approved by Klarna. You can find Klarna approved messaging in Klarna’s [UK Financial Promotion Rules](https://docs.klarna.com/marketing/solutions/grab-and-go/gb/Klarna-Financial-Promotion-Rules/).\n\n## Disputed payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nKlarna covers disputes driven by customer fraud or inability to repay installments provided you follow [Klarna’s shipping policy](https://www.klarna.com/international/shipping-policies/). Merchants aren’t involved in these disputes.\n\nCustomers can open a dispute within 180 days of the original transaction. Communicate directly with your customer to try and solve the issue together. If you can’t reach a solution, Klarna intervenes to help solve the dispute. You can manage disputes in the Stripe Dashboard and with APIs.\n\n### Dashboard or API disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPrior to November 15, 2023, you could only manage Klarna disputes through emails. Now, all new Klarna disputes are managed in the Stripe Dashboard and with APIs. As you transition from managing disputes through email to handling them in the Dashboard or with the API, you must continue to respond to existing email disputes by email.\n\nTo learn how to use the Dashboard or API to manage disputes, see [Respond to disputes](https://docs.stripe.com/payments/klarna/disputes).\n\n### Email disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nKlarna reaches out to both you and the customer, requesting convincing evidence that you fulfilled the purchase order. Klarna emails the support email address that you list in your [Dashboard settings](https://dashboard.stripe.com/settings/public) when you activate Klarna. If you haven’t provided a support email address, Klarna defaults to your primary Stripe account email address. [Contact us](https://support.stripe.com/contact) to modify the email address Klarna uses.\n\nKlarna might request evidence such as:\n\n*   Received return confirmation (for shipped goods returned from the customer to you).\n*   Tracking ID.\n*   Shipping date.\n*   Record of purchase for intangible goods, such as IP address or email receipt.\n*   Record of purchase for services or physical goods, such as phone number or proof of receipt.\n\nThis information helps Klarna determine if a dispute is valid or if they’ll reject it. Make sure the evidence you provide contains as much detail as possible from what the customer provided at checkout. You must submit the requested information within 7 days. If Klarna rules in favor of the customer, they might initiate a dispute, with funds withdrawn from your Stripe account. Klarna dispute decisions are final, and they have no appeal process.\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can refund Klarna charges up to 180 days after the payment completes. Klarna cancels any remaining payments on a refunded charge and returns the already-paid amount to the customer. Refunds usually take 5-7 business days to complete, but may take longer depending on the customer’s financial institution and the type of purchase. Klarna supports full and partial refunds. You can also issue multiple partial refunds up to the amount of the original charge. Partial refunds update the Klarna order to reflect the new total amount.\n\n*   If the partial refund is greater than the remaining balance of the order, Klarna deducts the refund amount from the outstanding balance and returns the difference.\n*   If the partial refund is less than the remaining balance of the order, Klarna deducts the amount from the outstanding balance and spreads refunds evenly across the remaining payments.\n\n## Klarna with Connect ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use [Stripe Connect](https://docs.stripe.com/connect/overview) with Klarna to process payments on behalf of a connected account. Connect users can use Klarna with the following charge types:\n\n### Enable Klarna for connected accounts that use the Stripe Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnected accounts that use the Stripe Dashboard can enable Klarna through their Dashboard. To check which accounts have enabled Klarna, use the `capabilities` hash in our [accounts webhooks or APIs](https://docs.stripe.com/api/accounts/object#account_object-capabilities-klarna_payments) to see if the `klarna_payments` capability is set to `active`.\n\n### Request capabilities for connected accounts that use the Express Dashboard or a dashboard that isn’t hosted by Stripe ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nRequest the `klarna_payments` capability on any connected account you want to enable Klarna for. See [this guide](https://docs.stripe.com/connect/account-capabilities) to learn more about requesting capabilities for your connected accounts. The name of your connected account is the name customers see during checkout and in the Klarna app.\n\n## Termination rights ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn addition to the termination and suspension rights included in the [Stripe Services Agreement](https://stripe.com/klarna/legal), Klarna has certain additional rights to suspend or terminate your use of Klarna, such as for breach of the prohibited business categories listed above or for high dispute rates that aren’t promptly remedied.\n\n## Additional requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou acknowledge that:\n\n*   Klarna decides if customers can use Klarna for purchases and has the sole right to receive payment from Klarna customers. Stripe acquires those purchases for you and settles the funds to you.\n*   You must provide customers with any required or requested payment instructions or documents (such as VAT). These documents must refer to Klarna as the payee and not contain any of your bank details.\n*   You can’t impose fees or higher prices for Klarna purchases or act unfairly towards Klarna.\n*   You must promptly follow Stripe’s instructions to stop an order process or shipping to help reduce the risk of fraudulent transactions.\n*   You can’t use any design that’s confusingly similar to Klarna’s trademarks (see [Klarna’s branding guidelines](https://docs.klarna.com/marketing/)).\n*   You must not permit use of Klarna for purchases by a person who might reasonably be considered to share a financial interest with you, including owners, directors, and employees of your business or any affiliated company.\n\nIf you’re in Australia, Klarna provides guidance on how to comply with the [Design and Distribution Obligations (DDO)](https://docs.klarna.com/marketing/au/advertising-legal-guidelines/design-and-distribution-obligations-ddo/) when accepting Klarna in Australia. Most Stripe users don’t need to do anything to comply. If you actively promote or recommend Klarna’s Pay in 4 product in Australia, you may be considered a “distributor” under the DDO and may have to:\n\n*   Help Klarna as needed to comply with the DDO, including only promoting Pay in 4 consistent with Klarna’s [Target Market Determination (TMD)](https://www.klarna.com/au/legal/target-market-determinations/)\n*   Promptly advise Klarna of any “significant adverse dealing” such as:\n    *   a major complaint or large number of complaints that Pay in 4 causes a customer harm or\n    *   a customer under 18 makes a purchase using Pay in 4\n*   If requested, provide Klarna with reports about any Pay in 4 complaints you receive\n*   Keep and, if requested, provide Klarna information relating to any reported significant adverse dealings",
  "title": "Klarna payments | Stripe Documentation",
  "description": "Offer flexible payment options and get paid up front with Klarna.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/zip",
  "markdown": "# Zip payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Zip, a popular payment method in Australia and the US for customers to buy now and pay later.\n\n[Zip](https://zip.co/) gives your customers in Australia and the US (beta) a way to split purchases over a series of payments.\n\nCustomers who elect to pay with Zip are redirected to the Zip site, where they [authorize](https://docs.stripe.com/payments/payment-methods#customer-actions) the payment by agreeing to the terms of a payment plan. After payment terms acceptance, Zip transfers funds to your Stripe account up front and your customer repays Zip over time according to their agreement terms.\n\n*   **Customer locations**\n    \n    Australia, United States Beta\n    \n*   **Presentment currency**\n    \n    AUD, USD Beta\n    \n*   **Payment confirmation**\n    \n    Customer-authenticated\n    \n*   **Payment method family**\n    \n    Buy Now, Pay Later\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    Standard\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBelow is a demonstration of the Zip payment flow from your checkout page:\n\nThis demo shows the customer experience when using Zip.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Zip and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Zip. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Zip from the Dashboard:\n\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf you prefer to manually list payment methods, learn how to [manually configure Zip as a payment](https://docs.stripe.com/payments/zip/accept-a-payment).\n\n## Payment options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAvailable payment options vary by country. In Australia, Zip offers Zip Pay and Zip Money, which have flexible repayment plans. In the US, Zip offers a Pay in 4 plan that splits repayment into 4 installments over 6 weeks. Regardless of the payment option selected, Stripe makes the full amount of the funds (minus fees) available to you upfront and Zip collects the purchase amount from your customer, who repays Zip directly.\n\n*   [Zip Pay](https://zip.co/au/zip-pay): A line of credit up to 1000 AUD. Customers can select their repayment frequency, either weekly, bi-weekly, or monthly. Zip charges customers a monthly account fee, but waives it if the balance is repaid in full.\n    \n*   [Zip Money](https://zip.co/au/zip-money): A line of credit between 1000 AUD and 5000 AUD, and potentially up to 50,000 AUD. Customers can adjust the installment period with no interest for 3-36 months, depending on the retailer. If you want to offer your customers interest-free repayment periods longer than 3 months, or credit limits higher than 5000 AUD, [contact Stripe support](https://support.stripe.com/contact/email?question=other&topic=payment_apis&subject=ZipPayments&refcode=yN2i). Zip charges customers an account establishment fee and a monthly fee, but waives the monthly fee when the account balance is zero.\n    \n*   [Zip pay-in-4](https://zip.co/us/how-it-works): Customers pay for purchases over 4 installments. Zip [adds a finance charge](https://help.us.zip.co/hc/en-us/articles/4402386045979--Are-there-any-fees-to-use-Zip) based on the purchase amount, and splits the total amount into 4 equal installments. Customers pay the first installment at time of purchase, then make the 3 remaining repayments at 2-week intervals.\n    \n\nThe following table lists total transaction limits, currency and payment options by country:\n\n| Stripe account and customer country | Currency | Transaction limits | Zip Pay | Zip Money | Zip pay-in-4 |\n| --- | --- | --- | --- | --- | --- |\n| Australia | AUD | 1 - 50,000\\* |     |     |     |\n| United States Beta | USD | 35 - 1,500 |     |     |     |\n\n\\* If the purchase amount is greater than their available credit, customers can pay the rest with cards up front.\n\n## Prohibited business categories![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to standard [Stripe business restrictions](https://stripe.com/legal/restricted-businesses), some other business categories are prohibited from accepting Zip payments through Stripe, depending on your country.\n\nFor detailed information, see Zip prohibited and restricted business information for [Australia](https://help.zip.co/hc/en-us/articles/6544802536591) and the [United States](https://merchant-help.us.zip.co/hc/en-us/articles/12709915538971-Prohibited-and-Restricted-Business-Information).\n\n## Adding Zip branding to your website![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nZip works closely with partners to constantly test and enhance the way Zip is presented to customers. Their integration and marketing requirements aim to improve customer experience and benefit businesses by converting more browsers into shoppers and increasing average basket sizes. You must use and display Zip’s branding according to their guidance, which varies by country:\n\n*   Australia: See [best practice integration](https://developers.zip.co/docs/best-practice-implementation) guide and [static visual assets and branding guidelines](https://developers.zip.co/docs/zip-marketing-assets).\n*   United States: See [marketing guidelines](https://zip.co/us/merchant-resources)\n\n## Disputes and fraud![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustomers must authenticate Zip payments by logging into their Zip account. This requirement helps reduce the risk of fraud or unrecognized payments. While Zip covers losses incurred from customer fraud, Stripe might contact you on behalf of Zip and request to stop or pause shipment before any losses are incurred. Comply promptly with these requests.\n\nCustomers can dispute Zip payments in certain cases—for example, if they receive faulty goods or don’t receive them at all. Customers have up to 180 calendar days from the date of purchase to file a dispute.\n\nIn Australia, Zip requires customers to first contact you directly to resolve a dispute. If, after 14 days from the date of purchase, that doesn’t resolve it, the customer can initiate a dispute case with Zip.\n\nStripe notifies you of a dispute using:\n\n*   Email\n*   Stripe Dashboard\n*   An API `charge.dispute.created` event (if your integration is set up to receive [webhooks](https://docs.stripe.com/webhooks))\n\nStripe holds back the disputed amount from your balance until Zip resolves the dispute.\n\nStripe requests that you upload compelling evidence that you fulfilled the purchase order [using the Stripe Dashboard](https://docs.stripe.com/disputes/responding#respond). This evidence can include:\n\n*   Received return confirmation (for shipped goods returned from the customer to you)\n*   Tracking ID\n*   Shipping date\n*   Record of purchase for intangible goods, such as an IP address or email receipt\n*   Record of purchase for services or physical goods, such as a phone number or proof of receipt\n\nIf you would rather handle disputes programmatically, you can [respond to disputes using the API](https://docs.stripe.com/disputes/api).\n\nThis information helps Zip determine if a dispute is valid or if they need to reject it. Make sure the evidence you provide contains as much detail as possible from what the customer provided at checkout. If Zip resolves the dispute with you winning, Stripe returns the disputed amount and dispute fee to your Stripe balance. If Zip rules in favor of the customer, the balance charge becomes permanent.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayments made with Zip can only be submitted for refund within 180 calendar days from the date of the original charge. After 180 days, it’s no longer possible to refund the charge.\n\n## Additional requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**You acknowledge that:**\n\n*   Zip decides if customers can use Zip for purchases and has the sole right to receive payment from Zip customers. Stripe acquires those purchases for you and settles the funds to you.\n*   You must not process a Zip transaction unless delivery will be completed within 60 days.\n*   You must retain information about each Zip transaction for at least 18 months.\n*   You can’t give return credits in cash unless required by law.\n*   You can’t impose fees or higher prices for Zip purchases (that is, no surcharging).\n*   If a customer has questions about how Zip handles their information, you will refer them to Zip’s privacy policy.\n\n**If you’re in the United States, you acknowledge that:**\n\n*   All goods and services for Zip transactions must be located in the United States.\n*   Zip can’t be used to pay for a gift card, gift voucher, prepaid stored value card, or prepaid stored value voucher.\n*   Transactions must be recorded in US dollars.\n*   Zip or its lending partner may extend credit to Zip customers for a fee.",
  "title": "Zip payments | Stripe Documentation",
  "description": "Learn about Zip, a popular payment method in Australia and the US for customers to buy now and pay later.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/swish",
  "markdown": "# Swish payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Swish, a popular payment method in Sweden.\n\nSwish is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) payment method used in Sweden. It allows customers to [authenticate and approve](https://docs.stripe.com/payments/payment-methods#customer-actions) payments using the Swish mobile app and the Swedish BankID mobile app.\n\nYou get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed.\n\n*   **Customer locations**\n    \n    Sweden\n    \n*   **Presentment currency**\n    \n    SEK\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Real-time payments\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    [Standard payout timing](https://docs.stripe.com/payouts#payout-speed) applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds/Partial refunds**\n    \n    Yes/yes\n    \n\n## Payment flows ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![The customer follows a mobile redirect flow to pay with Swish.](https://d37ugbyn3rpeym.cloudfront.net/docs/payments/swish/mobile-payment-flow-2160.png)\n\nThe customer follows a mobile redirect flow to pay with Swish.\n\nCustomers pay with Swish by using one of the following methods:\n\n*   **Mobile**: Customers follow a mobile redirect from your website or mobile app to the Swish app, where they authorize the payment, then return to your website or mobile app.\n    \n*   **Desktop**: Customers scan a QR code you present on your website using the Swish app, which allows them to authorize the payment.\n    \n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nLearn how to [manually configure Swish as a payment method](https://docs.stripe.com/payments/swish/accept-a-payment).\n\nYou don’t have to integrate Swish and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Swish. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Swish from the Dashboard:\n\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\n## Merchant of record ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor Swish payments, Stripe operates as the merchant of record. Therefore, Stripe’s name appears as the recipient of payments in the Swish app and as the statement descriptor in the customer’s bank statements. Your business name appears in the message field in the Swish app.\n\n## Prohibited business categories![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the industry and business categories listed in [Prohibited and Restricted Businesses](https://stripe.com/restricted-businesses), the following categories aren’t allowed to use Swish:\n\n*   Precious stones and metals, watches and jewelry\n*   Digital wallet top-ups\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can refund Swish charges up to 365 days after the payment completes. Refunds usually take a few minutes to complete. Swish supports full and partial refunds. You can also issue multiple partial refunds up to the amount of the original charge.\n\n## Swish with Connect ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use [Stripe Connect](https://docs.stripe.com/connect/overview) with Swish to process payments on behalf of a connected account. Connect users can use Swish with the following charge types:\n\n### Enable Swish for connected accounts that use the Stripe Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnected accounts that use the Stripe dashboard can enable Swish in their [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods) in the Dashboard. To check which accounts have enabled Swish, use the `capabilities` hash in our [accounts webhooks or APIs](https://docs.stripe.com/api/accounts/object#account_object-capabilities-swish_payments) to see if the `swish_payments` capability is set to `active`.\n\n### Enable Swish for connected accounts that use the Express Dashboard or a dashboard that isn’t hosted by Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFollow the instructions to [enable payment methods for your connected accounts](https://docs.stripe.com/connect/account-capabilities). The name of your connected account is the name customers see during checkout and in the Swish app.",
  "title": "Swish payments | Stripe Documentation",
  "description": "Learn about Swish, a popular payment method in Sweden.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/pix",
  "markdown": "# Pix payments | Stripe DocumentationThe Stripe Docs logo\n\n## Pix paymentsInvite only\n\n## Learn how to accept payments with Pix, a Brazilian instant payment method.\n\n* * *\n\nPix is an instant payment method in Brazil. Customers receive a Pix string or QR code that contains the amount to pay for services or goods to complete transactions. Customers then pay the Pix, before its expiration date, using their bank apps or internet banking. You’ll receive payment confirmation as soon as the Pix is paid. Funds are available for payout 2 business days after payment confirmation.\n\n*   **Customer locations**\n    \n    Brazil\n    \n*   **Payment method family**\n    \n    Real-time payments\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Presentment currency**\n    \n    BRL\n    \n*   **Recurring Payments**\n    \n    No\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payout timing**\n    \n    2 business days\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes",
  "title": "Pix payments | Stripe Documentation",
  "description": "Learn how to accept payments with Pix, a Brazilian instant payment method.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/promptpay",
  "markdown": "# PromptPay payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about PromptPay, a popular payment method in Thailand.\n\nPromptPay is a Thailand based payment method that allows customers to make a payment using their preferred app from participating banks.\n\nCustomers see a QR code when checking out with PromptPay. They complete the payment by scanning it using a Thailand bank app. You receive confirmation from Stripe instantly when they complete the payment.\n\n*   **Customer locations**\n    \n    Thailand\n    \n*   **Presentment currency**\n    \n    THB\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Real-time payments\n    \n*   **Billing support**\n    \n    Yes\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Not applicable\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / Yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\n1\\. Selects PromptPay at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/scan.2074e5bcfa4b800f9f8b7414c886cc49.svg)\n\n2\\. Scans displayed QR code with preferred app\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/authorize.3d8b09a8035d24ad7cb68d6f57552a1e.svg)\n\n3\\. Authorizes payment\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\n4\\. Gets notification that payment is complete\n\n[](#get-started)\n\nYou don’t have to integrate PromptPay and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable PromptPay. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add PromptPay from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n*   [Subscriptions](https://docs.stripe.com/billing/subscriptions/overview)\n\nIf you prefer to manually list payment methods, learn how to [manually configure PromptPay as a payment](https://docs.stripe.com/payments/promptpay/accept-a-payment).\n\n[](#refunds)\n\nStripe supports refunds of PromptPay payments either through the [Dashboard](https://dashboard.stripe.com/payments) or [API](https://docs.stripe.com/api#create_refund). To complete a refund, your customer must tell us where to return the funds. Stripe automatically contacts the customer at the email address provided at time of PaymentIntent confirmation and requests refund account information from them. Your customer must provide the account number of the bank account from which the payment was made, or the refund may fail. We will process the refund automatically after receiving the refund account information.\n\n[](#statement-descriptors)\n\nPromptPay doesn’t support customized statement descriptors, and it ignores the value specified in the [statement\\_descriptor](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-statement_descriptor). Customers see the Stripe company name (`STRIPE PAYMENTS (THAILAND) LTD`) when they complete payments on their banking app. They also see it on bank statements, along with the amount and a unique reference code.\n\n[](#repeated-payments)\n\nAfter a customer successfully completes a transaction, any attempt to use the same QR code again may result in having the funds deducted from their bank account. If Stripe receives any excess funds from your customers, we reimburse them to your account balance and notify you. You will need to issue the refund to your customers outside of Stripe (for example, with a check, cash, or store credit).\n\n[](#disputed-payments)\n\nPromptPay payments have a low risk of fraud or unrecognized payments because the customer must authenticate the payment through banking apps. However, cases of irregularities similar to disputes, or other unexpected/repeated payments may arise. Stripe reviews these cases, and may contact you or take other action if required.",
  "title": "PromptPay payments | Stripe Documentation",
  "description": "Learn about PromptPay, a popular payment method in Thailand.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/multibanco",
  "markdown": "# Multibanco payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to accept payments with Multibanco.\n\nMultibanco is a voucher-based payment method in Portugal. If your business is based in Europe or the United States, you can accept Multibanco payments from customers in Portugal using the [Payment Intents API](https://docs.stripe.com/payments/payment-intents).\n\nTo complete a transaction, customers receive a voucher that includes Multibanco entity and reference numbers. Customers use these voucher details to make a payment outside your checkout flow through online banking or from an ATM.\n\nPayment confirmation might be delayed by several days due to the initiation of a bank transfer when a customer pays for a Multibanco voucher. Bank transfers can encounter delays, particularly over weekends, contributing to the delay in payment confirmation.\n\n*   **Customer locations**\n    \n    Portugal\n    \n*   **Presentment currency**\n    \n    EUR\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Voucher\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    [Standard payout timing](https://docs.stripe.com/payouts#payout-speed) applies\n    \n*   **Refunds and partial refunds**\n    \n    Yes, yes\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Minimum charge amount**\n    \n    €0.50\n    \n*   **Maximum charge amount**\n    \n    €99,999\n    \n\n## Payment flows ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n### Online banking flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\nSelects Multibanco at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/mb-show-details.205fb1ea119d617de6ad43b928c1bbfc.svg)\n\nReceives voucher details (incl. entity, reference, and amount)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect.f6e6ccf58078e0a25815560086204c24.svg)\n\nLogs into online banking\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/bank-pincode.058b5caea306873f13033038ad2ddf02.svg)\n\nUses voucher details to complete the payment with online banking\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect-success.740e23b33b6f52a746e8ec50285e2805.svg)\n\nReceives confirmation of funds sent\n\n### ATM flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\nSelects Multibanco at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/mb-show-details.205fb1ea119d617de6ad43b928c1bbfc.svg)\n\nReceives voucher details (incl. entity, reference, and amount)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/mb-atm.1b6045c8a3d0e409e437e974ee182358.svg)\n\nUses voucher details to complete the payment at an ATM\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/mb-atm-success.b24342e253541b82c193b33e51cc5af6.svg)\n\nReceives confirmation of funds sent\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Multibanco and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Multibanco. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Multibanco from the Dashboard:\n\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf you prefer to manually list payment methods, learn how to [manually configure Multibanco as a payment method](https://docs.stripe.com/payments/multibanco/accept-a-payment).\n\n## Disputed payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe risk of fraud or unrecognized payments is low with Multibanco because the customer must push funds from their bank account. As a result, there’s no dispute process that can result in a chargeback and funds withdrawn from your Stripe account.\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can refund Multibanco payments in the [Dashboard](https://dashboard.stripe.com/payments) or using the [Refunds API](https://docs.stripe.com/api/refunds).\n\nThe refund period for Multibanco is up to 365 days after the original payment. Full and partial refunds are supported. Customers typically receive refunds in their bank accounts within one day. However, this time frame varies by bank.\n\nIf a Multibanco [Refund](https://docs.stripe.com/api/refunds/object) object’s `status` transitions to `succeeded`, the [destination\\_details.multibanco.reference](https://docs.stripe.com/api/refunds/object#refund_object-destination_details-multibanco-reference) property contains a refund identifier that you can provide the customer.\n\n## Multibanco with Connect ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use [Stripe Connect](https://docs.stripe.com/connect/overview) with Multibanco to process payments on behalf of a connected account. Connect users can use Multibanco with the following account and charge types:\n\n### Enable Multibanco for connected accounts that use the Stripe Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnected accounts that use the Stripe Dashboard can enable Multibanco in their [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods) in the Dashboard.\n\n### Enable Multibanco for connected accounts that use the Express Dashboard or a dashboard that isn’t hosted by Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRequest the `multibanco_payments` capability on any connected account you want to enable Multibanco for. Follow the instructions to [enable payment methods for your connected accounts](https://docs.stripe.com/connect/account-capabilities).",
  "title": "Multibanco payments | Stripe Documentation",
  "description": "Learn how to accept payments with Multibanco.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/collect-addresses?payment-ui=checkout",
  "markdown": "# Collect physical addresses and phone numbers\n\n### Collect an address![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo collect a customer’s billing address in a checkout session, pass the `billing_address_collection` parameter when you [create a Checkout session](https://docs.stripe.com/api/checkout/sessions/create). You have to specify whether to always collect the billing address (`required`) or only when it’s necessary (like for tax calculations) (`auto`).\n\nTo collect a customer’s shipping address in Checkout, pass the `shipping_address_collection` parameter when you [create a Checkout session](https://docs.stripe.com/api/checkout/sessions/create).\n\nWhen you collect a shipping address, you must also specify which countries to allow shipping to. Configure the `allowed_countries` property with an array of [two-letter ISO country codes](https://www.nationsonline.org/oneworld/country_code_list.htm).\n\nWhen the customer completes the session, the [Checkout session](https://docs.stripe.com/api/checkout/sessions/object) object saves the collected shipping address on the `shipping_details` property and includes it in the payload of the `checkout.session.completed` [webhook](https://docs.stripe.com/webhooks \"webhook\"). You can also see shipping information in the Dashboard on the payment details page.\n\n### Collect a phone number![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo collect a customer’s phone number in a checkout session, pass the `phone_number_collection` parameter when you [create a Checkout session](https://docs.stripe.com/api/checkout/sessions/create).",
  "title": "Collect physical addresses and phone numbers | Stripe Documentation",
  "description": "Collect physical addresses and phone numbers from your customers with Stripe's Payment Links, Checkout, or Elements integrations.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/accept-a-payment/web/compare-integrations",
  "markdown": "# Compare payment integrations | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the different integration options for accepting payments.\n\nStripe provides a few different ways to accept online payments. While each integration method ultimately produces the same, secure, payment processing, they each offer different levels of complexity, flexibility, feature compatibility, and customization.\n\n**Payment Links** are the simplest way to accept a payment using Stripe. You enter the payment details like product description and price in the Dashboard and Stripe generates a link, QR code, or button that you can put on your website or send in an email. When your buyer clicks the link, Stripe presents our hosted payment collection form.\n\n**Hosted Checkout** allows you to direct your users from your website to a pre-configured payment collection form. It requires minimal coding and supports limited customization.\n\n**Embedded Checkout** allows you to present Stripe’s pre-configured payment collection form directly in your website without redirecting to Stripe and also supports limited customization.\n\n**Custom flow** integrations offer the most flexibility because you can pick and choose which [Stripe Elements](https://docs.stripe.com/payments/elements) to include in the payment collection form, fully customize the look and feel, and use in your mobile app in addition to your website. This option also requires the most development effort on your side.\n\n**Direct API** integrations are open-ended, but require a large development investment, as well as [permission to pass PAN data to the Stripe API](https://support.stripe.com/questions/enabling-access-to-raw-card-data-apis). You can develop a completely custom payment collection form and all other aspects of the payment lifecycle, invoking the [Stripe APIs](https://docs.stripe.com/api) directly as needed. We’ve omitted this method from the comparisons on this page because it supports all generally available features and products (except for Stripe hosting), provided you write the code and demonstrate [PCI compliance](https://docs.stripe.com/security/guide#validating-pci-compliance).\n\nThe following table shows a high level comparison of Stripe’s online payment integration types, and the additional sections on this page compare the integrations relative to specific business use cases.\n\n1Limited customization provides [20 preset fonts](https://docs.stripe.com/payments/checkout/customization/font-compatibility), 3 preset border radius options, logo and background customization, and custom button color.\n\n[](#payment-scenarios)\n\nStripe supports many different payment scenarios. See how those are supported by each integration option.\n\n1 Not supported on Dashboard created Payment Links.\n\n[](#features)\n\n1 Requires additional integration.\n\n2 Available for Subscriptions & Invoices only.\n\n[](#product-support)\n\nSee how the various integration options work with other Stripe products.\n\n3 Requires integration with [Terminal](https://docs.stripe.com/terminal).\n\n### Detailed Billing feature support![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Detailed Connect feature support![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
  "title": "Compare payment integrations | Stripe Documentation",
  "description": "Learn about the different integration options for accepting payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/ach-debit/migrating-from-charges",
  "markdown": "# Migrating from the Charges API\n\n### Create a PaymentIntent with a Bank Account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Bank Accounts](https://docs.stripe.com/api/customer_bank_accounts) that are already [verified](https://docs.stripe.com/ach-deprecated#verifying) and have been attached to a [Customer](https://docs.stripe.com/api/customers \"Customers\") are usable in any API that accepts a `PaymentMethod` object. You can use a saved `BankAccount` as a [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") when creating a PaymentIntent. This eliminates the need to recollect payment details. However, make sure that you also [update your integration](https://docs.stripe.com/payments/ach-debit/accept-a-payment) to begin creating PaymentMethods instead.\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\" \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"payment_method_types[]\"=\"us_bank_account\" \\   -d \"payment_method\"=\"{{BANK_ACCOUNT_ID}}\"`\n\nSimilarly, you can use a saved BankAccount as a PaymentMethod when creating a SetupIntent.\n\n`curl https://api.stripe.com/v1/setup_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"payment_method_types[]\"=\"us_bank_account\" \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"payment_method\"=\"{{BANK_ACCOUNT_ID}}\"`\n\n### Collect mandate acknowledgement ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConfirming a PaymentIntent or SetupIntent requires having your customer authorize a [mandate](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-mandate_data) to debit the account. Learn more about [SEC codes](https://docs.stripe.com/payments/ach-debit/sec-codes) to understand which authorization type is right for your business.\n\nIn some cases, you might have pre-authorization from your customer from an earlier purchase or SetupIntent that you can use to create an off-session payment. For example:\n\n*   If you previously collected an online mandate from the customer, you can use both the IP address and user agent information to create a mandate object.\n*   If you previously collected payment and mandate information offline on paper, you can create a [PPD mandate](https://docs.stripe.com/payments/ach-debit/sec-codes#ppd-sec-code).\n\nTo create an off-session payment, you can use offline mandate acceptance to provide a record of your customer’s original authorization.\n\nAuthorization is only required the first time you use a `BankAccount` object with the PaymentIntents API. After that, you can use the `BankAccount` object as a PaymentMethod to [accept future payments](https://docs.stripe.com/payments/ach-debit/set-up-payment#web-future-payments).\n\n`curl https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}}/confirm \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"mandate_data[customer_acceptance][type]\"=\"offline\" \\   -d \"mandate_data[customer_acceptance][accepted_at]\"=\"{{ACCEPTANCE_TIMESTAMP}}\" \\   -d \"payment_method_options[us_bank_account][mandate_data][collection_method]\"=\"paper\"`\n\n### Retrieving a BankAccount as a PaymentMethod![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can retrieve saved BankAccounts through the [Payment Methods API](https://docs.stripe.com/api/payment_methods).\n\n`curl https://api.stripe.com/v1/payment_methods/ba_1IsleZ2eZvKYlo2CI3To1g72 \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`\n\nWhen using a BankAccount as a PaymentMethod, no new objects are created. The Payment Methods API simply provides a different view of the same underlying object.\n\n`{   \"id\": \"ba_1IsleZ2eZvKYlo2CI3To1g72\",   \"object\": \"payment_method\",   \"billing_details\": {     \"address\": {       \"city\": null,       \"country\": null,       \"line1\": null,       \"line2\": null,       \"postal_code\": null,       \"state\": null     },     \"email\": null,     \"name\": \"Jenny Rosen\",     \"phone\": null   },   \"us_bank_account\": {     \"last4\": \"6789\",     \"routing_number\": \"110000000\",     \"fingerprint\": \"1JWtPxqbdX5Gamtc\",     \"account_holder_type\": \"individual\",     \"bank_name\": \"STRIPE TEST BANK\",   },   \"created\": 123456789,   \"customer\": \"cus_CY5bH92D99f4mn\",   \"livemode\": false,   \"metadata\": {},   \"type\": \"us_bank_account\" }`",
  "title": "Migrating from the Charges API | Stripe Documentation",
  "description": "Upgrade to the Payment Intents API.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/cards/overview",
  "markdown": "# How cards work | Stripe DocumentationThe Stripe Docs logo\n\n## See how a credit or debit card payment works online, step by step.\n\n[Cards](https://docs.stripe.com/payments/cards) are one of the most popular ways to pay online, with broad global reach. There are different types of cards and several steps in the process. To build a Stripe integration that supports all of your customers, see what goes on behind the scenes of a card payment.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/1ab45e9a3dd360cdbbe998626aaa5ca1.svg)\n\nChecking card details\n\nStripe checks that the details provided are formatted correctly (for example, the expiry date isn’t in the past). There’s no guarantee that the card itself is valid yet.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/collect-card-details.2a81817764a4adc86c6d37e7efbb53cf.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/b7c1464dd02fdcfd323588c65e417322.svg)\n\nCustomer authentication\n\nSome banks, especially in regulated regions like Europe and India, may prompt the customer to authenticate a purchase (for example, by texting the customer a code to enter on the bank’s website). [Watch our video](https://www.youtube.com/watch?v=2kc-FjU2-mY) to learn more.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/requires-action.a062dfa0d428b32132566ba7ef1d7243.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/e7ac3b4c7ee721fbac555ab73ac53443.svg)\n\nAuthorization\n\nThe bank checks for sufficient funds and, if successful, holds the amount on the customer’s account to guarantee it for the Stripe user.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/Card-statement-pending.8c8594ba68e57f92be51bea871cd51de.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/6423ea22ac10bfa6996c6f9db9b0ad1d.svg)\n\nCapture\n\nThe money moves from the issuing bank to the Stripe user’s account.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/Card-statement-succeeded.25905919ede8f790dec2989ab3111f04.svg)\n\n## Card updates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Updating a saved card](https://docs.stripe.com/api/cards/update) can only change its name, billing address, expiration date, or metadata. To make any other changes, you must delete the card and create a new one.\n\nTo let your customers manage their own payment methods, implement processes that allow them to manually update and replace their saved cards.\n\nTo change a customer’s default payment method for invoices and subscriptions, make an API call to [update customer](https://docs.stripe.com/api#update_customer) and provide a new value for the `invoice_settings.default_payment_method` property.\n\n`curl https://api.stripe.com/v1/customers/cus_V9T7vofUbZMqpv \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"invoice_settings[default_payment_method]\"=pm_1Msy7wLkdIwHu7ixsxmFvcz7`\n\nFor information on how Checkout handles saved payment methods, see the [create session](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-customer) API reference. To consider default payment methods in other scenarios, use custom code.\n\n## Automatic card updates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSaved payment method details can continue to work even if the issuing bank replaces the physical card. Stripe works with card networks and automatically attempts to update saved card details whenever a customer receives a new card (for example, replacing an expired card or one that was reported lost or stolen). This allows your customers to continue using your service without interruption and reduces the need for you to collect new card details whenever a card is replaced.\n\nAutomatic card updates require card issuers to participate with the network and provide this information. It’s widely supported in the United States, allowing Stripe to automatically update most American Express, Visa, Mastercard, and Discover cards issued there. International support varies from country to country. It isn’t possible to identify cards that support automatic updates.\n\nYou can listen for Stripe [webhooks](https://docs.stripe.com/webhooks \"webhook\") to learn of card update activity:\n\n*   The `payment_method.updated` event notifies you of updates to a card through an API call.\n*   The `payment_method.automatically_updated` event notifies you of automatic card updates from the network.\n\nThese events include the card’s new expiration date and last four digits, so you can update your own records as needed. If the card update includes a new card number, the [fingerprint](https://docs.stripe.com/api/payment_methods/object#payment_method_object-card-fingerprint) changes.",
  "title": "How cards work | Stripe Documentation",
  "description": "See how a credit or debit card payment works online, step by step.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/sofort",
  "markdown": "# Sofort payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Sofort, a common payment method in Europe.\n\n#### Warning\n\nOur financial partners are in the process of deprecating Sofort. New businesses can’t accept Sofort payments. For more information read our [support page](https://support.stripe.com/questions/sofort-is-being-deprecated-as-a-standalone-payment-method).\n\nStripe users in Europe and the United States can use the [Payment Intents API](https://docs.stripe.com/payments/payment-intents)—a single integration path for creating payments using any supported method—to accept [Sofort](https://www.sofort.com/) payments from customers in the following countries:\n\n*   Austria\n*   Belgium\n*   Germany\n*   Netherlands\n*   Spain\n\nSofort is a [single use](https://docs.stripe.com/payments/payment-methods#usage), [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method that requires customers to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. It redirects them to their bank’s portal to authenticate the payment, and it typically takes 2 to 14 days to receive notification of success or failure.\n\n#### Caution\n\n*   **Customer locations**\n    \n    Europe\n    \n*   **Presentment currency**\n    \n    EUR\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Bank debit\n    \n*   **Recurring payments**\n    \n    via SEPA Direct Debit\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis demo shows the customer experience when using Sofort.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Sofort and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Sofort. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Sofort from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf you prefer to manually list payment methods or want to save Sofort details for future payments, see the following guides:\n\n*   [Manually configure Sofort as a payment](https://docs.stripe.com/payments/sofort/accept-a-payment)\n*   [Save Sofort details for future payments](https://docs.stripe.com/payments/sofort/set-up-payment)\n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe risk of fraud or unrecognized payments is low because the customer must authenticate the payment with their bank. As a result, you won’t have disputes that turn into chargebacks, with funds withdrawn from your Stripe account.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSofort payments can be refunded up to 180 days after the original payment.",
  "title": "Sofort payments | Stripe Documentation",
  "description": "Learn about Sofort, a common payment method in Europe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/customer-balance/refunding",
  "markdown": "# Refund bank transfer payments | Stripe DocumentationThe Stripe Docs logo\n\n## Refund payments made with bank transfers, or refund a customer’s available cash balance.\n\nYou can refund customer balance payments through the [Dashboard](https://dashboard.stripe.com/payments) or [API](https://docs.stripe.com/api#create_refund).\n\n[](#refund-customer-balance-payment-bank-account)\n\nStripe requires customer bank account details to process the refund. In some cases, Stripe receives the customer’s bank account details when performing the transfer. Stripe emails the customer to let them know that the refund is in process.\n\nWhen we can’t determine the destination bank account automatically due to unavailable or ambiguous customer bank account information, Stripe requests it by contacting the customer at the email address in the customer object you created. If you didn’t include an email address when you created the customer object, creating a refund results in an error. Update the customer object with a valid email address for the customer, and try creating the refund again. You can specify a new email address when you create a refund.\n\nIn some cases, Stripe performs additional checks before processing a refund or asking your customers for bank account information. Stripe contacts you if we require more information before finalizing the refund.\n\nCustomers have 45 days from receipt of the request to submit bank account details. After 45 days without a valid response, Stripe cancels the refund and returns the funds to the customer’s account cash balance. We recommend you then contact your customer to discuss alternative ways of returning the funds.\n\nYou can refund a payment up to 180 days after it was created.\n\n### Creating a payment refund using the Dashboard ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  To refund a payment made with a bank transfer, navigate to the payment page and click **Refund**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/payment-page-header.57a436368ac47f5d34cbba18c2896b69.png)\n\n1.  In the following dialog, enter the amount you want to refund, if different than the full payment amount, and any other details about the refund. Then click **Refund**.\n\n### Creating a payment refund using the API ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n`curl https://api.stripe.com/v1/refunds \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d payment_intent=  {{PAYMENT_INTENT_ID}}   \\   --data-urlencode instructions_email=\"customeremail@example.com\"`\n\nRefunds are sent to the customer’s bank account, and the customer receives a notification at their default email address. If you want to override the default email address used to contact the customer, specify the new email address using the [`instructions_email`](https://docs.stripe.com/api/refunds/object#refund_object-instructions_email) parameter.\n\nThe refund’s status transitions as follows:\n\n| Event | Refund status |\n| --- | --- |\n| Refund is created | `requires_action` |\n| Customer submits bank account details, and Stripe begins processing the refund | `pending` |\n| Refund is expected to arrive in customer’s bank | `succeeded` |\n| Customer’s bank returns the funds back to Stripe | `requires_action` |\n| Refund is in `requires_action` 45 days after creation | `failed` |\n| Refund is canceled from a `requires_action` state | `canceled` |\n\nIf the customer’s bank can’t successfully complete the transfer, the funds are returned to Stripe and the refund transitions to `requires_action`. This can happen if the account holder’s name doesn’t match what the recipient bank has on file or if the provided bank account number has a typo. In these cases, Stripe emails the customer to inform them of the failure and to request that they resubmit their bank account details.\n\nIf your customer does not provide their bank account details within 45 days, the refund’s status transitions to `failed` and the [charge.refund.updated](https://docs.stripe.com/api/events/types#event_types-charge.refund.updated) event is sent. This means that Stripe is unable to process the refund, and you must [return the funds to your customer outside of Stripe](https://docs.stripe.com/refunds#failed-refunds).\n\nThe [instructions\\_email](https://docs.stripe.com/api/refunds/object#refund_object-instructions_email) field on the refund is the email that the refund was sent to. While a refund is waiting for a response from the customer, details of the email sent to the customer can also be found under the [next\\_action.display\\_details.email\\_sent](https://docs.stripe.com/api/refunds/object#refund_object-next_action-display_details-email_sent) field on the refund.\n\nEach individual refund (including each partial refund) may incur a fee. Please reach out to your point of contact at Stripe to learn more about this.\n\n[](#refund-customer-balance-payment-bank-account-cancel)\n\nIf a bank transfer payment refund has been sent to the customer, and the customer hasn’t submitted their bank details, you can still cancel the refund.\n\n### Canceling a payment refund using the Dashboard ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  To cancel a refund for a bank transfer payment, navigate to the payment page and click **Cancel refund**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/cancel-payment-refund.b4596e21f2ee32cf1b2bff824de8d4b7.png)\n\n1.  If the payment has multiple partial refunds in the `requires_action` state, select the correct refund from the **Refund** dropdown in the following dialog.\n2.  Confirm the cancellation by selecting **Cancel refund** in the dialog.\n\n### Canceling a payment refund using the API ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n`curl https://api.stripe.com/v1/refunds/`\n\n`{{REFUND_ID}}`\n\n`/cancel \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -X POST`\n\nAfter the payment refund has been canceled, the refund transitions from `requires_action` to `canceled`. If there are no other refunds, the payment transitions back to its original pre-refund state.\n\n[](#refund-customer-balance-payment-customer-balance)\n\nA refund to the customer balance succeeds immediately. Refunds to the customer balance are free of charge.\n\n### Creating a payment refund using the Dashboard ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  To refund a payment made with a bank transfer, navigate to the payment page and click **Refund**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/payment-page-header.57a436368ac47f5d34cbba18c2896b69.png)\n\n1.  In the following dialog, select **Customer balance** in the **Destination** dropdown. Selecting this option deposits the refund into the customer’s Stripe account, which allows them to use the funds for future payments on your site.\n\n[](#create-return-dashboard)\n\nYou can return a customer’s cash balance directly to them. For example, you might need to do this when a customer transfers more funds than expected for a payment.\n\n### Refund a customer’s cash balance using the Dashboard ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  Navigate to the [Customer list](https://dashboard.stripe.com/customers) page.\n2.  Click the customer in the list of customers.\n3.  Expand the **Cash Balance** row in the **Payment methods** section.\n4.  Click **Initiate Refund** button at the end of the row.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/customer_balance_row.224a651cdaecf7e3b05c8046dc0e103a.png)\n\n1.  In the next dialog, enter the amount to refund.\n2.  Click **Initiate Refund**.\n\nView the status of the refund on the customer balance transactions list page.\n\n### Refund a customer’s cash balance using the API ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo refund a customer’s cash balance with the API, set the [origin](https://docs.stripe.com/api/refunds/object#refund_object-origin) parameter to `customer_balance` and specify the [customer](https://docs.stripe.com/api/refunds/object#refund_object-customer). The customer’s default email address is used to contact them. To override it, specify the new email address using the [instructions\\_email](https://docs.stripe.com/api/refunds/object#refund_object-instructions_email) parameter.\n\n`curl https://api.stripe.com/v1/refunds \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d customer=  {{CUSTOMER_ID}}   \\   --data-urlencode instructions_email=\"jenny.rosen@example.com\" \\  -d origin=customer_balance`\n\n[](#create-return-dashboard-cancel)\n\nYou can only cancel un-processed refunds. After the customer submits their bank account details, you can’t cancel a refund. Currently, you must use the Stripe Dashboard to cancel a refund:\n\n1.  Navigate to the [Customer list](https://dashboard.stripe.com/customers) page.\n2.  Click the customer in the list of customers.\n3.  Expand the **Cash Balance** row in the **Payment methods** section.\n4.  Click the **View balance details** link.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/cash_balance_transactions_link.2315ea0a6110fd68d550961b570622e6.png)\n\n1.  Click the overflow menu (**•••**) next to the refund you want to cancel and click the **Cancel** link\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/cancel_customer_return.2b049b51896c523d27f56eaa437db52f.png)\n\nThe refund amount is credited back to the available cash balance.\n\n[](#tracking-refunds)\n\nYou can track the state of a refund through the [Dashboard](https://dashboard.stripe.com/payments) or [API](https://docs.stripe.com/api/refunds).\n\n### When and where refund email is sent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe sends an email to the email address provided in the [instructions\\_email](https://docs.stripe.com/api/refunds/object#refund_object-instructions_email) field on the refund. While a refund is waiting for a response from the customer, you can also check the refund’s [next\\_action.display\\_details.email\\_sent](https://docs.stripe.com/api/refunds/object#refund_object-next_action-display_details-email_sent) field for details such as the sent time and the address. The sent time is also the time when the refund transitioned to the `requires_action` state.\n\n### Pending refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf the customer has submitted their bank account details, the refund transitions to `pending`.\n\n### Successful refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe refund transitions to `succeeded` when the refund is successfully paid out to the customer.\n\n[](#testing-refunds)\n\nYou can test refund behavior in test mode using the following test bank accounts on the bank account details collection page linked in the email sent to the customer. Bank account details outside of these test bank accounts won’t be accepted.\n\n#### Note\n\nIn test mode, refund instruction emails are only sent to email addresses linked to the Stripe account.\n\nSpecify the appropriate [country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) (for example, GB, IL, CR, and so on) to test IBANs for any IBAN country and any valid currency for that country. For instance, the following IBANs specify Germany with the `DE` prefix.\n\n| Number | Type |\n| --- | --- |\n| `DE89370400440532013000` | Refund succeeds. |\n| `DE62370400440532013001`<br><br>`DE89370400440532013002`<br><br>`DE89370400440532013003`<br><br>`DE89370400440532013004`<br><br>`DE89370400440532013005` | Refund fails. |\n\n#### Testing Refunds Expiry ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can make an API call to simulate the expiry of a testmode refund.\n\n`curl https://api.stripe.com/v1/test_helpers/refunds/{{REFUND_ID}}/expire \\   -X POST \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`",
  "title": "Refund bank transfer payments | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/payment-intents/migration",
  "markdown": "# Migrating to the Payment Intents API\n\n#### Interested in using Stripe Billing, Tax, discounts, shipping, or currency conversion?\n\nWe’re developing a Payment Element integration that manages subscriptions, tax, discounts, shipping, and currency conversion. Read the [Build a checkout page](https://docs.stripe.com/checkout/custom-checkout) guide to learn more.\n\nLearn how to migrate your existing cards and Charges API integration.\n\nMigrating your payment flow can be daunting. It is safe to incrementally adopt the Payment Intents API and use it in parallel with the Charges API. To this end, you can split up the migration into the following steps:\n\n1.  [Update your API version and your client library](#api-version).\n2.  If applicable, [migrate code that reads from Charge properties](https://docs.stripe.com/payments/payment-intents/migration/charges) so that you have a consistent read path between charges created by the Charges API and charges created by the Payment Intents API. This ensures a read-side integration that works for both your old and new payments integrations.\n3.  Migrate your existing Charges API integration on [Web](#web), [iOS](https://docs.stripe.com/payments/accept-a-payment?platform=ios), and [Android](https://docs.stripe.com/payments/accept-a-payment?platform=android) to use the Payment Intents API.\n4.  Migrate your integration that [saves cards on Customer objects](#saved-cards).\n5.  [Test with regulatory test cards](https://docs.stripe.com/testing#regulatory-cards) to ensure your upgraded integration handles authentication correctly.\n\n## Update your API version and your client library ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhile the Payment Intents API works on all API versions, we recommend that you [upgrade to the latest API version](https://docs.stripe.com/upgrades#how-can-i-upgrade-my-api). If you decide to use an API version older than [2019-02-11](https://docs.stripe.com/upgrades#2019-02-11), note the following two changes as you go through the code examples:\n\n*   `requires_source` has been renamed to `requires_payment_method`\n*   `requires_source_action` has been renamed to `requires_action`\n\nIn addition, if you use one of our [Client libraries](https://docs.stripe.com/libraries), upgrade to the latest version of the library in order to use the Payment Intents API.\n\n## Migrate your one-time payment flows ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAn integration built with Stripe.js & Elements consists of the following steps:\n\n1.  Register your intent to collect payment on the server side\n2.  Collect payment details on the client side\n3.  Initiate creation of the payment\n4.  Fulfill the customer’s order on the server side\n\n### Step 1: Register intent to collect payment on the server side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Create a PaymentIntent](https://docs.stripe.com/payments/payment-intents) on your server and make it [accessible on the client side](https://docs.stripe.com/payments/payment-intents#passing-to-client).\n\nNot possible before\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\"`\n\n### Step 2: Collect payment details on the client side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the [confirmCardPayment](https://docs.stripe.com/js#stripe-confirm-card-payment) function, which collects the payment information and submits it directly to Stripe.\n\n`stripe.createToken(   cardElement ).then(function(token) {   // Send token to server });`\n\n`stripe.confirmCardPayment(   INTENT_SECRET_FROM_STEP_1,   {     payment_method: {card: cardElement}   } ).then(function(result) {   if (result.error) {     // Display error.message in your UI.   } else {     // The payment has succeeded     // Display a success message   } });`\n\n### Step 3: Initiate creation of the payment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn your existing integration, the final step is using tokenized payment information to create a charge on your server. This is no longer necessary, as the `confirmCardPayment` function—called in the previous step—initiates creation of the charge.\n\n`curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"source\"=\"{{FROM_PREVIOUS_STEP}}\" \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\"`\n\nCompleted in previous step\n\n### Step 4: Fulfill the customer’s order ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith automatic confirmation, the charge is created for you asynchronously based on customer action on the client side, so you must [monitor webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status) to determine when the payment completes successfully. To perform steps like order fulfillment after a customer’s payment is successful, implement support for webhooks and monitor the `payment_intent.succeeded` event.\n\nIf charge succeeds, fulfill.\n\nSubscribe to the `payment_intent.succeeded` webhook and fulfill in the webhook handler.\n\nNow that you have migrated, use the test cards in the following section to verify your upgraded integration handles 3D Secure authentication.\n\n## Migrate your integration that saves cards on Customer objects ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA Payment Intents API integration that collects card information in the checkout flow consists of the following steps:\n\n1.  Register your intent to collect payment on the server side\n2.  Collect payment details on the client side\n3.  Initiate creation of the payment\n4.  Fulfill the customer’s order on the server side\n\n### Step 1: Register intent to collect payment on the server side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Create a PaymentIntent](https://docs.stripe.com/payments/payment-intents) on your server. Set [setup\\_future\\_usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage) to `off_session` if you primarily intend to charge users when they are outside of your application, or `on_session` if you plan to charge them in the application. If you plan to use the card for both on and off session payments use `off_session`. Providing the `setup_future_usage` parameter along with a Customer ID will save the resulting PaymentMethod to that Customer after the PaymentIntent has been confirmed and any required actions from the customer are complete. Next, make the PaymentIntent [accessible on the client side](https://docs.stripe.com/payments/payment-intents#passing-to-client).\n\nNot possible before\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"setup_future_usage\"=\"off_session\" \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\"`\n\n### Step 2: Collect payment details on the client side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the [confirmCardPayment](https://docs.stripe.com/js#stripe-confirm-card-payment) function, which collects the payment information and submits it directly to Stripe.\n\n`stripe.createToken( // or stripe.createSource   cardElement ).then(function(token) {   // Send token to server });`\n\n`stripe.confirmCardPayment(   '{{INTENT_SECRET_FROM_STEP_1}}',   {     payment_method: {card: cardElement},   } ).then(function(result) {   if (result.error) {     // Display error.message in your UI.   } else {     // The payment has succeeded     // Display a success message   } });`\n\nFinally, attach the payment method (`paymentIntent.payment_method`) to the customer.\n\n`curl https://api.stripe.com/v1/customers/{{CUSTOMER_ID}}/sources \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"source\"=\"{{TOKEN_OR_SOURCE}}\"`\n\n`curl https://api.stripe.com/v1/payment_method/{{PAYMENT_METHOD_ID}}/attach \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"customer\"=\"{{CUSTOMER_ID}}\"`\n\n### Step 3: Initiate creation of the payment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn your existing integration, the final step is using tokenized payment information to create a charge on your server. This is no longer necessary, as the `confirmCardPayment` function—called in the previous step—initiates creation of the charge.\n\n`curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"source\"=\"{{FROM_PREVIOUS_STEP}}\" \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\"`\n\nCompleted in previous step\n\n### Step 4: Fulfill the customer’s order ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith automatic confirmation, the charge is created for you asynchronously based on customer action on the client side, so you must [monitor webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status) to determine when the payment completes successfully. To perform steps like order fulfillment after a customer’s payment is successful, implement support for webhooks and monitor the `payment_intent.succeeded` event.\n\nIf charge succeeds, fulfill.\n\nSubscribe to the `payment_intent.succeeded` webhook and fulfill in the webhook handler.\n\nNow that you have migrated, use the test cards in the following section to verify your upgraded integration handles 3D Secure authentication.\n\n## Access saved payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo display the customer’s previously saved Cards, Sources, and PaymentMethods, [list the payment methods](https://docs.stripe.com/api/payment_methods/list) instead of reading the [sources](https://docs.stripe.com/api/customers/object#customer_object-sources) property of the customer object. This is required because new PaymentMethods added to a customer will not be duplicated in the sources property of the customer object.\n\n`curl https://api.stripe.com/v1/payment_methods?customer={{CUSTOMER_ID}}&type=card \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`\n\n## Test the integration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIt’s important to thoroughly test your integration to make sure you’re correctly handling cards that require additional authentication and cards that don’t. Use these card numbers in [test mode](https://docs.stripe.com/keys#test-live-modes) with any expiration date in the future and any three digit CVC code to validate your integration when authentication is required and when it’s not required.\n\n| Number | Authentication | Description |\n| --- | --- | --- |\n|     | Required on setup or first transaction | This test card requires authentication for [one-time payments](https://docs.stripe.com/payments/accept-a-payment?platform=web). However, if you set up this card using the [Setup Intents API](https://docs.stripe.com/payments/save-and-reuse) and use the saved card for subsequent payments, no further authentication is needed. |\n|     | Required | This test card requires authentication on all transactions. |\n|     | Required | This test card requires authentication, but payments will be declined with an `insufficient_funds` failure code after successful authentication. |\n|     | Supported | This test card supports authentication via 3D Secure 2, but does not require it. Payments using this card do not require additional authentication in test mode unless your [test mode Radar rules](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-radar) request authentication. |\n\nUse these cards in your application or the [payments demo](https://stripe-payments-demo.appspot.com/) to see the different behavior.",
  "title": "Migrating to the Payment Intents API | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/bank-transfers/accept-a-payment",
  "markdown": "# Accept a bank transfer | Stripe DocumentationThe Stripe Docs logo\n\nThe first time you accept a bank transfer payment from a customer, Stripe generates a virtual bank account for them, which you can then share with them directly. All future bank transfer payments from this customer get sent to this bank account. In some countries, Stripe also provides you with a unique transfer reference number that your customer should include with each transfer to make it easier to match the transfer against outstanding payments. Some countries have limits on the number of virtual bank account numbers that you can create for free.\n\nYou can find an overview of the common steps when accepting a bank transfer payment in the following sequence diagram:\n\nWith bank transfer payments, it’s possible that the customer sends you more or less than the expected payment amount. If the customer sends too little, Stripe partially funds an open payment intent. Invoices won’t be partially funded and remain open until incoming funds cover the full invoice amount.\n\nIf the customer sends more than the expected amount, Stripe attempts to reconcile the incoming funds against an open payment and keep the remaining excess amount in the customer cash balance. You can find more details on how Stripe handles reconciliation in the [reconciliation section](https://docs.stripe.com/payments/customer-balance/reconciliation) of our documentation.\n\nYou might have multiple open payments or invoices which can be paid with a bank transfer. In the default setup, Stripe attempts to [automatically reconcile](https://docs.stripe.com/payments/customer-balance/reconciliation) the bank transfer by using information like the transfer’s reference code or the amount transferred.\n\nYou can disable automatic reconciliation and [manually reconcile](https://docs.stripe.com/payments/customer-balance/reconciliation#cash-manual-reconciliation) payments and invoices yourself. You can override the automatic reconciliation behavior on a per-customer basis by setting [reconciliation mode](https://docs.stripe.com/api/customers/create#create_customer-cash_balance-settings-reconciliation_mode) to manual.\n\n[](#web-set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-create-a-customer)\n\nYou must associate a [Customer](https://docs.stripe.com/api/customers) object to reconcile each bank transfer payment. If you have an existing Customer object, you can skip this step. Otherwise, create a new Customer object.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[\n\n## Create and confirm a PaymentIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-create-and-confirm-payment-intent)\n\nA [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) is an object that represents your intent to collect payment from a customer and tracks the lifecycle of the payment process through each stage. Create and confirm a PaymentIntent on the server, specifying the amount and currency you want to collect. You must also populate the [customer parameter](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-customer) of the PaymentIntent creation request. Bank transfers aren’t available on PaymentIntents without a customer.\n\nBefore creating a Payment Intent, make sure to turn **Bank transfer** on in the [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) page of your Dashboard.\n\n#### Note\n\nWith [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods), Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d customer=  {{CUSTOMER_ID}}   \\  -d currency=usd \\  -d \"automatic_payment_methods[enabled]\"=true \\   --data-urlencode return_url=\"[https://example.com/return_url](https://example.com/return_url)\" \\  -d \"payment_method_data[type]\"=customer_balance \\  -d confirm=true`\n\nIn the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default.\n\nIf the customer already has a balance high enough to cover the payment amount, the PaymentIntent immediately succeeds with a `succeeded` status. Customers can accrue a balance when they accidentally overpay for a transaction—a common occurrence with bank transfers. You must [reconcile customer balances within a certain period based on your location](https://docs.stripe.com/payments/customer-balance/reconciliation).\n\n[](#web-complete-bank-transfer)\n\nIf the customer balance isn’t high enough to cover the request amount, the PaymentIntent shows a `requires_action` status. The response has a `next_action` field containing a `type` value of `display_bank_transfer_instructions`. The `next_action[display_bank_transfer_instructions]` hash contains information to display to your customer so that they can complete the bank transfer.\n\n#### Note\n\nIn live mode, Stripe supplies each customer with a unique set of bank transfer details. In contrast, Stripe offers invalid bank transfer details to all customers in [test mode](https://docs.stripe.com/test-mode \"test mode\"). Unlike live mode, these invalid details might not always be unique.\n\n| Field | Description |\n| --- | --- |\n| [`type`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions-type) | The type of bank transfer to use. Type must be `us_bank_transfer` in the US. |\n| [`reference`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions-reference) | A unique reference code to identify the bank transfer. Instruct your customer to include this code in the reference field of their bank transfer. |\n| [`amount_remaining`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions-amount_remaining) | The remaining amount that needs to be transferred to complete the payment. Instruct your customer to transfer this amount. This might be different from the PaymentIntent amount if pre-existing funds in the customer balance were applied to the PaymentIntent or if your customer underpaid. |\n| [`currency`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions-currency) | The currency for the remaining amount. |\n| [`financial_addresses`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions) | List of financial addresses for US bank accounts. Types include `aba` and `swift`. See below for details. |\n| [`hosted_instructions_url`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions-hosted_instructions_url) | A link to a hosted page that guides your customer through completing the transfer. |\n\n#### `aba` hash ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nExample of an `aba` hash:\n\n`{   \"aba\": {     \"account_number\": \"111222333444\",     \"bank_name\": \"Wells Fargo Bank, NA\",     \"routing_number\": \"444555666\"   },   \"supported_networks\": [     \"ach\",     \"domestic_wire_us\"   ],   \"type\": \"aba\" }`\n\n| Field | Value(s) | Description |\n| --- | --- | --- |\n| `type` | `aba` | The type of financial address. |\n| `supported_networks` | *   `ach`<br>*   `domestic_wire_us` | The list of networks supported by this address. |\n| `aba.account_number` | 111222333444 | The ABA account number. |\n| `aba.routing_number` | 444555666 | The ABA routing number. |\n| `aba.bank_name` | Wells Fargo Bank, NA | The name of the bank. |\n\n#### `swift` hash ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nExample of a `swift` hash:\n\n`{   \"swift\": {     \"account_number\": \"111222333444\",     \"bank_name\": \"Wells Fargo Bank, NA\",     \"swift_code\": \"AAAA-BB-CC-123\"   },   \"supported_networks\": [     \"swift\"   ],   \"type\": \"swift\" }`\n\n| Field | Value(s) | Description |\n| --- | --- | --- |\n| `type` | `swift` | The type of financial address. |\n| `supported_networks` | *   `swift` | The list of networks supported by this address. |\n| `swift.account_number` | 111222333444 | The SWIFT account number. |\n| `swift.swift_code` | AAAA-BB-CC-123 | The SWIFT code. |\n| `swift.bank_name` | Wells Fargo Bank, NA | The name of the bank. |\n\n#### Settlement timing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter instructing your customer to initiate a transfer with their bank using the information you provide, it can take up to 5 days for the transfer to complete. The settlement timing depends on the banking rails that the transfer arrived through to Stripe:\n\n*   ACH transfers arrive within 1-3 business days.\n*   Domestic wire transfers (Fedwire) arrive on the same day (depending on whether the transfer is sent before the bank’s cut-off time).\n*   International wire transfers (SWIFT) arrive within 1-5 business days.\n\n[](#web-confirm-success)\n\nThe PaymentIntent stays in a `requires_action` status until funds arrive in the bank account. When funds are ready, the PaymentIntent status updates from `requires_action` to `succeeded`.\n\nYou need to set up your [webhook](https://docs.stripe.com/webhooks \"webhook\") endpoint to start receiving the `payment_intent.partially_funded` event.\n\nYou can [add a webhook from the Dashboard](https://dashboard.stripe.com/webhooks/create).\n\nAlternatively, you can use the [Webhook Endpoints API](https://docs.stripe.com/api/webhook_endpoints) to start receiving the [`payment_intent.partially_funded`](https://docs.stripe.com/api/events/types#event_types-payment_intent.partially_funded) event.\n\nStripe sends the following events during the payment funding flow when we update the PaymentIntent.\n\n| Event | Description | Next steps |\n| --- | --- | --- |\n| `payment_intent.requires_action` | Sent during confirmation when the customer balance doesn’t have sufficient funds to reconcile the PaymentIntent, the PaymentIntent transitions to `requires_action`. | Instruct your customer to send a bank transfer with the `amount_remaining`. |\n| `payment_intent.partially_funded` | The customer sent a bank transfer that was applied to the PaymentIntent, but wasn’t enough to complete the payment. This might happen because the customer transferred an insufficient amount (because of a mistaken underpayment or fees charged by their bank) or because a remaining customer balance was applied to this PaymentIntent. PaymentIntents that are partially funded aren’t reflected in your account balance until the payment is complete. | Instruct your customer to send another bank transfer with the new `amount_remaining` to complete the payment. If you want to complete the payment with the partially applied funds, you can update the `amount` and [confirm](https://docs.stripe.com/api/payment_intents/confirm) the PaymentIntent again. |\n| `payment_intent.succeeded` | The customer’s payment succeeded. | Fulfill the goods or services that the customer purchased. |\n\n#### Caution\n\nWhen you change the amount of a partially funded PaymentIntent, the funds are returned to the customer balance. If other PaymentIntents are open, Stripe funds those automatically. If the customer is configured for manual reconciliation, you need to [apply the funds](https://docs.stripe.com/api/payment_intents/apply_customer_balance) again.\n\nWe recommend [using webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks) to confirm the charge has succeeded and to notify the customer that the payment is complete.\n\n### Sample code ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n`require 'json'  # Using Sinatra post '/webhook' do   payload = request.body.read   event = nil    begin     event = Stripe::Event.construct_from(       JSON.parse(payload, symbolize_names: true)`\n\n### View pending payments in the Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can view all pending bank transfer PaymentIntents in the [Dashboard](https://dashboard.stripe.com/payments) by applying the **Waiting on funding** filter to **Status** .\n\n[](#test-your-integration)\n\nYou can test your integration by simulating an incoming bank transfer using either the Dashboard or an HTTP request.\n\n### With the Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo simulate a bank transfer using the Dashboard, navigate to the customer’s page in the Dashboard. Under **Payment methods**, click **Add** and select **Fund cash balance (testmode only)**.\n\n### With the Stripe API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can make an API call to simulate a bank transfer.\n\n`curl https://api.stripe.com/v1/test_helpers/customers/ic_xxxxxxxxx/fund_cash_balance \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d reference=REF-4242`\n\n[\n\n## Handling temporary availability issues![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handling-temporary-availability-issues)\n\nThe following error codes indicate temporary issues with the availability of the payment method:\n\n| Code | Description | Handling |\n| --- | --- | --- |\n| `payment_method_rate_limit_exceeded` | Too many requests were made in quick succession for this payment method, which has stricter limits than the [API-wide rate limits](https://docs.stripe.com/rate-limits). | These errors can persist for several API requests when many of your customers try to use the same payment method, such as during an ongoing sale on your website. In this case, ask your customers to choose a different payment method. |\n\n#### Caution\n\nIf you anticipate heavy usage in general or because of an upcoming event, contact us as soon as you know about it.",
  "title": "Accept a bank transfer | Stripe Documentation",
  "description": "Use the Payment Intents API to accept bank transfer payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/customer-balance",
  "markdown": "# Customer balance | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use the customer balance with payments.\n\nYour customers might have associated balances that contain two types of funds—cash and credit.\n\n## Cash balances ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA customer’s cash balance represents funds that they can use for payment. When they overpay or send an amount using a bank transfer that isn’t automatically reconciled with any outstanding payment, we add these funds to the customer cash balance. You can use these funds for later payments for the same customer, or [initiate a refund](https://docs.stripe.com/payments/customer-balance/refunding#create-return-dashboard) from their cash balance to return the funds to their bank account, limited to the amount available in the customer balance.\n\nA customer is able to have cash balances in all currencies that you can accept bank transfer payments in- each with it’s own [funding instruction](https://docs.stripe.com/payments/bank-transfers#funding-instructions).\n\nYou can’t add funds to the customer cash balance directly. This isn’t a balance that customers can top up and is only there as a reconciliation layer—it’s not a digital wallet or e-money. You can’t use the cash balance for any other purpose besides future payments, or returns to the customer it’s associated with.\n\n## Credit balances ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn contrast to a cash balance, a _credit balance_ is an [Invoices](https://docs.stripe.com/api/invoices \"invoices\") feature that represents liability between you and the customer. You can’t use credit balance funds for payment, but you can apply them to offset future invoices. You can update the customer credit balance by creating an adjustment [Customer Balance Transaction](https://docs.stripe.com/api/customer_balance_transactions/object). For more information on credit balances, refer to [Customer Credit Balance](https://docs.stripe.com/invoicing/customer/balance).\n\n## View the customer balance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can find a customer’s balance with both the API and through the Stripe Dashboard. To view a customer’s balance using the API, first retrieve the `customer` and then expand the `cash_balance` field.\n\n`curl https://api.stripe.com/v1/customers/{{CUSTOMER_ID}}?expand[]=cash_balance \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\`\n\n`{   \"id\": \"cus_HgrkK7bxHMy65g\",   \"object\": \"customer\",   \"address\": null,   \"cash_balance\": {     \"available\": {         \"usd\": 50,     },     \"settings\": {       \"reconciliation_mode\": \"automatic\"     },     \"livemode\": \"true\",     \"object\": \"cash_balance\",   },   \"created\": 1598918400,`\n\nTo view a customer’s balance in the Dashboard, navigate to the **Customer** page. The customer’s balance appears in the **Payment methods** section.\n\n## Make a payment from the cash balance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen your customer has a cash balance, you can use the funds immediately to make a payment up to the available amount. To do this, create a PaymentIntent using the `customer_balance` payment method type.\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d amount=1099 \\   -d currency=usd \\   -d customer=\"{{CUSTOMER_ID}}\" \\   -d \"payment_method_types[]\"=customer_balance \\   -d \"payment_method_data[type]\"=customer_balance \\   -d confirm=true`\n\nWhen your customer has a cash balance, you can use the funds immediately to make a payment up to the available amount. You can do this by using either the API or the Dashboard.\n\nTo make a payment using the API, create a PaymentIntent using the `customer_balance` payment method type.\n\nThe payment succeeds if the cash balance has sufficient funds, and fails otherwise.\n\nTo collect more funds from the customer when the cash balance is insufficient, use the customer balance with a [bank transfer funding](https://docs.stripe.com/payments/bank-transfers/accept-a-payment).\n\n## List changes to the customer balance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nChanges to the customer’s cash balance are modeled as a list of [cash balance transactions](https://docs.stripe.com/api/cash_balance_transactions/object). You can retrieve these transactions for a customer to see how their cash balance has changed over time.\n\n#### Note\n\nFor a customer with multiple cash balances in different currencies, listing changes to the cash balance will return changes for all the different currencies.\n\n## Cash balance transaction types ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCash balance transactions have a [`type`](https://docs.stripe.com/api/cash_balance_transactions/object#customer_cash_balance_transaction_object-type) value indicating the type of action that caused the cash balance to change.\n\n| Type | Description |\n| --- | --- |\n| `funded` | The customer has funded their balance by making a bank transfer. Funds represented by these transactions might be automatically applied to payment intents and invoices depending on the [reconciliation](https://docs.stripe.com/payments/customer-balance/reconciliation) procedure. If these funds are applied automatically, you’ll see additional transactions of type `applied_to_payment` representing that. |\n| `applied_to_payment` | Funds from the cash balance were applied to a payment intent, either by [reconciliation](https://docs.stripe.com/payments/customer-balance/reconciliation#cash-automatic-reconciliation) after funding arrives, or by [manual reconciliation](https://docs.stripe.com/payments/customer-balance/reconciliation#cash-manual-reconciliation). |\n| `unapplied_from_payment` | A [partially funded](https://docs.stripe.com/payments/bank-transfers/accept-a-payment?payment-ui=direct-api#handling-underpayments-and-overpayments) payment intent was [modified](https://docs.stripe.com/api/payment_intents/update) or [canceled](https://docs.stripe.com/api/payment_intents/cancel), and the funds were returned to the customer’s cash balance. You can use these funds for future payments. |\n| `refunded_from_payment` | A successful payment intent has been [refunded to the customer cash balance](https://docs.stripe.com/payments/customer-balance/refunding#refund-customer-balance-payment-customer-balance). You can use these funds for future payments. |\n| `return_initiated` | Unspent funds are being returned to the customer’s bank account from their cash balance. |\n| `return_canceled` | An attempt to return funds to the customer’s bank account has been canceled, either because you [canceled the refund before the customer submitted their bank details](https://docs.stripe.com/payments/customer-balance/refunding#create-return-dashboard-cancel), or we weren’t able to collect bank account details from the customer. For more information about refund state transitions, see [Refund bank transfer payments](https://docs.stripe.com/payments/customer-balance/refunding#refund-customer-balance-payment-bank-account). |\n| `funding_reversed` | Funds have been debited from the cash balance due to an [ACH reversal](https://docs.stripe.com/payments/payment-methods/bank-transfers/reversals-us). |\n| `adjusted_for_overdraft` | Funds have been returned to the cash balance after an [ACH reversal](https://docs.stripe.com/payments/payment-methods/bank-transfers/reversals-us) caused the balance to go negative. |\n| `transferred_to_balance` | Funds have been moved from the cash balance to your Stripe balance due to failed refunds or insufficient refund details. |",
  "title": "Customer balance | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/customer-balance/reconciliation",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Reconciliation\n\n## Learn about how Stripe reconciles the customer balance to payments and invoices.\n\nStripe offers the `automatic` or `manual` reconciliation behavior for funds in the cash balance.\n\nBy default, Stripe applies the automatic reconciliation mode to the cash balance of all of your customers. You can use the Bank Transfers [reconciliation settings](https://dashboard.stripe.com/settings/bank_transfers) to change the reconciliation behavior for everyone.\n\n![Bank Transfer reconciliation settings](https://b.stripecdn.com/docs-statics-srv/assets/bank-transfer-reconciliation-settings.930a07d8937809fddf187138649fc419.png)\n\nBank Transfer reconciliation settings\n\n## Override reconciliation behavior ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use the Dashboard or API to override, for a specific customer, the Bank Transfers reconciliation settings.\n\nTo override a customer’s reconciliation behavior in the Dashboard:\n\n1.  Select the customer, then find **Cash Balance** in the **Payment methods** section.\n2.  Expand the overflow menu () next to the cash balance details.\n3.  From the expanded options, select **Change reconciliation mode**. This displays a modal that allows you to change the reconciliation behavior for the customer.\n\n![Cash Balance section on the Customer page](https://b.stripecdn.com/docs-statics-srv/assets/cash-balance-settings.fbc9cb0a50beaf42ab1ff6baab7dc09f.png)\n\nThe Cash Balance section on the Customer page\n\nTo override a customer’s reconciliation behavior using the API, set the customer’s [reconciliation mode](https://docs.stripe.com/api/customers/object#customer_object-balance_settings-reconciliation_mode) to `manual`.\n\n`curl https://api.stripe.com/v1/customers/`\n\n`{{CUSTOMER_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"cash_balance[settings][reconciliation_mode]\"=manual`\n\nTo point the reconciliation mode for an overridden customer back to the user’s default, you can do so in the Dashboard. You can also use the API to set the [reconciliation mode](https://docs.stripe.com/api/customers/object#customer_object-balance_settings-reconciliation_mode) on the customer to `merchant_default`.\n\n## Automatic cash balance reconciliation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBy default, Stripe automatically applies any available cash balance to PaymentIntents and [invoices](https://docs.stripe.com/api/invoices \"invoices\") that are awaiting funding. A PaymentIntent is awaiting funding if it’s incomplete. An invoice is awaiting funding if it’s `open` and either hasn’t passed its due date or became overdue within the last 30 days.\n\nStripe applies funds in the following order:\n\n1.  Stripe initially attempts to match a bank transfer reference with a single invoice that has a matching [invoice number](https://docs.stripe.com/api/invoices/object#invoice_object-number).\n2.  If the first attempt is unsuccessful, Stripe attempts to match the bank transfer reference with a single incomplete PaymentIntent that has a matching reference stored in the PaymentIntent’s [display\\_bank\\_transfer\\_instructions](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-display_bank_transfer_instructions-reference) field.\n3.  If Stripe doesn’t receive a bank transfer reference or can’t match the reference with a single invoice or PaymentIntent, we search for a group of between one and five invoices and PaymentIntents awaiting the exact amount the user sent. For multiple valid combinations, Stripe prioritizes as follows:\n    *   We filter for the smallest group. If there’s two groups of invoices or PaymentIntents that can both receive the funds, we select the one with fewer objects.\n    *   If there are multiple smallest-sized groups, we select the smallest group that contains the most invoices.\n    *   If multiple groups contain the same number of invoices, we select the group with the oldest PaymentIntents.\n4.  If we can’t find a group that equals the exact funds available, we fund as many invoices that can be fully funded, starting with the oldest finalized ones first.\n5.  If any funds remain, we apply the remaining funds to incomplete PaymentIntents, starting with the oldest ones first.\n\n## Manual cash balance reconciliation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen manual reconciliation is enabled on a customer, Stripe does not automatically apply any funds from the customer balance.\n\nYou can apply funds from the customer balance manually using either the API or the Dashboard.\n\nFor both the API and the Dashboard, you can apply funds to an incomplete or partially funded PaymentIntent, or an open Invoice. You can also fund Invoices that are still open but marked overdue with this method.\n\nIn the Dashboard, you can apply funds to a PaymentIntent on the Payments page or on the page for the individual payment.\n\nTo fund a PaymentIntent from the Payments page, find the payment you want to fund, select the overflow menu (), then click **Fund from cash balance**.\n\n![The overflow menu for a single Payment on the Stripe Dashboard Payments page](https://b.stripecdn.com/docs-statics-srv/assets/fund-from-cash-balance-payments-list.16be7818811602d966d2ce4f1aadbc0f.png)\n\nTo fund a PaymentIntent from the page for the individual payment, click the **Fund from cash balance** button.\n\nIn both cases, selecting the **Fund from cash balance** button prompts you to confirm the payment. This button doesn’t appear on either page if the customer doesn’t have any funds available on their cash balance.\n\nIn order to apply funds to an invoice, navigate to the **Invoice** page, click the **Charge customer** button, and then select **Cash Balance** as the payment method.\n\nYou can partially or fully fund an invoice using the Dashboard. This option allows you to pay a portion of the invoice, if the customer doesn’t have sufficient funds on their cash balance to fully pay the invoice.\n\nIn order to apply funds using the API:\n\n`curl https://api.stripe.com/v1/payment_intents/`\n\n`{{PAYMENT_INTENT_ID}}`\n\n`/apply_customer_balance \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d amount=1500 \\  -d currency=usd`\n\nThe amount is optional. When omitted, the amount defaults to the remaining amount requested on the PaymentIntent.\n\nThe following code is an example of a full pass of manual reconciliation. You receive the `cash_balance.funds_available` webhook, find PaymentIntents that are awaiting funding, and use the funds available to reconcile the open PaymentIntents.\n\nThe object sent in the `cash_balance.funds_available` message always contains a representation of the customer’s full cash balance, regardless of the event triggering the webhook. This means that the cash balance might contain funds that were previously added to the customer’s cash balance, not just those added immediately before the triggering event.\n\n`require 'stripe' require 'sinatra'  Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`post '/webhook' do   sig_header = request.env['HTTP_STRIPE_SIGNATURE']   endpoint_secret = ENV['ENDPOINT_SECRET']   payload = request.body.read    begin     event = Stripe::Webhook.construct_event(       payload, sig_header, endpoint_secret     )   rescue JSON::ParserError => e     status 400     return   rescue Stripe::SignatureVerificationError => e     status 400     return   end    case event['type']     when 'cash_balance.funds_available'     # The cash_balance.funds_available webhook always contains a complete cash balance,     # regardless of the event triggering the webhook.     #     # This means that the cash balance might contain funds that were previously added to the customer's cash balance,     # not just those added immediately before the triggering event.     cash_balance = event['data']['object']     customer_id = cash_balance['customer']      # Cash balances might contain multiple currencies.     currencies_available = cash_balance['available'].keys      # Getting all payment intents for a customer.     customer_payment_intents = Stripe::PaymentIntent.list({customer: customer_id})['data']      # We can order the funding of PaymentIntents in whichever order we like - here we'd     # like to pay the oldest first.     customer_payment_intents = customer_payment_intents.sort_by { |payment_intent| payment_intent['created'] }      # We allow a customer's balance to include multiple currencies.     #     # If a customer has balances in multiple currencies, we only allow reconciliation using the balance that matches     # the currency of the PaymentIntent.     intents_for_currency = {}     currencies_available.each do |currency|       intents_for_currency[currency] = customer_payment_intents.select do |payment_intent|         allowed_payment_methods = payment_intent['payment_method_types']         awaiting_further_payment = ['requires_payment_method', 'requires_action'].include? payment_intent['status']         payment_intent['currency'] == currency.to_s and awaiting_further_payment and allowed_payment_methods.include? 'customer_balance'       end     end      # Here we attempt to fund every fundable PaymentIntent for as long as there are funds available     # in the customer's Cash Balance for the correct currency. Each time we attempt to fund a     # PaymentIntent, we repoll the Cash Balance to make sure that we still have funds available for     # the next PaymentIntent.     currencies_available.each do |currency|       payment_intents = intents_for_currency[currency]       payment_intents.each do |payment_intent|         if cash_balance['available'][currency] == 0           break         end         Stripe::PaymentIntent.apply_customer_balance(payment_intent['id'])         cash_balance = Stripe::Customer.retrieve_cash_balance(customer_id, nil)       end     end   end end`\n\n## Unreconciled cash balance funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSometimes funds in the customer balance remain unreconciled—for example, when a customer sends too much money and you haven’t created any more PaymentIntents or Invoices for that customer.\n\nTo reconcile outstanding funds in the customer cash balance, you can either create a new PaymentIntent or invoice to accept a payment, or return the funds to the customer.\n\n#### Caution\n\nYou’re responsible for making sure that you reconcile customer cash balances promptly and accurately. Reconcile outstanding customer balances quickly, rather than leaving them in your account for an extended period.\n\nStripe periodically sends a reminder email when you have unreconciled balances in your account to make sure that you can review these unreconciled funds. If a customer balance remains unreconciled for 75 days, Stripe automatically attempts to return the funds to the customer’s bank account. When Stripe doesn’t have the customer’s account information, Stripe might reach out to the customer directly to initiate a refund of unreconciled funds. If Stripe is unable to determine the customer’s account information by the 90 day mark, we sweep the unreconciled funds to your Stripe account balance. Coordinate directly with the customer to make sure they receive the returned funds.\n\nYou can see the full list of customers who have unreconciled cash balances and the date that we’ll return them to the customer in your [Dashboard](https://dashboard.stripe.com/test/customer-balances).\n\n## Credit balance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n_Credit balance_ is handled differently from cash balance. Customer credit balance is an [Invoices](https://docs.stripe.com/api/invoices \"invoices\")\\-only feature which represents liability between you and the customer. When an invoice is finalized, the customer’s credit balance is applied to the invoice, decreasing the amount due.\n\nFor more information on credit balances, see [Customer Credit Balance](https://docs.stripe.com/invoicing/customer/balance).",
  "title": "Reconciliation | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/bank-transfer",
  "markdown": "# Set up a subscription with bank transfers\n\n## Allow customers to set up recurring payments by transferring funds from their bank account.\n\nUse this guide to set up a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") using [bank transfers](https://docs.stripe.com/payments/bank-transfers) as a payment method.\n\n[](#create-product-plan-code)\n\n[Products](https://docs.stripe.com/api/products \"Products\") and [Prices](https://docs.stripe.com/api/prices \"Prices\") are core resources for Subscriptions. Create a product and a recurring price by following the steps in the [product and prices guide](https://docs.stripe.com/products-prices/overview). Save the price ID—you’ll need it later in this guide.\n\n[](#create-customer)\n\nTo start, create a [customer](https://docs.stripe.com/api/customers \"Customers\") with a valid email address, if one doesn’t already exist. The valid email address ensures that the customer can receive invoices you send to them. Funds from bank transfers are held in the customer’s [cash balance](https://docs.stripe.com/payments/customer-balance), so you have to associate a [Customer](https://docs.stripe.com/api/customers) object with each bank transfer subscription.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d name=\"Jenny Rosen\" \\   --data-urlencode email=\"jenny.rosen@example.com\"`\n\n[](#create-subscription)\n\n[Create](https://docs.stripe.com/api/subscriptions/create) the subscription using the customer ID and price ID from the previous steps.\n\n*   Set [`collection_method`](https://docs.stripe.com/api/subscriptions/create#create_subscription-collection_method) to `send_invoice`.\n*   Set [`days_until_due`](https://docs.stripe.com/api/subscriptions/create#create_subscription-days_until_due) to configure how many days the customer has to pay the [invoice](https://docs.stripe.com/api/invoices \"invoices\").\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer={{CUSTOMER_ID}} \\   -d \"items[0][price]\"={{PRICE_ID}} \\   -d collection_method=send_invoice \\  -d days_until_due=30 \\  -d \"payment_settings[payment_method_types][0]\"=customer_balance`\n\nAn invoice is sent to the customer when the Subscription is due. The invoice is marked as paid if the customer has enough funds in their [cash balance](https://docs.stripe.com/payments/customer-balance). Otherwise, it contains the necessary information needed for the customer to push funds from their bank account. This invoice also has a link to the [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page). Subsequent invoices use the price you created in the first step.\n\nLearn more about [bank transfer invoices](https://docs.stripe.com/invoicing/bank-transfer).",
  "title": "Set up a subscription with bank transfers | Stripe Documentation",
  "description": "Allow customers to set up recurring payments by transferring funds from their bank account.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/customer-balance/funding-instructions",
  "markdown": "# Funding instructions | Stripe DocumentationThe Stripe Docs logo\n\n## Provide customer balance funding instructions without creating a PaymentIntent.\n\nThis guide describes how to retrieve instructions for funding the customer’s cash balance without creating a PaymentIntent. Funding instructions are typically useful if you’re accepting payments from larger companies who require these details before you send them an [invoice](https://docs.stripe.com/api/invoices \"invoices\") or request for payment.\n\nMost users rely on this API for a first-time customer signup flow. If a customer selects bank transfers as their preferred payment method, you can call this endpoint to get the funding instructions right away rather than waiting for the first PaymentIntent or Invoice to be created.\n\nThe funding instructions will always be the same for a given customer across both the Customer Balance Funding Instructions API and the [PaymentIntents API](https://docs.stripe.com/payments/bank-transfers/accept-a-payment). As with PaymentIntents, you can request funding instructions using the bank transfer type and currency that best fits your customer.\n\n[](#create-funding-instructions)\n\nUse the Customer Balance Funding Instructions API to retrieve a set of `financial_addresses` that can receive funds from the customer. Provide these bank account details to your customer so that they can initiate a bank transfer using any of the `supported_networks`.\n\n#### Note\n\nIn live mode, Stripe supplies each customer with a unique set of bank transfer details. In contrast, Stripe offers invalid bank transfer details to all customers in [test mode](https://docs.stripe.com/test-mode \"test mode\"). Unlike live mode, these invalid details might not always be unique.\n\n`curl https://api.stripe.com/v1/customers/`\n\n`{{CUSTOMER_ID}}`\n\n`/funding_instructions \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d funding_type=bank_transfer \\  -d \"bank_transfer[type]\"=us_bank_transfer \\  -d currency=usd`\n\nThe response contains the following fields:\n\n[](#vban-confirmation-letters)\n\nSome customers might request additional assurance that the account they’re transferring money into is yours, because the account might be listed as owned by Stripe. To provide this assurance, you can generate a letter confirming your ownership of the account to the customer. In this letter, Stripe confirms that you’re the owner of the virtual bank account corresponding to the account details you have passed to that customer.\n\nTo download a letter confirming account ownership:\n\n1.  Navigate to the [Customers page](https://dashboard.stripe.com/customers) in the Dashboard.\n    \n2.  Select the customer who has requested additional verification that you own the account.\n    \n3.  Navigate to their cash balance details. This page shows the account details that the customer must use to pay you by bank transfer.\n    \n4.  Click the button to download a confirmation letter in a PDF format with today’s date.\n    \n\n![Button to download confirmation of account ownership](https://b.stripecdn.com/docs-statics-srv/assets/vban-confirmation-letter-button.cfd3f902e44069f96d011b7fb8cba336.png)\n\nDownload confirmation of account ownership",
  "title": "Funding instructions | Stripe Documentation",
  "description": "Create or retrieve VBAN details for customers to fund their cash balance without a PaymentIntent, and download a confirmation letter for the VBAN ownership.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/mastercard-installments",
  "markdown": "# Mastercard Installments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Mastercard Installments, a program that allows issuers and lenders to provide buy now, pay later payments.\n\nMastercard Installments is a program that allows merchants to offer installment payment options to customers, leveraging their existing Mastercard relationship:\n\n*   Merchants are automatically enrolled to accept Mastercard Installments when they start accepting Mastercard payments.\n*   Customers who have a Mastercard Installments virtual card from their bank can pay in 4 interest-free installments during checkout, just like a regular Mastercard transaction.\n*   The same fee structure applies to Mastercard Installments as regular Mastercard transactions.\n*   Surcharging for Mastercard Installments is prohibited.\n\n## Prohibited business categories![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the categories of [businesses restricted from using Stripe](https://stripe.com/legal/restricted-businesses), the following categories are prohibited from accepting a Mastercard Installments virtual card.\n\n*   Money transfer\n*   Funding transactions\n*   Quasi cash\n*   Merchandise and services: Customer financial institution\n*   Payment transaction\n*   MoneySend\n\n## Recurring payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMastercard Installments doesn’t support recurring payments such as subscriptions. If a buyer attempts to purchase a recurring product or service with this card, it will be declined.\n\n## Disable Mastercard Installments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you don’t want to accept Mastercard Installments payments either:\n\n*   Create a support inquiry at [Stripe Support](https://support.stripe.com/) using the subject “MC Installments Opt Out”\n*   Navigate to [this link](https://support.stripe.com/contact/email?question=other&topic=payment_apis&subject=MC%20Installments%20Opt%20Out&body=I%20would%20like%20to%20request%20that%20Stripe%20XXX&refcode=cQ6o) directly to request “opting out”.\n\nThis process might take 1-3 days to complete. Opting out of Mastercard Installments also opts you out of Apple Pay Later.",
  "title": "Mastercard Installments | Stripe Documentation",
  "description": "Learn about Mastercard Installments, a program that allows issuers and lenders to provide buy now, pay later payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/alma",
  "markdown": "# Alma payments | Stripe DocumentationThe Stripe Docs logo\n\n## Alma paymentsBeta\n\n## Offer French customers the ability to pay in 2, 3, or 4 installments while getting paid instantly.\n\n[Alma](https://almapay.com/) is a Buy Now, Pay Later payment method available in France that gives your customers flexibility.\n\nWhen customers select Alma as their payment method, Stripe redirects them to Alma’s website, where they get the ability to choose between 2, 3, or 4 installments to complete their purchase. You are paid immediately.\n\n*   **Customer locations**\n    \n    France\n    \n*   **Presentment currency**\n    \n    EUR\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Buy Now, Pay Later\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    T+3\n    \n*   **Connect support**\n    \n    Connected accounts that use the Stripe Dashboard\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    Yes\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Alma and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Alma. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Alma from the Dashboard:\n\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf your integration requires manually listing payment methods, learn how to [manually configure Alma as a payment](https://docs.stripe.com/payments/alma/accept-a-payment).\n\n## Payment options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDepending on the customer’s billing country and the transaction amount, Alma can present customers with various payment options. Cart ranges and geographic availability for payment options are determined by Alma and may change at their discretion. Regardless of the underlying payment option selected, Stripe makes the full amount of the funds (minus fees) available to you upfront and Alma collects the purchase amount from your customer, who repays Alma directly. These options include:\n\nPay in 2, 3, or 4 (also known as Installments): Customers pay for the purchase in two,three or four interest-free payments. The total transaction amount is typically spread equally across the installments, but Alma might occasionally charge your customer more in the first installment based on the customer’s purchase power and other credit factors.\n\nThe following tables list the supported payment options for the countries in each region. If a payment option isn’t listed for a country, it isn’t currently supported.\n\n### France\n\n## Prohibited business categories![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the industry and business categories listed in [Prohibited and restricted business](https://stripe.com/restricted-businesses), Alma prohibits the following categories:\n\n*   Sole proprietorships or individual accounts\n*   Business to Business Services\n*   Educational services\n*   Professional services (including, but not limited to, legal, consulting, and accounting)\n*   Transportation services\n*   Travel services\n*   Telecommunication services and utilities\n*   Veterinary services\n\nSee a [full list of prohibited activities](https://help.almapay.com/hc/en-gb/articles/360006779359-Which-activities-are-not-eligible-for-payment-with-Alma). Even if an activity isn’t listed as prohibited, your business might still be ineligible for Alma due to risk-related reasons.\n\n## Customer terms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAlma requires that you add the following terms to your general terms of sale:\n\n*   Customers can make purchases in installments using Alma.\n*   A customer’s purchase using Alma is subject to Alma’s terms and conditions.\n*   Non-approval by Alma for a purchase can result in the cancellation of that purchase.\n*   A customer using Alma to purchase a good or service has a period of 14 calendar days in which they can withdraw the purchase.\n\n[](#refunds)\n\nAlma supports full and partial refunds. The refund period is up to 180 days after the purchase. Refunds for Alma payments are asynchronous and take up to 5 minutes to complete. We will notify you of the final refund status using the `charge.refund.updated` [webhook](https://docs.stripe.com/webhooks \"webhook\") event. When a refund succeeds, the [Refund](https://docs.stripe.com/api/refunds/object) object’s status transitions to `succeeded`. In the rare instance that a refund fails, the Refund object’s status will transition to `failed` and we will return the amount to your Stripe balance. You will then need to arrange an alternative way of providing your customer with a refund.\n\n[](#disputed-payments)\n\nCustomers must authenticate Alma payments by logging into their Alma account. This requirement helps reduce the risk of fraud or unrecognized payments. While Alma covers losses incurred from customer fraud, Alma might contact you and request to stop or pause shipment before incurring any losses. Please comply promptly with these requests.\n\nCustomers have up to 120 calendar days from the date of purchase to file a dispute. The dispute process works like this:\n\n*   After the customer initiates a dispute, Stripe notifies you through email, the Stripe Dashboard, and an API `charge.dispute.created` event (if your integration is set up to receive [webhooks](https://docs.stripe.com/webhooks)).\n    \n*   Stripe holds back the disputed amount from your balance until Alma resolves the dispute.\n    \n*   Stripe requests that you upload compelling evidence that you fulfilled the purchase order [using the Stripe Dashboard](https://docs.stripe.com/disputes/responding#respond). This evidence can include:\n    \n    *   A received return confirmation (for shipped goods returned from the customer to you)\n    *   The tracking ID\n    *   The shipping date\n    *   A record of purchase for intangible goods, such as IP address or email receipt\n    *   A record of purchase for services or physical goods, such as phone number or proof of receipt\n*   This information helps Alma determine if a dispute is valid or if it should be rejected. Make sure the evidence you provide contains as much detail as possible from what the customer provided at checkout. You must submit the requested information within 14 calendar days. Alma makes a decision within 25 calendar days of evidence submission. If Alma resolves the dispute with you winning, Stripe returns the disputed amount to your Stripe balance. If Alma rules in favor of the customer, the balance charge becomes permanent.\n    \n\n#### Warning\n\nAlma requires merchants to maintain reasonable fraud and dispute rates. Increases to your fraud and dispute rates might result in losing access to Alma.\n\n#### Note\n\n## Supported currencies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can create Alma payments in the currencies that map to your country. The default local currency for Alma is `eur` and customers also see their purchase amount in `eur`.",
  "title": "Alma payments | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/billie",
  "markdown": "# Billie payments | Stripe DocumentationThe Stripe Docs logo\n\n## Billie paymentsBeta\n\n## Offer businesses \"Pay in 30\" payment terms while getting paid instantly.\n\n[Billie](https://billie.io/) is a Buy Now, Pay Later payment method available in Germany, France, and the Netherlands that gives your customers payment flexibility.\n\nWhen customers select Billie as their payment method, Stripe redirects them to Billie’s website, where they’re granted the ability to pay in 30 days. You’re paid immediately.\n\n*   **Customer locations**\n    \n    EU customers\n    \n*   **Presentment currency**\n    \n    EUR\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Buy Now, Pay Later\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    Standard\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    Yes\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Billie and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Billie. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Billie from the Dashboard:\n\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf your integration requires manually listing payment methods, learn how to [manually configure Billie as a payment](https://docs.stripe.com/payments/billie/accept-a-payment).\n\n## Prohibited and restricted business categories![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the categories of goods or services sold and businesses [restricted from using Stripe overall](https://stripe.com/restricted-businesses), the following categories are prohibited from using Billie:\n\n*   Sale of high-priced goods (such as jewels and gold)\n*   Sale of weapons\n*   Production and distribution of adult entertainment or pornography\n*   Money Service Businesses\n*   Embassies or consulates\n*   Virtual currencies\n*   Conducting gambling and lottery activities\n*   Manufacturing of weapons and ammunition\n*   Construction of military vehicles\n*   Construction of buildings\n*   Civil engineering\n*   Gambling\n*   Private households, production for own needs\n*   Gyms\n\n[](#refunds)\n\nBillie supports full and partial refunds. The refund period is up to 180 days after the purchase. Refunds for Billie payments are asynchronous and take up to 5 minutes to complete. We’ll notify you of the final refund status using the `charge.refund.updated` [webhook](https://docs.stripe.com/webhooks \"webhook\") event. When a refund succeeds, the [Refund](https://docs.stripe.com/api/refunds/object) object’s status transitions to `succeeded`. In the rare instance that a refund fails, the Refund object’s status will transition to `failed` and we return the amount to your Stripe balance. You’ll then need to arrange an alternative way of providing your customer with a refund.\n\n## Supported currencies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can create Billie payments in the currencies that map to your country. The default local currency for Billie is `eur` and customers also see their purchase amount in `eur`.\n\n| Currency | Country |\n| --- | --- |\n| `eur` | France, Germany, Netherlands |",
  "title": "Billie payments | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/strong-customer-authentication/plugins",
  "markdown": "# SCA migration guide for plugins and developer libraries\n\n## Learn how to update your Stripe plugin or developer library to support Strong Customer Authentication (SCA).\n\n#### Note\n\nThis [SCA](https://docs.stripe.com/strong-customer-authentication) guide is designed for developers of Stripe plugins or libraries. If you’re a Stripe user looking for an SCA-ready plugin, visit [Stripe Partners](https://stripe.com/partners/sca-ready).\n\n## Do I need to support SCA for my users? ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBusinesses in the [European Economic Area](https://en.wikipedia.org/wiki/European_Economic_Area \"European Economic Area\") (EEA) accepting online payments from customers in the EEA require a different user experience, namely [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") . Transactions that don’t follow the new authentication guidelines may be declined by a customer’s bank, as of September 14th, 2019. This additional layer of authentication requires migrating to SCA-ready solutions like the new version of [Checkout](https://stripe.com/checkout) or the [Payment Intents API](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\"), described in Step 2.\n\n[](#determine-integration)\n\nRefer to the [SCA migration guide](https://docs.stripe.com/strong-customer-authentication/migration) to review the integration paths for the new version of [Stripe Checkout](https://stripe.com/checkout), the [Payment Intents API](https://docs.stripe.com/payments/payment-intents), the [Setup Intents API](https://docs.stripe.com/payments/save-and-reuse), Stripe Billing, and iOS or Android. For developers of plugins or libraries:\n\n*   **Choose Stripe Checkout when possible.** Stripe’s new version of [Checkout](https://stripe.com/checkout) is a fully hosted payment page that can be branded by businesses, supports recurring [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"), and is the easiest way to provide SCA support to your users.\n*   **For more control over your checkout experience, use the Payment Intents and Setup Intents APIs.** These APIs work with [Elements](https://stripe.com/payments/elements), Stripe’s customizable UI components for payment flows, and other Stripe APIs like [PaymentMethods](https://docs.stripe.com/api/payment_methods \"PaymentMethods\"), [Customers](https://docs.stripe.com/api/customers \"Customers\"), and [Connect](https://docs.stripe.com/connect \"Connect\"). The [Payment Intents](https://docs.stripe.com/payments/payment-intents) and [Setup Intents](https://docs.stripe.com/payments/save-and-reuse) APIs display authentication flows like 3D Secure 2, save cards to use later, and ensure your integration is SCA-ready.\n*   **Programmatically subscribe your user to webhooks**: You can [register a webhook endpoint](https://docs.stripe.com/webhooks#register-webhook) for your account or connected accounts and manage them with the [Webhooks](https://docs.stripe.com/webhooks \"webhook\") API, simplifying setup for your users.\n\nIf none of these options work for your integration, please [let us know](mailto:plugins+sca@stripe.com).\n\n[](#notify-users)\n\nWe recommend releasing an update for your users to let them know your payments solution is SCA-ready. You can share the [guide to Strong Customer Authentication](https://stripe.com/guides/strong-customer-authentication) with your users to help them understand these regulatory changes. When you’ve released an SCA-ready update, please [let us know](mailto:plugins+sca@stripe.com) as well.\n\n#### Caution\n\nProvide an SCA-ready update as soon as you’re finished updating. We direct users to SCA-ready solutions on the [Stripe Partners](https://stripe.com/partners/sca-ready) page.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Checkout Overview](https://docs.stripe.com/payments/checkout)\n*   [One-time Payments](https://docs.stripe.com/payments/payment-intents)\n*   [Saving and Reusing Cards](https://docs.stripe.com/payments/save-and-reuse)\n*   [Migrating to Payment Intents](https://docs.stripe.com/payments/payment-intents/migration)",
  "title": "SCA migration guide for plugins and developer libraries | Stripe Documentation",
  "description": "Learn how to update your Stripe plugin or developer library to support Strong Customer Authentication (SCA).",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/strong-customer-authentication/migration",
  "markdown": "# Update your integration for SCA\n\n## Learn how to update your integration to avoid declined payments due to Strong Customer Authentication (SCA).\n\nUpdating your integration to support [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") consists of the following steps:\n\n1.  Identify your payment flow\n2.  Determine your integration path\n3.  Implement the new integration path\n4.  Test dynamic authentication\n\nStart updating your integration today. After your integration is live, [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") authentication is displayed when required by SCA.\n\n## 1\\. Identify your payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFirst, identify the payment flow that most closely matches your business. Read more about various flows to [design a payment flow for SCA](https://stripe.com/guides/sca-payment-flows).\n\n| Payment flow | Description | Example Business Scenario |\n| --- | --- | --- |\n| One-time payments | You charge the customer’s cards immediately after they confirm payment. | [E-commerce](https://stripe.com/guides/sca-payment-flows#e-commerce) |\n| Recurring payments | You charge the customer on a recurring basis. | [Gym membership](https://stripe.com/guides/sca-payment-flows#gym-membership) for fixed-amount recurring charges, or [utility bill](https://stripe.com/guides/sca-payment-flows#utility-bill) for metered billing |\n| Payments with [separate authorize and capture](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method) within 7 days. | You separately authorize and capture card payments within 7 days after the customer confirms payment. | [Ridesharing](https://stripe.com/guides/sca-payment-flows#ridesharing) |\n| Payment captured more than seven days after authorization. | You charge the customer’s card more than 7 days after they submit payment details. | [Crowdfunding](https://stripe.com/guides/sca-payment-flows#crowdfunding), or [car rental](https://stripe.com/guides/sca-payment-flows#car-rental) if final amount may change. |\n| Other off-session payments | You save the customer’s cards and charge some time later when the customer is not available to complete authentication. | N/A |\n\n## 2\\. Determine your integration path ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nChoose an integration option based on your payment flow below:\n\n[](#one-time)\n\nFor one-time payments, you can complete the full integration today.\n\n### Stripe Checkout ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nGet prebuilt, conversion-optimized checkout flows with minimal code. Choose this option if you prefer a low-maintenance integration. For this payment flow, you can complete the full integration, and handling exemptions doesn’t require any additional work.\n\n*   See [how to integrate Stripe Checkout](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) to learn more.\n\n### Payment Intents API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBuild dynamic payment flows and custom checkout pages by migrating to the Payment Intents API with one of our client libraries:\n\n*   [Stripe.js & Elements](https://docs.stripe.com/payments/payment-intents/migration)\n*   [Stripe iOS SDK](https://docs.stripe.com/payments/accept-a-payment?platform=ios#setup-client-side)\n*   [Stripe Android SDK](https://docs.stripe.com/payments/accept-a-payment?platform=android#setup-client-side)\n\nFor this payment flow, you can complete the full integration, and handling exemptions requires no additional work.\n\n*   See [how to use the Payment Intents API](https://docs.stripe.com/payments/payment-intents) to learn more.\n\n[](#recurring)\n\n[SCA](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") requires customers to complete [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") for some payments. When this step is required by the bank, the customer must be online to complete authentication. ​​This introduces complexity for businesses that save cards and charge them later when the customer is no longer on the website or application and can’t complete authentication. This is also known as off-session payments. Examples of this include [fixed-amount subscriptions](https://stripe.com/guides/sca-payment-flows#gym-membership), [metered-billing subscriptions](https://stripe.com/guides/sca-payment-flows#utility-bill), [crowdfunding campaigns](https://stripe.com/guides/sca-payment-flows#crowdfunding), and [car rentals](https://stripe.com/guides/sca-payment-flows#car-rental).\n\nStripe products and APIs now allow merchants to meet SCA requirements for off-session payments:\n\n1.  **Mandate collection.** A mandate represents the agreement you have with the customer on how you plan to use their card in the future. In your checkout flow, add some consent text. State that by completing checkout, the customer consents to your initiation of payment on their behalf. State the anticipated frequency of payments. Explain how the amount of the payments will be determined.\n    \n2.  **Strong authentication of the first transaction.** Merchants are required to authenticate the customer when the mandate is set up. This can either be done by the first payment with the card or when saving the card to a customer without making an initial payment.\n    \n3.  **Flagging subsequent transactions.** Any payment made with a saved card when a user is off-session must be marked accordingly, with reference to the first authenticated transaction. Stripe handles this for you.\n    \n\nBy updating your payments integration to use these new APIs and flows, Stripe can request exemptions such as [fixed-amount subscriptions](https://stripe.com/guides/strong-customer-authentication#fixed-amount-subscriptions) and [merchant-initiated transactions](https://stripe.com/guides/strong-customer-authentication#merchant-initiated-transactions-including-variable-subscriptions \"merchant-initiated transaction\") to process later payments made with a saved card. However, banks can decide to reject a request for exemption. Build [a way to notify customers](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#charge-saved-payment-method) that they need to return to your application and complete authentication if required.\n\n### Stripe Billing with the new version of Checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCheckout is a prebuilt checkout page that lets you collect payments and manage simple [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") with a single integration.\n\n*   See [how to build subscriptions](https://docs.stripe.com/billing/subscriptions/build-subscriptions) to learn more.\n\n### Stripe Billing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTake advantage of automated tools to protect your revenue and scale your business. Build your own custom checkout experience.\n\n1.  Update your client-side integration to [save and reuse cards](https://docs.stripe.com/payments/save-and-reuse).\n2.  Then, [implement SCA-changes for Stripe Billing](https://docs.stripe.com/billing/migration/strong-customer-authentication).\n\n### Off-Session Payments with the Payment Intents API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBuild your own off-session payments logic and handle getting users back on-session to complete re-authentication as needed. While this approach takes more work than using Stripe Billing, it provides more flexibility.\n\nThere are three parts to building an off-session payment flow:\n\n1.  **Save a card to a customer.** You can save a card to a customer [in a checkout flow](https://docs.stripe.com/payments/save-during-payment) (as the customer is making a payment) with the Payment Intents API, or [outside of the checkout flow](https://docs.stripe.com/payments/save-and-reuse) with the Setup Intents API. You can also use Stripe Checkout to save cards to a customer [in a checkout flow](https://docs.stripe.com/payments/checkout/customization) or [outside of the checkout flow](https://docs.stripe.com/payments/save-and-reuse?platform=checkout).\n2.  **Use a saved card to make a payment.** Once you have cards saved to a customer, you can make both on-session or [off-session payments](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#charge-saved-payment-method).\n3.  **Build a recovery flow.** While Stripe requests exemptions to reduce the need for customer reauthentication, there is always a risk that the cardholder’s bank will reject the exemption request. You should always build a [recovery flow](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#charge-saved-payment-method) to bring a customer back on-session in case they need to authenticate again.\n\n[](#separate-auth-capture)\n\nFor payments with separate authorize and capture, you can complete the full integration today.\n\n### The new version of Stripe Checkout ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nGet prebuilt, conversion-optimized checkout flows with minimal code. Choose this option if you prefer a low-maintenance integration. For this payment flow, you can complete the full integration today, and no additional work will be needed to handle exemptions.Use Stripe Checkout with separate auth and capture\n\n[Use Stripe Checkout with separate auth and capture](https://docs.stripe.com/payments/accept-a-payment?integration=checkout)\n\n### Payment Intents API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBuild dynamic payment flows and custom checkout pages by migrating to the Payment Intents API with one of our client libraries:\n\n*   [Stripe.js & Elements](https://docs.stripe.com/payments/payment-intents/migration)\n*   [Stripe iOS SDK](https://docs.stripe.com/payments/accept-a-payment?platform=ios#setup-client-side)\n*   [Stripe Android SDK](https://docs.stripe.com/payments/accept-a-payment?platform=android#setup-client-side)\n\nFor this payment flow, you can complete the full integration, and handling exemptions requires no additional work.\n\n*   See [how to use the Payment Intents API](https://docs.stripe.com/payments/payment-intents) to learn more.\n\n[](#deferred-auth)\n\n[SCA](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") requires customers to complete [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") for some payments. When this step is required by the bank, the customer must be online to complete authentication. ​​This introduces complexity for businesses that save cards and charge them later when the customer is no longer on the website or application and can’t complete authentication. This is also known as off-session payments. Examples of this include [fixed-amount subscriptions](https://stripe.com/guides/sca-payment-flows#gym-membership), [metered-billing subscriptions](https://stripe.com/guides/sca-payment-flows#utility-bill), [crowdfunding campaigns](https://stripe.com/guides/sca-payment-flows#crowdfunding), and [car rentals](https://stripe.com/guides/sca-payment-flows#car-rental).\n\nStripe products and APIs now allow merchants to meet SCA requirements for off-session payments:\n\n1.  **Mandate collection.** A mandate represents the agreement you have with the customer on how you plan to use their card in the future. In your checkout flow, add some consent text. State that by completing checkout, the customer consents to your initiation of payment on their behalf. State the anticipated frequency of payments. Explain how the amount of the payments will be determined.\n    \n2.  **Strong authentication of the first transaction.** Merchants are required to authenticate the customer when the mandate is set up. This can either be done by the first payment with the card or when saving the card to a customer without making an initial payment.\n    \n3.  **Flagging subsequent transactions.** Any payment made with a saved card when a user is off-session must be marked accordingly, with reference to the first authenticated transaction. Stripe handles this for you.\n    \n\nBy updating your payments integration to use these new APIs and flows, Stripe can request exemptions such as [fixed-amount subscriptions](https://stripe.com/guides/strong-customer-authentication#fixed-amount-subscriptions) and [merchant-initiated transactions](https://stripe.com/guides/strong-customer-authentication#merchant-initiated-transactions-including-variable-subscriptions \"merchant-initiated transaction\") to process later payments made with a saved card. However, banks can decide to reject a request for exemption. Build [a way to notify customers](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#charge-saved-payment-method) that they need to return to your application and complete authentication if required.\n\n### Off-Session Payments with the Payment Intents API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBuild your own off-session payments logic and handle getting users back on-session to complete re-authentication as needed. While this approach takes more work than using Stripe Billing, it provides more flexibility.\n\nThere are three parts to building an off-session payment flow:\n\n1.  **Save a card to a customer.** You can save a card to a customer [in a checkout flow](https://docs.stripe.com/payments/save-during-payment) (as the customer is making a payment) with the Payment Intents API, or [outside of the checkout flow](https://docs.stripe.com/payments/save-and-reuse) with the Setup Intents API. You can also use Stripe Checkout to save cards to a customer [in a checkout flow](https://docs.stripe.com/payments/checkout/customization) or [outside of the checkout flow](https://docs.stripe.com/payments/save-and-reuse?platform=checkout).\n2.  **Use a saved card to make a payment.** Once you have cards saved to a customer, you can make both on-session or [off-session payments](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#charge-saved-payment-method).\n3.  **Build a recovery flow.** While Stripe requests exemptions to reduce the need for customer reauthentication, there is always a risk that the cardholder’s bank will reject the exemption request. You should always build a [recovery flow](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#charge-saved-payment-method) to bring a customer back on-session in case they need to authenticate again.\n\n[](#other-off-session)\n\n[SCA](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") requires customers to complete [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") for some payments. When this step is required by the bank, the customer must be online to complete authentication. ​​This introduces complexity for businesses that save cards and charge them later when the customer is no longer on the website or application and can’t complete authentication. This is also known as off-session payments. Examples of this include [fixed-amount subscriptions](https://stripe.com/guides/sca-payment-flows#gym-membership), [metered-billing subscriptions](https://stripe.com/guides/sca-payment-flows#utility-bill), [crowdfunding campaigns](https://stripe.com/guides/sca-payment-flows#crowdfunding), and [car rentals](https://stripe.com/guides/sca-payment-flows#car-rental).\n\nStripe products and APIs now allow merchants to meet SCA requirements for off-session payments:\n\n1.  **Mandate collection.** A mandate represents the agreement you have with the customer on how you plan to use their card in the future. In your checkout flow, add some consent text. State that by completing checkout, the customer consents to your initiation of payment on their behalf. State the anticipated frequency of payments. Explain how the amount of the payments will be determined.\n    \n2.  **Strong authentication of the first transaction.** Merchants are required to authenticate the customer when the mandate is set up. This can either be done by the first payment with the card or when saving the card to a customer without making an initial payment.\n    \n3.  **Flagging subsequent transactions.** Any payment made with a saved card when a user is off-session must be marked accordingly, with reference to the first authenticated transaction. Stripe handles this for you.\n    \n\nBy updating your payments integration to use these new APIs and flows, Stripe can request exemptions such as [fixed-amount subscriptions](https://stripe.com/guides/strong-customer-authentication#fixed-amount-subscriptions) and [merchant-initiated transactions](https://stripe.com/guides/strong-customer-authentication#merchant-initiated-transactions-including-variable-subscriptions \"merchant-initiated transaction\") to process later payments made with a saved card. However, banks can decide to reject a request for exemption. Build [a way to notify customers](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#charge-saved-payment-method) that they need to return to your application and complete authentication if required.\n\n### Off-Session Payments with the Payment Intents API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBuild your own off-session payments logic and handle getting users back on-session to complete re-authentication as needed. While this approach takes more work than using Stripe Billing, it provides more flexibility.\n\nThere are three parts to building an off-session payment flow:\n\n1.  **Save a card to a customer.** You can save a card to a customer [in a checkout flow](https://docs.stripe.com/payments/save-during-payment) (as the customer is making a payment) with the Payment Intents API, or [outside of the checkout flow](https://docs.stripe.com/payments/save-and-reuse) with the Setup Intents API. You can also use Stripe Checkout to save cards to a customer [in a checkout flow](https://docs.stripe.com/payments/checkout/customization) or [outside of the checkout flow](https://docs.stripe.com/payments/save-and-reuse?platform=checkout).\n2.  **Use a saved card to make a payment.** Once you have cards saved to a customer, you can make both on-session or [off-session payments](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#charge-saved-payment-method).\n3.  **Build a recovery flow.** While Stripe requests exemptions to reduce the need for customer reauthentication, there is always a risk that the cardholder’s bank will reject the exemption request. You should always build a [recovery flow](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#charge-saved-payment-method) to bring a customer back on-session in case they need to authenticate again.\n\n#### Note\n\n## 3\\. Implement the new integration path ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou need to make server-side and client-side changes.\n\n### Server-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Payment Intents API](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") to create a payment. A [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) tracks the lifecycle of a customer checkout flow and triggers additional authentication steps when required by SCA.\n\nFollow the [migration guide](https://docs.stripe.com/payments/payment-intents/migration) to learn how to migrate from the Charges API to the Payment Intents API.\n\n### Client-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn order to dynamically display [3D Secure](https://docs.stripe.com/payments/3d-secure) authentication for card payments, client-side changes are also required alongside server-side changes for the Payment Intents API.\n\nFollow the guides to learn how to use the Payment Intents API with [Stripe.js & Elements](https://docs.stripe.com/payments/accept-a-payment?platform=web), [iOS](https://docs.stripe.com/payments/accept-a-payment?platform=ios), and [Android](https://docs.stripe.com/payments/accept-a-payment?platform=android).\n\n### Using Stripe Checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFollow the guides to integrate Checkout for [one-time](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) and [subscriptions](https://docs.stripe.com/billing/subscriptions/build-subscriptions).\n\n## 4\\. Test dynamic authentication ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo verify that your updated integration handles 3D Secure correctly, be sure to test both successful and unsuccessful authentication flows, using the [regulatory test cards](https://docs.stripe.com/testing#regulatory-cards).\n\nBy default, 3D Secure authentication is only shown when the customer’s bank requires it, so your checkout conversion isn’t negatively affected. As of September 14, 2019, your updated integration displays the 3D Secure authentication flow automatically whenever required by SCA.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Stripe Checkout Overview](https://docs.stripe.com/payments/checkout)\n*   [Payment Intents Overview](https://docs.stripe.com/payments/payment-intents)\n*   [Payment Intents Migration Guide](https://docs.stripe.com/payments/payment-intents/migration)",
  "title": "Update your integration for SCA | Stripe Documentation",
  "description": "Learn how to update your integration to avoid declined payments due to Strong Customer Authentication (SCA).",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/strong-customer-authentication/previous-authorization-agreements",
  "markdown": "# Previous authorization agreements | Stripe DocumentationThe Stripe Docs logo\n\n## Learn which payments previous authorization agreements can be used for (sometimes referred to as grandfathering).\n\n#### Warning\n\n## Eligibility ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") requires an additional step of customer authentication, but sometimes you collect payments when your customer isn’t actively using your application. Even if they authenticated in the past, SCA may require your customer to come back online and re-authenticate. To reduce friction in these off-session payments, Stripe APIs enable upfront authentication—so you can authenticate your customer on-session once and reuse the card off-session repeatedly. As of September 14, 2019, you need to use these APIs to reduce the chance of failed payments when [reusing cards](https://docs.stripe.com/payments/save-and-reuse) or [creating subscriptions and invoices](https://docs.stripe.com/billing/migration/strong-customer-authentication).\n\nHowever, you can use previous authorization agreements for off-session payments that meet the following criteria:\n\n*   Cards from EU customers saved before December 31, 2020\n*   Cards from UK customers saved before September 14, 2021\n\nThis means you don’t have to use Stripe’s new APIs to set up saved cards again, and your off-session payments can proceed normally—without re-authentication from customers.\n\n## How it works ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use previous authorization agreements for all off-session payments that meet both of these conditions, regardless of payment amount and frequency:\n\n*   You saved the card details before the [eligibility](#eligibility) cutoff\n*   You explicitly tell Stripe the transaction is off-session\n\nStripe automatically looks for a transaction made with the card prior to the eligibility cutoff. If found, Stripe uses the previous authorization agreement for the current transaction. If the bank accepts the previous authorization agreement, the transaction is categorized as out of scope for SCA and can proceed without additional authentication.\n\nIf the bank declines the previous authorization agreement, it’s like any other PaymentIntent failing the confirmation step. The PaymentIntent’s [status changes](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#charge-saved-payment-method) to [requires\\_payment\\_method](https://docs.stripe.com/upgrades#2019-02-11 \"requires_payment_method\"), and you have to [notify your customer to complete the payment](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#charge-saved-payment-method).\n\n## Saving cards after the eligibility period ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nNow that SCA has taken effect, [save and reuse cards](https://docs.stripe.com/payments/save-and-reuse) with the Payment Intents and [Setup Intents APIs](https://docs.stripe.com/api/setup_intents \"Setup Intents API\") to qualify for off-session exemptions. You can also save cards using [Stripe Checkout](https://docs.stripe.com/payments/save-and-reuse?platform=checkout).\n\n## Preparing your saved cards for SCA ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor Stripe to reuse authorization agreements, you need to use PaymentIntents and tell Stripe the payment is off-session.\n\nFor [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") and [invoices](https://docs.stripe.com/api/invoices \"invoices\") managed with Stripe Billing, refer to the [Billing SCA guide](https://docs.stripe.com/billing/migration/strong-customer-authentication#previous-agreements).",
  "title": "Previous authorization agreements | Stripe Documentation",
  "description": "Learn which payments previous authorization agreements can be used for (sometimes referred to as grandfathering).",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/recurring-payments",
  "markdown": "# Recurring payments | Stripe DocumentationThe Stripe Docs logo\n\n## Understand your options for charging customers on a recurring basis.\n\nStripe offers several ways to charge customers on a recurring basis. This guide helps you understand which method or approach best supports your business.\n\nThis guide offers a few ways to understand your options:\n\n*   [Use cases](#use-cases): Find the right use case for your business.\n*   [Types of recurring payments](#recurring-payment-types): See all the recurring payment types that Stripe supports.\n*   [Stripe products](#stripe-products): Check which Stripe products support your recurring payment use case.\n\n[](#recurring-payment-types)\n\nThe following tabs describe the different types of recurring payments that Stripe supports.\n\n|     |     |\n| --- | --- |\n| **Overview** | Use [Stripe Billing](https://docs.stripe.com/billing) to create and manage your subscriptions through the Dashboard or programmatically through the API.<br><br>*   [Create a payment link with a recurring product](https://docs.stripe.com/payment-links/create).<br>*   Create a subscription through the [Dashboard](https://dashboard.stripe.com/subscriptions) or [build a subscriptions integration](https://docs.stripe.com/billing/subscriptions/build-subscriptions).<br>*   Create [subscription schedules](https://docs.stripe.com/billing/subscriptions/subscription-schedules) for complex subscription use cases.<br>*   If you use Connect, [create subscriptions](https://docs.stripe.com/connect/subscriptions) for connected accounts and end customers. |\n| **Features** | *   No coding required. (You can optionally use the Subscriptions API and prebuilt components like Stripe Checkout and Elements to build a programmatic subscriptions integration.)<br>*   Customize appearance and behavior in your app.<br>*   Supports multiple products and prices in different currencies.<br>*   Supports responsive web and mobile native.<br>*   Website required. You can use Stripe Elements to customize the appearance of payment forms. |\n| **Use cases** | *   [Accept payments from customers on a recurring basis](#accept-recurring-payments)<br>*   [Accept recurring donations](#recurring-donations)<br>*   [Enable customers to manage their own subscriptions](#enable-customer-portal)<br>*   [Migrate existing subscriptions to Stripe](#migrate-subscriptions) |\n\n[](#stripe-products)\n\nThe following table describes which Stripe products support recurring payments.\n\n| Product | Features | Use cases |\n| --- | --- | --- |\n| **Payment Links** | *   No coding<br>*   Customize branding<br>*   One payment link for one or more products<br>*   Mobile support for responsive web<br>*   No website required; share link through SMS, email, or social media<br>*   [Stripe Tax](https://docs.stripe.com/tax) support | *   [Accept recurring payments](#accept-recurring-payments)<br>*   [Enable customers to manage their own subscriptions](#enable-customer-portal)<br>*   [Accept recurring donations](#recurring-donations) |\n| **Invoicing** | *   No coding required. (You can optionally use the [Invoices API](https://docs.stripe.com/api/invoices) and prebuilt components like Stripe Checkout and Elements to build a programmatic invoicing integration.)<br>*   Customize branding and templates.<br>*   One invoice for one or more products. Optionally combine one-time and recurring products.<br>*   Mobile support for responsive web.<br>*   No website required. Share invoices through customer portal, hosted invoice page, or as PDFs.<br>*   [Stripe Tax](https://docs.stripe.com/tax) support. | *   [Accept recurring payments](#accept-recurring-payments)<br>*   [Enable customers to manage their own subscriptions](#enable-customer-portal)<br>*   [Accept recurring donations](#recurring-donations) |\n| **Subscriptions** | *   No coding required. (You can optionally use the [Subscriptions API](https://docs.stripe.com/api/subscriptions) and prebuilt components like Stripe Checkout and Elements to build a programmatic subscriptions integration.)<br>*   Customize full appearance of payment forms and checkout experience.<br>*   Multiple products, prices, pricing models, and currencies.<br>*   Mobile support for responsive web.<br>*   No website required. You can also add subscriptions to your site.<br>*   [Stripe Tax](https://docs.stripe.com/tax) support. | *   [Accept recurring payments](#accept-recurring-payments)<br>*   [Enable customers to manage their own subscriptions](#enable-customer-portal)<br>*   [Accept recurring donations](#recurring-donations) |\n| **Checkout** | *   Minimal coding<br>*   Customize branding<br>*   Multiple products and prices in different currencies<br>*   Mobile support for responsive web<br>*   Website required, but Stripe hosts the payment page<br>*   [Stripe Tax](https://docs.stripe.com/tax) support | *   [Accept recurring payments](#accept-recurring-payments)<br>*   [Enable customers to manage their own subscriptions](#enable-customer-portal)<br>*   [Split purchases into a few payments](#installment-plans)<br>*   [Accept recurring donations](#recurring-donations) |\n| **Elements** | *   More coding<br>*   Customize full appearance<br>*   Multiple products and prices in different currencies<br>*   Responsive web and mobile native<br>*   Website required; you add Elements to your payment page<br>*   [Stripe Tax](https://docs.stripe.com/tax) supported with your own [tax integration](https://docs.stripe.com/tax/custom) | *   [Accept recurring payments](#accept-recurring-payments)<br>*   [Enable customers to manage their own subscriptions](#enable-customer-portal)<br>*   [Split purchases into a few payments](#installment-plans)<br>*   [Accept recurring donations](#recurring-donations) |\n| **API** | *   Most coding<br>*   Customize full appearance, accept payments through your own UI<br>*   Multiple products and prices in different currencies<br>*   Website required; accept payments through your own UI<br>*   [Stripe Tax](https://docs.stripe.com/tax) supported with your own [tax integration](https://docs.stripe.com/tax/custom) | *   [Accept recurring payments](#accept-recurring-payments)<br>*   [Enable customers to manage their own subscriptions](#enable-customer-portal)<br>*   [Split purchases into a few payments](#installment-plans)<br>*   [Accept recurring donations](#recurring-donations) |\n\n[](#enable-customer-portal)\n\nIf you want your customers to manage their own accounts and recurring subscriptions, use the customer portal. Stripe hosts the customer portal, which allows your customers to self-manage their payment details, download invoices, and manage their subscriptions in one place. Read the [no-code customer portal guide](https://docs.stripe.com/customer-management/activate-no-code-customer-portal) for complete details.\n\n[Integrate with the customer portal API](https://docs.stripe.com/customer-management/integrate-customer-portal)\n\n### Set up the customer portal![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSee what your customers can do in the customer portal\n\n[View demo](https://billing.stripe.com/customer-portal-demo)\n\n[](#recurring-donations)\n\nYou can accept recurring donations with Stripe, in the same way as recurring payments. For example, you have a llama rescue organization, Llama House, and want to allow supporters to choose an amount for a recurring, monthly donation. You can use Payment Links to create a link to share on social media and email. From the same payment link, you can also generate a QR code to add to flyers, and an embeddable buy button for your website–all from the Dashboard.\n\n### Accept recurring donations with Payment Links![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](#migrate-subscriptions)\n\nIf you have existing subscriptions in another system, you can migrate them to Stripe Billing. Read [the guide](https://docs.stripe.com/billing/subscriptions/migrate-subscriptions) for more information.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Get an overview of subscriptions](https://docs.stripe.com/billing)\n*   [Create a payment link](https://docs.stripe.com/payment-links/create)\n*   [Add an Apple Pay merchant token for recurring payments](https://docs.stripe.com/apple-pay/merchant-tokens)\n*   [Get started with no-code invoices](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Save payment details during a payment to set up future payments](https://docs.stripe.com/payments/save-during-payment)\n*   [Save card details to set up future payments](https://docs.stripe.com/payments/save-and-reuse)",
  "title": "Recurring payments | Stripe Documentation",
  "description": "Understand your options for charging customers on a recurring basis.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/strong-customer-authentication/sca-enforcement",
  "markdown": "# SCA enforcement | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how European regulators enforce Strong Customer Authentication (SCA).\n\nAlthough Europe is phasing it in unevenly, you should prepare your payment flows to be ready for SCA as soon as possible if SCA regulations impact you. Preparing for SCA helps prevent an increase in declines from European cards, and prepares you in case of early enforcement by banks. Read more about how [enforcement varies by country](https://support.stripe.com/questions/strong-customer-authentication-sca-enforcement-date).\n\n## Make sure your integration is SCA-ready![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour integration is SCA-ready when you process all of your payments volume using [SCA-ready products](https://docs.stripe.com/strong-customer-authentication#preparing). Your business must use an SCA-ready product, such as a recent version of Stripe Checkout, Billing, the [Payment Intents API](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\"), or an SCA-ready partner solution. Additionally, you should:\n\n*   Test [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") (3DS) authentication thoroughly. Use our [regulatory test cards](https://docs.stripe.com/testing#regulatory-cards) to ensure that your integration can handle 3DS.\n*   For off-session payments, make sure you set up and authenticate the card when saving the payment method, and use the API to [flag off-session payments](https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements#charge-saved-payment-method).\n*   If your business uses the Stripe Billing [Subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") or [Invoice](https://docs.stripe.com/api/invoices \"invoices\") APIs, make sure your integration can handle [incomplete statuses](https://docs.stripe.com/billing/migration/strong-customer-authentication).\n\n## Understand incomplete, declined, or failed payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPayments can be unsuccessful for a number of reasons, including incomplete, declined, or failed payments. If you look in the Dashboard and see that your payments aren’t advancing past the incomplete status (`requires_action` in the API):\n\n*   Make sure that your customer isn’t in the process of authenticating. If they’re authenticating and it’s an on-session payment, they may expect to see this. It’s also possible that they’ve abandoned the checkout flow.\n*   Check that you’re [handling next actions](https://docs.stripe.com/payments/payment-intents/verifying-status#next-actions) such as authentication—next actions failures can also cause payments to fail.\n*   For off-session payments, set [off\\_session](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-off_session) to `true` when creating the payment.\n\nBanks can decline payments that require 3DS authentication but don’t have 3DS enabled. Go to the Dashboard to see which payments were declined for this reason. For off-session payments, [filter by failed payments](https://dashboard.stripe.com/payments?status%5B%5D=failed) in the Dashboard. Hovering over the status badge highlights the decline reason (for example, authentication required). You can view on-session payments by applying the [incomplete payments filter](https://dashboard.stripe.com/payments?status%5B%5D=incomplete) and seeing if the payment is incomplete, since it requires authentication.\n\nYou may see off-session payments failing even though you think they’re exempt from SCA requirements. For off-session payments, make sure that you’re authenticating the card when saving card details, either without a payment or during a payment. When saving cards without a payment, use the Setup Intents API and set usage to `off_session`. When saving cards during a payment, set setup\\_future\\_usage to `off_session`. Finally, be aware that exemptions aren’t guaranteed and off-session payments may still require authentication by the bank.\n\n## Monitor disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen monitoring disputes, it’s important to understand the mechanics of the dispute process as it pertains to payments that have been authenticated using 3DS. Payments that 3DS successfully authenticates are covered by what’s known as a _liability shift_. If a cardholder [disputes a 3D Secure payment](https://docs.stripe.com/payments/3d-secure/authentication-flow#disputed-payments) as fraudulent, the liability shifts from you to the card issuer. If the card issuer applies exemptions, the payment isn’t authenticated through 3D Secure, and is therefore not covered by a liability shift.\n\n## Collect permission to reuse cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you set up your payment flow to properly save a card with the Payment Intents or Setup Intents API, Stripe marks any subsequent off-session payment as a [merchant-initiated transaction](https://stripe.com/guides/strong-customer-authentication#merchant-initiated-transactions-including-variable-subscriptions \"merchant-initiated transaction\") (MIT) to reduce the need to authenticate. Merchant-initiated transactions require an agreement (also known as a _mandate_) between you and your customer. Add terms to your website or application on how you plan to process payments that your customer can opt into. At a minimum, make sure that your terms cover the following:\n\n*   The customer’s permission for you to initiate a payment or a series of payments on their behalf\n*   The anticipated frequency of payments (that is, one-time or recurring)\n*   How you determine the payment amount\n\nAdd text in your checkout flow that references the terms of the payment, for example: I authorize \\[your business name\\] to send instructions to the financial institution that issued my card to take payments from my card account in accordance with the terms of my agreement with you.\n\n## Use SCA-ready Stripe plugins![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re searching for an SCA-ready plugin, refer to [Stripe Partners](https://stripe.com/partners/directory). If you want to migrate an existing Stripe plugin or developer library to support SCA, refer to the [SCA migration guide for plugins and developer libraries](https://docs.stripe.com/strong-customer-authentication/plugins).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [SCA readiness](https://docs.stripe.com/strong-customer-authentication)",
  "title": "SCA enforcement | Stripe Documentation",
  "description": "Learn how European regulators enforce Strong Customer Authentication (SCA).",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/charges-api",
  "markdown": "# Card payments on the Charges API\n\n## Card payments on the Charges APIDeprecated\n\n## Learn how to charge, save, and authenticate cards with Stripe's legacy APIs.\n\n#### Legacy API\n\nThe [Charges](https://docs.stripe.com/api/charges) and [Tokens](https://docs.stripe.com/api/tokens) APIs are legacy APIs used in older Stripe integrations to accept debit and credit card payments. Use [PaymentIntents](https://docs.stripe.com/payments/accept-a-payment) for new integrations.\n\nThe Charges API limits your ability to take advantage of Stripe features. To get the latest features, use [Stripe Checkout](https://docs.stripe.com/payments/checkout) or [migrate to the Payment Intents API](https://docs.stripe.com/payments/payment-intents/migration).\n\n## Payment flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn most cases, the PaymentIntents API offers more flexibility and integration options.\n\n| Charges API | Payment Intents API |\n| --- | --- |\n| 1.  Collect the customer’s payment information in the browser with Elements.<br>2.  Tokenize the payment information with Stripe.js.<br>3.  Perform a request to send the token to your server.<br>4.  Use the token to create a charge on your server with the desired amount and currency.<br>5.  Fulfill the customer’s order if payment is successful. | 1.  Create a PaymentIntent on your server with the desired amount and currency.<br>2.  Send the PaymentIntent’s client secret to the client side.<br>3.  Collect the customer’s payment information in the browser with Elements.<br>4.  Use Stripe.js or the mobile SDKs to handle [3D Secure](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-radar) and complete the payment on the client.<br>5.  Use webhooks to fulfill the customer’s order if the payment is successful. |\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo refund a payment via the API, create a [Refund](https://docs.stripe.com/api#create_refund) and provide the ID of the charge to be refunded.\n\n`curl https://api.stripe.com/v1/refunds \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d charge={{CHARGE_ID}}`\n\nTo refund part of a payment, provide an `amount` parameter, as an integer in cents (or the charge currency’s smallest currency unit).\n\n`curl https://api.stripe.com/v1/refunds \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d charge={{CHARGE_ID}} \\   -d amount=1000`\n\n## Apple Pay ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen your customer approves the payment, your app receives a [PKPayment](https://developer.apple.com/documentation/passkit/pkpayment) instance containing their encrypted card details by implementing the [PKPaymentAuthorizationViewControllerDelegate](https://developer.apple.com/documentation/passkit/pkpaymentauthorizationviewcontrollerdelegate) methods.\n\n1.  Use the [createTokenWithPayment](https://stripe.dev/stripe-ios/stripe-payments/Classes/STPAPIClient.html#/c:@CM@StripePayments@StripeCore@objc(cs)STPAPIClient(im)createTokenWithPayment:completion:) SDK method to turn the `PKPayment` into a Stripe `Token`\n2.  Use this `Token` to [create a charge](https://docs.stripe.com/payments/accept-a-payment-charges#ios-create-charge).\n\nCheckoutViewController.swift\n\n`extension CheckoutViewController: PKPaymentAuthorizationViewControllerDelegate {      func paymentAuthorizationViewController(_ controller: PKPaymentAuthorizationViewController, didAuthorizePayment payment: PKPayment, handler: @escaping (PKPaymentAuthorizationResult) -> Void) {         // Convert the PKPayment into a Token         STPAPIClient.shared.createToken(withPayment: payment) { token, error in               guard let token = token else {                   // Handle the error                   return               }             let tokenID = token.tokenId             // Send the token identifier to your server to create a Charge...             // If the server responds successfully, set self.paymentSucceeded to YES         }     }      func paymentAuthorizationViewControllerDidFinish(_ controller: PKPaymentAuthorizationViewController) {`\n\n## Dynamic statement descriptor![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, your Stripe account’s [statement descriptor](https://docs.stripe.com/get-started/account/activate#public-business-information) appears on customer statements whenever you charge their card. Additionally, you can set the statement descriptor dynamically on every charge request with the `statement_descriptor` argument on the Charge object.\n\n`curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=999 \\   -d \"currency\"=\"usd\" \\   -d \"description\"=\"Example charge\" \\   -d \"source\"=\"tok_visa\" \\   -d \"statement_descriptor\"=\"Custom descriptor\"`\n\nStatement descriptors are limited to 22 characters, can’t use the special characters `<`, `>`, `'`, `\"`, or `*`, and must not consist solely of numbers.\n\nWhen setting the statement descriptor dynamically on credit and debit card charges, the dynamic portion is appended to the settlement merchant’s statement descriptor (separated by an `*` and an empty space). For example, a statement descriptor for a business, named FreeCookies, that includes the kind of cookie purchased might look like `FREECOOKIES* SUGAR`.\n\nThe `*` and empty space count towards the 22 character limit and Stripe automatically allots 10 characters for the dynamic statement descriptor. This means that the settlement merchant’s descriptor might be truncated if it’s longer than 10 characters (assuming the dynamic statement descriptor is also greater than 10 characters). If the dynamic statement descriptor is also greater than 10 characters, both descriptors are truncated at 10 characters.\n\nIf you’re having issues with the character limits, you can set a [shortened descriptor](https://dashboard.stripe.com/settings/public) in the Stripe Dashboard to shorten the settlement merchant’s descriptor. This allows more room for the dynamic statement descriptor. The shortened descriptor:\n\n*   Replaces the settlement merchant’s statement descriptor when using dynamic descriptors.\n*   Can be between 2 and 10 characters.\n\n#### Note\n\nIf your account’s statement descriptor is longer than 10 characters, set a [shortened descriptor](https://dashboard.stripe.com/settings/public) in the Dashboard or use `statement_descriptor_prefix`. This prevents your statement descriptor from being truncated in unpredictable ways.\n\nIf you’re not sure what the statement descriptors look like when they’re combined, you can check them in the [Stripe Dashboard](https://dashboard.stripe.com/settings/public).\n\nStripe supports adding [metadata](https://docs.stripe.com/api#metadata) to the most common requests you make, such as processing charges. Metadata isn’t shown to customers or factored into whether or not a charge is declined or blocked by our fraud prevention system.\n\nThrough metadata, you can associate other information—meaningful to you—with Stripe activity. Any metadata you include is viewable in the Dashboard (for example, when looking at the page for an individual charge), and is also available in common reports and exports. As an example, your store’s order ID can be attached to the charge used to pay for that order. Doing so allows you, your accountant, or your finance team to easily reconcile charges in Stripe to orders in your system.\n\nIf you are using [Radar](https://docs.stripe.com/radar \"Radar\"), consider passing any additional customer information and order information as metadata. By doing so, you can write [Radar rules using metadata attributes](https://docs.stripe.com/radar/rules/reference#metadata-attributes) and have more information about the payment available within the Dashboard which can expedite your review process.\n\n`curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=999 \\   -d \"currency\"=\"usd\" \\   -d \"description\"=\"Example charge\" \\   -d \"source\"=\"tok_visa\" \\   -d \"metadata[order_id]\"=6735`\n\n#### Caution\n\nDon’t store any sensitive information (personally identifiable information, card details, and so on) as metadata or in the charge’s `description` parameter.\n\n## Declines![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you want your integration to respond to payment failures automatically, you can access a charge’s `outcome` in two ways.\n\n*   [Handle the API error](https://docs.stripe.com/api#error_handling) that’s returned when a payment fails. For blocked and card issuer-declined payments, the error includes the charge’s ID, which you can then use to [retrieve](https://docs.stripe.com/api#retrieve_charge) the charge.\n*   Use [webhooks](https://docs.stripe.com/webhooks) to monitor status updates. For example, the `charge.failed` event triggers when a payment is unsuccessful.",
  "title": "Card payments on the Charges API | Stripe Documentation",
  "description": "Learn how to charge, save, and authenticate cards with Stripe's legacy APIs.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/india-recurring-payments",
  "markdown": "# India recurring payments | Stripe DocumentationThe Stripe Docs logo\n\n## India recurring paymentsBeta\n\n## Learn how to update an integration to support RBI e-mandates.\n\nThe Reserve Bank of India (RBI) issued a [directive](https://www.rbi.org.in/Scripts/NotificationUser.aspx?Id=11668) (amended subsequently in [December 2020](https://www.rbi.org.in/Scripts/NotificationUser.aspx?Id=12002) and [March 2021](https://www.rbi.org.in/Scripts/NotificationUser.aspx?Id=12051&Mode=0)) that introduces additional security measures for recurring payments on India issued cards. These measures include:\n\n*   Banks need to register cardholders and create an e-mandate through a one-time process, using additional factor authentication (AFA) like [3D Secure (3DS)](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\").\n*   Banks must alert cardholders at least 24 hours before charges take place and give them the ability to opt out of transactions.\n*   Recurring transactions over 15,000 INR (or equivalent in other currencies) must go through AFA each time.\n\nIf you’re an India-based Stripe user or an international (non-IN) Stripe user, your business is impacted if you have customers who use India cards for:\n\n*   Off-session payments\n*   Subscriptions or Invoices where the `collection_method` is set to `charge_automatically`\n\n## How payments work with an e-mandate ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe has worked with a partner platform to support registering e-mandates and issuing pre-debit notifications to customers.\n\n#### Note\n\nWe don’t currently offer the use of e-mandates to Stripe users in Mexico and Japan.\n\nDepending on how you’ve integrated with Stripe, you might need to send Stripe additional information to set up a mandate. The customer must go through AFA (3DS) to register the mandate.\n\nSubsequent off-session payments or auto-debits for a Subscription undergo a significant change. Customers need to receive a pre-debit notification at least 24 hours before the actual payment with the exact debit amount mentioned. The pre-debit notification contains information about the payment and an option to cancel the mandate. If the payment amount is above 15,000 INR or the mandate’s maximum amount, the pre-debit notification contains a link to perform AFA (3DS) to authorize the payment.\n\nBecause Stripe is integrating with a partner platform, we wait 26 hours before charging the customer after receiving a payment request (we add a buffer for possible downstream issues, which necessitates the 26 hours advance notification). This means that Stripe delays collecting payment by 26 hours.\n\nWithout a mandate for an off-session payment, the payment will be declined.\n\n## Integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe RBI regulations impact Subscriptions that use `collection_method=charge_automatically` to charge India issued cards.\n\n### Subscription creation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen creating a new Subscription with the API,\n\n*   If you have a default payment method set, the Subscription uses the latest SetupIntent on the payment method, and attempts to find a corresponding mandate.\n*   If no mandate is in place, Stripe automatically attempts to create one even if you don’t pass in the relevant parameters in [mandate\\_options](https://docs.stripe.com/api/subscriptions/create#create_subscription-payment_settings-payment_method_options-card-mandate_options). The customer then needs to authenticate the payment.\n\nTo learn how to create a new Subscription, see [Build a subscriptions integration](https://docs.stripe.com/billing/subscriptions/build-subscriptions).\n\n### Subscription Revenue Recovery ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe provides a number of automated recovery features to help collect payments that might’ve been unsuccessful. If you want to handle these payment failures on your own, refer to [Build your own handling for recurring charge failures](https://docs.stripe.com/billing/subscriptions/overview#build-your-own-handling-for-recurring-charge-failures) for guidance. Otherwise, some recommendations are listed below.\n\n#### Note\n\nPayments from India issued cards are attempted only once. This behavior is independent of your payment retry settings. If the payment from an India issued card fails, your Subscription and Invoice status will still be updated based on what you configured in your [Subscriptions and emails settings](https://dashboard.stripe.com/settings/billing/automatic) for “If all retries for a payment fail”.\n\n#### 3D Secure emails ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf a mandate doesn’t exist on the default payment method during Subscription renewals or updates, Stripe attempts to create a new one. To register the mandate, the customer needs to complete AFA (3DS). Enable the [Subscriptions and emails settings](https://dashboard.stripe.com/settings/billing/automatic) to `Send a Stripe-hosted link for customers to confirm their payments when required` so that customers can be brought back on-session to complete authentication if required.\n\n#### Note\n\nStripe doesn’t attempt to create a new mandate if the current mandate used by the Subscription is `inactive`.\n\n#### Manage failed payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe recommend enabling notifications to your customers if their Subscription payments fail and their Subscription is paused. Stripe can send emails to customers to update failed card payment methods if you enable it in the [Subscriptions and emails settings](https://dashboard.stripe.com/settings/billing/automatic).\n\n### Mandate creation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you rely on Stripe to automatically create the mandate, the mandate details are returned in the Invoice’s underlying PaymentIntent and corresponding Charge, or the SetupIntent if you’re creating the Subscription with a trial.\n\nStripe doesn’t return a mandate ID if any of the following is true:\n\n*   A card isn’t an India issued card.\n*   The currency for the mandate isn’t supported by either the issuer or for the Stripe account’s country.\n*   The India issued card is neither Visa nor Mastercard. Stripe only supports mandates for these two card brands.\n\nStripe supports INR mandates for all businesses. The following currencies are supported only for international (non-IN) businesses:\n\n*   USD\n*   EUR\n*   GBP\n*   SGD\n*   CAD\n*   CHF\n*   SEK\n*   AED\n*   JPY\n*   NOK\n*   MYR\n*   HKD\n\nThere are over 100 issuing banks in India and the process of fully adapting to the new requirements is expected to take some time. An issuer might not support e-mandates for a particular currency yet. If so, Stripe doesn’t return a mandate ID.\n\n### Mandate status and troubleshooting ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf Stripe can’t create a mandate, you can suggest using a different card, or you can offer alternative options such as setting [collection\\_method](https://docs.stripe.com/api/subscriptions/object#subscription_object-collection_method) as `send_invoice` for the Subscription instead.\n\nAlso, a previously active mandate can become inactive, for instance if the customer cancels it. In that case, the mandate becomes `inactive` and Stripe sends a `mandate.updated` event.\n\nFor more information on receiving webhooks, see [Steps to receive webhooks](https://docs.stripe.com/webhooks#webhooks-summary).\n\n### Subscription updates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe pre-debit notification that the bank sends tells the cardholder, at minimum, about the name of the business, the transaction amount, the date or time of the debit, the reference number of the mandate, and the reason for debit. Make sure that your mandate details match what you’re actually debiting the customer for to avoid confusion or declines.\n\nIf you depend on Stripe to automatically create mandates for your Subscription and want to update a Subscription, we recommend that you bring the customer back on-session to cancel the original Subscription. Doing so creates a new subscription in the following scenarios, and creates a new mandate that reflects the Subscription details accurately:\n\n*   Changes to the billing interval of a Subscription\n*   Upgrades to a Subscription where the customer wants to avoid having to authorize the payment each renewal. For context, Stripe creates the mandate with `amount_type=maximum` by default. A customer can still be charged more than the maximum amount with `amount_type=maximum`. However, the customer must authorize payments for amounts more than the `mandate_options[amount]` or 15,000 INR (whichever is less).\n\nExamples:\n\n*   If you have `amount_type=maximum` , `amount=100000`, the customer would need to authenticate for amounts over 1,000 INR.\n*   If you have `amount=2000000`, the customer would need to authenticate for amounts over 15,000 INR.\n\n### Pre-debit notification ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen the off-session PaymentIntent is [confirmed](https://docs.stripe.com/api/payment_intents/confirm), the issuing bank sends the customer the pre-debit notification. The PaymentIntent transitions to a `processing` state for the entire duration of the pre-debit notification period (26 hours) and can’t be canceled.\n\n`{   \"object\": \"payment_intent\",   ...   \"processing\": {     \"card\": {       \"customer_notification\": {         \"approval_requested\": true,         \"completes_at\": 1677307005       }     },     \"type\": \"card\"   },   ...   \"status\": \"processing\",   ... }`\n\nIf [processing.card.customer\\_notification.approval\\_requested](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-processing-card-customer_notification-approval_requested) is `true`, the customer needs to authenticate the payment using the pre-debit notification sent to them by the issuing bank.\n\nThe [processing.card.customer\\_notification.completes\\_at](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-processing-card-customer_notification-completes_at) attribute specifies the time that the Stripe attempts to charge the card. If successfully processing the payment requires customer approval, they need to authenticate the payment by the specified time.\n\n### Error and decline codes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe return error [codes](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-last_payment_error-decline_code) for the following scenarios:\n\n| Error code | Description |\n| --- | --- |\n| `payment_intent_mandate_invalid` | Attempting a recurring payment using an inactive mandate returns this code. You can prevent this by checking the mandate status before attempting to charge. |\n| `india_recurring_payment_mandate_canceled` | Attempting a recurring payment using a canceled mandate returns this code. This can happen when we only learn that a mandate has been canceled at this point. |\n| `processing_error` | Discovery of a (usually transient) processing error returns this code. |\n\nIn the context of e-mandates, certain [decline codes](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-last_payment_error-decline_code) have potentially more specific explanations than [in general scenarios](https://docs.stripe.com/declines/codes):\n\n| Decline code | Description |\n| --- | --- |\n| `transaction_not_approved` | Attempting a subsequent payment when the customer has paused permissions to auto-debit, or doesn’t authenticate the payment when it’s required returns this code. |\n\n## Testing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use these test card numbers to simulate different scenarios.\n\nIn test mode, it takes approximately 15 minutes for an off-session PaymentIntent to transition out of the `processing` state. The on-session PaymentIntent for an initial payment never enters the `processing` state.\n\n| Test card number | Scenario |\n| --- | --- |\n|     | Simulates successful mandate setup and renewals. |\n|     | Simulates a cardholder receiving a pre-debit notification for an off-session payment either canceling or pausing the payment for a mandate of any amount. |\n|     | Simulates the issuing bank’s failure to send a pre-debit notification to the cardholder during off-session payment for a mandate of any amount. |\n|     | Simulates a cardholder canceling a mandate of any amount. |\n\n## Limitations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nKeep in mind the following limitations:\n\n*   Stripe attempts to automatically create mandates only on Subscriptions created after October 1, 2021. If you have a Subscription created before then, cancel and create a new Subscription to make sure a mandate is created.\n*   You can’t create a mandate using the [Charges](https://docs.stripe.com/api/charges) and [Sources](https://docs.stripe.com/api/sources) APIs.\n*   You can’t pass an existing mandate to a Subscription.\n*   You can’t cancel or update a mandate.",
  "title": "India recurring payments | Stripe Documentation",
  "description": "Learn how to update an integration to support RBI e-mandates.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/strong-customer-authentication/connect-platforms",
  "markdown": "# SCA migration guide for Connect platforms\n\n## Learn how to update your Connect platform for Strong Customer Authentication (SCA).\n\n[Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") applies to businesses based in the [European Economic Area](https://en.wikipedia.org/wiki/European_Economic_Area \"European Economic Area\") (EEA) that accept online payments from customers located in the EEA. Many card payments require additional authentication through [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\"). As of September 14, 2019, transactions that don’t follow the new authentication guidelines may be declined by a customer’s bank.\n\nYou need to update your platform if you create any of the following charges:\n\n*   [Direct charges](https://docs.stripe.com/connect/direct-charges) on a connected account based in the EEA.\n*   [Destination charges](https://docs.stripe.com/connect/destination-charges) if the `on_behalf_of` parameter is set and specifies a connected account based in the EEA.\n*   [Separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers) if your platform is based in the EEA or if the `on_behalf_of` parameter is set and specifies a connected account based in the EEA.\n\n[\n\n## Choose an SCA-ready integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#choose-integration)\n\nYou need to update your Stripe integration to meet SCA requirements. For example, SCA requires off-session payments to be authenticated when customers enter payment details, and subsequent off-session payments may require notifying the customer to return to the application to re-authenticate. Refer to the [SCA migration guide](https://docs.stripe.com/strong-customer-authentication/migration#step-1) to review the integration paths for Stripe Checkout, Stripe Billing, and the [Payment Intents API](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\").\n\nChoose [Stripe Checkout](https://docs.stripe.com/payments/checkout) if it supports the features your integration requires. Checkout is a hosted payment page that can be branded by businesses, supports recurring [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"), and is the easiest way to provide SCA support to your connected accounts. It supports creating [direct charges](https://docs.stripe.com/connect/direct-charges) and [destination charges](https://docs.stripe.com/connect/destination-charges) for [Connect](https://docs.stripe.com/connect \"Connect\").\n\nIf you want to build a custom payments experience, use the [Payment Intents API](https://docs.stripe.com/payments/payment-intents) as the legacy Charges API isn’t SCA-ready. The Payment Intents API supports the same set of Connect features as the Charges API.\n\n[\n\n## Examine Connect-specific changes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#examine-connect-specific-changes)\n\n### Destination charge changes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re using the `destination`, `destination[account]`, or `destination[amount]` parameters with the Charges API, note that these parameters have been replaced with `transfer_data[destination]` and `transfer_data[amount]` in both the Charges and the Payment Intents APIs. See the following table for more information.\n\n| Use case | Charges API | Payment Intents API |\n| --- | --- | --- |\n| Your platform is the merchant of record, but you wish to create a transfer to a connected account after the payment completes | Not possible | Set [transfer\\_data\\[destination\\]](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-transfer_data-destination) to the connected account’s ID |\n| You want your connected account to be the settlement merchant _without_ creating a separate transfer after the payment completes | Set `on_behalf_of` to the connected account’s ID | No change |\n| You want your connected account to be the settlement merchant _and_ you wish to create a transfer to that account after the payment completes | Set `destination` or `destination[account]` to the connected account’s ID | Set [transfer\\_data\\[destination\\]](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-transfer_data-destination) and [on\\_behalf\\_of](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-on_behalf_of) to the connected account’s ID |\n| You wish to collect an application fee | Set `application_fee` to the amount desired | Set [application\\_fee\\_amount](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-application_fee_amount) to the amount desired |\n| You wish to transfer a partial amount to your connected account after the payment completes | Set `destination[amount]` to the amount to transfer | Set [transfer\\_data\\[amount\\]](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-transfer_data) to the amount to transfer |\n\n### 3D Secure and Radar rules ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Checkout and the Payment Intents API triggers [dynamic 3D Secure authentication](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-radar) based on [Radar rules](https://docs.stripe.com/radar/rules). With Connect, the rules you create only apply to payments created on the platform account. Payments [created directly on the connected account](https://docs.stripe.com/connect/direct-charges) are subject to the connected account’s rules. Configure your default rules and test your integration with [3D Secure test cards](https://docs.stripe.com/payments/3d-secure/authentication-flow#three-ds-cards).\n\n### SCA impact on saving payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUnder SCA, authentication is required when saving a card in order to collect customer permission and qualify for [off-session exemptions](https://stripe.com/guides/strong-customer-authentication#merchant-initiated-transactions-including-variable-subscriptions) for subsequent off-session payments. To reduce the rate of customers having to authenticate their payment method, [update your integration to use the off-session API](https://docs.stripe.com/strong-customer-authentication/migration#recurring).\n\nIf you [clone saved payment methods](https://docs.stripe.com/connect/cloning-customers-across-accounts) to reuse across multiple connected accounts, note that sharing a payment method with a connected account automatically shares customer permission as well. This allows the platform to make off-session payments on any of their connected accounts without requiring the customer to authenticate their payment method again.\n\n[\n\n## Determine whether connected accounts need to make changes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#connected-account-changes)\n\nIn most cases, once you update your payments integration for SCA, your connected accounts don’t have to do any additional work.\n\nIf you provide your own payments API to your connected accounts in addition to or on top of Stripe’s API, your connected accounts may need to make changes to continue accepting payments on your platform. For example, if you run a subscriptions platform on Stripe in which your connected accounts pass payment information to you via your own API, and then you pass those payment details to Stripe’s API, you’ll need to ensure both APIs are SCA-ready. If this is the case for your platform, provide guidance to your connected accounts on any changes they need to make.\n\n[\n\n## Educate your connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#educate)\n\nFinally, inform your connected accounts about how SCA can affect them and when your platform will be SCA-ready, regardless of whether they need to [make any changes](#implement-changes).\n\nIn particular, provide them with the following information, tailored for your business:\n\nStrong [Customer](https://docs.stripe.com/api/customers \"Customers\") Authentication (SCA) is a new European regulatory requirement to reduce fraud and make online payments more secure. Since SCA took effect September 14, 2019, online payments require additional customer authentication. Transactions that don’t adhere to the new guidelines may be declined by your customers’ banks. This regulation applies to transactions where both the business and the cardholder’s bank are located in the European Economic Area (EEA).\n\nIf you’d like, you can also send along the [SCA video](https://stripe.com/payments/strong-customer-authentication) and [guide](https://stripe.com/guides/strong-customer-authentication).\n\n### How your platform should support SCA ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re not migrating to an SCA-ready solution, reach out to any of your connected accounts with significant business from European customers so they can move to a new solution before experiencing declines due to SCA.\n\n### Any actions your connected accounts need to take ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf no action is required on their end, let your connected accounts know. Similarly, if action is required, provide them with instructions on the necessary changes.\n\n### How SCA can affect their business ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSCA changes the checkout flow for card payments. Payments that require authentication ask for [3D Secure](https://docs.stripe.com/payments/3d-secure) (often known by its brand names, “Verified by Visa” or “Mastercard SecureCode”), which typically adds an extra step in which the cardholder must provide additional information, such as a one-time passcode or biometric ID.",
  "title": "SCA migration guide for Connect platforms | Stripe Documentation",
  "description": "Learn how to update your Connect platform for Strong Customer Authentication (SCA).",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/satispay",
  "markdown": "# Satispay payments | Stripe DocumentationThe Stripe Docs logo\n\n## Satispay paymentsBeta\n\n## Learn how to accept payments with Satispay, a digital wallet popular with Italian customers.\n\n[Satispay](https://satispay.com/) is a stored value wallet payment method available to businesses in Italy.\n\nWhen customers select Satispay as their payment method, Stripe redirects them to Satispay’s website to finish the transaction. You’re paid immediately.\n\n*   **Customer locations**\n    \n    Italy\n    \n*   **Presentment currency**\n    \n    EUR\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Wallet\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    Standard\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    Yes\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Satispay and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Satispay. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Satispay from the Dashboard:\n\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf your integration requires manually listing payment methods, learn how to [manually configure Satispay as a payment](https://docs.stripe.com/payments/satispay/accept-a-payment).\n\n## Prohibited and restricted business categories![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the categories of goods or services sold and businesses [restricted from using Stripe overall](https://stripe.com/restricted-businesses), the following categories are prohibited from using Satispay:\n\n*   Wire transfers and money orders\n*   Pawn shops\n*   Door-to-door sales\n*   Direct marketing\n*   Direct marketing — outbound telemarketing merchants\n*   Financial institutions — merchandise and services\n*   Non-Financial Institutions – Foreign Currency, Non-Fiat Currency Liquid and Cryptocurrency Assets, Money Orders (Not Money Transfer)\n*   Securities — brokers and dealers\n*   Counselling services — debt, marriage and personal\n*   Consumer credit reporting agencies\n*   Employment agencies and temporary help services\n*   Detective agencies, protective agencies and security services, including armoured cars and guard dogs\n*   Betting, including lottery tickets, casino gaming chips, off-track betting and wagers at race tracks\n*   Charitable and social service organizations\n*   Civic, social and fraternal associations\n*   Political organizations\n*   Religious organizations\n*   Automobile associations\n*   Membership organization — not elsewhere classified\n*   Court costs, including alimony and child support\n*   Government services — not elsewhere classified\n*   Nightclubs and Discotheques\n*   Weapons and Military Equipments\n*   CBD - hemp shops\n\n[](#refunds)\n\nSatispay supports full and partial refunds. The refund period is up to 180 days after the purchase. Refunds for Satispay payments are asynchronous and take up to 5 minutes to complete. We’ll notify you of the final refund status using the `charge.refund.updated` [webhook](https://docs.stripe.com/webhooks \"webhook\") event. When a refund succeeds, the [Refund](https://docs.stripe.com/api/refunds/object) object’s status transitions to `succeeded`. In the rare instance that a refund fails, the Refund object’s status transitions to `failed` and we return the amount to your Stripe balance. You then need to arrange an alternative way of providing your customer with a refund.\n\n## Supported currencies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can create Satispay payments in the currencies that map to your country. The default local currency for Satispay is `eur` and customers also see their purchase amount in `eur`.",
  "title": "Satispay payments | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/flexible-payments",
  "markdown": "# Flexible payment scenarios | Stripe DocumentationThe Stripe Docs logo\n\n## Support complex payment flows through flexible and customizable acquiring features.\n\nStripe’s payment acquiring features provide the flexibility needed to manage complex payment scenarios, such as capturing funds as you fulfill shipments or incrementing an authorization amount when order details change.\n\nThe functionality highlighted below is available to all users on [IC+ pricing](https://support.stripe.com/questions/understanding-blended-interchange-pricing \"IC+\").",
  "title": "Flexible payment scenarios | Stripe Documentation",
  "description": "Support complex payment flows through flexible and customizable acquiring features.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/build-a-two-step-confirmation",
  "markdown": "# Build two-step confirmation | Stripe DocumentationThe Stripe Docs logo\n\nYou’re ready to collect payment details on the client with the Payment Element. The Payment Element is a prebuilt UI component that simplifies collecting payment details for a variety of payment methods.\n\nThe Payment Element contains an iframe that securely sends payment information to Stripe over an HTTPS connection. Avoid placing the Payment Element within another iframe because some payment methods require redirecting to another page for payment confirmation.\n\nThe checkout page address must start with `https://` rather than `http://` for your integration to work. You can test your integration without using HTTPS, but remember to [enable it](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\n### Set up Stripe.js![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element is automatically available as a feature of Stripe.js. Include the Stripe.js script on your checkout page by adding it to the `head` of your HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI compliant. Don’t include the script in a bundle or host a copy of it yourself.\n\nCreate an instance of Stripe with the following JavaScript on your checkout page:\n\n`// Set your publishable key: remember to change this to your live publishable key in production // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\n### Add the Payment Element to your checkout page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element needs a place to live on your checkout page. Create an empty DOM node (container) with a unique ID in your payment form:\n\n`<form id=\"payment-form\">   <div id=\"payment-element\">     <!-- Elements will create form elements here -->   </div>   <button id=\"submit\">Submit</button>   <div id=\"error-message\">     <!-- Display error message to your customers here -->   </div> </form>`\n\nWhen the form above has loaded, create an Elements instance with the mode, amount, and currency. These values determine which payment methods are shown to your customer.\n\nThen, create an instance of the Payment Element and mount it to the container DOM node.\n\n`const options = {   mode: 'payment',   amount: 1099,   currency: 'usd',   paymentMethodCreation: 'manual',   // Fully customizable with appearance API.   appearance: {/*...*/}, };  // Set up Stripe.js and Elements to use in checkout form const elements = stripe.elements(options);  // Create and mount the Payment Element const paymentElement = elements.create('payment'); paymentElement.mount('#payment-element');`\n\nThe Payment Element renders a dynamic form that allows your customer to pick a payment method. The form automatically collects all necessary payments details for the payment method selected by the customer.\n\nYou can customize the Payment Element to match the design of your site by passing the [appearance object](https://docs.stripe.com/elements/appearance-api) into `options` when creating the `Elements` provider.\n\n### Collect addresses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, the Payment Element only collects the necessary billing address details. To collect a customer’s full billing address (to calculate the tax for digital goods and services, for example) or shipping address, use the [Address Element](https://docs.stripe.com/elements/address-element).",
  "title": "Build two-step confirmation | Stripe Documentation",
  "description": "Add an optional review page or run validations after a user enters their payment details.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/accept-a-payment-deferred",
  "markdown": "# Collect payment details before creating an Intent\n\nThe Payment Element allows you to accept multiple payment methods using a single integration. In this integration, learn how to build a custom payment flow where you render the Payment Element, create the [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\"), and confirm the payment from the buyer’s browser. If you prefer to confirm the payment from the server instead, see [Finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server).\n\n[](#set-up-stripe)\n\nFirst, [create a Stripe account](https://dashboard.stripe.com/register) or [sign in](https://dashboard.stripe.com/login).\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#enable-payment-methods)\n\n#### Caution\n\nThis integration path doesn’t support BLIK or pre-authorized debits that use the Automated Clearing Settlement System (ACSS).\n\nView your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) and enable the payment methods you want to support. You need at least one payment method enabled to create a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\").\n\nBy default, Stripe enables cards and other prevalent payment methods that can help you reach more customers, but we recommend turning on additional payment methods that are relevant for your business and customers. See [Payment method integration options](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) for product and payment method support, and our [pricing page](https://stripe.com/pricing/local-payment-methods) for fees.\n\n[](#web-collect-payment-details)\n\nYou’re ready to collect payment details on the client with the Payment Element. The Payment Element is a prebuilt UI component that simplifies collecting payment details for a variety of payment methods.\n\nThe Payment Element contains an iframe that securely sends payment information to Stripe over an HTTPS connection. Avoid placing the Payment Element within another iframe because some payment methods require redirecting to another page for payment confirmation.\n\nThe checkout page address must start with `https://` rather than `http://` for your integration to work. You can test your integration without using HTTPS, but remember to [enable it](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\n### Set up Stripe.js![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element is automatically available as a feature of Stripe.js. Include the Stripe.js script on your checkout page by adding it to the `head` of your HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI compliant. Don’t include the script in a bundle or host a copy of it yourself.\n\nCreate an instance of Stripe with the following JavaScript on your checkout page:\n\n`// Set your publishable key: remember to change this to your live publishable key in production // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\n### Add the Payment Element to your checkout page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element needs a place to live on your checkout page. Create an empty DOM node (container) with a unique ID in your payment form:\n\n`<form id=\"payment-form\">   <div id=\"payment-element\">     <!-- Elements will create form elements here -->   </div>   <button id=\"submit\">Submit</button>   <div id=\"error-message\">     <!-- Display error message to your customers here -->   </div> </form>`\n\nWhen the form above has loaded, create an Elements instance with the mode, amount, and currency. These values determine which payment methods are shown to your customer.\n\nThen, create an instance of the Payment Element and mount it to the container DOM node.\n\n`const options = {   mode: 'payment',   amount: 1099,   currency: 'usd',   // Fully customizable with appearance API.   appearance: {/*...*/}, };  // Set up Stripe.js and Elements to use in checkout form const elements = stripe.elements(options);  // Create and mount the Payment Element const paymentElement = elements.create('payment'); paymentElement.mount('#payment-element');`\n\nThe Payment Element renders a dynamic form that allows your customer to pick a payment method. The form automatically collects all necessary payments details for the payment method selected by the customer.\n\nYou can customize the Payment Element to match the design of your site by passing the [appearance object](https://docs.stripe.com/elements/appearance-api) into `options` when creating the `Elements` provider.\n\n### Collect addresses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, the Payment Element only collects the necessary billing address details. To collect a customer’s full billing address (to calculate the tax for digital goods and services, for example) or shipping address, use the [Address Element](https://docs.stripe.com/elements/address-element).\n\n[](#create-intent)\n\n#### Run custom business logic immediately before payment confirmation\n\nNavigate to [step 5](https://docs.stripe.com/payments/finalize-payments-on-the-server?platform=web&type=payment#submit-payment) in the finalize payments guide to run your custom business logic immediately before payment confirmation. Otherwise, follow the steps below for a simpler integration, which uses `stripe.confirmPayment` on the client to both confirm the payment and handle any next actions.\n\nWhen the customer submits your payment form, use a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") to facilitate the confirmation and payment process. Create a PaymentIntent on your server with an `amount` and `currency` enabled. In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default. You can manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow. To prevent malicious customers from choosing their own prices, always decide how much to charge on the server-side (a trusted environment) and not the client.\n\nIncluded on a PaymentIntent is a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\"). Return this value to your client for Stripe.js to use to securely complete the payment process.\n\n`require 'stripe' Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n``post '/create-intent' do   intent = Stripe::PaymentIntent.create({     # In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default.     automatic_payment_methods: {enabled: true},     amount: 1099,     currency: 'usd',   })   {client_secret: intent.client_secret}.to_json end``\n\n[](#submit-the-payment)\n\nUse [stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment) to complete the payment using details from the Payment Element.\n\nProvide a [return\\_url](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-return_url) to this function to indicate where Stripe should redirect the user after they complete the payment. Your user might be initially redirected to an intermediate site, like a bank authorization page, before being redirected to the `return_url`. Card payments immediately redirect to the `return_url` when a payment is successful.\n\nIf you don’t want to redirect for card payments after payment completion, you can set [redirect](https://docs.stripe.com/js/payment_intents/confirm_payment#confirm_payment_intent-options-redirect) to `if_required`. This only redirects customers that check out with redirect-based payment methods.\n\n``const form = document.getElementById('payment-form'); const submitBtn = document.getElementById('submit');  const handleError = (error) => {   const messageContainer = document.querySelector('#error-message');   messageContainer.textContent = error.message;   submitBtn.disabled = false; }  form.addEventListener('submit', async (event) => {   // We don't want to let default form submission happen here,   // which would refresh the page.   event.preventDefault();    // Prevent multiple form submissions   if (submitBtn.disabled) {     return;   }    // Disable form submission while loading   submitBtn.disabled = true;    // Trigger form validation and wallet collection   const {error: submitError} = await elements.submit();   if (submitError) {     handleError(submitError);     return;   }    // Create the PaymentIntent and obtain clientSecret   const res = await fetch(\"/create-intent\", {     method: \"POST\",   });    const {client_secret: clientSecret} = await res.json();    // Confirm the PaymentIntent using the details collected by the Payment Element   const {error} = await stripe.confirmPayment({     elements,     clientSecret,     confirmParams: {       return_url: '[https://example.com/order/123/complete](https://example.com/order/123/complete)',     },   });    if (error) {     // This point is only reached if there's an immediate error when     // confirming the payment. Show the error to your customer (for example, payment details incomplete)     handleError(error);   } else {     // Your customer is redirected to your `return_url`. For some payment     // methods like iDEAL, your customer is redirected to an intermediate     // site first to authorize the payment, then redirected to the `return_url`.   } });``",
  "title": "Collect payment details before creating an Intent | Stripe Documentation",
  "description": "Build an integration where you can render the Payment Element prior to creating a PaymentIntent or SetupIntent.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/finalize-payments-on-the-server",
  "markdown": "# Finalize payments on the server\n\n## Build an integration where you render the Payment Element before you create a PaymentIntent or SetupIntent, then confirm the Intent from your server.\n\nThe Payment Element allows you to accept multiple payment methods using a single integration. This integration builds a custom payment flow where you render the Payment Element, create the [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\"), and confirm the payment from your server.\n\n[](#set-up-stripe)\n\nFirst, [create a Stripe account](https://dashboard.stripe.com/register) or [sign in](https://dashboard.stripe.com/login).\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#enable-payment-methods)\n\n#### Caution\n\nThis integration path doesn’t support BLIK or pre-authorized debits that use the Automated Clearing Settlement System (ACSS).\n\nView your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) and enable the payment methods you want to support. You need at least one payment method enabled to create a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\").\n\nBy default, Stripe enables cards and other prevalent payment methods that can help you reach more customers, but we recommend turning on additional payment methods that are relevant for your business and customers. See [Payment method integration options](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) for product and payment method support, and our [pricing page](https://stripe.com/pricing/local-payment-methods) for fees.\n\n[](#web-collect-payment-details)\n\nYou’re ready to collect payment details on the client with the Payment Element. The Payment Element is a prebuilt UI component that simplifies collecting payment details for a variety of payment methods.\n\nThe Payment Element contains an iframe that securely sends payment information to Stripe over an HTTPS connection. Avoid placing the Payment Element within another iframe because some payment methods require redirecting to another page for payment confirmation.\n\nThe checkout page address must start with `https://` rather than `http://` for your integration to work. You can test your integration without using HTTPS, but remember to [enable it](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\n### Set up Stripe.js![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element is automatically available as a feature of Stripe.js. Include the Stripe.js script on your checkout page by adding it to the `head` of your HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI compliant. Don’t include the script in a bundle or host a copy of it yourself.\n\nCreate an instance of Stripe with the following JavaScript on your checkout page:\n\n`// Set your publishable key: remember to change this to your live publishable key in production // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\n### Add the Payment Element to your checkout page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element needs a place to live on your checkout page. Create an empty DOM node (container) with a unique ID in your payment form:\n\n`<form id=\"payment-form\">   <div id=\"payment-element\">     <!-- Elements will create form elements here -->   </div>   <button id=\"submit\">Submit</button>   <div id=\"error-message\">     <!-- Display error message to your customers here -->   </div> </form>`\n\nWhen the form above has loaded, create an Elements instance with the mode, amount, and currency. These values determine which payment methods are shown to your customer.\n\nThen, create an instance of the Payment Element and mount it to the container DOM node.\n\n`const options = {   mode: 'payment',   amount: 1099,   currency: 'usd',   paymentMethodCreation: 'manual',   // Fully customizable with appearance API.   appearance: {/*...*/}, };  // Set up Stripe.js and Elements to use in checkout form const elements = stripe.elements(options);  // Create and mount the Payment Element const paymentElement = elements.create('payment'); paymentElement.mount('#payment-element');`\n\nThe Payment Element renders a dynamic form that allows your customer to pick a payment method. The form automatically collects all necessary payments details for the payment method selected by the customer.\n\nYou can customize the Payment Element to match the design of your site by passing the [appearance object](https://docs.stripe.com/elements/appearance-api) into `options` when creating the `Elements` provider.\n\n### Collect addresses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, the Payment Element only collects the necessary billing address details. To collect a customer’s full billing address (to calculate the tax for digital goods and services, for example) or shipping address, use the [Address Element](https://docs.stripe.com/elements/address-element).\n\n[](#create-ct)\n\n#### Use createPaymentMethod through a legacy implementation\n\nIf you’re using a legacy implementation, you might be using the information from `stripe.createPaymentMethod` to finalize payments on the server. While we encourage you to follow this guide to [Migrate to Confirmation Tokens](https://docs.stripe.com/payments/payment-element/migration-ct) you can still access our old documentation to [Finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server-legacy)\n\nWhen the customer submits your payment form, call [`stripe.createConfirmationToken`](https://docs.stripe.com/js/confirmation_tokens/create_confirmation_token) to create a [ConfirmationToken](https://docs.stripe.com/api/confirmation_tokens \"ConfirmationTokens\") to send to your server for additional validation or business logic before payment confirmation.\n\nConfirming the PaymentIntent generates a [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\"). You can read the [payment\\_method](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-payment_method) ID off the PaymentIntent confirmation response.\n\n#### Caution\n\nYou must immediately use the created ConfirmationToken to confirm a PaymentIntent; if unused, it expires after 12 hours.\n\n`const form = document.getElementById('payment-form'); const submitBtn = document.getElementById('submit');  const handleError = (error) => {   const messageContainer = document.querySelector('#error-message');   messageContainer.textContent = error.message;   submitBtn.disabled = false; }  form.addEventListener('submit', async (event) => {   // We don't want to let default form submission happen here,   // which would refresh the page.   event.preventDefault();    // Prevent multiple form submissions   if (submitBtn.disabled) {     return;   }    // Disable form submission while loading   submitBtn.disabled = true;    // Trigger form validation and wallet collection   const {error: submitError} = await elements.submit();   if (submitError) {     handleError(submitError);     return;   }    // Create the ConfirmationToken using the details collected by the Payment Element   // and additional shipping information   const {error, confirmationToken} = await stripe.createConfirmationToken({     elements,     params: {       shipping: {         name: 'Jenny Rosen',         address: {           line1: '1234 Main Street',           city: 'San Francisco',           state: 'CA',           country: 'US',           postal_code: '94111',         },       },       return_url: '[https://example.com/order/123/complete](https://example.com/order/123/complete)'     }   });    if (error) {     // This point is only reached if there's an immediate error when     // creating the ConfirmationToken. Show the error to your customer (for example, payment details incomplete)     handleError(error);     return;   }    // Create the PaymentIntent   const res = await fetch(\"/create-confirm-intent\", {     method: \"POST\",     headers: {\"Content-Type\": \"application/json\"},     body: JSON.stringify({       confirmationTokenId: confirmationToken.id,     }),   });    const data = await res.json();    // Handle any next actions or errors. See the Handle any next actions step for implementation.   handleServerResponse(data); });`\n\n[](#submit-payment)\n\nWhen the customer submits your payment form, use a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") to facilitate the confirmation and payment process. Create a PaymentIntent on your server with an `amount` and `currency` specified. In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default. You can manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow. To prevent malicious customers from choosing their own prices, always decide how much to charge on the server-side (a trusted environment) and not the client.\n\nYou can use the ConfirmationToken sent by your client to create and confirm the PaymentIntent in a single request.\n\n`const stripe = require(\"stripe\")(`\n\n`\"sk_test_4eC39HqLyjWDarjtT1zdp7dc\"`\n\n``); const express = require('express'); const app = express();  app.set('trust proxy', true); app.use(express.json()); app.use(express.static(\".\"));  app.post('/create-confirm-intent', async (req, res) => {   try {     const intent = await stripe.paymentIntents.create({       confirm: true,       amount: 1099,       currency: 'usd',       // In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default.       automatic_payment_methods: {enabled: true},       confirmation_token: req.body.confirmationTokenId, // the ConfirmationToken ID sent by your client     });     res.json({       client_secret: intent.client_secret,       status: intent.status     });   } catch (err) {     res.json({       error: err     })   } });  app.listen(3000, () => {   console.log('Running on port 3000'); });``\n\n[](#next-actions)\n\nWhen the PaymentIntent requires additional action from the customer, such as authenticating with 3D Secure or redirecting to a different site, you need to trigger those actions. Use `stripe.handleNextAction` to trigger the UI for handling customer action and completing the payment.\n\n`const handleServerResponse = async (response) => {   if (response.error) {     // Show error from server on payment form   } else if (response.status === \"requires_action\") {     // Use Stripe.js to handle the required next action     const {       error,       paymentIntent     } = await stripe.handleNextAction({       clientSecret: response.clientSecret     });      if (error) {       // Show error from Stripe.js in payment form     } else {       // Actions handled, show success message     }   } else {     // No actions needed, show success message   } }`\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Design an integration](https://docs.stripe.com/payments/payment-element/design-an-integration)",
  "title": "Finalize payments on the server | Stripe Documentation",
  "description": "Build an integration where you render the Payment Element before you create a PaymentIntent or SetupIntent, then confirm the Intent from your server.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/without-card-authentication",
  "markdown": "# Card payments without bank authentication\n\nThis integration supports businesses accepting only US and Canadian cards. It’s simpler up front, but does not scale to support a global customer base.\n\n### How does this integration work?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### How does it compare to the global integration?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nGrowing or global businesses should use Stripe’s [global integration](https://docs.stripe.com/payments/accept-a-payment) to support bank requests for two-factor authentication and allow customers to pay with more payment methods.\n\n[](#web-collect-payment-details)\n\n[Elements](https://docs.stripe.com/payments/elements), part of Stripe.js, provides drop-in UI components for collecting card information from customers. They are hosted by Stripe and placed into your payment form as an iframe so your customer’s card details never touch your code.\n\nFirst, include the [Stripe.js](https://docs.stripe.com/js) script in the head of every page on your site.\n\nIncluding the script on every page of your site lets you take advantage of Stripe’s [advanced fraud functionality](https://docs.stripe.com/radar) and ability to detect anomalous browsing behavior.\n\n### Security requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis script must always load directly from **js.stripe.com** to remain [PCI compliant](https://docs.stripe.com/security/guide). You can’t include the script in a bundle or host a copy of it yourself.\n\nWhen you use Elements, all payment information is submitted over a secure HTTPS connection.\n\nThe address of the page that contains Elements must also start with **https://** rather than **http://**. For more information about getting SSL certificates and integrating them with your server to enable a secure HTTPS connection, see the [security](https://docs.stripe.com/security) documentation.\n\n### Add Elements to your page ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nNext, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nCreate empty DOM elements (containers) with unique IDs within your payment form.\n\n`<form id=\"payment-form\">   <div id=\"card-element\"><!-- placeholder for Elements --></div>   <button id=\"card-button\">Submit Payment</button>   <p id=\"payment-result\"><!-- we'll pass the response from the server here --></p> </form>`\n\nCreate an instance of the [Stripe object](https://docs.stripe.com/js#stripe-function), providing your publishable [API key](https://docs.stripe.com/keys) as the first parameter. Afterwards, create an instance of the [Elements object](https://docs.stripe.com/js#stripe-elements) and use it to [mount](https://docs.stripe.com/js#element-mount) a Card element in the empty DOM element container on the page.\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const elements = stripe.elements(); const cardElement = elements.create('card'); cardElement.mount('#card-element');`\n\nUse [stripe.createPaymentMethod](https://docs.stripe.com/js/payment_methods/create_payment_method) on your client to collect the card details and create a [PaymentMethod](https://docs.stripe.com/api/payment_methods) when the customer submits the payment form. Send the ID of the PaymentMethod to your server.\n\n`const form = document.getElementById(\"payment-form\");  var resultContainer = document.getElementById('payment-result');  // cardElement is defined in the previous step cardElement.on('change', function(event) {   if (event.error) {     resultContainer.textContent = event.error.message;   } else {     resultContainer.textContent = '';   } });  form.addEventListener('submit', async event => {   event.preventDefault();   resultContainer.textContent = '';   const result = await stripe.createPaymentMethod({     type: 'card',     card: cardElement,   });   handlePaymentMethodResult(result); });  const handlePaymentMethodResult = async ({ paymentMethod, error }) => {   if (error) {     // An error happened when collecting card details, show error in payment form     resultContainer.textContent = result.error.message;   } else {     // Send paymentMethod.id to your server (see Step 3)     const response = await fetch(\"/pay\", {       method: \"POST\",       headers: { \"Content-Type\": \"application/json\" },       body: JSON.stringify({ payment_method_id: paymentMethod.id })     });      const responseJson = await response.json();      handleServerResponse(responseJson);   } };  const handleServerResponse = async responseJson => {   if (responseJson.error) {     // An error happened when charging the card, show it in the payment form     resultContainer.textContent = responseJson.error;   } else {     // Show a success message     resultContainer.textContent = 'Success!';   } };`\n\n[](#web-setup)\n\nUse an official library to make requests to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-create-payment-intent)\n\nSet up an endpoint on your server to receive the request from the client.\n\nStripe uses a [PaymentIntent](https://docs.stripe.com/api/payment_intents) object to represent your intent to collect payment from a customer, tracking charge attempts and payment state changes throughout the process.\n\nAlways decide how much to charge on the server, a trusted environment, as opposed to the client. This prevents malicious customers from being able to choose their own prices.\n\nCreate an HTTP endpoint to respond to the AJAX request from step 1. In that endpoint, you should decide how much to charge the customer. To create a payment, create a PaymentIntent using the [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") ID from step 1 with the following code:\n\n`# Check the status of the PaymentIntent to make sure it succeeded  curl https://api.stripe.com/v1/payment_intents \\  -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d amount=1099 \\  -d currency=usd \\  # A PaymentIntent can be confirmed some time after creation, # but here we want to confirm (collect payment) immediately.  -d confirm=true \\  -d payment_method=\"{{PAYMENT_METHOD_ID}}\" \\  # If the payment requires any follow-up actions from the # customer, like two-factor authentication, Stripe will error # and you will need to prompt them for a new payment method.  -d error_on_requires_action=true`\n\n#### Warning\n\nIf you set [error\\_on\\_requires\\_action](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-error_on_requires_action) to `true` when confirming a payment, Stripe automatically fails the payment if it requires two-factor authentication from the user.\n\n#### Payment Intents API response![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you make a payment with the API, the response includes a status of the PaymentIntent. If the payment was successful, it will have a status of `succeeded`.\n\n`{   \"id\": \"pi_0FdpcX589O8KAxCGR6tGNyWj\",   \"object\": \"payment_intent\",   \"amount\": 1099,   \"charges\": {     \"object\": \"list\",     \"data\": [       {         \"id\": \"ch_GA9w4aF29fYajT\",         \"object\": \"charge\",         \"amount\": 1099,         \"refunded\": false,         \"status\": \"succeeded\",       }     ]   },   \"client_secret\": \"pi_0FdpcX589O8KAxCGR6tGNyWj_secret_e00tjcVrSv2tjjufYqPNZBKZc\",   \"currency\": \"usd\",   \"last_payment_error\": null,   \"status\": \"succeeded\", }`\n\nIf the payment is declined, the response includes the error code and error message. Here’s an example of a payment that failed because two-factor authentication was required for the card.\n\n``{   \"error\": {     \"code\": \"authentication_required\",     \"decline_code\": \"authentication_not_handled\",     \"doc_url\": \"[https://docs.stripe.com/error-codes#authentication-required](https://docs.stripe.com/error-codes#authentication-required)\",     \"message\": \"This payment required an authentication action to complete, but `error_on_requires_action` was set. When you're ready, you can upgrade your integration to handle actions at [https://stripe.com/docs/payments/payment-intents/upgrade-to-handle-actions.](https://stripe.com/docs/payments/payment-intents/upgrade-to-handle-actions)\",     \"payment_intent\": {       \"id\": \"pi_1G8JtxDpqHItWkFAnB32FhtI\",       \"object\": \"payment_intent\",       \"amount\": 1099,       \"status\": \"requires_payment_method\",       \"last_payment_error\": {         \"code\": \"authentication_required\",         \"decline_code\": \"authentication_not_handled\",         \"doc_url\": \"[https://docs.stripe.com/error-codes#authentication-required](https://docs.stripe.com/error-codes#authentication-required)\",         \"message\": \"This payment required an authentication action to complete, but `error_on_requires_action` was set. When you're ready, you can upgrade your integration to handle actions at [https://stripe.com/docs/payments/payment-intents/upgrade-to-handle-actions.](https://stripe.com/docs/payments/payment-intents/upgrade-to-handle-actions)\",         \"type\": \"card_error\"       },     },     \"type\": \"card_error\"   } }``\n\n[](#web-test)\n\nThere are several test cards you can use in test mode to make sure this integration is ready. Use them with any CVC, postal code, and future expiration date.\n\n| Number | Description |\n| --- | --- |\n|     | Succeeds and immediately processes the payment. |\n|     | Always fails with a decline code of `insufficient_funds`. |\n|     | Requires authentication, which in this integration will fail with a decline code of `authentication_not_handled`. |\n\nSee the full list of [test cards](https://docs.stripe.com/testing).\n\n[\n\n## Upgrade your integration to handle card authentication![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-upgrade-to-handle-card-authentication)\n\nCongratulations! You completed a payments integration for basic card payments. Note that this integration **declines cards that require authentication during payment**.\n\nIf you start seeing payments in the Dashboard listed as `Failed`, then it’s time to [upgrade your integration](https://docs.stripe.com/payments/payment-intents/upgrade-to-handle-actions). Stripe’s global integration handles these payments instead of automatically declining them.",
  "title": "Card payments without bank authentication | Stripe Documentation",
  "description": "Build a simpler integration with regional limitations.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/vault-and-forward",
  "markdown": "# Forward card details to third-party API endpoints\n\n## Use the Vault and Forward API to securely share card details across multiple processors.\n\nThe Vault and Forward API allows you to tokenize and store card details in Stripe’s PCI-compliant vault and route that data to supported processors or endpoints. Leverage the API to:\n\n*   Use the [Payment Element](https://docs.stripe.com/payments/payment-element) [across multiple processors](https://docs.stripe.com/payments/forwarding-third-party-processors).\n*   Use Stripe as your primary vault for card details across processors.\n*   Route card details to your own [PCI compliant token vault](https://docs.stripe.com/payments/forwarding-token-vault).\n\n#### Request access\n\nTo gain access to use Stripe’s forwarding service, contact [Stripe support](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fsupport.stripe.com%2Fcontact%2Femail%3Fquestion%3Dother%26topic%3Dpayment_apis%26subject%3DHow%2520can%2520I%2520access%2520the%2520Vault%2520and%2520Forward%2520API%3F%26body%3DWhat%2520endpoint%28s%29%2520would%2520you%2520like%2520to%2520forward%2520card%2520details%2520to%3F).\n\n### Forward requests to destination endpoints and populate card details from Stripe’s vault![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[](#collect-card-details)\n\nTo collect card details, use the Payment Element to create [a PaymentMethod](https://docs.stripe.com/payments/finalize-payments-on-the-server-legacy?type=payment#create-pm). After you create a PaymentMethod, we automatically store card details in Stripe’s PCI compliant vault. If you have your own frontend, you can still use the Vault and Forward API by [creating a PaymentMethod directly](https://docs.stripe.com/api/payment_methods/create).\n\nTypically, you can only reuse PaymentMethods by attaching them to a Customer. However, the Vault and Forward API accepts all PaymentMethod objects, including those not attached to a customer. Similarly, the Vault and Forward API doesn’t [confirm](https://docs.stripe.com/api/payment_intents/confirm) or [capture](https://docs.stripe.com/api/payment_intents/capture) PaymentIntents. As a result, you might unintentionally use them to capture a payment on Stripe that was already captured on another processor.\n\nCVCs expire automatically after a certain time period and also expire when used with the Vault and Forward API. If you require a CVC after either of these conditions are met, you must recollect the card details.\n\n[](#create-fwd-request)\n\nTo send card details from Stripe’s vault, you must [Create a ForwardingRequest](https://docs.stripe.com/api/forwarding/forwarding_requests/create) and include the following parameters:\n\n*   `payment_method`: Object that enables Stripe to identify your customer’s card details within Stripe’s vault and insert that data into the request body.\n*   `url`: The exact destination endpoint of your request.\n*   `request.body`: The API request body that you want to send to the destination endpoint (for example, the payments request you send to another processor). Leave any field where you normally input your customer’s card details blank.\n*   `replacements`: Fields that you want Stripe to substitute in the `request.body`. The [available fields](https://docs.stripe.com/api/forwarding/forwarding_requests/create#forwarding_request_create-replacements) that we recommend always setting are `card_number`, `card_expiry`, `card_cvc`, and `cardholder_name`. For example, including `card_number` in the `replacements` array replaces the appropriate card number field for your destination endpoint in the `request.body`.\n\nYou must format your request based on the data that the destination endpoint expects. In the example below, the destination endpoint expects an `Idempotency-Key` header and accepts a JSON body with the payment details.\n\n`curl https://api.stripe.com/v1/forwarding/requests \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Idempotency-Key:   {{IDEMPOTENCY_KEY}}  \" \\  -d payment_method=  {{PAYMENT_METHOD_ID}}   \\   --data-urlencode url=\"https://endpoint-url/v1/payments\" \\   -d \"request[headers][0][name]\"=Destination-API-Key \\  -d \"request[headers][0][value]\"={{DESTINATION_API_KEY}} \\   -d \"request[headers][1][name]\"=Destination-Idempotency-Key \\  -d \"request[headers][1][value]\"={{DESTINATION_IDEMPOTENCY_KEY}} \\   --data-urlencode \"request[body]\"=\"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"\\\",\\\"expiryMonth\\\":\\\"\\\",\\\"expiryYear\\\":\\\"\\\",\\\"cvc\\\":\\\"\\\",\\\"holderName\\\":\\\"\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\" \\  -d \"replacements[0]\"=card_number \\  -d \"replacements[1]\"=card_expiry \\  -d \"replacements[2]\"=card_cvc \\  -d \"replacements[3]\"=cardholder_name`\n\n#### Security tip\n\nWe require you to pass API keys for the destination endpoint on each API request. Stripe forwards the request using the API keys you provide, and only retains hashed and encrypted versions of destination endpoint API keys.\n\n#### Caution\n\nYou can provide a `Idempotency-Key` to make sure that requests with the same key result in only one outbound request. Use a different and unique key for Stripe and any idempotency keys you provide on the underlying third-party request.\n\nUse a new `Idempotency-Key` every time you make updates to `request.body` or `request.header` fields. Passing in the older idempotency key results in the API replaying older responses, including any previous validation errors.\n\n[](#forward-request)\n\nStripe makes a request to the destination endpoint on your behalf by inserting the card details from the PaymentMethod into the `request.body`. Where enabled and available, [Card Account Updater (CAU)](https://stripe.com/resources/more/what-is-a-card-account-updater-what-businesses-need-to-know) automatically attempts to update and provide the latest available card details for requests.\n\nStripe then forwards the request to the destination endpoint. For example:\n\n1.  Stripe makes a POST request to the endpoint:\n    \n    `POST /v1/payments HTTP/1.1 User-Agent: Stripe Accept: */* Host: endpoint-url Content-Type: application/json Content-Length: 321`\n    \n2.  Stripe includes the following headers:\n    \n    `Destination-API-Key: {{DESTINATION_API_KEY}} Destination-Idempotency-Key: {{DESTINATION_IDEMPOTENCY_KEY}}`\n    \n3.  Stripe includes the following JSON body in the request:\n    \n    `{   amount: {     value: 1000,     currency: 'usd'   },   paymentMethod: {     number: '4242424242424242',     expiryMonth: '03',     expiryYear: '2030',     cvc: '123',     holderName: 'First Last',   },   reference: '{{REFERENCE_ID}}' }`\n    \n\n#### Note\n\nIf you’re using the Vault and the Forward API to make an authorization request, you must handle any post-transaction actions, such as refunds or disputes, directly with the third-party processor. Contact Stripe support if you require 3DS authentication across your multiprocessor setup.\n\n[](#return-response)\n\nWhen you use the Vault and Forward API to forward card details to a third-party processor, Stripe synchronously waits for a response from the destination endpoint. The timeout period for this response is less than a minute. Stripe redacts identified PCI-sensitive data, stores the redacted response from the destination endpoint, and returns a [ForwardingRequest](https://docs.stripe.com/api/forwarding/request/object) object, which contains data about the request and response.\n\n#### Caution\n\nWhen you use the Vault and Forward API to forward card details to a third-party processor, Stripe can’t guarantee that the processor will provide any particular response to your forwarded API requests. If the third-party processor is unresponsive, you must reach out directly to that processor to resolve the issue.\n\n`{   id: \"fwdreq_123\",   object: \"forwarding.request\",   payment_method: \"{{PAYMENT_METHOD}}\",   request_details: {     body: '{       \"amount\": {         \"value\": 1000,         \"currency\": \"usd\"       },       \"paymentMethod\": {         \"number\": \"424242******4242\",         \"expiryMonth\": \"03\",         \"expiryYear\": \"2030\",         \"cvc\": \"***\",         \"holderName\": \"First Last\",       },       \"reference\": \"{{REFERENCE_ID}}\"     }',     headers: [       {         name: \"Content-Type\",         value: \"application/json\",       },       {         name: \"Destination-API-Key\",         value: \"{{DESTINATION_API_KEY}}\",       },       {         name: \"Destination-Idempotency-Key\",         value: \"{{DESTINATION_IDEMPOTENCY_KEY}}\",       },       ...     ]   },   request_context: {       \"destination_duration\": 234,       \"destination_ip_address\": \"35.190.113.80\"   },   response_details: {     body: '{       // Response from the third-party endpoint goes here       ...     }',     headers: [       ...     ],     status: 200,   },   replacements: [     \"card_number\",     \"card_expiry\",     \"card_cvc\",     \"cardholder_name\"   ]   ... }`\n\n[](#configuring)\n\nTo set up your Vault and Forward API endpoint, you must:\n\n*   [Confirm that we support the destination endpoint](#confirm-endpoint).\n*   Provide a test and production account with [Stripe support](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fsupport.stripe.com%2Fcontact%2Femail%3Fquestion%3Dother%26topic%3Dpayment_apis%26subject%3DHow%2520can%2520I%2520access%2520the%2520Vault%2520and%2520Forward%2520API%3F%26body%3DWhat%2520endpoint%28s%29%2520would%2520you%2520like%2520to%2520forward%2520card%2520details%2520to%3F).\n*   [Share the production details](#share-production-details) for the destination endpoint with [Stripe support](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fsupport.stripe.com%2Fcontact%2Femail%3Fquestion%3Dother%26topic%3Dpayment_apis%26subject%3DHow%2520can%2520I%2520access%2520the%2520Vault%2520and%2520Forward%2520API%3F%26body%3DWhat%2520endpoint%28s%29%2520would%2520you%2520like%2520to%2520forward%2520card%2520details%2520to%3F).\n\n### Confirm that we support the destination endpoint ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe supports forwarding API requests to the following endpoints:\n\n*   **Adyen**:\n    *   `[prefix]-checkout-live.adyenpayments.com/v68/payments`\n    *   `[prefix]-checkout-live.adyenpayments.com/v69/payments`\n    *   `[prefix]-checkout-live.adyenpayments.com/v70/payments`\n*   **Braintree**: `payments.braintree-api.com/graphql`\n*   **Checkout**:\n    *   `api.checkout.com/tokens`\n    *   `api.checkout.com/payments`\n*   **GMO Payment Gateway**: `p01.mul-pay.jp/payment/ExecTran.json`\n*   **PaymentsOS**: `api.paymentsos.com/tokens`\n*   **Worldpay**: `access.worldpay.com/tokens`\n*   [Your own PCI-compliant token vault](https://docs.stripe.com/payments/forwarding-token-vault)\n\nThe Vault and Forward API can only forward requests to the following countries:\n\n### Supported countries\n\nWe can support HTTPS-based APIs that accept JSON requests and return JSON responses. If we don’t already have support for destination endpoint or you require a different API format, provide the details of the endpoint with [Stripe support](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fsupport.stripe.com%2Fcontact%2Femail%3Fquestion%3Dother%26topic%3Dpayment_apis%26subject%3DHow%2520can%2520I%2520Access%2520the%2520Vault%2520and%2520Forward%2520API%3F%26body%3DWhat%2520endpoint%28s%29%2520would%2520you%2520like%2520to%2520forward%2520card%2520details%2520to%3F) so we can support your destination endpoint.\n\n### Provide test accounts to Stripe support ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo access the Vault and Forward API, share the [account IDs](https://dashboard.stripe.com/settings/account) (`acct_xxxx`) for your test accounts with [Stripe support](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fsupport.stripe.com%2Fcontact%2Femail%3Fquestion%3Dother%26topic%3Dpayment_apis%26subject%3DHow%2520can%2520I%2520access%2520the%2520Vault%2520and%2520Forward%2520API%3F%26body%3DWhat%2520endpoint%28s%29%2520would%2520you%2520like%2520to%2520forward%2520card%2520details%2520to%3F).\n\nShare the production details for destination endpoint with [Stripe support](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fsupport.stripe.com%2Fcontact%2Femail%3Fquestion%3Dother%26topic%3Dpayment_apis%26subject%3DHow%2520can%2520I%2520access%2520the%2520Vault%2520and%2520Forward%2520API%3F%26body%3DWhat%2520endpoint%28s%29%2520would%2520you%2520like%2520to%2520forward%2520card%2520details%2520to%3F). These include the following for destination endpoint: URL, HTTP method, documentation, fields, request headers, and encryption keys. Stripe then sets up destination endpoint for use with the Vault and Forward API in live mode.\n\nTo share third-party API keys, you must encrypt them by using the Stripe public key that’s specific to the Vault and Forward API. Start by [importing a public key](http://www.gnupg.org/gph/en/manual.html#AEN84) using [the GNU Privacy Guard (PGP)](http://gnupg.org/). After you familiarize yourself with the basics of PGP, use the following PGP key to encrypt your third-party API keys:\n\n### Vault and Forward API PGP key\n\nTo encrypt your third-party API keys with the Vault and Forward API PGP key:\n\n1.  Calculate the `SHA256` hash of your private key and hex encode the hash. Treat this hash as a secret.\n    \n    `echo -n \"{{THIRD_PARTY_SECRET_KEY}}\" | sha256sum`\n    \n2.  Encrypt the `SHA256` hash with Stripe’s public key, `Base64` encode the result, and set the Stripe key as `trusted`.\n    \n    `echo -n \"{{SHA256_HASH}}\" |  gpg -e -r AE863ADA1603150856C0A853A7B203177D034588 --always-trust | base64 > encrypted_base64.txt`\n    \n3.  Verify `encrypted_base64.txt` by running the following command:\n    \n    `cat encrypted_base64.txt | base64 -d | gpg --list-only --list-packets`\n    \n\nMake sure that `encrypted_base64.txt` contains the following characteristics:\n\n*   **Key ID**: `27E4B9436302901A`\n*   **Key type**: RSA\n*   **Key size**: 4096 bits\n*   **User ID**: `Forward API Secret Encryption Key (Forward API Secret Encryption Key) <multiprocessor-ext@stripe.com>`\n\n[](#testing-your-integration)\n\nTo confirm that your integration works correctly with destination endpoint, initiate a ForwardingRequest using the PaymentMethod you created. This example uses `pm_card_visa` as a payment method.\n\n`curl https://api.stripe.com/v1/forwarding/requests \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Idempotency-Key:   {{IDEMPOTENCY_KEY}}  \" \\  -d payment_method=pm_card_visa \\  -d url=\"{{DESTINATION ENDPOINT}}\" \\  -d \"request[headers][0][name]\"=Destination-API-Key \\  -d \"request[headers][0][value]\"={{DESTINATION_API_KEY}} \\   -d \"request[headers][1][name]\"=Destination-Idempotency-Key \\  -d \"request[headers][1][value]\"={{DESTINATION_IDEMPOTENCY_KEY}} \\   --data-urlencode \"request[body]\"=\"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"\\\",\\\"expiryMonth\\\":\\\"\\\",\\\"expiryYear\\\":\\\"\\\",\\\"cvc\\\":\\\"\\\",\\\"holderName\\\":\\\"\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\" \\  -d \"replacements[0]\"=card_number \\  -d \"replacements[1]\"=card_expiry \\  -d \"replacements[2]\"=card_cvc \\  -d \"replacements[3]\"=cardholder_name`\n\n#### Caution\n\nThe Vault and Forward API treats any response from the destination endpoint as a `success` and returns a `200`, along with the destination endpoint’s response code in the `response.body`. For example, when the destination endpoint returns a status code of `400` to Stripe, the Vault and Forward API responds with a status code of `200`. The `response.body` includes the destination endpoint’s `400` response and error message. Separately test the API request that you send to your destination endpoint to make sure that you don’t have any errors.\n\n### View your request logs in the Dashboard ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can view request logs and errors related to the Vault and Forward API in the [Developers Dashboard](https://docs.stripe.com/development/dashboard/request-logs). Additionally, you can use the [List API](https://docs.stripe.com/api/forwarding/forwarding_requests/list) to fetch the logs from Stripe.\n\n#### Security tip\n\nThe `request.headers` and `request.body` in the incoming request are encrypted and appear as `encrypted_request` in the Dashboard.",
  "title": "Forward card details to third-party API endpoints | Stripe Documentation",
  "description": "Use the Vault and Forward API to securely share card details across multiple processors.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/baas/start-integration/sample-app",
  "markdown": "# Issuing and Treasury sample app\n\n## Learn how to onboard customers, issue cards, and make outbound payments.\n\nTo see how you can use Issuing and Treasury APIs in your integration, try our sample app. It lets you onboard as a customer, create cards, test authorizations, and make outbound payments from a financial account.\n\nWithout writing any code, you can also copy the sample app to use with your platform, following the API logs generated by your actions.\n\n[Try our sample app](https://baas.stripe.dev/auth/register)\n\n[](https://baas.stripe.dev/auth/register)\n\n[![The Issuing and Treasury demo app's Card details page](https://b.stripecdn.com/docs-statics-srv/assets/issuing-treasury-demo-app.54ad51387e0606a4b240347f4cb02cfb.png)](https://baas.stripe.dev/auth/register)\n\n[The Issuing and Treasury sample app’s card details page](https://baas.stripe.dev/auth/register)\n\nThis app is for [platforms onboarding business customers](https://docs.stripe.com/issuing/connect#when-to-use-connect). If you only need cards for yourself or your own employees, use [Issuing in the Dashboard](https://dashboard.stripe.com/test/issuing/overview) instead.\n\n[](#create-account)\n\nTo use the sample app, first [create an account](https://baas.stripe.dev/auth/register) to onboard as a customer of the platform.\n\nAfter you provide an email and password, the app’s backend creates a connected account and requests the `card_issuing` and `treasury` capabilities.\n\n### (Optional) Simulate hosted onboarding to provide full account details\n\n### See the code and API logs for these steps\n\n[](#add-funds)\n\n1.  On the **Overview** page, click **Generate test data**, and then click **Simulate received credit** in the drawer.\n    \n2.  The transaction appears as a [received credit](https://docs.stripe.com/treasury/moving-money/financial-accounts/into/received-credits) (an incoming ACH) for 500 USD, and appears in the [transaction receipt](https://docs.stripe.com/treasury/moving-money/regulatory-receipts).\n    \n3.  Go to the **Financial account** page to [view your account number](https://docs.stripe.com/treasury/account-management/financial-accounts#retrieve-a-financialaccount-and-account-number).\n    \n\n### See the code and API logs for these steps\n\n[](#send-money)\n\n1.  On the **Financial account** page, click **Send money**.\n2.  Select **ACH**, then enter the recipient’s information and the amount to send.\n3.  Select `POSTED` as the transaction result to simulate a completed payment.\n4.  The transaction appears as an [outbound payment](https://docs.stripe.com/treasury/moving-money/financial-accounts/out-of/outbound-payments).\n\n### See the code and API logs for these steps\n\n[](#create-test-purchase)\n\n1.  On the **Cardholder** page, click **Create a new cardholder**.\n2.  Enter the cardholder’s information, then click **Issue card** to create a virtual card.\n3.  You’re redirected to the **Cards** page. Click **Details** on the card row to view the new virtual card.\n4.  Click **Generate test data**, then **Simulate test purchase.**\n\n### See the code and API logs for these steps",
  "title": "Issuing and Treasury sample app | Stripe Documentation",
  "description": "This sample app shows an embedded finance integration built with Issuing and Treasury APIs. You can use the source code to start your development.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/baas/start-integration/onboarding-overview",
  "markdown": "# Onboarding overview | Stripe DocumentationThe Stripe Docs logo\n\n## Take your integration live.\n\nUse this guide to develop and launch an integration using Stripe [Issuing](https://docs.stripe.com/issuing) (in the US, EU, or UK) and/or [Treasury](https://docs.stripe.com/treasury) (US only). To successfully go live, your offering must be a supportable business use case, and you must integrate systems and establish business processes.\n\nBefore you go live, you must:\n\n1.  **Get your use case approved:** Submit information pertaining to your use case, familiarize yourself with the compliance requirements, and explore test mode.\n2.  **Obtain live mode access:** Build in the production environment, manage the necessary operational responsibilities, and complete the required compliance tasks.\n3.  **Get ready to launch your BaaS offering:** Test the program out with your employees using real funds.\n\nCreate cards and financial accounts for your customers (US only).\n\n**Complexity:** ●●●○○\n\n**Example segments:** SaaS platforms, e-commerce businesses, and corporate benefits providers.\n\n[](#use-case-approval)\n\nStart by submitting an [intake form](https://stripe.com/contact/sales) that includes a high-level overview of what you’re looking to use Stripe Issuing and Treasury for. If you’re a funded business with a dedicated team of developers, or simply working with a single developer, include those details in the form.\n\nAfter you submit the form, our team will reach out within 5 days to let you know if your use case is a good fit. We also let you know if we think your desired product or products don’t [serve your use case](https://support.stripe.com/questions/supported-business-use-cases-for-stripe-issuing) well. During the call, an assigned Stripe account representative asks you more about your use case and motivation as part of our supportability assessment. We also advise you on best practices and how to build a [compelling financial services offering](https://stripe.com/guides/building-a-fintech-company).\n\nFollowing the call, we deliver you the supportability outcome within 5 business days (certain use cases can take longer). While you wait, you can build a [test mode](https://docs.stripe.com/test-mode \"test mode\") integration to explore the product’s capabilities, and familiarize yourself with our compliance requirements. If we deem your use case supportable, your account representative provides you with any necessary agreements, and once signed, configures your program.\n\n[](#obtain-live-mode-access)\n\nTo obtain live mode access, you must complete the required compliance tasks. In parallel, we recommend you build your integration in a production environment and operationalize required processes.\n\n### Build your integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAt any time, you can explore an integration in test mode using our [sample app](https://docs.stripe.com/baas/start-integration/sample-app). After you sign the legal agreement, Stripe configures your program to the capabilities required for your business model. After you receive approval, you can begin submitting live mode transactions.\n\n|     | Test mode | Live mode |\n| --- | --- | --- |\n| Usage limits | With no permissions necessary, explore a broad set of platform use cases by using the sample app or the [Issuing](https://docs.stripe.com/api/issuing/authorizations) or [Treasury](https://docs.stripe.com/api/treasury/financial_accounts) APIs | Limited to what you’re approved for |\n| Immediate access | Yes | No, you’re granted access after you receive bank partner approval |\n| Use real funds | No  | Yes |\n\n### Manage operational responsibilities ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPrior to go-live, you need to take care of various operational responsibilities:\n\n*   **Customer support:** Understand what types of customer inquiries you need to handle and [equip your support team](https://docs.stripe.com/issuing/customer-support) with the appropriate information and tools.\n*   **Compliance management:** Set up the necessary compliance processes outlined in the [compliance section](#complete-compliance-tasks).\n*   **Physical cards:** If your use case requires [physical cards](https://docs.stripe.com/issuing/cards/physical), you can order [standard cards](https://docs.stripe.com/issuing/cards/physical/standard) if you want to go to market quickly. Or you can [fully customize](https://docs.stripe.com/issuing/cards/physical/custom) your cards with unique artwork and materials, if physical cards are a core part of your business.\n*   **Mobile wallets:** If your use case necessitates Apple Pay, [review the steps](https://docs.stripe.com/issuing/cards/digital-wallets) required for approval.\n\n### Complete compliance tasks ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou need to complete a set of compliance tasks before you can launch your integration. Stripe must also review and approve your fees, terms of service, marketing material, and user interfaces. To help in this process, we provide a workflow tool to manage compliance submissions and feedback as well as to help you stay organized.\n\n1.  **Implement all requirements for a public launch**\n    \n    You must submit screenshots of your marketing, onboarding, and account servicing flows using the [compliance intake form](https://form.asana.com/?k=8K51UWmWhttehNFD5qBLdg&d=974470123217835) to demonstrate compliance. Before you build user-facing marketing, onboarding, and account servicing pages, review the following content guidelines:\n    \n    *   [Unfair and Deceptive Acts or Practices (UDAP):](https://docs.stripe.com/treasury/compliance#udap-and-correct-messaging) Keep your advertising clear and honest.\n    *   [Controlling the Assault of Non-Solicited Pornography And Marketing (CAN-SPAM):](https://docs.stripe.com/treasury/compliance#can-spam) Comply with commercial email messaging.\n    *   [Messaging and marketing:](https://docs.stripe.com/treasury/compliance#issuing-messaging-guidelines) Use the right terms to accurately reflect the account structure and benefits, including [Treasury-specific messaging](https://docs.stripe.com/treasury/marketing-treasury).\n    *   [Prohibition on international marketing:](https://docs.stripe.com/treasury/compliance#prohibition-on-international-marketing) Limit to US-based merchants.\n    *   Required agreements and disclosures for [Treasury](https://docs.stripe.com/treasury/compliance#treasury-terms), [Issuing](https://docs.stripe.com/treasury/compliance#issuing-terms), and [other features](https://docs.stripe.com/treasury/compliance#fees-credits-rewards-terms): Appropriately disclose fees and required identifying information.\n    \n    Stripe requires that you submit screenshots to demonstrate the following:\n    \n    *   You include all required agreements and disclosures in your onboarding flow, and make them available outside of onboarding.\n    *   Customers have a channel to [submit complaints](https://docs.stripe.com/treasury/handling-complaints) to you and to [initiate transaction disputes](https://docs.stripe.com/issuing/purchases/disputes).\n    *   [Regulatory emails](https://docs.stripe.com/issuing/compliance-us/issuing-regulated-customer-notices) are sent when required for Issuing accounts.\n    *   [Regulatory receipts](https://docs.stripe.com/treasury/moving-money/regulatory-receipts) are provided when required for Treasury transactions.\n    *   If you choose to provide [account statements](https://docs.stripe.com/treasury/compliance#statements), you must submit evidence they meet statement requirements.\n2.  **Get approved to launch to the public**\n    \n    After you submit your screenshots, Stripe reviews and approves within two weeks or requests additional revisions. If there are any adjustments that need to be made to your submissions, we let you know, so that you can resubmit with the needed adjustments.\n    \n\n[](#get-ready-launch-your-offering)\n\nNow you’re ready to request your first virtual or physical card. Using real funds, test the program out by having designated employees complete initial transactions.\n\n### Operationalize ongoing activities to remain compliant ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOnce live, you need to dedicate resources to ongoing operational requirements:\n\n*   **Marketing reviews:** Learn how to [submit new marketing material or user interfaces](https://docs.stripe.com/treasury/compliance#going-live) for approval.\n*   **Customer complaints:** Receive and resolve customer complaints, and [report them to Stripe](https://docs.stripe.com/treasury/handling-complaints#complaints-tracking) each month.\n*   **Dispute handling:** Set up [dispute handling](https://docs.stripe.com/issuing/purchases/disputes) processes for your card program.\n*   **Lost or stolen cards:** Allow customers to report lost or stolen cards so you can cancel them immediately and (optionally) [request replacements](https://docs.stripe.com/issuing/cards/replacements#replacements-for-lost-or-stolen-cards).\n*   **Recordkeeping:** [Record](https://docs.stripe.com/treasury/compliance#recordkeeping) all marketing materials, customer data, and [regulatory receipts](https://docs.stripe.com/treasury/moving-money/regulatory-receipts), and disclosures you make for at least 5 years.",
  "title": "Onboarding overview | Stripe Documentation",
  "description": "Take your integration live.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/baas/start-integration/integration-guides",
  "markdown": "# Integration guides | Stripe DocumentationThe Stripe Docs logo\n\n## Use these guides to launch a Stripe Issuing and/or Treasury integration.\n\nUse these guides to develop and launch a Stripe [Issuing](https://docs.stripe.com/issuing) and/or [Treasury](https://docs.stripe.com/treasury) integration in the US. To successfully go live, your offering must be a supportable business use case, and you must integrate systems and establish business processes. To learn more, see [Onboarding overview](https://docs.stripe.com/baas/start-integration/onboarding-overview).",
  "title": "Integration guides | Stripe Documentation",
  "description": "Use these guides to launch a Stripe Issuing and/or Treasury integration.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/baas/start-integration/integration-guides/fleet",
  "markdown": "# Fleet integration guide | Stripe DocumentationThe Stripe Docs logo\n\n## Build a Fleet financial services integration with Issuing.\n\nBuild a fleet offering by using Stripe [Issuing](https://docs.stripe.com/issuing) to create cards and process transactions for your customers’ business.\n\nBy the end of this guide, you’ll know how to:\n\n*   Create verified connected accounts representing your business customers.\n*   Create cards for your business customers and use these cards to spend funds.\n*   Understand the additional fleet specific fields collected at the pump or point of sale.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Sign up for a [Stripe account](https://dashboard.stripe.com/register).\n2.  [Activate Issuing test mode](https://dashboard.stripe.com/test/issuing/overview) in the Dashboard.\n3.  Configure your [Connect platform branding settings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding) for your business and add an icon.\n\n## Overview ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Issuing enables fleet management platforms and operators to create and manage customized fleet card programs with physical or virtual payment cards. Issuing allows users to efficiently control, manage, and reconcile expenses related to their clients’ electric or traditional fuel vehicle fleets.\n\nStripe’s platform provides advanced capabilities with open-loop cards accepted anywhere, real-time spend controls at the point of purchase, advanced fraud protection leveraging Stripe’s fraud tools and authorization signals, and the ability to define card benefits unique to your program, such as 1% cashback on fuel spend. Fleet providers can also issue cards tied to individual or groups of vehicles, facilitating precise expense tracking (including odometer readings) and limiting spend to authorized drivers, merchants, or certain purchase categories.\n\nStripe’s platform provides data access to identify insights in spend patterns, mileage, maintenance, and transaction details, allowing businesses to optimize their fleet program. This approach provides greater operational efficiency with realized cost savings, as well as an oversight of card-based expenditure across fuel, repairs, food, accommodation, and more.\n\n[](#set-up-connect)\n\n### Create a connected account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCreate a connected account to represent a business customer of your platform. For your platform, each fleet operator would be represented as a connected account.\n\n#### Connect account types\n\nIssuing only supports connected accounts that don’t use a Stripe-hosted Dashboard, and where your platform is responsible for requirements collection and loss liability, also known as a Custom connected account. Learn how to [create connected accounts](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct) that work with Issuing. If your existing accounts don’t match this configuration, you must recreate them.\n\nThe following request creates a US-based connected account with the correct configuration and requests the requisite capabilities:\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d country=US \\  -d \"controller[stripe_dashboard][type]\"=none \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[losses][payments]\"=application \\  -d \"controller[requirement_collection]\"=application \\  -d \"capabilities[transfers][requested]\"=true \\  -d \"capabilities[card_issuing][requested]\"=true \\  -d \"capabilities[us_bank_account_ach_payments][requested]\"=true`\n\nThe user’s account information appears in the response:\n\n`{     ...     \"id\":   \"{{CONNECTED_ACCOUNT_ID}}\",     \"controller\": {       \"stripe_dashboard\": {         \"type\": \"none\"       },       \"fees\": {         \"payer\": \"application\"       },       \"losses\": {         \"payments\": \"application\"       },       \"is_controller\": true,       \"type\": \"application\",       \"requirement_collection\": \"application\"     },     ... }`\n\nNote the connected account’s `id`. You’ll provide this value to [authenticate](https://docs.stripe.com/connect/authentication) as the connected account by passing it into requests in the `Stripe-Account` header.\n\nIf a connected account already exists, you can add the requisite capabilities by specifying the connected account `id` in the request:\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"controller[stripe_dashboard][type]\"=none \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[losses][payments]\"=application \\  -d \"controller[requirement_collection]\"=application \\  -d country=US \\   --data-urlencode email=\"jenny.rosen@example.com\" \\  -d \"capabilities[transfers][requested]\"=true \\  -d \"capabilities[card_issuing][requested]\"=true`\n\n### Verify the connected account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nChoose one of the following onboarding options:\n\n[Stripe-hosted onboarding](https://docs.stripe.com/connect/hosted-onboarding) is a web form hosted by Stripe with your brand’s name, color, and icon. Stripe-hosted onboarding uses the [Accounts API](https://docs.stripe.com/api/accounts) to read the requirements and generate an onboarding form with robust data validation and is localized for all Stripe-supported countries.\n\nBefore using Connect Onboarding, you must provide the name, color, and icon of your brand in the Branding section of your [Connect settings page](https://dashboard.stripe.com/test/settings/connect).\n\nYou can use hosted onboarding to allow connected accounts to link an `external_account` (which is required for payouts) by enabling it through your [Connect Onboarding settings](https://dashboard.stripe.com/settings/connect).\n\nTo create an onboarding link for the connected account, use the [Account Links API](https://docs.stripe.com/api/account_links/create).\n\n`curl https://api.stripe.com/v1/account_links \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account={{CONNECTED_ACCOUNT_ID}} \\   --data-urlencode refresh_url=\"https://example.com/reauth\" \\   --data-urlencode return_url=\"https://example.com/return\" \\   -d type=account_onboarding`\n\n#### Caution\n\nFor security reasons, don’t email, text, or send account link URLs directly to your connected account. We recommend that you distribute the account link URL from within your platform’s application, where their account is authenticated.\n\nThe response you receive includes the `url` parameter containing the link for your connected account to onboard to your platform.\n\nAt this point, Stripe has created and verified the connected account with `active` relevant capabilities to use Issuing and Treasury.\n\nTo learn more, see:\n\n*   [Set up an Issuing and Connect integration](https://docs.stripe.com/issuing/connect)\n*   [Stripe hosted onboarding for connected accounts](https://docs.stripe.com/connect/custom/hosted-onboarding)\n*   [Creating and using connected accounts](https://docs.stripe.com/connect/design-an-integration?connect-onboarding-surface=api&connect-dashboard-type=none&connect-economic-model=buy-rate&connect-loss-liability-owner=platform&connect-charge-type=direct)\n*   [Identify verification for connected accounts](https://docs.stripe.com/connect/identity-verification)\n\n[](#create-cardholders-cards)\n\nThe [Cardholder](https://docs.stripe.com/api/issuing/cardholder/object) is the individual driver (that is, employee or contractor) that’s authorized by your business customer to use card funding by the associated balance. The `Cardholder` object includes relevant details, such as a [name](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-name) to display on cards and a [billing](https://docs.stripe.com/api/issuing/cardholders/object#issuing_cardholder_object-billing) address, which is usually the business address of the connected account or your platform.\n\nUse the embedded [Issuing cards list component](https://docs.stripe.com/connect/supported-embedded-components/issuing-cards-list) to enable your connected accounts to create a [Card](https://docs.stripe.com/api/issuing/cards/object) for a Cardholder and associate it with the Financial Account.\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable the Issuing cards list component by specifying `issuing_cards_list` in the `components` parameter. You can enable or disable individual features of the Issuing cards list component by specifying the `features` parameter under `issuing_cards_list`.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; embedded_connect_beta=v2;\" \\   -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[issuing_cards_list][enabled]\"=true \\  -d \"components[issuing_cards_list][features][card_management]\"=true \\  -d \"components[issuing_cards_list][features][cardholder_management]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the Issuing cards list component in the front end:\n\n`// Include this element in your HTML const issuingCardsList = stripeConnectInstance.create('issuing-cards-list'); container.appendChild(issuingCardsList);`\n\nFrom here, users can click **Create card** to begin creating a new Cardholder and Card. The user can also activate the card during creation, or do so afterwards.\n\nAt this point, there’s an active card attached to a cardholder and financial account. See the [Issuing page](https://dashboard.stripe.com/issuing/overview) for the connected account to view the card and cardholder information.\n\nTo learn more, see:\n\n*   [Virtual cards with Issuing](https://docs.stripe.com/issuing/cards/virtual)\n*   [Physical cards](https://docs.stripe.com/issuing/cards/physical)\n*   [Using the Dashboard for Issuing with Connect](https://docs.stripe.com/issuing/connect#using-dashboard-issuing)\n*   [Create cards with the API](https://docs.stripe.com/issuing/cards)\n*   [Testing physical card shipment](https://docs.stripe.com/issuing/cards/physical/testing)\n\n[](#use-card)\n\nWhen a card is used to make a purchase, it generates an authorization request, which can be approved or declined in real-time.\n\nWith a configured fleet card program, you’ll access additional fleet-specific fields gathered at the pump or point of sale. This includes odometer reading, driver identification, fuel type, gallons pumped, and itemized non-fuel product details, enabled by a fleet-specific chip configuration on the card. This data becomes available at the point of purchase during authorization, and later when the transaction is processed. Some fuel dispensers allow [partial authorization](https://docs.stripe.com/issuing/purchases/authorizations#handling-other-authorizations).\n\nTo observe the impact of card activity on the associated balance, generate a test authorization.\n\nAs a user with a Commercial Fleet card program, you receive specific fleet-related data on the [Authorization](https://docs.stripe.com/api/issuing/authorizations/object) object.\n\nYou can create a test mode authorization on the Issuing page of the Dashboard for the connected account, or with the following call to the [Authorizations API](https://docs.stripe.com/api/issuing/authorizations):\n\n`curl https://api.stripe.com/v1/test_helpers/issuing/authorizations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d card=  {{CARD_ID}}   \\  -d amount=100 \\  -d authorization_method=chip \\  -d \"fleet[cardholder_prompt_data][odometer]\"=42424 \\  -d \"fleet[purchase_type]\"=fuel_purchase \\  -d \"fleet[service_type]\"=self_service \\  -d \"merchant_data[category]\"=automated_fuel_dispensers \\  -d is_amount_controllable=true`\n\nAfter approval, Stripe creates an `Authorization` in a `pending` state while it waits for [capture](https://docs.stripe.com/issuing/purchases/transactions).\n\nThe authorized `amount` is the default amount held for a [fuel dispenser transaction](https://docs.stripe.com/issuing/purchases/authorizations#fuel-dispenser-transactions) unless you’ve provided a different partial authorization amount in your response to the `issuing_authorization.request` webhook.\n\nMake note of the authorization `id` that you’ll use to capture the funds:\n\n`{   \"id\": \"iauth_1NvPyY2SSJdH5vn2xZQE8C7k\",   \"object\": \"issuing.authorization\",   \"amount\": 10000,   ...   \"fleet\": {     \"cardholder_prompt_data\": {       \"odometer\": 42424,     },     \"purchase_type\": \"fuel_purchase\",     \"service_type\": \"self_service\",   },   \"status\": \"pending\",   \"transactions\": [], }`\n\n### Simulate fuel dispenser completion ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn test mode, you can simulate the completion of fuel being dispensed using the following code:\n\n`curl https://api.stripe.com/v1/test_helpers/issuing/authorizations/`\n\n`{{AUTHORIZATION_ID}}`\n\n`/finalize_amount \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d final_amount=1000 \\  -d \"fleet[cardholder_prompt_data][odometer]\"=42424 \\  -d \"fleet[purchase_type]\"=fuel_purchase \\  -d \"fleet[reported_breakdown][fuel][gross_amount_decimal]\"=\"10.0\" \\  -d \"fleet[reported_breakdown][non_fuel][gross_amount_decimal]\"=0 \\  -d \"fleet[reported_breakdown][tax][local_amount_decimal]\"=\"0.03\" \\  -d \"fleet[service_type]\"=self_service \\  -d \"fuel[industry_product_code]\"=001 \\  -d \"fuel[quantity_decimal]\"=\"5.0\" \\  -d \"fuel[type]\"=unleaded_regular \\  -d \"fuel[unit]\"=us_gallon \\  -d \"fuel[unit_cost_decimal]\"=200`\n\nThe `Authorization` remains in a `pending` state until it’s [captured](https://docs.stripe.com/issuing/purchases/transactions). The amount is updated to reflect the total amount of fuel dispensed, and additional fleet-specific fields are now available:\n\n`{   \"id\": \"iauth_1NvPyY2SSJdH5vn2xZQE8C7k\",   \"object\": \"issuing.authorization\",   \"amount\": 1000,   ...   \"fleet\": {     \"cardholder_prompt_data\": {       \"odometer\": 42424,     },     \"purchase_type\": \"fuel_purchase\",     \"reported_breakdown\": {       \"fuel\": {         \"gross_amount_decimal\": \"10.0\",       },       \"non_fuel\": {         \"gross_amount_decimal\": \"0\"       },       \"tax\": {         \"local_amount_decimal\": \"0.03\",         \"national_amount_decimal\": null       }     },     \"service_type\": \"self_service\",   },   \"fuel\": {     \"industry_product_code\": \"001\",     \"quantity_decimal\": \"5.0\",     \"type\": \"unleaded_regular\",     \"unit\": \"us_gallon\",     \"unit_cost_decimal\": \"200\",   },   \"status\": \"pending\",   \"transactions\": [], }`\n\n### Capture the funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn testmode, you can capture the funds using the following code:\n\n`curl https://api.stripe.com/v1/test_helpers/issuing/authorizations/`\n\n`{{AUTHORIZATION_ID}}`\n\n`/capture \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"purchase_details[fleet][cardholder_prompt_data][odometer]\"=42424 \\  -d \"purchase_details[fleet][purchase_type]\"=fuel_purchase \\  -d \"purchase_details[fleet][reported_breakdown][fuel][gross_amount_decimal]\"=\"10.0\" \\  -d \"purchase_details[fleet][reported_breakdown][non_fuel][gross_amount_decimal]\"=0 \\  -d \"purchase_details[fleet][reported_breakdown][tax][local_amount_decimal]\"=\"0.03\" \\  -d \"purchase_details[fleet][service_type]\"=self_service \\  -d \"purchase_details[fuel][industry_product_code]\"=001 \\  -d \"purchase_details[fuel][quantity_decimal]\"=\"5.0\" \\  -d \"purchase_details[fuel][type]\"=unleaded_regular \\  -d \"purchase_details[fuel][unit]\"=us_gallon \\  -d \"purchase_details[fuel][unit_cost_decimal]\"=200`\n\nAfter the authorization is captured, Stripe creates an Issuing [Transaction](https://docs.stripe.com/issuing/purchases/transactions), the `status` of the authorization is set to `closed`.\n\nAs a user with a Commercial Fleet card program, you receive specific fleet-related data on the [Transaction](https://docs.stripe.com/api/issuing/transactions), (for example, to reconcile purchases).\n\n`{   \"id\": \"ipi_1MykXhFtDWhhyHE1UjsZZ3xQ\",   \"object\": \"issuing.transaction\",   \"amount\": 1000,   ...   \"purchase_details\": {     \"fleet\": {       \"cardholder_prompt_data\": {         \"odometer\": 42424,       },       \"purchase_type\": \"fuel_purchase\",       \"reported_breakdown\": {         \"fuel\": {           \"gross_amount_decimal\": \"10.0\",         },         \"non_fuel\": {           \"gross_amount_decimal\": \"0\"         },         \"tax\": {           \"local_amount_decimal\": \"0.03\",           \"national_amount_decimal\": null         }       },       \"service_type\": \"self_service\",     },     \"fuel\": {       \"industry_product_code\": \"001\",       \"quantity_decimal\": \"5.0\",       \"type\": \"unleaded_regular\",       \"unit\": \"us_gallon\",       \"unit_cost_decimal\": \"200\",     },   } }`\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Handling real-time auth webhooks](https://docs.stripe.com/issuing/controls/real-time-authorizations)\n*   [Spending controls](https://docs.stripe.com/issuing/controls/spending-controls)\n*   [Issuing authorizations](https://docs.stripe.com/issuing/purchases/authorizations)\n*   [Issuing transactions](https://docs.stripe.com/issuing/purchases/transactions)\n*   [Testing Issuing](https://docs.stripe.com/issuing/testing)\n*   [Working with Stripe Issuing cards and Treasury](https://docs.stripe.com/treasury/account-management/issuing-cards)\n*   [Manage transaction fraud](https://docs.stripe.com/issuing/manage-fraud)\n*   [Issue regulated customer notices](https://docs.stripe.com/issuing/compliance-us/issuing-regulated-customer-notices)",
  "title": "Fleet integration guide | Stripe Documentation",
  "description": "Build a Fleet financial services integration with Issuing.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/supported-embedded-components/account-management",
  "markdown": "# Account management | Stripe DocumentationThe Stripe Docs logo\n\n## Show account details and allow them to be edited.\n\nRenders a UI component for connected accounts to view and manage their account details. Connected accounts can view and edit account information like personal or business information, public information, and payout bank accounts.\n\n### Requirements collection options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a connected account has outstanding [requirements](https://docs.stripe.com/api/accounts/object#account_object-requirements), embedded account management prompts the connected account to update their information. You can control the collection of `currently_due` or `eventually_due` requirements, and whether to include [future requirements](https://docs.stripe.com/connect/handle-verification-updates), using the `collectionOptions` attribute.\n\n### External account collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [external\\_account\\_collection](https://docs.stripe.com/api/account_sessions/create#create_account_session-components-account_management-features-external_account_collection) feature to control whether the account management component collects external account information. This parameter is enabled by default, and only platforms responsible for collecting updated information when requirements are due or change (including Custom accounts) can disable it. When enabled, this option requires [user authentication](https://docs.stripe.com/connect/get-started-connect-embedded-components#user-authentication-in-connect-embedded-components).\n\n### Create an Account Session![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable account management by specifying `account_management` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[account_management][enabled]\"=true \\  -d \"components[account_management][features][external_account_collection]\"=true`\n\n### Render the account management component![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`// Include this element in your HTML const accountManagement = stripeConnectInstance.create('account-management'); container.appendChild(accountManagement);  // Optional: // accountManagement.setCollectionOptions({ //   fields: 'eventually_due', //   futureRequirements: 'include', // })`\n\n| Method | Type | Description | Default |\n| --- | --- | --- | --- | --- |\n| `setCollectionOptions` | `{ fields: 'currently_due' \\| 'eventually_due', future_requirements: 'omit' \\| 'include' }` | Customizes collecting `currently_due` or `eventually_due` requirements and controls whether to include [future requirements](https://docs.stripe.com/api/accounts/object#account_object-future_requirements). Specifying `eventually_due` collects both `eventually_due` and `currently_due` requirements. | `{fields: 'currently_due', futureRequirements: 'omit'}` |     |",
  "title": "Account management | Stripe Documentation",
  "description": "Show account details and allow them to be edited.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/authorizations",
  "markdown": "# Authorizations | Stripe API Reference\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [The Authorization object](https://docs.stripe.com/api/issuing/authorizations/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The total amount that was authorized or rejected. This amount is in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `amount` should be the same as `merchant_amount`, unless `currency` and `merchant_currency` are different.\n    \n*   Whether the authorization has been approved.\n    \n*   Card associated with this authorization.\n    \n*   #### \n    \n    cardholdernullable stringExpandable\n    \n    The cardholder to whom this authorization belongs.\n    \n*   The currency of the cardholder. This currency can be different from the currency presented at authorization and the `merchant_currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The current status of the authorization in its lifecycle.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `closed`<br><br>The authorization was declined or [captured](https://docs.stripe.com/issuing/purchases/transactions) through one or more [transactions](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-transactions). |\n    | `pending`<br><br>The authorization was created and is awaiting approval or was approved and is awaiting [capture](https://docs.stripe.com/issuing/purchases/transactions). |\n    | `reversed`<br><br>The authorization was reversed by the merchant or expired without capture. |\n    \n\n### More attributes\n\n*   #### \n    \n    amount\\_detailsnullable object\n    \n\n*   #### \n    \n    balance\\_transactionsarray of objects\n    \n\n*   #### \n    \n    network\\_datanullable object\n    \n*   #### \n    \n    pending\\_requestnullable object\n    \n*   #### \n    \n    request\\_historyarray of objects\n    \n*   #### \n    \n    tokennullable stringPreview featureExpandable\n    \n*   #### \n    \n    transactionsarray of objects\n    \n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Update an authorization](https://docs.stripe.com/api/issuing/authorizations/update)\n\nUpdates the specified Issuing `Authorization` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an updated Issuing `Authorization` object if a valid identifier was provided.\n\nPOST /v1/issuing/authorizations/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/authorizations/iauth_1JVXl82eZvKYlo2CPIiWlzrn \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Retrieve an authorization](https://docs.stripe.com/api/issuing/authorizations/retrieve)\n\nRetrieves an Issuing `Authorization` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Authorization` object if a valid identifier was provided.\n\nGET /v1/issuing/authorizations/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/authorizations/iauth_1JVXl82eZvKYlo2CPIiWlzrn \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [List all authorizations](https://docs.stripe.com/api/issuing/authorizations/list)\n\nReturns a list of Issuing `Authorization` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Only return authorizations that belong to the given card.\n    \n*   Only return authorizations that belong to the given cardholder.\n    \n*   Only return authorizations with the given status. One of `pending`, `closed`, or `reversed`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` authorizations, starting after authorization `starting_after`. Each entry in the array is a separate Issuing `Authorization` object. If no more authorizations are available, the resulting array will be empty.\n\nGET /v1/issuing/authorizations\n\n```\ncurl -G https://api.stripe.com/v1/issuing/authorizations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/authorizations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",      \"object\": \"issuing.authorization\",      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"authorization_method\": \"online\",      \"balance_transactions\": [],      \"card\": {        \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",        \"object\": \"issuing.card\",        \"brand\": \"Visa\",        \"cancellation_reason\": null,        \"cardholder\": {          \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",          \"object\": \"issuing.cardholder\",          \"billing\": {            \"address\": {              \"city\": \"San Francisco\",              \"country\": \"US\",              \"line1\": \"123 Main Street\",              \"line2\": null,              \"postal_code\": \"94111\",              \"state\": \"CA\"            }          },          \"company\": null,          \"created\": 1626425119,          \"email\": \"jenny.rosen@example.com\",          \"individual\": null,          \"livemode\": false,          \"metadata\": {},          \"name\": \"Jenny Rosen\",          \"phone_number\": \"+18008675309\",          \"redaction\": null,          \"requirements\": {            \"disabled_reason\": null,            \"past_due\": []          },          \"spending_controls\": {            \"allowed_categories\": [],            \"blocked_categories\": [],            \"spending_limits\": [],            \"spending_limits_currency\": null          },          \"status\": \"active\",          \"type\": \"individual\"        },        \"created\": 1626425206,        \"currency\": \"usd\",        \"exp_month\": 6,        \"exp_year\": 2024,        \"last4\": \"8693\",        \"livemode\": false,        \"metadata\": {},        \"redaction\": null,        \"replaced_by\": null,        \"replacement_for\": null,        \"replacement_reason\": null,        \"shipping\": null,        \"spending_controls\": {          \"allowed_categories\": null,          \"blocked_categories\": null,          \"spending_limits\": [            {              \"amount\": 50000,              \"categories\": [],              \"interval\": \"daily\"            }          ],          \"spending_limits_currency\": \"usd\"        },        \"status\": \"active\",        \"type\": \"virtual\",        \"wallets\": {          \"apple_pay\": {            \"eligible\": true,            \"ineligible_reason\": null          },          \"google_pay\": {            \"eligible\": true,            \"ineligible_reason\": null          },          \"primary_account_identifier\": null        }      },      \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"created\": 1630657706,      \"currency\": \"usd\",      \"livemode\": false,      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"merchant_data\": {        \"category\": \"computer_software_stores\",        \"category_code\": \"5734\",        \"city\": \"SAN FRANCISCO\",        \"country\": \"US\",        \"name\": \"STRIPE\",        \"network_id\": \"1234567890\",        \"postal_code\": \"94103\",        \"state\": \"CA\"      },      \"metadata\": {        \"order_id\": \"6735\"      },      \"network_data\": null,      \"pending_request\": null,      \"redaction\": null,      \"request_history\": [        {          \"amount\": 382,          \"amount_details\": {            \"atm_fee\": null          },          \"approved\": false,          \"created\": 1630657706,          \"currency\": \"usd\",          \"merchant_amount\": 382,          \"merchant_currency\": \"usd\",          \"reason\": \"verification_failed\",          \"reason_message\": null        }      ],      \"status\": \"closed\",      \"transactions\": [],      \"verification_data\": {        \"address_line1_check\": \"not_provided\",        \"address_postal_code_check\": \"not_provided\",        \"cvc_check\": \"mismatch\",        \"expiry_check\": \"match\"      },      \"wallet\": null    }    {...}    {...}  ],}\n```",
  "title": "Authorizations | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/supported-embedded-components/account-onboarding",
  "markdown": "# Account onboarding | Stripe DocumentationThe Stripe Docs logo\n\n## Show a localized onboarding form that validates data.\n\nThe Account onboarding component uses the [Accounts API](https://docs.stripe.com/api/accounts) to read requirements and generate an onboarding form that’s localized for all Stripe-supported countries and that validates data. In addition, Embedded onboarding handles all business types, various configurations of company representatives, document uploads, identity verification, and verification statuses. See [Embedded onboarding](https://docs.stripe.com/connect/embedded-onboarding) for more information.\n\n## Requirements collection options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWith embedded onboarding, you can control the collection of `currently_due` or `eventually_due` requirements, along with the inclusion of [future requirements](https://docs.stripe.com/connect/handle-verification-updates). You can customize this behavior by using the `collectionOptions` attribute when integrating the account onboarding component.\n\n## External account collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [external\\_account\\_collection](https://docs.stripe.com/api/account_sessions/create#create_account_session-components-account_onboarding-features-external_account_collection) feature to control whether the account onboarding component collects external account information. This parameter is enabled by default, and only platforms responsible for collecting updated information when requirements are due or change (including Custom accounts) can disable it. When enabled, this option requires [user authentication](https://docs.stripe.com/connect/get-started-connect-embedded-components#user-authentication-in-connect-embedded-components).\n\n## Customize policies shown to your users![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnected accounts see Stripe’s service agreement and [Privacy Policy](https://stripe.com/privacy) during embedded onboarding. Connected account users who haven’t [accepted Stripe’s services agreement](https://docs.stripe.com/connect/service-agreement-types#accepting-the-correct-agreement) must accept it on the final onboarding screen. Embedded onboarding also has a footer with links to Stripe’s service agreement and [Privacy Policy](https://stripe.com/privacy).\n\nFor connected accounts where the platform is responsible for requirement collection, you have additional options to customize the onboarding flow, as outlined below.\n\n### Handle service agreement acceptance on your own![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re a platform onboarding connected accounts where you’re responsible for requirement collection, you can [collect Terms of Service acceptance](https://docs.stripe.com/connect/updating-service-agreements#tos-acceptance) using your own process instead of using the embedded account onboarding component. If using your own process, the final onboarding screen only asks your connected accounts to confirm the information they entered, and you must secure their acceptance of Stripe’s service agreement.\n\nEmbedded onboarding still has links to the terms of service (for example, in the footer) that you can replace by [linking to your own agreements and privacy policy](#link-to-your-own-agreements-and-privacy-policy).\n\n### Link to your agreements and privacy policy ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConnected accounts see the Stripe service agreement and [Privacy Policy](https://stripe.com/privacy) throughout embedded onboarding. For the connected accounts where you’re responsible for requirement collection, you can replace the links with your own agreements and policy. Follow the instructions to [incorporate the Stripe services agreement](https://docs.stripe.com/connect/updating-service-agreements#adding-stripes-service-agreement-to-your-terms-of-service) and [link to the Stripe Privacy Policy](https://docs.stripe.com/connect/updating-service-agreements#disclosing-how-stripe-processes-user-data).\n\n## Create an Account Session![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable account onboarding by specifying `account_onboarding` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[account_onboarding][enabled]\"=true \\  -d \"components[account_onboarding][features][external_account_collection]\"=true`\n\nAfter creating the Account Session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the Account onboarding component in the front end:\n\n`// Include this element in your HTML const accountOnboarding = stripeConnectInstance.create('account-onboarding'); accountOnboarding.setOnExit(() => {   console.log('User exited the onboarding flow'); }); container.appendChild(accountOnboarding);  // Optional: make sure to follow our policy instructions above // accountOnboarding.setFullTermsOfServiceUrl('{{URL}}') // accountOnboarding.setRecipientTermsOfServiceUrl('{{URL}}') // accountOnboarding.setPrivacyPolicyUrl('{{URL}}') // accountOnboarding.setSkipTermsOfServiceCollection(false) // accountOnboarding.setCollectionOptions({ //   fields: 'eventually_due', //   futureRequirements: 'include', // })`\n\n| Method | Type | Description | Default |\n| --- | --- | --- | --- |\n| `setFullTermsOfServiceUrl` | `string` | Absolute URL to your [full terms of service](https://docs.stripe.com/connect/service-agreement-types#full) agreement. | [Stripe’s full service agreement](https://stripe.com/connect-account/legal/full) |\n| `setRecipientTermsOfServiceUrl` | `string` | Absolute URL to your [recipient terms of service](https://docs.stripe.com/connect/service-agreement-types#recipient) agreement. | [Stripe’s recipient service agreement](https://stripe.com/connect-account/legal/recipient) |\n| `setPrivacyPolicyUrl` | `string` | Absolute URL to your privacy policy. | [Stripe’s privacy policy](https://stripe.com/privacy) |\n| `setSkipTermsOfServiceCollection` | `string` | If true, embedded onboarding skips terms of service collection and you must [collect terms acceptance yourself](https://docs.stripe.com/connect/updating-service-agreements#indicating-acceptance). | false |\n| `setCollectionOptions` | `{ fields: 'currently_due' \\| 'eventually_due', future_requirements: 'omit' \\| 'include' }` | Customizes collecting `currently_due` or `eventually_due` requirements and controls whether to include [future requirements](https://docs.stripe.com/api/accounts/object#account_object-future_requirements). Specifying `eventually_due` collects both `eventually_due` and `currently_due` requirements. | `{fields: 'currently_due', futureRequirements: 'omit'}` |\n| `setOnExit` | `() => void` | The connected account has exited the onboarding process |     |\n\nTo use this component to set up new accounts:\n\n1.  Create a [connected account](https://docs.stripe.com/api/accounts). You can prefill information on the account object in this API call.\n2.  [Initialize Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions) using the ID of the connected account.\n3.  Include the `account-onboarding` element to show the onboarding flow to the connected account.\n4.  Listen for the `exit` event emitted from this component. Stripe sends this event when the connected account exits the onboarding process.",
  "title": "Account onboarding | Stripe Documentation",
  "description": "Show a localized onboarding form that validates data.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/supported-embedded-components/balances",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Balances\n\n## Show balance information and allow your connected accounts to perform payouts.\n\nRenders the balance summary and the payout schedule. It can also allow the connected account to perform instant or manual payouts.\n\n#### Note\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable balances by specifying `balances` in the `components` parameter. You can enable or disable individual features of the balances component by specifying the `features` parameter under `balances`:\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[balances][enabled]\"=true \\  -d \"components[balances][features][instant_payouts]\"=true \\  -d \"components[balances][features][standard_payouts]\"=true \\  -d \"components[balances][features][edit_payout_schedule]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the balances component in the front end:\n\n`// Include this element in your HTML const balances = stripeConnectInstance.create('balances'); container.appendChild(balances);`\n\nEnabling Instant Payouts might require additional steps:\n\n*   If your platform collects fees for a connected account, you must set up Instant Payout monetization in the [Dashboard](https://dashboard.stripe.com/settings/connect/payouts/instant-payouts).\n*   If your platform is liable for a connected account’s negative balances, your platform must be in a supported country and the account must be in the [same country as the platform](https://docs.stripe.com/connect/instant-payouts#eligible-connected-accounts).\n*   If Stripe is liable for a connected account’s negative balances, [Stripe controls eligibility](https://docs.stripe.com/payouts/instant-payouts#eligibility-and-daily-volume-limits) for the account.\n\n#### Note\n\nTo use standard manual payouts, the connected account needs to have their [payout schedule](https://docs.stripe.com/connect/manage-payout-schedule) set to `manual`. You can enable payout schedule editing in the payouts component by setting the `edit_payout_schedule` feature to `true`.",
  "title": "Balances | Stripe Documentation",
  "description": "Show balance information and allow your connected accounts to perform payouts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/supported-embedded-components/documents",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Documents\n\n## Show a list of documents available for download.\n\nRenders a list of documents available for download for the connected account.\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable documents by specifying `documents` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[documents][enabled]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the documents component in the front end:\n\n`// Include this element in your HTML const documents = stripeConnectInstance.create('documents'); container.appendChild(documents);`",
  "title": "Documents | Stripe Documentation",
  "description": "Show a list of documents available for download.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/supported-embedded-components/notification-banner",
  "markdown": "# Notification banner | Stripe DocumentationThe Stripe Docs logo\n\n## Show a banner that lists required actions for risk interventions and onboarding requirements.\n\nRenders a notification banner that lists open risk intervention tasks and onboarding requirements that can impact certain capabilities, such as accepting payments and payouts. This component helps to maintain your account’s active status after initial onboarding and allows you to resolve any outstanding requirements or risk intervention tasks. It only renders if your connected account has risk intervention tasks or current due requirements; if not, it doesn’t render any UI.\n\n### Requirements collection options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can control the collection of `currently_due` or `eventually_due` requirements and the inclusion of [future requirements](https://docs.stripe.com/connect/handle-verification-updates) by using the `collectionOptions` attribute when you integrate the notification banner component.\n\n### External account collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [external\\_account\\_collection](https://docs.stripe.com/api/account_sessions/create#create_account_session-components-notification_banner-features-external_account_collection) feature to control whether the notification banner component collects external account information. This parameter is enabled by default, and only platforms responsible for collecting updated information when requirements are due or change (including Custom accounts) can disable it. When enabled, this option requires [user authentication](https://docs.stripe.com/connect/get-started-connect-embedded-components#user-authentication-in-connect-embedded-components).\n\n### Create an Account Session ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable notification banner by specifying `notification_banner` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[notification_banner][enabled]\"=true \\  -d \"components[notification_banner][features][external_account_collection]\"=true`\n\n`// Include this element in your HTML const notificationBanner = stripeConnectInstance.create('notification-banner'); container.appendChild(notificationBanner);  // Optional: // notificationBanner.setCollectionOptions({ //   fields: 'eventually_due', //   futureRequirements: 'include', // })`\n\n| Method | Type | Description | Default |\n| --- | --- | --- | --- | --- |\n| `setCollectionOptions` | `{ fields: 'currently_due' \\| 'eventually_due', future_requirements: 'omit' \\| 'include' }` | Customizes collecting `currently_due` or `eventually_due` requirements and controls whether to include [future requirements](https://docs.stripe.com/api/accounts/object#account_object-future_requirements). Specifying `eventually_due` collects both `eventually_due` and `currently_due` requirements. | `{fields: 'currently_due', futureRequirements: 'omit'}` |     |\n\n## Testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo test this component in test mode, specify different [test inputs](https://docs.stripe.com/connect/testing) for fields that fail verifications or generate requirements on the account. For example, you can use the [account management component](https://docs.stripe.com/connect/supported-embedded-components/account-management) to enter `address_no_match` in `line1` of an individual’s address to trigger an address mismatch.",
  "title": "Notification banner | Stripe Documentation",
  "description": "Show a banner that lists required actions for risk interventions and onboarding requirements.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/supported-embedded-components/payments",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Payments\n\n## Show a list of payments with export, refund, and dispute capabilities.\n\nRenders a transaction list for [direct charges](https://docs.stripe.com/connect/direct-charges), [destination charges](https://docs.stripe.com/connect/destination-charges), and [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers) on the connected account.\n\nBy default, the embedded components offer limited information for destination charges and separate charges and transfers. They don’t provide access to customer information, payment methods, and some charge amount details. The [destination\\_on\\_behalf\\_of\\_charge\\_management](https://docs.stripe.com/connect/supported-embedded-components/payments#allow-your-connected-accounts-to-manage-destination-charges) feature allows a connected account to see additional information with destination charges, as well as perform refunds and manage disputes.\n\n### Create an Account Session![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable the payments embedded component by specifying `payments` in the `components` parameter. You can turn on or off an individual feature of the payments component by specifying the `features` parameter under `payments`:\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[payments][enabled]\"=true \\  -d \"components[payments][features][refund_management]\"=true \\  -d \"components[payments][features][dispute_management]\"=true \\  -d \"components[payments][features][capture_payments]\"=true \\  -d \"components[payments][features][destination_on_behalf_of_charge_management]\"=false`\n\nThe payments component shows different information and supports different features for different charge types:\n\n*   For direct charges, your connected accounts can view the complete set of information. They can also manage refunds, manage disputes, and capture payments if you enable the corresponding features when creating an account session.\n*   For [destination charges](https://docs.stripe.com/connect/destination-charges) and [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers), your connected accounts can only see the transfer object associated with the selected charge, which contains limited information.\n*   For destination charges with the [on\\_behalf\\_of](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-on_behalf_of) attribute, your connected accounts can view the complete set of information when the `destination_on_behalf_of_charge_management` feature is enabled. When this feature is turned on, you can also enable refund and disputes management by enabling the corresponding features.\n\n### Allow your connected accounts to manage destination charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you set the `destination_on_behalf_of_charge_management` feature to `true`, your connected accounts can use the payments component to view and manage [destination charges](https://docs.stripe.com/connect/destination-charges) that have the [on\\_behalf\\_of](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-on_behalf_of) attribute. If you also turn on the `dispute_management` feature, your connected accounts can [participate directly in handling their disputes](https://docs.stripe.com/connect/supported-embedded-components/payments#dispute-management-for-destination-charges).\n\nEnabling the `destination_on_behalf_of_charge_management` feature has the following limitations:\n\n1.  You can’t filter by charge status or payment methods.\n2.  You can’t export certain data columns.\n\n### Render the payments component![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the payments component in the front end:\n\n`// Include this element in your HTML const payments = stripeConnectInstance.create('payments'); container.appendChild(payments);`\n\n## Dispute management for destination charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a [dispute](https://docs.stripe.com/disputes/connect) occurs on [destination charges](https://docs.stripe.com/connect/destination-charges) or [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers), the platform is debited the disputed amount and a dispute fee. Connect embedded components don’t reverse the transfer to the connected account regardless of the Account Session features. We recommend setting up [webhooks](https://docs.stripe.com/api/webhook_endpoints) to listen to [dispute events](https://docs.stripe.com/api/events/types#event_types-charge.dispute.created). When a dispute is created, you can create an [account debit](https://docs.stripe.com/connect/account-debits#charging-a-connected-account) or a [transfer reversal](https://docs.stripe.com/api#create_transfer_reversal) on the transfer to your connected account. You can also reverse the transfer to your connected account through the [Dashboard](https://dashboard.stripe.com/test/transfers). When a dispute is closed, you can then update the balance on your connected account depending on the result of the dispute. If your connected account won the dispute, you can [create a transfer](https://docs.stripe.com/api#create_transfer) to reverse the effect of the account debit or transfer reversal.\n\nWhen both `dispute_management` and `destination_on_behalf_of_charge_management` are enabled, the connected accounts can update and modify dispute evidence, counter disputes, and accept disputes for destination charges with the `on_behalf_of` attribute set to them.\n\n## Customizing description![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo display a custom description within the payment component for [destination charges](https://docs.stripe.com/connect/destination-charges) and [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers), follow these steps:\n\n### Destination charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo update the [description](https://docs.stripe.com/api/charges/object#charge_object-description) on a payment object that’s visible to your platform’s users, you need to use the Stripe API. This applies to all platforms that use [destination charges](https://docs.stripe.com/connect/destination-charges).\n\n1.  Find the existing transfer object you created for an account by finding the latest [charge](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-charges) created on the [PaymentIntent](https://docs.stripe.com/api/payment_intents/object).\n2.  Use the charge object to find the [transfer](https://docs.stripe.com/api/charges/object#charge_object-transfer) object associated with the charge.\n3.  Use the transfer object to find the [destination\\_payment](https://docs.stripe.com/api/transfers/object#transfer_object-destination_payment) ID that exists on the transfer.\n4.  Call the [Update Charge](https://docs.stripe.com/api/charges/update) API to update the [description](https://docs.stripe.com/api/charges/update#update_charge-description) on the destination payment using the `destination_payment` ID.\n\n#### Note\n\n`curl https://api.stripe.com/v1/charges/`\n\n`{{PAYMENT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d description=\"My custom description\"`\n\nThis description becomes visible on the charge after you’ve written this field.\n\nLearn more about [creating destination charges on your platform](https://docs.stripe.com/connect/destination-charges).\n\n### Separate charges and transfers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo update the [description](https://docs.stripe.com/api/charges/object#charge_object-description) on a payment object that’s visible to your platform’s users, you need to use the Stripe API. This applies to platforms that use [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers).\n\n1.  Use the transfer object to find the [destination\\_payment](https://docs.stripe.com/api/transfers/object#transfer_object-destination_payment) ID that exists on the transfer.\n2.  Call the [Update Charge](https://docs.stripe.com/api/charges/update) API to update the [description](https://docs.stripe.com/api/charges/update#update_charge-description) on the destination payment using the `destination_payment` ID found in the previous step.\n\n#### Note\n\n`curl https://api.stripe.com/v1/charges/`\n\n`{{PAYMENT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d description=\"My custom description\"`\n\nThis description becomes visible on the charge after you’ve written this field.\n\nLearn more about [creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers).",
  "title": "Payments | Stripe Documentation",
  "description": "Show a list of payments with export, refund, and dispute capabilities.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/supported-embedded-components/payment-details",
  "markdown": "# Payment details | Stripe DocumentationThe Stripe Docs logo\n\n## Show details of a given payment and allow users to manage disputes and perform refunds.\n\nThis component is a subset of `payments`, which provides the detail overlay of a given payment. The UI rendered by the payment details component is equivalent to the overlay that the `payments` component renders when the user clicks on a payment row.\n\nUse the `payment-details` component to invoke the payment details overlay without the need to inline the entirety of the `payments` list in your website. This allows you to invoke the payment detail overlay from your existing UI (for example, your payments list) and integrate with our detail view to enable your customers to view payment details, issue refunds, and manage disputed payments.\n\nBy default, the embedded components offer limited information for destination charges and separate charges and transfers. They don’t provide access to customer information, payment methods, and some charge amount details. The [destination\\_on\\_behalf\\_of\\_charge\\_management](https://docs.stripe.com/connect/supported-embedded-components/payment-details#allow-your-connected-accounts-to-manage-destination-charges) feature allows a connected account to see additional information with destination charges, as well as perform refunds and manage disputes.\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable payment details by specifying `payment_details` in the `components` parameter. You can turn on or off an individual feature of the payment details component by specifying the `features` parameter under `payment_details`:\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[payment_details][enabled]\"=true \\  -d \"components[payment_details][features][refund_management]\"=true \\  -d \"components[payment_details][features][dispute_management]\"=true \\  -d \"components[payment_details][features][capture_payments]\"=true \\  -d \"components[payment_details][features][destination_on_behalf_of_charge_management]\"=false`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the payment details component in the frontend:\n\n`// Include this element in your HTML const paymentDetails = stripeConnectInstance.create('payment-details'); paymentDetails.setPayment('{{PAYMENT_OR_PAYMENT_INTENT_ID}}'); // use setOnClose to set a callback function to close payment-details paymentDetails.setOnClose(() => {   paymentDetails.remove(); }); container.appendChild(paymentDetails);`\n\n#### Note\n\nFor [destination charges](https://docs.stripe.com/connect/destination-charges) and [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers), the connected accounts don’t own the payment intent objects associated with the charges. Pass in the ID of the payment object that belongs to the connected account for these charges.\n\nThe payment details component shows different information and supports different features for different charge types:\n\n*   For direct charges, your connected accounts can view the complete set of information. They can also manage refunds, manage disputes, and capture payments if you enable the corresponding features when creating an account session.\n*   For [destination charges](https://docs.stripe.com/connect/destination-charges) and [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers), your connected accounts can only see the transfer object associated with the selected charge, which contains limited information.\n*   For destination charges with the [on\\_behalf\\_of](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-on_behalf_of) attribute, your connected accounts can view the complete set of information when the `destination_on_behalf_of_charge_management` feature is enabled. When this feature is turned on, you can also enable refund and disputes management by enabling the corresponding features.\n\n### Allow your connected accounts to manage destination charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you set the `destination_on_behalf_of_charge_management` feature to `true`, your connected accounts can use the payments component to view and manage [destination charges](https://docs.stripe.com/connect/destination-charges) that have the [on\\_behalf\\_of](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-on_behalf_of) attribute. If you also turn on the `dispute_management` feature, your connected accounts can [participate directly in handling their disputes](https://docs.stripe.com/connect/supported-embedded-components/payments#dispute-management-for-destination-charges).\n\nEnabling the `destination_on_behalf_of_charge_management` feature has the following limitations:\n\n1.  You can’t filter by charge status or payment methods.\n2.  You can’t export certain data columns.\n\n### Dispute management for destination charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a [dispute](https://docs.stripe.com/disputes/connect) occurs on [destination charges](https://docs.stripe.com/connect/destination-charges) or [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers), the platform is debited the disputed amount and a dispute fee. Connect embedded components don’t reverse the transfer to the connected account regardless of the Account Session features. We recommend setting up [webhooks](https://docs.stripe.com/api/webhook_endpoints) to listen to [dispute events](https://docs.stripe.com/api/events/types#event_types-charge.dispute.created). When a dispute is created, you can create an [account debit](https://docs.stripe.com/connect/account-debits#charging-a-connected-account) or a [transfer reversal](https://docs.stripe.com/api#create_transfer_reversal) on the transfer to your connected account. You can also reverse the transfer to your connected account through the [Dashboard](https://dashboard.stripe.com/test/transfers). When a dispute is closed, you can then update the balance on your connected account depending on the result of the dispute. If your connected account won the dispute, you can [create a transfer](https://docs.stripe.com/api#create_transfer) to reverse the effect of the account debit or transfer reversal.\n\nWhen both `dispute_management` and `destination_on_behalf_of_charge_management` are enabled, the connected accounts can update and modify dispute evidence, counter disputes, and accept disputes for destination charges with the `on_behalf_of` attribute set to them.\n\n### Supported parameters![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis embedded component supports the following parameters:\n\n| Method | Type | Description |     |\n| --- | --- | --- | --- |\n| `setPayment` | `string` | The ID of the payment, charge, or PaymentIntent that displays in the overlay. This should be an ID of the payment, charge, or PaymentIntent on the connected account. If this attribute isn’t defined, the embedded component renders nothing. To obtain this ID, query the [charges API](https://docs.stripe.com/api/charges) or use a payment ID that you’ve created or stored in your integration. | required |\n| `setOnClose` | `() => void` | We send this event when the user closes the overlay. |     |\n\nTo enable the dismiss behavior of this component, listen to the `close` event by calling `setOnClose`.",
  "title": "Payment details | Stripe Documentation",
  "description": "Show details of a given payment and allow users to manage disputes and perform refunds.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/supported-embedded-components/payouts",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Payouts\n\n## Show payout information and allow your users to perform payouts.\n\nRenders the balance summary, the payout schedule, and a list of payouts for the connected account. It can also allow the user to perform instant or manual payouts.\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable the payouts embedded component by specifying `payouts` in the `components` parameter. You can enable or disable individual features of the payouts component by specifying the `features` parameter under `payouts`:\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[payouts][enabled]\"=true \\  -d \"components[payouts][features][instant_payouts]\"=true \\  -d \"components[payouts][features][standard_payouts]\"=true \\  -d \"components[payouts][features][edit_payout_schedule]\"=true \\  -d \"components[payouts][features][external_account_collection]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the payouts component in the front end:\n\n`// Include this element in your HTML const payouts = stripeConnectInstance.create('payouts'); container.appendChild(payouts);`\n\nEnabling Instant Payouts might require additional steps:\n\n*   If your platform collects fees for a connected account, you must set up Instant Payout monetization in the [Dashboard](https://dashboard.stripe.com/settings/connect/payouts/instant-payouts).\n*   If your platform is liable for a connected account’s negative balances, your platform must be in a supported country and the account must be in the [same country as the platform](https://docs.stripe.com/connect/instant-payouts#eligible-connected-accounts).\n*   If Stripe is liable for a connected account’s negative balances, [Stripe controls eligibility](https://docs.stripe.com/payouts/instant-payouts#eligibility-and-daily-volume-limits) for the account.\n\n#### Note\n\nTo use standard manual payouts, the connected account needs to have their [payout schedule](https://docs.stripe.com/connect/manage-payout-schedule) set to `manual`. You can enable payout schedule editing in the payouts component by setting the `edit_payout_schedule` feature to `true`.",
  "title": "Payouts | Stripe Documentation",
  "description": "Show payout information and allow your users to perform payouts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/supported-embedded-components/payouts-list",
  "markdown": "# Payouts list | Stripe DocumentationThe Stripe Docs logo\n\n## Show a filterable list of payouts.\n\nRenders a list of payouts for the connected account.\n\n#### Note\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable payouts list by specifying `payouts_list` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[payouts_list][enabled]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the payouts list component in the front end:\n\n`// Include this element in your HTML const payoutsList = stripeConnectInstance.create('payouts-list'); container.appendChild(payoutsList);`",
  "title": "Payouts list | Stripe Documentation",
  "description": "Show a filterable list of payouts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/supported-embedded-components/app-install",
  "markdown": "# App install | Stripe DocumentationThe Stripe Docs logo\n\n## App installBeta\n\n## Show a button to install an App.\n\nRenders a component that enables your connected account to install an App.\n\nFor full integration details, see [Accounting software integrations](https://docs.stripe.com/stripe-apps/accounting-software-integrations).\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable app\\_install by specifying `app_install` in the `components` parameter.\n\n#### Note\n\nThe app\\_install component is in private beta, so the Stripe SDKs don’t include it yet. To enable it when creating an account session, use this code snippet with the Stripe beta SDK:\n\n`Stripe.api_key = '{{sk_INSERT_YOUR_SECRET_KEY}}' Stripe.api_version = '2023-10-16; embedded_connect_beta=v2;' account_session = Stripe::AccountSession.create({   account:` \n\n`'{{CONNECTED_ACCOUNT_ID}}'`\n\n`,   components: {     app_install: {enabled: true}   } })`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the app\\_install component in the front end:\n\n`// Include this React component import {useCreateComponent, useAttachAttribute} from '@stripe/react-connect-js'; export const ConnectAppInstallWithAttributes = ({   appId, }: {   appId: string; }): JSX.Element | null => { const {wrapper, component: appInstall} = useCreateComponent(   'stripe-connect-app-install' as any );  useAttachAttribute(appInstall, 'app' as any, appId); return wrapper; };`\n\nThis embedded component supports the following parameters:\n\n| Setter | Type | Description |\n| --- | --- | --- |\n| `setApp` | `string` | Sets the ID of the App your connected account can install. See available apps [here](https://docs.stripe.com/stripe-apps/accounting-software-integrations#app-select). |\n| `setOnAppInstallStateFetched` | `() => void` | Stripe sends this event when the component renders. |\n| `setOnAppInstallStateChanged` | `() => void` | Stripe sends this event when an app finishes installing or uninstalling. |\n\n## Request early access Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fconnect%2Fsupported-embedded-components%2Fapp-install) to request access to this Connect embedded component in beta.\n\nIf you don’t have a Stripe account, you can [register now](https://dashboard.stripe.com/register).",
  "title": "App install | Stripe Documentation",
  "description": "Show a button to install an App.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/supported-embedded-components/app-viewport",
  "markdown": "# App viewport | Stripe DocumentationThe Stripe Docs logo\n\n## App viewportBeta\n\n## Show a view from an installed App.\n\nThe App viewport renders a view from an installed App.\n\nFor full integration details, see [Accounting software integrations](https://docs.stripe.com/stripe-apps/accounting-software-integrations).\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable app\\_viewport by specifying `app_viewport` in the `components` parameter.\n\n#### Note\n\nThe app\\_viewport component is in private beta, so the Stripe SDKs don’t include it yet. To enable it when creating an account session, use this code snippet with the Stripe beta SDK:\n\n`Stripe.api_key = '{{sk_INSERT_YOUR_SECRET_KEY}}' Stripe.api_version = '2023-10-16; embedded_connect_beta=v2;' account_session = Stripe::AccountSession.create({   account:` \n\n`'{{CONNECTED_ACCOUNT_ID}}'`\n\n`,   components: {     app_viewport: {enabled: true}   } })`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the app\\_viewport component in the front end:\n\n`// Include this React component import {useCreateComponent, useAttachAttribute} from '@stripe/react-connect-js'; export const ConnectAppViewportWithAttributes = ({   appId,   appData }: {   appId: string; }): JSX.Element | null => {   const {wrapper, component: appViewport} = useCreateComponent(     'stripe-connect-app-viewport' as any   );    useAttachAttribute(appViewport, 'app' as any, appId);   useAttachAttribute(appViewport, 'appData' as any, appData);    return wrapper; };`\n\nThis embedded component supports the following parameters:\n\n| Setter | Type | Description |\n| --- | --- | --- |\n| `setApp` | Sets the ID of the App your connected account can install. See available apps [here](https://docs.stripe.com/stripe-apps/accounting-software-integrations#app-select). | `string` |\n| `setAppData` | `Record<String, String>` | Sets data pertaining to your platform consumed by the App. |\n\n## Request early access Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fconnect%2Fsupported-embedded-components%2Fapp-viewport) to request access to this Connect embedded component in beta.\n\nIf you don’t have a Stripe account, you can [register now](https://dashboard.stripe.com/register).",
  "title": "App viewport | Stripe Documentation",
  "description": "Show a view from an installed App.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/supported-embedded-components/capital-overview",
  "markdown": "# Capital overview | Stripe DocumentationThe Stripe Docs logo\n\n## Capital overviewBeta\n\n## Renders a financing offer or in-progress financing report for a connected account.\n\nCreates a dedicated space on your website where connected accounts can check their eligibility for financing, get an overview of their in-progress financing, and access the reporting page to review paydown transactions.\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable the capital overview component by specifying `capital_overview` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; embedded_connect_beta=v2;\" \\   -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[capital_overview][enabled]\"=true`\n\nAfter you create the account session and [initialize ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), render the capital overview component in the frontend:\n\n`// Include this element in your HTML const capitalOverview = stripeConnectInstance.create('capital-overview'); container.appendChild(capitalOverview);`\n\n## Request access Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fconnect%2Fsupported-embedded-components%2Fcapital-overview) to request access to this Connect embedded component in beta. If you don’t have a Stripe account, [register now](https://dashboard.stripe.com/register).",
  "title": "Capital overview | Stripe Documentation",
  "description": "Renders a financing offer or in-progress financing report for a connected account.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/supported-embedded-components/financial-account",
  "markdown": "# Financial Account | Stripe DocumentationThe Stripe Docs logo\n\n## Financial AccountBeta\n\n## Show details of a Financial Account.\n\nRenders the view of an individual [Financial Account](https://docs.stripe.com/api/treasury/financial_accounts) for your connected accounts.\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable the financial account component by specifying `financial_account` in the `components` parameter. You can enable or disable individual features of the financial account component by specifying the `features` parameter under `financial_account`.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; embedded_connect_beta=v2;\" \\   -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[financial_account][enabled]\"=true \\  -d \"components[financial_account][features][money_movement]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the financial account component in the frontend:\n\n`// Include this element in your HTML const financialAccount = stripeConnectInstance.create('financial-account'); financialAccount.setFinancialAccount('{{FINANCIAL_ACCOUNT_ID') container.appendChild(financialAccount);`\n\nThis embedded component supports the following parameters:\n\n| Method | Type | Description | Default |\n| --- | --- | --- | --- |\n| `setFinancialAccount` | `string` | The ID of the Financial Account to display. | required |\n\n## Request access Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fconnect%2Fsupported-embedded-components%2Ffinancial-account) to request access to this Connect embedded component in beta.\n\nIf you don’t have a Stripe account, you can [register now](https://dashboard.stripe.com/register).",
  "title": "Financial Account | Stripe Documentation",
  "description": "Show details of a Financial Account.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/supported-embedded-components/financial-account-transactions",
  "markdown": "# Financial account transactions | Stripe DocumentationThe Stripe Docs logo\n\n## Financial account transactionsBeta\n\n## Show a table of all transactions for a financial account.\n\nRenders the view of a list of [transactions](https://docs.stripe.com/api/treasury/transactions) associated with a [financial account](https://docs.stripe.com/api/treasury/financial_accounts) for your connected accounts.\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable the financial account transactions component by specifying `financial_account_transactions` in the `components` parameter. You can enable or disable individual features of the financial account component by specifying the `features` parameter under `financial_account_transactions`.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; embedded_connect_beta=v2;\" \\   -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[financial_account_transactions][enabled]\"=true \\  -d \"components[financial_account_transactions][features][card_spend_dispute_management]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the financial account transactions component in the frontend:\n\nfinancial-account-transactions.js\n\n`// Include this element in your HTML const financialAccountTransactions = stripeConnectInstance.create('financial-account-transactions'); financialAccountTransactions.setFinancialAccount('{{FINANCIAL_ACCOUNT_ID') container.appendChild(financialAccountTransactions);`\n\nThis embedded component supports the following parameters:\n\n| Method | Type | Description |     |\n| --- | --- | --- | --- |\n| `setFinancialAccount` | `string` | The ID of the financial account which you want to display a list of transactions for | required |\n\n## Request access Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fconnect%2Fsupported-embedded-components%2Ffinancial-account-transactions) to request access to this Connect embedded component in beta.\n\nIf you don’t have a Stripe account, you can [register now](https://dashboard.stripe.com/register).",
  "title": "Financial account transactions | Stripe Documentation",
  "description": "Show a table of all transactions for a financial account.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/supported-embedded-components/issuing-card",
  "markdown": "# Issuing card | Stripe DocumentationThe Stripe Docs logo\n\n## Issuing cardBeta\n\n## Show an individual issued card.\n\nRenders the details of an individual [card](https://docs.stripe.com/api/issuing/cards) issued to your connected accounts.\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable the Issuing card component by specifying `issuing_card` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; embedded_connect_beta=v2;\" \\   -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[issuing_card][enabled]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the Issuing card component in the front end:\n\n`// Include this element in your HTML const issuingCard = stripeConnectInstance.create('issuing-card'); issuingCard.setDefaultCard('{{ISSUING_CARD_ID_ID') container.appendChild(issuingCard);`\n\nThis embedded component supports the following attributes:\n\n| Setter | Type | Description |\n| --- | --- | --- |\n| `setDefaultCard` | `(string) => void` | Sets the Issuing [Card](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-id) ID to display upon initial load. |\n| `setCardSwitching` | `(boolean) => void` | Sets whether to render the card dropdown selector. Defaults to true. |\n| `setFetchEphemeralKey` | `(function) => void` | Sets the callback that fetches the ephemeral key for the card. See [sensitive data display](#sensitive-data-display). |\n\n[](#sensitive-data-display)\n\nIssuing Connect embedded components integrate with [Issuing Elements](https://docs.stripe.com/issuing/elements) to provide a PCI-compliant way for you to allow your admins to view card numbers (PANs) and CVV or CVCs for virtual cards. The sensitive data renders inside Stripe-hosted iframes and never touches your servers.\n\nThe components can use an ephemeral key to securely retrieve card information from the Stripe API without publicly exposing your secret keys.\n\nTo enable this functionality you must:\n\n1.  Set up an ephemeral key exchange on your server.\n2.  Pass an asynchronous callback to the components.\n\nStripe generates a `nonce` from the [Card ID](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-id) in the Issuing Card or Issuing Cards List component when a card is selected or loaded. Stripe then calls your callback function which returns an ephemeral key, and then renders a `Show numbers` button if the ephemeral key is valid.\n\n### Ephemeral key exchange![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour server-side endpoint needs to accept a [Card ID](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-id) and a `nonce`. It can then create an ephemeral key using Stripe.\n\nHere’s how you might implement an ephemeral key creation endpoint in web application frameworks across various languages:\n\n`// This example sets up an endpoint using the Express framework. // Watch this video to get started: [https://youtu.be/rPR2aJ6XnAc](https://youtu.be/rPR2aJ6XnAc)  const express = require('express'); const bodyParser = require('body-parser'); const app = express();  app.use(bodyParser.urlencoded({ extended: true }));  const stripe = require('stripe')(`\n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`);  app.post('/ephemeral-keys', async (request, response) => {   const { card_id, nonce } = request.body;    const ephemeralKey = await stripe.ephemeralKeys.create({     nonce: nonce,     issuing_card: card_id,   }, {     apiVersion: '2024-06-20',     stripeAccount: '{{CONNECTED_ACCOUNT_ID}}',   });    response.json({     ephemeralKeySecret: ephemeralKey.secret,     nonce: nonce,     issuingCard: card_id,   }); });`\n\n### Asynchronous callback![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must define an asynchronous function that accepts a named argument with property `issuingCard` which is a [Card](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-id) ID and additionally, a `nonce` property. This function must return an `Object` with properties `issuingCard`, `nonce`, and `ephemeralKeySecret` which are retrieved from the endpoint you set up in the previous step.\n\nHere’s how you might implement this callback:\n\n`const issuingCard = stripeConnectInstance.create('issuing-card'); const fetchEphemeralKey = async (fetchParams) =>  {   const { issuingCard, nonce } = fetchParams;    // This may vary greatly based on your implementation   const response = await myServer.getEphemeralKey({issuingCard, nonce})    return {     issuingCard: response.issuingCard,     nonce: response.nonce,     ephemeralKeySecret: response.ephemeralKeySecret   } }  issuingCard.setFetchEphemeralKey(fetchEphemeralKey); document.body.appendChild(issuingCard);`\n\n## Request access Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fconnect%2Fsupported-embedded-components%2Fissuing-card) to request access to this Connect embedded component in beta.\n\nIf you don’t have a Stripe account, you can [register now](https://dashboard.stripe.com/register).",
  "title": "Issuing card | Stripe Documentation",
  "description": "Show an individual issued card.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/supported-embedded-components/issuing-cards-list",
  "markdown": "# Issuing cards list | Stripe DocumentationThe Stripe Docs logo\n\n## Issuing cards listBeta\n\n## Show a table of all issued cards.\n\nRenders a table view of all the [cards](https://docs.stripe.com/api/issuing/cards) issued to your connected accounts.\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable the Issuing cards list component by specifying `issuing_cards_list` in the `components` parameter. You can enable or disable individual features of the Issuing cards list component by specifying the `features` parameter under `issuing_cards_list`.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; embedded_connect_beta=v2;\" \\   -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[issuing_cards_list][enabled]\"=true \\  -d \"components[issuing_cards_list][features][card_management]\"=true \\  -d \"components[issuing_cards_list][features][cardholder_management]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the Issuing cards list component in the front end:\n\n`// Include this element in your HTML const issuingCardsList = stripeConnectInstance.create('issuing-cards-list'); container.appendChild(issuingCardsList);`\n\n[](#sensitive-data-display)\n\nIssuing Connect embedded components integrate with [Issuing Elements](https://docs.stripe.com/issuing/elements) to provide a PCI-compliant way for you to allow your admins to view card numbers (PANs) and CVV or CVCs for virtual cards. The sensitive data renders inside Stripe-hosted iframes and never touches your servers.\n\nThe components can use an ephemeral key to securely retrieve card information from the Stripe API without publicly exposing your secret keys.\n\nTo enable this functionality you must:\n\n1.  Set up an ephemeral key exchange on your server.\n2.  Pass an asynchronous callback to the components.\n\nStripe generates a `nonce` from the [Card ID](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-id) in the Issuing Card or Issuing Cards List component when a card is selected or loaded. Stripe then calls your callback function which returns an ephemeral key, and then renders a `Show numbers` button if the ephemeral key is valid.\n\n### Ephemeral key exchange![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour server-side endpoint needs to accept a [Card ID](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-id) and a `nonce`. It can then create an ephemeral key using Stripe.\n\nHere’s how you might implement an ephemeral key creation endpoint in web application frameworks across various languages:\n\n`// This example sets up an endpoint using the Express framework. // Watch this video to get started: [https://youtu.be/rPR2aJ6XnAc](https://youtu.be/rPR2aJ6XnAc)  const express = require('express'); const bodyParser = require('body-parser'); const app = express();  app.use(bodyParser.urlencoded({ extended: true }));  const stripe = require('stripe')(`\n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`);  app.post('/ephemeral-keys', async (request, response) => {   const { card_id, nonce } = request.body;    const ephemeralKey = await stripe.ephemeralKeys.create({     nonce: nonce,     issuing_card: card_id,   }, {     apiVersion: '2024-06-20',     stripeAccount: '{{CONNECTED_ACCOUNT_ID}}',   });    response.json({     ephemeralKeySecret: ephemeralKey.secret,     nonce: nonce,     issuingCard: card_id,   }); });`\n\n### Asynchronous callback![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must define an asynchronous function that accepts a named argument with property `issuingCard` which is a [Card](https://docs.stripe.com/api/issuing/cards/object#issuing_card_object-id) ID and additionally, a `nonce` property. This function must return an `Object` with properties `issuingCard`, `nonce`, and `ephemeralKeySecret` which are retrieved from the endpoint you set up in the previous step.\n\nHere’s how you might implement this callback:\n\n`const issuingCard = stripeConnectInstance.create('issuing-card'); const fetchEphemeralKey = async (fetchParams) =>  {   const { issuingCard, nonce } = fetchParams;    // This may vary greatly based on your implementation   const response = await myServer.getEphemeralKey({issuingCard, nonce})    return {     issuingCard: response.issuingCard,     nonce: response.nonce,     ephemeralKeySecret: response.ephemeralKeySecret   } }  issuingCard.setFetchEphemeralKey(fetchEphemeralKey); document.body.appendChild(issuingCard);`\n\n## Request access Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fconnect%2Fsupported-embedded-components%2Fissuing-cards-list) to request access to this Connect embedded component in beta.\n\nIf you don’t have a Stripe account, you can [register now](https://dashboard.stripe.com/register).",
  "title": "Issuing cards list | Stripe Documentation",
  "description": "Show a table of all issued cards.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/supported-embedded-components/tax-registrations",
  "markdown": "# Tax registrations | Stripe DocumentationThe Stripe Docs logo\n\n## Tax registrationsBeta\n\n## Learn how to allow connected accounts to manage their tax registrations for Stripe Tax.\n\n#### Beta\n\nThis Connect embedded component is in beta. [Request access](#request-access) below.\n\nThe Tax registrations component gives your connected accounts control over their tax compliance. Your connected accounts interact with this component by managing their tax registrations directly in your platform. This component is suitable for [software platforms](https://docs.stripe.com/tax/tax-for-platforms), which means that your connected accounts are liable to collect taxes.\n\nIf you’re a platform integrating Stripe Tax, you must collect information about the [registrations with tax authorities](https://docs.stripe.com/tax/registering) of your connected accounts in the applicable jurisdictions. Your connected accounts need to register with their tax authorities before they add their tax registrations in your platform. To correctly calculate and collect taxes for your platform, you must collect the tax registrations of your connected accounts.\n\nThe Tax registrations component uses the [Tax Registrations API](https://docs.stripe.com/tax/registrations-api) to display a list of tax registrations to your connected accounts. To calculate tax on their payments in a location, connected accounts need to add their tax registration with the Tax registrations component. If the connected account wish to stop calculating tax in a certain location, they can end the tax registration in the component.\n\n## Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Your integration must follow the [software platforms guide](https://docs.stripe.com/tax/tax-for-platforms) for [Tax on Connect](https://docs.stripe.com/tax/connect). This means that your connected accounts are liable to collect taxes.\n*   If you haven’t already, render the [Tax settings component](https://docs.stripe.com/connect/supported-embedded-components/tax-settings). You need both the Tax settings component and the Tax registrations component to provide tax compliance control to your connected accounts.\n\n## Integrate the tax registrations component ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInstall a beta version of the Stripe SDKs to create account sessions for private beta components:\n\n*   [Ruby](https://github.com/stripe/stripe-ruby/#beta-sdks) `>=11.1.0-beta.1`\n*   [Python](https://github.com/stripe/stripe-python/#beta-sdks) `>=9.2.0b1`\n*   [PHP](https://github.com/stripe/stripe-php/#beta-sdks) `>=14.2.0-beta.1`\n*   [Node](https://github.com/stripe/stripe-node/#beta-sdks) `>=15.2.0-beta.1`\n*   [.NET](https://github.com/stripe/stripe-dotnet#beta-sdks) `>=44.2.0-beta.1`\n*   [Java](https://github.com/stripe/stripe-java#beta-sdks) `>=25.2.0-beta.1`\n*   [Go](https://github.com/stripe/stripe-go#beta-sdks) `>=78.2.0-beta.1`\n\nUse the beta version of the Stripe’s client-side libraries to render private beta components:\n\nInstall the library:\n\n`npm install --save @stripe/connect-js@beta`\n\nIf you’re using React in your application:\n\n`npm install --save @stripe/react-connect-js@beta`\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable tax registrations by specifying `tax_registrations` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; embedded_connect_beta=v2;\" \\   -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[tax_registrations][enabled]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the tax registrations component in the frontend:\n\n`// Include this React component import {   ConnectTaxRegistrations,   ConnectComponentsProvider, } from \"@stripe/react-connect-js\";  return (   <ConnectComponentsProvider connectInstance={stripeConnectInstance}>     <div>       <h2>Tax Registrations</h2>       <ConnectTaxRegistrations />     </div>   </ConnectComponentsProvider> );`\n\n## Request access Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fconnect%2Fsupported-embedded-components%2Ftax-registrations) to request access to this Connect embedded component in beta.\n\nIf you don’t have a Stripe account, you can [register now](https://dashboard.stripe.com/register).",
  "title": "Tax registrations | Stripe Documentation",
  "description": "Learn how to allow connected accounts to manage their tax registrations for Stripe Tax.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/supported-embedded-components/payment-method-settings",
  "markdown": "# Payment method settings | Stripe DocumentationThe Stripe Docs logo\n\n## Payment method settingsBeta\n\n## Display a configurable list of payment methods that connected accounts can offer during checkout.\n\nRender a connected account’s [Payment Method Configuration](https://docs.stripe.com/api/payment_method_configurations) to enable customization of payment methods displayed at checkout. Connected accounts can customize their checkout payment methods and provide the necessary compliance details for their usage.\n\n#### Note\n\nWe support the following payment methods in the embedded component:\n\nAffirm, Afterpay Clearpay, Apple Pay, Bancontact, BLIK, Cards, EPS, giropay, Google Pay, iDEAL, Klarna, Link, P24, Sofort, and Zip.\n\nThe embedded payment method settings uses the [Payment Method Configurations](https://docs.stripe.com/connect/payment-method-configurations) and [Account Capabilities](https://docs.stripe.com/connect/account-capabilities) APIs to display a list of customizable payment methods to your connected accounts. If a connected account requires additional compliance data prior to requesting the payment method [capability](https://docs.stripe.com/api/capabilities/object), the component indicates this and collects the necessary information in advance.\n\n## Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour integration must use [dynamic payment methods](https://docs.stripe.com/connect/dynamic-payment-methods) to automatically apply the connected account’s preferences during checkout. In prebuilt payment UIs such as [Payment Element](https://stripe.com/payments/elements) and [Checkout](https://stripe.com/payments/checkout), Stripe handles the logic for displaying eligible payment methods for each transaction.\n\nInstall a beta version of the Stripe SDKs to create account sessions for private beta components:\n\n*   [Ruby](https://github.com/stripe/stripe-ruby/#beta-sdks) `>=11.1.0-beta.1`\n*   [Python](https://github.com/stripe/stripe-python/#beta-sdks) `>=9.2.0b1`\n*   [PHP](https://github.com/stripe/stripe-php/#beta-sdks) `>=14.2.0-beta.1`\n*   [Node](https://github.com/stripe/stripe-node/#beta-sdks) `>=15.2.0-beta.1`\n*   [.NET](https://github.com/stripe/stripe-dotnet#beta-sdks) `>=44.2.0-beta.1`\n*   [Java](https://github.com/stripe/stripe-java#beta-sdks) `>=25.2.0-beta.1`\n*   [Go](https://github.com/stripe/stripe-go#beta-sdks) `>=78.2.0-beta.1`\n\nUse the beta version of the Stripe’s client-side libraries to render private beta components:\n\nInstall the library:\n\n`npm install --save @stripe/connect-js@beta`\n\nIf you’re using React in your application:\n\n`npm install --save @stripe/react-connect-js@beta`\n\n## Integrate the component ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable payment method settings by specifying `payment_method_settings` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; embedded_connect_beta=v2;\" \\   -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[payment_method_settings][enabled]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the payment method settings component in the frontend:\n\npayment-method-settings.js\n\n`// Include this element in your HTML const paymentMethodSettings = stripeConnectInstance.create('payment-method-settings'); container.appendChild(paymentMethodSettings);`\n\n### Platform-level controls![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe embedded payment method settings component respects the platform-level defaults that you configure in the [Dashboard](https://docs.stripe.com/connect/payment-methods) or the [Payment Method Configurations API](https://docs.stripe.com/connect/payment-method-configurations).\n\nFor payment methods that you configure as **On by default** or **Off by default**, the connected account can override that preference in the component. If you have set a payment method to **Blocked**, it’s completely hidden in the component.\n\n### Multiple payment method configurations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe embedded payment method settings component currently shows the connected account’s **default** payment method configuration. During the beta, the component supports [multiple configurations](https://docs.stripe.com/connect/multiple-payment-method-configurations) with a component attribute that accepts a configuration ID.\n\n## Request early access Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fconnect%2Fsupported-embedded-components%2Fpayment-method-settings) to request access to this Connect embedded component in beta.\n\nIf you don’t have a Stripe account, you can [register here](https://dashboard.stripe.com/register).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Connect integration guide](https://docs.stripe.com/connect/charges)\n*   [Upgrading to dynamic payment methods](https://docs.stripe.com/connect/dynamic-payment-methods)\n*   [Payment Method Configurations API](https://docs.stripe.com/connect/payment-method-configurations)\n*   [Account Capabilities API](https://docs.stripe.com/connect/account-capabilities)",
  "title": "Payment method settings | Stripe Documentation",
  "description": "Display a configurable list of payment methods that connected accounts can offer during checkout.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/supported-embedded-components/tax-settings",
  "markdown": "# Tax settings | Stripe DocumentationThe Stripe Docs logo\n\n## Tax settingsBeta\n\n## Learn how to allow connected accounts to set up Stripe Tax.\n\n#### Beta\n\nThis Connect embedded component is in beta. [Request access](#request-access) below.\n\nThe Tax settings component allows your connected accounts to [set up Stripe Tax](https://docs.stripe.com/tax/set-up) in your platform. Connected accounts can change their head office address and [preset tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#product-tax-code) with this component. This component is suitable for [software platforms](https://docs.stripe.com/tax/tax-for-platforms), which means that your connected accounts are liable to collect taxes.\n\nTo calculate taxes on payments of your connected accounts you have to collect four data points of information:\n\n*   The head office address\n*   The type of product the connected account sells\n*   The address of the customer\n*   The registrations of the connected account with the tax authorities\n\nThe tax settings component helps you to collect the first two pieces of information of your connected accounts with minimal integration effort.\n\nThe embedded tax settings component uses the [Tax Settings API](https://docs.stripe.com/tax/settings-api) to display the head office address and [preset tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#product-tax-code) to your connected accounts.\n\n## Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Your integration must follow the [software platforms guide](https://docs.stripe.com/tax/tax-for-platforms) for [Tax on Connect](https://docs.stripe.com/tax/connect). This means that your connected accounts are liable to collect taxes.\n*   After integrating the Tax settings component, render the [Tax registrations component](https://docs.stripe.com/connect/supported-embedded-components/tax-registrations) to collect tax registration information of your connected accounts. This is a requirement for Tax to calculate tax in a specific location.\n\n## Integrate the tax settings component ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInstall a beta version of the Stripe SDKs to create account sessions for private beta components:\n\n*   [Ruby](https://github.com/stripe/stripe-ruby/#beta-sdks) `>=11.1.0-beta.1`\n*   [Python](https://github.com/stripe/stripe-python/#beta-sdks) `>=9.2.0b1`\n*   [PHP](https://github.com/stripe/stripe-php/#beta-sdks) `>=14.2.0-beta.1`\n*   [Node](https://github.com/stripe/stripe-node/#beta-sdks) `>=15.2.0-beta.1`\n*   [.NET](https://github.com/stripe/stripe-dotnet#beta-sdks) `>=44.2.0-beta.1`\n*   [Java](https://github.com/stripe/stripe-java#beta-sdks) `>=25.2.0-beta.1`\n*   [Go](https://github.com/stripe/stripe-go#beta-sdks) `>=78.2.0-beta.1`\n\nUse the beta version of the Stripe’s client-side libraries to render private beta components:\n\nInstall the library:\n\n`npm install --save @stripe/connect-js@beta`\n\nIf you’re using React in your application:\n\n`npm install --save @stripe/react-connect-js@beta`\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable tax settings by specifying `tax_settings` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; embedded_connect_beta=v2;\" \\   -d account=  {{CONNECTED_ACCOUNT_ID}}   \\  -d \"components[tax_settings][enabled]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the tax settings component in the frontend:\n\n`// Include this React component import {   ConnectTaxSettings,   ConnectComponentsProvider, } from \"@stripe/react-connect-js\";  return (   <ConnectComponentsProvider connectInstance={stripeConnectInstance}>     <div>       <h2>Tax Settings</h2>       <ConnectTaxSettings />     </div>   </ConnectComponentsProvider> );`\n\n## Request access Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fconnect%2Fsupported-embedded-components%2Ftax-settings) to request access to this Connect embedded component in beta.\n\nIf you don’t have a Stripe account, you can [register now](https://dashboard.stripe.com/register).",
  "title": "Tax settings | Stripe Documentation",
  "description": "Learn how to allow connected accounts to set up Stripe Tax.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/cli/events/resend",
  "markdown": "# Stripe CLI Reference\n\n[cli](https://docs.stripe.com/cli)",
  "title": "Stripe CLI Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/stripe-apps/accounting-software-integrations",
  "markdown": "# Accounting software integrations | Stripe DocumentationThe Stripe Docs logo\n\n## Accounting software integrationsBeta\n\n## Embed accounting software integrations on your platform.\n\nLet your users automatically synchronize their transactions, fees, refunds, payouts, customers, and products with their accounting software.\n\n[](#undefined)\n\n[Set up Connect.js](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions) to enable the ability to add connected account dashboard functionality to your website.\n\n[](#app-select)\n\nStripe supports the following accounting app integrations.\n\n| Accounting App integration | App ID |\n| --- | --- |\n| QuickBooks Sync by Acodei | com.example.acodeistripeapp |\n| Xero sync by Xero | com.xero.stripeapp |\n\n[](#app-install)\n\nRender the app install embedded component for your selected accounting app. App installation grants permission for the third party app to access your users’ Stripe data, creating a connection between your platform, Stripe, and the third party app. The component has two states: `uninstalled` and `installed`. Listen to install event triggers to build your custom UX flow or make updates in your own backend.\n\nWhen [creating an Account Session](https://docs.stripe.com/api/account_sessions/create), enable payments by specifying `app_onboarding`, `app_install`, and `app_settings` in the `components` parameter.\n\n`curl https://api.stripe.com/v1/account_sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Version: 2024-06-20; embedded_connect_beta=v2;\" \\   -d account={{CONNECTED_ACCOUNT_ID}} \\   -d \"components[app_onboarding][enabled]\"=true \\  -d \"components[app_install][enabled]\"=true \\  -d \"components[app_settings][enabled]\"=true`\n\nAfter creating the account session and [initializing ConnectJS](https://docs.stripe.com/connect/get-started-connect-embedded-components#account-sessions), you can render the app\\_install component in the front end:\n\n`// Include this React component import {useCreateComponent, useAttachAttribute} from '@stripe/react-connect-js'; export const ConnectAppInstallWithAttributes = ({   appId, }: {   appId: string; }): JSX.Element | null => { const {wrapper, component: appInstall} = useCreateComponent(   'stripe-connect-app-install' as any );  useAttachAttribute(appInstall, 'app' as any, appId); return wrapper; };`\n\nThis embedded component supports the following parameters:\n\n| Setter | Type | Description |\n| --- | --- | --- |\n| `setApp` | `string` | Sets the ID of the App your connected account can install. See available apps [here](https://docs.stripe.com/stripe-apps/accounting-software-integrations#app-select). |\n| `setOnAppInstallStateFetched` | `() => void` | Stripe sends this event when the component renders. |\n| `setOnAppInstallStateChanged` | `() => void` | Stripe sends this event when an app finishes installing or uninstalling. |\n\n[](#app-settings)\n\nRender the app settings embedded component for your selected accounting app to enable core app functionality including connection to the accounting software account with OAuth, onboarding, settings, and configuration of the service and synchronization states of transactions. Pass the `user_id` (business represented on your platform) as an optional HTML attribute that third party apps can use to build a dynamic URL that redirects back to your user dashboard after OAuth.\n\n`// Include this React component import {useCreateComponent, useAttachAttribute} from '@stripe/react-connect-js'; export const ConnectAppSettingsWithAttributes = ({   appId,   userId }: {   appId: string; }): JSX.Element | null => {   const {wrapper, component: appSettings} = useCreateComponent(     'stripe-connect-app-settings' as any   );    useAttachAttribute(appSettings, 'app' as any, appId);   useAttachAttribute(appSettings, 'user-id' as any, userId);    return wrapper; };`\n\nThis component supports the following optional attributes:\n\n| Attribute | Description |\n| --- | --- |\n| `app` | App ID of embedded app, provided by Stripe |\n| `user-id` | Unique identifier of the platform user |\n\n[](#destination-obo)\n\nPass required and optional transaction data to Xero or QuickBooks Sync by Acodei by updating the destination charge on the connected account using the data standardized data schema below. You must pass a [customer](https://docs.stripe.com/api/customers/object) object to the destination charge. QuickBooks Sync by Acodei also requires charge updates with refund amounts written to metadata. There are three instances that require you to update your destination charge:\n\n*   one-time payment complete\n*   recurring payment complete\n*   payment refunded\n\n| Field or key name | Format (standard CSV rules apply) | Description |\n| --- | --- | --- |\n| [charges.customer](https://docs.stripe.com/api/charges/object#charge_object-customer) | string (ID) | Stripe Customer ID (belonging to connected account) attached to a destination charge object. Transactions don’t sync to Apps (such as Xero and QBO) if this field isn’t present. |\n| [customer.name](https://docs.stripe.com/api/customers/object#customer_object-name) | string | Customer’s full name |\n| [customer.email](https://docs.stripe.com/api/customers/object#customer_object-email) | string | Customer’s email address |\n| [customer.address.<>](https://docs.stripe.com/api/customers/object#customer_object-address) | string (multi-field) | Customer’s physical address (can be used for both billing and shipping) |\n| `charges.metadata.[refund_amount]` | string (cents integer) | mirroring [charges.amount\\_refunded](https://docs.stripe.com/api/charges/object#charge_object-amount_refunded) |\n| `charges.metadata.[refund_reason]` | string | reason for the refund |\n| `charges.metadata.[currency_converted]` | `true` \\| `false` \\| `null` | Set to `true` if currency has been converted, for example, if the presentment currency differs from the settlement currency. |\n| `customer.metadata.[platform_customer_ID]` | string | Customer ID as recorded in the platform’s system |\n| `charges.metadata.[platform_product_ID]` | string, CSV multiple products | Product IDs as recorded in the platform’s system, related to this transaction (charge) |\n| `charges.metadata.[platform_product_name]` | string, CSV multiple products | Product name as recorded in the platform’s system, related to this transaction (charge) |\n| `charges.metadata.[platform_product_value]` | string, CSV multiple products | The individual Product value (price/cost) corresponding to the Product ID and name |\n| `charges.metadata.[platform_order_ID]` | string | Order ID as recorded in the platform’s system, related to this transaction (charge) |\n| `charges.metadata.[platform_charge_ID]` | string | Charge or transaction ID as recorded in the platform’s system and visible to the merchant |\n| `charges.metadata.[fees_names]` | string, CSV | Name of fees merchant is paying (expense) of any kind related to the transaction that aren’t captured in the Charge eg. credit processing fee, platform fee _Note: if this field is populated, charges.application\\_fee is ignored._ |\n| `charges.metadata.[fees_values]` | string, CSV | Values of fees merchant is paying (expense) of any kind related to the transaction that aren’t captured in the Charge eg. credit processing fee, platform fee |\n\nThe following code snippet example traverses to the target destination charge and shows how to update per schema.\n\n1.  Trace from the Transaction to the destination charge\n\n`const paymentOnPlatform = await StripeClient.paymentIntents.retrieve(   \"pi_3N6JL7LirQdaQn8E1Lpn7Dui\", );  const latestCharge = await StripeClient.charges.retrieve(   paymentOnPlatform.latest_charge as string, );  const transfer = await StripeClient.transfers.retrieve(   latestCharge.transfer as string, );  const payment = await StripeClient.charges.retrieve(   transfer.destination_payment as string,     undefined,     {         stripeAccount: transfer.destination as string,       },   );`\n\n1.  Create a customer and then update the charge with the relevant customer ID and metadata. The customer must belong to the connected account and not the platform for the data to pass and apps to synchronize.\n\n``const customer = await StripeClient.customers.create(       {         email: `jenny.rosen@example.com`,         name: \"Jenny Rosen\", \t address.city: \"Brothers\" \t Address.state: \"Oregon\" \t address.country: \"USA\" \t address.line1: \"27 Fredrick Ave\" \t address.postal_code: \"97712\"        \t metadata: {  \t   platform_customer_ID: \"K-123456\" \t },       },       {         stripeAccount: accountId,       },     );     const payment = await StripeClient.charges.update(       id,       {         customer: customer.id,         metadata: {           product_name: \"Creative writing course for PMs\",           platform_product_ID: \"P-123456\"           platform_order_ID: \"O-123456\"         },       },       {         stripeAccount: accountId,       },     );``\n\n[](#direct-charges)\n\nThe embedded accounting integrations accesses all payment, customer, and product data stored with Stripe. You can pass optional platform-specific data to the accounting software through the App using the below metadata schema.\n\n| Field or key name | Format (standard CSV rules apply) | Description |\n| --- | --- | --- |\n| `customer.metadata.[platform_customer_ID]` | string | Customer ID as recorded in the platform’s system |\n| `payment.metadata.[platform_product_ID]` | string, CSV multiple products | Product IDs as recorded in the platform’s system, related to this transaction, if different than the Stripe product ID |\n| `payment.metadata.[platform_product_name]` | string, CSV multiple products | Product or service names as recorded in the platforms’ system, related to this transaction, if different than the Stripe product name |\n| `payment.metadata.[platform_product_value]` | string, CSV multiple products | The individual product value (price or cost) corresponding to the ID and name array, if different than the Stripe product value |\n| `payment.metadata.[platform_order_ID]` | string | Order ID as recorded in the platform’s system, related to this transaction (charge) |\n| `payment.metadata.[platform_charge_ID]` | string | Charge or transaction ID as recorded on the platform and visible to the user, if different than the Stripe payment ID |\n\n## User billing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Xero App is free for the platforms’ users. The QuickBooks Sync by Acodei includes free and paid tiers.\n\n## Other integrations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you need an integration with other accounting software or any other integration types, reach out at stripe-apps@stripe.com.",
  "title": "Accounting software integrations | Stripe Documentation",
  "description": "Embed accounting software integrations on your platform.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/cli/login",
  "markdown": "# Stripe CLI Reference\n\n[cli](https://docs.stripe.com/cli)",
  "title": "Stripe CLI Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/revenue-recognition/performance-obligations-api",
  "markdown": "# Revenue Recognition Performance Obligations API\n\n## Learn how to model performance obligation fulfillment in Stripe Revenue Recognition.\n\n## Overview ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPerformance obligation fulfillment is an important part of revenue recognition in accounting and finance. It refers to the completion of a transaction in which the seller has delivered the goods or services promised to the customer, and can recognize revenue for the sale. There are several scenarios where fulfillment occurs and revenue can be recognized, including but not limited to:\n\n*   **Delivery of tangible goods**: Fulfillment occurs when the physical goods have been shipped to the customer and they’ve taken possession of the goods. The delivery of the goods confirms that the customer has received the promised benefit, and therefore you can recognize the revenue from the sale.\n*   **Performance of a service**: In the case of a service-based sale, fulfillment occurs when the service has been performed and the customer has accepted the service. After the customer has accepted the service, you can recognize the revenue.\n*   **Prepayment**: A customer pays for a service or goods in advance of receiving the actual service or goods. You can recognize the revenue from the pre-payment over time as the service is delivered or the goods are used.\n\nThis guide explains how to use the Stripe Revenue Recognition Performance Obligations API to achieve accurate revenue reporting.\n\n## Setup ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis example uses a product named “Prepaid package.” Create the product as a [Stripe product](https://docs.stripe.com/invoicing/products-prices)—call it “Product Prepaid package.”\n\nUnder the Product Prepaid package, a create a [Price](https://docs.stripe.com/invoicing/products-prices) for one unit. The price is 1 USD per unit. Call the price “Prepaid package.”\n\nSay you bill a customer for a 100 USD Product Prepaid package, which includes a Price Prepaid package for 100 units. You want to defer the 100 USD upon invoicing and to recognize it based on the usage.\n\n### Create a subscription or an invoice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nNow you can set up a subscription or a standalone invoice to bill the customer.\n\nFor a subscription, you’ll need to add a subscription item whose price is Price Prepaid package for 100 units.\n\nFor an invoice, you’ll need to add an invoice item whose price is Price Prepaid for 100 units.\n\n### Create a Revenue Recognition rule ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo defer the revenue upon invoicing, you’ll need to create a [Revenue Recognition rule](https://docs.stripe.com/revenue-recognition/rules). If no fulfillment events are ever sent, the revenue will be recognized completely in a year.\n\n![Performance Obligations API Revenue Recognition Rule Example](https://b.stripecdn.com/docs-statics-srv/assets/performance-obligations-api-rev-rec-rule.76697d5cc2900128ef8d473650ab56c0.png)\n\n## Record usages ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can record usages through the API.\n\nIf you were to create an invoice on June 1, 2022, and 10 units are used on July 29, 2022, you would send the below API request:\n\n`curl https://api.stripe.com/v1/revenue_recognition/performance_obligations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"target[type]\"=invoice_line_item \\  -d \"target[invoice_line_item]\"=il_AAA \\  -d \"period[start]\"=1659078000 \\  -d amount=1000 \\  -d currency=usd`\n\n## Reporting ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n### Before fulfillment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you download the debits and credits reports in June 2022, the following is what you would see. Because no usage is recorded yet, the whole invoice line item will be deferred and recognized 12 months later.\n\n| Account | Jun 2022 | Jun 2023 |\n| --- | --- | --- |\n| AccountsReceivable | +100 |     |\n| DeferredRevenue | +100 | \\-100 |\n| Revenue |     | +100 |\n\n### Partial fulfillment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the usage recorded in the section above, the reports would look like the following in July 2022:\n\n| Account | Jun 2022 | Jul 2022 | Jun 2023 |\n| --- | --- | --- | --- |\n| AccountsReceivable | +100 |     |     |\n| DeferredRevenue | +100 | \\-10 | \\-90 |\n| Revenue |     | +10 | +90 |\n\n### Full fulfillment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSuppose another usage is recorded on Aug 10, 2022 with the remaining amount (90 USD). The deferred revenue will be converted to revenue completely in Aug 2022:\n\n| Account | Jun 2022 | Jul 2022 | Aug 2022 |\n| --- | --- | --- | --- |\n| AccountsReceivable | +100 |     |     |\n| DeferredRevenue | +100 | \\-10 | \\-90 |\n| Revenue |     | +10 | +90 |",
  "title": "Revenue Recognition Performance Obligations API | Stripe Documentation",
  "description": "Learn how to model performance obligation fulfillment in Stripe Revenue Recognition.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/account_sessions/create",
  "markdown": "# Create an Account Session | Stripe API Reference\n\nCreates a AccountSession object that includes a single-use token that the platform can use on their front-end to grant client-side API access.\n\n### Parameters\n\n*   The identifier of the account to create an Account Session for.\n    \n*   Each key of the dictionary represents an embedded component, and each embedded component maps to its configuration (e.g. whether it has been enabled or not).\n    \n\n### Returns\n\nReturns an Account Session object if the call succeeded.\n\nPOST /v1/account\\_sessions\n\n```\ncurl https://api.stripe.com/v1/account_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d account=acct_1NkDjjJyhOZfPCWt \\  -d \"components[account_onboarding][enabled]\"=true \\  -d \"components[payments][enabled]\"=true \\  -d \"components[payouts][enabled]\"=true \\  -d \"components[balances][enabled]\"=true\n```\n\n```\n{  \"object\": \"account_session\",  \"account\": \"acct_1NkDjjJyhOZfPCWt\",  \"client_secret\": \"_OXIKXxEihJokDBnDoe2sgG5OGSO2Q12shKvbeboxpALZGng\",  \"expires_at\": 1693261123,  \"livemode\": false,  \"components\": {    \"account_management\": {      \"enabled\": false,      \"features\": {        \"external_account_collection\": true      }    },    \"account_onboarding\": {      \"enabled\": true,      \"features\": {        \"external_account_collection\": true      }    },    \"balances\": {      \"enabled\": true,      \"features\": {        \"edit_payout_schedule\": false,        \"instant_payouts\": false,        \"standard_payouts\": false,        \"external_account_collection\": true      }    },    \"documents\": {      \"enabled\": false,      \"features\": {}    },    \"notification_banner\": {      \"enabled\": false,      \"features\": {        \"external_account_collection\": true      }    },    \"payment_details\": {      \"enabled\": false,      \"features\": {        \"capture_payments\": true,        \"destination_on_behalf_of_charge_management\": false,        \"dispute_management\": true,        \"refund_management\": true      }    },    \"payments\": {      \"enabled\": true,      \"features\": {        \"capture_payments\": true,        \"destination_on_behalf_of_charge_management\": false,        \"dispute_management\": true,        \"refund_management\": true      }    },    \"payouts\": {      \"enabled\": true,      \"features\": {        \"edit_payout_schedule\": false,        \"instant_payouts\": false,        \"standard_payouts\": false,        \"external_account_collection\": true      }    },    \"payouts_list\": {      \"enabled\": false,      \"features\": {}    }  }}\n```\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Create an Account Session | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/files/object",
  "markdown": "# The File object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The [purpose](https://docs.stripe.com/file-upload#uploading-a-file) of the uploaded file.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `account_requirement`<br><br>Additional documentation requirements that can be requested for an account. |\n    | `additional_verification`<br><br>Additional verification for custom accounts. |\n    | `business_icon`<br><br>A business icon. |\n    | `business_logo`<br><br>A business logo. |\n    | `customer_signature`<br><br>Customer signature image. |\n    | `dispute_evidence`<br><br>Evidence to submit with a dispute response. |\n    | `finance_report_run`<br><br>User-accessible copies of query results from the Reporting dataset. |\n    | `identity_document`<br><br>A document to verify the identity of an account owner during account provisioning. |\n    | `identity_document_downloadable`<br><br>Image of a document collected by Stripe Identity. |\n    | `pci_document`<br><br>A self-assessment PCI questionnaire. |\n    | Show 4 more |\n    \n*   The returned file type (for example, `csv`, `pdf`, `jpg`, or `png`).\n    \n\n### More attributes\n\n*   #### \n    \n    expires\\_atnullable timestamp\n    \n\n```\n{  \"id\": \"file_1Mr4LDLkdIwHu7ixFCz0dZiH\",  \"object\": \"file\",  \"created\": 1680116847,  \"expires_at\": 1703444847,  \"filename\": \"file.png\",  \"links\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"url\": \"/v1/file_links?file=file_1Mr4LDLkdIwHu7ixFCz0dZiH\"  },  \"purpose\": \"dispute_evidence\",  \"size\": 8429,  \"title\": null,  \"type\": \"png\",  \"url\": \"https://files.stripe.com/v1/files/file_1Mr4LDLkdIwHu7ixFCz0dZiH/contents\"}\n```\n\n## [Create a file](https://docs.stripe.com/api/files/create)\n\nTo upload a file to Stripe, you need to send a request of type `multipart/form-data`. Include the file you want to upload in the request, and the parameters for creating a file.\n\nAll of Stripe’s officially supported Client libraries support sending `multipart/form-data`.\n\n### Parameters\n\n*   A file to upload. Make sure that the specifications follow RFC 2388, which defines file transfers for the `multipart/form-data` protocol.\n    \n*   The [purpose](https://docs.stripe.com/file-upload#uploading-a-file) of the uploaded file.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `account_requirement`<br><br>Additional documentation requirements that can be requested for an account. |\n    | `additional_verification`<br><br>Additional verification for custom accounts. |\n    | `business_icon`<br><br>A business icon. |\n    | `business_logo`<br><br>A business logo. |\n    | `customer_signature`<br><br>Customer signature image. |\n    | `dispute_evidence`<br><br>Evidence to submit with a dispute response. |\n    | `identity_document`<br><br>A document to verify the identity of an account owner during account provisioning. |\n    | `pci_document`<br><br>A self-assessment PCI questionnaire. |\n    | `tax_document_user_upload`<br><br>A user-uploaded tax document. |\n    | `terminal_reader_splashscreen`<br><br>Splashscreen to be displayed on Terminal readers. |\n    \n\n### More parameters\n\n### Returns\n\nReturns the file object.\n\n```\ncurl https://files.stripe.com/v1/files \\  -u sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc: \\  -F purpose=dispute_evidence \\  -F file=\"@/path/to/a/file.jpg\"\n```\n\n```\n{  \"id\": \"file_1Mr4LDLkdIwHu7ixFCz0dZiH\",  \"object\": \"file\",  \"created\": 1680116847,  \"expires_at\": 1703444847,  \"filename\": \"file.png\",  \"links\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"url\": \"/v1/file_links?file=file_1Mr4LDLkdIwHu7ixFCz0dZiH\"  },  \"purpose\": \"dispute_evidence\",  \"size\": 8429,  \"title\": null,  \"type\": \"png\",  \"url\": \"https://files.stripe.com/v1/files/file_1Mr4LDLkdIwHu7ixFCz0dZiH/contents\"}\n```\n\n## [Retrieve a file](https://docs.stripe.com/api/files/retrieve)\n\nRetrieves the details of an existing file object. After you supply a unique file ID, Stripe returns the corresponding file object. Learn how to [access file contents](https://docs.stripe.com/file-upload#download-file-contents).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nIf the identifier you provide is valid, a file object returns. If not, Stripe raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/files/@/path/to/a/file.png \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"file_1Mr4LDLkdIwHu7ixFCz0dZiH\",  \"object\": \"file\",  \"created\": 1680116847,  \"expires_at\": 1703444847,  \"filename\": \"file.png\",  \"links\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"url\": \"/v1/file_links?file=file_1Mr4LDLkdIwHu7ixFCz0dZiH\"  },  \"purpose\": \"dispute_evidence\",  \"size\": 8429,  \"title\": null,  \"type\": \"png\",  \"url\": \"https://files.stripe.com/v1/files/file_1Mr4LDLkdIwHu7ixFCz0dZiH/contents\"}\n```\n\n## [List all files](https://docs.stripe.com/api/files/list)\n\nReturns a list of the files that your account has access to. Stripe sorts and returns the files by their creation dates, placing the most recently created files at the top.\n\n### Parameters\n\n*   Filter queries by the file purpose. If you don’t provide a purpose, the queries return unfiltered files.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` files, starting after the `starting_after` file. Each entry in the array is a separate file object. If there aren’t additional available files, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/files \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/files\",  \"has_more\": false,  \"data\": [    {      \"id\": \"file_1Mr4LDLkdIwHu7ixFCz0dZiH\",      \"object\": \"file\",      \"created\": 1680116847,      \"expires_at\": 1703444847,      \"filename\": \"file.png\",      \"links\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"url\": \"/v1/file_links?file=file_1Mr4LDLkdIwHu7ixFCz0dZiH\"      },      \"purpose\": \"dispute_evidence\",      \"size\": 8429,      \"title\": null,      \"type\": \"png\",      \"url\": \"https://files.stripe.com/v1/files/file_1Mr4LDLkdIwHu7ixFCz0dZiH/contents\"    }    {...}    {...}  ],}\n```\n\n## [File Links](https://docs.stripe.com/api/file_links)\n\nTo share the contents of a `File` object with non-Stripe users, you can create a `FileLink`. `FileLink`s contain a URL that you can use to retrieve the contents of the file without authentication.\n\n## [Mandates](https://docs.stripe.com/api/mandates)\n\nA Mandate is a record of the permission that your customer gives you to debit their payment method.\n\n## [Setup Attempts](https://docs.stripe.com/api/setup_attempts)\n\nA SetupAttempt describes one attempted confirmation of a SetupIntent, whether that confirmation is successful or unsuccessful. You can use SetupAttempts to inspect details of a specific attempt at setting up a payment method using a SetupIntent.\n\n## [Confirmation Token](https://docs.stripe.com/api/confirmation_tokens)\n\nConfirmationTokens help transport client side data collected by Stripe JS over to your server for confirming a PaymentIntent or SetupIntent. If the confirmation is successful, values present on the ConfirmationToken are written onto the Intent.\n\nTo learn more about how to use ConfirmationToken, visit the related guides:\n\n*   [Finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server)\n*   [Build two-step confirmation](https://docs.stripe.com/payments/build-a-two-step-confirmation).\n\n## [Tokens](https://docs.stripe.com/api/tokens)\n\nTokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. A token representing this information is returned to your server to use. Use our [recommended payments integrations](https://docs.stripe.com/payments) to perform this process on the client-side. This guarantees that no sensitive card data touches your server, and allows your integration to operate in a PCI-compliant way.\n\nIf you can’t use client-side tokenization, you can also create tokens using the API with either your publishable or secret API key. If your integration uses this method, you’re responsible for any PCI compliance that it might require, and you must keep your secret API key safe. Unlike with client-side tokenization, your customer’s information isn’t sent directly to Stripe, so we can’t determine how it’s handled or stored.\n\nYou can’t store or use tokens more than once. To store card or bank account information for later use, create [Customer](https://docs.stripe.com/api#customers) objects or [External accounts](https://docs.stripe.com/api#external_accounts). [Radar](https://docs.stripe.com/radar), our integrated solution for automatic fraud protection, performs best with integrations that use client-side tokenization.\n\nEndpoints\n\n[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_bank_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_card)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_cvc_update)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_person)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_pii)[GET/v1/tokens/:id](https://docs.stripe.com/api/tokens/retrieve)\n\n## [Cash Balance](https://docs.stripe.com/api/cash_balance)\n\nA customer’s `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The File object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/review-requirements",
  "markdown": "# Stripe App Marketplace review requirements\n\n## Understand the process and requirements to get your app approved for listing in the Stripe App Marketplace.\n\nStripe reviews all apps and app updates submitted to the Stripe App Marketplace to make sure they provide the best user experience in areas such as design, reliability, security, and trust. Make sure your app fulfills these requirements before submitting it for app review.\n\n## App review principles ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThree main principles guide the app review process:\n\n*   **Quality**: Users require high-quality and useful apps. This encompasses elements of design, UX, performance, reliability, and so on.\n*   **Security**: All apps must meet Stripe’s standards for the security and privacy of user data and comply with all applicable laws.\n*   **Trust**: App developers must adhere to a standard of trust that maintains the integrity of our ecosystem. This extends to all communication, support, and community behavior.\n\n## The app review process ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nHere’s what you can expect when submitting your app for review:\n\n1.  From the Stripe Dashboard, create or update your app listing. Then submit your app and app listing for review. If your app requires an account or additional data to function, you must submit a test plan and credentials that detail how to test your app as part of the review process. For more information, see [example test credentials](https://docs.stripe.com/stripe-apps/review-requirements#test-plan-and-credentials) or see [Submit app for review](https://docs.stripe.com/stripe-apps/publish-app#submit-app-for-review) for instructions on this step.\n2.  A Stripe reviewer evaluates the app and listing against all relevant criteria. This process might involve automated scans, live testing of the app, and human review of all the information you provide.\n3.  If the app and listing meet all app review requirements, we approve this version of your app and listing, and you can make the app visible on the marketplace at your convenience. You must explicitly publish your approved app for it to be available on the marketplace. See [Publish your app](https://docs.stripe.com/stripe-apps/publish-app#publish-app) for instructions. However, if the app doesn’t meet all app review criteria, Stripe will send you specific feedback on which criteria the app didn’t meet, and provide you with guidance on ways to meet them.\n\nUpdates to apps and app listings go through the same process.\n\n## App review requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo pass review, your app must pass the requirements in this section. Test it end-to-end for bugs and edge cases before submitting it for review.\n\n### Transparent and consistent pricing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou must clearly state your app pricing up front, without hidden costs or fees. App pricing must also be consistent with off-marketplace prices.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Price your service transparently and consistently with off-marketplace prices.<br>*   Offer useful free functionality for your users, if you so choose. | *   Have pricing that is different from outside the Stripe App Marketplace.<br>*   Advertise your service as free and then require users to pay for functionality after they’ve installed the app. |\n\n### App developer standards ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAs an app developer, you must clearly represent yourself and your business purpose. You can’t engage in any illegal or harmful activities online or offline.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Make sure you have a website that provides accurate information about you, including contact information.<br>*   Check if your business purpose is listed in Stripe’s [Prohibited and Restricted Businesses](https://stripe.com/legal/restricted-businesses).<br>*   Expect additional review if your business falls under the restricted business category. | *   Engage in any illegal or harmful behaviors.<br>*   Misrepresent yourself or your purpose. |\n\n### App listing page ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour app listing helps businesses find your app and understand how it can help them run their business. Make sure the content you add clearly describes your app features and addresses potential questions, allowing businesses to quickly evaluate if your app is right for them. See the [app listing guidelines](https://docs.stripe.com/stripe-apps/listing-guidelines) for more details.\n\n**Spelling and grammar**\n\nYour listing must use proper spelling and grammar. This includes being easy to read and understand for your target audience.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Proof for proper spelling and grammar.<br>*   Proof that links point to appropriate URLs. | *   Don’t submit with typos or grammatical errors.<br>*   Don’t include links to expired or unrelated content. |\n\n**App name**\n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide the name only. _For example: HelpTable_<br>*   Use the same name in the app listing and in the app manifest. | *   Don’t use “Stripe”, “app”, “RAK”, “Generator”, “API Key”, “Authenticator”, “free” or “paid” in the app name. _For example: HelpTable app_<br>*   Don’t submit a listing with a different name from the app manifest. |\n\n**Logo**\n\n| Do  | Don’t |\n| --- | --- |\n| *   Upload your own distinct logo. Make sure it’s high quality and square. | *   Don’t use Stripe’s logo or name.<br>*   Don’t use the logo or name of any other company without explicit permission or in any way that would imply their endorsement of your app without their consent.<br>*   Don’t provide images that are degraded in quality, stretched, or cropped in a way that cuts off elements. |\n\n**Subtitle**\n\n| Do  | Don’t |\n| --- | --- |\n| *   Concisely summarize how your app works with Stripe. _For example: View and edit customer support history from your Stripe Dashboard_ | *   Don’t use hyperbole, marketing jargon, keyword stuffing, or unprovable claims. _For example: The world’s best support product._ |\n\n**Category**\n\n| Do  | Don’t |\n| --- | --- |\n| *   Select the category that applies to the primary functionality of your app. | *   Don’t select categories that don’t apply to your app, or only apply tangentially. |\n\n**Description**\n\n| Do  | Don’t |\n| --- | --- |\n| *   Briefly describe what your company does, who your app is for, and the value it delivers. An ideal description includes a quick intro to your service, followed by a brief description of your Stripe app specifically. _For example: \"HelpTable is a simple support management system designed for fast-moving startups. After installing the HelpTable app, you’ll get easy access to any customer’s support history within Stripe. This allows your agents to get a full picture of customer’s experience with your products and services. Agents can also view and manage support tickets, right within the Stripe Dashboard’_<br>*   Describe any limitations that your app might have. | *   Don’t only talk about your company and omit app related functionality. |\n\n**Feature highlight(s)**\n\n| Do  | Don’t |\n| --- | --- |\n| *   Spotlight 1-3 key features to help users quickly understand what your app does.<br>*   State the feature’s value using simple language in the feature title. _For example: Resolve tickets from Stripe_<br>*   Describe how the feature works and benefits the user in the feature description.<br>*   Make sure your feature images are high quality. | *   Don’t highlight key features that aren’t available in your app.<br>*   Don’t use real customer data in screenshots and images.<br>*   Don’t provide images that are degraded in quality, stretched, skewed, or cropped in a way that cuts off elements. |\n\n**Non-duplicate**\n\nEach app can only appear in the Marketplace once (no duplicates, even under a different name). Submit new versions of an app from the same account as the previous version. Contact [Stripe Support](https://support.stripe.com/contact/login) if this isn’t possible and you need assistance.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Check to be sure that neither you nor someone else have already uploaded this application. | *   Don’t submit the same app multiple times. This includes uploading the same application under different names, in different categories, from different accounts, and so on. |\n\n### UI extension for apps ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf your app includes a UI extension, the app drawer is the main place where your users see details about your app and take actions. Stripe users expect consistency across their Stripe Dashboard, which includes engaging with your app. Make sure that completing workflows through your app feels intuitive and natural. See the app design guidelines for examples of apps we think work well in the Stripe Dashboard.\n\n**App installation**\n\nIf your app requires authentication, clearly direct the appropriate users to authenticate after installation. Your app must also provide a clear way to unauthenticate from within the Stripe Dashboard UI.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide clear directions for user authentication. When a user installs the app, provide a clear prompt or trigger to complete authentication in the app drawer.<br>*   Provide a clear path to unlink the Stripe account from the app platform from either the settings page or the app drawer. | *   Don’t guide admins to configure account-wide authentication in your app’s settings.<br>*   Don’t provide a prompt for per-user authentication from the app drawer if your app authenticates users individually rather than account-wide. |\n\n**Information and actions**\n\nYour app provides contextual information and actions, adding value to the user’s workflow in Stripe.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide relevant information and actions pertaining to the user’s workflow within Stripe.<br>*   Only provide deep links out to third-party services when it’s helpful to reference a deeper workflow. | *   Don’t use your App as a jumping off point to a third-party website, without providing any tangible value to users within Stripe. |\n\n**Navigation**\n\nAt any point in the app drawer, the user should know where they are, where they can go, and how to go back or exit.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide clear navigation components so the user can easily move through your app.<br>*   Make sure you don’t have dead-ends or looping. _For example: don’t leave a user in the middle of a workflow without a **Cancel** or **Go back** button if they need to exit._ | *   Don’t exclude navigation, trap your user, or overload your navigation. _For example: If a user is in the middle of a workflow and needs to exit, but you don’t provide a **Cancel** or **Go back** button._ |\n\n**Buttons and links**\n\nMake sure the user can immediately understand what each button or link does without prior knowledge.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide clear labels for buttons and links.<br>*   Use the [external icon](https://docs.stripe.com/stripe-apps/components/icon#icon-reference) to indicate external links. | *   Don’t link the word “here”—make sure to disclose the location. |\n\n**Notices and dialogs**\n\nOnly use notices and dialogs for critical or contextual information in your app.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide notices when critical information requires a user’s attention.<br>*   Provide confirmation dialogs for any costly or destructive actions that aren’t easily reversible. | *   Don’t show notices that are irrelevant or aim to upsell. These types of messages might feel like spam and degrade the user’s preception of your app and Stripe.<br>*   Don’t allow the user to take any costly actions without clear confirmation. |\n\n**States**\n\nThe app needs to account for error states, loading states, and thoughtful solutions for edge cases.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide error states, loading states, and thoughtful solutions for edge cases. _For example: if a user is filling out a form in the app drawer, notify them of any errors when they select **Submit**._<br>*   Clearly highlight an error message and directly explain how to fix it, such as “Select a country.” | *   Don’t account for the happy path only.<br>*   Don’t leave the user stranded or present error states that aren’t clear. _For example: the user selects **Next** in a workflow, but nothing happens. The user has hit an error, but it’s not clear how to correct it because there’s no messaging._ |\n\n**UI error handling**\n\nThe app needs to gracefully handle errors and communicate clear and actionable error messages to users. Monitor your app for problems.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Use the provided components and patterns to display error notifications to users.<br>*   Make sure error messages clearly explain the issue, and provide the user with an actionable next step.<br>*   Monitor your app for errors so you know when your users are having problems. | *   Display a vague “something went wrong” error message.<br>*   Swallow errors silently with no message to the user.<br>*   Catch an error and log it to the console without any indication to a non-technical user. |\n\n### App settings ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUsers can navigate to your app settings within the Stripe Dashboard.\n\n**Authentication Settings**\n\nIf your app requires authentication to a service other than Stripe, or stores credentials on behalf of the app user, your app must provide a way to reauthenticate or log out in your app’s settings.\n\n| Do  | Don’t |\n| --- | --- |\n| *   If your app requires authentication to your service or a third-party, make sure you provide a way to both reauthenticate and deauthenticate.<br>*   If your app authenticates with multiple services, make sure that each service can deauthenticate and reauthenticate individually.<br>*   Provide one clear way for users to save changes. | *   Don’t omit the authentication setting if your app requires it. |\n\n**Labels and descriptions**\n\nThe app settings must include labels and descriptions that make it easier for users to navigate and understand the app.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide clear labels and descriptions for settings. | *   Don’t label settings in a manner that makes it difficult for users to understand.<br>*   Don’t exclude descriptions for settings. |\n\n**Required and optional settings**\n\nThe app must clearly indicate which settings are required and which settings are optional.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Indicate which setting fields are required. | *   Don’t leave required fields unmarked, causing users to not understand why the app isn’t functioning properly. |\n\n**Settings save**\n\nThe app settings must provide one clear way to save changes.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide one clear way for users to save changes. | *   Don’t omit the a way to save changes.<br>*   Don’t allow for multiple save patterns across the page. |\n\n**Change confirmations**\n\nFollow app settings changes with a confirmation message after they’re saved.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide a confirmation when settings changes are saved. | *   Don’t omit confirmation messages.<br>*   Don’t allow changes to happen without confirmation messages. |\n\n### Components ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse Stripe’s UI components for your app, specifically across the expandable app drawer and your app settings page. This makes using your app feel like part of the Stripe Dashboard.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Build your app using the UI components.<br>*   Use only the provided fonts, icons, form fields, and color schemes to keep them consistent with the Dashboard. | *   Don’t use stylized components from other design systems.<br>*   Don’t customize or brand components. |\n\n**Visuals**\n\nUse icons, images and illustrations to make it simpler for users to understand the flows and features of your app.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Use visuals (icons and illustrations) to support users in understanding how to use the app or a specific feature.<br>*   Use high quality visuals. | *   Don’t use visuals that are purely decorative.<br>*   Don’t use visuals that are degraded in quality. |\n\n**Drawer icon**\n\nIf your app has a UI component, it displays in the app drawer in the Stripe Dashboard after a user installs it. Make sure that the app icon correctly displays in that drawer by including a high quality app icon in your app manifest.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Include a high quality icon in your app manifest. | *   Don’t omit the icon from your app manifest.<br>*   Don’t add a low quality icon to your app manifest. |\n\n### App content ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nProvide clear and consistent content throughout the app. Clearly address users with voice, tone, and grammar that’s consistent with the rest of the dashboard.\n\n**Voice, tone, grammar, and style**\n\n| Do  | Don’t |\n| --- | --- |\n| *   Write simply. Lean into compact, specific language. _For example: “Try out the feature in your Dashboard.”_<br>*   Use active voice. _For example, “Order a card reader.”_<br>*   Use simple verbs for calls to action (CTAs). For common actions where the object is clear, you can include only the verb. _For example: “Create subscription”_<br>*   Use numerals for efficiency and space. _For example: “You have 3 tickets to review.”_ | *   Don’t use corporate voice and jargon. _For example: “Utilize this programmed software.”_<br>*   Don’t use passive voice. For example: “Card readers are available to order.”<br>*   Don’t include filler words like pronouns, adjectives, adverbs, or indefinite articles (like “a,” “an,” or “the”). _For example: don’t write “Create a subscription” or “Create your subscription” but rather “Create subscription.”_<br>*   Don’t spell out numbers unless required to add emphasis. _For example: “there are two ways to fix this problem.”_ |\n\n**Sentence case**\n\n| Do  | Don’t |\n| --- | --- |\n| *   Use sentence case for all content, including headings and buttons. _For example: “Add bank account”._ _For example: “Create subscription”_<br>*   Use numerals for efficiency and space. _For example: “You have 3 tickets to review.”_ | *   Don’t add capitalized words that aren’t proper nouns, acronyms or the first word in a sentence. _For example: “Add Bank Account”._ |\n\n**Punctuation**\n\n| Do  | Don’t |\n| --- | --- |\n| *   Use periods in body text. This includes subheadings, descriptions, legal text, and tooltips. The period goes inside quotation marks, not after them. | *   Use periods for titles or headings, or for clickable elements like menu labels and buttons. _For example: Add a period after a “Learn more” link._ |\n\n**Date format**\n\n| Do  | Don’t |\n| --- | --- |\n| *   Format dates as follows: When abbreviating months, use the 3-letter abbreviation and no period. _For example, “Jan, Feb, Mar, Apr, May, Jun”._ When writing out the month name, day, and year, use a comma between the day and the year. _For example, “January 3, 2021” or “Jan 3, 2021”._ When only writing the month and year, don’t use a comma. _For example, “January 2021” or “Jan 2021”._ | *   Don’t include periods after abbreviating a month.<br>*   Don’t use ordinals (that is, 1st, 2nd, 3rd) for dates. |\n\n**Time format**\n\n| Do  | Don’t |\n| --- | --- |\n| *   Format time as follows: Use the 12-hour clock. Indicate ante meridian (AM) and post meridian (PM) with all caps and a space after the last number. Use two digits for minutes. _For example,: “3:25 PM” or “10:00 AM”._ | *   Don’t use a 24-hour clock.<br>*   Don’t omit AM and PM on a 12-hour clock. |\n\n### App functionality ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour app must be clear, useful, and reliable.\n\n**Usefulness**\n\nThe Stripe App Marketplace is a business-to-business (B2B) ecosystem. Apps in the marketplace must provide functionality that clearly enables or enhances a Stripe user’s business activities.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide an app that empowers users to conduct their business more efficiently and effectively.<br>*   Provide contextual information and actions. Make sure you’re adding value to the user’s workflow in Stripe. Only provide deep links out to your service when it might be helpful to reference a deeper workflow.<br>*   Provide complementary, non-duplicative functionality. Your app should add new and unique capabilities that are useful to users and augment their workflows on Stripe. | *   Don’t build consumer or social apps such as games, quizzes, and click bait.<br>*   Don’t merely use your app as a jumping off point to your own service, without providing any tangible value to your users within Stripe. Deep links should be secondary to contextual information or actions. |\n\n**Accuracy of calculations and data visualization**\n\nAll calculations performed by your application must be accurate and trustworthy. Any data or visualizations presented by your app should be accurate and complete.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Present users with valuable calculated data only where you have all relevant information and data necessary to give a financially accurate result. _For example: Accurate balance totals with all relevant information and data._ | *   Don’t present users with unreliable information where you don’t have enough information to correctly compute the result. _For example: Computing tax amounts without proper tax classifications._<br>*   Don’t present users with inaccurate information because you don’t have all of the data you need for an accurate calculation. |\n\n**Payment processing**\n\nUnless approved by Stripe in writing, you must process payments triggered by core functionalities of your app on Stripe.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Use Stripe for any necessary payment processing in your app. | *   Don’t use external payment processors in your app to bypass Stripe |\n\n#### Testing guidance and credentials ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDuring app review, Stripe uses your test guidance and credentials to review your app’s stability, component usage, and user experience. You must provide the following:\n\n*   **Testing guidance**: Include several user scenarios or use cases that cover all the key features of your app, including the onboarding process.\n    \n*   **Testing credentials of test accounts**: Include one or more sets of testing credentials that Stripe can use to install and use your app. If your test accounts require specific data to use your app (such as a CSV file), you must include it with the account.\n    \n    #### Caution\n    \n    Stripe **does not** permit you to use real (non-test) accounts for the app review process. If you need other ways to provide us access to a specific account for testing purposes, contact [Stripe Support](https://support.stripe.com/contact/login) for assistance.\n    \n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide the detailed steps required to test your app.<br>*   Provide details about the expected behavior Stripe will see.<br>*   Provide sample data as needed per test account.<br>*   Provide test credentials of accounts that accurately represent your business.<br>*   Provide test credentials for a paid account if any portion of your app requires a paid account to test.<br>*   Provide test credentials for the highest role-based access within your app. _For example: “admin”._<br>*   Provide details about how different user roles in your system affect how different elements render within the Stripe Dashboard UI. _For example: “admin” or “view only”._<br>*   Provide detailed steps about how to connect your app with Stripe.<br>*   For apps that require data sync, provide detailed steps for how to both sync the necessary data and to confirm that the data is accurate.<br>*   For apps that require live data (for example, transactions), provide detailed steps for how to view this data.<br>*   For apps that are region specific or have geographical restrictions, provide details about which regions are supported, and test credentials for a Stripe account with the latest version of your app installed.<br>*   Disable multi-factor authentication or provide instructions for reviewers to pass it. | *   Don’t expect app reviewers to “figure it out.” |\n\nExample test credentials for an example app like Stripe with Google Sheets:\n\n| Test account name | Username | Password |\n| --- | --- | --- |\n| Google Sheets | `teststripeapps@stripe.com` | `teststripeapps` |\n| Stripe | `teststripeapps@stripe.com` | `teststripeapps` |\n\nExample user scenario for an example app like Stripe with Google Sheets:\n\n| User scenario | Step by step instructions |\n| --- | --- |\n| Sign in as a user | 1.  Install the app from the Stripe App Marketplace.<br>2.  Open the app.<br>3.  Click the **Sign in** button.<br>4.  Enter the Google test credentials (provided for you below).<br>5.  Give the app access to your Google account.<br>6.  Return to the Stripe dashboard signed in to the app. You should be able to use a service of Google Sheets in your app in the Dashboard. |\n| Export data from Stripe to Google Sheets | 1.  Navigate to either the Payments or Customers Dashboard page.<br>2.  Open the app in the Dashboard.<br>3.  Click the button in the app drawer to export data.<br>4.  Select a folder (optional).<br>5.  Save the data. The data should be available as a CSV in your Google Drive account. |\n\n**No advertising**\n\nYour app may not contain display or banner advertisements.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Keep your app focused on the key value you’re providing to merchants. | *   Include ads of any sort (your own or from a display advertising service).<br>*   Include promises of future releases. |\n\n**Fully-functional and bug-free**\n\nYour app must be complete, polished, and free from obvious bugs. This includes broken links.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Publish your app when it’s functionally complete.<br>*   Perform end-to-end testing on your app under multiple scenarios.<br>*   Fix any bugs you find before submitting your app for review.<br>*   Make sure any links in your app point to valid URLs. | *   Don’t leave in buttons that do nothing, half-finished views, and so on.<br>*   Don’t attempt to publish the app with known bugs, crashes, and so on.<br>*   Don’t include links to non-existent pages (404) or pages that produce error messages. |\n\n**Permissions**\n\nYour app manifest must include the minimum necessary set of permissions required for your app to operate. Your app won’t be permitted to attempt any API call that it hasn’t requested permissions for.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Declare all necessary permissions for your app in your app’s manifest file. | *   Don’t request permissions that your app doesn’t actively use.<br>*   Don’t attempt to make API calls that you haven’t requested permissions for. (Not only will the calls fail, it provides a bad user experience.) |\n\n**Breaking changes**\n\nMake sure that apps function seamlessly for users from version to version. Make sure your app doesn’t cause breaking changes that require user intervention when upgrading, because it can cause business disruptions. If any breaking changes occur, you must clearly message them to users through app release notes and other applicable channels.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Evolve your app in a way that version upgrades can be automatic, with no user intervention.<br>*   Make sure new functionality degrades gracefully if not configured.<br>*   Test your upgrade path from version-to-version so that you accurately reflect the upgrade process for your users. | *   Don’t add mandatory new settings that break your app until they’re configured. |\n\n### Privacy and security ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n**Data usage**\n\nYour app may only leverage user data and APIs that are required for existing app functionality that you clearly communicate to users. You may not resell or publish any data obtained from Stripe users through your app.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Request well-scoped permissions for the data your app needs to function.<br>*   Inform users about how you will use their data.<br>*   Make sure that you use data consistently with your privacy policy. | *   Don’t request permissions for data that you plan to use in the future.<br>*   Don’t have “hidden” features or request permission for data that powers a “hidden” feature in your app.<br>*   Don’t collect data from users for a specific app feature and then use that data for other purposes without disclosing that usage.<br>*   Don’t compile and sell data sets containing data obtained through your app. |\n\n**Code readability**\n\nDon’t submit UI extensions with obfuscated source code—this is a common way to attempt to disguise malicious code. Minification is acceptable and recommended.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Write your code in a straightforward manner.<br>*   Minify your code during the build process. | *   Don’t run your code through obfuscation tools during the build process. |\n\n**External endpoints**\n\nIf your app has a UI Extension, you must declare all external endpoints that the UI Extension communicates with in your app manifest. Don’t allow your app to communicate with any external endpoints not declared in the manifest.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Declare all your external endpoints in the manifest file. | *   Don’t attempt to make API calls or load resources from endpoints you haven’t declared in the manifest file. (The request fails and we monitor apps for similar activity.) |\n\n**Secrets**\n\nYou must properly store secret materials required by UI extensions using the [Secret Store API](https://docs.stripe.com/api/secret_management). This includes OAuth tokens, other credentials, and any app secrets required for operation of your app’s UI Extension. Don’t use the Secret Store API for general data storage.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Store your users’ OAuth tokens in the Secret Store for secure cross-browser persistent authentication with your service. | *   Don’t use cookies, local storage, or Stripe metadata for storing sensitive data.<br>*   Don’t store non-secret data like user preferences using the Secret Store API. |\n\n### Performance and reliability ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n**API call success rates**\n\nYour app must make consistently reliable and successful API calls. Stripe monitors the API success rates for all installed apps.\n\n**API call latency**\n\nAPI calls made by your app need to have consistently low latency. Stripe monitors the API call latency for all installed apps.\n\n### Help and support ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n**Documentation**\n\nYou must provide reasonably complete documentation for your app, accessible from the public internet.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Write thorough documentation that helps users understand and be successful with your app.<br>*   Host your documentation on your website.<br>*   Direct users to your documentation for help and support. | *   Don’t link to a documentation page that says “coming soon.”<br>*   Don’t link to a documentation page that fails to describe major portions of the app’s functionality. |\n\n**Support**\n\nYou must provide clear and easily accessible support channels for users. At a minimum, you must provide an email address for support inquiries and an indication of the response time users should expect.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Provide a support email address with an explicit SLA.<br>*   Provide additional support channels such as chat, forums, and so on. | *   Don’t provide a “black hole” email address for support.<br>*   Don’t check support inquiries infrequently and take days or weeks to respond. |\n\n### Legal compliance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n**Intellectual property**\n\nOnly include assets and works that you have permission to use. Don’t infringe on the intellectual property rights of others.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Use code, images, and other assets that you’ve created or have obtained commercial licenses for. | *   Don’t copy code from others without proper credit or permission.<br>*   Don’t use open source code in a manner inconsistent with its license.<br>*   Don’t use photos from the internet without permission. |\n\n**Data locality**\n\nYou’re responsible for complying with all data locality controls and any applicable jurisdictional laws. Refer to the [Stripe Developer Terms of Service](http://stripe.com/legal/app-developer-agreement) and [Stripe App Marketplace Terms of Service](http://stripe.com/legal/app-marketplace-agreement) for more information.\n\n**Anti-spam**\n\nDon’t send spam. Our anti-spam policy means you’re responsible for making sure all communications with users are opt-in, relevant, and compliant with all applicable email communications laws. You may not sell Stripe user contact information to any third parties.\n\n**Export controls and cryptographic functions**\n\nYour app code must abide by all relevant export control laws. In particular, your app must not contain any custom cryptographic functions. These are covered under the [International Traffic in Arms Regulations](https://www.ecfr.gov/cgi-bin/text-idx?SID=8870638858a2595a32dedceb661c482c&mc=true&tpl=/ecfrbrowse/Title22/22CIsubchapM.tpl) (ITAR), and export of these functions outside of the United States can incur serious penalties.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Use built-in cryptographic functions from standard libraries.<br>*   Use properly-vetted cryptographic functions from well-known open source libraries. | *   Don’t write your own novel cryptographic function and include it in your UI Extension’s source code. |\n\n**Fraudulent activities**\n\nYour app must not engage in or promote any sort of fraudulent activities.\n\n**Restricted businesses and apps**\n\nApps that engage in activities that fall under Stripe’s [Prohibited and Restricted Businesses](https://stripe.com/legal/restricted-businesses#restricted-businesses) and apps that offer services in licensed or regulated industries need to be reviewed to determine whether Stripe can support your use case. If we determine your app falls into one of these categories, we’ll notify you during app review and work with you to complete the review process.\n\n| Do  | Don’t |\n| --- | --- |\n| *   Review [Prohibited and Restricted Businesses](https://stripe.com/legal/restricted-businesses#restricted-businesses) to determine whether it applies to your business or app.<br>*   If Stripe considers your business or app a restricted business, or your app is associated with an industry where licensing is required or your business is regulated, contact [stripe-apps@stripe.com](mailto:stripe-apps@stripe.com) to begin the enhanced review process.<br>*   Ensure your business meets all regulatory requirements to operate in your jurisdiction.<br>*   Submit your app for review and work with Stripe to complete the review process. | *   Try to submit an app if your business operates in a regulated industry without the necessary licenses or approvals.<br>*   Submit an app with functionality related to a restricted business without having the necessary licenses or approvals.<br>*   Create a Stripe account to develop an app using information unrelated to your business. |\n\n**Prohibited businesses**\n\nYour company or you as a developer can’t engage in one or more types of business that are prohibited by our [Terms of Services](https://stripe.com/legal/restricted-businesses#restricted-businesses).\n\n**Sanctioned countries**\n\nYour company or you as a developer can’t be based in a country Stripe cannot engage with due to [embargo or other restrictions](https://support.stripe.com/questions/understanding-sanctions).",
  "title": "Stripe App Marketplace review requirements | Stripe Documentation",
  "description": "Understand the process and requirements to get your app approved for listing in the Stripe App Marketplace.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/how-stripe-apps-work",
  "markdown": "# How Stripe Apps work | Stripe DocumentationThe Stripe Docs logo\n\n## Learn what you need to know to build apps on Stripe.\n\nStripe Apps lets you embed custom user experiences directly in the Stripe Dashboard and orchestrate the Stripe API. You can build an app to:\n\n*   Create and modify Stripe data, such as customer information, orders, and invoices\n*   Sync Stripe data into other systems\n*   Add customizations to the Stripe user interface\n\nFor more examples of what you can build with Stripe Apps, see [Sample apps](https://docs.stripe.com/stripe-apps/sample-apps).\n\nThe basic components of Stripe Apps:\n\nUsing Stripe Apps, you can create custom apps for your own account, or you can make your apps available to other Stripe users through the [Stripe App Marketplace](https://docs.stripe.com/stripe-apps/distribution-options).\n\nUse this guide to learn about the three types of Stripe Apps you can build and how to use permissions to get access to the information your app needs.\n\n## Full-stack applications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMost Stripe Apps have two components:\n\n*   A frontend component in the Stripe Dashboard, using UI extensions\n*   A backend component that’s responsible for saving the state and performing background operations\n\n![The components of a full-stack application](https://b.stripecdn.com/docs-statics-srv/assets/stripe-apps-full-stack-app.2a8251568ced0f8fa10193d8150aad23.png)\n\nThe components of a full-stack application\n\nAuthentication between an app’s UI and its corresponding backend services works by using either [OAuth](https://docs.stripe.com/stripe-apps/pkce-oauth-flow) or a [shared secret](https://docs.stripe.com/stripe-apps/build-backend#authenticate-ui-to-backend).\n\n#### Note\n\n## Backend-only applications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can build a Stripe App without a UI. For example, an app might collect order data from Stripe and send that data to another service for fulfillment.\n\nThe components of a backend-only application:\n\nFor more information on what you can do with the backend of your app, see [Server-side logic](https://docs.stripe.com/stripe-apps/build-backend).\n\n## Frontend-only applications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can build an app that extends the Stripe Dashboard and doesn’t include any additional backend functionality. A Stripe app can consist solely of a UI. With UI extensions, you create a custom UI and control where and how it appears in the Stripe Dashboard.\n\n![The components of a frontend-only application](https://b.stripecdn.com/docs-statics-srv/assets/stripe-apps-frontend-only-app.f8a4611260e353f1d19028ad5efda70f.png)\n\nThe components of a frontend-only application\n\nFrontend-only applications using UI extensions are a good choice if:\n\n*   Your application doesn’t need to communicate with a backend service.\n*   Your application only needs to communicate with the Stripe API on behalf of a user signed in to the Stripe Dashboard.\n*   Your application uses an OAuth provider to authenticate users and interact with other services.\n\nFor more information, see [How UI extensions work](https://docs.stripe.com/stripe-apps/how-ui-extensions-work).\n\n## Application permissions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAll Stripe Apps, regardless of type, require explicit permission to access data. These permissions fall into two categories:\n\n*   Stripe permissions, which determine what Stripe objects the application can read and write\n*   Third-party permissions, which determine what other services have access to a user’s Stripe data\n\nThe [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest \"app manifest\") stores the Stripe and third-party permissions granted to an app.\n\n### Stripe permissions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore an app can access any Stripe data, you must grant permission for that data to the app. See a complete list of all [permissions](https://docs.stripe.com/security/permissions).\n\nPermissions apply in several ways:\n\n*   Apps can listen for [webhook events](https://docs.stripe.com/webhooks \"webhook\") on a Stripe object only if they have permission to read the object.\n*   Apps can make Stripe API calls only if that API grants permission to the application.\n*   When an app calls a Stripe API from a UI extension, both the app and the signed-in user must have permission to access the API.\n\nUI extensions call the Stripe API on behalf of the signed in user. The app can’t access data or perform actions that the signed in user can’t also do. If the signed in user has permissions that the app didn’t request, the app is still unable to read or write that data. However, if the app has permissions that the signed in user doesn’t have, the app can still perform the action, if the app has permission to do so. In this case, the backend service is responsible for checking the user’s permissions.\n\n### Third-party services![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Apps must also explicitly list the URLs for any non-Stripe services that could potentially receive Stripe data.\n\nIn UI extensions, accessible URLs are enforced by applying a Content Security Policy (CSP). This policy causes any `fetch` call to fail unless it’s explicitly listed in the [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest \"app manifest\").\n\n### Granting permissions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest \"app manifest\") stores all permissions for an application. To grant permissions to a specific Stripe object or backend service, use the `stripe app grant` command when you upload the app. For more information, see a list of all [permissions](https://docs.stripe.com/stripe-apps/reference/permissions).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Create an app](https://docs.stripe.com/stripe-apps/create-app)\n*   [Stripe App CLI reference](https://docs.stripe.com/stripe-apps/reference/cli)\n*   [How UI extensions work](https://docs.stripe.com/stripe-apps/how-ui-extensions-work)\n*   [Server-side logic](https://docs.stripe.com/stripe-apps/build-backend)\n*   [Authentication flows](https://docs.stripe.com/stripe-apps/pkce-oauth-flow)",
  "title": "How Stripe Apps work | Stripe Documentation",
  "description": "Learn what you need to know to build apps on Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/libraries/ios",
  "markdown": "# Stripe iOS SDK | Stripe DocumentationThe Stripe Docs logo\n\n## Build payments into your iOS mobile app.\n\nThe Stripe iOS SDK helps you build customizable payments into your iOS app. We provide powerful and customizable UI screens and elements that you can use out-of-the-box to collect your users’ payment details. We also expose the low-level APIs that enable those UIs so that you can build fully custom payments.\n\n![Examples of apps using the Address Element, Mobile Payment Element, and Card Element in an iOS app.](https://b.stripecdn.com/docs-statics-srv/assets/ios-landing.35eb3fe43605b2b982353f4bdac95840.png)",
  "title": "Stripe iOS SDK | Stripe Documentation",
  "description": "Build payments into your iOS mobile app.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/libraries/react-native",
  "markdown": "# Stripe React Native SDK | Stripe DocumentationThe Stripe Docs logo\n\n## Build payments into your React Native mobile app.\n\nThe Stripe React Native SDK allows you to build payments into your native Android and iOS apps using [React Native](https://reactnative.dev/). We provide powerful and customizable UI screens and elements that you can use out-of-the-box to collect your users’ payment details.\n\n![Examples of apps using the Address Element, Mobile Payment Element, and Card Element in a React Native app.](https://b.stripecdn.com/docs-statics-srv/assets/react-native-landing.ec78345ff29f805d6b789684e2f1a226.png)",
  "title": "Stripe React Native SDK | Stripe Documentation",
  "description": "Build payments into your React Native mobile app.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/libraries/android",
  "markdown": "# Stripe Android SDK | Stripe DocumentationThe Stripe Docs logo\n\n## Build a payment experience in your Android mobile app.\n\nThe Stripe Android SDK allows you to quickly build a payment flow in your Android app. We provide powerful and customizable UI elements that you can use out-of-the-box to collect your users’ payment details. We also expose the low-level APIs that underpin those UIs so that you can build fully custom experiences.\n\n![Examples of apps using the Address Element, Mobile Payment Element, and Card Element in an Android app.](https://b.stripecdn.com/docs-statics-srv/assets/android-landing.0122e3791f7b50c9ce29b6b74576fd28.png)",
  "title": "Stripe Android SDK | Stripe Documentation",
  "description": "Build a payment experience in your Android mobile app.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/libraries/stripejs-esmodule",
  "markdown": "# ES Module Stripe.js SDK | Stripe DocumentationThe Stripe Docs logo\n\n## Set up the ES Module Stripe.js client-side SDK in your web application.\n\nThis introductory guide shows you how to install the [ES Module Stripe.js](https://github.com/stripe/stripe-js) client-side SDK with a script tag or package manager. The SDK wraps the global `Stripe` function provided by the Stripe.js script as an ES module. It allows you to use [Elements](https://docs.stripe.com/payments/elements), our prebuilt UI components, to create a payment form that lets you securely collect a customer’s card details without handling the sensitive data.\n\n[](#web-stripejs-html)\n\n### Installation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo install by script, add the [Stripe.js ES Module](https://github.com/stripe/stripe-js) as a script to the `<head>` element of your **HTML**. This allows any newly created [Stripe objects](https://docs.stripe.com/js#stripe-function) to be globally accessible in your code.\n\n### Stripe.js constructor ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nNext, set the [API publishable key](https://dashboard.stripe.com/test/apikeys) to allow Stripe to [tokenize](https://docs.stripe.com/api/tokens) customer information and collect sensitive payment details. For example:\n\n`var stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\n[](#web-stripejs-esmodule)\n\n### Installation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo install by package manager, install the [Stripe.js ES Module](https://github.com/stripe/stripe-js) from the [npm public registry](https://www.npmjs.com/).\n\n`npm install @stripe/stripe-js`\n\n### Stripe.js constructor ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nNext, import the module into a **JavaScript** file. The following function returns a `Promise` that resolves with a newly created [Stripe object](https://docs.stripe.com/js#stripe-function) after Stripe.js loads.\n\n`import {loadStripe} from '@stripe/stripe-js';  const stripe = await loadStripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`",
  "title": "ES Module Stripe.js SDK | Stripe Documentation",
  "description": "Set up the ES Module Stripe.js client-side SDK in your web application.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/libraries/community",
  "markdown": "# Community libraries | Stripe DocumentationThe Stripe Docs logo\n\n## Browse the community libraries and available for a Stripe integration.\n\nFind some of the many community-supported UI and server-side SDKs available for Stripe listed below.",
  "title": "Community libraries | Stripe Documentation",
  "description": "Browse the community libraries and available for a Stripe integration.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/libraries/versioning",
  "markdown": "# Stripe versioning and support policy\n\n## Learn about Stripe's versioning and support policy.\n\n## Stripe API versions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe’s API versioning policy is based on the release date. For example, 2023-01-15. We release a new API version together with a new version of the SDK. To understand what to expect from a new API version, see [API upgrades](https://docs.stripe.com/upgrades).\n\n## Stripe SDK versions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe’s SDK versioning policy is based on the semantic versioning standard. For example, in version 4.3.2, 4 is the _major_, 3 is the _minor_, and 2 is the _patch_. When we release a new SDK version for new features or bug fixes, we increment one of these three version components depending on the type of change introduced.\n\n*   **Major**. We increment the _major_ version component when the version contains breaking changes that are backwards incompatible with the latest version: to add a required parameter, change a type, property, method, or parameter. For example, renaming the SDK’s exception classes.\n*   **Minor**. We increment the _minor_ version component when the version contains new features that are backwards compatible with the latest version: to add a new type, property, method, optional parameter, or supported parameter value. For example, clarifying the SDK’s metadata deletion message.\n*   **Patch**. We increment the _patch_ version component when the version contains backward-compatible bug fixes: to modify a behavior if correcting that behavior doesn’t change any documented types, properties, methods, or parameters. For example, fixing a bug where file uploads weren’t listed properly.\n\n### Stripe beta SDK versions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can access certain Stripe products and features in the beta stage with beta SDKs. The versions of these beta SDKs have the `beta` or `b` suffix, for example, 5.1.0b3 in Python and 5.1.0-beta.3 in other language SDKs. Try these beta SDKs and share feedback with us before the features reach the stable phase. To learn more about how to use the beta SDKs, read the readme file in the GitHub repository of the individual language SDKs.\n\n## Stripe SDK support policy![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNew features and bug fixes are released on the latest _major_ version of the SDK. If you’re on an older _major_ SDK version, we recommend upgrading to the latest major version to take advantage of these features and bug fixes. Older major versions of the package continue to be available for use, but won’t receive any additional updates.\n\n### Migration guides![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe provide migration guides to help you upgrade from older major SDK versions. You can find them in the wiki section of our SDK GitHub repositories.\n\n*   [Python SDK wiki](https://github.com/stripe/stripe-python/wiki)\n*   [.NET SDK wiki](https://github.com/stripe/stripe-dotnet/wiki)\n*   [Java SDK wiki](https://github.com/stripe/stripe-java/wiki)\n*   [Go SDK wiki](https://github.com/stripe/stripe-go/wiki)\n*   [PHP SDK wiki](https://github.com/stripe/stripe-php/wiki)\n*   [Ruby SDK wiki](https://github.com/stripe/stripe-ruby/wiki)\n*   [Node.js SDK wiki](https://github.com/stripe/stripe-node/wiki)",
  "title": "Stripe versioning and support policy | Stripe Documentation",
  "description": "Learn about Stripe's versioning and support policy.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/libraries/set-version",
  "markdown": "# Set a Stripe API version\n\n## Follow these guidelines to make sure that API versions match throughout your Stripe integration.\n\nYour account has a **default API version**, which defines how you call the API, what functionality you have access to and what you’re guaranteed to get back as part of the response. Webhook event objects are based on your default API version, which might be different from the API version used by the SDK. To make sure these versions match, we recommend [registering a webhook endpoint](https://docs.stripe.com/webhooks#register-webhook) with the same [API version](https://docs.stripe.com/api/webhook_endpoints/create#create_webhook_endpoint-api_version) used as the SDK. To find your version, see [View your default API version](https://docs.stripe.com/development/dashboard/request-logs#view-your-default-api-version).\n\n## Versioning basics![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe’ve covered a few fundamental concepts you need to know about API versions used in SDKs. Choose your SDK language to get started.\n\n### Setting the API version![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe stripe-ruby library allows you to set the API version globally or on a per-request basis. If you don’t set an API version, recent versions of stripe-ruby use the API version that was latest at the time your version of stripe-ruby was released. Versions of stripe-ruby before [v9](https://github.com/stripe/stripe-ruby/blob/master/CHANGELOG.md#900---2023-08-16) use your account’s default API version.\n\nTo set the API version **globally** with the SDK, assign the version to the `Stripe.api_version` property:\n\n`require 'stripe' Stripe.api_key =` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`Stripe.api_version = '2024-06-20'`\n\nOr set the version per-request:\n\n`require 'stripe' intent = Stripe::PaymentIntent.retrieve(   'pi_1DlIVK2eZvKYlo2CW4yj5l2C',   {     stripe_version: '2024-06-20',   } ) intent.capture`\n\n#### Note\n\nWhen you override the version globally or per-request, the API response objects are also returned in that version.\n\n### Updating your API version![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore updating [your API version](https://docs.stripe.com/development/dashboard/request-logs#view-your-default-api-version), carefully review the following resources:\n\n*   [Stripe API changelog](https://docs.stripe.com/upgrades#api-versions)\n*   [Upgrading your API version](https://docs.stripe.com/upgrades#how-can-i-upgrade-my-api)\n\nYou can upgrade your account’s default API version in the [Developers Dashboard](https://dashboard.stripe.com/developers). Update your code to use the latest version of the Ruby SDK and set the new API version when making your calls.",
  "title": "Set a Stripe API version | Stripe Documentation",
  "description": "Follow these guidelines to make sure that API versions match throughout your Stripe integration.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-js/react",
  "markdown": "# React Stripe.js reference | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about React components for Stripe.js and Stripe Elements.\n\nReact Stripe.js is a thin wrapper around [Stripe Elements](https://docs.stripe.com/payments/elements). It allows you to add Elements to any React app.\n\nThe [Stripe.js reference](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options) covers complete Elements customization details.\n\nYou can use Elements with any Stripe product to collect online payments. To find the right integration path for your business, [explore our docs](https://docs.stripe.com/).\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis doc assumes that you already have a basic working knowledge of [React](https://reactjs.org/) and that you have already set up a React project. If you’re new to React, we recommend that you take a look at the [Getting Started](https://react.dev/learn) guide before continuing.\n\n## Setup![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInstall React Stripe.js and the Stripe.js loader from the [npm public registry](https://www.npmjs.com/package/@stripe/react-stripe-js).\n\n`npm install --save @stripe/react-stripe-js @stripe/stripe-js`\n\n## Elements provider![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `Elements` provider allows you to use [Element components](#element-components) and access the [Stripe object](https://docs.stripe.com/js/initializing) in any nested component. Render an `Elements` provider at the root of your React app so that it is available everywhere you need it.\n\nTo use the `Elements` provider, call [loadStripe](https://github.com/stripe/stripe-js/blob/master/README.md#loadstripe) from `@stripe/stripe-js` with your publishable key. The `loadStripe` function asynchronously loads the Stripe.js script and initializes a Stripe object. Pass the returned `Promise` to `Elements`.\n\n``import {Elements} from '@stripe/react-stripe-js'; import {loadStripe} from '@stripe/stripe-js';  // Make sure to call `loadStripe` outside of a component’s render to avoid // recreating the `Stripe` object on every render. const stripePromise = loadStripe(``\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  export default function App() {   const options = {     // passing the client secret obtained from the server     clientSecret: '{{CLIENT_SECRET}}',   };    return (     <Elements stripe={stripePromise} options={options}>       <CheckoutForm />     </Elements>   ); };`\n\n| prop | description |\n| --- | --- |\n| `stripe` | required `Stripe \\| null \\| Promise<Stripe \\| null>`<br><br>A [Stripe object](https://docs.stripe.com/js/initializing) or a `Promise` resolving to a Stripe object. The easiest way to initialize a Stripe object is with the [Stripe.js wrapper module](https://github.com/stripe/stripe-js/blob/master/README.md#readme). After you set this prop, you can’t change it.<br><br>You can also pass in `null` or a `Promise` resolving to `null` if you’re performing an initial server-side render or when generating a static site. |\n| `options` | optional `Object`<br><br>Optional Elements configuration options. [See available options](https://docs.stripe.com/js/elements_object/create#stripe_elements-options). To create Payment Elements, you must include the Intent’s `clientSecret` unless [you render the element before creating the Intent](https://docs.stripe.com/payments/accept-a-payment-deferred?platform=web).<br><br>Because props are immutable, you can’t change `options` after setting it. However, you can change the appearance of an element by calling the [elements.update](https://docs.stripe.com/js/elements_object/update#elements_update-options-appearance) method. |\n\n## Element components![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nElement components provide a flexible way to securely collect payment information in your React app.\n\nYou can mount individual Element components inside of your `Elements` tree. Note that you can only mount one of each type of Element in a single `<Elements>` group.\n\n`import {PaymentElement} from '@stripe/react-stripe-js';  const CheckoutForm = () => {   return (     <form>       <PaymentElement />       <button>Submit</button>     </form>   ); };  export default CheckoutForm;`\n\n| prop | description |\n| --- | --- |\n| `id` | optional `string`<br><br>Passes through to the [Element’s container](https://docs.stripe.com/js/element/the_element_container). |\n| `className` | optional `string`<br><br>Passes through to the [Element’s container](https://docs.stripe.com/js/element/the_element_container). |\n| `options` | optional `Object`<br><br>An object containing Element configuration options. [See available options](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options) for the Payment Element or [available options](https://docs.stripe.com/js/elements_object/create_element?type=card#elements_create-options) for individual payment method Elements. |\n| `onBlur` | optional `() => void`<br><br>Triggered when the Element loses focus. |\n| `onChange` | optional `(event: Object) => void`<br><br>Triggered when data exposed by this Element is changed (for example, when there is an error).<br><br>For more information, refer to the [Stripe.js reference](https://docs.stripe.com/js/element/events/on_change?type=paymentElement#element_on_change-handler). |\n| `onClick` | optional `(event: Object) => void`<br><br>Triggered by the `<PaymentRequestButtonElement>` when it is clicked.<br><br>For more information, refer to the [Stripe.js reference](https://docs.stripe.com/js/element/events/on_click#element_on_click-handler). |\n| `onEscape` | optional `(event: Object) => void`<br><br>Triggered when the escape key is pressed within an Element.<br><br>For more information, refer to the [Stripe.js reference](https://docs.stripe.com/js/element/events/on_escape). |\n| `onFocus` | optional `() => void`<br><br>Triggered when the Element receives focus. |\n| `onLoaderror` | optional `(event: Object) => void`<br><br>Triggered when the Element fails to load.<br><br>This event is only emitted from the `payment`, `linkAuthentication`, `address`, and `expressCheckout` Elements.<br><br>For more information, refer to the [Stripe.js reference](https://docs.stripe.com/js/element/events/on_loaderror). |\n| `onLoaderStart` | optional `(event: Object) => void`<br><br>Triggered when the [loader](https://docs.stripe.com/js/elements_object/create#stripe_elements-options-loader) UI is mounted to the DOM and ready to be displayed.<br><br>This event is only emitted from the `payment`, `linkAuthentication`, and `address` Elements.<br><br>For more information, refer to the [Stripe.js reference](https://docs.stripe.com/js/element/events/on_loaderstart). |\n| `onReady` | optional `(element: Element) => void`<br><br>Triggered when the Element is fully rendered and can accept imperative `element.focus()` calls. Called with a reference to the underlying Element instance. |\n\n### Available Element components![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are many different kinds of Elements, useful for collecting different kinds of payment information. These are the available Elements today.\n\n| Component | Usage |\n| --- | --- |\n| `AddressElement` | Collects address details for 236+ regional formats. See the [Address Element](https://docs.stripe.com/elements/address-element/collect-addresses?platform=web&client=react) docs. |\n| `AfterpayClearpayMessageElement` | Displays installments messaging for Afterpay payments. |\n| `AuBankAccountElement` | Collects Australian bank account information (BSB and account number) for use with BECS Direct Debit payments. |\n| `CardCvcElement` | Collects the card‘s CVC number. |\n| `CardElement` | A flexible single-line input that collects all necessary card details. |\n| `CardExpiryElement` | Collects the card‘s expiration date. |\n| `CardNumberElement` | Collects the card number. |\n| `ExpressCheckoutElement` | Allows you to accept card or wallet payments through one or more payment buttons, including Apple Pay, Google Pay, Link, or PayPal. See the [Express Checkout Element](https://docs.stripe.com/elements/express-checkout-element) docs. |\n| `FpxBankElement` | The customer’s bank, for use with FPX payments. |\n| `IbanElement` | The International Bank Account Number (IBAN). Available for SEPA countries. |\n| `IdealBankElement` | The customer’s bank, for use with iDEAL payments. |\n| `LinkAuthenticationElement` | Collects email addresses and allows users to log in to Link. See the [Link Authentication Element](https://docs.stripe.com/payments/elements/link-authentication-element) docs. |\n| `PaymentElement` | Collects payment details for [25+ payment methods](https://docs.stripe.com/payments/payment-methods/integration-options) from around the globe. See the [Payment Element](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=elements&client=react) docs. |\n| `PaymentRequestButtonElement` | An all-in-one checkout button backed by either Apple Pay or the Payment Request API. See the [Payment Request Button](https://docs.stripe.com/stripe-js/elements/payment-request-button) docs. |\n\n## useElements hook![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### `useElements(): Elements | null`\n\nTo safely pass the payment information collected by the Payment Element to the Stripe API, access the `Elements` instance so that you can use it with [stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment). If you use the [React Hooks API](https://react.dev/reference/react), then `useElements` is the recommended way to access a mounted Element. If you need to access an Element from a class component, use [ElementsConsumer](#elements-consumer) instead.\n\n#### Note\n\nNote that if you pass a `Promise` to the [Elements provider](#elements-provider) and the `Promise` hasn’t yet resolved, then `useElements` will return `null`.\n\n``import {useStripe, useElements, PaymentElement} from '@stripe/react-stripe-js';  const CheckoutForm = () => {   const stripe = useStripe();   const elements = useElements();    const handleSubmit = async (event) => {     // We don't want to let default form submission happen here,     // which would refresh the page.     event.preventDefault();      if (!stripe || !elements) {       // Stripe.js hasn't yet loaded.       // Make sure to disable form submission until Stripe.js has loaded.       return;     }      const result = await stripe.confirmPayment({       //`Elements` instance that was used to create the Payment Element       elements,       confirmParams: {         return_url: \"[https://example.com/order/123/complete](https://example.com/order/123/complete)\",       },     });      if (result.error) {       // Show error to your customer (for example, payment details incomplete)       console.log(result.error.message);     } else {       // Your customer will be redirected to your `return_url`. For some payment       // methods like iDEAL, your customer will be redirected to an intermediate       // site first to authorize the payment, then redirected to the `return_url`.     }   };    return (     <form onSubmit={handleSubmit}>       <PaymentElement />       <button disabled={!stripe}>Submit</button>     </form>   ) };  export default CheckoutForm;``\n\n## useStripe hook![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### `useStripe(): Stripe | null`\n\nThe `useStripe` [hook](https://react.dev/reference/react) returns a reference to the [Stripe](https://docs.stripe.com/js/initializing) instance passed to the [Elements](#elements-provider) provider. If you need to access the Stripe object from a class component, use [ElementsConsumer](#elements-consumer) instead.\n\n#### Note\n\nNote that if you pass a `Promise` to the [Elements provider](#elements-provider) and the `Promise` hasn’t yet resolved, then `useStripe` will return `null`.\n\n``import {useStripe, useElements, PaymentElement} from '@stripe/react-stripe-js';  const CheckoutForm = () => {   const stripe = useStripe();   const elements = useElements();    const handleSubmit = async (event) => {     // We don't want to let default form submission happen here,     // which would refresh the page.     event.preventDefault();      if (!stripe || !elements) {       // Stripe.js hasn't yet loaded.       // Make sure to disable form submission until Stripe.js has loaded.       return;     }      const result = await stripe.confirmPayment({       //`Elements` instance that was used to create the Payment Element       elements,       confirmParams: {         return_url: \"[https://example.com/order/123/complete](https://example.com/order/123/complete)\",       },     });      if (result.error) {       // Show error to your customer (for example, payment details incomplete)       console.log(result.error.message);     } else {       // Your customer will be redirected to your `return_url`. For some payment       // methods like iDEAL, your customer will be redirected to an intermediate       // site first to authorize the payment, then redirected to the `return_url`.     }   };    return (     <form onSubmit={handleSubmit}>       <PaymentElement />       <button disabled={!stripe}>Submit</button>     </form>   ) };  export default CheckoutForm;``\n\n## ElementsConsumer ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo safely pass the payment information collected by the Payment Element to the Stripe API, access the `Elements` instance so that you can use it with [stripe.confirmPayment](https://docs.stripe.com/js/payment_intents/confirm_payment). If you need to access the Stripe object or an Element from a class component, then `ElementsConsumer` provides an alternative to the [useElements](#useElements-hook) and [useStripe](#useStripe-hook) hooks.\n\n``import {ElementsConsumer, PaymentElement} from '@stripe/react-stripe-js';  class CheckoutForm extends React.Component {   handleSubmit = async (event) => {     // We don't want to let default form submission happen here,     // which would refresh the page.     event.preventDefault();      const {stripe, elements} = this.props;      if (!stripe || !elements) {       // Stripe.js hasn't yet loaded.       // Make sure to disable form submission until Stripe.js has loaded.       return;     }      const result = await stripe.confirmPayment({       //`Elements` instance that was used to create the Payment Element       elements,       confirmParams: {         return_url: \"[https://example.com/order/123/complete](https://example.com/order/123/complete)\",       },     });      if (result.error) {       // Show error to your customer (for example, payment details incomplete)       console.log(result.error.message);     } else {       // Your customer will be redirected to your `return_url`. For some payment       // methods like iDEAL, your customer will be redirected to an intermediate       // site first to authorize the payment, then redirected to the `return_url`.     }   };    render() {     return (       <form onSubmit={this.handleSubmit}>         <PaymentElement />         <button disabled={!this.props.stripe}>Submit</button>       </form>     );   } }  export default function InjectedCheckoutForm() {   return (     <ElementsConsumer>       {({stripe, elements}) => (         <CheckoutForm stripe={stripe} elements={elements} />       )}     </ElementsConsumer>   ) }``\n\n| prop | description |\n| --- | --- |\n| `children` | required `({elements, stripe}) => ReactNode`<br><br>This component takes a [function as child](https://reactjs.org/docs/render-props.html#using-props-other-than-render). The function that you provide will be called with the [Elements object](https://docs.stripe.com/js/elements_object) that is managing your Element components and the [Stripe object](https://docs.stripe.com/js/initializing) that you passed to [<Elements>](#elements-provider).<br><br>Note that if you pass a `Promise` to the [Elements provider](#elements-provider) and the `Promise` hasn’t yet resolved, then `stripe` and `elements` will be `null`. |\n\n## Customization and styling![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach element is mounted in an `iframe`, which means that Elements probably won’t work with any existing styling and component frameworks that you have. Despite this, you can still configure Elements to match the design of your site. Customizing Elements consists of [responding to events](https://docs.stripe.com/js/element/events) and configuring Elements with the [appearance](https://docs.stripe.com/elements/appearance-api) option. The layout of each Element stays consistent, but you can modify colors, fonts, borders, padding, and more.\n\nThis demo only displays Google Pay or Apple Pay if you have an active card with either wallet.",
  "title": "React Stripe.js reference | Stripe Documentation",
  "description": "Learn about React components for Stripe.js and Stripe Elements.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/mobile/ios/sdk-23-migration",
  "markdown": "# Migrating to Stripe iOS SDK 23\n\n## Migrate your Swift and Objective-C apps to our modular Swift SDK.\n\nThe [Stripe iOS SDK](https://github.com/stripe/stripe-ios) is now a set of Swift modules, enabling smaller app bundles and better support for Swift APIs.\n\nThis move required changes to our public interface. Xcode will offer suggestions to automatically update most of your code, but you’ll also need to make a few changes yourself.\n\n### Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe SDK now requires Xcode 13.2.1 or later. The minimum deployment target is iOS 13.\n\n### PaymentSheet![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo use PaymentSheet, you must explicitly import the `StripePaymentSheet` module.\n\n`import StripePaymentSheet`\n\n### Modules![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe SDK is now split into separate modules. You can reduce your app’s bundle size by including only the modules you need.\n\n### Module installation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Card field![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSDK 23 replaces `STPPaymentCardTextField`’s `.cardParams` parameter with `.paymentMethodParams`, making it easier to collect the customer’s postal code.\n\nIn most situations, you can now pass the `cardTextField.paymentMethodParams` directly to the Stripe API.\n\n`var cardTextField: STPPaymentCardTextField // Collect card details let paymentIntentParams = STPPaymentIntentParams(clientSecret: paymentIntentClientSecret) let cardParams = cardTextField.cardParams let paymentMethodParams = STPPaymentMethodParams(card: cardParams, billingDetails: nil, metadata: nil) paymentIntentParams.paymentMethodParams = paymentMethodParams`\n\n`var cardTextField: STPPaymentCardTextField // Collect card details let paymentIntentParams = STPPaymentIntentParams(clientSecret: paymentIntentClientSecret) paymentIntentParams.paymentMethodParams = cardTextField.paymentMethodParams`\n\n#### Advanced card field usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo access the STPPaymentMethodCardParams directly, use `.paymentMethodParams.card`.\n\n`var cardTextField: STPPaymentCardTextField let cardParams = cardTextField.cardParams`\n\n`var cardTextField: STPPaymentCardTextField // STPPaymentCardTextField will never return a nil .card let cardParams = cardTextField.paymentMethodParams.card!`\n\n`cardTextField.paymentMethodParams` returns a copy. Never set `cardTextField.paymentMethodParams.card` directly. If you need to set the card information, set `cardTextField.paymentMethodParams` to a new instance of `STPPaymentMethodParams`.\n\n`var cardTextField: STPPaymentCardTextField cardTextField.cardParams = myCardParams`\n\n`var cardTextField: STPPaymentCardTextField let paymentMethodParams = STPPaymentMethodParams(card: myCardParams, billingDetails: nil, metadata: nil) cardTextField.paymentMethodParams = paymentMethodParams`",
  "title": "Migrating to Stripe iOS SDK 23 | Stripe Documentation",
  "description": "Migrate your Swift and Objective-C apps to our modular Swift SDK.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/keys-best-practices",
  "markdown": "# Best practices for managing secret API keys\n\n## Learn how to manage secret API keys and handle key leaks.\n\nSecret API keys are a form of account credentials, like a username and password. If bad actors obtain a secret key, they can use it to harm your business and other parties in the Stripe ecosystem.\n\nStripe users own the responsibility of keeping secret API keys safe. Here are some best practices for how to do that, including by using Stripe-offered security features.\n\n## Protecting against key leakage ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   **Use secure key management systems (KMS) to store secret keys.** When you create a secret live mode key from the Stripe Dashboard, it is only revealed once. Immediately copy the key to a KMS, which is designed to handle sensitive information with encryption and access controls. Make sure you don’t leave a copy of the key in the local file.\n*   **Grant access only to those who need it.** Define a clear policy on which users have permission to create, update or read keys. Limit the access only to those who need it. Audit the access periodically to avoid excess privilege on keys.\n*   **Don’t share secret keys using insecure means.** Don’t share keys in emails, chat messages, or customer support messages. Stripe never asks you for your secret API key.\n*   **Don’t store keys in source code repositories (such as GitHub).** Bad actors might scan public source repositories for leaked keys. Even if the source repository is private, it could be shared with team members on their development environments.\n*   **Don’t embed secret keys in applications.** Bad actors can exploit secret keys by matching a certain string pattern in the application. Avoid embedding keys in applications such as client tools, SDKs, and mobile apps.\n*   **Exercise your ability to roll your API Keys.** Defining and exercising a process for rolling keys helps you understand where your keys are being used and prepares your organization in the event your API key is leaked. By having key rolling processes in place you’ll be prepared to respond to a key leak event with a minimum of impact on your business.\n*   **Audit API request logs to monitor suspicious activities.** We recommend that you regularly audit or monitor API [request logs](https://docs.stripe.com/development/dashboard/request-logs) to proactively identify misused API keys. Make sure your developers aren’t using live mode keys when a test mode key is appropriate. Learn more at [test mode versus live mode](https://docs.stripe.com/keys#test-live-modes).\n*   **Regular training and updating documentation.** Maintain up-to-date documentation about how to handle secret API keys within your organization and host regular training sessions to make sure best practices are followed.\n\n## Adopt security features to protect your integration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   **[Use restricted API keys](https://docs.stripe.com/keys#limit-access).** Restricted API keys can customize read or write access to specific API resources. With restricted keys, especially when giving access to third parties, you can allow only the minimum access to resources required and limit the risk of keys.\n*   **[Limit the IP addresses that can send API requests](https://docs.stripe.com/keys#ip-allowlist).** You can configure your API key so that only requests from designated IP addresses are allowed. We recommended this if your service has stable egress IP ranges and a change management process for updating the allowlist when those egress ranges change.\n\n## Handle leaked secret API keys ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you identified a secret key leak, such as if a key is accidentally published to GitHub， immediately roll the key from Stripe Dashboard and replace your integration with the new key. If you detected abnormal behaviors without confirming that the API key is leaked, we recommended that you roll the API keys proactively while investigating the root cause in parallel.\n\nIf Stripe detects that a live mode secret API key has been exposed, we will immediately notify you and request that you roll the key. It’s crucial for businesses to act promptly to reduce potential damages and financial losses caused by unauthorized use of the leaked key. Depending on the imposed risk and activity on the account, we might decide to roll the key on your behalf. In this case you will receive notifications about any action taken.\n\nStripe doesn’t guarantee that we will detect all leaked keys. You’re responsible for following the best practices to prevent potential key leaks and ensure your integration with Stripe is secure.",
  "title": "Best practices for managing secret API keys | Stripe Documentation",
  "description": "Learn how to manage secret API keys and handle key leaks.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/metadata",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Metadata\n\n## Learn how to use metadata to save additional information.\n\n[Metadata](https://docs.stripe.com/api/metadata) is an attribute on certain Stripe objects that lets you store more information, structured as key-value pairs, to these objects for your own use and reference. For example, you can store your user’s unique identifier from your system on a [Stripe Customer](https://docs.stripe.com/api/customers) object.\n\n## Configuration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n### Data ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can add 50 total key-value pairs within these data limits:\n\n*   **key**: 40 character limit. Square brackets (`[` `]`) can’t be included in keys.\n*   **value**: 500 character limit.\n\nIf your system requires more space than this, store your data in your external database and use a key-value pair to store the external object’s `ID` in `metadata`.\n\nUnless you use metadata with [Radar](https://docs.stripe.com/radar), Stripe doesn’t use metadata—for example, to authorize or decline a charge. Additionally, metadata isn’t visible to your customers unless you choose to show it.\n\n#### Security tip\n\nNever store sensitive information, such as bank account information or credit card details, to metadata.\n\n### Requests ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe only returns metadata when you use a [secret key](https://docs.stripe.com/keys#obtain-api-keys) in your requests. We redact metadata from objects in response to publishable key requests, such as Stripe.js or Mobile SDKs client-side requests.\n\nUse the `metadata` attribute in an API call to pass and store information in key-value pairs.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d name=\"Jenny Rosen\" \\  -d \"metadata[cms_id]\"=6573`\n\n`{   \"id\": \"cus_NffrFeUfNV2Hib\",   \"object\": \"customer\",   ...   \"metadata\": {     \"cms_id\": \"6573\"   }   ... }`\n\nReplace values for existing keys and add new key-value pairs in an API call. For example, you can update a [Customer](https://docs.stripe.com/api/customers) object with an existing key-value pair of `\"loyalty_program\": \"no\"` to`\"loyalty_program\": \"yes\"`. You can also add new metadata, such as the `\"loyalty_member_id\": \"12345678\"` key-value pair in the example below, to the existing metadata.\n\n#### Note\n\nThis parameter uses a merge mechanism, which allows you to add new key-value pairs to an object in an update call without affecting any existing metadata. For example, if a Customer object has `key1` and `key2`, and you update it to add `key3`, the updated object contains all three keys.\n\n`curl https://api.stripe.com/v1/customers/{{CUSTOMER_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"metadata[loyalty_program]\"=yes \\  -d \"metadata[loyalty_member_id]\"=12345678`\n\n`{   \"id\": \"cus_NffrFeUfNV2Hib\",   \"object\": \"customer\",   ...   \"metadata\": {     \"cms_id\": \"6573\",     \"loyalty_program\": \"no\"   }   ... }`\n\n`{   \"id\": \"cus_NffrFeUfNV2Hib\",   \"object\": \"customer\",   ...   \"metadata\": {     \"cms_id\": \"6573\",     \"loyalty_program\": \"yes\",     \"loyalty_member_id\": \"12345678\"   }   ... }`\n\nDelete a single key or an entire set of keys using the API.\n\n### Delete a single key ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPass in the key with an empty string as the value to remove the key from the metadata.\n\n`curl https://api.stripe.com/v1/customers/{{CUSTOMER_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"metadata[loyalty_program]\"=yes \\  -d \"metadata[loyalty_member_id]\"=`\n\n`{   \"id\": \"cus_NffrFeUfNV2Hib\",   \"object\": \"customer\",   ...   \"metadata\": {     \"loyalty_program\": \"yes\",     \"loyalty_member_id\": \"12345678\"   }   ... }`\n\n`{   \"id\": \"cus_NffrFeUfNV2Hib\",   \"object\": \"customer\",   ...   \"metadata\": {     \"loyalty_program\": \"yes\",   }   ... }`\n\n### Delete all keys ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPass an empty object as the value for the `metadata` attribute to delete all of the keys at once.\n\n`curl https://api.stripe.com/v1/customers/`\n\n`{{CUSTOMER_ID}}`\n\n  `-u sk_test_4eC39HqLyjWDarjtT1zdp7dc -d \"metadata\"=\"\"`\n\n`{   \"id\": \"cus_NffrFeUfNV2Hib\",   \"object\": \"customer\",   ...   \"metadata\": {     \"loyalty_program\": \"yes\",     \"loyalty_member_id\": \"12345678\"   }   ... }`\n\n`{   \"id\": \"cus_NffrFeUfNV2Hib\",   \"object\": \"customer\",   ...   \"metadata\": {}   ... }`\n\nAn object’s metadata doesn’t automatically copy to related objects. To view an object’s metadata, you must inspect that object. To retrieve metadata from a related object, build custom logic to find and inspect the related object. To explicitly copy metadata from one object to another, you need to build your own flow.\n\n### Exceptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn certain cases, we copy metadata from one object to another for backwards compatibility and other unique scenarios.\n\n| Object mapping | Description |\n| --- | --- |\n| [Payment Intent](https://docs.stripe.com/api/payment_intents) to [Charge](https://docs.stripe.com/api/charges) | When a Payment Intent creates a Charge, the metadata copies to the Charge in a one-time snapshot. Updates to the Payment Intent’s metadata won’t apply to the Charge. |\n| [Payment Link](https://docs.stripe.com/api/payment_links/payment_links) to [Checkout Session](https://docs.stripe.com/api/checkout/sessions) | When a Payment Link creates a Checkout Session, the metadata copies to the Checkout Session in a one-time snapshot. Updates to the Payment Link’s metadata won’t apply to the Checkout Session. |\n| [Subscription](https://docs.stripe.com/api/subscriptions) to [Invoice](https://docs.stripe.com/api/invoices) | When a Subscription creates an Invoice, the metadata copies to the Invoice object’s [subscription\\_details.metadata](https://docs.stripe.com/api/invoices/object#invoice_object-subscription_details-metadata) attribute in a one-time snapshot. Updates to the subscription’s metadata won’t apply to the Invoice. |\n| [Subscription](https://docs.stripe.com/api/subscriptions) to [Invoice Line Item](https://docs.stripe.com/api/invoices/line_item) | When an Invoice Line Item’s [type](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-type) is set to `subscription`, it presents the subscription’s current metadata. |\n\n## Set metadata indirectly ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSome endpoints accept a `metadata` parameter nested inside of another parameter. You can use these parameters when you create an object to set metadata on an underlying object. For example, you can use `payment_intent_data.metadata` when you create a Checkout Session to provide and set metadata on the underlying Payment Intent the session creates.\n\n## Events and webhook endpoints ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen Stripe sends an [Event](https://docs.stripe.com/api/events) to your [webhook endpoint](https://docs.stripe.com/webhooks), it includes the corresponding object and any metadata the object contains. This allows your webhook handler to receive any metadata that you set on Stripe objects and pass it to downstream processes, such as order fulfillment.\n\nFor example, to include a cart ID when a customer makes a purchase using a [Checkout Session](https://docs.stripe.com/api/checkout/sessions), provide it as metadata when you create the Checkout Session:\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\  -d mode=payment \\  -d \"line_items[0][price]\"=price_1MotwRLkdIwHu7ixYcPLm5uZ \\  -d \"line_items[0][quantity]\"=1 \\  -d \"metadata[cart_id]\"=6943`\n\nWhen the customer completes the checkout process, we send a [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) Event containing the Checkout Session object’s metadata to your webhook endpoint. You must configure your webhook to listen for that Event so you can access the metadata and use it when processing data.\n\n`{   \"id\": \"evt_1P8pqUAgEBCHsfP6JfNctbLv\",   \"object\": \"event\",   \"api_version\": \"2022-11-15\",   \"created\": 1713903702,   \"data\": {     \"object\": {       \"id\": \"cs_test_a1aDQuoXLoddIOV9iOvZRgKAtPoRIfFkYHBWxF9AQAPlGG3STB1ndqqaUw\",       \"object\": \"checkout.session\",       ...       \"metadata\": {         \"cart_id\": \"6943\"       },`\n\nYou can search for existing metadata on supported objects by using specific formatting. This includes searching for records with a specific value for a metadata field or checking if a metadata key is present on an object. Learn more about [searching for metadata](https://docs.stripe.com/search#metadata).\n\n## Prevent fraud with metadata and Radar ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse metadata with Radar to create custom rules that help prevent fraud. Learn more about [Radar metadata attributes](https://docs.stripe.com/radar/rules/reference#metadata-attributes).",
  "title": "Metadata | Stripe Documentation",
  "description": "Learn how to use metadata to save additional information.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/rate-limits",
  "markdown": "# Rate limits | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about API rate limits and how to work with them.\n\nThe Stripe API uses a number of safeguards against bursts of incoming traffic to help maximize its stability. If you send many requests in quick succession, you might see error responses with status code `429`.\n\n## API limiters![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe have several limiters in the API, including a rate limiter and a concurrency limiter.\n\nTreat the limits as maximums, and don’t generate unnecessary load. To prevent abuse, we might reduce the limits.\n\nFor advice on handling 429 errors, see [Handling limiting gracefully](#handling-limiting-gracefully). If you suddenly see a rising number of rate-limited requests, [contact Stripe Support](https://support.stripe.com/).\n\nYou can request a limit increase to enable a high-traffic application by [contacting Stripe Support](https://support.stripe.com/). If you’re requesting a large increase, contact us at least 6 weeks in advance.\n\n### Rate limiter![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe basic rate limiter restricts the number of API requests per second as follows:\n\n*   **Live mode**: 100 read operations and 100 write operations\n*   **Test mode**: 25 read operations and 25 write operations\n\nCalls to certain resources have stricter limits, and also count against the basic limits. These stricter limits apply separately to live mode and test mode.\n\n*   [Files API](https://docs.stripe.com/api/files): 20 read operations and 20 write operations per second\n*   [Search API](https://docs.stripe.com/search#rate-limits): 20 read operations per second\n\nCalls to the [Meter events endpoint](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage#rate-limits) in live mode are subject to a separate rate limit, and don’t count against the basic limits. The limit is 1000 calls per second per Stripe account. In test mode, calls to the Meter events endpoint count toward the basic limit. For Connect platforms, calls on a connected account to the Meter events endpoint also count toward the basic limit.\n\n### Concurrency limiter![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe concurrency limiter restricts the number of concurrent active requests. Problems with this limiter are less common than with the rate limiter, but they likely indicate the existence of resource-intensive, long-lived requests.\n\nCalls to the [Meter events endpoint](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage#rate-limits) are limited to one concurrent call per customer per meter.\n\n## Common causes and mitigations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRate limiting can occur under a variety of conditions, but it’s most common in these scenarios:\n\n*   Running **a large volume of closely-spaced requests** can lead to rate limiting. Often this is part of an analytical or migration operation. When engaging in these activities, you should try to control the request rate on the client side (see [Handling limiting gracefully](#handling-limiting-gracefully)).\n*   Issuing **many long-lived requests** can trigger limiting. Requests vary in the amount of Stripe’s server resources they use, and more resource-intensive requests tend to take longer and run the risk of causing new requests to be shed by the concurrency limiter. Resource requirements vary widely, but list requests and requests that include expansions generally use more resources and take longer to run. We suggest profiling the duration of Stripe API requests and watching for timeouts to try and spot those that are unexpectedly slow.\n*   A sudden increase in charge volume like a **flash sale** might result in rate limiting. We try to set our rates high enough that legitimate payment traffic never exceeds the limits, but if you suspect that an upcoming event might push you over the limits listed above, [contact Stripe Support](https://support.stripe.com/).\n\n## Handling limiting gracefully![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA basic technique for integrations to gracefully handle limiting is to watch for `429` status codes and build in a retry mechanism. The retry mechanism should follow an exponential backoff schedule to reduce request volume when necessary. We’d also recommend building some randomness into the backoff schedule to avoid a [thundering herd effect](https://en.wikipedia.org/wiki/Thundering_herd_problem).\n\nYou can only optimize individual requests to a limited degree, so an even more sophisticated approach would be to control traffic to Stripe at a global level, and throttle it back if you detect substantial rate limiting. A common technique for controlling rate is to implement something like a [token bucket rate limiting algorithm](https://en.wikipedia.org/wiki/Token_bucket) on the client-side. Ready-made and mature implementations for token bucket are available in almost any programming language.\n\n## Object lock timeouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIntegrations may encounter errors with HTTP status `429`, code `lock_timeout`, and this message:\n\n> This object cannot be accessed right now because another API request or Stripe process currently accessing it. If you see this error intermittently, retry the request. If you see this error frequently and are making multiple concurrent requests to a single object, make your requests serially or at a lower rate.\n\nThe Stripe API locks objects on some operations so that concurrent workloads don’t interfere and produce an inconsistent result. The error above is caused by a request trying to acquire a lock that’s already held elsewhere, and timing out after it couldn’t be acquired in time.\n\nLock timeouts have a different cause than rate limiting, but their mitigations are similar. As with rate limiting errors, we recommend retrying on an exponential backoff schedule (see [Handling limiting gracefully](#handling-limiting-gracefully)). But unlike rate limiting errors, the automatic retry mechanisms built into Stripe’s [client libraries](https://docs.stripe.com/libraries) retry `429`s caused by lock timeouts:\n\n`Stripe.max_network_retries = 2`\n\nLock contention is caused by concurrent access on related objects. Integrations can vastly reduce this by making sure that mutations on the same object are queued up and run sequentially instead. Concurrent operations against the API are still okay, but try to make sure simultaneous operations operate only on unique objects. It’s also possible to see lock contention caused by a conflict with an internal Stripe background process—this should be rare, but because it’s beyond user control, we recommend that all integrations are able to retry requests.\n\n## Load testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIt’s common for users to prepare for a major sales event by load testing their systems, with the Stripe API running in test mode as part of it. We generally discourage this practice because API limits are lower in test mode, so the load test is likely to hit limits that it wouldn’t hit in production. Test mode is also not a perfect stand-in for live API calls, and that can be somewhat misleading. For example, creating a charge in live mode sends a request to a payment gateway and that request is mocked in test mode, resulting in significantly different latency profiles.\n\nAs an alternative, we recommend building integrations so that they have a configurable system for mocking out requests to the Stripe API, which you can enable for load tests. For realistic results, they should simulate latency by sleeping for a time that you determine by sampling the durations of real live mode Stripe API calls, as seen from the perspective of the integration.\n\n## API read request allocations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides access to its read (GET) API requests to facilitate reasonable lookup activity related to payment integrations. To maximize quality of service for all users, Stripe provides the following allocations for read requests based on transaction count:\n\n*   Read API requests shouldn’t exceed an average ratio of **500 requests per transaction** for an account. For example, if an account processes 100 transactions in a 30-day period, they shouldn’t exceed 50,000 read API requests during that same period.\n*   When using Connect, a platform and its connected accounts have distinct read API allowances:\n    *   Each connected account has their own allocation for requests they initiate (500 requests per transaction).\n    *   Connect platforms use a separate allocation to make read requests on behalf of their connected accounts using either their secret API key or OAuth access tokens. This allocation is also 500 requests per transaction based on the aggregate transaction count across its connected accounts.\n*   Ratios are measured on a rolling 30-day basis.\n*   Every account, regardless of transaction count, has a minimum allocation of 10,000 read requests per month.\n*   Write API requests have no allocation limit.\n\nCalls to the following API endpoints are excluded from the above allocation limits:\n\n*   [Data products](https://docs.stripe.com/stripe-data)\n*   [Reporting products](https://docs.stripe.com/stripe-reports)\n*   [Tax products](https://docs.stripe.com/tax)\n\nTo reduce your API request volume, consider using [Stripe Data Pipeline](https://stripe.com/data-pipeline) for a complete export of API data to your local database or provider.\n\n#### Filter requests to limit paginated calls\n\nSome list endpoints return [multiple pages](https://docs.stripe.com/api/pagination) of results and might require multiple requests to return the full set of API objects for a list operation. Apply filters when possible to narrow your list results.",
  "title": "Rate limits | Stripe Documentation",
  "description": "Learn about API rate limits and how to work with them.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/automated-testing",
  "markdown": "# Automated testing | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use automated testing in your Stripe integration.\n\nAutomated testing is a common part of application development, both for server and client-side code. Frontend interfaces, like [Stripe Checkout](https://docs.stripe.com/payments/checkout) or the [Payment Element](https://docs.stripe.com/payments/payment-element), have security measures in place that prevent automated testing, and Stripe APIs are rate limited. However, you can simulate the output of our interfaces and API requests using mock data to test your application behavior and its ability to [handle errors](https://docs.stripe.com/error-handling).\n\n## Client side testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you want to test your application’s ability to recover from errors such as transaction declines when using the Payment Element, you can return a simulated [error object](https://docs.stripe.com/api/errors) by hard-coding error objects in your test code, or creating an API service that returns mock errors in an HTTP response. The error object represents what would be returned by the [confirmPayment function](https://docs.stripe.com/js/payment_intents/confirm_payment) when a card is declined. See the following section to learn how you can generate a simulated error object.\n\n### Generating an error object![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFirst, use a Stripe UI element such as the [Payment Element](https://docs.stripe.com/js/element/payment_element) manually to produce an error object by confirming a test mode Payment Intent using one of the [test card numbers](https://docs.stripe.com/testing#declined-payments) for declined payments. Log the error during the confirmation process as shown below.\n\n`const { error } = await stripe.confirmPayment({   elements,   confirmParams: {     return_url: '[https://example.com](https://example.com/)'   }, }) ; if (error) {   console.log(error) }`\n\nThis produces an error object logged to the browser console that resembles the one shown below. The specifics for properties such as `error_code` depend on the card used and the type of error it generates.\n\n`{   \"charge\": \"{{CHARGE_ID}}\",   \"code\": \"card_declined\",   \"decline_code\": \"generic_decline\",   \"doc_url\": \"https://docs.stripe.com/error-codes#card-declined\",   \"message\": \"Your card has been declined.\",   \"payment_intent\": {\"id\": \"{{PAYMENT_INTENT_ID}}\", …},   \"payment_method\": {\"id\": \"{{PAYMENT_METHOD_ID}}\", …},   \"request_log_url\": \"https://dashboard.stripe.com/test/logs/req_xxxxxxx\",   \"type\": \"card_error\" }`\n\nModify your tests to return this error object instead of calling Stripe.js functions and the Stripe APIs. You can use different [test cards](https://docs.stripe.com/testing#declined-payments) to generate errors with different error codes to make sure your application properly handles each type of error.\n\n## Server side testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use the same approach when testing server-side API calls. You can generate Stripe API responses manually for various errors and mock the response returned in backend automated testing.\n\nFor example, to write a test to validate that your application can correctly handle an off-session payment requiring 3DS, you can generate the response by creating a Payment Intent with the Payment Method `pm_card_authenticationRequired` and confirm set to `true`.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=2099 \\  -d currency=usd \\  -d payment_method=pm_card_authenticationRequired \\  -d confirm=true \\  -d off_session=true`\n\nThis generates a Payment Intent with a status of `requires_confirmation`, and other properties associated with [3DS Authentication](https://docs.stripe.com/payments/3d-secure) like `next_action`.\n\n`{   \"id\": \"{{PAYMENT_INTENT_ID}}\",   \"object\": \"payment_intent\",   ... \t\"next_action\": {         \"type\": \"use_stripe_sdk\",     ...   },   ...   \"status\": \"requires_confirmation\",   ... }`\n\nGenerating PaymentIntent objects that reflect different stages of the [Payment lifecycle](https://docs.stripe.com/payments/paymentintents/lifecycle) allows you to test your application’s behavior as the PaymentIntent transitions through various states. Use this approach in your automated testing to make sure your integration can successfully respond to different outcomes, such as requesting that the customer comes back on-session to authenticate a payment that requires a next action.\n\n#### When to use this approach\n\nThe above examples all reference testing the behavior of your application and are suitable to use in a continuous integration test suite. When you need to perform tests to validate the response of the Stripe API, making requests to the API in test mode is an acceptable approach. You can also use Stripe API requests to periodically validate that Stripe API responses haven’t changed—but you should perform these tests infrequently to avoid [rate limits](https://docs.stripe.com/rate-limits).",
  "title": "Automated testing | Stripe Documentation",
  "description": "Learn how to use automated testing in your Stripe integration.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/ips",
  "markdown": "# Domains and IP addresses | Stripe DocumentationThe Stripe Docs logo\n\n## Ensure your integration is always communicating with Stripe.\n\nYour integration must be able to reach any of Stripe’s fully qualified [domain names](#stripe-domains) for it to function properly. Depending on how your integration operates, you may need add them to an allowlist.\n\nTo help your integration operate securely, it must also verify that it’s communicating with **api.stripe.com** through one of our listed [IP addresses](#ip-addresses).\n\nIf your integration also receives [webhooks](https://docs.stripe.com/webhooks) from us, make sure these events originate from a Stripe [webhook IP address](#webhook-notifications).\n\n## Stripe domains![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe uses the following fully qualified domain names to interact with your integration:\n\n`a.stripecdn.com api.stripe.com atlas.stripe.com auth.stripe.com b.stripecdn.com billing.stripe.com buy.stripe.com c.stripecdn.com checkout.stripe.com climate.stripe.com connect.stripe.com dashboard.stripe.com express.stripe.com files.stripe.com hooks.stripe.com invoice.stripe.com invoicedata.stripe.com js.stripe.com m.stripe.com m.stripe.network manage.stripe.com pay.stripe.com payments.stripe.com q.stripe.com qr.stripe.com r.stripe.com verify.stripe.com stripe.com terminal.stripe.com uploads.stripe.com`\n\n## Stripe Terminal domains![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you use [Stripe Terminal](https://docs.stripe.com/terminal), Stripe uses the following fully qualified domain names to interact with your integration:\n\n`api.emms.bbpos.com armada.stripe.com gator.stripe.com *.terminal-events.stripe.com`\n\nStripe Terminal uses the following fully qualified domain names to sync the device date over NTP:\n\n`pool.ntp.org time.android.com`\n\nStripe Terminal uses the following partially qualified domain name to interact with your integration:\n\n`*.[random-string].device.stripe-terminal-local-reader.net`\n\n## IP addresses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe full list of IP addresses that **api.stripe.com** may resolve to is:\n\n`13.112.224.240 13.115.13.148 13.210.129.177 13.210.176.167 13.228.126.182 13.228.224.121 13.230.11.13 13.230.90.110 13.55.153.188 13.55.5.15 13.56.126.253 13.56.173.200 13.56.173.232 13.57.108.134 13.57.155.157 13.57.156.206 13.57.157.116 13.57.90.254 13.57.98.27 18.194.147.12 18.195.120.229 18.195.125.165 34.200.27.109 34.200.47.89 34.202.153.183 34.204.109.15 34.213.149.138 34.214.229.69 34.223.201.215 34.237.201.68 34.237.253.141 34.238.187.115 34.239.14.72 34.240.123.193 34.241.202.139 34.241.54.72 34.241.59.225 34.250.29.31 34.250.89.120 35.156.131.6 35.156.194.238 35.157.227.67 35.158.254.198 35.163.82.19 35.164.105.206 35.164.124.216 50.16.2.231 50.18.212.157 50.18.212.223 50.18.219.232 52.1.23.197 52.196.53.105 52.196.95.231 52.204.6.233 52.205.132.193 52.211.198.11 52.212.99.37 52.213.35.125 52.22.83.139 52.220.44.249 52.25.214.31 52.26.11.205 52.26.132.102 52.26.14.11 52.36.167.221 52.53.133.6 52.54.150.82 52.57.221.37 52.59.173.230 52.62.14.35 52.62.203.73 52.63.106.9 52.63.119.77 52.65.161.237 52.73.161.98 52.74.114.251 52.74.98.83 52.76.14.176 52.76.156.251 52.76.174.156 52.77.80.43 52.8.19.58 52.8.8.189 54.149.153.72 54.152.36.104 54.183.95.195 54.187.182.230 54.187.199.38 54.187.208.163 54.238.140.239 54.65.115.204 54.65.97.98 54.67.48.128 54.67.52.245 54.68.165.206 54.68.183.151 107.23.48.182 107.23.48.232 198.137.150.21 198.137.150.22 198.137.150.23 198.137.150.24 198.137.150.25 198.137.150.26 198.137.150.27 198.137.150.28 198.137.150.101 198.137.150.102 198.137.150.103 198.137.150.104 198.137.150.105 198.137.150.106 198.137.150.107 198.137.150.108 198.137.150.171 198.137.150.172 198.137.150.173 198.137.150.174 198.137.150.175 198.137.150.176 198.137.150.177 198.137.150.178 198.137.150.221 198.137.150.222 198.137.150.223 198.137.150.224 198.137.150.225 198.137.150.226 198.137.150.227 198.137.150.228 198.202.176.21 198.202.176.22 198.202.176.23 198.202.176.24 198.202.176.25 198.202.176.26 198.202.176.27 198.202.176.28 198.202.176.101 198.202.176.102 198.202.176.103 198.202.176.104 198.202.176.105 198.202.176.106 198.202.176.107 198.202.176.108 198.202.176.171 198.202.176.172 198.202.176.173 198.202.176.174 198.202.176.175 198.202.176.176 198.202.176.177 198.202.176.178 198.202.176.221 198.202.176.222 198.202.176.223 198.202.176.224 198.202.176.225 198.202.176.226 198.202.176.227 198.202.176.228`\n\nThe full list of IP addresses that **files.stripe.com**, **armada.stripe.com**, and **gator.stripe.com** may resolve to is:\n\n`3.94.14.82 3.104.99.60 3.114.81.222 3.114.158.108 3.224.33.77 13.113.237.213 13.115.27.220 13.228.40.76 13.236.164.101 18.136.179.41 18.138.166.37 18.141.119.41 18.180.10.245 23.22.133.111 34.233.255.214 34.247.101.32 35.72.84.177 44.235.152.108 44.236.89.158 44.240.26.72 50.19.26.15 52.64.98.19 52.64.208.186 52.210.46.219 54.66.89.9 54.151.226.211 54.163.195.10 54.169.250.228 54.170.183.1 54.187.175.68 54.191.201.88 54.194.97.239 54.203.175.79 54.206.239.65 54.228.85.11 176.34.78.115 198.137.150.0/24 198.202.176.0/24`\n\n#### Note\n\nAlways use the **api.stripe.com** DNS name to contact our API—never an IP address.\n\n## Webhook notifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe full list of IP addresses that webhook notifications may come from is:\n\n`3.18.12.63 3.130.192.231 13.235.14.237 13.235.122.149 18.211.135.69 35.154.171.200 52.15.183.38 54.88.130.119 54.88.130.237 54.187.174.169 54.187.205.235 54.187.216.72`\n\n## Downloading IP address lists![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs a convenience, these IP lists are available in other formats for import into `iptables` or similar tools:\n\n*   [https://stripe.com/files/ips/ips\\_api.txt](https://stripe.com/files/ips/ips_api.txt)\n*   [https://stripe.com/files/ips/ips\\_api.json](https://stripe.com/files/ips/ips_api.json)\n*   [https://stripe.com/files/ips/ips\\_armada\\_gator.txt](https://stripe.com/files/ips/ips_armada_gator.txt)\n*   [https://stripe.com/files/ips/ips\\_armada\\_gator.json](https://stripe.com/files/ips/ips_armada_gator.json)\n*   [https://stripe.com/files/ips/ips\\_webhooks.txt](https://stripe.com/files/ips/ips_webhooks.txt)\n*   [https://stripe.com/files/ips/ips\\_webhooks.json](https://stripe.com/files/ips/ips_webhooks.json)",
  "title": "Domains and IP addresses | Stripe Documentation",
  "description": "Ensure your integration is always communicating with Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/search",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Search\n\n## Look up objects in your Stripe data.\n\nSome top level API resources support retrieval with search API methods. You can use the search APIs to retrieve your Stripe objects in a flexible manner. Using search is a faster alternative to [paginating](https://docs.stripe.com/api/pagination) through all resources. To create a search query, review the [Search query language](https://docs.stripe.com/search#search-query-language) and reference the query fields of the resource:\n\n*   [Query fields for charges](https://docs.stripe.com/search#query-fields-for-charges)\n*   [Query fields for customers](https://docs.stripe.com/search#query-fields-for-customers)\n*   [Query fields for invoices](https://docs.stripe.com/search#query-fields-for-invoices)\n*   [Query fields for PaymentIntents](https://docs.stripe.com/search#query-fields-for-payment-intents)\n*   [Query fields for prices](https://docs.stripe.com/search#query-fields-for-prices)\n*   [Query fields for products](https://docs.stripe.com/search#query-fields-for-products)\n*   [Query fields for subscriptions](https://docs.stripe.com/search#query-fields-for-subscriptions)\n\n## Examples![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHere are some examples of what you can do with the [Search charges API](https://docs.stripe.com/api/charges/search) and [Search PaymentIntents API](https://docs.stripe.com/api/payment_intents/search):\n\n### Charges metadata search ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nLook up charges matching a custom metadata value.\n\n`curl -G https://api.stripe.com/v1/charges/search \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode query=\"metadata['key']:'value'\"`\n\n### Charges last4 search ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nLook up charges matching the last 4 digits of the card used for the payment.\n\n`curl -G https://api.stripe.com/v1/charges/search \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode query=\"payment_method_details.card.last4:4242\"`\n\n### Customers email search ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nLook up customers matching an email.\n\n`curl -G https://api.stripe.com/v1/customers/search \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode query=\"email:'sally@rocketrides.io'\"`\n\n### Negation filter ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nLook up PaymentIntents not in the USD currency.\n\n`curl -G https://api.stripe.com/v1/payment_intents/search \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode query=\"-currency:'usd'\"`\n\n### Numeric filter ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFilter invoice objects with a `total` greater than 1000.\n\n`curl -G https://api.stripe.com/v1/invoices/search \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d query=\"total>1000\"`\n\n### Combining multiple filters ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nLook up charges matching a combination of metadata and currency.\n\n`curl -G https://api.stripe.com/v1/charges/search \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode query=\"metadata['key']:'value' AND currency:'usd'\"`\n\n## Search query language![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Query structure and terminology![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA query `clause` consists of a `field` followed by an `operator` followed by a `value`:\n\n|     |     |\n| --- | --- |\n| clause | `email:\"amy@rocketrides.io\"` |\n| field | `email` |\n| operator | `:` |\n| value | `amy@rocketrides.io` |\n\nYou can combine multiple query clauses in a search by either separating them with a space, or using the `AND` or `OR` keywords (case insensitive). You can’t combine `AND` and `OR` in the same query. Furthermore, there’s no option to use parentheses to give priority to certain logic operators. By default, the API combines clauses with `AND` logic.\n\nThe example query `email:\"amy@rocketrides.io\" metadata[\"key\"]:\"value\"` matches records where both the email address is amy@rocketrides.io, and the metadata in the record includes `key` with a value of `value`.\n\n### Creating a query which does not match a clause![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can negate query clauses using a `-` character. For example, the following search returns records that don’t match the email `amy@rocketrides.io`.\n\n`-email:\"amy@rocketrides.io\"`\n\n### Field types, substring matching, and numeric comparators![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEvery search field supports exact matching with a `:`. Certain fields such as `email` and `name` support substring matching. Certain other fields such as `amount` support numeric comparators like `>` and `<`.\n\nEach field includes a type that defines the operations you can use in the field. For a full list of available fields, see [supported query fields for each resource](https://docs.stripe.com/search#supported-query-fields-for-each-resource).\n\nUsing an unsupported operator, such as specifying greater than (`>`) on a string, returns an error.\n\n| type | operators |\n| --- | --- |\n| token | exact match (case insensitive) |\n| string | exact match, substring (case insensitive)<br><br>An exact match on a string type returns any record where that record contains all of the words from the query in the same order. For example the query `name:\"one two three\"` would match both a result with the name “one two three” and a result with the name “one two three four”. |\n| numeric | exact match, greater than and less than |\n\n### Quotes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must use quotation marks around string values. Quotation marks are optional for numeric values. For example:\n\n*   `currency:\"usd\"` means quotes are required.\n*   `payment_method_details.card.last4:1234` means quotes are optional.\n\nYou can escape quotes inside of quotes with a backslash (`\\`).\n\n`description:\"the story called \\\"The Sky and the Sea.\\\"\"`\n\n### Metadata![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can perform searches on [metadata](https://docs.stripe.com/api/metadata) that you’ve added to objects that support it.\n\nUse the following format to construct a clause for a metadata search: `metadata[\"<field>\"]:\"<value>\"`.\n\nThe following clause demonstrates how to create a clause that queries for records with a donation ID of “asdf-jkl”: `metadata[\"donation-id\"]:\"asdf-jkl\"`.\n\nYou can query for the presence of a metadata key on an object. The following clause would match all records where `donation-id` is a metadata key. `-metadata[\"donation-id\"]:null`\n\n### Search Syntax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following table lists the syntax that you can use to construct a query.\n\n| Syntax | Usage | Description | Examples |\n| --- | --- | --- | --- |\n| `:` | `field:value` | Exact match operator (case insensitive) | `currency:\"eur\"` returns records where the currency is exactly “EUR” in a case-insensitive comparison |\n| `AND`, `and` | `field:value1 AND field:value2` | The query returns only records that match both clauses (case insensitive) | `status:\"active\" AND amount:500` |\n| `OR`, `or` | `field:value1 OR field:value2` | The query returns records that match either of the clauses (case insensitive) | `currency:\"usd\" OR currency:\"eur\"` |\n| `-` | `-field:value` | Returns records that don’t match the clause | `-currency:\"jpy\"` returns records that aren’t in JPY |\n| `NULL`, `null` | `field:null` | A special token used for field presence (case insensitive) | `url:null` returns records where a URL field is empty |\n| `\\` | `\" \\\"\\\"\"` | Escape quotes within quotes | `description:\"the story called \\\"The Sky and the Sea.\\\"\"` |\n| `~` | `field~value` | Substring match operator (substrings must be a minimum of 3 characters) | `email~\"amy\"` returns matches for amy@rocketrides.io and xamy |\n| `>`, `<`, `=` | *   `field<value`<br>*   `field>value`<br>*   `field>=value`<br>*   `field<=value` | Greater than/less than operators | `amount>=\"10\"` brings up objects where the amount is 10 or greater |\n\n## Supported query fields for each resource![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Query fields for charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Field | usage | Type (token, string, numeric) |\n| --- | --- | --- |\n| amount | `amount>1000` | numeric |\n| billing\\_details.address.postal\\_code | `billing_details.address.postal_code:12345` | token |\n| created | `created>1620310503` | numeric |\n| currency | `currency:\"usd\"` | token |\n| customer | `customer:\"cus_123\"` | token |\n| disputed | `disputed:\"true\"` | token |\n| metadata | `metadata[\"key\"]:\"value\"` | token |\n| payment\\_method\\_details.{{SOURCE}}.last4 | `payment_method_details.card.last4:1234` | token |\n| payment\\_method\\_details.{{SOURCE}}.exp\\_month | `payment_method_details.card_present.exp_month:12` | token |\n| payment\\_method\\_details.{{SOURCE}}.exp\\_year | `payment_method_details.interac_present.exp_year:2022` | token |\n| payment\\_method\\_details.{{SOURCE}}.brand | `payment_method_details.card.brand:\"visa\"` | token |\n| payment\\_method\\_details.{{SOURCE}}.fingerprint | `payment_method_details.card.fingerprint:\"fp\"` | token |\n| refunded | `refunded:\"true\"` | token |\n| status | `status:\"succeeded\"` | token |\n\nFor `SOURCE`, use `card`, `card_present`, or `interac_present`. Use `card` for online charges, `interac_present` for Terminal card present charges for the Interac network, and `card_present` for other Terminal card present charges.\n\nThe `disputed` field accepts only the tokens “true” and “false”, indicating the presence of disputes.\n\n`refunded:\"true\"` filters for fully-refunded charges, `refunded:\"false\"` filters for partially-refunded charges, and `refunded:null` filters for non-refunded charges.\n\n### Query fields for customers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Field | usage | Type (token, string, numeric) |\n| --- | --- | --- |\n| created | `created>1620310503` | numeric |\n| email | `email~\"amyt\"` | string |\n| metadata | `metadata[\"key\"]:\"value\"` | token |\n| name | `name~\"amy\"` | string |\n| phone | `phone:\"+19999999999\"` | string |\n\n### Query fields for invoices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Field | usage | Type (token, string, numeric) |\n| --- | --- | --- |\n| created | `created>1620310503` | numeric |\n| currency | `currency:\"usd\"` | token |\n| customer | `customer:\"cus_123\"` | token |\n| metadata | `metadata[\"key\"]:\"value\"` | token |\n| number | `number:\"MYSHOP-123\"` | string |\n| receipt\\_number | `receipt_number:\"RECEIPT-123\"` | string |\n| status | `status:\"open\"` | string |\n| subscription | `subscription:\"SUBS-123\"` | string |\n| total | `total>1000` | numeric |\n\n### Query fields for payment intents![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Field | usage | Type (token, string, numeric) |\n| --- | --- | --- |\n| amount | `amount>1000` | numeric |\n| created | `created>1620310503` | numeric |\n| currency | `currency:\"usd\"` | token |\n| customer | `customer:\"cus_123\"` | token |\n| metadata | `metadata[\"key\"]:\"value\"` | token |\n| status | `status:\"succeeded\"` | token |\n\n### Query fields for prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Field | usage | Type (token, string, numeric) |\n| --- | --- | --- |\n| active | `active:\"true\"` | token |\n| currency | `currency:\"usd\"` | token |\n| lookup\\_key | `lookup_key:\"standard_monthly\"` | string |\n| metadata | `metadata[\"key\"]:\"value\"` | token |\n| product | `product:\"prod_123\"` | string |\n| type | `type:\"recurring\"` | token |\n\n### Query fields for products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Field | usage | Type (token, string, numeric) |\n| --- | --- | --- |\n| active | `active:\"true\"` | token |\n| description | `description~\"t-shirts\"` | string |\n| metadata | `metadata[\"key\"]:\"value\"` | token |\n| name | `name~\"amy\"` | string |\n| shippable | `shippable:\"true\"` | token |\n| url | `url~\"/dinosaur_swag\"` | string |\n\n### Query fields for subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Field | usage | Type (token, string, numeric) |\n| --- | --- | --- |\n| created | `created>1620310503` | numeric |\n| metadata | `metadata[\"key\"]:\"value\"` | token |\n| status | `status:\"active\"` | token |\n\n## Limitations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Minimum API version![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe minimum supported API Version to use search is `2020-08-27`. Read our [API upgrades guide](https://docs.stripe.com/upgrades) to learn more about upgrades. To use search without upgrading your account API version, you can override the API version on a single request by setting the `Stripe-Version` request header:\n\n`-H \"Stripe-Version: 2024-06-20\"`\n\nRead our [server-side libraries](https://docs.stripe.com/libraries#versioning) guide on how to override an API version when using a library.\n\n### Data freshness![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDon’t use search for read-after-write flows (for example, searching immediately after a charge is made) because the data won’t be immediately available to search. Under normal operating conditions, data is searchable in under 1 minute. Propagation of new or updated data could be delayed during an outage.\n\n### Rate limits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe apply a [rate limit](https://docs.stripe.com/rate-limits) of up to 20 read operations per second which applies for all search endpoints in both live mode and test mode. Live mode and test mode limits are separate. Keeping the rate limit in mind, for workloads where you need to run analytics on one or more API resource(s), [Sigma](https://docs.stripe.com/stripe-data/access-data-in-dashboard) is much more efficient. For workloads where you need to export a large portion of your API resource, our [Data Pipeline](https://docs.stripe.com/stripe-data/access-data-in-warehouse) product is more efficient.\n\n### Regional availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSearch isn’t available to merchants in India.",
  "title": "Search | Stripe Documentation",
  "description": "Look up objects in your Stripe data.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/products/object",
  "markdown": "# The Product object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Whether the product is currently available for purchase.\n    \n*   #### \n    \n    default\\_pricenullable stringExpandable\n    \n    The ID of the [Price](https://docs.stripe.com/api/prices) object that is the default price for this product.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    The product’s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The product’s name, meant to be displayable to the customer.\n    \n\n### More attributes\n\n*   #### \n    \n    marketing\\_featuresarray of objects\n    \n*   #### \n    \n    package\\_dimensionsnullable object\n    \n*   #### \n    \n    shippablenullable boolean\n    \n*   #### \n    \n    statement\\_descriptornullable string\n    \n*   #### \n    \n    tax\\_codenullable stringExpandable\n    \n*   #### \n    \n    unit\\_labelnullable string\n    \n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"active\": true,  \"created\": 1678833149,  \"default_price\": null,  \"description\": null,  \"images\": [],  \"features\": [],  \"livemode\": false,  \"metadata\": {},  \"name\": \"Gold Plan\",  \"package_dimensions\": null,  \"shippable\": null,  \"statement_descriptor\": null,  \"tax_code\": null,  \"unit_label\": null,  \"updated\": 1678833149,  \"url\": null}\n```\n\n## [Create a product](https://docs.stripe.com/api/products/create)\n\nCreates a new product object.\n\n### Parameters\n\n*   The product’s name, meant to be displayable to the customer.\n    \n*   Whether the product is currently available for purchase. Defaults to `true`.\n    \n*   The product’s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.\n    \n*   An identifier will be randomly generated by Stripe. You can optionally override this ID, but the ID must be unique across all products in your Stripe account.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    marketing\\_featuresarray of objects\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n\n### Returns\n\nReturns a product object if the call succeeded.\n\n```\ncurl https://api.stripe.com/v1/products \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"Gold Plan\"\n```\n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"active\": true,  \"created\": 1678833149,  \"default_price\": null,  \"description\": null,  \"images\": [],  \"features\": [],  \"livemode\": false,  \"metadata\": {},  \"name\": \"Gold Plan\",  \"package_dimensions\": null,  \"shippable\": null,  \"statement_descriptor\": null,  \"tax_code\": null,  \"unit_label\": null,  \"updated\": 1678833149,  \"url\": null}\n```\n\n## [Update a product](https://docs.stripe.com/api/products/update)\n\nUpdates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   Whether the product is available for purchase.\n    \n*   The ID of the [Price](https://docs.stripe.com/api/prices) object that is the default price for this product.\n    \n*   The product’s description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The product’s name, meant to be displayable to the customer.\n    \n\n### More parameters\n\n*   #### \n    \n    marketing\\_featuresarray of objects\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n\n### Returns\n\nReturns the product object if the update succeeded.\n\n```\ncurl https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"active\": true,  \"created\": 1678833149,  \"default_price\": null,  \"description\": null,  \"images\": [],  \"features\": [],  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"Gold Plan\",  \"package_dimensions\": null,  \"shippable\": null,  \"statement_descriptor\": null,  \"tax_code\": null,  \"unit_label\": null,  \"updated\": 1678833149,  \"url\": null}\n```\n\n## [Retrieve a product](https://docs.stripe.com/api/products/retrieve)\n\nRetrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a product object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/products/prod_NWjs8kKbJWmuuc \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prod_NWjs8kKbJWmuuc\",  \"object\": \"product\",  \"active\": true,  \"created\": 1678833149,  \"default_price\": null,  \"description\": null,  \"images\": [],  \"features\": [],  \"livemode\": false,  \"metadata\": {},  \"name\": \"Gold Plan\",  \"package_dimensions\": null,  \"shippable\": null,  \"statement_descriptor\": null,  \"tax_code\": null,  \"unit_label\": null,  \"updated\": 1678833149,  \"url\": null}\n```\n\n## [List all products](https://docs.stripe.com/api/products/list)\n\nReturns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.\n\n### Parameters\n\n*   Only return products that are active or inactive (e.g., pass `false` to list all inactive products).\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` products, starting after product `starting_after`. Each entry in the array is a separate product object. If no more products are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/products \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/products\",  \"has_more\": false,  \"data\": [    {      \"id\": \"prod_NWjs8kKbJWmuuc\",      \"object\": \"product\",      \"active\": true,      \"created\": 1678833149,      \"default_price\": null,      \"description\": null,      \"images\": [],      \"features\": [],      \"livemode\": false,      \"metadata\": {},      \"name\": \"Gold Plan\",      \"package_dimensions\": null,      \"shippable\": null,      \"statement_descriptor\": null,      \"tax_code\": null,      \"unit_label\": null,      \"updated\": 1678833149,      \"url\": null    }    {...}    {...}  ],}\n```",
  "title": "The Product object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/changelog",
  "markdown": "Changelog | Stripe DocumentationThe Stripe Docs logo\n\n[Skip to content](#main-content)\n\nChangelog\n\n[\n\nCreate account\n\n\n\n](https://dashboard.stripe.com/register)or[\n\nSign in\n\n\n\n](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fchangelog)\n\n[\n\n](/)\n\nSearch the docs or ask a question\n\n/\n\n[Create account](https://dashboard.stripe.com/register)\n\n[\n\nSign in\n\n\n\n](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fchangelog)\n\n[\n\nGet started\n\n\n\n](/get-started)\n\n[\n\nPayments\n\n\n\n](/payments)\n\n[\n\nFinance automation\n\n\n\n](/finance-automation)\n\n[\n\nBanking as a service\n\n\n\n](/financial-services)\n\n[\n\nDeveloper tools\n\n\n\n](/development)\n\n[\n\nNo-code\n\n\n\n](/no-code)\n\n[\n\nGet started\n\n\n\n](/get-started)\n\n[\n\nPayments\n\n\n\n](/payments)\n\n[\n\nFinance automation\n\n\n\n](/finance-automation)\n\n[\n\nGet started\n\n\n\n](/get-started)\n\n[\n\nPayments\n\n\n\n](/payments)\n\n[\n\nFinance automation\n\n\n\n](/finance-automation)\n\n[\n\nBanking as a service\n\n\n\n](/financial-services)\n\n[\n\nDeveloper tools\n\n\n\n](/development)\n\nAPIs & SDKs\n\nHelp\n\n[Overview](/development)\n\nDeveloper tools\n\nSDKs\n\nAPI\n\n[API keys](/keys \"Learn how to use API keys\")\n\n[API upgrades](/upgrades \"API upgrades\")\n\nChangelog\n\n[Rate limits](/rate-limits \"Rate limits\")\n\n[Automated testing](/automated-testing \"Automated testing\")\n\n[Metadata](/metadata \"Save additional information\")\n\n[Expanding responses](/expand \"Expanding responses\")\n\n[Domains and IP addresses](/ips \"Domains and IP addresses\")\n\n[Search](/search \"Search\")\n\n[Error handling](/error-handling)\n\n[Error codes](/error-codes)\n\nTesting\n\nWebhooks\n\nEvent Destinations\n\nStripe CLI\n\nStripe Shell\n\nDeveloper Dashboard\n\nWorkbench\n\n[Stripe for Visual Studio Code](/stripe-vscode \"Stripe for Visual Studio Code\")[File uploads](/file-upload)[Feedback](/dev-tools-csat \"Tell us about your experience with Stripe developer tools\")\n\nSecurity\n\nSecurity\n\nExtend Stripe\n\nStripe Apps\n\nStripe Connectors\n\nPartners\n\n[Partner ecosystem](/partners \"Learn about the Stripe Partner Program\")[Partner certification](/partners/training-and-certification \"Become a Stripe-certified architect or developer\")\n\nUnited States\n\nEnglish (United States)\n\n[Home](/ \"Home\")[Developer tools](/development \"Developer tools\")API\n\n# Changelog\n\n## Keep track of every change to the Stripe API.\n\nThis changelog lists all additions and updates to the Stripe API, in chronological order.\n\n#### Caution\n\nFor breaking changes and steps for upgrading your Stripe API version, view the [upgrade guide](/upgrades).\n\n### July 11, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `payment_method_options` on `ConfirmationToken`\n\n### July 9, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `payment_element` on `CustomerSession#create.components` and `CustomerSession.components`\n*   Change `Plan.meter` and `Price.recurring.meter` to be required\n\n### July 8, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for value `payment_intent_fx_quote_invalid` from enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n*   Add support for `address_validation` on `Issuing.Card#create.shipping` and `Issuing.Card.shipping`\n*   Add support for `shipping` on `Issuing.Card#update`\n*   Remove support for values `billing_policy_remote_function_response_invalid`, `billing_policy_remote_function_timeout`, `billing_policy_remote_function_unexpected_status_code`, and `billing_policy_remote_function_unreachable` from enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n\n### July 5, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `posted_at` on `Tax.Transaction#create_from_calculation` and `Tax.Transaction`\n\n### July 3, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `payment_intent_fx_quote_invalid` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n\n### July 2, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `add_lines`, `remove_lines`, and `update_lines` methods on resource `Invoice`\n\n### June 27, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `filters` on `Checkout.Session.payment_method_options.us_bank_account.financial_connections`, `Invoice#create.payment_settings.payment_method_options.us_bank_account.financial_connections`, `Invoice#update.payment_settings.payment_method_options.us_bank_account.financial_connections`, `Invoice.payment_settings.payment_method_options.us_bank_account.financial_connections`, `PaymentIntent#confirm.payment_method_options.us_bank_account.financial_connections`, `PaymentIntent#create.payment_method_options.us_bank_account.financial_connections`, `PaymentIntent#update.payment_method_options.us_bank_account.financial_connections`, `PaymentIntent.payment_method_options.us_bank_account.financial_connections`, `SetupIntent#confirm.payment_method_options.us_bank_account.financial_connections`, `SetupIntent#create.payment_method_options.us_bank_account.financial_connections`, `SetupIntent#update.payment_method_options.us_bank_account.financial_connections`, `SetupIntent.payment_method_options.us_bank_account.financial_connections`, `Subscription#create.payment_settings.payment_method_options.us_bank_account.financial_connections`, `Subscription#update.payment_settings.payment_method_options.us_bank_account.financial_connections`, and `Subscription.payment_settings.payment_method_options.us_bank_account.financial_connections`\n*   Add support for `account_subcategories` on `FinancialConnections.Session#create.filters` and `FinancialConnections.Session.filters`\n\n### June 26, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `multibanco` and `twint` on enums `PaymentLink#create.payment_method_types[]`, `PaymentLink#update.payment_method_types[]`, and `PaymentLink.payment_method_types[]`\n\n### June 25, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `email_type` on `CreditNote#create`, `CreditNote#preview_lines`, and `CreditNote#preview`\n*   Add support for `reboot_window` on `Terminal.Configuration#create`, `Terminal.Configuration#update`, and `Terminal.Configuration`\n*   Add support for new value `zip` on enums `PaymentLink#create.payment_method_types[]`, `PaymentLink#update.payment_method_types[]`, and `PaymentLink.payment_method_types[]`\n\n### June 24, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `ch_uid` on enums `Checkout.Session.customer_details.tax_ids[].type`, `Invoice.customer_tax_ids[].type`, `Tax.Calculation.customer_details.tax_ids[].type`, `Tax.Transaction.customer_details.tax_ids[].type`, and `TaxId.type`\n*   Add support for new value `ch_uid` on enums `Customer#create.tax_id_data[].type`, `Invoice#create_preview.customer_details.tax_ids[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, `Tax.Calculation#create.customer_details.tax_ids[].type`, and `TaxId#create.type`\n\n### June 21, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `finalize_amount` test helper method on resource `Issuing.Authorization`\n*   Add support for `fleet` on `Issuing.Authorization.testHelpers#capture.purchase_details`, `Issuing.Authorization.testHelpers#create`, `Issuing.Authorization`, `Issuing.Transaction.purchase_details`, `Issuing.Transaction.testHelpers#create_force_capture.purchase_details`, and `Issuing.Transaction.testHelpers#create_unlinked_refund.purchase_details`\n*   Add support for `fuel` on `Issuing.Authorization.testHelpers#create` and `Issuing.Authorization`\n*   Add support for `industry_product_code` on `Issuing.Authorization.testHelpers#capture.purchase_details.fuel`, `Issuing.Transaction.purchase_details.fuel`, `Issuing.Transaction.testHelpers#create_force_capture.purchase_details.fuel`, and `Issuing.Transaction.testHelpers#create_unlinked_refund.purchase_details.fuel`\n*   Add support for new values `card_canceled`, `card_expired`, `cardholder_blocked`, `insecure_authorization_method`, and `pin_blocked` on enum `Issuing.Authorization.request_history[].reason`\n\n### June 18, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `2024-06-20` on enum `WebhookEndpoint#create.api_version`\n*   Add support for new values `charging_minute`, `imperial_gallon`, `kilogram`, `kilowatt_hour`, and `pound` on enums `Issuing.Authorization.testHelpers#capture.purchase_details.fuel.unit`, `Issuing.Transaction.testHelpers#create_force_capture.purchase_details.fuel.unit`, and `Issuing.Transaction.testHelpers#create_unlinked_refund.purchase_details.fuel.unit`\n*   Add support for `quantity_decimal` on `Issuing.Authorization.testHelpers#capture.purchase_details.fuel`, `Issuing.Transaction.purchase_details.fuel`, `Issuing.Transaction.testHelpers#create_force_capture.purchase_details.fuel`, and `Issuing.Transaction.testHelpers#create_unlinked_refund.purchase_details.fuel`\n*   Remove support for `volume_decimal` on `Issuing.Authorization.testHelpers#capture.purchase_details.fuel`, `Issuing.Transaction.purchase_details.fuel`, `Issuing.Transaction.testHelpers#create_force_capture.purchase_details.fuel`, and `Issuing.Transaction.testHelpers#create_unlinked_refund.purchase_details.fuel`\n\n### June 15, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `mobilepay` on enums `PaymentLink#create.payment_method_types[]`, `PaymentLink#update.payment_method_types[]`, and `PaymentLink.payment_method_types[]`\n\n### June 14, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `tax_id_collection` on `PaymentLink#update`\n\n### June 11, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `twint_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `twint` on `Charge.payment_method_details`, `ConfirmationToken.payment_method_preview`, `ConfirmationToken.testHelpers#create.payment_method_data`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Add support for new value `twint` on enums `Checkout.Session#create.payment_method_types[]`, `Customer#list_payment_methods.type`, `PaymentMethod#create.type`, and `PaymentMethod#list.type`\n*   Add support for new value `twint` on enums `ConfirmationToken.testHelpers#create.payment_method_data.type`, `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for new value `twint` on enums `ConfirmationToken.payment_method_preview.type` and `PaymentMethod.type`\n\n### June 10, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `multibanco_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `multibanco` on `Checkout.Session#create.payment_method_options`, `Checkout.Session.payment_method_options`, `ConfirmationToken.payment_method_preview`, `ConfirmationToken.testHelpers#create.payment_method_data`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethodConfiguration#create`, `PaymentMethodConfiguration#update`, `PaymentMethodConfiguration`, `PaymentMethod`, `Refund.destination_details`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Add support for new value `multibanco` on enums `Checkout.Session#create.payment_method_types[]`, `Customer#list_payment_methods.type`, `PaymentMethod#create.type`, and `PaymentMethod#list.type`\n*   Add support for new value `multibanco` on enums `ConfirmationToken.testHelpers#create.payment_method_data.type`, `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for new value `multibanco` on enums `ConfirmationToken.payment_method_preview.type` and `PaymentMethod.type`\n*   Add support for `multibanco_display_details` on `PaymentIntent.next_action`\n\n### June 7, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `de_stn` on enums `Checkout.Session.customer_details.tax_ids[].type`, `Invoice.customer_tax_ids[].type`, `Tax.Calculation.customer_details.tax_ids[].type`, `Tax.Transaction.customer_details.tax_ids[].type`, and `TaxId.type`\n*   Add support for new value `de_stn` on enums `Customer#create.tax_id_data[].type`, `Invoice#create_preview.customer_details.tax_ids[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, `Tax.Calculation#create.customer_details.tax_ids[].type`, and `TaxId#create.type`\n\n### June 6, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `swish` on enums `Invoice#create.payment_settings.payment_method_types[]`, `Invoice#update.payment_settings.payment_method_types[]`, `Invoice.payment_settings.payment_method_types[]`, `Subscription#create.payment_settings.payment_method_types[]`, `Subscription#update.payment_settings.payment_method_types[]`, and `Subscription.payment_settings.payment_method_types[]`\n*   Add support for `invoice_settings` on `Subscription`\n\n### June 4, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for resource `PlatformTaxFee`\n\n### June 3, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `gb_bank_transfer_payments`, `jp_bank_transfer_payments`, `mx_bank_transfer_payments`, `sepa_bank_transfer_payments`, and `us_bank_transfer_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n\n### May 30, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `generated_from` on `ConfirmationToken.payment_method_preview.card` and `PaymentMethod.card`\n*   Add support for new value `verification_requires_additional_proof_of_registration` on enums `Account.future_requirements.errors[].code`, `Account.requirements.errors[].code`, `BankAccount.future_requirements.errors[].code`, and `BankAccount.requirements.errors[].code`\n\n### May 29, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `issuing_personalization_design.activated`, `issuing_personalization_design.deactivated`, `issuing_personalization_design.rejected`, and `issuing_personalization_design.updated` on enum `Event.type`\n*   Change `Issuing.Card.personalization_design` and `Issuing.PhysicalBundle.features` to be required\n*   Add support for new values `issuing_personalization_design.activated`, `issuing_personalization_design.deactivated`, `issuing_personalization_design.rejected`, and `issuing_personalization_design.updated` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### May 28, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `default_value` on `Checkout.Session#create.custom_fields[].dropdown`, `Checkout.Session#create.custom_fields[].numeric`, `Checkout.Session#create.custom_fields[].text`, `Checkout.Session.custom_fields[].dropdown`, `Checkout.Session.custom_fields[].numeric`, and `Checkout.Session.custom_fields[].text`\n\n### May 25, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `en-RO` and `ro-RO` on enums `PaymentIntent#confirm.payment_method_options.klarna.preferred_locale`, `PaymentIntent#create.payment_method_options.klarna.preferred_locale`, and `PaymentIntent#update.payment_method_options.klarna.preferred_locale`\n\n### May 22, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `external_account_collection` on `AccountSession#create.components.balances.features`, `AccountSession#create.components.payouts.features`, `AccountSession.components.balances.features`, and `AccountSession.components.payouts.features`\n*   Add support for `payment_method_remove` on `Checkout.Session.saved_payment_method_options`\n\n### May 17, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `terminal_reader_invalid_location_for_payment` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n\n### May 15, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `routing` on `PaymentIntent#confirm.payment_method_options.card_present`, `PaymentIntent#create.payment_method_options.card_present`, `PaymentIntent#update.payment_method_options.card_present`, and `PaymentIntent.payment_method_options.card_present`\n\n### May 14, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `stripe_s700` on `Terminal.Configuration#create`, `Terminal.Configuration#update`, and `Terminal.Configuration`\n*   Add support for `loss_reason` on `Issuing.Dispute`\n*   Add support for `fee_source` on `ApplicationFee`\n*   Add support for `net_available` on `Balance.instant_available[]`\n*   Add support for `application_fee_amount` and `application_fee` on `Payout`\n\n### May 13, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `klarna` on `Dispute.payment_method_details`\n*   Add support for new value `klarna` on enum `Dispute.payment_method_details.type`\n*   Remove support for `kr_market` on `Charge.payment_method_details`, `ConfirmationToken.payment_method_preview`, `ConfirmationToken.testHelpers#create.payment_method_data`, `Mandate.payment_method_details`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod#update`, `PaymentMethod`, `SetupAttempt.payment_method_details`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Remove support for value `kr_market` from enums `ConfirmationToken.testHelpers#create.payment_method_data.type`, `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Remove support for value `kr_market` from enums `ConfirmationToken.payment_method_preview.type` and `PaymentMethod.type`\n*   Remove support for value `kr_market` from enums `Customer#list_payment_methods.type`, `PaymentMethod#create.type`, and `PaymentMethod#list.type`\n*   Add support for `kr_market` on `Charge.payment_method_details`, `ConfirmationToken.payment_method_preview`, `ConfirmationToken.testHelpers#create.payment_method_data`, `Mandate.payment_method_details`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod#update`, `PaymentMethod`, `SetupAttempt.payment_method_details`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Add support for new value `kr_market` on enums `ConfirmationToken.testHelpers#create.payment_method_data.type`, `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for new value `kr_market` on enums `ConfirmationToken.payment_method_preview.type` and `PaymentMethod.type`\n*   Add support for new value `kr_market` on enums `Customer#list_payment_methods.type`, `PaymentMethod#create.type`, and `PaymentMethod#list.type`\n\n### May 10, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `archived` and `lookup_key` on `Entitlements.Feature#list`\n*   Change `Treasury.OutboundPayment.tracking_details` and `Treasury.OutboundTransfer.tracking_details` to be required\n\n### May 9, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `preferred_locales` on `Charge.payment_method_details.card_present`, `ConfirmationToken.payment_method_preview.card_present`, and `PaymentMethod.card_present`\n*   Add support for `no_valid_authorization` on `Issuing.Dispute#create.evidence`, `Issuing.Dispute#update.evidence`, and `Issuing.Dispute.evidence`\n*   Add support for new value `no_valid_authorization` on enums `Issuing.Dispute#create.evidence.reason`, `Issuing.Dispute#update.evidence.reason`, and `Issuing.Dispute.evidence.reason`\n*   Change `FinancialConnections.Session#create.filters.countries` to be optional\n*   Remove support for `pending_invoice_items_behavior` on `Subscription#create`\n\n### May 8, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `preview_mode` on `Invoice#create_preview`, `Invoice#upcomingLines`, and `Invoice#upcoming`\n\n### May 7, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `pending_invoice_items_behavior` on `Subscription#create`\n\n### May 6, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `allow_redisplay` on `ConfirmationToken.payment_method_preview` and `PaymentMethod`\n*   Add support for `update` test helper method on resources `Treasury.OutboundPayment` and `Treasury.OutboundTransfer`\n*   Add support for new values `treasury.outbound_payment.tracking_details_updated` and `treasury.outbound_transfer.tracking_details_updated` on enum `Event.type`\n*   Add support for `tracking_details` on `Treasury.OutboundPayment` and `Treasury.OutboundTransfer`\n*   Add support for new values `treasury.outbound_payment.tracking_details_updated` and `treasury.outbound_transfer.tracking_details_updated` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### May 2, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `Entitlements.Feature#update.metadata` from `map(string: string)` to `emptyable(map(string: string))`\n*   Add support for `paypal` on `Dispute.payment_method_details`\n*   Change type of `Dispute.payment_method_details.type` from `literal('card')` to `enum('card'|'paypal')`\n\n### May 1, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `bh`, `eg`, `ge`, `ke`, `kz`, `ng`, and `om` on `Tax.Registration#create.country_options` and `Tax.Registration.country_options`\n\n### April 29, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `payment_method_types` on `PaymentIntent#confirm`\n\n### April 26, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Apps.Secret.payload`, `BillingPortal.Configuration.features.subscription_update.products`, `Charge.refunds`, `ConfirmationToken.payment_method_preview.klarna.dob`, `Identity.VerificationReport.document.dob`, `Identity.VerificationReport.document.expiration_date`, `Identity.VerificationReport.document.number`, `Identity.VerificationReport.id_number.dob`, `Identity.VerificationReport.id_number.id_number`, `Identity.VerificationSession.provided_details`, `Identity.VerificationSession.verified_outputs.dob`, `Identity.VerificationSession.verified_outputs.id_number`, `Identity.VerificationSession.verified_outputs`, `Issuing.Dispute.balance_transactions`, `Issuing.Transaction.purchase_details`, `PaymentMethod.klarna.dob`, `Tax.Calculation.line_items`, `Tax.CalculationLineItem.tax_breakdown`, `Tax.Transaction.line_items`, `Treasury.FinancialAccount.financial_addresses[].aba.account_number`, `Treasury.ReceivedCredit.linked_flows.source_flow_details`, `Treasury.Transaction.entries`, `Treasury.Transaction.flow_details`, and `Treasury.TransactionEntry.flow_details` to be optional\n*   Add support for new value `shipping_address_invalid` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n*   Add support for `ship_from_details` on `Tax.Calculation#create`, `Tax.Calculation`, and `Tax.Transaction`\n\n### April 25, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `mobilepay` on `PaymentMethodConfiguration#create`, `PaymentMethodConfiguration#update`, and `PaymentMethodConfiguration`\n\n### April 24, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `setup_future_usage` on `Checkout.Session.payment_method_options.amazon_pay`, `Checkout.Session.payment_method_options.revolut_pay`, `PaymentIntent.payment_method_options.amazon_pay`, and `PaymentIntent.payment_method_options.revolut_pay`\n*   Add support for new values `amazon_pay` and `revolut_pay` on enums `Invoice#create.payment_settings.payment_method_types[]`, `Invoice#update.payment_settings.payment_method_types[]`, `Invoice.payment_settings.payment_method_types[]`, `Subscription#create.payment_settings.payment_method_types[]`, `Subscription#update.payment_settings.payment_method_types[]`, and `Subscription.payment_settings.payment_method_types[]`\n*   Add support for `amazon_pay` and `revolut_pay` on `Mandate.payment_method_details` and `SetupAttempt.payment_method_details`\n\n### April 23, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `Entitlements.ActiveEntitlement.feature` from `string` to `expandable($Entitlements.Feature)`\n\n### April 22, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `email` and `phone` on `Identity.VerificationSession#create.options` and `Identity.VerificationSession#update.options`\n*   Change `Identity.VerificationSession.provided_details`, `Identity.VerificationSession.verified_outputs.email`, and `Identity.VerificationSession.verified_outputs.phone` to be required\n\n### April 19, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `ending_before`, `limit`, and `starting_after` on `PaymentMethodConfiguration#list`\n\n### April 18, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `mobilepay` on `Checkout.Session#create.payment_method_options` and `Checkout.Session.payment_method_options`\n*   Add support for new value `mobilepay` on enum `Checkout.Session#create.payment_method_types[]`\n*   Add support for `create_preview` method on resource `Invoice`\n*   Add support for `schedule_details` and `subscription_details` on `Invoice#upcomingLines` and `Invoice#upcoming`\n\n### April 17, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `other` on enums `Issuing.Authorization.testHelpers#capture.purchase_details.fuel.unit`, `Issuing.Transaction.testHelpers#create_force_capture.purchase_details.fuel.unit`, and `Issuing.Transaction.testHelpers#create_unlinked_refund.purchase_details.fuel.unit`\n*   Add support for `payment_method_data` on `Checkout.Session#create`\n*   Add support for `saved_payment_method_options` on `Checkout.Session#create` and `Checkout.Session`\n*   Add support for `allow_redisplay` on `ConfirmationToken.testHelpers#create.payment_method_data`, `Customer#list_payment_methods`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#update.payment_method_data`, `PaymentMethod#create`, `PaymentMethod#update`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n\n### April 15, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `config` on `Forwarding.Request#create` and `Forwarding.Request`\n*   Add support for `balances` and `payouts_list` on `AccountSession#create.components` and `AccountSession.components`\n*   Change `AccountSession.components.payment_details.features.destination_on_behalf_of_charge_management` and `AccountSession.components.payments.features.destination_on_behalf_of_charge_management` to be required\n*   Add support for `swish` on `PaymentMethodConfiguration#create`, `PaymentMethodConfiguration#update`, and `PaymentMethodConfiguration`\n*   Change type of `Dispute.payment_method_details.card` from `nullable(DisputePaymentMethodDetailsCard)` to `DisputePaymentMethodDetailsCard`\n*   Change `Dispute.payment_method_details.card` to be optional\n\n### April 13, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Billing.MeterEvent#create.timestamp` to be optional\n*   Add support for new resource `Entitlements.ActiveEntitlementSummary`\n*   Add support for new value `entitlements.active_entitlement_summary.updated` on enum `Event.type`\n*   Add support for new value `entitlements.active_entitlement_summary.updated` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### April 11, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `capture_method` on `PaymentIntent#confirm.payment_method_options.revolut_pay`, `PaymentIntent#create.payment_method_options.revolut_pay`, `PaymentIntent#update.payment_method_options.revolut_pay`, and `PaymentIntent.payment_method_options.revolut_pay`\n*   Add support for `account_management` and `notification_banner` on `AccountSession#create.components` and `AccountSession.components`\n*   Add support for `amazon_pay` on `Charge.payment_method_details`, `Checkout.Session#create.payment_method_options`, `Checkout.Session.payment_method_options`, `ConfirmationToken.payment_method_preview`, `ConfirmationToken.testHelpers#create.payment_method_data`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethodConfiguration#create`, `PaymentMethodConfiguration#update`, `PaymentMethodConfiguration`, `PaymentMethod`, `Refund.destination_details`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#confirm.payment_method_options`, `SetupIntent#create.payment_method_data`, `SetupIntent#create.payment_method_options`, `SetupIntent#update.payment_method_data`, `SetupIntent#update.payment_method_options`, and `SetupIntent.payment_method_options`\n*   Add support for new value `amazon_pay` on enum `Checkout.Session#create.payment_method_types[]`\n*   Add support for new value `amazon_pay` on enums `ConfirmationToken.testHelpers#create.payment_method_data.type`, `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for new value `amazon_pay` on enums `ConfirmationToken.payment_method_preview.type` and `PaymentMethod.type`\n*   Add support for new value `amazon_pay` on enums `Customer#list_payment_methods.type`, `PaymentMethod#create.type`, and `PaymentMethod#list.type`\n*   Add support for new value `ownership` on enums `Checkout.Session#create.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `Checkout.Session.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `Invoice#create.payment_settings.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `Invoice#update.payment_settings.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `Invoice.payment_settings.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `PaymentIntent#confirm.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `PaymentIntent#create.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `PaymentIntent#update.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `PaymentIntent.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `SetupIntent#confirm.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `SetupIntent#create.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `SetupIntent#update.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `SetupIntent.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `Subscription#create.payment_settings.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `Subscription#update.payment_settings.payment_method_options.us_bank_account.financial_connections.prefetch[]`, and `Subscription.payment_settings.payment_method_options.us_bank_account.financial_connections.prefetch[]`\n*   Add support for `next_refresh_available_at` on `FinancialConnections.Account.ownership_refresh`\n*   Add support for new value `ownership` on enums `Invoice.payment_settings.payment_method_options.us_bank_account.financial_connections.permissions[]` and `Subscription.payment_settings.payment_method_options.us_bank_account.financial_connections.permissions[]`\n*   Change `Billing.MeterEventAdjustment#create.cancel.identifier` and `Billing.MeterEventAdjustment#create.cancel` to be optional\n*   Change `Billing.MeterEventAdjustment#create.type` to be required\n*   Change type of `Billing.MeterEventAdjustment.cancel` from `BillingMeterResourceBillingMeterEventAdjustmentCancel` to `nullable(BillingMeterResourceBillingMeterEventAdjustmentCancel)`\n*   Add support for new values `billing_policy_remote_function_response_invalid`, `billing_policy_remote_function_timeout`, `billing_policy_remote_function_unexpected_status_code`, and `billing_policy_remote_function_unreachable` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n*   Add support for `external_account_collection` on `AccountSession#create.components.account_onboarding.features` and `AccountSession.components.account_onboarding.features`\n*   Add support for new values `bh_vat`, `kz_bin`, `ng_tin`, and `om_vat` on enums `Checkout.Session.customer_details.tax_ids[].type`, `Invoice.customer_tax_ids[].type`, `Tax.Calculation.customer_details.tax_ids[].type`, `Tax.Transaction.customer_details.tax_ids[].type`, and `TaxId.type`\n*   Add support for new values `bh_vat`, `kz_bin`, `ng_tin`, and `om_vat` on enums `Customer#create.tax_id_data[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, `Tax.Calculation#create.customer_details.tax_ids[].type`, and `TaxId#create.type`\n\n### April 9, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `marketing_features` on `Product#create`, `Product#update`, and `Product`\n*   Remove support for `features` on `Product#create`, `Product#update`, and `Product`\n*   Add support for new resources `Entitlements.ActiveEntitlement` and `Entitlements.Feature`\n*   Add support for `list` and `retrieve` methods on resource `ActiveEntitlement`\n*   Add support for `create`, `list`, `retrieve`, and `update` methods on resource `Feature`\n\n### April 8, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `rendering_options` on `Invoice#create`, `Invoice#update`, and `Invoice`\n*   Add support for `controller` on `Account#create`\n*   Add support for `fees`, `losses`, `requirement_collection`, and `stripe_dashboard` on `Account.controller`\n*   Add support for new value `none` on enum `Account.type`\n\n### April 5, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `2024-04-10` on enum `WebhookEndpoint#create.api_version`\n*   Add support for `event_name` on `Billing.MeterEventAdjustment#create` and `Billing.MeterEventAdjustment`\n*   Add support for `cancel` and `type` on `Billing.MeterEventAdjustment`\n\n### April 4, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `mobile_phone_reader` on enums `Terminal.Reader#list.device_type` and `Terminal.Reader.device_type`\n*   Add support for `promotion_code` on `Quote#create.discounts[]`, `Quote#create.line_items[].discounts[]`, `Quote#update.discounts[]`, and `Quote#update.line_items[].discounts[]`\n\n### April 3, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `offline` on `SetupAttempt.payment_method_details.card_present`\n*   Add support for `card_present` on `SetupIntent#confirm.payment_method_options`, `SetupIntent#create.payment_method_options`, `SetupIntent#update.payment_method_options`, and `SetupIntent.payment_method_options`\n*   Add support for `email` and `phone` on `Identity.VerificationReport`, `Identity.VerificationSession#create.options`, `Identity.VerificationSession#update.options`, `Identity.VerificationSession.options`, and `Identity.VerificationSession.verified_outputs`\n*   Add support for `verification_flow` on `Identity.VerificationReport`, `Identity.VerificationSession#create`, and `Identity.VerificationSession`\n*   Add support for new value `verification_flow` on enums `Identity.VerificationReport.type` and `Identity.VerificationSession.type`\n*   Add support for `provided_details` on `Identity.VerificationSession#create`, `Identity.VerificationSession#update`, and `Identity.VerificationSession`\n*   Change `Identity.VerificationSession#create.type` to be optional\n*   Add support for new values `email_unverified_other`, `email_verification_declined`, `phone_unverified_other`, and `phone_verification_declined` on enum `Identity.VerificationSession.last_error.code`\n*   Add support for `zip` on `PaymentMethodConfiguration#create`, `PaymentMethodConfiguration#update`, and `PaymentMethodConfiguration`\n*   Add support for `subscription_item` on `Discount`\n*   Add support for `discounts` on `Invoice#upcoming.subscription_items[]`, `Invoice#upcomingLines.subscription_items[]`, `Quote#create.line_items[]`, `Quote#update.line_items[]`, `Subscription#create.add_invoice_items[]`, `Subscription#create.items[]`, `Subscription#create`, `Subscription#update.add_invoice_items[]`, `Subscription#update.items[]`, `Subscription#update`, `SubscriptionItem#create`, `SubscriptionItem#update`, `SubscriptionItem`, `SubscriptionSchedule#create.phases[].add_invoice_items[]`, `SubscriptionSchedule#create.phases[].items[]`, `SubscriptionSchedule#create.phases[]`, `SubscriptionSchedule#update.phases[].add_invoice_items[]`, `SubscriptionSchedule#update.phases[].items[]`, `SubscriptionSchedule#update.phases[]`, `SubscriptionSchedule.phases[].add_invoice_items[]`, `SubscriptionSchedule.phases[].items[]`, `SubscriptionSchedule.phases[]`, and `Subscription`\n*   Change type of `Invoice.discounts` from `nullable(array(expandable(deletable($Discount))))` to `array(expandable(deletable($Discount)))`\n\n### April 2, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for value `2024-04-03` from enum `WebhookEndpoint#create.api_version`\n*   Add support for `promotion_code` on `Invoice#create.discounts[]`, `Invoice#update.discounts[]`, `InvoiceItem#create.discounts[]`, and `InvoiceItem#update.discounts[]`\n*   Change type of `Checkout.Session#create.payment_method_options.swish.reference` from `emptyStringable(string)` to `string`\n*   Change `PaymentIntent.next_action.swish_handle_redirect_or_display_qr_code.hosted_instructions_url`, `PaymentIntent.next_action.swish_handle_redirect_or_display_qr_code.mobile_auth_url`, `PaymentIntent.next_action.swish_handle_redirect_or_display_qr_code.qr_code.data`, `PaymentIntent.next_action.swish_handle_redirect_or_display_qr_code.qr_code.image_url_png`, `PaymentIntent.next_action.swish_handle_redirect_or_display_qr_code.qr_code.image_url_svg`, `PaymentIntent.next_action.swish_handle_redirect_or_display_qr_code.qr_code`, and `PaymentIntent.payment_method_options.swish.reference` to be required\n\n### April 1, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `allowed_merchant_countries` and `blocked_merchant_countries` on `Issuing.Card#create.spending_controls`, `Issuing.Card#update.spending_controls`, `Issuing.Card.spending_controls`, `Issuing.Cardholder#create.spending_controls`, `Issuing.Cardholder#update.spending_controls`, and `Issuing.Cardholder.spending_controls`\n\n### March 29, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `subscription_pause` on `BillingPortal.Configuration#create.features`, `BillingPortal.Configuration#update.features`, and `BillingPortal.Configuration.features`\n*   Change `Charge.payment_method_details.us_bank_account.payment_reference` to be required\n\n### March 28, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `2024-04-03` on enum `WebhookEndpoint#create.api_version`\n*   Add support for new value `verification_failed_representative_authority` on enums `Account.future_requirements.errors[].code`, `Account.requirements.errors[].code`, `BankAccount.future_requirements.errors[].code`, and `BankAccount.requirements.errors[].code`\n\n### March 26, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resources `Billing.MeterEventAdjustment`, `Billing.MeterEvent`, and `Billing.Meter`\n*   Add support for `create`, `deactivate`, `list`, `reactivate`, `retrieve`, and `update` methods on resource `Meter`\n*   Add support for `create` method on resources `MeterEventAdjustment` and `MeterEvent`\n*   Add support for `meter` on `Plan#create`, `Plan`, `Price#create.recurring`, `Price#list.recurring`, and `Price.recurring`\n\n### March 25, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `amazon_pay_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `destination_on_behalf_of_charge_management` on `AccountSession#create.components.payment_details.features`, `AccountSession#create.components.payments.features`, `AccountSession.components.payment_details.features`, and `AccountSession.components.payments.features`\n*   Add support for `second_line` on `Issuing.Card#create`\n\n### March 21, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `mandate` on `Charge.payment_method_details.us_bank_account`, `Treasury.InboundTransfer.origin_payment_method_details.us_bank_account`, `Treasury.OutboundPayment.destination_payment_method_details.us_bank_account`, and `Treasury.OutboundTransfer.destination_payment_method_details.us_bank_account`\n*   Add support for `mobilepay` on `Charge.payment_method_details`, `ConfirmationToken.payment_method_preview`, `ConfirmationToken.testHelpers#create.payment_method_data`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Add support for new value `mobilepay` on enums `ConfirmationToken.testHelpers#create.payment_method_data.type`, `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for new value `mobilepay` on enums `ConfirmationToken.payment_method_preview.type` and `PaymentMethod.type`\n*   Add support for new value `mobilepay` on enums `Customer#list_payment_methods.type`, `PaymentMethod#create.type`, and `PaymentMethod#list.type`\n*   Add support for new values `forwarding_api_inactive`, `forwarding_api_invalid_parameter`, `forwarding_api_upstream_connection_error`, and `forwarding_api_upstream_connection_timeout` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n\n### March 20, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `payment_reference` on `Charge.payment_method_details.us_bank_account`\n*   Add support for new resource `Forwarding.Request`\n*   Add support for `create`, `list`, and `retrieve` methods on resource `Request`\n*   Add support for new resource `ConfirmationToken`\n*   Add support for `retrieve` method on resource `ConfirmationToken`\n*   Add support for `confirmation_token` on `PaymentIntent#confirm`, `PaymentIntent#create`, `SetupIntent#confirm`, and `SetupIntent#create`\n*   Add support for `mobilepay_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n\n### March 18, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `name` on `Terminal.Configuration#create`, `Terminal.Configuration#update`, and `Terminal.Configuration`\n*   Add support for `payout` on `Treasury.ReceivedDebit.linked_flows`\n\n### March 13, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `sepa_debit` on `Subscription#create.payment_settings.payment_method_options`, `Subscription#update.payment_settings.payment_method_options`, and `Subscription.payment_settings.payment_method_options`\n*   Add support for `second_line` on `Issuing.PhysicalBundle.features`\n\n### March 12, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `Subscription#create.application_fee_percent` and `Subscription#update.application_fee_percent` from `number` to `emptyStringable(number)`\n\n### March 8, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resources `Issuing.PersonalizationDesign` and `Issuing.PhysicalBundle`\n*   Add support for `create`, `list`, `retrieve`, and `update` methods on resource `PersonalizationDesign`\n*   Add support for `list` and `retrieve` methods on resource `PhysicalBundle`\n*   Add support for `personalization_design` on `Issuing.Card#create`, `Issuing.Card#list`, `Issuing.Card#update`, and `Issuing.Card`\n\n### March 7, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `documents` on `AccountSession.components`\n*   Add support for `sepa_debit` on `Invoice#create.payment_settings.payment_method_options`, `Invoice#update.payment_settings.payment_method_options`, and `Invoice.payment_settings.payment_method_options`\n\n### March 5, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `documents` on `AccountSession#create.components`\n\n### March 4, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `created` on `CreditNote#list`\n*   Add support for `request_three_d_secure` on `Checkout.Session#create.payment_method_options.card` and `Checkout.Session.payment_method_options.card`\n\n### February 29, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `payment_method` on `Token#create.bank_account`\n\n### February 27, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Identity.VerificationReport.type` to be required\n*   Change type of `Identity.VerificationSession.type` from `nullable(enum('document'|'id_number'))` to `enum('document'|'id_number')`\n*   Add support for `enable_customer_cancellation` on `Terminal.Reader#process_payment_intent.process_config`, `Terminal.Reader#process_setup_intent.process_config`, `Terminal.Reader.action.process_payment_intent.process_config`, and `Terminal.Reader.action.process_setup_intent.process_config`\n*   Add support for `refund_payment_config` on `Terminal.Reader#refund_payment` and `Terminal.Reader.action.refund_payment`\n\n### February 26, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `SubscriptionSchedule.default_settings.invoice_settings.account_tax_ids`, `SubscriptionSchedule.phases[].invoice_settings.account_tax_ids`, and `TaxId.owner` to be required\n*   Add support for `number` on `Invoice#create` and `Invoice#update`\n\n### February 22, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `client_reference_id` on `Identity.VerificationReport#list`, `Identity.VerificationReport`, `Identity.VerificationSession#create`, `Identity.VerificationSession#list`, and `Identity.VerificationSession`\n\n### February 21, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `created` on `Treasury.OutboundPayment#list`\n*   Remove support for value `include_and_require` from enum `Invoice#create.pending_invoice_items_behavior`\n\n### February 16, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for value `service_tax` from enums `TaxRate#create.tax_type`, `TaxRate#update.tax_type`, and `TaxRate.tax_type`\n\n### February 14, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `PaymentMethod.card.display_brand` to be required\n*   Add support for new value `no_voec` on enums `Checkout.Session.customer_details.tax_ids[].type`, `Invoice.customer_tax_ids[].type`, `Tax.Calculation.customer_details.tax_ids[].type`, `Tax.Transaction.customer_details.tax_ids[].type`, and `TaxId.type`\n*   Add support for new value `no_voec` on enums `Customer#create.tax_id_data[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, `Tax.Calculation#create.customer_details.tax_ids[].type`, and `TaxId#create.type`\n\n### February 13, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `networks` on `Card`, `PaymentMethod#create.card[0]`, `PaymentMethod#update.card`, and `Token#create.card[0]`\n*   Add support for `display_brand` on `PaymentMethod.card`\n\n### February 9, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `financial_connections.account.refreshed_ownership` on enum `Event.type`\n*   Add support for new value `financial_connections.account.refreshed_ownership` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n*   Add support for `mobile_auth_url` on `PaymentIntent.next_action.swish_handle_redirect_or_display_qr_code`\n*   Remove support for `mobile_auth_url` on `PaymentIntent.next_action.swish_handle_redirect_or_display_qr_code`\n\n### February 8, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `velobank` on enums `Charge.payment_method_details.p24.bank`, `PaymentIntent#confirm.payment_method_data.p24.bank`, `PaymentIntent#create.payment_method_data.p24.bank`, `PaymentIntent#update.payment_method_data.p24.bank`, `PaymentMethod#create.p24.bank`, `PaymentMethod.p24.bank`, `SetupIntent#confirm.payment_method_data.p24.bank`, `SetupIntent#create.payment_method_data.p24.bank`, and `SetupIntent#update.payment_method_data.p24.bank`\n\n### February 7, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `setup_future_usage` on `PaymentIntent#confirm.payment_method_options.blik`, `PaymentIntent#create.payment_method_options.blik`, `PaymentIntent#update.payment_method_options.blik`, and `PaymentIntent.payment_method_options.blik`\n\n### February 6, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `require_cvc_recollection` on `PaymentIntent#confirm.payment_method_options.card`, `PaymentIntent#create.payment_method_options.card`, `PaymentIntent#update.payment_method_options.card`, and `PaymentIntent.payment_method_options.card`\n\n### February 1, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `TaxId`\n*   Add support for `create`, `delete`, `list`, and `retrieve` methods on resource `TaxId`\n*   Add support for `invoices` on `Account#update.settings` and `Account.settings`\n*   Add support for `account_tax_ids` on `Subscription#create.invoice_settings`, `Subscription#update.invoice_settings`, `SubscriptionSchedule#create.default_settings.invoice_settings`, `SubscriptionSchedule#create.phases[].invoice_settings`, `SubscriptionSchedule#update.default_settings.invoice_settings`, `SubscriptionSchedule#update.phases[].invoice_settings`, `SubscriptionSchedule.default_settings.invoice_settings`, and `SubscriptionSchedule.phases[].invoice_settings`\n*   Add support for `swish_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `swish` on `Charge.payment_method_details`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod`, `Refund.destination_details`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Add support for new value `swish` on enums `Customer#list_payment_methods.type`, `PaymentMethod#create.type`, and `PaymentMethod#list.type`\n*   Add support for new value `swish` on enums `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for `swish_handle_redirect_or_display_qr_code` on `PaymentIntent.next_action`\n*   Add support for new value `swish` on enum `PaymentMethod.type`\n*   Add support for `relationship` on `Account#create.individual`, `Account#update.individual`, and `Token#create.account.individual`\n\n### January 31, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `Terminal.Reader.status` from `string` to `enum('offline'|'online')`\n\n### January 30, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `swish` on `Checkout.Session#create.payment_method_options` and `Checkout.Session.payment_method_options`\n*   Add support for new value `swish` on enum `Checkout.Session#create.payment_method_types[]`\n*   Add support for new value `swish` on enums `PaymentLink#create.payment_method_types[]`, `PaymentLink#update.payment_method_types[]`, and `PaymentLink.payment_method_types[]`\n\n### January 29, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `jurisdiction_level` on `TaxRate`\n\n### January 24, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `liability` on `Quote#create.automatic_tax`, `Quote#update.automatic_tax`, and `Quote.automatic_tax`\n*   Add support for `issuer` on `Quote#create.invoice_settings`, `Quote#update.invoice_settings`, and `Quote.invoice_settings`\n*   Add support for `liability` on `PaymentLink#create.automatic_tax`, `PaymentLink#update.automatic_tax`, and `PaymentLink.automatic_tax`\n*   Add support for `issuer` on `PaymentLink#create.invoice_creation.invoice_data`, `PaymentLink#update.invoice_creation.invoice_data`, and `PaymentLink.invoice_creation.invoice_data`\n*   Add support for `invoice_settings` on `PaymentLink#create.subscription_data`, `PaymentLink#update.subscription_data`, and `PaymentLink.subscription_data`\n\n### January 23, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `account_type` on `PaymentMethod#update.us_bank_account`\n*   Add support for `annual_revenue` and `estimated_worker_count` on `Account#create.business_profile`, `Account#update.business_profile`, and `Account.business_profile`\n*   Add support for `liability` on `SubscriptionSchedule#create.default_settings.automatic_tax`, `SubscriptionSchedule#create.phases[].automatic_tax`, `SubscriptionSchedule#update.default_settings.automatic_tax`, `SubscriptionSchedule#update.phases[].automatic_tax`, `SubscriptionSchedule.default_settings.automatic_tax`, and `SubscriptionSchedule.phases[].automatic_tax`\n*   Add support for `issuer` on `SubscriptionSchedule#create.default_settings.invoice_settings`, `SubscriptionSchedule#create.phases[].invoice_settings`, `SubscriptionSchedule#update.default_settings.invoice_settings`, `SubscriptionSchedule#update.phases[].invoice_settings`, `SubscriptionSchedule.default_settings.invoice_settings`, and `SubscriptionSchedule.phases[].invoice_settings`\n*   Add support for `liability` on `Checkout.Session#create.automatic_tax` and `Checkout.Session.automatic_tax`\n*   Add support for `issuer` on `Checkout.Session#create.invoice_creation.invoice_data` and `Checkout.Session.invoice_creation.invoice_data`\n*   Add support for `invoice_settings` on `Checkout.Session#create.subscription_data`\n*   Add support for new value `registered_charity` on enums `Account#create.company.structure`, `Account#update.company.structure`, `Account.company.structure`, and `Token#create.account.company.structure`\n\n### January 22, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `collection_options` on `AccountLink#create`\n*   Add support for new value `challenge` on enums `Invoice#create.payment_settings.payment_method_options.card.request_three_d_secure`, `Invoice#update.payment_settings.payment_method_options.card.request_three_d_secure`, `Invoice.payment_settings.payment_method_options.card.request_three_d_secure`, `Subscription#create.payment_settings.payment_method_options.card.request_three_d_secure`, `Subscription#update.payment_settings.payment_method_options.card.request_three_d_secure`, and `Subscription.payment_settings.payment_method_options.card.request_three_d_secure`\n*   Add support for `promotion_code` on `Invoice#upcoming.discounts[]`, `Invoice#upcoming.invoice_items[].discounts[]`, `Invoice#upcomingLines.discounts[]`, and `Invoice#upcomingLines.invoice_items[].discounts[]`\n\n### January 18, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `CustomerSession.components.buy_button` and `CustomerSession.components.pricing_table` to be required\n*   Add support for `invoice_settings` on `Subscription#create` and `Subscription#update`\n*   Add support for `liability` on `Subscription#create.automatic_tax`, `Subscription#update.automatic_tax`, and `Subscription.automatic_tax`\n\n### January 17, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `customer_balance` on `PaymentMethodConfiguration#create`, `PaymentMethodConfiguration#update`, and `PaymentMethodConfiguration`\n*   Add support for `revocation_reason` on `Mandate.payment_method_details.bacs_debit`\n*   Add support for new value `nn` on enums `Charge.payment_method_details.ideal.bank`, `PaymentIntent#confirm.payment_method_data.ideal.bank`, `PaymentIntent#create.payment_method_data.ideal.bank`, `PaymentIntent#update.payment_method_data.ideal.bank`, `PaymentMethod#create.ideal.bank`, `PaymentMethod.ideal.bank`, `SetupAttempt.payment_method_details.ideal.bank`, `SetupIntent#confirm.payment_method_data.ideal.bank`, `SetupIntent#create.payment_method_data.ideal.bank`, and `SetupIntent#update.payment_method_data.ideal.bank`\n*   Add support for new value `NNBANL2G` on enums `Charge.payment_method_details.ideal.bic`, `PaymentMethod.ideal.bic`, and `SetupAttempt.payment_method_details.ideal.bic`\n*   Add support for `pin` on `Issuing.Card#create`\n\n### January 16, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Subscription.billing_cycle_anchor_config` to be required\n*   Add support for `issuer` and `on_behalf_of` on `Invoice#upcomingLines` and `Invoice#upcoming`\n*   Add support for `issuer` on `Invoice#create`, `Invoice#update`, and `Invoice`\n*   Add support for `liability` on `Invoice#create.automatic_tax`, `Invoice#upcoming.automatic_tax`, `Invoice#upcomingLines.automatic_tax`, `Invoice#update.automatic_tax`, and `Invoice.automatic_tax`\n\n### January 12, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `expand` on `BankAccount#delete` and `Card#delete`\n*   Add support for `account_type`, `default_for_currency`, and `documents` on `BankAccount#update` and `Card#update`\n*   Remove support for `owner` on `BankAccount#update` and `Card#update`\n*   Change type of `BankAccount#update.account_holder_type` and `Card#update.account_holder_type` from `enum('company'|'individual')` to `emptyStringable(enum('company'|'individual'))`\n\n### January 11, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `CustomerSession`\n*   Add support for `create` method on resource `CustomerSession`\n\n### January 10, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for values `obligation_inbound`, `obligation_payout_failure`, `obligation_payout`, and `obligation_reversal_outbound` from enum `BalanceTransaction.type`\n*   Remove support for value `obligation` from enum `Reporting.ReportRun#create.parameters.reporting_category`\n\n### January 9, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `billing_cycle_anchor_config` on `Subscription#create` and `Subscription`\n\n### January 8, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `eps` and `p24` on enums `Invoice#create.payment_settings.payment_method_types[]`, `Invoice#update.payment_settings.payment_method_types[]`, `Invoice.payment_settings.payment_method_types[]`, `Subscription#create.payment_settings.payment_method_types[]`, `Subscription#update.payment_settings.payment_method_types[]`, and `Subscription.payment_settings.payment_method_types[]`\n\n### January 3, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `AccountSession.components.payment_details.features`, `AccountSession.components.payment_details`, `AccountSession.components.payments.features`, `AccountSession.components.payments`, `AccountSession.components.payouts.features`, and `AccountSession.components.payouts` to be required\n\n### January 2, 2024![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `PaymentLink.inactive_message` and `PaymentLink.restrictions` to be required\n*   Add support for `retrieve` method on resource `Tax.Registration`\n*   Change type of `SubscriptionSchedule.default_settings.invoice_settings` from `nullable(InvoiceSettingSubscriptionScheduleSetting)` to `InvoiceSettingSubscriptionScheduleSetting`\n\n### December 21, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `collection_method` on `Mandate.payment_method_details.us_bank_account`\n*   Add support for `mandate_options` on `PaymentIntent#confirm.payment_method_options.us_bank_account`, `PaymentIntent#create.payment_method_options.us_bank_account`, `PaymentIntent#update.payment_method_options.us_bank_account`, `PaymentIntent.payment_method_options.us_bank_account`, `SetupIntent#confirm.payment_method_options.us_bank_account`, `SetupIntent#create.payment_method_options.us_bank_account`, `SetupIntent#update.payment_method_options.us_bank_account`, and `SetupIntent.payment_method_options.us_bank_account`\n\n### December 20, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `FinancialConnections.Transaction`\n*   Add support for `list` and `retrieve` methods on resource `Transaction`\n*   Add support for `subscribe` and `unsubscribe` methods on resource `FinancialConnections.Account`\n*   Change type of `Checkout.Session#create.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `Checkout.Session.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `Invoice#create.payment_settings.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `Invoice#update.payment_settings.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `Invoice.payment_settings.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `PaymentIntent#confirm.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `PaymentIntent#create.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `PaymentIntent#update.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `PaymentIntent.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `SetupIntent#confirm.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `SetupIntent#create.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `SetupIntent#update.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `SetupIntent.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `Subscription#create.payment_settings.payment_method_options.us_bank_account.financial_connections.prefetch[]`, `Subscription#update.payment_settings.payment_method_options.us_bank_account.financial_connections.prefetch[]`, and `Subscription.payment_settings.payment_method_options.us_bank_account.financial_connections.prefetch[]` from `literal('balances')` to `enum('balances'|'transactions')`\n*   Add support for new value `financial_connections.account.refreshed_transactions` on enum `Event.type`\n*   Add support for new value `transactions` on enum `FinancialConnections.Account#refresh.features[]`\n*   Add support for `subscriptions` and `transaction_refresh` on `FinancialConnections.Account`\n*   Add support for new value `transactions` on enums `FinancialConnections.Session#create.prefetch[]` and `FinancialConnections.Session.prefetch[]`\n*   Add support for new value `financial_connections.account.refreshed_transactions` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n*   Add support for new value `challenge` on enums `PaymentIntent#confirm.payment_method_options.card.request_three_d_secure`, `PaymentIntent#create.payment_method_options.card.request_three_d_secure`, `PaymentIntent#update.payment_method_options.card.request_three_d_secure`, `PaymentIntent.payment_method_options.card.request_three_d_secure`, `SetupIntent#confirm.payment_method_options.card.request_three_d_secure`, `SetupIntent#create.payment_method_options.card.request_three_d_secure`, `SetupIntent#update.payment_method_options.card.request_three_d_secure`, and `SetupIntent.payment_method_options.card.request_three_d_secure`\n*   Add support for new value `unknown` on enums `Issuing.Authorization.testHelpers#create.verification_data.authentication_exemption.type` and `Issuing.Authorization.verification_data.authentication_exemption.type`\n*   Add support for `features` on `AccountSession#create.components.payouts`\n*   Add support for `edit_payout_schedule`, `instant_payouts`, and `standard_payouts` on `AccountSession.components.payouts.features`\n\n### December 19, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `next_refresh_available_at` on `FinancialConnections.Account.balance_refresh`\n*   Change type of `Quote.invoice_settings` from `nullable(InvoiceSettingQuoteSetting)` to `InvoiceSettingQuoteSetting`\n\n### December 18, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `revolut_pay` on `PaymentMethodConfiguration#create`, `PaymentMethodConfiguration#update`, and `PaymentMethodConfiguration`\n\n### December 15, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `destination_details` on `Refund`\n\n### December 14, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `features` on `AccountSession#create.components.payouts`\n\n### December 13, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `created` on `Radar.EarlyFraudWarning#list`\n\n### December 8, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `id_bank_transfer`, `multibanco`, `netbanking`, `pay_by_bank`, and `upi` on `PaymentMethodConfiguration`\n*   Add support for `payment_method_reuse_agreement` on `Checkout.Session#create.consent_collection`, `Checkout.Session.consent_collection`, `PaymentLink#create.consent_collection`, and `PaymentLink.consent_collection`\n*   Add support for `after_submit` on `Checkout.Session#create.custom_text`, `Checkout.Session.custom_text`, `PaymentLink#create.custom_text`, `PaymentLink#update.custom_text`, and `PaymentLink.custom_text`\n*   Remove support for values `challenge_only` and `challenge` from enum `SetupIntent.payment_method_options.card.request_three_d_secure`\n\n### December 7, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `financial_connections_no_successful_transaction_refresh` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n*   Remove support for values `challenge_only` and `challenge` from enum `PaymentIntent.payment_method_options.card.request_three_d_secure`\n*   Add support for `transfer_group` on `PaymentLink#create.payment_intent_data`, `PaymentLink#update.payment_intent_data`, and `PaymentLink.payment_intent_data`\n\n### December 6, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for value `various` from enum `Climate.Supplier.removal_pathway`\n*   Add support for new value `customer_tax_location_invalid` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n\n### December 5, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `payment_details`, `payments`, and `payouts` on `AccountSession#create.components` and `AccountSession.components`\n*   Add support for `features` on `AccountSession#create.components.account_onboarding` and `AccountSession.components.account_onboarding`\n\n### December 4, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `trial_settings` on `PaymentLink#create.subscription_data`, `PaymentLink#update.subscription_data`, and `PaymentLink.subscription_data`\n*   Add support for `inactive_message` and `restrictions` on `PaymentLink#create`, `PaymentLink#update`, and `PaymentLink`\n\n### December 1, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Climate.Product.metric_tons_available` to be required\n*   Add support for new values `payment_network_reserve_hold` and `payment_network_reserve_release` on enum `BalanceTransaction.type`\n\n### November 30, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `challenge` on enums `PaymentIntent.payment_method_options.card.request_three_d_secure` and `SetupIntent.payment_method_options.card.request_three_d_secure`\n*   Add support for `created` on `Checkout.Session#list`\n*   Add support for new value `enhanced_weathering` on enum `Climate.Supplier.removal_pathway`\n\n### November 29, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `climate_order_purchase` and `climate_order_refund` on enum `BalanceTransaction.type`\n*   Add support for new values `climate_order_purchase` and `climate_order_refund` on enum `Reporting.ReportRun#create.parameters.reporting_category`\n*   Change type of `Climate.Order.expected_delivery_year` from `nullable(longInteger)` to `longInteger`\n*   Add support for new values `climate.order.canceled`, `climate.order.created`, `climate.order.delayed`, `climate.order.delivered`, `climate.order.product_substituted`, `climate.product.created`, and `climate.product.pricing_updated` on enum `Event.type`\n*   Add support for new values `climate.order.canceled`, `climate.order.created`, `climate.order.delayed`, `climate.order.delivered`, `climate.order.product_substituted`, `climate.product.created`, and `climate.product.pricing_updated` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n*   Add support for `validate_location` on `Customer#create.tax` and `Customer#update.tax`\n\n### November 22, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resources `Climate.Order`, `Climate.Product`, and `Climate.Supplier`\n*   Add support for `cancel`, `create`, `list`, `retrieve`, and `update` methods on resource `Order`\n*   Add support for `list` and `retrieve` methods on resources `Product` and `Supplier`\n\n### November 21, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `financial_connections_account_inactive` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n\n### November 20, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `electronic_commerce_indicator` and `transaction_id` on `Charge.payment_method_details.card.three_d_secure` and `SetupAttempt.payment_method_details.card.three_d_secure`\n*   Add support for `exemption_indicator_applied` and `exemption_indicator` on `Charge.payment_method_details.card.three_d_secure`\n*   Add support for `three_d_secure` on `PaymentIntent#confirm.payment_method_options.card`, `PaymentIntent#create.payment_method_options.card`, `PaymentIntent#update.payment_method_options.card`, `SetupIntent#confirm.payment_method_options.card`, `SetupIntent#create.payment_method_options.card`, and `SetupIntent#update.payment_method_options.card`\n\n### November 18, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `system_trace_audit_number` on `Issuing.Authorization.network_data`\n*   Add support for `transaction_id` on `Issuing.Authorization.network_data` and `Issuing.Transaction.network_data`\n*   Add support for `network_risk_score` on `Issuing.Authorization.pending_request` and `Issuing.Authorization.request_history[]`\n*   Add support for `requested_at` on `Issuing.Authorization.request_history[]`\n*   Add support for `authorization_code` on `Issuing.Transaction.network_data`\n\n### November 17, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `offline` on `Charge.payment_method_details.card_present`\n\n### November 16, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `status` on `Checkout.Session#list`\n*   Add support for `bacs_debit_payments` on `Account#create.settings` and `Account#update.settings`\n*   Add support for `service_user_number` on `Account.settings.bacs_debit_payments`\n*   Change type of `Account.settings.bacs_debit_payments.display_name` from `string` to `nullable(string)`\n*   Change `Account.settings.bacs_debit_payments.display_name` to be required\n\n### November 15, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `SubscriptionSchedule#create.start_date[0]`, `SubscriptionSchedule#update.phases[].end_date[0]`, `SubscriptionSchedule#update.phases[].start_date[0]`, and `SubscriptionSchedule#update.phases[].trial_end[0]` from `longInteger` to `DateTime`\n*   Add support for `tax_amounts` on `CreditNote#create.lines[]`, `CreditNote#preview.lines[]`, and `CreditNote#preview_lines.lines[]`\n*   Add support for `capture_before` on `Charge.payment_method_details.card`\n*   Add support for `network_data` on `Issuing.Transaction`\n\n### November 14, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `paypal` on `Checkout.Session.payment_method_options`\n\n### November 8, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `terminal_reader_hardware_fault` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n*   Change `Charge.payment_method_details.card.amount_authorized` to be required\n\n### November 7, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `PaymentIntent.latest_charge` to be required\n*   Change `Product.features[].name` to be optional\n\n### November 3, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Checkout.Session.payment_method_configuration_details`, `PaymentIntent.payment_method_configuration_details`, and `SetupIntent.payment_method_configuration_details` to be required\n*   Add support for `metadata` on `Quote#create.subscription_data`, `Quote#update.subscription_data`, and `Quote.subscription_data`\n\n### November 2, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `payment_unreconciled` on enum `BalanceTransaction.type`\n*   Add support for new value `unreconciled_customer_funds` on enum `Reporting.ReportRun#create.parameters.reporting_category`\n*   Add support for `url` on `Issuing.Authorization.merchant_data`, `Issuing.Authorization.testHelpers#create.merchant_data`, `Issuing.Transaction.merchant_data`, `Issuing.Transaction.testHelpers#create_force_capture.merchant_data`, and `Issuing.Transaction.testHelpers#create_unlinked_refund.merchant_data`\n*   Add support for `authentication_exemption` and `three_d_secure` on `Issuing.Authorization.testHelpers#create.verification_data` and `Issuing.Authorization.verification_data`\n*   Add support for new value `token_card_network_invalid` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n*   Add support for `description` on `PaymentLink#create.payment_intent_data`, `PaymentLink#update.payment_intent_data`, and `PaymentLink.payment_intent_data`\n\n### November 1, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `revolut_pay_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `revolut_pay` on `Charge.payment_method_details`, `Checkout.Session#create.payment_method_options`, `Checkout.Session.payment_method_options`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Add support for new value `revolut_pay` on enums `Checkout.Session#create.payment_method_types[]`, `Customer#list_payment_methods.type`, `PaymentMethod#create.type`, and `PaymentMethod#list.type`\n*   Add support for new value `revolut_pay` on enums `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for new value `revolut_pay` on enum `PaymentMethod.type`\n\n### October 31, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `Tax.Registration`\n*   Add support for `create`, `list`, and `update` methods on resource `Registration`\n*   Change `Charge.payment_method_details.paypal.payer_email`, `Charge.payment_method_details.paypal.payer_id`, `Charge.payment_method_details.paypal.payer_name`, `Charge.payment_method_details.paypal.seller_protection`, `Charge.payment_method_details.paypal.transaction_id`, `Mandate.payment_method_details.paypal.payer_id`, `PaymentIntent.payment_method_options.paypal.reference`, `PaymentMethod.paypal.payer_email`, and `PaymentMethod.paypal.payer_id` to be required\n\n### October 26, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `aba` and `swift` on `FundingInstructions.bank_transfer.financial_addresses[]` and `PaymentIntent.next_action.display_bank_transfer_instructions.financial_addresses[]`\n*   Add support for new values `ach`, `domestic_wire_us`, and `swift` on enums `FundingInstructions.bank_transfer.financial_addresses[].supported_networks[]` and `PaymentIntent.next_action.display_bank_transfer_instructions.financial_addresses[].supported_networks[]`\n*   Add support for new values `aba` and `swift` on enums `FundingInstructions.bank_transfer.financial_addresses[].type` and `PaymentIntent.next_action.display_bank_transfer_instructions.financial_addresses[].type`\n\n### October 25, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `balance_invalid_parameter` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n\n### October 24, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Issuing.Cardholder.individual.card_issuing` to be optional\n\n### October 18, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `request_incremental_authorization` on `PaymentIntent#confirm.payment_method_options.card_present`, `PaymentIntent#create.payment_method_options.card_present`, and `PaymentIntent#update.payment_method_options.card_present`\n\n### October 17, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `invalid_dob_age_under_minimum` on enums `Account.future_requirements.errors[].code`, `Account.requirements.errors[].code`, `BankAccount.future_requirements.errors[].code`, and `BankAccount.requirements.errors[].code`\n\n### October 16, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Checkout.Session.client_secret` and `Checkout.Session.ui_mode` to be required\n*   Add support for `legal_guardian` on `Account#persons.relationship` and `Token#create.person.relationship`\n*   Add support for new values `invalid_address_highway_contract_box`, `invalid_address_private_mailbox`, `invalid_business_profile_name_denylisted`, `invalid_business_profile_name`, `invalid_company_name_denylisted`, `invalid_dob_age_over_maximum`, `invalid_product_description_length`, `invalid_product_description_url_match`, `invalid_statement_descriptor_business_mismatch`, `invalid_statement_descriptor_denylisted`, `invalid_statement_descriptor_length`, `invalid_statement_descriptor_prefix_denylisted`, `invalid_statement_descriptor_prefix_mismatch`, `invalid_tax_id_format`, `invalid_tax_id`, `invalid_url_denylisted`, `invalid_url_format`, `invalid_url_length`, `invalid_url_web_presence_detected`, `invalid_url_website_business_information_mismatch`, `invalid_url_website_empty`, `invalid_url_website_inaccessible_geoblocked`, `invalid_url_website_inaccessible_password_protected`, `invalid_url_website_inaccessible`, `invalid_url_website_incomplete_cancellation_policy`, `invalid_url_website_incomplete_customer_service_details`, `invalid_url_website_incomplete_legal_restrictions`, `invalid_url_website_incomplete_refund_policy`, `invalid_url_website_incomplete_return_policy`, `invalid_url_website_incomplete_terms_and_conditions`, `invalid_url_website_incomplete_under_construction`, `invalid_url_website_incomplete`, and `invalid_url_website_other` on enums `Account.future_requirements.errors[].code`, `Account.requirements.errors[].code`, `BankAccount.future_requirements.errors[].code`, and `BankAccount.requirements.errors[].code`\n*   Add support for `additional_tos_acceptances` on `Token#create.person`\n*   Add support for new value `2023-10-16` on enum `WebhookEndpoint#create.api_version`\n\n### October 12, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `issuing_token.created` and `issuing_token.updated` on enum `Event.type`\n*   Add support for new values `issuing_token.created` and `issuing_token.updated` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### October 10, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `offline` on `Terminal.Configuration#create`, `Terminal.Configuration#update`, and `Terminal.Configuration`\n*   Change type of `Checkout.Session.custom_fields[].dropdown` from `nullable(PaymentPagesCheckoutSessionCustomFieldsDropdown)` to `PaymentPagesCheckoutSessionCustomFieldsDropdown`\n*   Change type of `Checkout.Session.custom_fields[].numeric` and `Checkout.Session.custom_fields[].text` from `nullable(PaymentPagesCheckoutSessionCustomFieldsNumeric)` to `PaymentPagesCheckoutSessionCustomFieldsNumeric`\n*   Change `Checkout.Session.custom_fields[].dropdown`, `Checkout.Session.custom_fields[].numeric`, `Checkout.Session.custom_fields[].text`, `PaymentLink.custom_fields[].dropdown`, `PaymentLink.custom_fields[].numeric`, and `PaymentLink.custom_fields[].text` to be optional\n*   Change type of `PaymentLink.custom_fields[].dropdown` from `nullable(PaymentLinksResourceCustomFieldsDropdown)` to `PaymentLinksResourceCustomFieldsDropdown`\n*   Change type of `PaymentLink.custom_fields[].numeric` and `PaymentLink.custom_fields[].text` from `nullable(PaymentLinksResourceCustomFieldsNumeric)` to `PaymentLinksResourceCustomFieldsNumeric`\n\n### October 6, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `postal_code` on `Issuing.Authorization.verification_data`\n*   Add support for `redirect_on_completion`, `return_url`, and `ui_mode` on `Checkout.Session#create` and `Checkout.Session`\n*   Change `Checkout.Session#create.success_url` to be optional\n*   Add support for `client_secret` on `Checkout.Session`\n\n### October 4, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for resource `Margin`\n*   Add support for `statement_descriptor_suffix` and `statement_descriptor` on `PaymentLink#create.payment_intent_data`, `PaymentLink#update.payment_intent_data`, and `PaymentLink.payment_intent_data`\n\n### October 3, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `PaymentLink.payment_intent_data.metadata` and `PaymentLink.subscription_data.metadata` to be required\n*   Add support for new resources `Issuing.Token` and `Margin`\n*   Add support for `list`, `retrieve`, and `update` methods on resource `Token`\n*   Add support for `amount_authorized`, `extended_authorization`, `incremental_authorization`, `multicapture`, and `overcapture` on `Charge.payment_method_details.card`\n*   Add support for `token` on `Issuing.Authorization` and `Issuing.Transaction`\n*   Add support for `request_extended_authorization`, `request_multicapture`, and `request_overcapture` on `PaymentIntent#confirm.payment_method_options.card`, `PaymentIntent#create.payment_method_options.card`, `PaymentIntent#update.payment_method_options.card`, and `PaymentIntent.payment_method_options.card`\n*   Add support for `request_incremental_authorization` on `PaymentIntent#confirm.payment_method_options.card_present`, `PaymentIntent#confirm.payment_method_options.card`, `PaymentIntent#create.payment_method_options.card_present`, `PaymentIntent#create.payment_method_options.card`, `PaymentIntent#update.payment_method_options.card_present`, `PaymentIntent#update.payment_method_options.card`, and `PaymentIntent.payment_method_options.card`\n*   Add support for `final_capture` on `PaymentIntent#capture`\n*   Add support for `metadata` on `PaymentLink#create.payment_intent_data`, `PaymentLink#create.subscription_data`, `PaymentLink.payment_intent_data`, and `PaymentLink.subscription_data`\n*   Add support for `payment_intent_data` and `subscription_data` on `PaymentLink#update`\n\n### September 29, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `authorization_code` on `Issuing.Authorization.request_history[]`\n\n### September 27, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `PaymentMethod.us_bank_account.financial_connections_account` to be required\n\n### September 26, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `PaymentMethod.us_bank_account.status_details` to be required\n\n### September 22, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for values `order.created`, `recipient.created`, `recipient.deleted`, `recipient.updated`, `sku.created`, `sku.deleted`, and `sku.updated` from enum `Event.type`\n*   Remove support for values `order.created`, `recipient.created`, `recipient.deleted`, `recipient.updated`, `sku.created`, `sku.deleted`, and `sku.updated` from enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n*   Add support for `rendering` on `Invoice#create`, `Invoice#update`, and `Invoice`\n\n### September 21, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Charge.payment_method_details.paypal.payer_email`, `Charge.payment_method_details.paypal.payer_id`, `Charge.payment_method_details.paypal.payer_name`, `Charge.payment_method_details.paypal.seller_protection`, `Charge.payment_method_details.paypal.transaction_id`, `Mandate.payment_method_details.paypal.payer_id`, `PaymentIntent.payment_method_options.paypal.reference`, `PaymentMethod.paypal.payer_email`, and `PaymentMethod.paypal.payer_id` to be optional\n*   Change `Charge.payment_method_details.paypal.payer_email`, `Charge.payment_method_details.paypal.payer_id`, `Charge.payment_method_details.paypal.payer_name`, `Charge.payment_method_details.paypal.seller_protection`, `Charge.payment_method_details.paypal.transaction_id`, `Mandate.payment_method_details.paypal.payer_id`, `PaymentIntent.payment_method_options.paypal.reference`, `PaymentMethod.paypal.payer_email`, and `PaymentMethod.paypal.payer_id` to be required\n\n### September 19, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `terms_of_service_acceptance` on `Checkout.Session#create.custom_text`, `Checkout.Session.custom_text`, `PaymentLink#create.custom_text`, `PaymentLink#update.custom_text`, and `PaymentLink.custom_text`\n\n### September 14, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `PaymentMethodConfiguration`\n*   Add support for `create`, `list`, `retrieve`, and `update` methods on resource `PaymentMethodConfiguration`\n*   Add support for `payment_method_configuration` on `Checkout.Session#create`, `PaymentIntent#create`, `PaymentIntent#update`, `SetupIntent#create`, and `SetupIntent#update`\n*   Add support for `payment_method_configuration_details` on `Checkout.Session`, `PaymentIntent`, and `SetupIntent`\n\n### September 12, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `nonce` on `EphemeralKey#create`\n\n### September 11, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `cashback_amount` on `Issuing.Authorization.amount_details`, `Issuing.Authorization.pending_request.amount_details`, `Issuing.Authorization.request_history[].amount_details`, `Issuing.Authorization.testHelpers#create.amount_details`, and `Issuing.Transaction.amount_details`\n*   Add support for `capture`, `create`, `expire`, `increment`, and `reverse` test helper methods on resource `Issuing.Authorization`\n*   Add support for `create_force_capture`, `create_unlinked_refund`, and `refund` test helper methods on resource `Issuing.Transaction`\n\n### September 8, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `stripe_tax_inactive` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n\n### September 7, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `serial_number` on `Terminal.Reader#list`\n\n### September 5, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `PaymentMethodDomain`\n*   Add support for `create`, `list`, `retrieve`, `update`, and `validate` methods on resource `PaymentMethodDomain`\n*   Add support for new value `n26` on enums `Charge.payment_method_details.ideal.bank`, `PaymentIntent#confirm.payment_method_data.ideal.bank`, `PaymentIntent#create.payment_method_data.ideal.bank`, `PaymentIntent#update.payment_method_data.ideal.bank`, `PaymentMethod#create.ideal.bank`, `PaymentMethod.ideal.bank`, `SetupAttempt.payment_method_details.ideal.bank`, `SetupIntent#confirm.payment_method_data.ideal.bank`, `SetupIntent#create.payment_method_data.ideal.bank`, and `SetupIntent#update.payment_method_data.ideal.bank`\n*   Add support for new value `NTSBDEB1` on enums `Charge.payment_method_details.ideal.bic`, `PaymentMethod.ideal.bic`, and `SetupAttempt.payment_method_details.ideal.bic`\n\n### September 4, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for value `invoiceitem.updated` from enum `Event.type`\n*   Remove support for value `invoiceitem.updated` from enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### September 1, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `treasury.credit_reversal.created`, `treasury.credit_reversal.posted`, `treasury.debit_reversal.completed`, `treasury.debit_reversal.created`, `treasury.debit_reversal.initial_credit_granted`, `treasury.financial_account.closed`, `treasury.financial_account.created`, `treasury.financial_account.features_status_updated`, `treasury.inbound_transfer.canceled`, `treasury.inbound_transfer.created`, `treasury.inbound_transfer.failed`, `treasury.inbound_transfer.succeeded`, `treasury.outbound_payment.canceled`, `treasury.outbound_payment.created`, `treasury.outbound_payment.expected_arrival_date_updated`, `treasury.outbound_payment.failed`, `treasury.outbound_payment.posted`, `treasury.outbound_payment.returned`, `treasury.outbound_transfer.canceled`, `treasury.outbound_transfer.created`, `treasury.outbound_transfer.expected_arrival_date_updated`, `treasury.outbound_transfer.failed`, `treasury.outbound_transfer.posted`, `treasury.outbound_transfer.returned`, `treasury.received_credit.created`, `treasury.received_credit.failed`, `treasury.received_credit.succeeded`, and `treasury.received_debit.created` on enum `Event.type`\n\n### August 31, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `features` on `Product#create`, `Product#update`, and `Product`\n\n### August 30, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `AccountSession`\n*   Add support for `create` method on resource `AccountSession`\n\n### August 29, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `obligation_inbound`, `obligation_outbound`, `obligation_payout_failure`, `obligation_payout`, `obligation_reversal_inbound`, and `obligation_reversal_outbound` on enum `BalanceTransaction.type`\n*   Add support for new value `obligation` on enum `Reporting.ReportRun#create.parameters.reporting_category`\n\n### August 28, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for values `obligation_inbound`, `obligation_outbound`, `obligation_payout_failure`, `obligation_payout`, `obligation_reversal_inbound`, and `obligation_reversal_outbound` from enum `BalanceTransaction.type`\n*   Remove support for value `obligation` from enum `Reporting.ReportRun#create.parameters.reporting_category`\n*   Add support for `application` on `PaymentLink`\n*   Change type of `Event.type` from `string` to `enum`\n*   Add support for new values `obligation_inbound`, `obligation_outbound`, `obligation_payout_failure`, `obligation_payout`, `obligation_reversal_inbound`, and `obligation_reversal_outbound` on enum `BalanceTransaction.type`\n*   Add support for new value `obligation` on enum `Reporting.ReportRun#create.parameters.reporting_category`\n\n### August 22, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `retention` on `BillingPortal.Session#create.flow_data.subscription_cancel` and `BillingPortal.Session.flow.subscription_cancel`\n\n### August 21, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `prefetch` on `Checkout.Session#create.payment_method_options.us_bank_account.financial_connections`, `Checkout.Session.payment_method_options.us_bank_account.financial_connections`, `FinancialConnections.Session#create`, `FinancialConnections.Session`, `Invoice#create.payment_settings.payment_method_options.us_bank_account.financial_connections`, `Invoice#update.payment_settings.payment_method_options.us_bank_account.financial_connections`, `Invoice.payment_settings.payment_method_options.us_bank_account.financial_connections`, `PaymentIntent#confirm.payment_method_options.us_bank_account.financial_connections`, `PaymentIntent#create.payment_method_options.us_bank_account.financial_connections`, `PaymentIntent#update.payment_method_options.us_bank_account.financial_connections`, `PaymentIntent.payment_method_options.us_bank_account.financial_connections`, `SetupIntent#confirm.payment_method_options.us_bank_account.financial_connections`, `SetupIntent#create.payment_method_options.us_bank_account.financial_connections`, `SetupIntent#update.payment_method_options.us_bank_account.financial_connections`, `SetupIntent.payment_method_options.us_bank_account.financial_connections`, `Subscription#create.payment_settings.payment_method_options.us_bank_account.financial_connections`, `Subscription#update.payment_settings.payment_method_options.us_bank_account.financial_connections`, and `Subscription.payment_settings.payment_method_options.us_bank_account.financial_connections`\n*   Change type of `SetupIntent#create.mandate_data` from `secret_key_param` to `emptyStringable(secret_key_param)`\n*   Change type of `SetupIntent#confirm.mandate_data` from `secret_key_param | client_key_param` to `emptyStringable(secret_key_param | client_key_param)`\n\n### August 20, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `PaymentIntent#create.mandate_data` from `secret_key_param` to `emptyStringable(secret_key_param)`\n*   Change type of `PaymentIntent#confirm.mandate_data` from `secret_key_param | client_key_param` to `emptyStringable(secret_key_param | client_key_param)`\n\n### August 18, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `payment_method_details` on `Dispute`\n\n### August 17, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `flat_amount` on `Tax.Transaction#create_reversal`\n\n### August 16, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for values `custom_account_update` and `custom_account_verification` from enum `AccountLink#create.type`\n*   Remove support for `available_on` on `BalanceTransaction#list`\n*   Remove support for `alternate_statement_descriptors`, `destination`, and `dispute` on `Charge`\n*   Remove support for `shipping_rates` on `Checkout.Session#create`\n*   Remove support for `coupon` and `trial_from_plan` on `Checkout.Session#create.subscription_data`\n*   Remove support for value `card_present` from enums `Customer#list_payment_methods.type` and `PaymentMethod#list.type`\n*   Remove support for value `charge_refunded` from enum `Dispute.status`\n*   Remove support for `blik` on `Mandate.payment_method_details`, `PaymentMethod#update`, `SetupAttempt.payment_method_details`, `SetupIntent#confirm.payment_method_options`, `SetupIntent#create.payment_method_options`, `SetupIntent#update.payment_method_options`, and `SetupIntent.payment_method_options`\n*   Remove support for `acss_debit`, `affirm`, `au_becs_debit`, `bacs_debit`, `cashapp`, `sepa_debit`, and `zip` on `PaymentMethod#update`\n*   Remove support for `country` on `PaymentMethod.link`\n*   Remove support for `recurring` on `Price#update`\n*   Remove support for `attributes`, `caption`, and `deactivate_on` on `Product#create`, `Product#update`, and `Product`\n*   Add support for new values `verification_directors_mismatch`, `verification_document_directors_mismatch`, `verification_extraneous_directors`, and `verification_missing_directors` on enums `Account.future_requirements.errors[].code`, `Account.requirements.errors[].code`, `BankAccount.future_requirements.errors[].code`, and `BankAccount.requirements.errors[].code`\n\n### August 14, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `2023-08-16` on enum `WebhookEndpoint#create.api_version`\n\n### August 11, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `process_config` on `Terminal.Reader#process_setup_intent` and `Terminal.Reader.action.process_setup_intent`\n*   Remove support for `rendering` on `Invoice#create`, `Invoice#update`, and `Invoice`\n\n### August 10, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `rendering` on `Invoice#create`, `Invoice#update`, and `Invoice`\n*   Add support for new values `incorporated_partnership` and `unincorporated_partnership` on enums `Account#create.company.structure`, `Account#update.company.structure`, `Account.company.structure`, and `Token#create.account.company.structure`\n\n### August 7, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `payment_reversal` on enum `BalanceTransaction.type`\n\n### August 4, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Invoice.subscription_details.metadata` and `Invoice.subscription_details` to be required\n\n### August 3, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `preferred_settlement_speed` on `PaymentIntent#confirm.payment_method_options.us_bank_account`, `PaymentIntent#create.payment_method_options.us_bank_account`, `PaymentIntent#update.payment_method_options.us_bank_account`, and `PaymentIntent.payment_method_options.us_bank_account`\n\n### August 2, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `sepa_debit_fingerprint` and `us_bank_account_fingerprint` on enums `Radar.ValueList#create.item_type` and `Radar.ValueList.item_type`\n\n### August 1, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `Account#create.settings.card_issuing.tos_acceptance.user_agent`, `Account#create.settings.treasury.tos_acceptance.user_agent`, `Account#update.settings.card_issuing.tos_acceptance.user_agent`, `Account#update.settings.treasury.tos_acceptance.user_agent`, `BillingPortal.Configuration#create.business_profile.headline`, `BillingPortal.Configuration#update.business_profile.headline`, `Invoice#create.payment_settings.default_mandate`, `Invoice#create.shipping_details.phone`, `Invoice#pay.mandate`, `Invoice#update.default_source`, `Invoice#update.payment_settings.default_mandate`, `Invoice#update.shipping_details.phone`, `Issuing.Cardholder#create.individual.card_issuing.user_terms_acceptance.user_agent`, `Issuing.Cardholder#update.individual.card_issuing.user_terms_acceptance.user_agent`, `Issuing.Dispute#create.evidence.canceled.cancellation_reason`, `Issuing.Dispute#create.evidence.canceled.explanation`, `Issuing.Dispute#create.evidence.canceled.product_description`, `Issuing.Dispute#create.evidence.duplicate.explanation`, `Issuing.Dispute#create.evidence.fraudulent.explanation`, `Issuing.Dispute#create.evidence.merchandise_not_as_described.explanation`, `Issuing.Dispute#create.evidence.merchandise_not_as_described.return_description`, `Issuing.Dispute#create.evidence.not_received.explanation`, `Issuing.Dispute#create.evidence.not_received.product_description`, `Issuing.Dispute#create.evidence.other.explanation`, `Issuing.Dispute#create.evidence.other.product_description`, `Issuing.Dispute#create.evidence.service_not_as_described.cancellation_reason`, `Issuing.Dispute#create.evidence.service_not_as_described.explanation`, `Issuing.Dispute#update.evidence.canceled.cancellation_reason`, `Issuing.Dispute#update.evidence.canceled.explanation`, `Issuing.Dispute#update.evidence.canceled.product_description`, `Issuing.Dispute#update.evidence.duplicate.explanation`, `Issuing.Dispute#update.evidence.fraudulent.explanation`, `Issuing.Dispute#update.evidence.merchandise_not_as_described.explanation`, `Issuing.Dispute#update.evidence.merchandise_not_as_described.return_description`, `Issuing.Dispute#update.evidence.not_received.explanation`, `Issuing.Dispute#update.evidence.not_received.product_description`, `Issuing.Dispute#update.evidence.other.explanation`, `Issuing.Dispute#update.evidence.other.product_description`, `Issuing.Dispute#update.evidence.service_not_as_described.cancellation_reason`, `Issuing.Dispute#update.evidence.service_not_as_described.explanation`, `PaymentIntent#confirm.payment_method_data.billing_details.name`, `PaymentIntent#confirm.payment_method_data.billing_details.phone`, `PaymentIntent#confirm.payment_method_options.konbini.confirmation_number`, `PaymentIntent#confirm.payment_method_options.konbini.product_description`, `PaymentIntent#create.payment_method_data.billing_details.name`, `PaymentIntent#create.payment_method_data.billing_details.phone`, `PaymentIntent#create.payment_method_options.konbini.confirmation_number`, `PaymentIntent#create.payment_method_options.konbini.product_description`, `PaymentIntent#update.payment_method_data.billing_details.name`, `PaymentIntent#update.payment_method_data.billing_details.phone`, `PaymentIntent#update.payment_method_options.konbini.confirmation_number`, `PaymentIntent#update.payment_method_options.konbini.product_description`, `PaymentMethod#create.billing_details.name`, `PaymentMethod#create.billing_details.phone`, `PaymentMethod#update.billing_details.name`, `PaymentMethod#update.billing_details.phone`, `Product#update.caption`, `Product#update.description`, `Product#update.unit_label`, `Quote#create.description`, `Quote#create.footer`, `Quote#create.header`, `Quote#update.description`, `Quote#update.footer`, `Quote#update.header`, `Quote#update.subscription_data.description`, `SetupIntent#confirm.payment_method_data.billing_details.name`, `SetupIntent#confirm.payment_method_data.billing_details.phone`, `SetupIntent#create.payment_method_data.billing_details.name`, `SetupIntent#create.payment_method_data.billing_details.phone`, `SetupIntent#update.payment_method_data.billing_details.name`, `SetupIntent#update.payment_method_data.billing_details.phone`, `Subscription#cancel.cancellation_details.comment`, `Subscription#update.cancellation_details.comment`, `Subscription#update.default_source`, `Subscription#update.description`, `SubscriptionSchedule#create.default_settings.description`, `SubscriptionSchedule#create.phases[].description`, `SubscriptionSchedule#update.default_settings.description`, `SubscriptionSchedule#update.phases[].description`, `Tax.Calculation#create.customer_details.address.city`, `Tax.Calculation#create.customer_details.address.line1`, `Tax.Calculation#create.customer_details.address.line2`, `Tax.Calculation#create.customer_details.address.postal_code`, `Tax.Calculation#create.customer_details.address.state`, `Terminal.Location#update.configuration_overrides`, `Terminal.Reader#update.label`, `Token#create.person.documents.company_authorization.files[]`, `Token#create.person.documents.passport.files[]`, `Token#create.person.documents.visa.files[]`, `Treasury.OutboundPayment#create.destination_payment_method_data.billing_details.name`, `Treasury.OutboundPayment#create.destination_payment_method_data.billing_details.phone`, `WebhookEndpoint#create.description`, and `WebhookEndpoint#update.description` from `string` to `emptyStringable(string)`\n\n### July 28, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `subscription_details` on `Invoice`\n\n### July 25, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `monthly_estimated_revenue` on `Account#create.business_profile`, `Account#update.business_profile`, and `Account.business_profile`\n\n### July 18, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for values `excluded_territory`, `jurisdiction_unsupported`, and `vat_exempt` from enums `Checkout.Session.shipping_cost.taxes[].taxability_reason`, `Checkout.Session.total_details.breakdown.taxes[].taxability_reason`, `CreditNote.shipping_cost.taxes[].taxability_reason`, `Invoice.shipping_cost.taxes[].taxability_reason`, `LineItem.taxes[].taxability_reason`, `Quote.computed.recurring.total_details.breakdown.taxes[].taxability_reason`, `Quote.computed.upfront.total_details.breakdown.taxes[].taxability_reason`, and `Quote.total_details.breakdown.taxes[].taxability_reason`\n\n### July 17, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `use_stripe_sdk` on `SetupIntent#confirm` and `SetupIntent#create`\n*   Add support for new value `service_tax` on enums `TaxRate#create.tax_type`, `TaxRate#update.tax_type`, and `TaxRate.tax_type`\n\n### July 14, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `ro_tin` on enums `Checkout.Session.customer_details.tax_ids[].type`, `Invoice.customer_tax_ids[].type`, `Tax.Calculation.customer_details.tax_ids[].type`, and `Tax.Transaction.customer_details.tax_ids[].type`\n*   Add support for new value `ro_tin` on enums `Customer#create.tax_id_data[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, and `Tax.Calculation#create.customer_details.tax_ids[].type`\n\n### July 12, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `allow_redirects` on `PaymentIntent#create.automatic_payment_methods`, `PaymentIntent.automatic_payment_methods`, `SetupIntent#create.automatic_payment_methods`, and `SetupIntent.automatic_payment_methods`\n*   Add support for `order_id` on `Charge.payment_method_details.afterpay_clearpay`\n*   Add support for new values `amusement_tax` and `communications_tax` on enums `Tax.Calculation.shipping_cost.tax_breakdown[].tax_rate_details.tax_type`, `Tax.Calculation.tax_breakdown[].tax_rate_details.tax_type`, `Tax.CalculationLineItem.tax_breakdown[].tax_rate_details.tax_type`, and `Tax.Transaction.shipping_cost.tax_breakdown[].tax_rate_details.tax_type`\n\n### July 11, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `Tax.Settings`\n*   Add support for `retrieve` and `update` methods on resource `Settings`\n*   Add support for new value `invalid_tax_location` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n*   Add support for new value `tax.settings.updated` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n*   Add support for `product` on `Tax.TransactionLineItem`\n\n### July 3, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `automatic_tax` on `Subscription#list`\n*   Add support for `numeric` and `text` on `PaymentLink.custom_fields[]`\n\n### June 28, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `effective_at` on `CreditNote#create`, `CreditNote#preview_lines`, `CreditNote#preview`, `CreditNote`, `Invoice#create`, `Invoice#update`, and `Invoice`\n\n### June 27, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `application_fees_not_allowed` on enums `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code`\n*   Add support for new values `ad_nrt`, `ar_cuit`, `bo_tin`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `pe_ruc`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, and `vn_tin` on enums `Checkout.Session.customer_details.tax_ids[].type`, `Invoice.customer_tax_ids[].type`, `Tax.Calculation.customer_details.tax_ids[].type`, and `Tax.Transaction.customer_details.tax_ids[].type`\n*   Add support for new values `ad_nrt`, `ar_cuit`, `bo_tin`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `pe_ruc`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, and `vn_tin` on enums `Customer#create.tax_id_data[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, and `Tax.Calculation#create.customer_details.tax_ids[].type`\n\n### June 22, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `on_behalf_of` on `Mandate`\n\n### June 9, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `Checkout.Session.success_url` from `string` to `nullable(string)`\n\n### June 6, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `taxability_reason` on `Tax.Calculation.tax_breakdown[]`\n\n### June 2, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Charge.payment_method_details.cashapp.buyer_id`, `Charge.payment_method_details.cashapp.cashtag`, `PaymentMethod.cashapp.buyer_id`, and `PaymentMethod.cashapp.cashtag` to be required\n\n### June 1, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `numeric` and `text` on `Checkout.Session#create.custom_fields[]`, `PaymentLink#create.custom_fields[]`, and `PaymentLink#update.custom_fields[]`\n*   Add support for `maximum_length` and `minimum_length` on `Checkout.Session.custom_fields[].numeric` and `Checkout.Session.custom_fields[].text`\n*   Add support for `payer_email` on `PaymentMethod.paypal`\n*   Add support for new values `aba` and `swift` on enums `Checkout.Session#create.payment_method_options.customer_balance.bank_transfer.requested_address_types[]`, `Checkout.Session.payment_method_options.customer_balance.bank_transfer.requested_address_types[]`, `PaymentIntent#confirm.payment_method_options.customer_balance.bank_transfer.requested_address_types[]`, `PaymentIntent#create.payment_method_options.customer_balance.bank_transfer.requested_address_types[]`, `PaymentIntent#update.payment_method_options.customer_balance.bank_transfer.requested_address_types[]`, and `PaymentIntent.payment_method_options.customer_balance.bank_transfer.requested_address_types[]`\n*   Add support for new value `us_bank_transfer` on enums `Checkout.Session#create.payment_method_options.customer_balance.bank_transfer.type`, `Checkout.Session.payment_method_options.customer_balance.bank_transfer.type`, `Customer#create_funding_instructions.bank_transfer.type`, `PaymentIntent#confirm.payment_method_options.customer_balance.bank_transfer.type`, `PaymentIntent#create.payment_method_options.customer_balance.bank_transfer.type`, `PaymentIntent#update.payment_method_options.customer_balance.bank_transfer.type`, `PaymentIntent.next_action.display_bank_transfer_instructions.type`, and `PaymentIntent.payment_method_options.customer_balance.bank_transfer.type`\n\n### May 31, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `preferred_locales` on `Issuing.Cardholder#create`, `Issuing.Cardholder#update`, and `Issuing.Cardholder`\n\n### May 30, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `taxability_reason` on `Tax.Calculation.tax_breakdown[]`\n*   Add support for `taxability_reason` on `Tax.Calculation.tax_breakdown[]`\n\n### May 26, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `description`, `iin`, and `issuer` on `PaymentMethod.card_present` and `PaymentMethod.interac_present`\n\n### May 23, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `zip_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `zip` on `Charge.payment_method_details`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod#update`, `PaymentMethod`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Add support for new value `zip` on enums `Checkout.Session#create.payment_method_types[]` and `PaymentMethod#create.type`\n*   Add support for new value `zip` on enums `Customer#list_payment_methods.type` and `PaymentMethod#list.type`\n*   Add support for new value `zip` on enums `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for new value `zip` on enum `PaymentMethod.type`\n\n### May 22, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `Invoice.last_finalization_error.code`, `PaymentIntent.last_payment_error.code`, `SetupAttempt.setup_error.code`, `SetupIntent.last_setup_error.code`, and `StripeError.code` from `string` to `enum`\n\n### May 18, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `mandate_options` on `PaymentIntent#confirm.payment_method_options.blik`, `PaymentIntent#create.payment_method_options.blik`, `PaymentIntent#update.payment_method_options.blik`, `PaymentIntent.payment_method_options.blik`, `SetupIntent#confirm.payment_method_options.blik`, `SetupIntent#create.payment_method_options.blik`, and `SetupIntent#update.payment_method_options.blik`\n*   Add support for `mandate_options` on `PaymentIntent#confirm.payment_method_options.blik`, `PaymentIntent#create.payment_method_options.blik`, `PaymentIntent#update.payment_method_options.blik`, `PaymentIntent.payment_method_options.blik`, `SetupIntent#confirm.payment_method_options.blik`, `SetupIntent#create.payment_method_options.blik`, and `SetupIntent#update.payment_method_options.blik`\n\n### May 16, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `amusement_tax` and `communications_tax` on enums `TaxRate#create.tax_type`, `TaxRate#update.tax_type`, and `TaxRate.tax_type`\n\n### May 15, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `subscription_update_confirm` and `subscription_update` on `BillingPortal.Session#create.flow_data` and `BillingPortal.Session.flow`\n*   Add support for new values `subscription_update_confirm` and `subscription_update` on enums `BillingPortal.Session#create.flow_data.type` and `BillingPortal.Session.flow.type`\n*   Add support for `link` on `Charge.payment_method_details.card.wallet` and `PaymentMethod.card.wallet`\n\n### May 12, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `buyer_id` and `cashtag` on `Charge.payment_method_details.cashapp` and `PaymentMethod.cashapp`\n\n### May 11, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `taxability_reason` and `taxable_amount` on `Checkout.Session.shipping_cost.taxes[]`, `Checkout.Session.total_details.breakdown.taxes[]`, `CreditNote.shipping_cost.taxes[]`, `CreditNote.tax_amounts[]`, `Invoice.shipping_cost.taxes[]`, `Invoice.total_tax_amounts[]`, `LineItem.taxes[]`, `Quote.computed.recurring.total_details.breakdown.taxes[]`, `Quote.computed.upfront.total_details.breakdown.taxes[]`, and `Quote.total_details.breakdown.taxes[]`\n*   Add support for `effective_percentage` on `TaxRate`\n\n### May 10, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `brand`, `cardholder_name`, `country`, `exp_month`, `exp_year`, `fingerprint`, `funding`, `last4`, `networks`, and `read_method` on `PaymentMethod.card_present` and `PaymentMethod.interac_present`\n*   Add support for `preferred_locales` on `PaymentMethod.interac_present`\n*   Add support for `network_token` on `Charge.payment_method_details.card`\n\n### May 9, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `paypal` on `Charge.payment_method_details`, `Checkout.Session#create.payment_method_options`, `Mandate.payment_method_details`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod`, `SetupAttempt.payment_method_details`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#confirm.payment_method_options`, `SetupIntent#create.payment_method_data`, `SetupIntent#create.payment_method_options`, `SetupIntent#update.payment_method_data`, `SetupIntent#update.payment_method_options`, and `SetupIntent.payment_method_options`\n*   Add support for new value `paypal` on enums `Checkout.Session#create.payment_method_types[]` and `PaymentMethod#create.type`\n*   Add support for new value `paypal` on enums `Customer#list_payment_methods.type` and `PaymentMethod#list.type`\n*   Add support for new value `paypal` on enums `Invoice#create.payment_settings.payment_method_types[]`, `Invoice#update.payment_settings.payment_method_types[]`, `Invoice.payment_settings.payment_method_types[]`, `Subscription#create.payment_settings.payment_method_types[]`, `Subscription#update.payment_settings.payment_method_types[]`, and `Subscription.payment_settings.payment_method_types[]`\n*   Add support for new value `paypal` on enums `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for new value `paypal` on enums `PaymentLink#create.payment_method_types[]`, `PaymentLink#update.payment_method_types[]`, and `PaymentLink.payment_method_types[]`\n*   Add support for new value `paypal` on enum `PaymentMethod.type`\n\n### May 8, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `eftpos_au` on enums `PaymentIntent#confirm.payment_method_options.card.network`, `PaymentIntent#create.payment_method_options.card.network`, `PaymentIntent#update.payment_method_options.card.network`, `PaymentIntent.payment_method_options.card.network`, `SetupIntent#confirm.payment_method_options.card.network`, `SetupIntent#create.payment_method_options.card.network`, `SetupIntent#update.payment_method_options.card.network`, `SetupIntent.payment_method_options.card.network`, `Subscription#create.payment_settings.payment_method_options.card.network`, `Subscription#update.payment_settings.payment_method_options.card.network`, and `Subscription.payment_settings.payment_method_options.card.network`\n\n### May 2, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `link` on `Checkout.Session#create.payment_method_options` and `Checkout.Session.payment_method_options`\n\n### May 1, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `brand`, `country`, `description`, `exp_month`, `exp_year`, `fingerprint`, `funding`, `iin`, `issuer`, `last4`, `network`, and `wallet` on `SetupAttempt.payment_method_details.card`\n\n### April 27, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `tax_breakdown` on `Tax.Calculation.shipping_cost` and `Tax.Transaction.shipping_cost`\n\n### April 26, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `billing_cycle_anchor` and `proration_behavior` on `Checkout.Session#create.subscription_data`\n\n### April 24, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `terminal_id` on `Issuing.Authorization.merchant_data` and `Issuing.Transaction.merchant_data`\n\n### April 22, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `checks` on `SetupAttempt.payment_method_details.card`\n\n### April 21, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `metadata` on `PaymentIntent#capture`\n\n### April 17, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Identity.VerificationReport.options` and `Identity.VerificationReport.type` to be optional\n*   Change type of `Identity.VerificationSession.options` from `GelatoVerificationSessionOptions` to `nullable(GelatoVerificationSessionOptions)`\n*   Change type of `Identity.VerificationSession.type` from `enum('document'|'id_number')` to `nullable(enum('document'|'id_number'))`\n\n### April 13, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Checkout.Session.currency_conversion` to be required\n*   Add support for new value `REVOIE23` on enums `Charge.payment_method_details.ideal.bic`, `PaymentMethod.ideal.bic`, and `SetupAttempt.payment_method_details.ideal.bic`\n\n### April 6, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `link` on enums `Charge.payment_method_details.card.wallet.type` and `PaymentMethod.card.wallet.type`\n*   Change `Issuing.Cardholder#create.type` to be optional\n*   Add support for `status_details` on `PaymentMethod.us_bank_account`\n\n### March 31, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `country` on `PaymentMethod.link`\n\n### March 30, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `create` method on resource `Tax.Transaction`\n*   Add support for `export_license_id` and `export_purpose_code` on `Account#create.company`, `Account#update.company`, `Account.company`, and `Token#create.account.company`\n\n### March 29, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `amount_tip` on `Terminal.Reader.testHelpers#present_payment_method`\n\n### March 27, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for value `deleted` from enum `Invoice.status`\n\n### March 23, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resources `Tax.CalculationLineItem`, `Tax.Calculation`, `Tax.TransactionLineItem`, and `Tax.Transaction`\n*   Add support for `create` and `list_line_items` methods on resource `Calculation`\n*   Add support for `create_from_calculation`, `create_reversal`, `create`, `list_line_items`, and `retrieve` methods on resource `Transaction`\n\n### March 22, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `currency_conversion` on `Checkout.Session`\n\n### March 20, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `link` on enums `PaymentLink#create.payment_method_types[]`, `PaymentLink#update.payment_method_types[]`, and `PaymentLink.payment_method_types[]`\n\n### March 17, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `automatic_payment_methods` on `SetupIntent#create` and `SetupIntent`\n*   Add support for new value `link` on enum `Checkout.Session#create.payment_method_types[]`\n\n### March 16, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `country` on `Charge.payment_method_details.link`\n*   Add support for new value `automatic_async` on enums `Checkout.Session#create.payment_intent_data.capture_method`, `PaymentIntent#confirm.capture_method`, `PaymentIntent#create.capture_method`, `PaymentIntent#update.capture_method`, `PaymentIntent.capture_method`, `PaymentLink#create.payment_intent_data.capture_method`, and `PaymentLink.payment_intent_data.capture_method`\n*   Add support for `future_requirements` and `requirements` on `BankAccount`\n\n### March 15, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `preferred_locale` on `PaymentIntent#confirm.payment_method_options.affirm`, `PaymentIntent#create.payment_method_options.affirm`, `PaymentIntent#update.payment_method_options.affirm`, and `PaymentIntent.payment_method_options.affirm`\n\n### March 14, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `cashapp_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `cashapp` on `Charge.payment_method_details`, `Mandate.payment_method_details`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod#update`, `PaymentMethod`, `SetupAttempt.payment_method_details`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Add support for new value `cashapp` on enums `Customer#list_payment_methods.type` and `PaymentMethod#list.type`\n*   Add support for new value `cashapp` on enums `Invoice#create.payment_settings.payment_method_types[]`, `Invoice#update.payment_settings.payment_method_types[]`, `Invoice.payment_settings.payment_method_types[]`, `Subscription#create.payment_settings.payment_method_types[]`, `Subscription#update.payment_settings.payment_method_types[]`, and `Subscription.payment_settings.payment_method_types[]`\n*   Add support for new value `cashapp` on enums `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for `cashapp_handle_redirect_or_display_qr_code` on `PaymentIntent.next_action` and `SetupIntent.next_action`\n*   Add support for new value `cashapp` on enum `PaymentMethod#create.type`\n*   Add support for new value `cashapp` on enum `PaymentMethod.type`\n\n### March 10, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `cashapp` on `Checkout.Session#create.payment_method_options` and `Checkout.Session.payment_method_options`\n*   Add support for new value `cashapp` on enum `Checkout.Session#create.payment_method_types[]`\n*   Add support for new value `cashapp` on enums `PaymentLink#create.payment_method_types[]`, `PaymentLink#update.payment_method_types[]`, and `PaymentLink.payment_method_types[]`\n\n### March 9, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `payout.reconciliation_completed` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### March 7, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `card_issuing` on `Issuing.Cardholder#create.individual` and `Issuing.Cardholder#update.individual`\n*   Add support for new value `requirements.past_due` on enum `Issuing.Cardholder.requirements.disabled_reason`\n*   Add support for new values `individual.card_issuing.user_terms_acceptance.date` and `individual.card_issuing.user_terms_acceptance.ip` on enum `Issuing.Cardholder.requirements.past_due[]`\n\n### March 3, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `cancellation_details` on `Subscription#cancel`, `Subscription#update`, and `Subscription`\n\n### March 2, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `lease_tax` on enums `TaxRate#create.tax_type`, `TaxRate#update.tax_type`, and `TaxRate.tax_type`\n*   Add support for `reconciliation_status` on `Payout`\n\n### March 1, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `electric_vehicle_charging`, `emergency_services_gcas_visa_use_only`, `government_licensed_horse_dog_racing_us_region_only`, `government_licensed_online_casions_online_gambling_us_region_only`, `government_owned_lotteries_non_us_region`, `government_owned_lotteries_us_region_only`, and `marketplaces` on enums `Issuing.Card#create.spending_controls.allowed_categories[]`, `Issuing.Card#create.spending_controls.blocked_categories[]`, `Issuing.Card#create.spending_controls.spending_limits[].categories[]`, `Issuing.Card#update.spending_controls.allowed_categories[]`, `Issuing.Card#update.spending_controls.blocked_categories[]`, `Issuing.Card#update.spending_controls.spending_limits[].categories[]`, `Issuing.Card.spending_controls.allowed_categories[]`, `Issuing.Card.spending_controls.blocked_categories[]`, `Issuing.Card.spending_controls.spending_limits[].categories[]`, `Issuing.Cardholder#create.spending_controls.allowed_categories[]`, `Issuing.Cardholder#create.spending_controls.blocked_categories[]`, `Issuing.Cardholder#create.spending_controls.spending_limits[].categories[]`, `Issuing.Cardholder#update.spending_controls.allowed_categories[]`, `Issuing.Cardholder#update.spending_controls.blocked_categories[]`, `Issuing.Cardholder#update.spending_controls.spending_limits[].categories[]`, `Issuing.Cardholder.spending_controls.allowed_categories[]`, `Issuing.Cardholder.spending_controls.blocked_categories[]`, and `Issuing.Cardholder.spending_controls.spending_limits[].categories[]`\n\n### February 22, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `igst` on enums `TaxRate#create.tax_type`, `TaxRate#update.tax_type`, and `TaxRate.tax_type`\n\n### February 21, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `yoursafe` on enums `Charge.payment_method_details.ideal.bank`, `PaymentIntent#confirm.payment_method_data.ideal.bank`, `PaymentIntent#create.payment_method_data.ideal.bank`, `PaymentIntent#update.payment_method_data.ideal.bank`, `PaymentMethod#create.ideal.bank`, `PaymentMethod.ideal.bank`, `SetupAttempt.payment_method_details.ideal.bank`, `SetupIntent#confirm.payment_method_data.ideal.bank`, `SetupIntent#create.payment_method_data.ideal.bank`, and `SetupIntent#update.payment_method_data.ideal.bank`\n*   Add support for new value `BITSNL2A` on enums `Charge.payment_method_details.ideal.bic`, `PaymentMethod.ideal.bic`, and `SetupAttempt.payment_method_details.ideal.bic`\n\n### February 16, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `name` on enums `BillingPortal.Configuration#create.features.customer_update.allowed_updates[]`, `BillingPortal.Configuration#update.features.customer_update.allowed_updates[]`, and `BillingPortal.Configuration.features.customer_update.allowed_updates[]`\n*   Add support for `refund_payment` method on resource `Terminal.Reader`\n*   Add support for `custom_fields` on `Checkout.Session#create`, `Checkout.Session`, `PaymentLink#create`, `PaymentLink#update`, and `PaymentLink`\n*   Add support for `interac_present` on `Terminal.Reader.testHelpers#present_payment_method`\n*   Change type of `Terminal.Reader.testHelpers#present_payment_method.type` from `literal('card_present')` to `enum('card_present'|'interac_present')`\n*   Add support for `refund_payment` on `Terminal.Reader.action`\n*   Add support for new value `refund_payment` on enum `Terminal.Reader.action.type`\n\n### February 13, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Subscription.trial_settings.end_behavior` and `Subscription.trial_settings` to be required\n\n### February 2, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `payment_link` on `Checkout.Session#list`\n*   Add support for `shipping_cost` on `CreditNote#create`, `CreditNote#preview_lines`, `CreditNote#preview`, `CreditNote`, `Invoice#create`, `Invoice#update`, and `Invoice`\n*   Add support for `amount_shipping` on `CreditNote` and `Invoice`\n*   Add support for `shipping_details` on `Invoice#create`, `Invoice#update`, and `Invoice`\n*   Change `PaymentLink.invoice_creation` to be required\n*   Add support for new value `America/Ciudad_Juarez` on enum `Reporting.ReportRun#create.parameters.timezone`\n\n### February 1, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `resume` method on resource `Subscription`\n*   Add support for `trial_settings` on `CheckoutSessionCreateParams.subscription_data`, `SubscriptionCreateParams`, `SubscriptionUpdateParams`, and `Subscription`\n*   Add support for `subscription_resume_at` on `InvoiceUpcomingLinesParams` and `InvoiceUpcomingParams`\n*   Change `IssuingCardholderCreateParams.individual.first_name`, `IssuingCardholderCreateParams.individual.last_name`, `IssuingCardholderUpdateParams.individual.first_name`, and `IssuingCardholderUpdateParams.individual.last_name` to be optional\n*   Change type of `Issuing.Cardholder.individual.first_name` and `Issuing.Cardholder.individual.last_name` from `string` to `string | null`\n*   Add support for `invoice_creation` on `PaymentLinkCreateParams`, `PaymentLinkUpdateParams`, and `PaymentLink`\n*   Add support for new value `paused` on enum `SubscriptionListParams.status`\n*   Add support for new value `paused` on enum `Subscription.status`\n*   Add support for new values `customer.subscription.paused` and `customer.subscription.resumed` on enums `WebhookEndpointCreateParams.enabled_events[]` and `WebhookEndpointUpdateParams.enabled_events[]`\n\n### January 26, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `BE` on enums `Checkout.Session.payment_method_options.customer_balance.bank_transfer.eu_bank_transfer.country`, `Invoice.payment_settings.payment_method_options.customer_balance.bank_transfer.eu_bank_transfer.country`, `PaymentIntent.payment_method_options.customer_balance.bank_transfer.eu_bank_transfer.country`, and `Subscription.payment_settings.payment_method_options.customer_balance.bank_transfer.eu_bank_transfer.country`\n*   Add support for new values `cs-CZ`, `el-GR`, `en-CZ`, and `en-GR` on enums `PaymentIntent#confirm.payment_method_options.klarna.preferred_locale`, `PaymentIntent#create.payment_method_options.klarna.preferred_locale`, and `PaymentIntent#update.payment_method_options.klarna.preferred_locale`\n\n### January 18, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `verification_session` on `EphemeralKey#create`\n*   Add support for new values `refund.created` and `refund.updated` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### January 5, 2023![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `card_issuing` on `Issuing.Cardholder.individual`\n\n### December 22, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `merchant_default` on enums `CashBalance#update.settings.reconciliation_mode`, `Customer#create.cash_balance.settings.reconciliation_mode`, and `Customer#update.cash_balance.settings.reconciliation_mode`\n*   Add support for `using_merchant_default` on `CashBalance.settings`\n*   Change `Checkout.Session#create.cancel_url` to be optional\n*   Change type of `Checkout.Session.cancel_url` from `string` to `nullable(string)`\n\n### December 15, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `invoice_overpaid` on enum `CustomerBalanceTransaction.type`\n\n### December 8, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Customer#list_payment_methods.type` and `PaymentMethod#list.type` to be optional\n\n### December 6, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `flow_data` on `BillingPortal.Session#create`\n*   Add support for `flow` on `BillingPortal.Session`\n*   Add support for `india_international_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `invoice_creation` on `Checkout.Session#create` and `Checkout.Session`\n*   Add support for `invoice` on `Checkout.Session`\n*   Add support for `metadata` on `SubscriptionSchedule#create.phases[].items[]`, `SubscriptionSchedule#update.phases[].items[]`, and `SubscriptionSchedule.phases[].items[]`\n\n### November 17, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `hosted_instructions_url` on `PaymentIntent.next_action.wechat_pay_display_qr_code`\n\n### November 16, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `custom_text` on `Checkout.Session#create`, `Checkout.Session`, `PaymentLink#create`, `PaymentLink#update`, and `PaymentLink`\n*   Add support for `hosted_instructions_url` on `PaymentIntent.next_action.paynow_display_qr_code`\n*   Remove support for resources `Order` and `Sku`\n*   Remove support for `cancel`, `create`, `list_line_items`, `list`, `reopen`, `retrieve`, `submit`, and `update` methods on resource `Order`\n*   Remove support for `create`, `delete`, `list`, `retrieve`, and `update` methods on resource `Sku`\n*   Change type of `Charge.refunds` from `apiList($Refund)` to `nullable(apiList($Refund))`\n*   Change `Charge.refunds` to be required\n*   Remove support for `amount`, `currency`, `description`, `images`, and `name` on `Checkout.Session#create.line_items[]`\n*   Remove support for `items` on `Checkout.Session#create.subscription_data`\n*   Remove support for `product` on `LineItem`\n*   Add support for `latest_charge` on `PaymentIntent`\n*   Remove support for `charges` on `PaymentIntent`\n*   Add support for new value `2022-11-15` on enum `WebhookEndpoint#create.api_version`\n\n### November 10, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `tos_shown_and_accepted` on `Checkout.Session#create.payment_method_options.paynow`\n\n### November 7, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `reason_message` on `Issuing.Authorization.request_history[]`\n*   Add support for new value `webhook_error` on enum `Issuing.Authorization.request_history[].reason`\n\n### November 1, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `eg_tin`, `ph_tin`, and `tr_tin` on enums `Checkout.Session.customer_details.tax_ids[].type`, `Invoice.customer_tax_ids[].type`, `Order.tax_details.tax_ids[].type`, and `TaxId.type`\n*   Add support for new values `eg_tin`, `ph_tin`, and `tr_tin` on enums `Customer#create.tax_id_data[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, `Order#create.tax_details.tax_ids[].type`, `Order#update.tax_details.tax_ids[].type`, and `TaxId#create.type`\n\n### October 31, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `on_behalf_of` on `Checkout.Session#create.subscription_data`, `Subscription#create`, `Subscription#update`, `SubscriptionSchedule#create.default_settings`, `SubscriptionSchedule#create.phases[]`, `SubscriptionSchedule#update.default_settings`, `SubscriptionSchedule#update.phases[]`, `SubscriptionSchedule.default_settings`, `SubscriptionSchedule.phases[]`, and `Subscription`\n*   Add support for `tax_behavior` and `tax_code` on `Invoice#upcoming.invoice_items[]`, `Invoice#upcomingLines.invoice_items[]`, `InvoiceItem#create`, and `InvoiceItem#update`\n\n### October 20, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `jp_trn` and `ke_pin` on enums `Checkout.Session.customer_details.tax_ids[].type`, `Invoice.customer_tax_ids[].type`, `Order.tax_details.tax_ids[].type`, and `TaxId.type`\n*   Add support for new values `jp_trn` and `ke_pin` on enums `Customer#create.tax_id_data[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, `Order#create.tax_details.tax_ids[].type`, `Order#update.tax_details.tax_ids[].type`, and `TaxId#create.type`\n*   Add support for `tipping` on `Terminal.Reader#process_payment_intent.process_config` and `Terminal.Reader.action.process_payment_intent.process_config`\n\n### October 13, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `invalid_representative_country` and `verification_failed_residential_address` on enums `Account.future_requirements.errors[].code`, `Account.requirements.errors[].code`, `Capability.future_requirements.errors[].code`, `Capability.requirements.errors[].code`, `Person.future_requirements.errors[].code`, and `Person.requirements.errors[].code`\n*   Add support for `request_log_url` on `Invoice.last_finalization_error`, `PaymentIntent.last_payment_error`, `SetupAttempt.setup_error`, `SetupIntent.last_setup_error`, `StripeErrorResponse.error`, and `StripeError`\n*   Add support for `network_data` on `Issuing.Authorization`\n\n### October 4, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `invalid_dob_age_under_18` on enums `Account.future_requirements.errors[].code`, `Account.requirements.errors[].code`, `Capability.future_requirements.errors[].code`, `Capability.requirements.errors[].code`, `Person.future_requirements.errors[].code`, and `Person.requirements.errors[].code`\n*   Add support for new values `America/Nuuk`, `Europe/Kyiv`, and `Pacific/Kanton` on enum `Reporting.ReportRun#create.parameters.timezone`\n*   Add support for `klarna` on `SetupAttempt.payment_method_details`\n\n### September 28, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `Charge.payment_method_details.card_present.incremental_authorization_supported` and `Charge.payment_method_details.card_present.overcapture_supported` from `nullable(boolean)` to `boolean`\n*   Add support for `created` on `Checkout.Session`\n*   Add support for `setup_future_usage` on `PaymentIntent#confirm.payment_method_options.pix`, `PaymentIntent#create.payment_method_options.pix`, `PaymentIntent#update.payment_method_options.pix`, and `PaymentIntent.payment_method_options.pix`\n\n### September 22, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `statement_descriptor` on `PaymentIntent#increment_authorization`\n\n### September 20, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `terms_of_service` on `Checkout.Session#create.consent_collection`, `Checkout.Session.consent_collection`, `Checkout.Session.consent`, `PaymentLink#create.consent_collection`, and `PaymentLink.consent_collection`\n*   Remove support for `plan` on `Checkout.Session#create.payment_method_options.card.installments`\n*   Change `SubscriptionSchedule.phases[].currency` to be required\n\n### September 15, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `amount` on `Issuing.Dispute#create` and `Issuing.Dispute#update`\n\n### September 14, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `pix` on `Charge.payment_method_details`, `Checkout.Session#create.payment_method_options`, `Checkout.Session.payment_method_options`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Add support for new value `pix` on enum `Checkout.Session#create.payment_method_types[]`\n*   Add support for new value `pix` on enums `Customer#list_payment_methods.type` and `PaymentMethod#list.type`\n*   Add support for `from_invoice` on `Invoice#create` and `Invoice`\n*   Add support for `latest_revision` on `Invoice`\n*   Add support for new value `pix` on enums `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for `pix_display_qr_code` on `PaymentIntent.next_action`\n*   Add support for new value `pix` on enums `PaymentLink#create.payment_method_types[]`, `PaymentLink#update.payment_method_types[]`, and `PaymentLink.payment_method_types[]`\n*   Add support for new value `pix` on enum `PaymentMethod#create.type`\n*   Add support for new value `pix` on enum `PaymentMethod.type`\n*   Add support for `created` on `Treasury.DebitReversal`\n\n### September 8, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `require_signature` on `Issuing.Card#create.shipping` and `Issuing.Card.shipping`\n*   Add support for `proration_behavior=always_invoice` when creating a Subscription Schedule.\n\n### September 6, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `terminal_reader_splashscreen` on enums `File#list.purpose` and `File.purpose`\n\n### August 31, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `de-CH`, `en-CH`, `en-PL`, `en-PT`, `fr-CH`, `it-CH`, `pl-PL`, and `pt-PT` on enums `Order#create.payment.settings.payment_method_options.klarna.preferred_locale`, `Order#update.payment.settings.payment_method_options.klarna.preferred_locale`, `PaymentIntent#confirm.payment_method_options.klarna.preferred_locale`, `PaymentIntent#create.payment_method_options.klarna.preferred_locale`, and `PaymentIntent#update.payment_method_options.klarna.preferred_locale`\n*   Add support for `description` on `PaymentLink#create.subscription_data` and `PaymentLink.subscription_data`\n\n### August 26, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Account.company.name`, `Charge.refunds`, `PaymentIntent.charges`, `Product.caption`, `Product.statement_descriptor`, `Product.unit_label`, `Terminal.Configuration.tipping.aud.fixed_amounts`, `Terminal.Configuration.tipping.aud.percentages`, `Terminal.Configuration.tipping.cad.fixed_amounts`, `Terminal.Configuration.tipping.cad.percentages`, `Terminal.Configuration.tipping.chf.fixed_amounts`, `Terminal.Configuration.tipping.chf.percentages`, `Terminal.Configuration.tipping.czk.fixed_amounts`, `Terminal.Configuration.tipping.czk.percentages`, `Terminal.Configuration.tipping.dkk.fixed_amounts`, `Terminal.Configuration.tipping.dkk.percentages`, `Terminal.Configuration.tipping.eur.fixed_amounts`, `Terminal.Configuration.tipping.eur.percentages`, `Terminal.Configuration.tipping.gbp.fixed_amounts`, `Terminal.Configuration.tipping.gbp.percentages`, `Terminal.Configuration.tipping.hkd.fixed_amounts`, `Terminal.Configuration.tipping.hkd.percentages`, `Terminal.Configuration.tipping.myr.fixed_amounts`, `Terminal.Configuration.tipping.myr.percentages`, `Terminal.Configuration.tipping.nok.fixed_amounts`, `Terminal.Configuration.tipping.nok.percentages`, `Terminal.Configuration.tipping.nzd.fixed_amounts`, `Terminal.Configuration.tipping.nzd.percentages`, `Terminal.Configuration.tipping.sek.fixed_amounts`, `Terminal.Configuration.tipping.sek.percentages`, `Terminal.Configuration.tipping.sgd.fixed_amounts`, `Terminal.Configuration.tipping.sgd.percentages`, `Terminal.Configuration.tipping.usd.fixed_amounts`, `Terminal.Configuration.tipping.usd.percentages`, `Treasury.FinancialAccount.active_features`, `Treasury.FinancialAccount.pending_features`, `Treasury.FinancialAccount.platform_restrictions`, and `Treasury.FinancialAccount.restricted_features` to be optional\n*   Add support for `login_page` on `BillingPortal.Configuration#create`, `BillingPortal.Configuration#update`, and `BillingPortal.Configuration`\n*   Add support for new value `deutsche_bank_ag` on enums `Charge.payment_method_details.eps.bank`, `PaymentIntent#confirm.payment_method_data.eps.bank`, `PaymentIntent#create.payment_method_data.eps.bank`, `PaymentIntent#update.payment_method_data.eps.bank`, `PaymentMethod#create.eps.bank`, `PaymentMethod.eps.bank`, `SetupIntent#confirm.payment_method_data.eps.bank`, `SetupIntent#create.payment_method_data.eps.bank`, and `SetupIntent#update.payment_method_data.eps.bank`\n*   Add support for `description` on `Quote#create.subscription_data`, `Quote#update.subscription_data`, `Quote.subscription_data`, `SubscriptionSchedule#create.default_settings`, `SubscriptionSchedule#create.phases[]`, `SubscriptionSchedule#update.default_settings`, `SubscriptionSchedule#update.phases[]`, `SubscriptionSchedule.default_settings`, and `SubscriptionSchedule.phases[]`\n\n### August 24, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `customs` and `phone_number` on `Issuing.Card#create.shipping` and `Issuing.Card.shipping`\n\n### August 23, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Terminal.Reader.action` to be required\n*   Change `Treasury.OutboundTransfer#create.destination_payment_method` to be optional\n*   Change type of `Treasury.OutboundTransfer.destination_payment_method` from `string` to `nullable(string)`\n\n### August 18, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `CustomerCashBalanceTransaction`\n*   Remove support for value `paypal` from enums `Order#create.payment.settings.payment_method_types[]`, `Order#update.payment.settings.payment_method_types[]`, and `Order.payment.settings.payment_method_types[]`\n*   Add support for `network` on `SetupIntent#confirm.payment_method_options.card`, `SetupIntent#create.payment_method_options.card`, `SetupIntent#update.payment_method_options.card`, `Subscription#create.payment_settings.payment_method_options.card`, `Subscription#update.payment_settings.payment_method_options.card`, and `Subscription.payment_settings.payment_method_options.card`\n*   Add support for new value `customer_cash_balance_transaction.created` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### August 11, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `payment_method_collection` on `Checkout.Session#create`, `Checkout.Session`, `PaymentLink#create`, `PaymentLink#update`, and `PaymentLink`\n\n### August 9, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `process_config` on `Terminal.Reader.action.process_payment_intent`\n\n### August 5, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `expires_at` on `Apps.Secret#create` and `Apps.Secret`\n\n### August 1, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for deprecated resources `AlipayAccount`, `BitcoinReceiver`, `BitcoinTransaction`, `IssuerFraudRecord`, `Recipient`, and `ThreeDSecure`\n*   Remove support for deprecated values `order.payment_failed`, `order.payment_succeeded`, `order.updated`, `order_return.created`, `transfer.failed`, and `transfer.paid` from enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n*   Remove support for `default_currency` on `Customer`\n*   Remove support for `list` method on resource `LineItem`\n*   Remove support for `recipient` on `Card`\n*   Remove support for `redirect_url` on `LoginLink#create`\n*   Remove support for `shipping_rate` and `shipping` on `Checkout.Session`\n*   Remove support for `trial_end` on `Customer#update`\n*   Add support for `list_line_items` method on resource `Checkout.Session`\n*   Add support for `shipping_cost` and `shipping_details` on `Checkout.Session`\n*   Add support for `validate` on `Customer#create`, `Customer#update`, and `PaymentSource#create`\n*   Add support for new value `2022-08-01` on enum `WebhookEndpoint#create.api_version`\n*   Add support for new value `design_rejected` on enum `Issuing.Card.cancellation_reason`\n*   Add support for new value `invalid_tos_acceptance` on enums `Account.future_requirements.errors[].code`, `Account.requirements.errors[].code`, `Capability.future_requirements.errors[].code`, `Capability.requirements.errors[].code`, `Person.future_requirements.errors[].code`, and `Person.requirements.errors[].code`\n\n### July 26, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `exempted` on enums `Charge.payment_method_details.card.three_d_secure.result` and `SetupAttempt.payment_method_details.card.three_d_secure.result`\n*   Add support for `customer_balance` on `Checkout.Session#create.payment_method_options` and `Checkout.Session.payment_method_options`\n*   Add support for new value `customer_balance` on enum `Checkout.Session#create.payment_method_types[]`\n*   Add support for new values `en-CA` and `fr-CA` on enums `Order#create.payment.settings.payment_method_options.klarna.preferred_locale`, `Order#update.payment.settings.payment_method_options.klarna.preferred_locale`, `PaymentIntent#confirm.payment_method_options.klarna.preferred_locale`, `PaymentIntent#create.payment_method_options.klarna.preferred_locale`, and `PaymentIntent#update.payment_method_options.klarna.preferred_locale`\n\n### July 22, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for resource `InstallmentsOptions`\n*   Add support for `installments` on `Invoice.payment_settings.payment_method_options.card`\n*   Add support for new resource `InstallmentsOptions`\n*   Add support for `installments` on `Checkout.Session#create.payment_method_options.card`, `Checkout.Session.payment_method_options.card`, `Invoice#create.payment_settings.payment_method_options.card`, `Invoice#update.payment_settings.payment_method_options.card`, and `PaymentIntentTypeSpecificPaymentMethodOptionsClient`\n*   Add support for `product_data` on `Order#create.line_items[]` and `Order#update.line_items[]`\n\n### July 21, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `default_mandate` on `Invoice#create.payment_settings`, `Invoice#update.payment_settings`, and `Invoice.payment_settings`\n*   Add support for `mandate` on `Invoice#pay`\n\n### July 20, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `default_currency` and `invoice_credit_balance` on `Customer`\n*   Add support for `currency` on `Invoice#create`\n\n### July 18, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `blik_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `blik` on `Charge.payment_method_details`, `Mandate.payment_method_details`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod#update`, `PaymentMethod`, `SetupAttempt.payment_method_details`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#confirm.payment_method_options`, `SetupIntent#create.payment_method_data`, `SetupIntent#create.payment_method_options`, `SetupIntent#update.payment_method_data`, `SetupIntent#update.payment_method_options`, and `SetupIntent.payment_method_options`\n*   Change type of `Checkout.Session#create.consent_collection.promotions`, `Checkout.Session.consent_collection.promotions`, `PaymentLink#create.consent_collection.promotions`, and `PaymentLink.consent_collection.promotions` from `literal('auto')` to `enum('auto'|'none')`\n*   Add support for new value `blik` on enum `Checkout.Session#create.payment_method_types[]`\n*   Add support for new value `blik` on enums `Customer#list_payment_methods.type` and `PaymentMethod#list.type`\n*   Add support for new value `blik` on enums `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for new value `blik` on enums `PaymentLink#create.payment_method_types[]`, `PaymentLink#update.payment_method_types[]`, and `PaymentLink.payment_method_types[]`\n*   Add support for new value `blik` on enum `PaymentMethod#create.type`\n*   Add support for new value `blik` on enum `PaymentMethod.type`\n\n### July 12, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `customer_details` on `Checkout.Session#list`\n*   Change `LineItem.amount_discount` and `LineItem.amount_tax` to be required\n*   Change type of `Transfer.source_type` from `nullable(string)` to `string`\n*   Change `Transfer.source_type` to be optional\n\n### July 7, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `currency` on `Checkout.Session#create`, `Invoice#upcomingLines`, `Invoice#upcoming`, `PaymentLink#create`, `Subscription#create`, `SubscriptionSchedule#create.phases[]`, `SubscriptionSchedule#update.phases[]`, `SubscriptionSchedule.phases[]`, and `Subscription`\n*   Add support for `currency_options` on `Checkout.Session#create.shipping_options[].shipping_rate_data.fixed_amount`, `Coupon#create`, `Coupon#update`, `Coupon`, `Order#create.shipping_cost.shipping_rate_data.fixed_amount`, `Order#update.shipping_cost.shipping_rate_data.fixed_amount`, `Price#create`, `Price#update`, `Price`, `Product#create.default_price_data`, `PromotionCode#create.restrictions`, `PromotionCode.restrictions`, `ShippingRate#create.fixed_amount`, and `ShippingRate.fixed_amount`\n*   Add support for `restrictions` on `PromotionCode#update`\n*   Add support for `fixed_amount` and `tax_behavior` on `ShippingRate#update`\n\n### July 6, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `customer` on `Checkout.Session#list` and `Refund#create`\n*   Add support for `currency` and `origin` on `Refund#create`\n*   Add support for new values `financial_connections.account.created`, `financial_connections.account.deactivated`, `financial_connections.account.disconnected`, `financial_connections.account.reactivated`, and `financial_connections.account.refreshed_balance` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### June 29, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `deliver_card`, `fail_card`, `return_card`, and `ship_card` test helper methods on resource `Issuing.Card`\n*   Change type of `PaymentLink#create.payment_method_types[]`, `PaymentLink#update.payment_method_types[]`, and `PaymentLink.payment_method_types[]` from `literal('card')` to `enum`\n*   Add support for `hosted_regulatory_receipt_url` on `Treasury.ReceivedCredit` and `Treasury.ReceivedDebit`\n*   Remove support for value `treasury.received_credit.reversed` from enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### June 23, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `capture_method` on `PaymentIntent#confirm` and `PaymentIntent#update`\n*   Change `Price.custom_unit_amount` to be required\n*   Add support for `reversal_details` on `Treasury.ReceivedCredit` and `Treasury.ReceivedDebit`\n*   Add support for `debit_reversal` on `Treasury.ReceivedDebit.linked_flows`\n\n### June 21, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `promptpay_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `promptpay` on `Charge.payment_method_details`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Add support for new value `promptpay` on enum `Checkout.Session#create.payment_method_types[]`\n*   Add support for `subtotal_excluding_tax` on `CreditNote` and `Invoice`\n*   Add support for `amount_excluding_tax` and `unit_amount_excluding_tax` on `CreditNoteLineItem` and `InvoiceLineItem`\n*   Add support for new value `promptpay` on enums `Customer#list_payment_methods.type` and `PaymentMethod#list.type`\n*   Add support for `rendering_options` on `Invoice#create` and `Invoice#update`\n*   Add support for new value `promptpay` on enums `Invoice#create.payment_settings.payment_method_types[]`, `Invoice#update.payment_settings.payment_method_types[]`, `Invoice.payment_settings.payment_method_types[]`, `Subscription#create.payment_settings.payment_method_types[]`, `Subscription#update.payment_settings.payment_method_types[]`, and `Subscription.payment_settings.payment_method_types[]`\n*   Add support for `total_excluding_tax` on `Invoice`\n*   Add support for `automatic_payment_methods` on `Order.payment.settings`\n*   Add support for new value `promptpay` on enums `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for `promptpay_display_qr_code` on `PaymentIntent.next_action`\n*   Add support for new value `promptpay` on enum `PaymentMethod#create.type`\n*   Add support for new value `promptpay` on enum `PaymentMethod.type`\n\n### June 17, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `fund_cash_balance` test helper method on resource `Customer`\n*   Remove support for `fund_cash_balance` test helper method on resource `CustomerBalanceTransaction`\n\n### June 16, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `list_funding_instructions` method on resource `Customer`\n\n### June 7, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `affirm`, `afterpay_clearpay`, `au_becs_debit`, `bacs_debit`, `bancontact`, `eps`, `fpx`, `giropay`, `grabpay`, `ideal`, `klarna`, `p24`, `paynow`, `sepa_debit`, and `sofort` on `Checkout.Session#create.payment_method_options`\n*   Add support for `card` on `Checkout.Session#create.payment_method_options` and `Checkout.Session.payment_method_options`\n*   Add support for `setup_future_usage` on `Checkout.Session#create.payment_method_options.acss_debit`, `Checkout.Session#create.payment_method_options.alipay`, `Checkout.Session#create.payment_method_options.boleto`, `Checkout.Session#create.payment_method_options.konbini`, `Checkout.Session#create.payment_method_options.oxxo`, `Checkout.Session#create.payment_method_options.us_bank_account`, `Checkout.Session#create.payment_method_options.wechat_pay`, `Checkout.Session.payment_method_options.acss_debit`, `Checkout.Session.payment_method_options.affirm`, `Checkout.Session.payment_method_options.afterpay_clearpay`, `Checkout.Session.payment_method_options.alipay`, `Checkout.Session.payment_method_options.au_becs_debit`, `Checkout.Session.payment_method_options.bacs_debit`, `Checkout.Session.payment_method_options.bancontact`, `Checkout.Session.payment_method_options.boleto`, `Checkout.Session.payment_method_options.eps`, `Checkout.Session.payment_method_options.fpx`, `Checkout.Session.payment_method_options.giropay`, `Checkout.Session.payment_method_options.grabpay`, `Checkout.Session.payment_method_options.ideal`, `Checkout.Session.payment_method_options.klarna`, `Checkout.Session.payment_method_options.konbini`, `Checkout.Session.payment_method_options.oxxo`, `Checkout.Session.payment_method_options.p24`, `Checkout.Session.payment_method_options.paynow`, `Checkout.Session.payment_method_options.sepa_debit`, `Checkout.Session.payment_method_options.sofort`, and `Checkout.Session.payment_method_options.us_bank_account`\n*   Change `PaymentMethod.us_bank_account.networks` and `SetupIntent.flow_directions` to be required\n*   Add support for `attach_to_self` on `SetupAttempt`, `SetupIntent#create`, `SetupIntent#list`, and `SetupIntent#update`\n*   Add support for `flow_directions` on `SetupAttempt`, `SetupIntent#create`, and `SetupIntent#update`\n\n### June 6, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `affirm`, `bancontact`, `ideal`, `p24`, and `sofort` on `Checkout.Session.payment_method_options`\n\n### June 1, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `radar_options` on `Charge#create`, `Charge`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create`, `PaymentIntent#update.payment_method_data`, `PaymentMethod#create`, `PaymentMethod`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Add support for `account_holder_name`, `account_number`, `account_type`, `bank_code`, `bank_name`, `branch_code`, and `branch_name` on `FundingInstructions.bank_transfer.financial_addresses[].zengin` and `PaymentIntent.next_action.display_bank_transfer_instructions.financial_addresses[].zengin`\n*   Add support for new values `en-AU` and `en-NZ` on enums `Order#create.payment.settings.payment_method_options.klarna.preferred_locale`, `Order#update.payment.settings.payment_method_options.klarna.preferred_locale`, `PaymentIntent#confirm.payment_method_options.klarna.preferred_locale`, `PaymentIntent#create.payment_method_options.klarna.preferred_locale`, and `PaymentIntent#update.payment_method_options.klarna.preferred_locale`\n*   Change type of `Order.payment.settings.payment_method_options.customer_balance.bank_transfer.type` and `PaymentIntent.payment_method_options.customer_balance.bank_transfer.type` from `enum` to `literal('jp_bank_transfer')`\n*   Change `PaymentIntent.next_action.display_bank_transfer_instructions.hosted_instructions_url` to be required\n*   Add support for `network` on `SetupIntent.payment_method_options.card`\n*   Add support for new value `simulated_wisepos_e` on enums `Terminal.Reader#list.device_type` and `Terminal.Reader.device_type`\n\n### May 26, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `affirm_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `id_number_secondary` on `Account#create.individual`, `Account#update.individual`, `Person#create`, `Person#update`, `Token#create.account.individual`, and `Token#create.person`\n*   Add support for new value `affirm` on enum `Checkout.Session#create.payment_method_types[]`\n*   Add support for `hosted_instructions_url` on `PaymentIntent.next_action.display_bank_transfer_instructions`\n*   Add support for `id_number_secondary_provided` on `Person`\n*   Add support for `card_issuing` on `Treasury.FinancialAccount#create.features`, `Treasury.FinancialAccount#update.features`, and `Treasury.FinancialAccount#update_features`\n\n### May 25, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `persons` method on resource `Account`\n*   Add support for `balance_transactions` method on resource `Customer`\n*   Add support for `link_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n\n### May 23, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `treasury` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for new resource `Apps.Secret`\n*   Add support for `affirm` on `Charge.payment_method_details`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod#update`, `PaymentMethod`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#create.payment_method_data`, and `SetupIntent#update.payment_method_data`\n*   Add support for `link` on `Charge.payment_method_details`, `Mandate.payment_method_details`, `Order#create.payment.settings.payment_method_options`, `Order#update.payment.settings.payment_method_options`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod#update`, `PaymentMethod`, `SetupAttempt.payment_method_details`, `SetupIntent#confirm.payment_method_data`, `SetupIntent#confirm.payment_method_options`, `SetupIntent#create.payment_method_data`, `SetupIntent#create.payment_method_options`, `SetupIntent#update.payment_method_data`, `SetupIntent#update.payment_method_options`, and `SetupIntent.payment_method_options`\n*   Add support for new values `affirm` and `link` on enums `Customer#list_payment_methods.type` and `PaymentMethod#list.type`\n*   Add support for new value `link` on enums `Invoice#create.payment_settings.payment_method_types[]`, `Invoice#update.payment_settings.payment_method_types[]`, `Invoice.payment_settings.payment_method_types[]`, `Subscription#create.payment_settings.payment_method_types[]`, `Subscription#update.payment_settings.payment_method_types[]`, and `Subscription.payment_settings.payment_method_types[]`\n*   Add support for new values `affirm` and `link` on enums `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `SetupIntent#confirm.payment_method_data.type`, `SetupIntent#create.payment_method_data.type`, and `SetupIntent#update.payment_method_data.type`\n*   Add support for new values `affirm` and `link` on enum `PaymentMethod#create.type`\n*   Add support for new values `affirm` and `link` on enum `PaymentMethod.type`\n\n### May 19, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `BillingPortal.Configuration#create.features.customer_update.allowed_updates` to be optional\n*   Add support for `financial_account` on `Issuing.Card`\n*   Add support for new values `treasury.credit_reversal.created`, `treasury.credit_reversal.posted`, `treasury.debit_reversal.completed`, `treasury.debit_reversal.created`, `treasury.debit_reversal.initial_credit_granted`, `treasury.financial_account.closed`, `treasury.financial_account.created`, `treasury.financial_account.features_status_updated`, `treasury.inbound_transfer.canceled`, `treasury.inbound_transfer.created`, `treasury.inbound_transfer.failed`, `treasury.inbound_transfer.succeeded`, `treasury.outbound_payment.canceled`, `treasury.outbound_payment.created`, `treasury.outbound_payment.expected_arrival_date_updated`, `treasury.outbound_payment.failed`, `treasury.outbound_payment.posted`, `treasury.outbound_payment.returned`, `treasury.outbound_transfer.canceled`, `treasury.outbound_transfer.created`, `treasury.outbound_transfer.expected_arrival_date_updated`, `treasury.outbound_transfer.failed`, `treasury.outbound_transfer.posted`, `treasury.outbound_transfer.returned`, `treasury.received_credit.created`, `treasury.received_credit.failed`, `treasury.received_credit.reversed`, `treasury.received_credit.succeeded`, and `treasury.received_debit.created` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n*   Remove support for resources `Treasury.BillingDetails` and `Treasury.InitiatingPaymentMethodDetails`\n*   Add support for `save_default_payment_method` on `Subscription#create.payment_settings`, `Subscription#update.payment_settings`, and `Subscription.payment_settings`\n*   Add support for `czk` on `Terminal.Configuration#create.tipping`, `Terminal.Configuration#update.tipping`, and `Terminal.Configuration.tipping`\n*   Change type of `Treasury.FinancialAccountFeatures.object` from `literal('treasury.financial_account.features')` to `literal('treasury.financial_account_features')`\n\n### May 17, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `Treasury.FinancialAccountFeatures`\n*   Add support for `retrieve_payment_method` method on resource `Customer`\n*   Change type of `BillingPortal.Session.return_url` from `string` to `nullable(string)`\n*   Change type of `Treasury.FinancialAccount.features` from `$Features` to `$Treasury.FinancialAccountFeatures`\n*   Add support for new value `issuing_authorization` on enum `Treasury.TransactionEntry.flow_type`\n*   Add support for new values `issuing_authorization_hold` and `issuing_authorization_release` on enum `Treasury.TransactionEntry.type`\n*   Remove support for values `received_hold_release` and `received_hold` from enum `Treasury.TransactionEntry.type`\n\n### May 13, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resources `Treasury.BillingDetails`, `Treasury.CreditReversal`, `Treasury.DebitReversal`, `Treasury.FinancialAccount`, `Treasury.FlowDetails`, `Treasury.InboundTransfer`, `Treasury.InitiatingPaymentMethodDetails`, `Treasury.OutboundPayment`, `Treasury.OutboundTransfer`, `Treasury.ReceivedCredit`, `Treasury.ReceivedDebit`, `Treasury.TransactionEntry`, and `Treasury.Transaction`\n*   Add support for `list_owners` and `list` methods on resource `FinancialConnections.Account`\n*   Add support for `afterpay_clearpay`, `au_becs_debit`, `bacs_debit`, `eps`, `fpx`, `giropay`, `grabpay`, `klarna`, `paynow`, and `sepa_debit` on `Checkout.Session.payment_method_options`\n*   Add support for `treasury` on `Issuing.Authorization`, `Issuing.Dispute#create`, `Issuing.Dispute`, and `Issuing.Transaction`\n*   Add support for `financial_account` on `Issuing.Card#create`\n*   Add support for `client_secret` on `Order`\n*   Add support for `networks` on `PaymentIntent#confirm.payment_method_options.us_bank_account`, `PaymentIntent#create.payment_method_options.us_bank_account`, `PaymentIntent#update.payment_method_options.us_bank_account`, `PaymentMethod.us_bank_account`, `SetupIntent#confirm.payment_method_options.us_bank_account`, `SetupIntent#create.payment_method_options.us_bank_account`, and `SetupIntent#update.payment_method_options.us_bank_account`\n*   Add support for `attach_to_self` and `flow_directions` on `SetupIntent`\n\n### May 11, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `description` on `Checkout.Session#create.subscription_data`, `Subscription#create`, `Subscription#update`, and `Subscription`\n*   Add support for `consent_collection`, `payment_intent_data`, `shipping_options`, `submit_type`, and `tax_id_collection` on `PaymentLink#create` and `PaymentLink`\n*   Add support for `customer_creation` on `PaymentLink#create`, `PaymentLink#update`, and `PaymentLink`\n*   Add support for `metadata` on `SubscriptionSchedule#create.phases[]`, `SubscriptionSchedule#update.phases[]`, and `SubscriptionSchedule.phases[]`\n*   Add support for new value `billing_portal.session.created` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### May 5, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `FinancialConnections.AccountOwnership`\n*   Change type of `FinancialConnections.Account.ownership` from `$Ownership` to `$FinancialConnections.AccountOwnership`\n*   Add support for `id` and `object` on `FinancialConnections.AccountOwner`\n*   Add support for `default_price_data` on `Product#create`\n*   Add support for `default_price` on `Product#update` and `Product`\n*   Add support for `instructions_email` on `Refund#create` and `Refund`\n\n### May 4, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resources `FinancialConnections.AccountOwner`, `FinancialConnections.Account`, and `FinancialConnections.Session`\n*   Add support for `financial_connections` on `Checkout.Session#create.payment_method_options.us_bank_account`, `Checkout.Session.payment_method_options.us_bank_account`, `Invoice#create.payment_settings.payment_method_options.us_bank_account`, `Invoice#update.payment_settings.payment_method_options.us_bank_account`, `Invoice.payment_settings.payment_method_options.us_bank_account`, `PaymentIntent#confirm.payment_method_options.us_bank_account`, `PaymentIntent#create.payment_method_options.us_bank_account`, `PaymentIntent#update.payment_method_options.us_bank_account`, `PaymentIntent.payment_method_options.us_bank_account`, `SetupIntent#confirm.payment_method_options.us_bank_account`, `SetupIntent#create.payment_method_options.us_bank_account`, `SetupIntent#update.payment_method_options.us_bank_account`, `SetupIntent.payment_method_options.us_bank_account`, `Subscription#create.payment_settings.payment_method_options.us_bank_account`, `Subscription#update.payment_settings.payment_method_options.us_bank_account`, and `Subscription.payment_settings.payment_method_options.us_bank_account`\n*   Add support for `financial_connections_account` on `PaymentIntent#confirm.payment_method_data.us_bank_account`, `PaymentIntent#create.payment_method_data.us_bank_account`, `PaymentIntent#update.payment_method_data.us_bank_account`, `PaymentMethod#create.us_bank_account`, `PaymentMethod.us_bank_account`, `SetupIntent#confirm.payment_method_data.us_bank_account`, `SetupIntent#create.payment_method_data.us_bank_account`, and `SetupIntent#update.payment_method_data.us_bank_account`\n*   Add support for `registered_address` on `Account#create.individual`, `Account#update.individual`, `Person#create`, `Person#update`, `Person`, `Token#create.account.individual`, and `Token#create.person`\n*   Change type of `PaymentIntent.amount_details.tip.amount` from `nullable(integer)` to `integer`\n*   Change `PaymentIntent.amount_details.tip.amount` to be optional\n*   Add support for `payment_method_data` on `SetupIntent#confirm`, `SetupIntent#create`, and `SetupIntent#update`\n\n### May 2, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `CashBalance`\n*   Change type of `BillingPortal.Configuration.application` from `$Application` to `deletable($Application)`\n*   Add support for `alipay` on `Checkout.Session#create.payment_method_options` and `Checkout.Session.payment_method_options`\n*   Change type of `Checkout.Session#create.payment_method_options.konbini.expires_after_days` from `emptyStringable(integer)` to `integer`\n*   Add support for new value `eu_oss_vat` on enums `Checkout.Session.customer_details.tax_ids[].type`, `Invoice.customer_tax_ids[].type`, and `TaxId.type`\n*   Add support for new value `eu_oss_vat` on enums `Customer#create.tax_id_data[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, and `TaxId#create.type`\n*   Add support for `cash_balance` on `Customer`\n*   Add support for `application` on `Invoice`, `Quote`, `SubscriptionSchedule`, and `Subscription`\n\n### April 20, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `BillingPortal.Configuration.application` from `string` to `expandable($Application)`\n*   Change `Issuing.Dispute#create.transaction` to be optional\n\n### April 18, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `create_funding_instructions` method on resource `Customer`\n*   Remove support for `create` and `list` methods on resource `FundingInstructions`\n*   Add support for `amount_details` on `PaymentIntent`\n\n### April 15, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `verifone_p400` on `Terminal.Configuration#create`, `Terminal.Configuration#update`, and `Terminal.Configuration`\n*   Remove support for `verifone_P400` on `Terminal.Configuration#create`, `Terminal.Configuration#update`, and `Terminal.Configuration`\n\n### April 13, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `Terminal.Configuration`\n*   Add support for `configuration_overrides` on `Terminal.Location#create`, `Terminal.Location#update`, and `Terminal.Location`\n*   Add support for new resource `FundingInstructions`\n*   Add support for `customer_balance` on `Charge.payment_method_details`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, and `PaymentMethod`\n*   Add support for `cash_balance` on `Customer#create` and `Customer#update`\n*   Add support for new value `customer_balance` on enums `Customer#list_payment_methods.type` and `PaymentMethod#list.type`\n*   Add support for new value `customer_balance` on enums `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, and `PaymentIntent#update.payment_method_data.type`\n*   Add support for `display_bank_transfer_instructions` on `PaymentIntent.next_action`\n*   Add support for new value `customer_balance` on enum `PaymentMethod#create.type`\n*   Add support for new value `customer_balance` on enum `PaymentMethod.type`\n*   Add support for `increment_authorization` method on resource `PaymentIntent`\n*   Add support for `incremental_authorization_supported` on `Charge.payment_method_details.card_present`\n*   Add support for `request_incremental_authorization_support` on `PaymentIntent#confirm.payment_method_options.card_present`, `PaymentIntent#create.payment_method_options.card_present`, `PaymentIntent#update.payment_method_options.card_present`, and `PaymentIntent.payment_method_options.card_present`\n\n### April 7, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `apply_customer_balance` method on resource `PaymentIntent`\n*   Add support for new value `cash_balance.funds_available` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### April 1, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `capture_before` on `Charge.payment_method_details.card_present`\n*   Remove support for `eu_bank_transfer` on `Invoice#create.payment_settings.payment_method_options.customer_balance.bank_transfer`, `Invoice#update.payment_settings.payment_method_options.customer_balance.bank_transfer`, `Invoice.payment_settings.payment_method_options.customer_balance.bank_transfer`, `Subscription#create.payment_settings.payment_method_options.customer_balance.bank_transfer`, `Subscription#update.payment_settings.payment_method_options.customer_balance.bank_transfer`, and `Subscription.payment_settings.payment_method_options.customer_balance.bank_transfer`\n*   Add support for `request_extended_authorization` on `PaymentIntent#confirm.payment_method_options.card_present`, `PaymentIntent#create.payment_method_options.card_present`, `PaymentIntent#update.payment_method_options.card_present`, and `PaymentIntent.payment_method_options.card_present`\n\n### March 31, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `bank_transfer_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `address` and `name` on `Checkout.Session.customer_details`\n*   Add support for `customer_balance` on `Invoice#create.payment_settings.payment_method_options`, `Invoice#update.payment_settings.payment_method_options`, `Invoice.payment_settings.payment_method_options`, `Subscription#create.payment_settings.payment_method_options`, `Subscription#update.payment_settings.payment_method_options`, and `Subscription.payment_settings.payment_method_options`\n*   Add support for new value `customer_balance` on enums `Invoice#create.payment_settings.payment_method_types[]`, `Invoice#update.payment_settings.payment_method_types[]`, `Invoice.payment_settings.payment_method_types[]`, `Subscription#create.payment_settings.payment_method_types[]`, `Subscription#update.payment_settings.payment_method_types[]`, and `Subscription.payment_settings.payment_method_types[]`\n*   Add support for new values `payment_intent.partially_funded`, `terminal.reader.action_failed`, and `terminal.reader.action_succeeded` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### March 29, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `cancel_action`, `process_payment_intent`, `process_setup_intent`, and `set_reader_display` methods on resource `Terminal.Reader`\n*   Change `Charge.failure_balance_transaction`, `Invoice.payment_settings.payment_method_options.us_bank_account`, `PaymentIntent.next_action.verify_with_microdeposits.microdeposit_type`, `SetupIntent.next_action.verify_with_microdeposits.microdeposit_type`, and `Subscription.payment_settings.payment_method_options.us_bank_account` to be required\n*   Add support for `action` on `Terminal.Reader`\n\n### March 25, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `search` method on resources `Charge`, `Customer`, `Invoice`, `PaymentIntent`, `Price`, `Product`, and `Subscription`\n*   Add support for `us_bank_account_ach_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `test_clock` on `Subscription#list`\n\n### March 24, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `paynow_payments` on `Account#create.capabilities`, `Account#update.capabilities`, and `Account.capabilities`\n*   Add support for `failure_balance_transaction` on `Charge`\n*   Add support for `paynow` on `Charge.payment_method_details`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, and `PaymentMethod`\n*   Add support for `us_bank_account` on `Charge.payment_method_details`, `Checkout.Session#create.payment_method_options`, `Checkout.Session.payment_method_options`, `Invoice#create.payment_settings.payment_method_options`, `Invoice#update.payment_settings.payment_method_options`, `Invoice.payment_settings.payment_method_options`, `Mandate.payment_method_details`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod#update`, `PaymentMethod`, `SetupAttempt.payment_method_details`, `SetupIntent#confirm.payment_method_options`, `SetupIntent#create.payment_method_options`, `SetupIntent#update.payment_method_options`, `SetupIntent.payment_method_options`, `Subscription#create.payment_settings.payment_method_options`, `Subscription#update.payment_settings.payment_method_options`, and `Subscription.payment_settings.payment_method_options`\n*   Add support for new values `paynow` and `us_bank_account` on enums `Checkout.Session#create.payment_method_types[]` and `PaymentMethod#create.type`\n*   Add support for new values `paynow` and `us_bank_account` on enums `Customer#list_payment_methods.type` and `PaymentMethod#list.type`\n*   Add support for new values `paynow` and `us_bank_account` on enums `Invoice#create.payment_settings.payment_method_types[]`, `Invoice#update.payment_settings.payment_method_types[]`, `Invoice.payment_settings.payment_method_types[]`, `Subscription#create.payment_settings.payment_method_types[]`, `Subscription#update.payment_settings.payment_method_types[]`, and `Subscription.payment_settings.payment_method_types[]`\n*   Add support for new values `paynow` and `us_bank_account` on enums `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, and `PaymentIntent#update.payment_method_data.type`\n*   Add support for `capture_method` on `PaymentIntent#confirm.payment_method_options.afterpay_clearpay`, `PaymentIntent#confirm.payment_method_options.card`, `PaymentIntent#confirm.payment_method_options.klarna`, `PaymentIntent#create.payment_method_options.afterpay_clearpay`, `PaymentIntent#create.payment_method_options.card`, `PaymentIntent#create.payment_method_options.klarna`, `PaymentIntent#update.payment_method_options.afterpay_clearpay`, `PaymentIntent#update.payment_method_options.card`, `PaymentIntent#update.payment_method_options.klarna`, `PaymentIntent.payment_method_options.afterpay_clearpay`, `PaymentIntent.payment_method_options.card`, `PaymentIntent.payment_method_options.klarna`, and `PaymentIntentTypeSpecificPaymentMethodOptionsClient`\n*   Add support for `descriptor_code` on `PaymentIntent#verify_microdeposits` and `SetupIntent#verify_microdeposits`\n*   Add support for `paynow_display_qr_code` on `PaymentIntent.next_action`\n*   Add support for `microdeposit_type` on `PaymentIntent.next_action.verify_with_microdeposits` and `SetupIntent.next_action.verify_with_microdeposits`\n*   Add support for `verification_method` on `PaymentIntentTypeSpecificPaymentMethodOptionsClient` and `SetupIntentTypeSpecificPaymentMethodOptionsClient`\n*   Add support for new values `paynow` and `us_bank_account` on enum `PaymentMethod.type`\n\n### March 23, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `cancel` method on resource `Refund`\n*   Add support for new values `bg_uic`, `hu_tin`, and `si_tin` on enums `Checkout.Session.customer_details.tax_ids[].type`, `Invoice.customer_tax_ids[].type`, and `TaxId.type`\n*   Add support for new values `bg_uic`, `hu_tin`, and `si_tin` on enums `Customer#create.tax_id_data[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, and `TaxId#create.type`\n*   Change `Invoice#create.customer` to be optional\n*   Add support for `test_clock` on `Quote#list`\n*   Add support for new values `test_helpers.test_clock.advancing`, `test_helpers.test_clock.created`, `test_helpers.test_clock.deleted`, `test_helpers.test_clock.internal_failure`, and `test_helpers.test_clock.ready` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### March 18, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `status` on `Card`\n\n### March 11, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `mandate` on `Charge.payment_method_details.card`\n*   Add support for `mandate_options` on `PaymentIntent#create.payment_method_options.card`, `PaymentIntent#update.payment_method_options.card`, `PaymentIntent#confirm.payment_method_options.card`, `PaymentIntent.payment_method_options.card`, `SetupIntent#create.payment_method_options.card`, `SetupIntent#update.payment_method_options.card`, `SetupIntent#confirm.payment_method_options.card`, and `SetupIntent.payment_method_options.card`\n*   Add support for `card_await_notification` on `PaymentIntent.next_action`\n*   Add support for `customer_notification` on `PaymentIntent.processing.card`\n*   Change `PaymentLink#create.line_items` to be required\n\n### March 9, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `test_clock` on `Customer#list`\n*   Change `Invoice.test_clock`, `InvoiceItem.test_clock`, `Quote.test_clock`, `Subscription.test_clock`, and `SubscriptionSchedule.test_clock` to be required\n\n### March 2, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resources `CreditedItems` and `ProrationDetails`\n*   Add support for `proration_details` on `InvoiceLineItem`\n\n### March 1, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `deletes_after` on `TestHelpers.TestClock`\n*   Add support for new resource `TestHelpers.TestClock`\n*   Add support for `test_clock` on `Customer#create`, `Customer`, `Invoice`, `InvoiceItem`, `Quote#create`, `Quote`, `Subscription`, and `SubscriptionSchedule`\n*   Add support for `pending_invoice_items_behavior` on `Invoice#create`\n*   Change type of `Product#update.url` from `string` to `emptyStringable(string)`\n*   Add support for `next_action` on `Refund`\n\n### February 25, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `SetupIntentTypeSpecificPaymentMethodOptionsClient`\n*   Add support for `konbini_payments` on `Account#update.capabilities`, `Account#create.capabilities`, and `Account.capabilities`\n*   Change `BillingPortal.Configuration#create.business_profile.privacy_policy_url` and `BillingPortal.Configuration#create.business_profile.terms_of_service_url` to be optional\n*   Change type of `BillingPortal.Configuration#update.business_profile.privacy_policy_url` and `BillingPortal.Configuration#update.business_profile.terms_of_service_url` from `string` to `emptyStringable(string)`\n*   Change type of `BillingPortal.Configuration.business_profile.privacy_policy_url` and `BillingPortal.Configuration.business_profile.terms_of_service_url` from `string` to `nullable(string)`\n*   Add support for `konbini` on `Charge.payment_method_details`, `Checkout.Session#create.payment_method_options`, `Checkout.Session.payment_method_options`, `Invoice#create.payment_settings.payment_method_options`, `Invoice#update.payment_settings.payment_method_options`, `Invoice.payment_settings.payment_method_options`, `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, `PaymentMethod`, `Subscription#create.payment_settings.payment_method_options`, `Subscription#update.payment_settings.payment_method_options`, and `Subscription.payment_settings.payment_method_options`\n*   Add support for new value `konbini` on enums `Checkout.Session#create.payment_method_types[]` and `PaymentMethod#create.type`\n*   Add support for new value `konbini` on enums `Customer#list_payment_methods.type` and `PaymentMethod#list.type`\n*   Add support for new value `konbini` on enums `Invoice#create.payment_settings.payment_method_types[]`, `Invoice#update.payment_settings.payment_method_types[]`, `Invoice.payment_settings.payment_method_types[]`, `Subscription#create.payment_settings.payment_method_types[]`, `Subscription#update.payment_settings.payment_method_types[]`, and `Subscription.payment_settings.payment_method_types[]`\n*   Add support for new value `konbini` on enums `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, and `PaymentIntent#confirm.payment_method_data.type`\n*   Add support for `konbini_display_details` on `PaymentIntent.next_action`\n*   Add support for new value `konbini` on enum `PaymentMethod.type`\n\n### February 23, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `setup_future_usage` on `PaymentIntent#create.payment_method_options.acss_debit`, `PaymentIntent#create.payment_method_options.afterpay_clearpay`, `PaymentIntent#create.payment_method_options.alipay`, `PaymentIntent#create.payment_method_options.au_becs_debit`, `PaymentIntent#create.payment_method_options.bacs_debit`, `PaymentIntent#create.payment_method_options.bancontact`, `PaymentIntent#create.payment_method_options.boleto`, `PaymentIntent#create.payment_method_options.eps`, `PaymentIntent#create.payment_method_options.fpx`, `PaymentIntent#create.payment_method_options.giropay`, `PaymentIntent#create.payment_method_options.grabpay`, `PaymentIntent#create.payment_method_options.ideal`, `PaymentIntent#create.payment_method_options.klarna`, `PaymentIntent#create.payment_method_options.oxxo`, `PaymentIntent#create.payment_method_options.p24`, `PaymentIntent#create.payment_method_options.sepa_debit`, `PaymentIntent#create.payment_method_options.sofort`, `PaymentIntent#create.payment_method_options.wechat_pay`, `PaymentIntent#update.payment_method_options.acss_debit`, `PaymentIntent#update.payment_method_options.afterpay_clearpay`, `PaymentIntent#update.payment_method_options.alipay`, `PaymentIntent#update.payment_method_options.au_becs_debit`, `PaymentIntent#update.payment_method_options.bacs_debit`, `PaymentIntent#update.payment_method_options.bancontact`, `PaymentIntent#update.payment_method_options.boleto`, `PaymentIntent#update.payment_method_options.eps`, `PaymentIntent#update.payment_method_options.fpx`, `PaymentIntent#update.payment_method_options.giropay`, `PaymentIntent#update.payment_method_options.grabpay`, `PaymentIntent#update.payment_method_options.ideal`, `PaymentIntent#update.payment_method_options.klarna`, `PaymentIntent#update.payment_method_options.oxxo`, `PaymentIntent#update.payment_method_options.p24`, `PaymentIntent#update.payment_method_options.sepa_debit`, `PaymentIntent#update.payment_method_options.sofort`, `PaymentIntent#update.payment_method_options.wechat_pay`, `PaymentIntent#confirm.payment_method_options.acss_debit`, `PaymentIntent#confirm.payment_method_options.afterpay_clearpay`, `PaymentIntent#confirm.payment_method_options.alipay`, `PaymentIntent#confirm.payment_method_options.au_becs_debit`, `PaymentIntent#confirm.payment_method_options.bacs_debit`, `PaymentIntent#confirm.payment_method_options.bancontact`, `PaymentIntent#confirm.payment_method_options.boleto`, `PaymentIntent#confirm.payment_method_options.eps`, `PaymentIntent#confirm.payment_method_options.fpx`, `PaymentIntent#confirm.payment_method_options.giropay`, `PaymentIntent#confirm.payment_method_options.grabpay`, `PaymentIntent#confirm.payment_method_options.ideal`, `PaymentIntent#confirm.payment_method_options.klarna`, `PaymentIntent#confirm.payment_method_options.oxxo`, `PaymentIntent#confirm.payment_method_options.p24`, `PaymentIntent#confirm.payment_method_options.sepa_debit`, `PaymentIntent#confirm.payment_method_options.sofort`, `PaymentIntent#confirm.payment_method_options.wechat_pay`, `PaymentIntent.payment_method_options.acss_debit`, `PaymentIntent.payment_method_options.afterpay_clearpay`, `PaymentIntent.payment_method_options.alipay`, `PaymentIntent.payment_method_options.au_becs_debit`, `PaymentIntent.payment_method_options.bacs_debit`, `PaymentIntent.payment_method_options.bancontact`, `PaymentIntent.payment_method_options.boleto`, `PaymentIntent.payment_method_options.eps`, `PaymentIntent.payment_method_options.fpx`, `PaymentIntent.payment_method_options.giropay`, `PaymentIntent.payment_method_options.grabpay`, `PaymentIntent.payment_method_options.ideal`, `PaymentIntent.payment_method_options.klarna`, `PaymentIntent.payment_method_options.oxxo`, `PaymentIntent.payment_method_options.p24`, `PaymentIntent.payment_method_options.sepa_debit`, `PaymentIntent.payment_method_options.sofort`, and `PaymentIntent.payment_method_options.wechat_pay`\n*   Add support for new values `bbpos_wisepad3` and `stripe_m2` on enums `Terminal.Reader#list.device_type` and `Terminal.Reader.device_type`\n\n### February 9, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `verify_microdeposits` method on resources `PaymentIntent` and `SetupIntent`\n*   Add support for new value `grabpay` on enums `Invoice#create.payment_settings.payment_method_types[]`, `Invoice#update.payment_settings.payment_method_types[]`, `Invoice.payment_settings.payment_method_types[]`, `Subscription#create.payment_settings.payment_method_types[]`, `Subscription#update.payment_settings.payment_method_types[]`, and `Subscription.payment_settings.payment_method_types[]`\n\n### February 8, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `pin` on `Issuing.Card#update`\n\n### February 3, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `au_becs_debit` on enum `Checkout.Session#create.payment_method_types[]`\n*   Change type of `Refund.reason` from `string` to `enum('duplicate'|'expired_uncaptured_charge'|'fraudulent'|'requested_by_customer')`\n\n### January 25, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `is_vat` on enums `Checkout.Session.customer_details.tax_ids[].type`, `Invoice.customer_tax_ids[].type`, and `TaxId.type`\n*   Add support for new value `is_vat` on enums `Customer#create.tax_id_data[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, and `TaxId#create.type`\n*   Change `Checkout.Session.payment_link` to be required\n*   Add support for `phone_number_collection` on `PaymentLink#create` and `PaymentLink`\n*   Add support for new values `payment_link.created` and `payment_link.updated` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### January 19, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `PaymentLink`\n*   Add support for `payment_link` on `Checkout.Session`\n*   Change type of `Charge.status` from `string` to `enum('failed'|'pending'|'succeeded')`\n*   Add support for `bacs_debit` and `eps` on `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#confirm.payment_method_options`, and `PaymentIntent.payment_method_options`\n*   Add support for `image_url_png` and `image_url_svg` on `PaymentIntent.next_action.wechat_pay_display_qr_code`\n\n### January 12, 2022![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `paid_out_of_band` on `Invoice`\n*   Add support for `customer_creation` on `Checkout.Session#create` and `Checkout.Session`\n*   Add support for `fpx` and `grabpay` on `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#confirm.payment_method_options`, and `PaymentIntent.payment_method_options`\n\n### December 23, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `mandate_options` on `Subscription#create.payment_settings.payment_method_options.card`, `Subscription#update.payment_settings.payment_method_options.card`, and `Subscription.payment_settings.payment_method_options.card`\n\n### December 22, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `au_becs_debit` on `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#confirm.payment_method_options`, and `PaymentIntent.payment_method_options`\n*   Change type of `PaymentIntent.processing.type` from `string` to `literal('card')`\n\n### December 21, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `en-FR`, `es-US`, and `fr-FR` on enums `PaymentIntent#create.payment_method_options.klarna.preferred_locale`, `PaymentIntent#update.payment_method_options.klarna.preferred_locale`, and `PaymentIntent#confirm.payment_method_options.klarna.preferred_locale`\n*   Add support for `boleto` on `SetupAttempt.payment_method_details`\n\n### December 17, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `processing` on `PaymentIntent`\n\n### December 15, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `PaymentIntentTypeSpecificPaymentMethodOptionsClient`\n*   Add support for `setup_future_usage` on `PaymentIntent#create.payment_method_options.card`, `PaymentIntent#update.payment_method_options.card`, `PaymentIntent#confirm.payment_method_options.card`, and `PaymentIntent.payment_method_options.card`\n\n### December 9, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `metadata` on `BillingPortal.Configuration#create`, `BillingPortal.Configuration#update`, and `BillingPortal.Configuration`\n*   Add support for new values `ge_vat` and `ua_vat` on enums `Checkout.Session.customer_details.tax_ids[].type`, `Invoice.customer_tax_ids[].type`, and `TaxId.type`\n*   Add support for new values `ge_vat` and `ua_vat` on enums `Customer#create.tax_id_data[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, and `TaxId#create.type`\n*   Change type of `PaymentIntent#create.payment_method_data.billing_details.email`, `PaymentIntent#update.payment_method_data.billing_details.email`, `PaymentIntent#confirm.payment_method_data.billing_details.email`, `PaymentMethod#create.billing_details.email`, and `PaymentMethod#update.billing_details.email` from `string` to `emptyStringable(string)`\n*   Add support for `giropay` on `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#confirm.payment_method_options`, and `PaymentIntent.payment_method_options`\n*   Add support for new value `en-IE` on enums `PaymentIntent#create.payment_method_options.klarna.preferred_locale`, `PaymentIntent#update.payment_method_options.klarna.preferred_locale`, and `PaymentIntent#confirm.payment_method_options.klarna.preferred_locale`\n\n### November 19, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `wallets` on `Issuing.Card`\n*   Add support for `interac_present` on `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#confirm.payment_method_options`, and `PaymentIntent.payment_method_options`\n*   Add support for new value `jct` on enums `TaxRate#create.tax_type`, `TaxRate#update.tax_type`, and `TaxRate.tax_type`\n\n### November 17, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `AutomaticPaymentMethodsPaymentIntent`\n*   Add support for `automatic_payment_methods` on `PaymentIntent#create` and `PaymentIntent`\n\n### November 15, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `ShippingRate`\n*   Add support for `shipping_options` on `Checkout.Session#create` and `Checkout.Session`\n*   Add support for `shipping_rate` on `Checkout.Session`\n\n### November 12, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new value `agrobank` on enums `Charge.payment_method_details.fpx.bank`, `PaymentIntent#create.payment_method_data.fpx.bank`, `PaymentIntent#update.payment_method_data.fpx.bank`, `PaymentIntent#confirm.payment_method_data.fpx.bank`, `PaymentMethod#create.fpx.bank`, and `PaymentMethod.fpx.bank`\n\n### November 11, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `expire` method on resource `Checkout.Session`\n*   Add support for `status` on `Checkout.Session`\n\n### November 3, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `ownership_declaration_shown_and_signed` on `Token#create.account`(this API was unused)\n*   Add support for `ownership_declaration_shown_and_signed` on `Token#create.account.company`\n\n### November 1, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `ownership_declaration` on `Account#update.company`, `Account#create.company`, `Account.company`, and `Token#create.account.company`\n*   Add support for `proof_of_registration` on `Account#update.documents` and `Account#create.documents`\n*   Add support for `ownership_declaration_shown_and_signed` on `Token#create.account`\n*   Change type of `Account#update.individual.full_name_aliases`, `Account#create.individual.full_name_aliases`, `Person#create.full_name_aliases`, `Person#update.full_name_aliases`, `Token#create.account.individual.full_name_aliases`, and `Token#create.person.full_name_aliases` from `array(string)` to `emptyStringable(array(string))`\n*   Add support for new values `en-BE`, `en-ES`, and `en-IT` on enums `PaymentIntent#create.payment_method_options.klarna.preferred_locale`, `PaymentIntent#update.payment_method_options.klarna.preferred_locale`, and `PaymentIntent#confirm.payment_method_options.klarna.preferred_locale`\n\n### October 19, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Account.controller.type` to be required\n*   Add support for `buyer_id` on `Charge.payment_method_details.alipay`\n\n### October 15, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `UsageRecord#create.timestamp` from `integer` to `literal('now') | integer`\n*   Change `UsageRecord#create.timestamp` to be optional\n\n### October 14, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Charge.payment_method_details.klarna.payment_method_category`, `Charge.payment_method_details.klarna.preferred_locale`, `Checkout.Session.customer_details.phone`, and `PaymentMethod.klarna.dob` to be required\n*   Add support for new value `klarna` on enum `Checkout.Session#create.payment_method_types[]`\n\n### October 9, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `payment_method_category` and `preferred_locale` on `Charge.payment_method_details.klarna`\n*   Add support for new value `klarna` on enums `Customer#list_payment_methods.type` and `PaymentMethod#list.type`\n*   Add support for `klarna` on `PaymentIntent#create.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent.payment_method_options`, `PaymentMethod#create`, and `PaymentMethod`\n*   Add support for new value `klarna` on enums `PaymentIntent#create.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, and `PaymentIntent#confirm.payment_method_data.type`\n*   Add support for new value `klarna` on enum `PaymentMethod#create.type`\n*   Add support for new value `klarna` on enum `PaymentMethod.type`\n\n### October 8, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `list_payment_methods` method on resource `Customer`\n\n### October 7, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `phone_number_collection` on `Checkout.Session#create` and `Checkout.Session`\n*   Add support for `phone` on `Checkout.Session.customer_details`\n*   Change `PaymentMethod#list.customer` to be optional\n*   Add support for new value `customer_id` on enums `Radar.ValueList#create.item_type` and `Radar.ValueList.item_type`\n*   Add support for new value `bbpos_wisepos_e` on enums `Terminal.Reader#list.device_type` and `Terminal.Reader.device_type`\n\n### September 29, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `klarna_payments` on `Account#update.capabilities`, `Account#create.capabilities`, and `Account.capabilities`\n\n### September 24, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `amount_authorized` and `overcapture_supported` on `Charge.payment_method_details.card_present`\n\n### September 16, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `full_name_aliases` on `Account#update.individual`, `Account#create.individual`, `Person#create`, `Person#update`, `Person`, `Token#create.account.individual`, and `Token#create.person`\n\n### September 7, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change `Account.future_requirements.alternatives`, `Account.requirements.alternatives`, `Capability.future_requirements.alternatives`, `Capability.requirements.alternatives`, `Checkout.Session.after_expiration`, `Checkout.Session.consent`, `Checkout.Session.consent_collection`, `Checkout.Session.expires_at`, `Checkout.Session.recovered_from`, `Person.future_requirements.alternatives`, and `Person.requirements.alternatives` to be required\n*   Change type of `Capability.future_requirements.alternatives`, `Capability.requirements.alternatives`, `Person.future_requirements.alternatives`, and `Person.requirements.alternatives` from `array(AccountRequirementsAlternative)` to `nullable(array(AccountRequirementsAlternative))`\n*   Add support for new value `rst` on enums `TaxRate#create.tax_type`, `TaxRate#update.tax_type`, and `TaxRate.tax_type`\n*   Add support for new value `checkout.session.expired` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### September 1, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `future_requirements` on `Account`, `Capability`, and `Person`\n*   Add support for `alternatives` on `Account.requirements`, `Capability.requirements`, and `Person.requirements`\n*   Change type of `Checkout.Session.after_expiration.recovery.allow_promotion_codes` and `Checkout.Session.after_expiration.recovery.enabled` from `nullable(boolean)` to `boolean`\n\n### August 31, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `after_expiration`, `consent_collection`, and `expires_at` on `Checkout.Session#create` and `Checkout.Session`\n*   Add support for `consent` and `recovered_from` on `Checkout.Session`\n\n### August 26, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Change type of `BillingPortal.Configuration#create.features.subscription_cancel.cancellation_reason.options[]`, `BillingPortal.Configuration#update.features.subscription_cancel.cancellation_reason.options[]`, and `BillingPortal.Configuration.features.subscription_cancel.cancellation_reason.options[]` from `string` to `enum`\n\n### August 25, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `cancellation_reason` on `BillingPortal.Configuration.features.subscription_cancel`\n\n### August 24, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `cancellation_reason` on `BillingPortal.Configuration#create.features.subscription_cancel` and `BillingPortal.Configuration#update.features.subscription_cancel`\n\n### August 11, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `locale` on `BillingPortal.Session#create` and `BillingPortal.Session`\n*   Change type of `Invoice.collection_method` and `Subscription.collection_method` from `nullable(enum('charge_automatically'|'send_invoice'))` to `enum('charge_automatically'|'send_invoice')`\n\n### August 4, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Changed type of `PaymentIntent#create.payment_method_options.sofort.preferred_language`, `PaymentIntent#update.payment_method_options.sofort.preferred_language`, and `PaymentIntent#confirm.payment_method_options.sofort.preferred_language` from `enum` to `emptyStringable(enum)`\n\n### July 28, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `account_type` on `BankAccount`, `ExternalAccount#update`, and `Token#create.bank_account`\n\n### July 27, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `category_code` on `Issuing.Authorization.merchant_data` and `Issuing.Transaction.merchant_data`\n*   Add support for new value `redacted` on enum `Review.closed_reason`\n\n### July 22, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Remove support for `payment_settings` on `Customer#create` and `Customer#update`\n\n### July 21, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `hr`, `ko`, and `vi` on enums `Checkout.Session#create.locale` and `Checkout.Session.locale`\n*   Add support for `payment_settings` on `Customer#create`, `Customer#update`, `Subscription#create`, `Subscription#update`, and `Subscription`\n*   Remove support for values `api_connection_error`, `authentication_error`, and `rate_limit_error` from enums `StripeError.type`, `StripeErrorResponse.error.type`, `Invoice.last_finalization_error.type`, `PaymentIntent.last_payment_error.type`, `SetupAttempt.setup_error.type`, and `SetupIntent.last_setup_error.type`\n*   Add support for `wallet` on `Issuing.Transaction`\n*   Add support for `ideal` on `PaymentIntent#create.payment_method_options`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#confirm.payment_method_options`, and `PaymentIntent.payment_method_options`\n\n### July 14, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new values `quote.accepted`, `quote.canceled`, `quote.created`, and `quote.finalized` on enums `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]`\n\n### July 12, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `list_computed_upfront_line_items` method on resource `Quote`\n\n### July 8, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for `finalize_quote` method on resource `Quote`\n*   Remove support for `finalize` method on resource `Quote`\n\n### July 7, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add support for new resource `Quote`\n*   Changed type of `Charge.payment_method_details.card.three_d_secure.result` and `SetupAttempt.payment_method_details.card.three_d_secure.result` from `enum` to `nullable(enum)`\n*   Changed type of `Charge.payment_method_details.card.three_d_secure.version` and `SetupAttempt.payment_method_details.card.three_d_secure.version` from `enum('1.0.2'|'2.1.0'|'2.2.0')` to `nullable(enum('1.0.2'|'2.1.0'|'2.2.0'))`\n*   Add support for `quote` on `Invoice`\n*   Add support for new value `quote_accept` on enum `Invoice.billing_reason`\n\n### June 30, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   `Invoice#update.payment_settings.payment_method_types[]`, `Invoice#create.payment_settings.payment_method_types[]` and `Invoice.payment_settings.payment_method_types[]` added new enum members: `boleto`\n\n### June 29, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `boleto_payments` on `Account#create.capabilities`, `Account#update.capabilities` and `Account.capabilities`\n*   Added support for `boleto` and `oxxo` on `Session#create.payment_method_options` and `Checkout.Session.payment_method_options`\n*   `Session#create.payment_method_types[]` added new enum members: `boleto and oxxo`\n\n### June 25, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `boleto` on `PaymentMethod#create`, `PaymentIntent.payment_method_options`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#create.payment_method_data`, `Charge.payment_method_details` and `PaymentMethod`\n*   Added support for `boleto_display_details` on `PaymentIntent.next_action`\n*   `TaxId#create.type`, `Invoice.customer_tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Customer#create.tax_id_data[].type`, `Checkout.Session.customer_details.tax_ids[].type` and `TaxId.type` added new enum members: `il_vat`\n*   `PaymentMethod#list.type`, `PaymentMethod#create.type`, `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type` and `PaymentMethod.type` added new enum members: `boleto`\n\n### June 18, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   `TaxId#create.type`, `Invoice.customer_tax_ids[].type`, `Invoice#upcomingLines.customer_details.tax_ids[].type`, `Invoice#upcoming.customer_details.tax_ids[].type`, `Customer#create.tax_id_data[].type`, `Checkout.Session.customer_details.tax_ids[].type` and `TaxId.type` added new enum members: `ca_pst_mb, ca_pst_bc, ca_gst_hst and ca_pst_sk`\n\n### June 7, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `tax_id_collection` on `Session#create` and `Checkout.Session`\n*   `Terminal.Reader.location` changed from `string` to `expandable($Terminal.Location)`\n\n### June 4, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `controller` on `Account`\n\n### June 3, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for new resource `TaxCode`\n*   Added support for `automatic_tax` on `SubscriptionSchedule.default_settings`, `SubscriptionSchedule#update.phases[]`, `SubscriptionSchedule#update.default_settings`, `SubscriptionSchedule#create.phases[]`, `SubscriptionSchedule#create.default_settings`, `Subscription`, `Subscription#update`, `Subscription#create`, `Invoice`, `Invoice#upcomingLines`, `Invoice#update`, `Invoice#upcoming`, `Invoice#create`, `Checkout.Session`, `Session#create` and `SubscriptionSchedule.phases[]`\n*   Added support for `customer_update` on `Session#create`\n*   Added support for `tax_behavior` on `SubscriptionSchedule#update.phases[].add_invoice_items[].price_data`, `SubscriptionSchedule#create.phases[].items[].price_data`, `SubscriptionSchedule#create.phases[].add_invoice_items[].price_data`, `SubscriptionItem#update.price_data`, `SubscriptionItem#create.price_data`, `Subscription#update.items[].price_data`, `Subscription#update.add_invoice_items[].price_data`, `Subscription#create.items[].price_data`, `Subscription#create.add_invoice_items[].price_data`, `Price`, `Price#update`, `Price#create`, `InvoiceItem#update.price_data`, `InvoiceItem#create.price_data`, `Invoice#upcomingLines.subscription_items[].price_data`, `Invoice#upcomingLines.invoice_items[].price_data`, `Invoice#upcoming.subscription_items[].price_data`, `Invoice#upcoming.invoice_items[].price_data`, `Session#create.line_items[].price_data` and `SubscriptionSchedule#update.phases[].items[].price_data`\n*   Added support for `tax_code` on `Product#update`, `Product#create`, `Price#create.product_data`, `Plan#create.product[0]`, `Session#create.line_items[].price_data.product_data` and `Product`\n*   Added support for `tax` on `Customer#update`, `Customer#create` and `Customer`\n*   Added support for `customer_details` on `Invoice#upcoming` and `Invoice#upcomingLines`\n*   Added support for `tax_type` on `TaxRate#update`, `TaxRate#create` and `TaxRate`\n\n### May 26, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `documents` on `Person#update`, `Person#create` and `Token#create.person`\n*   `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]` added new enum members: `identity.verification_session.requires_input, identity.verification_session.redacted, identity.verification_session.processing, identity.verification_session.created, identity.verification_session.canceled and identity.verification_session.verified`\n\n### May 19, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `acss_debit` on `PaymentMethod#update`\n*   `Identity.VerificationReport.created` changed from `integer` to `DateTime`\n\n### May 18, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   `Identity.VerificationSession.client_secret` changed from `string` to `nullable(string)`\n\n### May 17, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Removed support for method: `PaymentIntent#verify_microdeposits`\n*   Removed support for method: `SetupIntent#verify_microdeposits`\n\n### May 13, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   New method: `PaymentIntent#verify_microdeposits`\n*   New method: `SetupIntent#verify_microdeposits`\n\n### May 11, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   `Account#update.business_profile.support_url` and `Account#create.business_profile.support_url` changed from `string` to `emptyStringable(string)`\n*   `File.purpose` added new enum members: `finance_report_run, document_provider_identity_document and sigma_scheduled_query`\n\n### May 6, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `reference` on `Charge.payment_method_details.afterpay_clearpay`\n*   Added support for `afterpay_clearpay` on `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#create.payment_method_options` and `PaymentIntent.payment_method_options`\n\n### May 5, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `payment_intent` on `EarlyFraudWarning#list` and `Radar.EarlyFraudWarning`\n\n### May 4, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `currency` on `Checkout.Session.payment_method_options.acss_debit`\n*   Added support for `card_present` on `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#create.payment_method_options` and `PaymentIntent.payment_method_options`\n*   `SubscriptionItem#create.payment_behavior`, `Subscription#update.payment_behavior`, `Subscription#create.payment_behavior` and `SubscriptionItem#update.payment_behavior` added new enum members: `default_incomplete`\n\n### April 21, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   `Account.company.structure`, `Account#create.company.structure`, `Account#update.company.structure` and `Token#create.account.company.structure` added new enum members: `single_member_llc`\n*   `Issuing.Card.shipping.carrier` added new enum members: `dhl and royal_mail`\n\n### April 8, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `acss_debit_payments` on `Account#create.capabilities`, `Account#update.capabilities` and `Account.capabilities`\n*   Added support for `payment_method_options` on `Session#create` and `Checkout.Session`\n*   Added support for `acss_debit` on `SetupIntent#confirm.payment_method_options`, `SetupIntent#update.payment_method_options`, `SetupIntent#create.payment_method_options`, `SetupAttempt.payment_method_details`, `PaymentMethod`, `PaymentMethod#create`, `PaymentIntent.payment_method_options`, `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#create.payment_method_options`, `PaymentIntent#create.payment_method_data`, `Mandate.payment_method_details` and `SetupIntent.payment_method_options`\n*   Added support for `verify_with_microdeposits` on `PaymentIntent.next_action` and `SetupIntent.next_action`\n*   `PaymentMethod#list.type`, `PaymentMethod#create.type`, `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `Session#create.payment_method_types[]` and `PaymentMethod.type` added new enum members: `acss_debit`\n\n### April 2, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `subscription_pause` on `Configuration#update.features`, `Configuration#create.features` and `BillingPortal.Configuration.features`\n\n### March 31, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `transfer_data` on `Session#create.subscription_data`\n\n### March 26, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `card_issuing` on `Account#create.settings`, `Account#update.settings` and `Account.settings`\n\n### March 25, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   `Capability.requirements.errors[].code`, `Account.requirements.errors[].code` and `Person.requirements.errors[].code` added new enum members: `verification_missing_owners, verification_missing_executives and verification_requires_additional_memorandum_of_associations`\n*   `Session#create.locale` and `Checkout.Session.locale` added new enum members: `th`\n\n### February 19, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `prices` on `BillingPortal.Configuration.features.subscription_update.products[]`\n*   Added support for new resource `BillingPortal.Configuration`\n*   Added support for `configuration` and `on_behalf_of` on `Session#create` and `BillingPortal.Session`\n*   `WebhookEndpoint#create.enabled_events[]` and `WebhookEndpoint#update.enabled_events[]` added new enum members: `billing_portal.configuration.created and billing_portal.configuration.updated`\n\n### February 17, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `on_behalf_of` on `Invoice#update`, `Invoice#create` and `Invoice`\n*   `PaymentMethod.ideal.bank`, `PaymentMethod#create.ideal.bank`, `PaymentIntent#confirm.payment_method_data.ideal.bank`, `PaymentIntent#update.payment_method_data.ideal.bank`, `PaymentIntent#create.payment_method_data.ideal.bank`, `Charge.payment_method_details.ideal.bank` and `SetupAttempt.payment_method_details.ideal.bank` added new enum members: `revolut`\n*   `PaymentMethod.ideal.bic`, `Charge.payment_method_details.ideal.bic` and `SetupAttempt.payment_method_details.ideal.bic` added new enum members: `REVOLT21`\n*   Added support for `afterpay_clearpay` on `PaymentMethod#create`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#create.payment_method_data`, `Charge.payment_method_details` and `PaymentMethod`\n*   Added support for `adjustable_quantity` on `Session#create.line_items[]`\n*   Added support for `bacs_debit`, `au_becs_debit` and `sepa_debit` on `SetupAttempt.payment_method_details`\n*   `PaymentMethod#list.type`, `PaymentMethod#create.type`, `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `Session#create.payment_method_types[]` and `PaymentMethod.type` added new enum members: `afterpay_clearpay`\n\n### February 9, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `afterpay_clearpay_payments` on `Account#create.capabilities`, `Account#update.capabilities` and `Account.capabilities`\n*   Added support for `payment_settings` on `Invoice#update`, `Invoice#create` and `Invoice`\n\n### February 5, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   `LineItem.amount_subtotal` and `LineItem.amount_total` changed from `nullable(integer)` to `integer`\n\n### February 2, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `nationality` on `Person`, `Person#update`, `Person#create` and `Token#create.person`\n*   `TaxId#create.type`, `Invoice.customer_tax_ids[].type`, `Customer#create.tax_id_data[].type`, `Checkout.Session.customer_details.tax_ids[].type` and `TaxId.type` added new enum members: `gb_vat`\n\n### January 22, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   `Issuing.Transaction.type` dropped enum members: ‘dispute’\n*   `LineItem.price` changed from `$Price` to `nullable($Price)`\n\n### January 14, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `dynamic_tax_rates` on `Session#create.line_items[]`\n*   Added support for `customer_details` on `Checkout.Session`\n*   Added support for `type` on `Transaction#list`\n*   Added support for `country` and `state` on `TaxRate#update`, `TaxRate#create` and `TaxRate`\n\n### January 7, 2021![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `company_registration_verification`, `company_ministerial_decree`, `company_memorandum_of_association`, `company_license` and `company_tax_id_verification` on `Account#update.documents` and `Account#create.documents`\n\n### December 15, 2020![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `card_present` on `SetupAttempt.payment_method_details`\n\n### December 10, 2020![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `bank` on `PaymentMethod#create.eps`, `PaymentIntent#confirm.payment_method_data.eps`, `PaymentIntent#update.payment_method_data.eps`, `PaymentIntent#create.payment_method_data.eps`, `Charge.payment_method_details.p24`, `Charge.payment_method_details.eps` and `PaymentMethod.eps`\n*   Added support for `tos_shown_and_accepted` on `PaymentIntent#update.payment_method_options.p24`, `PaymentIntent#create.payment_method_options.p24` and `PaymentIntent#confirm.payment_method_options.p24`\n*   Added support for `bacs_debit` on `PaymentMethod#update`\n*   Added support for `application_fee_percent` on `SubscriptionSchedule#update.default_settings`, `SubscriptionSchedule#create.default_settings` and `SubscriptionSchedule.default_settings`\n\n### December 4, 2020![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `documents` on `Account#update` and `Account#create`\n*   `File#list.purpose` and `File.purpose` added new enum members: `account_requirement`\n\n### November 24, 2020![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `account_tax_ids` on `Invoice#update`, `Invoice#create` and `Invoice`\n*   Added support for `sepa_debit` on `PaymentIntent#confirm.payment_method_options`, `PaymentIntent#update.payment_method_options`, `PaymentIntent#create.payment_method_options` and `PaymentIntent.payment_method_options`\n\n### November 20, 2020![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `grabpay_payments` on `Account#create.capabilities`, `Account#update.capabilities` and `Account.capabilities`\n\n### November 19, 2020![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `mandate_options` on `SetupIntent#confirm.payment_method_options.sepa_debit`, `SetupIntent#update.payment_method_options.sepa_debit`, `SetupIntent#create.payment_method_options.sepa_debit` and `SetupIntent.payment_method_options.sepa_debit`\n*   `PaymentMethod.type` added new enum members: `card_present and interac_present`\n\n### November 18, 2020![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Added support for `grabpay` on `PaymentMethod#create`, `PaymentIntent#confirm.payment_method_data`, `PaymentIntent#update.payment_method_data`, `PaymentIntent#create.payment_method_data`, `Charge.payment_method_details` and `PaymentMethod`\n*   `PaymentMethod#list.type`, `PaymentMethod#create.type`, `PaymentIntent#confirm.payment_method_data.type`, `PaymentIntent#update.payment_method_data.type`, `PaymentIntent#create.payment_method_data.type`, `Session#create.payment_method_types[]` and `PaymentMethod.type` added new enum members: `grabpay`\n\nWas this page helpful?\n\nYesNo\n\nNeed help? [Contact Support](https://support.stripe.com/).\n\nJoin our [early access program](https://insiders.stripe.dev/).\n\nCheck out our [product changelog](https://stripe.com/blog/changelog).\n\nQuestions? [Contact Sales](https://stripe.com/contact/sales).\n\nPowered by [Markdoc](https://markdoc.dev)\n\nSign up for developer updates:\n\nSign up\n\nYou can unsubscribe at any time. Read our [privacy policy](https://stripe.com/privacy).",
  "title": "Changelog | Stripe Documentation",
  "description": "Keep track of every change to the Stripe API.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/development/dashboard/request-logs",
  "markdown": "# View API request logs | Stripe DocumentationThe Stripe Docs logo\n\n## Filter API request logs and view log entries in the Developers Dashboard.\n\nWhen you send an API request, Stripe creates an object and logs the request for your account. This page describes how to filter API request logs and view log entries for your account in the Developers Dashboard.\n\n## How requests are logged![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis table describes the different ways Stripe logs an API request for your account.\n\n| Source | API call | Logs |\n| --- | --- | --- |\n| API | When you manually trigger an event with the Stripe CLI. | Logs the API call on the [Logs](https://dashboard.stripe.com/logs) page. |\n| API | When user actions in your app or website result in an API call. | Logs the API call on the [Logs](https://dashboard.stripe.com/logs) page. |\n| API | When you call an API directly with the Stripe CLI. | Logs the API call on the [Logs](https://dashboard.stripe.com/logs) page. |\n| Dashboard | When you call an API by modifying your Stripe resources in the Dashboard. | Logs the API call on the [Logs](https://dashboard.stripe.com/logs) page. |\n\n## View your default API version![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you send requests to Stripe, you may specify an API version with the `Stripe-Version` header. If you don’t specify an API version, Stripe uses your account’s default API version. Use these steps to find all of the API versions used by your account within the last week. If you’re using the latest API version, the version is labeled `Latest`.\n\n1.  Open the [Developers Dashboard](https://dashboard.stripe.com/developers).\n2.  Your account’s default **API version** is labeled `Default`.\n\nTo view a list of versions, see the [API changelog](https://docs.stripe.com/upgrades#api-versions).\n\n## View API requests by source![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse these steps to filter requests by an API call source.\n\n1.  Open the [Logs](https://dashboard.stripe.com/logs) page.\n2.  Click **More**.\n3.  In **Source**, select **Dashboard** or **API** to filter requests by source.\n4.  Click **Apply**.\n\n## Find common integration errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse this filter to discover common integration errors by error code and API endpoint.\n\n1.  Open the [Developers Dashboard](https://dashboard.stripe.com/).\n2.  In **Recent errors**, select the filter button ().\n3.  Select an error type.\n4.  Click an error to view the request payload that failed and the reason.\n\n## Filter by resource ID![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you create, update, or delete a Stripe resource using Stripe APIs, Stripe returns a resource ID in the response payload. For example, when you [Create a customer](https://docs.stripe.com/api/customers/create), Stripe returns a customer ID (in `id`), such as `cus_ImZZa3EEvvQQQU`. Use these steps to filter API requests by resource ID.\n\n1.  Open the [Logs](https://dashboard.stripe.com/logs) page.\n2.  Enter the resource ID in the **Filter by resource** ID text field.\n\n## Apply advanced filters![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use the inline navigation to filter API requests by **Date**, **Status**, **Method** and **API endpoint**, or apply additional filters to troubleshoot requests. Use these steps to filter API requests by API version, error type, error code, and other filters, such as an IP address.\n\n1.  Open the [Logs](https://dashboard.stripe.com/logs) page.\n2.  Click **More**.\n    *   To filter by version, select an option in the **API version** dropdown menu. For example, `2024-06-20`.\n    *   To filter by error type, select an option in the **Error type** dropdown menu. For example, `card_error`.\n    *   To filter by error message, select an option in the **Error code** dropdown menu. For example, `bank_account_unverified`.\n3.  Click **Apply**.\n\n![Filter by API version](https://b.stripecdn.com/docs-statics-srv/assets/dashboard-api-version.2db0c042c6ecb829a34870d93a452aa1.png)",
  "title": "View API request logs | Stripe Documentation",
  "description": "Filter API request logs and view log entries in the Developers Dashboard.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/event-destinations/eventbridge",
  "markdown": "# Send events to Amazon EventBridge\n\n## Send events to Amazon EventBridgeInvite only\n\n## Consume Stripe events in your AWS infrastructure.\n\n[Amazon EventBridge](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-what-is.html) is a serverless, event-driven service provided by AWS that helps connect your applications together by ingesting, transforming, and delivering events. Integrating with EventBridge using an event destination allows you to receive event data from Stripe directly in your AWS account, instead of handling the traffic and managing integration code logic yourself. When events are received, EventBridge can route them to [20 supported targets](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-targets.html) to process or trigger business automations.\n\nComplete the steps below to receive events in EventBridge. This involves creating a new event destination in Workbench and setting up EventBridge configuration in the [AWS Management Console](https://docs.aws.amazon.com/awsconsolehelpdocs/latest/gsg/learn-whats-new.html).\n\n#### Warning\n\nYou won’t receive any event data in your Amazon EventBridge until you complete each step.\n\n[](#add-eventbridge-destination)\n\n#### Send events in your sandbox\n\nUse your live account or [sandboxes](https://docs.stripe.com/sandboxes) to send events to Amazon EventBridge. This feature isn’t supported in [Legacy Test mode](https://docs.stripe.com/sandboxes#test-mode-data).\n\n1.  Open **Workbench** from the Stripe Dashboard, then click the **Event destinations** tab.\n    \n2.  Click **Create new destination**.\n    \n3.  Select the events that you want to send to Amazon EventBridgeNext, then click **Continue**. If you use [Connect](https://docs.stripe.com/connect), you can select events that you want to receive from your connected accounts by selecting **Events on connected accounts**.\n    \n4.  Select **Amazon EventBridge** as your destination type, then click **Continue**.\n    \n5.  Enter the following information:\n    \n    *   [AWS account ID](https://docs.aws.amazon.com/accounts/latest/reference/manage-acct-identifiers.html): The AWS account that hosts your EventBridge instance for receiving events.\n    *   [AWS region](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/): The AWS region that hosts your EventBridge instance for receiving events.\n    *   _(Optional)_ **Destination name**: A unique name of this event destination resource in Stripe. If you don’t provide one, we generate a random name for you. You can change it later.\n    *   _(Optional)_ **Description**: A description that distinguishes your event destination instance. You can modify this later.\n6.  Click **Create destination**.\n    \n\n[](#associate-partner-event-source)\n\nAfter you set up an event destination, Stripe creates a [partner event source](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_EventSource.html) in the AWS account and region you provided during configuration. To start receiving events, you need to associate this event source with an [event bus](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-bus.html) within 7 days of the event destination’s creation. If you don’t associate it within this time frame, Amazon automatically deletes the pending event source. After an event source is deleted, your Stripe event destination is automatically disabled and you must create a new destination to receive events.\n\n1.  Under **EventBridge** in your [AWS console](https://docs.aws.amazon.com/awsconsolehelpdocs/latest/gsg/learn-whats-new.html), navigate to the [Partner event sources page](https://console.aws.amazon.com/events/home#/partners) that’s listed in the **Integration** section of the left-hand panel.\n\n![Navigate to **Partner event sources**](https://b.stripecdn.com/docs-statics-srv/assets/aws-select-partner-event-source.14ff917248eeb4f333195e6b3a431447.png)\n\n1.  Use the **Region** dropdown list located at the top of the console to select the region you chose when configuring your [event destination in Workbench](https://docs.stripe.com/event-destinations/eventbridge#add-eventbridge-destination).\n\n![Select your AWS region](https://b.stripecdn.com/docs-statics-srv/assets/aws-region.6a68960287ba6356f8e856501295a039.png)\n\n1.  Choose the newly created partner event source in the dropdown. To find the Event Source ARN field in Workbench, select your event destination. Your partner source matches the part of the ARN that reads `event-source/aws.partner/stripe.com/{UNIQUE_ID}`. Then, click **Associate with event bus**.\n\n![Associate the partner event source with event bus](https://b.stripecdn.com/docs-statics-srv/assets/aws-associate-partner-event-source.c89d540961356ff06e3fb095956ba80f.png)\n\n1.  Select permissions you want to grant for this event bus as needed, then click **Associate**.\n\n![Select permissions and finalize association](https://b.stripecdn.com/docs-statics-srv/assets/aws-associate-event-bus.28dcbc4781d814799076258c8f1b9a04.png)\n\n[](#create-evenbridge-rule)\n\nEventBridge groups and routes events based on [rules](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-rules.html) you define. After you create an event destination and associate its partner event source to an event bus, you must define rules to make sure that EventBridge knows how to handle the events it receives on the event bus. You can repeat these steps multiple times to define multiple rules.\n\n1.  Navigate to the AWS management console, then click [Rules](https://console.aws.amazon.com/events/home#/events).\n\n![Navigate to **Rules**](https://b.stripecdn.com/docs-statics-srv/assets/aws-select-rules.f385d0e668caafc9614584e2ae635138.png)\n\n1.  Click **Create Rule**, then provide a rule name and description.\n\n![Provide rule name and description](https://b.stripecdn.com/docs-statics-srv/assets/aws-define-rule.ce885bcbea4d7492f082eba2f38fd840.png)\n\n1.  Select your event bus from the dropdown. To find your event bus, navigate to Workbench, select your destination in the **Event destination** tab, then view the **Event source ARN** field, which shares the same name as your event source ARN. Then, click **Next**.\n2.  Under **Event source**, select **AWS events or EventBridge partner events** because Stripe events are partner events.\n\n![Select event source](https://b.stripecdn.com/docs-statics-srv/assets/aws-event-source.29ee4d4e795b0f7d89db7163ab7b9ac5.png)\n\n1.  _(Optional)_ Include a sample Stripe event.\n2.  Under **Creation Method**, choose **Use pattern form** to use a predefined pattern. Alternatively, you can create a custom event pattern.\n\n![Use a predefined rule patter](https://b.stripecdn.com/docs-statics-srv/assets/aws-create-rule-pattern.3246a6c5a409b1b0571f56acc6e7b91b.png)\n\n1.  Under **Event Pattern**, select **EventBridge partners** as the **Event Source**.\n2.  Under **Event Pattern**, select **Stripe** as the **Partner**.\n3.  Select the appropriate event type you want to create a rule for or select **All events** to match this rule to all event types, then click **Next**.\n4.  Select the [target](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-targets.html) you want this rule to send events to, then click **Next**.\n\n#### Recommendation\n\n![Select rule target](https://b.stripecdn.com/docs-statics-srv/assets/aws-select-target.d9da569a26cf0d6fcc81f753b16d0e60.png)\n\n1.  Add optional tags, then click **Next**.\n2.  Review your rule and make changes as needed, then click **Create Rule**.\n\nYour Stripe events are now successfully delivered to EventBridge and its corresponding targets defined in your rule.\n\n## Trigger test events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo send test events, trigger an event type that your webhook is subscribed to by manually creating an object in the Stripe Dashboard. Alternatively, you can use the following command in either [Stripe Shell](https://docs.stripe.com/stripe-shell/overview) or [Stripe CLI](https://docs.stripe.com/stripe-cli).\n\nThis example triggers a `payment_intent.succeeded` event:\n\n`stripe trigger payment_intent.succeeded Running fixture for: payment_intent Trigger succeeded! Check dashboard for event details.`\n\nLearn how to trigger events with [Stripe for VS Code](https://docs.stripe.com/stripe-vscode).\n\n## Event delivery behaviors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis section helps you understand different behaviors to expect regarding how Stripe sends events to Amazon EventBridge.\n\n### Automatic retries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe attempts to deliver events to your destination for up to three days with an exponential back off in live mode. View when the next retry will occur, if applicable, in your event destination’s **Event deliveries** tab. We retry event deliveries created in a sandbox three times over the course of a few hours. If your destination has been disabled or deleted when we attempt a retry, we prevent future retries of that event. However, if you disable and then re-enable the event destination before we’re able to retry, you still see future retry attempts.\n\n### Manual retries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo manually retry event deliveries through the **Events** tab for an event destination, click the **Retry now** button in the **Delivery attempts** section.\n\n### Event ordering![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe doesn’t guarantee the delivery of events in the order that they’re generated. For example, creating a subscription might generate the following events:\n\n*   `customer.subscription.created`\n*   `invoice.created`\n*   `invoice.paid`\n*   `charge.created` (if there’s a charge)\n\nMake sure that your event destination isn’t dependent on receiving events in a specific order. Be prepared to manage their delivery appropriately. You can also use the API to retrieve any missing objects. For example, you can retrieve the invoice, charge, and subscription objects with the information from `invoice.paid` if you receive this event first.\n\n### API versioning![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe API version in your account settings when the event occurs dictates the API version, and therefore the structure of an [Event](https://docs.stripe.com/api/v1/events) sent to your destination. For example, if your account is set to an older API version, such as 2015-02-16, and you change the API version for a specific request with [versioning](https://docs.stripe.com/api#versioning), the [Event](https://docs.stripe.com/api/v1/events) object generated and sent to your destination is still based on the 2015-02-16 API version. You can’t change [Event](https://docs.stripe.com/api/v1/events) objects after creation. For example, if you update a charge, the original charge event remains unchanged. As a result, subsequent updates to your account’s API version don’t retroactively alter existing [Event](https://docs.stripe.com/api/v1/events) objects. Retrieving an older [Event](https://docs.stripe.com/api/v1/events) by calling `/v1/events` using a newer API version also has no impact on the structure of the received event. You can set test event destinations to either your default API version or the latest API version. The [Event](https://docs.stripe.com/api/v1/events) sent to the destination is structured for the event destination’s specified version.\n\n## Event destination statuses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAmazon EventBridge destination types have several status that describe its readiness to receive events:\n\n*   **Active**: The Amazon EventBridge instance is associated with an event bus successfully. If you’ve properly configured an EventBridge rule, you can receive the events in your desired event consumers.\n*   **Disabled**: Stripe isn’t sending Amazon EventBridge events. This might happen when you manually disabled or automatically disabled by Stripe. Similar to other destination types, you can manually disable Amazon EventBridge destinations. Re-enable destinations that you manually disable at any time to continue receiving events. Stripe might also automatically disable Amazon EventBridge destinations. This happens when a partner event source is deleted. Users can manually delete partner event sources in AWS, or Amazon might delete them automatically. Amazon deletes them automatically if you don’t associate the event source with an event bus within 7 days after event destination creation. When a partner source deletion automatically disables an event destination, you can’t re-enable the event destination. If you want to continue sending events to your AWS account, you need to create a new event destination.\n*   **Pending**: After the event destination successfully creates a partner event source in AWS, you need to associate that event source with an event bus. The destination remains in a pending state and won’t receive any events until you make this association, at which point the status of the destination changes to active.\n\n## Event structure![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEventBridge uses its own [event structure](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-events-structure.html) that wraps the Stripe `event` JSON object within a top-level `detail` field.\n\nThis example is a `customer.created` event payload from EventBridge:\n\n`{    \"version\":\"0\",    \"id\":\"17e8dff5-d6cd-3770-ace9-aeac02b6ac3f\",    \"detail-type\":\"customer.created\",    \"source\":\"aws.partner/stripe.com/ed_61PgtRTG5aTCIz98516PLsRGLISQK0Otk6FWKjBrcDia\",    \"account\":\"506417113029\",    \"time\":\"2024-03-07T18:27:56Z\",    \"region\":\"us-west-2\",    \"resources\":[`\n\n## Event types that change their behaviors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSome event types alter their behaviors based on how you acknowledge them. When using EventBridge, these changes are either unsupported or might involve modified behaviors because Amazon EventBridge manages the acknowledgments.\n\n*   You can’t subscribe to the `issuing_authorization.request` event type in EventBridge. Instead, set up a [webhook endpoint](https://docs.stripe.com/webhooks) to subscribe to this event. Use `issuing_authorization.request` to authorize purchase requests in real-time. This requires your destination to approve or decline requests by responding to the event. EventBridge automatically returns a `200` status code when receiving any event. As a result, this event type can’t correctly authorize any payments.\n*   You can subscribe to `checkout_sessions.completed` when using Amazon EventBridge. However, this doesn’t [handle redirect behavior](https://docs.stripe.com/checkout/fulfillment#redirect-hosted-checkout) because Stripe-hosted [Checkout](https://docs.stripe.com/payments/checkout) doesn’t consider acknowledgement from EventBridge to redirect the user. To handle redirect behavior, process this event type with a webhook endpoint.\n\n## Common architecture patterns with EventBridge and Stripe events ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConsider the following architectural patterns when you use Amazon EventBridge with Stripe:\n\n*   **Trigger serverless functions with [Lambda](https://aws.amazon.com/lambda/) to define business automations**: Send Stripe events from EventBridge to Lambda to trigger serverless compute functions, such as creating a shipping label after a payment succeeds.\n*   **Enable event monitoring with [CloudWatch](https://aws.amazon.com/cloudwatch/)**: Send events from EventBridge to CloudWatch Logs to store events as log data that you can interactively search and analyze. Monitor usage patterns and errors with CloudWatch. Consider setting up alerts for errors (for example, when an EventBridge rule is broken).\n*   **Trigger low and no code workflows with [Step Functions](https://aws.amazon.com/step-functions/)**: Send events to a StepFunction workflow that trigger your business scenarios, such as notifying your customers that their trial is about to end.\n*   **Fan out events to internal systems with [Simple Notification Service (SNS)](https://aws.amazon.com/sns/) or [Simple Queue Service (SQS)](https://aws.amazon.com/sqs/)**: Send Stripe events to SNS or SQS to fan out Stripe event data to your internal teams to make sure that they can own and process them.",
  "title": "Send events to Amazon EventBridge | Stripe Documentation",
  "description": "Consume Stripe events in your AWS infrastructure.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/v1/events",
  "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
  "title": "Page not found | Stripe Documentation",
  "description": "Sorry, but the page you were looking for couldn't be found.",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/stripe-data/query-stripe-fees-data",
  "markdown": "# Query Stripe fees data | Stripe DocumentationThe Stripe Docs logo\n\n## Use Sigma or Data Pipeline to retrieve information about your Stripe fees.\n\nUse the `itemized_fees` table to get a comprehensive, granular breakdown of every fee charged or deducted from your Stripe balance. For example, if a balance transaction indicates a 2 USD fee for a card payment, you can query this transaction within the `itemized_fees` table to understand the breakdown. You can also use the table to understand the total fees paid to Stripe in a given period of time.\n\nHere is the list of columns available in the `itemized_fees` table:\n\n| Column | Description |\n| --- | --- |\n| balance\\_transaction\\_created | Time (in UTC) at which the balance transaction affected your Stripe balance. |\n| balance\\_transaction\\_id | The ID of the balance transaction that debited the fee from your balance. |\n| balance\\_transaction\\_description | The description of the balance transaction containing the fee. |\n| incurred\\_by | The ID of the object that incurred this fee, if any. Use the `incurred_by_type` field to determine the type of this object. |\n| incurred\\_by\\_type | The object type which `incurred_by` references. Matches the object field in the API ([Charge](https://docs.st