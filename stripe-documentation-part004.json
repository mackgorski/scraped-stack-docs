[
  {
    "url": "https://docs.stripe.com/billing/revenue-recovery/customer-emails",
    "markdown": "# Automate customer emails | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how you can use customer emails to recover revenue.\n\nCustomer emails help prevent involuntary churn by notifying customers and giving them a chance to intervene when churn is likely, like when a payment fails.\n\nEnable email notifications for all the use cases that make sense for your business. We recommend you minimally provide a way for customers to:\n\n*   [Confirm payments](#payment-confirmation-notifications)\n*   [Correct failed payments](#failed-payment-notifications)\n\n## Configure emails![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can turn on customer emails in your [subscriptions and emails settings](https://dashboard.stripe.com/settings/billing/automatic) Dashboard without writing any code. All of these emails and hosted pages use your [branding settings](https://dashboard.stripe.com/settings/branding).\n\nEmails for the following notification types include a link to a page where the customer can update their payment method.\n\n*   Payment confirmation notifications\n*   Failed payment notifications\n*   Trial ending reminders\n*   Renewal reminders\n*   Expiring card notifications\n\nYou can set the link destination to your own custom link or [a Stripe-hosted page](#link-to-a-stripe-hosted-page). If you **Use your own custom link** and don’t provide a URL, we use your business website.\n\n## Failed payment notifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNotify your customers about failed payments for subscriptions to encourage them to resolve the reason for failure, such as an expired card. Enable **Send emails when card payments fail** in the [revenue recovery settings](https://dashboard.stripe.com/revenue_recovery/emails) page.\n\nWhen you enable this setting, Stripe automatically sends an email to your customer after each failed payment. The email lets your customer know that their recent subscription payment failed and gives them the opportunity to update their payment method so it can be retried successfully.\n\n### Customize the email message Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor failed payment emails, you can write your own email message to your customers instead of using the default email message. You’ll also need to use a verified [custom domain](https://docs.stripe.com/get-started/account/email-domain) to send emails from.\n\n1.  Click the **customize** link in the sentence below the **Send emails to customers to update failed card payment methods** option.\n    \n2.  Choose the **Use your own custom email** option.\n    \n3.  Read the email policy guidelines. By law, you can’t add promotional content without explicit consent from the customer.\n    \n4.  Fill out the contents of the email. As you enter information, you can see a preview of the email.\n    \n\n## Unpaid recurring invoice reminders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo send reminder emails about unpaid invoices, enable **Send reminders if a recurring invoice hasn’t been paid** in the [billing settings page](https://dashboard.stripe.com/settings/billing/automatic), in the **Manage invoices sent to customers** section.\n\nThis sends payment reminders for recurring invoices with a collection method of [send\\_invoice](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method) on the configured schedule.\n\n## Trial ending reminders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUnder [Manage free trial messaging](https://dashboard.stripe.com/settings/billing/automatic), turn on **Send a reminder email 7 days before a free trial ends** to send a trial ending reminder.\n\nWhen the trial ends without a payment method and the subscription is paused, customers can activate the subscription on the hosted page. They can add a payment method to activate the subscription and pay the first invoice.\n\n## Renewal reminders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUnder [Prevent failed payments](https://dashboard.stripe.com/settings/billing/automatic), turn on **Send emails about upcoming renewals**.\n\nStripe sends this email before the current renewal period ends based on the days configured in the **Upcoming renewal events** section.\n\nThe renewal date in the email uses the customer’s timezone. If the customer’s timezone isn’t defined, it uses the timezone set in your [account settings](https://dashboard.stripe.com/settings/account). Otherwise, it defaults to UTC.\n\n## Payment confirmation notifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSome payments might require manual customer intervention, like those that use [3D Secure](https://docs.stripe.com/payments/3d-secure) or the [Boleto](https://docs.stripe.com/payments/boleto/accept-a-payment) payment method. You can [manage payments that require confirmation](https://dashboard.stripe.com/settings/billing/automatic) in the Dashboard.\n\n1.  To automatically send an email to your customer when their payment requires confirmation, enable **Send a Stripe-hosted link for customers to confirm their payments when required**. The email includes a link to a Stripe-hosted page where your customer can confirm the payment.\n2.  To continue sending emails until your customer confirms the payment or it expires, enable **Send reminders if payment confirmation isn’t completed**. You can customize the intervals at which Stripe sends these reminders. Each reminder includes a link similar to the original email where the customer can confirm the payment.\n\n## Expiring card notifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUnder [Prevent failed payments](https://dashboard.stripe.com/revenue_recovery/emails), turn on **Send emails about expiring cards**.\n\nThis automatically sends an email 1 month before your customer’s card on file expires.\n\n## Link to a Stripe-hosted page ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the **Link to a Stripe-hosted page** option, Stripe provides a secure, private URL to a Stripe-hosted page in the email. Stripe doesn’t include a link to the Stripe-hosted page if the subscription is set to manually send an invoice.\n\nOn that page, your customer can update their payment method for the relevant subscription and pay any outstanding invoices if applicable.\n\nHow a customer updates their payment method on the Stripe-hosted page.\n\nAny of the following conditions invalidate the link to the hosted payment page:\n\n*   It’s been 30 days since we sent the trial ending email.\n*   The [subscription status](https://docs.stripe.com/billing/subscriptions/overview#subscription-statuses) changes to `cancelled`, `incomplete_expired`, or `unpaid`.\n*   The trial ended and the customer already provided a payment method for the subscription.\n*   The subscription’s current renewal period expired.\n\n## Test your configuration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn [test mode](https://docs.stripe.com/test-mode \"test mode\"), Stripe doesn’t automatically send customer emails. To test your customer email settings, use email addresses that belong to your verified [email domain](https://dashboard.stripe.com/settings/emails) or an active [team member](https://dashboard.stripe.com/settings/team). If a test mode customer’s email matches either of those conditions, Stripe sends failed payment notifications, upcoming invoice reminders, trial ending reminders, and card expiring reminders in test mode.\n\n## Email logs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can find logs for emails sent within the last 30 days on the [customer](https://dashboard.stripe.com/customers) page. The logs are updated daily, so they don’t include emails from the current date.\n\nWe log the following types of email notifications:\n\n*   Failed payment attempts.\n*   Finalized invoices.\n*   Receipts for paid invoices.\n*   Payments requiring 3D Secure.\n*   Expiring cards on file.\n*   Unpaid one-off invoices. Invoicing Plus\n*   Created credit notes.\n*   Issued refunds.\n*   Ending subscription trials.\n*   Canceled subscriptions.",
    "title": "Automate customer emails | Stripe Documentation",
    "description": "Configure Stripe to automatically email your subscription customers when something goes wrong with their payment or payment source.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/zero-tax",
    "markdown": "# Zero tax amounts and reverse charges\n\n## Learn about cases when Stripe Tax calculates zero tax.\n\n#### Note\n\nStripe Tax returns a tax calculation result on every request. However, Tax isn’t collected on a transaction in some situations, and the resulting tax amount is zero. For example, if you’re expanding `tax_amounts` on an [invoice](https://docs.stripe.com/api/invoices \"invoices\"), you might see something like:\n\n`{   \"id\": \"in_1HF0KNFsnTpWVWVzFDgSizOj\",   \"object\": \"invoice\",   ...   \"total_details\": {     \"amount_tax\": 0,     \"breakdown\": {       \"taxes\": [         {           \"amount\": 0,           \"taxability_reason\": \"not_collecting\",           \"rate\": {             \"id\": \"txr_1HHwa4Jm3J7Jh9FBnYJ9glJZ\",             \"object\": \"tax_rate\",             \"description\": \"VAT Germany\",             \"display_name\": \"VAT\",             \"country\": \"DE\",             \"created\": 1597863856,             \"inclusive\": false,             \"jurisdiction\": \"DE\",             \"livemode\": false,             \"metadata\": {},             \"percentage\": 0.0,             \"state\": null,             \"tax_type\": \"vat\",             \"active\": false,           }         }       ]     },   },   ... }`\n\nThe API returns the reason for a tax result in the [taxability\\_reason](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-tax_amounts-taxability_reason) field.\n\nThe most common reasons for a zero tax result are the following:\n\n| Reason | taxability\\_reason | Explanation |\n| --- | --- | --- |\n| Not registered | `not_collecting` | You must register before collecting tax in a jurisdiction. You can specify where you’re registered to collect tax on [the Tax settings page](https://dashboard.stripe.com/settings/tax). |\n| Exempt or zero-rated products | `product_exempt` | Certain products are exempt from tax or zero-rated. In both cases the buyer doesn’t pay tax. |\n| Reverse charge | `reverse_charge` | Transactions between two businesses might be subject to reverse charge. In these cases, the buyer is responsible for accounting for the VAT due under the reverse charge. |\n| Exempt customers | `customer_exempt` | Some customers are exempt from paying indirect tax in certain jurisdictions. You can specify when a customer is exempt on the Customer object. |\n| Excluded territory | `not_supported` | Some countries have administrative subdivisions or territories, with the geographic region being outside the scope of the associated country’s VAT system. A list of these excluded territories is below. |\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/taxability.cfcdfce0aab058702149b65a5804547a.png)\n\nThe tax outcome for each payment is available when viewing a payment in [the Dashboard](https://dashboard.stripe.com/) under Taxability.\n\n## Situations where Stripe calculates zero tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Tax calculates zero tax in the following situations:\n\n### Not registered![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTaxing authorities require businesses to obtain a license or otherwise register before starting to collect tax in their jurisdiction. Each jurisdiction has their own rules regarding when you’re obligated to register and begin collecting and remitting tax. Obligations can arise from, but are not limited to, a physical presence in the jurisdiction or from reaching a threshold of sales into a jurisdiction. For example, as of February 2021, for businesses based outside of California (for example, no physical presence), you only need to register when you surpass 500,000 USD in sales.\n\nStripe automatically aggregates and analyzes your transactions and compares them to local thresholds. You can see these and add your registrations on the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds).\n\nLearn more about how to [register for sales tax, VAT, and GST](https://docs.stripe.com/tax/supported-countries) in each location and, if you’re a Connect platform, how to [use the Registrations API to manage tax registrations](https://docs.stripe.com/tax/registrations-api).\n\n### Exempt or zero rated products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nProducts might be exempt or nontaxable in some jurisdictions. For example, as of February 2021, the state of California considers software as a service to be a nontaxable service. The buyer pays no tax and the seller usually can’t reclaim any credits from costs associated with producing the product.\n\nProducts can also be zero-rated, meaning while they’re technically taxable, the applied rate is 0%. For example, as of February 2021, children’s clothing is zero-rated in Ireland. The buyer pays no tax, however the seller might be able to reclaim credits from costs associated with producing the product.\n\nThe tax treatment of products not only varies by jurisdiction but is subject to change. If you don’t want to collect tax on a given product, you can assign the product tax code Nontaxable (`txcd_00000000`) to it, to make sure Stripe Tax treats it as a nontaxable product. Otherwise, Stripe Tax automatically determines when a product is exempt or zero rated.\n\n### Reverse charges ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhile in most transactions, the seller is responsible for collecting and remitting tax owed by the buyer, in a reverse charge transaction the buyer must calculate and remit the tax. In that case, the seller’s invoice specifies that the transaction is a reverse charge and doesn’t include tax in the total amount. A reverse charge is common in cross-border B2B supply of services. For example, for businesses with an origin address in the EU, the following logic applies:\n\n| Buyers from | B2C | B2B |\n| --- | --- | --- |\n| Same EU country | Charge VAT | Charge VAT |\n| Different EU country | Charge VAT | No VAT (reverse charge) |\n\nStripe Tax automatically applies the right logic depending on the presence of a tax ID and the jurisdictions involved in the transaction.\n\nFor transactions with `inclusive` tax behavior where reverse charge applies, the buyer pays the full `unit_amount` Price, but isn’t charged tax. In these cases, a “Reverse Charge” indicator appears in the Stripe Dashboard, and the Invoice reads “Tax to be paid on reverse charge basis” instead of zero.\n\nIf you haven’t collected the customer’s tax ID in Stripe, but you want to handle their transactions as reverse charges, set their `customer.tax_exempt` attribute to `reverse`. If Checkout creates a one-time payment, the exemption status is instead captured as `customer_details` in the Checkout Session object. You’re responsible for making sure that customer information is accurate (including a tax identification number).\n\nThe following examples show invoices generated with and without a known customer tax ID:\n\n*   [Customer’s tax ID automates reverse charge (PDF)](https://stripe.com/files/docs/billing/taxes/example-reverse-charge.pdf)\n*   [Explicitly set reverse charge (PDF)](https://stripe.com/files/docs/billing/taxes/example-reverse-charge-customer.pdf)\n\nStripe displays the provided customer tax ID on an invoice, regardless of whether it’s valid. Stripe Tax automatically validates the tax ID format against the expected format and the tax ID value against external tax authority systems for certain countries.\n\n[Learn more about Tax IDs](https://docs.stripe.com/billing/customer/tax-ids)\n\n[](#exempt-customers)\n\nExempt customers are those who under a jurisdiction’s rules can make tax-exempt purchases. Each taxing jurisdiction determines the type of individuals or entities who can make tax-exempt purchases. Common examples are nonprofit organizations and government entities.\n\nIf you have customers that are exempt from paying tax, set their tax status to `exempt` and provide the customer ID when creating a subscription, invoice, or Checkout Session. To set a customer’s exempt status, use the API to set the `customer.tax_exempt` field to `exempt` or use the Dashboard:\n\n1.  On the [Customers page](https://dashboard.stripe.com/customers), select the customer.\n2.  Open the overflow menu () and select **Edit information**.\n3.  Scroll to the **Tax status** section and select **Exempt** from the dropdown.\n\nFor transactions with `inclusive` tax behavior where the customer is exempt, the buyer pays the full `unit_amount` Price, but there’s no tax charged. In these cases, an “Exempt” indicator appears in the Stripe Dashboard and the Invoice reads “Customer is tax exempt” instead of zero.\n\n[Download example exempt invoice PDF](https://stripe.com/files/docs/billing/taxes/example-exempt.pdf)\n\nStripe Tax automatically calculates an exemption on the transaction when you set the `customer.tax_exempt` field, but it doesn’t perform any validation of required documentation for supporting an exemption such as customer exemption certificates. You’re responsible for determining and fulfilling any obligation to validate your customer’s exempt status and collect any required documentation such as an exemption certificate.\n\n[](#excluded-territories)\n\n#### Note\n\nStripe Tax fees apply to transactions in excluded territories if you’re registered in the country the territory is located in.\n\nSome countries include administrative subdivisions or territories that are outside the scope of their general VAT system. In some of these territories no tax is levied, while others may have their own tax regulations and rates.\n\nStripe Tax does not calculate tax in the territories listed below even if you’re registered in the country where the territory belongs to. Stripe Tax automatically determines if your customer is based in an excluded or unsupported territory using the postal code and jurisdiction name.\n\n| Country | Excluded Territories |\n| --- | --- |\n| Andora | *   Andora |\n| Denmark | *   Faroe Islands<br>*   Greenland |\n| Finland | *   Åland Islands |\n| France | *   French Guyana<br>*   French Polynesia<br>*   Guadalupe<br>*   Martinique<br>*   Mayotte<br>*   Reunion<br>*   Saint Barthélemy<br>*   Saint Martin<br>*   Saint Pierre and Miquelon<br>*   Wallis and Futuna |\n| Italy | *   Vatican City |\n| Liechtenstein | *   Liechtenstein |\n| Monaco | *   Monaco |\n| Netherlands | *   Aruba<br>*   Bonaire<br>*   Curacao<br>*   Saba<br>*   Sint Eustatius<br>*   Sint Maarten |\n| Norway | *   Jan Mayen<br>*   Svalbard |\n| Portugal | *   Azores<br>*   Madeira |\n| San Marino | *   San Marino |\n| Spain | *   Canary Islands<br>*   Ceuta<br>*   Melilla |\n| United Kingdom | *   British Virgin Islands<br>*   Channel Islands (Guernsey and Jersey)<br>*   Falkland Islands<br>*   Gibraltar |",
    "title": "Zero tax amounts and reverse charges | Stripe Documentation",
    "description": "Learn about cases when Stripe Tax calculates zero tax.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/checkout/tax-ids",
    "markdown": "# Collect Customer Tax IDs with Checkout\n\n## Learn how to collect VAT and other customer tax IDs with Checkout.\n\nDisplaying a customer’s tax ID and legal business name on [invoices](https://docs.stripe.com/api/invoices \"invoices\") is a common requirement that you can satisfy by enabling tax ID collection in Checkout. This guide assumes that you’ve already integrated Checkout. If you haven’t, see the [Accept a payment guide](https://docs.stripe.com/payments/accept-a-payment).\n\n[](#supported-types)\n\nCheckout collects the following tax ID types in the given regions:\n\n| Country | Enum | Description | Example |\n| --- | --- | --- | --- |\n| Australia | `au_abn` | Australian Business Number (AU ABN) | _12345678912_ |\n| Austria | `eu_vat` | European VAT number | _ATU12345678_ |\n| Bahrain | `bh_vat` | Bahraini VAT Number | _123456789012345_ |\n| Belgium | `eu_vat` | European VAT number | _BE0123456789_ |\n| Bulgaria | `eu_vat` | European VAT number | _BG0123456789_ |\n| Canada | `ca_bn` | Canadian BN | _123456789_ |\n| Canada | `ca_gst_hst` | Canadian GST/HST number | _123456789RT0002_ |\n| Canada | `ca_pst_bc` | Canadian PST number (British Columbia) | _PST-1234-5678_ |\n| Canada | `ca_pst_mb` | Canadian PST number (Manitoba) | _123456-7_ |\n| Canada | `ca_pst_sk` | Canadian PST number (Saskatchewan) | _1234567_ |\n| Canada | `ca_qst` | Canadian QST number (Québec) | _1234567890TQ1234_ |\n| Chile | `cl_tin` | Chilean TIN | _12.345.678-K_ |\n| Croatia | `eu_vat` | European VAT number | _HR12345678912_ |\n| Cyprus | `eu_vat` | European VAT number | _CY12345678Z_ |\n| Czech Republic | `eu_vat` | European VAT number | _CZ1234567890_ |\n| Denmark | `eu_vat` | European VAT number | _DK12345678_ |\n| Egypt | `eg_tin` | Egyptian Tax Identification Number | _123456789_ |\n| Estonia | `eu_vat` | European VAT number | _EE123456789_ |\n| Finland | `eu_vat` | European VAT number | _FI12345678_ |\n| France | `eu_vat` | European VAT number | _FRAB123456789_ |\n| Georgia | `ge_vat` | Georgian VAT | _123456789_ |\n| Germany | `eu_vat` | European VAT number | _DE123456789_ |\n| Greece | `eu_vat` | European VAT number | _EL123456789_ |\n| Hungary | `eu_vat` | European VAT number | _HU12345678_ |\n| Iceland | `is_vat` | Icelandic VAT | _123456_ |\n| India | `in_gst` | Indian GST number | _12ABCDE3456FGZH_ |\n| Ireland | `eu_vat` | European VAT number | _IE1234567AB_ |\n| Italy | `eu_vat` | European VAT number | _IT12345678912_ |\n| Kazakhstan | `kz_bin` | Kazakhstani Business Identification Number | _123456789012_ |\n| Kenya | `ke_pin` | Kenya Revenue Authority Personal Identification Number | _P000111111A_ |\n| Latvia | `eu_vat` | European VAT number | _LV12345678912_ |\n| Lithuania | `eu_vat` | European VAT number | _LT123456789123_ |\n| Luxembourg | `eu_vat` | European VAT number | _LU12345678_ |\n| Malta | `eu_vat` | European VAT number | _MT12345678_ |\n| Mexico | `mx_rfc` | Mexican RFC number | _ABC010203AB9_ |\n| Netherlands | `eu_vat` | European VAT number | _NL123456789B12_ |\n| New Zealand | `nz_gst` | New Zealand GST number | _123456789_ |\n| Nigeria | `ng_tin` | Nigerian Tax Identification Number | _12345678-0001_ |\n| Norway | `no_vat` | Norwegian VAT number | _123456789MVA_ |\n| Oman | `om_vat` | Omani VAT Number | _OM1234567890_ |\n| Poland | `eu_vat` | European VAT number | _PL1234567890_ |\n| Portugal | `eu_vat` | European VAT number | _PT123456789_ |\n| Romania | `eu_vat` | European VAT number | _RO1234567891_ |\n| Russia | `ru_inn` | Russian INN | _1234567891_ |\n| Russia | `ru_kpp` | Russian KPP | _123456789_ |\n| Saudi Arabia | `sa_vat` | Saudi Arabia VAT | _123456789012345_ |\n| Singapore | `sg_gst` | Singaporean GST | _M12345678X_ |\n| Slovakia | `eu_vat` | European VAT number | _SK1234567891_ |\n| Slovenia | `eu_vat` | European VAT number | _SI12345678_ |\n| South Africa | `za_vat` | South African VAT number | _4123456789_ |\n| South Korea | `kr_brn` | Korean BRN | _123-45-67890_ |\n| Spain | `es_cif` | Spanish NIF number (previously Spanish CIF number) | _A12345678_ |\n| Spain | `eu_vat` | European VAT number | _ESA1234567Z_ |\n| Sweden | `eu_vat` | European VAT number | _SE123456789123_ |\n| Switzerland | `ch_vat` | Switzerland VAT number | _CHE-123.456.789 MWST_ |\n| Taiwan | `tw_vat` | Taiwanese VAT | _12345678_ |\n| Thailand | `th_vat` | Thai VAT | _1234567891234_ |\n| Turkey | `tr_tin` | Turkish Tax Identification Number | _0123456789_ |\n| Ukraine | `ua_vat` | Ukrainian VAT | _123456789_ |\n| United Arab Emirates | `ae_trn` | United Arab Emirates TRN | _123456789012345_ |\n| United Kingdom | `eu_vat` | Northern Ireland VAT number | _XI123456789_ |\n| United Kingdom | `gb_vat` | United Kingdom VAT number | _GB123456789_ |\n\n[](#create-session)\n\nWith tax ID collection enabled, Checkout shows and hides the tax ID collection form depending on your customer’s location. If your customer is in a location supported by tax ID collection, Checkout shows a checkbox allowing the customer to indicate that they’re purchasing as a business. When a customer checks the box, Checkout displays fields for them to enter the tax ID and legal entity name for the business. If available, Checkout uses the customer’s shipping address to determine their location, otherwise Checkout uses the customer’s billing address. Customers can only enter one tax ID.\n\n### New Customers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo enable tax ID collection for new customers, set [`tax_id_collection[enabled]`](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-tax_id_collection-enabled) to `true` when creating a Checkout session.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"line_items[0][price_data][unit_amount]\"=1000 \\  -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\  -d \"line_items[0][price_data][currency]\"=eur \\  -d \"line_items[0][quantity]\"=2 \\  -d \"tax_id_collection[enabled]\"=true \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n#### Note\n\nThe above code example creates a Session in `payment` mode with tax ID collection enabled. For subscriptions, make the same changes with the [mode](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-mode) set to `subscription`.\n\nYou can additionally configure Checkout to create a new [Customer](https://docs.stripe.com/api/customers/object) for you using [customer\\_creation](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-customer_creation). If you do, Checkout saves any tax ID information collected during a Session to that new [Customer](https://docs.stripe.com/api/customers \"Customers\"). If not, the tax ID information will still be available at [customer\\_details.tax\\_ids](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-customer_details-tax_ids).\n\n### Existing Customers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you pass an existing Customer when creating a Session, Checkout updates the Customer with any tax ID information collected during the Session. Checkout saves the collected business name onto the Customer’s [name](https://docs.stripe.com/api/customers/object#customer_object-name) property, and adds the collected tax ID to the Customer’s [customer.tax\\_ids](https://docs.stripe.com/api/customers/object#customer_object-tax_ids) array. Since the collection of a business name could result in the Customer’s existing [name](https://docs.stripe.com/api/customers/object#customer_object-name) being overridden, you must set [customer\\_update.name](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-customer_update-name) to `auto` when creating the Session.\n\n#### Caution\n\nCheckout only collects tax IDs on Customer’s that don’t already have an existing tax ID. If a Customer has one or more tax IDs saved, Checkout doesn’t display the tax ID collection form even if tax ID collection is enabled.\n\nWhen collecting tax IDs for existing customers you can either base their location on existing addresses on the customer or the addresses entered during checkout. By default, Checkout looks for existing addresses on the customer to assess their location:\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"line_items[0][price_data][unit_amount]\"=1000 \\  -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\  -d \"line_items[0][price_data][currency]\"=eur \\  -d \"line_items[0][quantity]\"=2 \\  -d \"tax_id_collection[enabled]\"=true \\  -d \"customer_update[name]\"=auto \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\nIf you don’t have the addresses of your existing customers saved, you can base their location on the billing or shipping address entered during Checkout. To specify that you want to use the billing address entered during Checkout to assess the customer’s location, you must set [customer\\_update.address](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-customer_update-address) to `auto`.\n\n#### Note\n\nWhen setting [customer\\_update.address](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-customer_update-address) to `auto`, Checkout replaces any previously saved addresses on the customer with the address entered during the session.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"line_items[0][price_data][unit_amount]\"=1000 \\  -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\  -d \"line_items[0][price_data][currency]\"=eur \\  -d \"line_items[0][quantity]\"=2 \\  -d \"tax_id_collection[enabled]\"=true \\  -d \"customer_update[name]\"=auto \\  -d \"customer_update[address]\"=auto \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\nIf you’re collecting shipping addresses for existing customers, you must base their location on the shipping address entered during checkout. To do so, set [customer\\_update.shipping](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-customer_update-shipping) to `auto`.\n\n#### Note\n\nWhen setting [customer\\_update.shipping](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-customer_update-shipping) to `auto`, Checkout replaces any previously saved shipping addresses on the customer with the shipping address entered during the session.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=cus_HQmikpKnGHkNwW \\  -d \"line_items[0][price_data][unit_amount]\"=1000 \\  -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\  -d \"line_items[0][price_data][currency]\"=eur \\  -d \"line_items[0][quantity]\"=2 \\  -d \"tax_id_collection[enabled]\"=true \\  -d \"customer_update[name]\"=auto \\  -d \"customer_update[shipping]\"=auto \\  -d \"shipping_address_collection[allowed_countries][0]\"=DE \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n#### Note\n\nThe above code example creates a Session in `payment` mode with tax ID collection enabled. For subscriptions, make the same changes with the [mode](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-mode) set to `subscription`.\n\n[](#retrieving-details)\n\nCheckout includes provided tax IDs on the resulting [Session](https://docs.stripe.com/api/checkout/sessions/object) object. After each completed Session, Checkout emits a [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) event that you can listen for in a [webhook](https://docs.stripe.com/webhooks \"webhook\") endpoint. If you want to retrieve the collected tax ID from the Session object, it’s available under the Session’s [customer\\_details.tax\\_ids](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-customer_details-tax_ids) array:\n\n`{   \"object\": {     \"id\": \"cs_test_a1dJwt0TCJTBsDkbK7RcoyJ91vJxe2Y\",     \"object\": \"checkout.session\",     ...     \"customer\": \"cus_id_of_new_customer\",     \"customer_details\": {       ...       \"tax_ids\": [         {`\n\nCheckout also saves collected tax IDs and business names to the [Customer](https://docs.stripe.com/api/customers/object) object if one is associated with the Session. A tax ID collected during checkout is accessible under the Customer’s [customer.tax\\_ids](https://docs.stripe.com/api/customers/object#customer_object-tax_ids) array. You can also retrieve all tax IDs saved to a Customer with the [Tax IDs](https://docs.stripe.com/api/tax_ids/list) resource by specifying the [owner.type](https://docs.stripe.com/api/tax_ids/list#list_tax_ids-owner-type) parameter to `customer` and [owner.customer](https://docs.stripe.com/api/tax_ids/list#list_tax_ids-owner-customer) to the Customer’s ID. Every new tax ID includes an associated legal business name, which Checkout saves to the Customer’s [name](https://docs.stripe.com/api/customers/object#customer_object-name) property. In doing so, the collected legal business name is always visible on any subscription invoices for that Customer.\n\n[](#testing)\n\nIn test mode you can enter any alphanumeric string that is in the correct format of a supported tax ID type (for example, `DE123456789` for `eu_vat`). For a full list of example tax IDs you can reference our [Customer Tax ID guide](https://docs.stripe.com/billing/customer/tax-ids#supported-tax-id). You can also use our [test tax IDs](https://docs.stripe.com/connect/testing#test-business-tax-ids) to test various verification state flows.\n\n[](#validation)\n\nCheckout performs checks during the Session to make sure that provided tax IDs are formatted correctly. We don’t verify that provided tax IDs are valid during the Session. You’re responsible for ensuring the validity of customer information collected during Checkout. To help, Stripe automatically performs asynchronous validation against government databases for [Australian Business (ABN)](https://docs.stripe.com/billing/customer/tax-ids#abn) numbers, [European Value-Added-Tax (EU VAT)](https://docs.stripe.com/billing/customer/tax-ids#eu-vat) numbers, and [United Kingdom Value-Added-Tax (GB VAT)](https://docs.stripe.com/billing/customer/tax-ids#gb-vat) numbers. You can read more on the validation we perform, and how to consume the status of those checks in our [Customer Tax ID guide](https://docs.stripe.com/billing/customer/tax-ids#validation).",
    "title": "Collect Customer Tax IDs with Checkout | Stripe Documentation",
    "description": "Learn how to collect VAT and other customer tax IDs with Checkout.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/tax_ids/create",
    "markdown": "# Create a tax ID | Stripe API Reference\n\nCreates a new account or customer `tax_id` object.\n\n### Parameters\n\n*   Type of the tax ID, one of `ad_nrt`, `ae_trn`, `ar_cuit`, `au_abn`, `au_arn`, `bg_uic`, `bh_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_uid`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kr_brn`, `kz_bin`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sv_nit`, `th_vat`, `tr_tin`, `tw_vat`, `ua_vat`, `us_ein`, `uy_ruc`, `ve_rif`, `vn_tin`, or `za_vat`\n    \n*   Value of the tax ID.\n    \n\n### More parameters\n\n### Returns\n\nThe created `tax_id` object.\n\n```\ncurl https://api.stripe.com/v1/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=eu_vat \\  -d value=DE123456789\n```\n\n```\n{  \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 123456789,  \"customer\": null,  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": null,  \"owner\": {    \"type\": \"self\",    \"customer\": null  }}\n```\n\n## [Retrieve a Customer tax ID](https://docs.stripe.com/api/tax_ids/customer_retrieve)\n\nRetrieves the `tax_id` object with the given identifier.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `tax_id` object if a valid identifier was provided.\n\nGET /v1/customers/:id/tax\\_ids/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids/txi_1MoC8zLkdIwHu7ixEhgWcHzJ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 1679431857,  \"customer\": \"cus_NZKoSNZZ58qtO0\",  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": {    \"status\": \"pending\",    \"verified_address\": null,    \"verified_name\": null  }}\n```\n\n## [Retrieve a tax ID](https://docs.stripe.com/api/tax_ids/retrieve)\n\nRetrieves an account or customer `tax_id` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `tax_id` object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/tax_ids/txi_1NuMB12eZvKYlo2CMecoWkZd \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 123456789,  \"customer\": null,  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": null,  \"owner\": {    \"type\": \"self\",    \"customer\": null  }}\n```\n\n## [List all Customer tax IDs](https://docs.stripe.com/api/tax_ids/customer_list)\n\nReturns a list of tax IDs for a customer.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` tax IDs, starting after tax ID `starting_after`. Each entry in the array is a separate `tax_id` object. If no more tax IDs are available, the resulting array will be empty. Raises [an error](#errors) if the customer ID is invalid.\n\nGET /v1/customers/:id/tax\\_ids\n\n```\ncurl -G https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids\",  \"has_more\": false,  \"data\": [    {      \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",      \"object\": \"tax_id\",      \"country\": \"DE\",      \"created\": 1679431857,      \"customer\": \"cus_NZKoSNZZ58qtO0\",      \"livemode\": false,      \"type\": \"eu_vat\",      \"value\": \"DE123456789\",      \"verification\": {        \"status\": \"pending\",        \"verified_address\": null,        \"verified_name\": null      }    }    {...}    {...}  ],}\n```\n\n## [List all tax IDs](https://docs.stripe.com/api/tax_ids/list)\n\nReturns a list of tax IDs.\n\n### Parameters\n\n*   The account or customer the tax ID belongs to. Defaults to `owner[type]=self`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` tax IDs, starting after tax ID `starting_after`. Each entry in the array is a separate `tax_id` object. If no more tax IDs are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/tax_ids\",  \"has_more\": false,  \"data\": [    {      \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",      \"object\": \"tax_id\",      \"country\": \"DE\",      \"created\": 123456789,      \"customer\": null,      \"livemode\": false,      \"type\": \"eu_vat\",      \"value\": \"DE123456789\",      \"verification\": null,      \"owner\": {        \"type\": \"self\",        \"customer\": null      }    }    {...}    {...}  ],}\n```",
    "title": "Create a tax ID | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/taxes",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Taxes\n\n## Learn about Stripe Tax and how to use it with invoices.\n\nOn an [invoice](https://docs.stripe.com/api/invoices \"invoices\"), Stripe Tax calculates sales tax, VAT, and GST. To calculate these for each line item, Stripe uses:\n\n*   Your [tax settings](https://dashboard.stripe.com/settings/tax)\n*   The customer’s tax settings and location\n*   The product tax code and price tax behavior\n\n#### Note\n\n## Set up the customer ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe use the customer’s location to determine the relevant taxes to collect. Customers outside of the US need at least a country-level address, while customers in the US require a 5-digit postal code. For Canada, we need at least the province or postal code.\n\nYou can add customer location information in the **Customer details** page by clicking **Edit** next to **Details**. To add a customer’s location from the [Invoice Editor](https://dashboard.stripe.com/invoices/create), click the overflow menu () next to the customer. Select **Edit customer information**, click **Add additional details**, and scroll down to **Billing details**.\n\nAfter you update the location, click **Update customer**. Stripe applies the new location to all of your customer’s future invoices unless you update it. For more information, see [Determine customer locations](https://docs.stripe.com/tax/customer-locations).\n\n## Set up line items![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo calculate tax on each line item on an invoice, you need to set a tax behavior and optionally a tax code.\n\n### Customize tax settings for one-off line items![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustomize line items in the Invoice Editor by selecting the tax behavior from the **Include tax in price** drop-down menu.\n\n![Customize tax settings for one-off line items](https://b.stripecdn.com/docs-statics-srv/assets/invoicing_price.faa90fb6b3cb833b900e06cb2187d339.png)\n\nCustomize tax settings for one-off line items\n\n### Customize tax settings for product-based line items ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use both the Dashboard and the API to customize tax settings for product-based line items.\n\nOn the [Products page](https://dashboard.stripe.com/products), you can select both the tax behavior for a particular price and the optional tax code for the product. The tax behavior is per price. You can’t change the tax behavior after you select it, but you can create new prices or archive old ones. To set up a tax behavior, click **Add a price** (or **Add another price** if you already have one) and select it from the **Tax behavior** drop-down menu.\n\nTo set up a tax code, select it from the **Tax code** drop-down menu when you create a new product or edit the details of an existing one.\n\n![Customize tax settings for one-off line items](https://b.stripecdn.com/docs-statics-srv/assets/invoicing_new_price.517f186f27925e52e501019b9aecc94b.png)\n\nCustomize tax settings for one-off line items\n\n## Enable automatic tax ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter specifying a tax behavior and tax code, you can add the price to the customer as an invoice item:\n\n`curl https://api.stripe.com/v1/invoiceitems \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=cus_13729he8947269 \\  -d price=price_1K6mzG2eZvKYlo2CK7kcBICl`\n\nSet the toggle in the **Invoice Editor**. In the API, you need to pass the `automatic_tax` field to enable or disable automatic tax calculation. Both steps are required to start calculating tax automatically.\n\n`curl https://api.stripe.com/v1/invoices \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"customer\"=\"cus_13729he8947269\" \\   -d \"automatic_tax[enabled]\"=\"true\"`\n\nTo enable automatic tax calculation when you update an invoice, add the `invoice` parameter alongside `automatic_tax`:\n\n`curl https://api.stripe.com/v1/invoices \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"invoice\"=\"inv_12345\" \\   -d \"automatic_tax[enabled]\"=\"true\"`\n\nFor more information on automatic tax calculation, see [Automatically collect tax on invoices](https://docs.stripe.com/tax/invoicing).\n\n## Net prices and taxes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can issue invoices with line item prices that exclude inclusive tax. Tax-exclusive prices are only shown in the invoice PDF. That means, when using inclusive tax, the Hosted Invoice Page and invoice emails show tax-inclusive prices. You can define the settings for net prices in the Dashboard or API.\n\n*   **Include inclusive tax**—The invoice PDF displays line item prices including the inclusive tax. (This is the default.)\n*   **Exclude tax**—The invoice PDF displays line item prices excluding tax.\n\n#### Order precedence\n\nIf you set a default for line item prices at the customer level, it takes precedence over account-level settings.\n\nTo set a default for item prices, go to **Default item prices** in the [Invoice template](https://dashboard.stripe.com/settings/billing/invoice). Your chosen setting applies to all of the invoices you create through the Dashboard or API. For one-off invoices, use the [Invoice Editor](https://dashboard.stripe.com/test/invoices/create) to set tax exclusivity. Go to **Advanced options** and choose to **Include inclusive tax** or **Exclude tax**. To learn more, see [Create an invoice](https://docs.stripe.com/invoicing/dashboard#create-invoice).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Determine customer locations](https://docs.stripe.com/tax/customer-locations)\n*   [Understand zero tax amounts](https://docs.stripe.com/tax/zero-tax)\n*   [Reporting and filing](https://docs.stripe.com/tax/reports)",
    "title": "Taxes | Stripe Documentation",
    "description": "Learn about Stripe Tax and how to use it with invoices.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/tax_ids/delete",
    "markdown": "# Delete a tax ID | Stripe API Reference\n\nDeletes an existing account or customer `tax_id` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter on success. If the `tax_id` object does not exist, this call raises [an error](#errors).\n\n```\ncurl -X DELETE https://api.stripe.com/v1/tax_ids/txi_1NuMB12eZvKYlo2CMecoWkZd \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",  \"object\": \"tax_id\",  \"deleted\": true}\n```\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Delete a tax ID | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/accounting-integrations",
    "markdown": "# Connect an accounting tool | Stripe DocumentationThe Stripe Docs logo\n\nStripe Connector for NetSuite\n\nConnect Stripe with NetSuite to automate cash reconciliation and accept payments on invoices.",
    "title": "Connect an accounting tool | Stripe Documentation",
    "description": "Learn how to connect your accounting tools with Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/reports/options",
    "markdown": "# Report filters and settings | Stripe DocumentationThe Stripe Docs logo\n\n## Understand the settings and controls common across all financial reports.\n\nThis page describes the set of options available on each financial report. These include filters to select the data to view, including [date range](#date-range), [currency](#currency), and [connect accounts](#connect-accounts).\n\n## Date range![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen loading the page, the reports default to displaying data for the prior month. You can select previous months, current month-to-date, or customize the date range to specific dates. Selected dates are inclusive. For example, if you choose a date range of June 12, 2024–June 19, 2024, it includes data from the beginning of the day on June 12, 2024 (12:00am) through the end of the day on June 19, 2024 (11:59pm) in the selected time zone.\n\n### Time zone customization ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can view financial reports based on either your Stripe account’s time zone or Coordinated Universal time (UTC). This selection affects both how the date range setting filters the report, and how dates and times contained within the report are presented.\n\n### Data availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe computes all your data on a daily basis beginning at 12:00am UTC. The data for each day is defined as account activity that takes place between 12:00am UTC and 11:59pm UTC.\n\n| Financial reports tab | Processing time |\n| --- | --- |\n| Balance | Within 12 hours |\n| Payout reconciliation | Within 12 hours |\n\n#### Caution\n\nSLAs indicate when the reports are available for download. Webhook notifications might take additional time.\n\nFor example, all account activity on June 12, 2024 (from 12:00 am to 11:59 pm UTC) is available in the **Balance financial reports** tab by June 13, 2024 at 12:00 pm UTC.\n\nUsers who view reports in certain non-UTC timezones might experience an additional day delay. For example, the Balance report for Monday won’t become available until Wednesday morning when viewed in the America/Los\\_Angeles timezone (PST). This is because data is processed by UTC day, and the last few hours of Monday in PST correspond to Tuesday morning in UTC. As such, the report can’t be made available until Tuesday’s data has finished processing, which occurs by Wednesday at 12:00 pm UTC.\n\n## Currency![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFinancial reports are based on your account’s [settlement currency](https://docs.stripe.com/connect/payouts-connected-accounts#supported-settlement), which is the currency Stripe uses to send [payouts](https://docs.stripe.com/payouts \"payout\") to your bank.\n\nIf your account has multiple settlement currencies, you can view reports for each currency separately using the currency selector.\n\n## Connect accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Connect](https://docs.stripe.com/connect \"Connect\") platforms often need visibility into funds and transactions within their connected accounts in addition to their platform activity. When viewing a report as the platform account, you can toggle between viewing data:\n\n*   For the platform account only\n*   For all of the platform’s connected accounts (summary reports sum the data across all connected accounts, while itemized reports include relevant rows for all connected accounts)\n*   For a single connected account\n\nTo view reporting for a single connected account:\n\n1.  Go to the [Connect Accounts](https://dashboard.stripe.com/connect/accounts/overview) page and search for the account you want.\n2.  Click on the account’s name to go to the account detail page.\n3.  Click the **View financial reports** link under the Reports section.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/connected-account-statement.e0e6c62683f5ee3367690b9936bf018b.png)\n\n#### Caution\n\nConnect platforms can’t view the financial reports for connected accounts that can access the full Stripe Dashboard and aren’t [controlled by the platform](https://docs.stripe.com/connect/platform-controls-for-stripe-dashboard-accounts). Holders of such accounts can independently control them if they were created with Stripe directly. Those accounts can contain transactions that originate outside of your platform. Because they have access to the full Stripe Dashboard, they can generate their own financial reports.\n\n## Scheduled reports ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo set up a subscription schedule for reports and get notified of new data, read our [scheduled reports](https://docs.stripe.com/reports/scheduled-reports) docs.",
    "title": "Report filters and settings | Stripe Documentation",
    "description": "Understand the settings and controls common across all financial reports.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/reports/api",
    "markdown": "# Run a report from the API\n\n## Access Stripe's financial reports programmatically to automate your reconciliation workflow.\n\n#### Note\n\nYou can now automatically send your Stripe data and reports to Snowflake or Amazon Redshift in a few clicks with Stripe Data Pipeline. [Learn more](https://stripe.com/data-pipeline).\n\nThe [financial reports](https://dashboard.stripe.com/reports) in the Dashboard provide downloadable reports in CSV format for a variety of accounting and reconciliation tasks. These reports are also available through the API, so you can schedule them to run automatically or run them whenever you need to receive the associated report files for accounting purposes.\n\n## Report types ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nEach financial report in the Dashboard provides several different CSV downloads. All of the available downloads for the following reports are also available from the API:\n\n*   [Balance](https://docs.stripe.com/reports/report-types/balance)\n*   [Payout reconciliation](https://docs.stripe.com/reports/report-types/payout-reconciliation)\n*   [Tax](https://docs.stripe.com/reports/report-types/tax)\n*   [Connect platforms](https://docs.stripe.com/reports/report-types/connect)\n\n#### CSV and API monetary formats differ\n\nThe CSV reports format monetary amounts in _major_ currency units as a decimal number. For example, The CSV formats 10 USD as dollars-and-cents (`10.00`). This differs from the Stripe API, where you specify amounts in the currency’s _minor_ unit (US cents) as an integer. In the API, you format 10 USD as cents (`1000`).\n\n### Run parameters![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach report has both required and optional parameters you provide when creating a report run. Consider the following when running reports:\n\n*   Nearly every report type requires providing the run parameters `interval_start` (inclusive) and `interval_end` (exclusive) as Unix timestamps.\n*   Each corresponding report type resource has `data_available_start` and `data_available_end` fields. The API returns an invalid request error (status code `400`) if your run doesn’t meet the following contraints:\n    *   The `interval_start` and `interval_end` values must be between `data_available_start` and `data_available_end` (inclusive).\n    *   The `interval_start` value must be _before_ (and not equal to) `interval_end`.\n*   You can only download a report in a time zone for a `ReportType` with a `timezone` parameter. To do so, create a `ReportRun` object and supply the desired TZ database time zone name. The `timezone` parameter is optional and defaults to UTC if not supplied. See [IANA Time Zone Database](https://www.iana.org/time-zones) for a list of valid timezone values.\n*   The optional parameters `currency` and `report_category` filter results to just those rows matching the provided values.\n*   Reports return a default set of columns, but most report types allow you to customize the selection and ordering of columns in the output by including the optional `columns` parameter with a list of column names.\n\n## Data availability ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe prepares data for your reports on a semi-daily basis. [Report options](https://docs.stripe.com/reports/options#data-availability) provides details on expected processing time and data availability for each report.\n\nTo programmatically determine the time range of data available for a given report type, [retrieve](https://docs.stripe.com/api#retrieve_reporting_report_type) the `ReportType` object of interest. For example, the **Balance summary** report has the ID `balance.summary.1`, so you can retrieve the object as follows:\n\n`curl https://api.stripe.com/v1/reporting/report_types/balance.summary.1 \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`\n\nIn the example response below, the fields `data_available_start` and `data_available_end` reflect the full range of valid times for this report type. However, you’ll most often be running reports for a smaller interval within that range:\n\n`{   \"id\": \"balance.summary.1\",   \"name\": \"Balance summary\",   \"version\": \"1\",   \"object\": \"reporting.report_type\",   \"data_available_start\": 1519862400,   \"data_available_end\": 1517356800,   \"updated\": 1517382720, }`\n\nTimestamps, such as `date_available_start`, are measured in seconds since the Unix epoch. For example, `1519862400` represents the timestamp, `2018-03-01 00:00`.\n\n### New data notifications ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAs soon as a report type has new data available, Stripe publishes a `reporting.report_type.updated` event with the updated `ReportType` object. To access these events, you must have a [webhook configured](https://docs.stripe.com/webhooks#register-webhook) that explicitly selects to receive `reporting.report_type.updated` events; webhooks that listen for ‘all events’ won’t receive them. After you receive such an event, you can then run the report. For details, see the [recommended integration pattern](#integration-pattern).\n\n## Creating and accessing report runs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe `ReportRun` API object represents an instance of a `ReportType` generated with specific parameters. Review the documentation for the [report type](#report-types) for the list of required and optional parameters for that type. For example, you can [create](https://docs.stripe.com/api/reporting/report_run/create) a **Balance change from activity summary** report for April 2020 as follows:\n\n`curl https://api.stripe.com/v1/reporting/report_runs \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"report_type\"=\"balance_change_from_activity.itemized.3\" \\   -d \"parameters[interval_start]\"=1577865600 \\   -d \"parameters[interval_end]\"=1580544000 \\   -d \"parameters[timezone]\"=\"America/Los_Angeles\" \\   -d \"parameters[columns][]\"=\"created\" \\   -d \"parameters[columns][]\"=\"reporting_category\" \\   -d \"parameters[columns][]\"=\"net\"  # Timestamps are for 2020-01-01 00:00 PST and 2020-02-01 00:00 PST. # The columns parameter is optional. A default set of columns will be provided if you don't specify a value. # Note that a live-mode API key is required.`\n\nWhen first created, the object appears with `status=\"pending\"`:\n\n`{   \"id\": \"frr_123\",   \"object\": \"reporting.report_run\",   \"livemode\": true,   \"report_type\": \"balance_change_from_activity.itemized.3\",   \"parameters\": {     \"columns\": [ \"created\", \"reporting_category\", \"net\" ],     \"interval_start\": 1577865600,     \"interval_end\": 1580544000,     \"timezone\": \"America/Los_Angeles\"   },   \"created\": 1580832900,   \"status\": \"pending\",   \"result\": null }`\n\nWhen the run completes, Stripe updates the object, and it has a `status` of `succeeded`. It also has a nested `result` object, containing a URL that you can use to access the file with your API key. For example, if you were to [retrieve](https://docs.stripe.com/api/reporting/report_run/retrieve) the above report run after it completes, the response would be:\n\n`{   \"id\": \"frr_123\",   \"object\": \"reporting.report_run\",   \"livemode\": true,   \"report_type\": \"balance_change_from_activity.itemized.3\",   \"parameters\": {     \"columns\": [ \"created\", \"reporting_category\", \"net\" ],     \"interval_start\": 1577865600,     \"interval_end\": 1580544000,     \"timezone\": \"America/Los_Angeles\"   },   \"created\": 1580832900,   \"status\": \"succeeded\",   \"succeeded_at\": 1580832960,   \"result\": {     \"id\": \"file_xs8vrJzC\",     \"object\": \"file\",     \"url\": \"[https://files.stripe.com/v1/files/file_xs8vrJzC/contents](https://files.stripe.com/v1/files/file_xs8vrJzC/contents)\",     \"created\": 1580832960,     \"purpose\": \"report_run\",     \"size\": 53075,     \"type\": \"csv\"   } }`\n\nTo retrieve the file contents, use your API key to access the file specified by `result.url`:\n\n`curl https://files.stripe.com/v1/files/file_xs8vrJzC/contents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`\n\n#### Notification of report run completion![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMost runs complete within a few minutes. However, some runs could take longer—depending on the size of your total data set, and on the time range your report covers.\n\nWhen a requested report run completes, Stripe sends one of two webhooks:\n\n*   A `reporting.report_run.succeeded` webhook will be sent if the run completes successfully.\n*   A `reporting.report_run.failed` webhook will be sent if the run fails. (This should be rare, but we recommend that integrations be prepared to handle this case in the same manner as catching a `500` response.)\n\nIn both cases, the webhook payload includes the updated `ReportRun` object, which includes status `succeeded` or `failed`, respectively.\n\n## Recommended integration pattern for automated reporting ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConfigure a webhook that explicitly selects to receive `reporting.report_type.updated` events; webhooks that listen for ‘all events’ won’t receive them.\n\n1.  A `reporting.report_type.updated` webhook is sent as soon as a new day’s data is available for a given report type. The payload includes the updated `ReportType` object. You’ll typically receive 20-30 webhooks each day, two for each report type. (Different users are eligible for different reports.)\n2.  Upon receiving the `reporting.report_type.updated` webhook for the desired report type and range of data availability, [create a report run](https://docs.stripe.com/api/reporting/report_run/create). The response contains a new `ReportRun` object, initialized with `status=pending`.\n3.  When the run completes, a `reporting.report_run.succeeded` webhook is sent. This webhook includes the nested field `result.url`. (As mentioned above, in the rare case of a failure, we’ll send a `reporting.report_run.failed` event instead.)\n4.  Access the file contents at `result.url`, using your API key.",
    "title": "Run a report from the API | Stripe Documentation",
    "description": "Access Stripe's financial reports programmatically to automate your reconciliation workflow.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/reports/reporting-categories",
    "markdown": "# Reporting categories and types | Stripe DocumentationThe Stripe Docs logo\n\nLearn more about the `reporting_category` field on `BalanceTransaction` objects, and how it differs from `type` and other categorizations. This topic covers:\n\n*   [Why introduce a new categorization?](#why-new-categorization)\n*   [Reporting categories reference](#reference)\n\n## Why introduce a new categorization? ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe `BalanceTransaction` object’s `reporting_category` field improves on the `type` field by providing a more-useful grouping for most finance and reporting purposes. The following sections highlight the new field’s advantages.\n\n##### More-granular breakdown of `type=adjustment`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `reporting_category` attribute separates balance transactions with `type=adjustment` into several different categories, including disputes, dispute reversals, and failed refunds. Additionally, several types of fees and [Connect](https://docs.stripe.com/connect \"Connect\") platform-fee refunds are now explicitly categorized with `reporting_category=fee`.\n\n#### A separate category for partial-capture reversals![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you are [separately authorizing and capturing](https://docs.stripe.com/charges/placing-a-hold) payments, and you capture an amount less than the initial authorization, you will see two balance transactions: one for the full amount of the authorization, and another reversing the uncaptured portion. (Summing the two balance transactions yields the captured portion of the charge.)\n\nThe balance transaction reversing the uncaptured portion has `type=refund`, just as if you had refunded a portion of a sale at some later time. To allow separate handling of these objects—perhaps counting them against the initial sale amount, rather than as a separate refund—we label these with the distinct reporting category `partial_capture_reversal`.\n\n#### Consolidate multiple types into common categories![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUsing the `type` field, balance transactions arising from card-based charges are represented with `type=charge`, while those made with [other payment methods](https://docs.stripe.com/payments/payment-methods/overview) are represented with `type=payment`. Similarly, refunds and failures for cards versus alternative payment methods have the distinct types `refund` and `payment_refund`.\n\nWe found that these distinctions made many common reporting tasks unnecessarily awkward, and so `reporting_category` simplifies these (and other) groups of types, as follows:\n\n| Balance transaction types | Reporting category |\n| --- | --- |\n| `charge`, `payment` | `charge` |\n| `refund`, `payment_refund` | `refund` |\n| `payout_cancel`, `payout_failure` | `payout_reversal` |\n| `transfer`, `recipient_transfer` | `transfer` |\n| `transfer_cancel`, `transfer_failure`, `recipient_transfer_cancel`, `recipient_transfer_failure` | `transfer_reversal` |\n\n##### More-descriptive category names![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe’ve renamed several balance transaction types for greater clarity:\n\n| Balance transaction type | Reporting category |\n| --- | --- |\n| `application_fee` | `platform_earning` |\n| `application_fee_refund` | `platform_earning_refund` |\n| `stripe_fee` | `fee` |\n| `reserve_transaction` | `connect_reserved_funds` |\n| `reserved_funds` | `risk_reserved_funds` |\n\n## Reporting categories reference ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis reference covers four groups of reporting categories:\n\n*   [Payments-related reporting categories](#charge_and_payment_related)\n*   [Balance-related reporting categories](#balance_related)\n*   [Issuing-related reporting categories](#issuing_related)\n*   [Connect-related reporting categories](#connect_related)\n\n### Payments-related reporting categories\n\nThese reporting categories are related to creating and refunding charges as part of processing payments.\n\n### `charge`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Balance transaction type(s): `charge`, `payment`, or `validation`\n*   Section(s) in the monthly report: _Payments (cards), Payments (other)_\n\n### `charge_failure`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[ACH, direct debit](https://docs.stripe.com/sources#supported-payment-methods), and other [asynchronous payment methods](https://docs.stripe.com/sources#synchronous-or-asynchronous-confirmation) remain in a pending state until they either succeed or fail. You will see a pending balance transaction with the reporting category `charge` appear when the payment is created in a pending state. A `charge_failure` will appear if the pending payment later fails.\n\n*   Balance transaction type(s): `payment_failure_refund`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `dispute`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a customer [disputes a charge](https://docs.stripe.com/disputes), Stripe deducts the disputed amount from your balance.\n\n*   Balance transaction type(s): `adjustment`or `adjusted_for_overdraft_transaction`\n*   Section(s) in the monthly report: _Disputes_\n\n### `dispute_reversal`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you [win a dispute](https://docs.stripe.com/disputes#responding-to-a-dispute), the disputed amount is returned to your balance.\n\n*   Balance transaction type(s): `adjustment`\n*   Section(s) in the monthly report: _Dispute Reversals_\n\n### `partial_capture_reversal`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you are [separately authorizing and capturing](https://docs.stripe.com/charges/placing-a-hold) payments, and you capture an amount less than the initial authorization, you will see a `charge` for the full authorization amount, and a `partial_capture_reversal` for the uncaptured portion.\n\n*   Balance transaction type(s): `refund`\n*   Section(s) in the monthly report: _Payments (cards)_\n\n### `refund`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayments you’ve [refunded](https://docs.stripe.com/refunds) to your customers. (Does not include charge failures or partial capture reversals, which are listed separately.)\n\n*   Balance transaction type(s): `refund`or `payment_refund`\n*   Section(s) in the monthly report: _Refunds (cards), Refunds (other)_\n\n### `refund_failure`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCreated when a [credit card charge refund](https://docs.stripe.com/refunds) fails, and Stripe returns the funds to your balance.\n\nThis may occur if your customer’s bank or card issuer is unable to correctly process a refund (e.g., due to a closed bank account or a problem with the card).\n\n*   Balance transaction type(s): `refund_failure`\n*   Section(s) in the monthly report: _Other Adjustments_\n\nThese reporting categories are related to changes that affect your Stripe balance, such as payouts, fees, and top-ups.\n\n### `anticipation_repayment`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRepayments made to service an anticipation loan in Brazil. These repayments go to the financial institution to whom you have sold your receivables.\n\n*   Balance transaction type(s): `anticipation_repayment`\n*   Section(s) in the monthly report: _Anticipation Repayments_\n\n### `climate_order_purchase`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFunds used to purchase carbon removal units from Frontier Climate.\n\n*   Balance transaction type(s): `climate_order_purchase`or `climate_reservation_purchase`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `climate_order_refund`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFunds refunded to your balance when a Climate Order is canceled.\n\n*   Balance transaction type(s): `climate_order_refund`or `climate_reservation_refund`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `contribution`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFunds contributed via Stripe to a cause (currently Stripe Climate).\n\n*   Balance transaction type(s): `contribution`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `fee`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Balance transaction type(s): `stripe_fee`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `other_adjustment`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMiscellaneous adjustments to your Stripe balance.\n\n*   Balance transaction type(s): `adjustment`, `obligation_outbound`, or `obligation_reversal_inbound`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `payment_network_reserve_hold`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFunds that a payment network holds in reserve (e.g. to mitigate risk).\n\n*   Balance transaction type(s): `payment_network_reserve_hold`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `payment_network_reserve_release`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFunds that a payment network releases from a reserve.\n\n*   Balance transaction type(s): `payment_network_reserve_release`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `payout`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Payouts](https://docs.stripe.com/payouts) from your Stripe balance to your bank account.\n\n*   Balance transaction type(s): `payout`\n*   Section(s) in the monthly report: _Payouts and Transfers_\n\n### `payout_reversal`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFunds returned to your balance if a payout fails after it is initially created (e.g., due to an invalid account number or a cancellation). [Learn more](https://docs.stripe.com/payouts#payout-failures).\n\n*   Balance transaction type(s): `payout_cancel`or `payout_failure`\n*   Section(s) in the monthly report: _Payouts and Transfers: Failures and Refunds_\n\n### `risk_reserved_funds`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen Stripe holds your funds in reserve to mitigate risk, two balance transactions are created: one to debit the funds from your balance, and a second to credit the funds back to your balance at the end of the reserve period.\n\n*   Balance transaction type(s): `reserved_funds`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `tax`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTaxes collected by Stripe to be remitted to the appropriate local governments. Typically, this is a tax on Stripe fees.\n\n*   Balance transaction type(s): `tax_fee`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `topup`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFunds you transferred into your Stripe balance from your bank account. [Learn more](https://docs.stripe.com/connect/top-ups).\n\n*   Balance transaction type(s): `topup`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `topup_reversal`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf an initially successful top-up fails or is cancelled, the credit to your Stripe balance is reversed. [Learn more](https://docs.stripe.com/connect/top-ups).\n\n*   Balance transaction type(s): `topup_reversal`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `unreconciled_customer_funds`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a customer has unreconciled funds within Stripe for more than ninety days, Stripe transfers those funds to your balance.\n\n*   Balance transaction type(s): `transferred_to_balance_transaction`\n*   Section(s) in the monthly report: _Other Adjustments_\n\nThese reporting categories are created as part of using the [Issuing API](https://docs.stripe.com/issuing).\n\nWhen [an issued card](https://docs.stripe.com/issuing) is used to make a purchase, an [authorization](https://docs.stripe.com/issuing/purchases/authorizations) is created. If the authorization is approved, a balance transaction is created with the type `issuing_authorization_hold` to hold the authorized amount in reserve from your account balance, until the authorization is either captured or voided. Some merchants can also update an authorization to request an additional amount (e.g., to extend a hotel booking or add a tip), and this is also represented as a balance transaction with the type `issuing_authorization_hold`.\n\n*   Balance transaction type(s): `issuing_authorization_hold`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `issuing_authorization_release`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen an authorized purchase, made with [an issued card](https://docs.stripe.com/issuing), is captured by the merchant, the funds previously held for the authorization (`issuing_authorization_hold`) are released with a `issuing_authorization_release` balance transaction. Simultaneously, [an issuing transaction](https://docs.stripe.com/issuing/transactions) is created, and the purchase amount is deducted from your Stripe balance in another balance transaction with the type `issuing_transaction`.\n\n*   Balance transaction type(s): `issuing_authorization_release`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `issuing_disbursement`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCredits to your balance for rewards, discounts, and other miscellaneous adjustments.\n\n*   Balance transaction type(s): `issuing_disbursement`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `issuing_dispute`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you dispute an [Issuing transaction](https://docs.stripe.com/issuing/transactions) and funds return to your Stripe balance.\n\n*   Balance transaction type(s): `issuing_dispute`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `issuing_transaction`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen an authorized purchase, made with an [issued card](https://docs.stripe.com/issuing), has been authorized and captured by the merchant, [an issuing transaction](https://docs.stripe.com/issuing/transactions) is created, and the purchase amount is deducted from your Stripe balance with a `issuing_transaction` balance transaction.\n\n*   Balance transaction type(s): `issuing_transaction`\n*   Section(s) in the monthly report: _Other Adjustments_\n\nThese reporting categories are related to using the [Connect API](https://docs.stripe.com/connect) and related APIs, such as [instant payouts](https://docs.stripe.com/connect/instant-payouts).\n\n### `advance`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIncrementing available funds for [instant payouts](https://docs.stripe.com/connect/instant-payouts). This occurs when you create an instant payout and the requested payout amount is greater than your connected account’s available balance. Funds are added to your available balance and removed from your pending balance to cover the difference.\n\n*   Balance transaction type(s): `advance`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `advance_funding`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDecrementing pending funds for [instant payouts](https://docs.stripe.com/connect/instant-payouts). This occurs when you create an instant payout and the requested payout amount is greater than your connected account’s available balance. Funds are added to your available balance and removed from your pending balance to cover the difference.\n\n*   Balance transaction type(s): `advance_funding`\n*   Section(s) in the monthly report: _Other Adjustments_\n\n### `connect_collection_transfer`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf one of your connected accounts has a negative balance for 180 days, Stripe transfers a portion of your balance, to zero out that account’s balance. [Learn more](https://docs.stripe.com/connect/account-balances#understanding-connected-reserve-balances).\n\n*   Balance transaction type(s): `connect_collection_transfer`\n*   Section(s) in the monthly report: _Reflected in \"Reserve\" section_\n\n### `connect_reserved_funds`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf one of your connected accounts’ balances becomes negative, Stripe temporarily reserves a portion of your balance to ensure that funds can be covered.\n\nIf one of your connected accounts’ previously negative balance becomes less negative due to activity on account, another `reserve_transaction` is created to release a corresponding portion of the funds held in reserve. [Learn more](https://docs.stripe.com/connect/account-balances#understanding-connected-reserve-balances).\n\n*   Balance transaction type(s): `reserve_transaction`\n*   Section(s) in the monthly report: _Reflected in \"Reserve\" section_\n\n### `platform_earning`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Balance transaction type(s): `application_fee`\n*   Section(s) in the monthly report: _Application Revenue_\n\n### `platform_earning_refund`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Platform fees](https://docs.stripe.com/connect/direct-charges#collect-fees) that you have returned to your connected accounts.\n\n*   Balance transaction type(s): `application_fee_refund`\n*   Section(s) in the monthly report: _Application Revenue Returned_\n\n### `transfer`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Balance transaction type(s): `transfer`or `recipient_transfer`\n*   Section(s) in the monthly report: _Payouts and Transfers_\n\n### `transfer_reversal`![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTransfers to your connected accounts that have been cancelled.\n\n*   Balance transaction type(s): `transfer_cancel`, `transfer_refund`, `recipient_transfer_cancel`, or `recipient_transfer_failure`\n*   Section(s) in the monthly report: _Payouts and Transfers: Failures and Refunds_",
    "title": "Reporting categories and types | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/reports/balance",
    "markdown": "# Balance report | Stripe DocumentationThe Stripe Docs logo\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nNumber for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\\_id\n\nFor Stripe Connect activity related to a connected account, the unique ID for the account.\n\nconnected\\_account\\_name\n\nFor Stripe Connect activity related to a connected account, the name of the account.\n\nconnected\\_account\\_country\n\nFor Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account.\n\nconnected\\_account\\_direct\\_charge\\_id\n\n(Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account.\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.",
    "title": "Balance report | Stripe Documentation",
    "description": "Reconcile your Stripe balance and download your categorized transaction history.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/reports/quickbooks",
    "markdown": "# Export account activity to QuickBooks\n\n## Download an export of your Stripe account data suitable for import into your desktop QuickBooks.\n\nIn addition to the CSV-formatted [reports](https://docs.stripe.com/reports) that are available for export in the Dashboard, information about payments, refunds, fees, and [payouts](https://docs.stripe.com/payouts \"payout\") is also available in a [QuickBooks Desktop](http://quickbooks.intuit.com/)\\-compatible IIF file. You can download this within the Dashboard’s [Legacy exports settings](https://dashboard.stripe.com/account/legacy_exports).\n\nYou can also use [Accounting Stripe Apps](https://marketplace.stripe.com/categories/accounting) to automate your bookkeeping, keep your financial data updated, and eliminate the need for manual data entry.\n\n## QuickBooks accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe exported IIF file creates the following nine accounts in QuickBooks, if they don’t already exist. All of the Stripe-created accounts are prefaced by **Stripe** to make them easy to locate and identify.\n\n| Name | Type | Description |\n| --- | --- | --- |\n| Stripe Account | Bank | All charges, refunds, and payouts |\n| Stripe Checking Account | Bank | Represents your actual bank account to which Stripe sends payouts |\n| Stripe Payment Processing Fees | Expense | Processing fees for all charges |\n| Stripe Returns | Income | All refunds |\n| Stripe Sales | Income | All charges minus processing fees |\n| Stripe Third-Party Account | Tax-Related Expense | Every transfer to a third-party |\n| Stripe Other Fees | Expense | Adjustments |\n| Stripe Processing Fees Adj | Expense | Adjustments |\n| Stripe Other Income | Income | Adjustments |\n\nIf these accounts already exist but are of a different type than what you see in the exports file, QuickBooks presents an error about being unable to change the account type. If this occurs edit the conflicting accounts to have the same type as the IIF file.\n\n#### Note\n\nAlways back up your QuickBooks data before importing new information.\n\n## Date format and timezones ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe IIF file formats the date as MM/DD/YYYY. QuickBooks uses the same date format as your operating system. If this differs from the exported file, you can temporarily change your operating system’s date format:\n\n1.  Set the date format in your operating system to MM/DD/YYYY.\n2.  Import the QuickBooks IIF file.\n3.  Change your operating system’s date format back to your preferred style.\n\nYour account’s [timezone setting](https://dashboard.stripe.com/settings/account) is used for the date range of the IIF export.\n\n## Merging QuickBooks accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou may want to merge one or more of these created accounts with an existing QuickBooks account. In particular, you may want to merge the **Stripe Checking Account**, which represents the bank where your Stripe payouts are sent, with your actual banking account in QuickBooks:\n\n1.  Select **Lists > Chart of Accounts** to view all of your accounts.\n2.  Make sure both accounts being merged are on the same level (that is, both can be sub-accounts or both can be primary level accounts).\n3.  Select the account you are no longer going to use (for example, **Stripe Checking Account**).\n4.  Click **Account > Edit Account** at the bottom of the **Chart of Accounts** window.\n5.  Change the name of this account to exactly match the name of the other account (the one you’ll be keeping).\n6.  Click **Save**.\n\nYou’re then prompted about merging the account with an existing one. Click **Yes** to proceed with the merge, **No** to cancel. The records in the renamed account will be merged into the retained account. Accounts need to be re-merged after each new import.\n\n## Considerations for Connect platforms with Custom accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPlatform owners with Custom accounts can view the Dashboard of connected Stripe accounts. From the connected account’s Dashboard, export an IIF file in the same way as a normal Stripe account.\n\n[Connect](https://docs.stripe.com/connect \"Connect\") platforms creating charges on behalf of connected accounts that need to generate 1099s for Custom accounts must declare the correct tax-line mapping of the **Stripe Third-Party Account**. This expense account is given an initial tax-line mapping of 1099-MISC: Nonemployee compensation.\n\nFor QuickBooks to use **Stripe Third-Party Account** data for the generation of 1099s, you must first enable this feature within QuickBooks’ preferences.\n\n1.  Select **Preferences > Tax: 1099 > Company Preferences** within QuickBooks.\n2.  Click on the link in **If you want to map your accounts to boxes on Form 1099-MISC, click here**.\n3.  In the resulting QuickBooks 1099 Wizard, select **Stripe Third-Party Account** under **Accounts used for 1099**.\n4.  Under **Apply payments to this 1099 box** for **Stripe Third-Party Account**, select **Box 7: Nonemployee compensation**.",
    "title": "Export account activity to QuickBooks | Stripe Documentation",
    "description": "Download an export of your Stripe account data suitable for import into your desktop QuickBooks.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/reports/payout-reconciliation",
    "markdown": "# Payout reconciliation report | Stripe DocumentationThe Stripe Docs logo\n\nautomatic\\_payout\\_id\n\nID of the automatically created payout associated with this balance transaction (only set if your account is on an [automatic payout schedule](https://stripe.com/docs/payouts#payout-schedule)).\n\nautomatic\\_payout\\_effective\\_at\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in the requested time zone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.\n\nbalance\\_transaction\\_id\n\nUnique identifier for the balance transaction.\n\ncreated\\_utc\n\nTime at which the balance transaction was created. Dates in UTC.\n\ncreated\n\nTime at which the balance transaction was created. Dates in the requested time zone, or UTC if not provided.\n\navailable\\_on\\_utc\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in UTC.\n\navailable\\_on\n\nThe date the balance transaction’s net funds will become available in the Stripe balance. Dates in the requested time zone, or UTC if not provided.\n\ncurrency\n\nThree-letter [ISO code for the currency](https://stripe.com/docs/currencies) in which `gross`, `fee` and `net` are defined.\n\ngross\n\nGross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nfee\n\nFees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nnet\n\nNet amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).\n\nreporting\\_category\n\n[Reporting Category](https://stripe.com/docs/reporting/reporting-categories) is a new categorization of balance transactions, meant to improve on the current `type` field.\n\nsource\\_id\n\nThe Stripe object to which this transaction is related.\n\ndescription\n\nAn arbitrary string attached to the balance transaction. Often useful for displaying to users.\n\ncustomer\\_facing\\_amount\n\nFor transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account’s default, this field will reflect the amount as seen by the customer.\n\ncustomer\\_facing\\_currency\n\nFor transactions associated with charges, refunds, or disputes, the three-letter [ISO currency code](https://stripe.com/docs/currencies) for `customer_facing_amount`.\n\nregulatory\\_tag\n\n​​An identifier reflecting the classification of this transaction according to local regulations, if applicable. Accounts with automatic payouts enabled receive a separate payout for each regulatory tag. ​​This column is only populated for Brazilian accounts.\n\nautomatic\\_payout\\_effective\\_at\\_utc\n\nThe date we expect this [automatic payout](https://stripe.com/docs/payouts#payout-schedule) to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.\n\ncustomer\\_id\n\nThe unique ID of the related customer, if any.\n\ncustomer\\_email\n\nEmail address of the customer, if any, associated with this balance transaction.\n\ncustomer\\_name\n\nName of the customer, if any, associated with this balance transaction.\n\ncustomer\\_description\n\nDescription provided when creating the customer, often used to store the customer name.\n\ncustomer\\_shipping\\_address\\_line1\n\nFirst line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_line2\n\nSecond line of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_city\n\nCity of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_state\n\nState of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_postal\\_code\n\nPostal code of the customer shipping address associated with this charge, if any\n\ncustomer\\_shipping\\_address\\_country\n\nCountry of the customer shipping address associated with this charge, if any\n\ncustomer\\_address\\_line1\n\nFirst line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_line2\n\nSecond line of the customer address associated with this charge, if any\n\ncustomer\\_address\\_city\n\nCity of the customer address associated with this charge, if any\n\ncustomer\\_address\\_state\n\nState of the customer address associated with this charge, if any\n\ncustomer\\_address\\_postal\\_code\n\nPostal code of the customer address associated with this charge, if any\n\ncustomer\\_address\\_country\n\nCountry of the customer address associated with this charge, if any\n\nshipping\\_address\\_line1\n\nFirst line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_line2\n\nSecond line of the shipping address associated with this charge, if any\n\nshipping\\_address\\_city\n\nCity of the shipping address associated with this charge, if any\n\nshipping\\_address\\_state\n\nState of the shipping address associated with this charge, if any\n\nshipping\\_address\\_postal\\_code\n\nPostal code of the shipping address associated with this charge, if any\n\nshipping\\_address\\_country\n\nCountry of the shipping address associated with this charge, if any\n\ncard\\_address\\_line1\n\nFirst line of the card address associated with this charge, if any\n\ncard\\_address\\_line2\n\nSecond line of the card address associated with this charge, if any\n\ncard\\_address\\_city\n\nCity of the card address associated with this charge, if any\n\ncard\\_address\\_state\n\nState of the card address associated with this charge, if any\n\ncard\\_address\\_postal\\_code\n\nPostal code of the card address associated with this charge, if any\n\ncard\\_address\\_country\n\nCountry of the card address associated with this charge, if any\n\ncharge\\_id\n\nUnique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.\n\npayment\\_intent\\_id\n\nThe unique ID of the related Payment Intent, if any.\n\ncharge\\_created\\_utc\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in UTC.\n\ncharge\\_created\n\nCreation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested time zone, or UTC if not provided.\n\ninvoice\\_id\n\nUnique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\ninvoice\\_number\n\nUnique Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.\n\nsubscription\\_id\n\nUnique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.\n\norder\\_id\n\nUnique ID for the order associated with this balance transaction.\n\npayment\\_method\\_type\n\nThe type of payment method used in the related payment.\n\nis\\_link\n\nWhether or not the payment was made using Link.\n\ncard\\_brand\n\n[Card brand](https://stripe.com/docs/api#card_object-brand), if applicable.\n\ncard\\_funding\n\nCard [funding type](https://stripe.com/docs/api#account_card_object-funding), if applicable.\n\ncard\\_country\n\nTwo-letter ISO code representing the country of the card.\n\nstatement\\_descriptor\n\nThe dynamic statement descriptor or suffix specified when the related charge was created.\n\ndispute\\_reason\n\nReason given by cardholder for dispute. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).\n\nconnected\\_account\\_id\n\nFor Stripe Connect activity related to a connected account, the unique ID for the account.\n\nconnected\\_account\\_name\n\nFor Stripe Connect activity related to a connected account, the name of the account.\n\nconnected\\_account\\_country\n\nFor Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account.\n\nconnected\\_account\\_direct\\_charge\\_id\n\n(Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account.\n\ndestination\\_payment\\_id\n\nDestination payment id in the case of Separate Charges & Transfers and destination charges\n\npayment\\_metadata\\[key\\]\n\nMetadata associated with the related PaymentIntent, if any. If no PaymentIntent metadata exists, metadata from any related charge object will be returned. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\nrefund\\_metadata\\[key\\]\n\nMetadata associated with the related refund object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.\n\ntransfer\\_metadata\\[key\\]\n\nMetadata associated with the related transfer object, if any. API requests including this column must specify a metadata key in brackets. This column can be specified multiple times to retrieve data from additional metadata keys.",
    "title": "Payout reconciliation report | Stripe Documentation",
    "description": "Reconcile each payout with the batch of transactions it settles.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/docs/reports/select-a-report",
    "markdown": "# Select a report | Stripe DocumentationThe Stripe Docs logo\n\n## Find the right report to fit your financial workflow.\n\nStripe has a variety of different reports that provide information about your transactions. Start with the task you’re looking to perform and use the table below to identify the best report.\n\n| Task | Suggested report |\n| --- | --- |\n| *   Download monthly transaction history<br>*   View monthly totals by transaction category<br>*   [Reconcile](https://docs.stripe.com/reports/select-a-report#reconciliation) your Stripe balance like a bank account<br>*   Download a list of your payouts | [Balance](https://docs.stripe.com/reports/balance) |\n| *   Break down the individual transactions included in each payout to your bank account<br>*   Download the detail for multiple payouts at a time | [Payout reconciliation](https://docs.stripe.com/reports/payout-reconciliation) |\n\n## Reconciling your cash ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Balance](https://docs.stripe.com/reports/balance) and [Payout reconciliation](https://docs.stripe.com/reports/payout-reconciliation) reports both provide downloadable transaction history including custom metadata, and you can use either to reconcile your cash. The reports group transactions in different ways to facilitate different types of reconciliation.\n\n### The Balance report![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Balance report resembles a bank statement and is optimized for users who treat their Stripe account similar to a bank account in their accounting system. The Balance report helps you to record all activity that occurred in Stripe during a date range. Payouts are recorded as simple transfers between your Stripe account and your bank account, which don’t correspond to any specific payments. Like a bank account, the balance is reconciled at the end of the period to confirm that all transactions have been accounted for.\n\n### The Payout reconciliation report![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payout reconciliation report is optimized for users on automatic payout plans who model their Stripe balance as a temporary clearing account in their accounting system. This report helps you to reconcile each payout against the transactions included in that batch after it settles.\n\n### Reconciling between the reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMost reconciliation workflows don’t require using both reports, but it can be helpful to understand how they fit together.\n\nThe following table shows an account on a [two day rolling schedule](https://docs.stripe.com/payouts#payout-schedule) with 5 days of activity. The account was opened on the 1st of the month and accepted 10 USD in charges from its customers on its first day. Those funds became available on the 3rd, and the account received its first payout to its bank account because of the 2 day payout schedule.\n\n| DAY | TRANSACTIONS | PAYOUTS | BALANCE AT EOD |\n| --- | --- | --- | --- |\n| 1st | 10 USD |     | 10 USD |\n| 2nd | 20 USD |     | 30 USD |\n| 3rd | 30 USD | 10 USD | 50 USD |\n| 4th | 50 USD | 20 USD | 80 USD |\n| 5th | 70 USD | 30 USD | 120 USD |\n\nGiven the above account activity and a [date range](https://docs.stripe.com/reports/options#date-range) of **3rd–5th**, the [Balance summary](https://docs.stripe.com/reports/balance) would include the following data.\n\n| BALANCE SUMMARY |     |\n| --- | --- |\n| Starting balance | 30 USD |\n| Balance change from activity | 150 USD |\n| Total payouts | \\-60 USD |\n| Ending balance | 120 USD |\n\nThe [Balance change from activity](https://docs.stripe.com/reports/balance) section of the Balance report includes all transactions that occurred from the 3rd through the 5th. The total of these transactions matches the **Balance change from activity** line item in the balance summary of 150 USD.\n\nThe [Payout reconciliation](https://docs.stripe.com/reports/payout-reconciliation) report includes transactions from the 1st through the 3rd because these transactions were paid out within the selected date range of 3rd–5th. The sum of these transactions matches the **Total Payouts** line item of the balance summary of -60 USD.\n\nThe [Ending balance reconciliation](https://docs.stripe.com/reports/payout-reconciliation) section at the bottom of the Payout reconciliation report includes transactions from the 4th and 5th because these transactions weren’t paid out within the selected date range of 3rd–5th. The sum of these transactions matches the **Ending balance** line item in the balance summary of 120 USD.\n\n## Including transactions in a given date range![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you run a report, you select the reporting period using the controls in the dashboard, or by specifying start and end dates via the API. Each report uses a different type of date to determine which transactions fall within the reporting period.\n\n| Report | Relevant Date | Report Column |\n| --- | --- | --- |\n| [Balance](https://docs.stripe.com/reports/balance) | Date of change in Stripe balance | Balance transaction `created` (\\*) |\n| [Payout reconciliation](https://docs.stripe.com/reports/payout-reconciliation) | Date automatic payout is available | `automatic_payout_effective_at` |\n\n(\\*) except automatic payout transactions, which impact your Stripe balance based on the `available_on` date",
    "title": "Select a report | Stripe Documentation",
    "description": "Find the right report to fit your financial workflow.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/reconciliation/overview",
    "markdown": "# How reconciliation works | Stripe DocumentationThe Stripe Docs logo\n\n## How reconciliation worksBeta\n\n## Learn how Stripe automates reconciliation across various data sources.\n\nLearn how Stripe helps you reconcile the activity on your Stripe account with your transaction data and bank statement.\n\nStripe uses the following three datasets in the reconciliation process. To match records between two datasets, Stripe relies on a shared reference key present in both datasets.\n\n*   **Your transaction data**: Your internal record of payments, like orders or sales records that reflect the gross amount for every transaction stored in your system. This could be your internal order management system or the list of invoices stored in your ERP for example, which contains information about all receivable expectations. Stripe uses this data to estimate the gross amount expected for each transaction and to create payment expectations. For example, successfully delivered orders create payment expectations. You can use the Stripe Dashboard to manually import this data using CSV files.\n*   **Stripe transaction**: Data produced by Stripe as the confirmation of the money movement. This includes any charges, refunds, or payouts processed by Stripe. This data is fetched into the reconciliation workspace every 12 hours.\n*   **Bank statement**: Bank account statements that confirm the money movement claimed by Stripe in your bank account. Stripe fetches this data directly from your bank account through Financial Connections on a daily basis. Link your bank account through Financial Connections if you haven’t already.\n\nStripe reconciliation enables you set up three types of reconciliations using the above datasets:\n\n[](#bank-reconciliation)\n\nBank reconciliation enables you to reconcile the payouts paid by Stripe with the cash deposited in your bank account. To enable this, Stripe needs access to your bank statement. Stripe can fetch your bank statement directly from your bank account through [Stripe Financial Connections](https://docs.stripe.com/financial-connections). You need to link your bank account through Financial Connections and provide access for Reconciliation to use this information. You could perform this step during the Bank reconciliation sign up process.\n\nAfter you provide access to your bank statement, Stripe automatically reconciles the Stripe payouts with the corresponding deposit in your bank account to determine the amount received and any outstanding balance. You can access the details of each Stripe payout, the bank deposit, and the corresponding reconciliation statuses.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/bank-reconciliation.ce5a68761c0e9f0d507b4e66433bf5cf.png)\n\n[](#transaction-reconciliation)\n\nTransaction reconciliation enables you to reconcile Stripe transactions with your internal records at an individual transaction level. It enables you to track and make sure that your internal records and Stripe transactions match, and identify any gaps between the two on a regular basis and take corrective action.\n\nYou can ingest and map transaction data from your internal records to Stripe and automate the reconciliation between the two datasets. Stripe uses common reference keys present in both data sets to connect and reconcile the data. These references could be Stripe generated references like `charge_id`, or your own references that you pass into Stripe in the form of metadata.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/transaction-reconciliation.3e0dddd720f08c255bd9dcdcb21f03a8.png)\n\n[](#combined-reconciliation)\n\nYou can use a combination of transaction and bank reconciliation to track the complete lifecycle of a transaction from its origin (within your internal records) to Stripe transactions and your bank statement. The transaction data is reconciled with Stripe transactions on a one-to-one basis, and payouts from Stripe are reconciled with your bank statements. With the reconciled data, you can verify if:\n\n*   A transaction that you have initiated has been processed by Stripe accurately.\n*   If the payout against the same transaction has been received in your bank account.\n\nBy setting up this three way reconciliation between your transaction data, Stripe transactions, and your bank statements, you can accurately track information across systems and validate them before updating your books.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/combined-reconciliation.b6e8c8732c7dab08cc7887d2c2efec67.png)",
    "title": "How reconciliation works | Stripe Documentation",
    "description": "With Stripe reconciliation, you can reconcile settlement data, transaction data, and bank statements with Stripe data automatically.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/reconciliation/bank-reconciliation",
    "markdown": "# Bank reconciliation | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to reconcile your Stripe payouts with cash in your bank.\n\nThe [Bank reconciliation report](https://dashboard.stripe.com/reconciliation/bank?src=docs) enables you to reconcile payouts generated by Stripe with the cash in your bank account, helping you track the cash from your business as it moves from Stripe to your bank.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/bank-reconciliation-hero-illustration.3e51d76d4896a4684177b02ce3a9ab9b.png)\n\nThe Bank reconciliation report allows you to:\n\n*   Understand the monthly summary of activity on your Stripe account and its impact on payouts and the cash in your bank.\n*   Track the amount of cash realized from Stripe in your bank account.\n*   Track all Stripe payouts and their reconciliation status with bank deposits in a single place.\n*   Make sure you have the data required to accurately close your books.\n\n#### Note\n\nBank reconciliation is currently only available for users with direct US-based Stripe accounts that are on an automated payout schedule. This feature is not yet accessible for Stripe Connect accounts or users based outside the United States.\n\n#### Note\n\nStripe’s reconciliation features aren’t a substitute for professional services or professional advice.\n\n[](#how-bank-reconciliation-works)\n\nBank reconciliation helps you reconcile Stripe payouts with the deposits in your bank account, so you can keep track of all the funds received from Stripe and connect your revenue with cash in your bank. To enable the reconciliation, [link your bank account](#link-bank-account) on Stripe and approve access for reconciliation.\n\nAfter you provide access to your bank statement, Stripe automatically reconciles the Stripe payouts with the corresponding deposit in your bank account to determine the amount received and any outstanding balance. You can then access the details of each Stripe payout, the bank deposit, and the corresponding reconciliation statuses from the Dashboard. We prepare the summaries based on your Stripe account’s timezone and UTC.\n\n### Link bank account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo link your bank account, follow these steps:\n\n1.  **Initiate the process**: Click the **Link bank account** button on the bank reconciliation page.\n2.  **Provide consent**: Review Stripe’s privacy policy, linked account terms, and the details of the bank account where your Stripe payouts are being deposited.\n3.  **Select your bank**: Select your bank either from the list of the most frequently chosen banks shown in the tiles or by searching for it.\n4.  **Authenticate access**: Sign in to your banking portal.\n5.  **Select the account**: Select the account where your Stripe payouts are being deposited.\n6.  **Confirmation**: You’ll see a success message when the link is successful. This might take a few minutes to complete.\n\nThis process isn’t required if you already have a linked bank account on Stripe. If your bank link is inactive, you’ll need to relink and re-authenticate the access.\n\n[](#bank-reconciliation-summary)\n\nThe Dashboard summary offers an overview of activities affecting your Stripe balance and the related payouts to your bank account. It breaks down your activity by reporting categories, linking it with Stripe’s payouts and the funds received in your bank. It helps you understand the Stripe payment amounts and corresponding cash reconciled with your bank each month. This aids in creating a revenue-to-cash breakdown necessary for your monthly close process.\n\n#### Note\n\nThe activity available in the bank reconciliation summary corresponds to the [Balance change from activity](https://docs.stripe.com/reports/balance) report. This includes all activity that affects your balance, including charges, refunds, disputes, other adjustments, and fees during a month.\n\nConsider the following example of a Stripe account which is on daily automatic payout, and has a payout speed of 2 business days with 8 days of activity. The account accepted payment with a value of 10 USD on January 28. Because the payout speed is 2 business days, these funds became available on January 30 and the first payout was processed to the bank account. For simplicity, assume there are no fees or other debits on these transactions.\n\n| Date | Transaction | Payout | Received in bank |\n| --- | --- | --- | --- |\n| January 28 | 10 USD |     |     |\n| January 29 | 30 USD |     |     |\n| January 30 | 50 USD | 10 USD | 10 USD |\n| January 31 | 70 USD | 30 USD | 30 USD |\n| February 1 | 60 USD | 50 USD | 50 USD |\n| February 2 | 100 USD | 70 USD | 70 USD |\n| February 3 | 120 USD | 60 USD | 60 USD |\n| February 4 |     | 100 USD | \\*  |\n\n\\* This example assumes that payouts aren’t credited into your bank on a Sunday, and therefore no amount is received on February 4 (which we assume to be a Sunday).\n\nGiven the above account activity, the bank reconciliation summary on February 4 would have the following data:\n\n|     |     | January | February |\n| --- | --- | --- | --- |\n| Total payable | Total | 160 USD | 280 USD |\n| Pending | 0 USD | 120 USD |\n| Paid | 160 USD | 160 USD |\n| Reconciled with bank | Total | 160 USD | 60 USD |\n| In same month | 40 USD | 60 USD |\n| In subsequent months | 120 USD | 0 USD |\n| Unreconciled |     | 0 USD | 100 USD |\n\nThe table above indicates that transactions worth 160 USD and 280 USD were available for payout to your bank account in January and February respectively. In January, the entire 160 USD was disbursed from Stripe. Of this amount, which has been fully reconciled with your bank statement, 40 USD was received in your bank account within the same month of the transaction (January), whereas the remaining 120 USD was received in the following months (February, specifically).\n\nIn February, out of a total available payout of 280 USD, Stripe has disbursed 160 USD, with the remaining 120 USD still pending and labeled as `Pending`. From the paid 160 USD, 60 USD has been reconciled with your bank account and was received within the same month of the transaction (February). The remaining 100 USD is yet to be deposited in your bank account and is consequently categorized as `Unreconciled`.\n\n[](#cash-realized)\n\nThe cash realized in bank section shows you the total amount received from Stripe in your bank account during a calendar month. This helps you monitor your monthly cash inflow from Stripe. We capture this information from your bank statement and you can use it to update your cash accounts during the close process for the month.\n\nIn the example of account activity mentioned in the above section, the cash realized in bank section would have the following data:\n\n|     | January | February |\n| --- | --- | --- |\n| Total cash realized in bank | 40 USD | 180 USD |\n\nYou can see that the total amount reconciled with the bank (220 USD) matches the sum of the amounts received in your bank account over the two months. Moreover, the sum of the amount reconciled from January’s subsequent months and the amount reconciled within the same month from February (120 USD + 60 USD = 180 USD) equals the total cash realized from Stripe in February (180 USD).\n\n[](#reconciliation-records)\n\nThis section provides a list of all the payouts made by Stripe, the bank deposits, and their corresponding reconciliation and payout statuses. You can filter and view this data based on payout date, method, payout status, and reconciliation status.\n\nIn the account activity example, the payouts have the following data:\n\n| Payout date | Matching key | Payout status | Payout amount | Received in bank | Bank receipt date | Reconciliation status |\n| --- | --- | --- | --- | --- | --- | --- |\n| February 5 | `ST-1239R12DF` | In transit | 120 USD |     |     |     |\n| February 4 | `ST-1334R12DG` | Paid | 100 USD |     |     | Unreconciled |\n| February 3 | `ST-1436R12DH` | Paid | 60 USD | 60 USD | February 3 | Reconciled |\n| February 2 | `ST-1537R12DI` | Paid | 70 USD | 70 USD | February 2 | Reconciled |\n| February 1 | `ST-1639R12DJ` | Paid | 50 USD | 50 USD | February 1 | Reconciled |\n| January 31 | `ST-1738R12DK` | Paid | 30 USD | 30 USD | January 31 | Reconciled |\n| January 30 | `ST-1839R12DL` | Paid | 10 USD | 10 USD | January 30 | Reconciled |\n\n### Payouts report![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Column name | Description |\n| --- | --- |\n| `payout_date` | The date that the payout is expected to arrive in the bank. |\n| `matching_key` | The common reference key between Stripe payouts and your bank statements that we use to match records and perform reconciliation. |\n| `payout_status` | The status of the payout paid by Stripe. |\n| `payout_amount` | The net amount paid by Stripe against the payout. |\n| `received_in_bank` | The amount received in your bank account against the payout. |\n| `bank_receipt_date` | The date that the payout is received in your bank account. Stripe fetches this information from your bank deposits. |\n| `reconciliation_status` | The reconciliation status of the payout. We match Stripe payouts with your bank deposits and assign each payout one of the following statuses: ‘Reconciled’ or ‘Unreconciled’. |\n\n[](#how-we-use-your-data)\n\nThe Bank reconciliation report uses your Stripe transactions and Financial Connections accounts to provide you with bank reconciliation services. You can control which Stripe products receive and use your financial accounts data from the [Link external account settings](https://dashboard.stripe.com/settings/linked-accounts) page.\n\n#### Note\n\nThe bank reconciliation services are provided “as-is.” There might be delays in data rendering. You’re responsible for checking the accuracy and completeness of the data.",
    "title": "Bank reconciliation | Stripe Documentation",
    "description": "Reconcile Stripe payouts with the cash in your bank account and verify the monthly summary of your revenue to cash breakdown.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoices/line_item",
    "markdown": "# Invoice Line Item | Stripe API Reference\n\n## [The Invoice Line Item object](https://docs.stripe.com/api/invoices/line_item)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The amount, in cents.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   The ID of the invoice that contains this line item.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription`, `metadata` reflects the current metadata from the subscription associated with the line item, unless the invoice line was directly updated with different metadata after creation.\n    \n*   The period this `line_item` covers. For subscription line items, this is the subscription period. For prorations, this starts when the proration was calculated, and ends at the period end of the subscription. For invoice items, this is the time at which the invoice item was created or the period of the item. If you have [Stripe Revenue Recognition](https://docs.stripe.com/revenue-recognition) enabled, the period will be used to recognize and defer revenue. See the [Revenue Recognition documentation](https://docs.stripe.com/revenue-recognition/methodology/subscriptions-and-invoicing) for details.\n    \n*   The price of the line item.\n    \n*   Whether this is a proration.\n    \n*   The quantity of the subscription, if the line item is a subscription or a proration.\n    \n*   A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`.\n    \n\n### More attributes\n\n*   #### \n    \n    amount\\_excluding\\_taxnullable integer\n    \n*   #### \n    \n    discount\\_amountsnullable array of objects\n    \n\n*   #### \n    \n    discountsarray of stringsExpandable\n    \n*   #### \n    \n    invoice\\_itemnullable stringExpandable\n    \n\n*   #### \n    \n    proration\\_detailsnullable object\n    \n*   #### \n    \n    subscriptionnullable stringExpandable\n    \n*   #### \n    \n    subscription\\_itemnullable stringExpandable\n    \n*   #### \n    \n    tax\\_amountsarray of objects\n    \n*   #### \n    \n    tax\\_ratesarray of objects\n    \n*   #### \n    \n    unit\\_amount\\_excluding\\_taxnullable decimal string\n    \n\nThe Invoice Line Item object\n\n```\n{  \"id\": \"il_tmp_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"object\": \"line_item\",  \"amount\": 1000,  \"amount_excluding_tax\": 1000,  \"currency\": \"usd\",  \"description\": \"My First Invoice Item (created for API docs)\",  \"discount_amounts\": [],  \"discountable\": true,  \"discounts\": [],  \"invoice_item\": \"ii_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1696975413,    \"start\": 1696975413  },  \"price\": {    \"id\": \"price_1NzlYfGgdF1VjufL0cVjLJVI\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1696965933,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_OnMHDH6VBmYlTr\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"proration\": false,  \"proration_details\": {    \"credited_items\": null  },  \"quantity\": 1,  \"subscription\": null,  \"tax_amounts\": [],  \"tax_rates\": [],  \"type\": \"invoiceitem\",  \"unit_amount_excluding_tax\": \"1000\"}\n```\n\n## [Create an invoice](https://docs.stripe.com/api/invoices/create)\n\nThis endpoint creates a draft invoice for a given customer. The invoice remains a draft until you [finalize](#finalize_invoice) the invoice, which allows you to [pay](#pay_invoice) or [send](#send_invoice) the invoice to your customers.\n\n### Parameters\n\n*   Controls whether Stripe performs [automatic collection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice’s state doesn’t automatically advance without an explicit action.\n    \n*   Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. Defaults to `charge_automatically`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `charge_automatically` |\n    | `send_invoice` |\n    \n*   The ID of the customer who will be billed.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users. Referenced as ‘memo’ in the Dashboard.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The ID of the subscription to invoice, if any. If set, the created invoice will only include pending invoice items for that subscription. The subscription’s billing cycle and regular subscription events won’t be affected.\n    \n\n### More parameters\n\n*   #### \n    \n    account\\_tax\\_idsarray of strings\n    \n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    default\\_payment\\_methodstring\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    pending\\_invoice\\_items\\_behaviorenum\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the invoice object. Raises [an error](#errors) if the customer ID provided is invalid.\n\n```\ncurl https://api.stripe.com/v1/invoices \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZwdNtLEOXuvB\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Create a preview invoice](https://docs.stripe.com/api/invoices/create_preview)\n\nAt any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.\n\nNote that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.\n\nYou can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the `subscription_details.proration_date` parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where `period[start]` is equal to the `subscription_details.proration_date` value passed in the request.\n\nNote: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. [Learn more](https://docs.stripe.com/currencies/conversions)\n\n### Parameters\n\n*   The identifier of the customer whose upcoming invoice you’d like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.\n    \n*   The identifier of the subscription for which you’d like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer’s subscriptions.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n*   #### \n    \n    invoice\\_itemsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    subscription\\_detailsobject\n    \n\n### Returns\n\nReturns an invoice if valid customer information is provided. Raises [an error](#errors) otherwise.\n\nPOST /v1/invoices/create\\_preview\n\n```\ncurl https://api.stripe.com/v1/invoices/create_preview \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZwdNtLEOXuvB\n```\n\n```\n{  \"id\": \"upcoming_in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Update an invoice](https://docs.stripe.com/api/invoices/update)\n\nDraft invoices are fully editable. Once an invoice is [finalized](https://docs.stripe.com/billing/invoices/workflow#finalized), monetary values, as well as `collection_method`, become uneditable.\n\nIf you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on, sending reminders for, or [automatically reconciling](https://docs.stripe.com/billing/invoices/reconciliation) invoices, pass `auto_advance=false`.\n\n### Parameters\n\n*   Either `charge_automatically` or `send_invoice`. This field can be updated only on `draft` invoices.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `charge_automatically` |\n    | `send_invoice` |\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users. Referenced as ‘memo’ in the Dashboard.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    account\\_tax\\_idsarray of strings\n    \n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    default\\_payment\\_methodstring\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the invoice object.\n\n```\ncurl https://api.stripe.com/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Update an invoice's line item](https://docs.stripe.com/api/invoices/update_line)\n\nUpdates an invoice’s line item. Some fields, such as `tax_amounts`, only live on the invoice line item, so they can only be updated through this endpoint. Other fields, such as `amount`, live on both the invoice item and the invoice line item, so updates on this endpoint will propagate to the invoice item as well. Updating an invoice’s line item is only possible before the invoice is finalized.\n\n### Parameters\n\n*   Invoice ID of line item\n    \n*   #### \n    \n    line\\_item\\_idstringRequired\n    \n    Invoice line item ID\n    \n*   The integer amount in cents of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer’s account, pass a negative amount.\n    \n*   An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. For [type=subscription](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-type) line items, the incoming metadata specified on the request is directly used to set this value, in contrast to [type=invoiceitem](https://docs.stripe.com/api/invoices/api/invoices/line_item#invoice_line_item_object-type) line items, where any existing metadata on the invoice line is merged with the incoming data.\n    \n\n*   The ID of the price object. One of `price` or `price_data` is required.\n    \n*   Non-negative integer. The quantity of units for the line item.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_amountsarray of objects\n    \n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n### Returns\n\nThe updated invoice’s line item object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoices/:id/lines/:id\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1NuhUa2eZvKYlo2CWYVhyvD9/lines/il_tmp_1Nzo1ZGgdF1VjufLzD1UUn9R \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"il_tmp_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"object\": \"line_item\",  \"amount\": 1000,  \"amount_excluding_tax\": 1000,  \"currency\": \"usd\",  \"description\": \"My First Invoice Item (created for API docs)\",  \"discount_amounts\": [],  \"discountable\": true,  \"discounts\": [],  \"invoice_item\": \"ii_1Nzo1ZGgdF1VjufLzD1UUn9R\",  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1696975413,    \"start\": 1696975413  },  \"price\": {    \"id\": \"price_1NzlYfGgdF1VjufL0cVjLJVI\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1696965933,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_OnMHDH6VBmYlTr\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1000,    \"unit_amount_decimal\": \"1000\"  },  \"proration\": false,  \"proration_details\": {    \"credited_items\": null  },  \"quantity\": 1,  \"subscription\": null,  \"tax_amounts\": [],  \"tax_rates\": [],  \"type\": \"invoiceitem\",  \"unit_amount_excluding_tax\": \"1000\"}\n```",
    "title": "Invoice Line Item | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/netsuite/overview",
    "markdown": "# Stripe Connector for NetSuite | Stripe DocumentationThe Stripe Docs logo\n\n## Use the connector to reconcile your Stripe activity into NetSuite.\n\nThe Stripe Connector for NetSuite synchronizes your Stripe data to NetSuite, including customers, invoices, payments, refunds, disputes, deposits, and more. The connector eliminates hours of manual work, replacing costly custom integrations with no-code prebuilt solutions, and providing the flexibility to customize the integration to your unique business needs.\n\n## Get started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you want to use the Stripe Connector for NetSuite, you must work with an official implementation partner to set up the connector.\n\n1.  [Prepare your Stripe and NetSuite accounts](https://docs.stripe.com/connectors/netsuite/onboarding) for onboarding.\n2.  [Contact us](https://marketplace.stripe.com/apps/netsuite-connector) to get started with your implementation.\n\n## Workflows![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe connector enables multiple workflow automations to reconcile your Stripe data into NetSuite. Every flow includes [deposit automation](https://docs.stripe.com/connectors/netsuite/deposit-automation).",
    "title": "Stripe Connector for NetSuite | Stripe Documentation",
    "description": "Use the connector to reconcile your Stripe activity into NetSuite.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-data/import-external-data/connectors/google-play",
    "markdown": "# Stripe connector for Google Play Store\\*\n\n## Automate recurring file imports from Google Play Store to Stripe.\n\nTo set up an automated job for importing data and make sure that your Stripe products remain up-to-date, you can import files from the Google Play Store into the Stripe Data Management Platform.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore you integrate, make sure that you have:\n\n1.  An active Google Cloud and Play Console account with access to the application files.\n2.  Admin account access to the Stripe Dashboard.\n3.  Enabled the APIs for Google Cloud Storage and Google Play Android Developer.\n4.  A service account on Google Cloud platform. The Data Connector uses this account to access your application’s financial reports.\n5.  The private key of your service account that’s saved securely.\n6.  The service account added under **Users and permissions** in Play Console.\n7.  The application’s package name (the URL below the app name in Play Console) and Google Cloud Storage URI.\n\n#### Disclaimer\n\nNote: By using this Stripe Connector you warrant that you’ve obtained the requisite permissions, and provided the necessary notices and consents required, in order for you to use the Stripe Connector and to enable Stripe to provide you the Services.\n\n[](#enable-apis)\n\nTo enable the necessary APIs:\n\n1.  Sign in to the [Google Cloud Console](https://console.cloud.google.com/), then select your project for the application in the top left corner.\n2.  Click **API and Services** > **Enabled APIs & services** in the left pane.\n3.  If the list on this page contains the **Cloud Storage API** and the **Google Play Android Developer API**, skip this step and [create a service account key](#generate-keys) instead. Otherwise, click **Enable APIs and Service**.\n4.  Search for **Play Store**, then select **Google Play Android Developer API**.\n5.  Click the **Enable** button.\n\n[](#create-service-account)\n\nTo create a service account:\n\n1.  Click **Credentials** under **APIs & Services** in the left pane.\n2.  Click **\\+ Create credentials** > **Service account**.\n3.  Enter a name and description for the service account. The Data Connector uses this account to access your application’s financial reports.\n4.  Add the **Storage Object Viewer** role from the **Role** dropdown, then click **Done**.\n\n[](#generate-keys)\n\nAfter you create the service account, Google Cloud redirects you to the Credentials page. From this page:\n\n1.  Click the service account that you created.\n2.  On the Keys page, click **Add key** > **Create new key**.\n3.  Select **JSON**, then click **Create** to download a private key on your device. Make sure that you secure this private key. If you lose it, you must generate a new one because it’s the only copy of the private key.\n\n[](#add-service-account)\n\nTo integrate the service account on Play Console:\n\n1.  On the [Play Console page](https://play.google.com/console/), click **Users and permissions** in the left pane.\n2.  Click **Invite new user**.\n3.  Enter the email address of the service account you created.\n4.  Under **App permissions**, click **Add app**.\n5.  Select the app that you want to integrate with, then click **Apply**.\n6.  Select **View app information (read-only)**, **View financial data**, and **Manage orders and subscriptions**, then click **Apply**.\n7.  Click **Invite user** > **Send Invite**.\n\n[](#submit-service-account)\n\nTo submit the service account credentials and your app package name:\n\n1.  In the Google Play Store Console Dashboard, click **Copy Cloud Storage URI** to copy your Google Cloud Storage URI. The URI begins with `pubsite_prod_rev` (for example, `pubsite_prod_rev_01234567890987654321`).\n2.  Enter your App Package Name. This is the URL that appears under the app name in the Play Console.\n3.  Use the secure link that we provide to upload the Service Account Credentials JSON file.\n\n[](#upload-api-key)\n\nTo configure the Stripe connector for Google Play Store using Stripe:\n\n1.  Click **\\+ Set up connector** > **Google Play Store** in the [Connectors tab on the Data management page](https://dashboard.stripe.com/data-management/connectors).\n2.  Enter a name, then click **Next**.\n3.  Review the permissions, then click **Next**.\n4.  Upload your private key file to the **Private key** section. Then, enter the **App package name** and **Google Cloud Storage Bucket ID** [that you created for the service account](#generate-keys).\n5.  Click **Authenticate** to establish a connection.\n\n[\n\n## Maintain your Google Play Store connection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#maintain-connection)\n\nAfter Stripe establishes your connection, we fetch your data once a day. To monitor the health of your connection:\n\n1.  View the status and the latest sync details of your established connections in the [Data Management Connector Dashboard](https://dashboard.stripe.com/data-management/connectors).\n2.  Click the connector to manage an individual connection. You can edit the name, re-authenticate a broken connection, and delete a connection.\n\n\\*Google Play is a trademark of Google LLC.",
    "title": "Stripe connector for Google Play Store* | Stripe Documentation",
    "description": "Automate recurring file imports from Google Play Store to Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/reconciliation/transaction-reconciliation",
    "markdown": "# Transaction Reconciliation | Stripe DocumentationThe Stripe Docs logo\n\n## Transaction ReconciliationBeta\n\n## Set up the reconciliation between Stripe transactions and your transaction data.\n\nTransaction reconciliation enables you to reconcile between your internal records with Stripe processed charges and refunds at an individual transaction level.\n\nTransaction reconciliation is useful for businesses that have:\n\n*   High transaction volumes, such as thousands of monthly transactions.\n*   Multiple payment methods used in a single transaction, such as gift cards and discounts.\n*   Long transaction life cycles where transactions are spread across multiple periods.\n\nUsing transaction reconciliation, you can:\n\n*   Track the collections against each individual transaction.\n*   Ensure high integrity for your revenue assurance process.\n*   Seamlessly reconcile large volumes of data without the constraints of spreadsheets.\n*   Save time spent on manual reconciliations.\n\n[](#get-started)\n\nTo get started with Stripe reconciliation upload your transaction data. Then you can:\n\n*   Track the reconciliation status.\n*   View analytics.\n*   Download prebuilt reports.\n*   Generate custom reports.\n\n[](#import-data)\n\nTo import transaction data:\n\n1.  Go to the Stripe Dashboard > reconciliation overview page and click **Import data**.\n2.  Click **Browse** and select your file. It must be smaller than 70 MB.\n3.  Click **Import CSV**.\n4.  To track the progress of the import, click **View data management**.\n\n#### Note\n\nYou are responsible for the data you provide to Stripe. By providing us data to use, you acknowledge that you have received permission to share that data with Stripe and to enable Stripe to use it to provide you the services.\n\n### Reconciliation data schema![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe transaction data must have some required fields to convert it to Stripe’s canonical reconciliation schema. Here is the expected schema:\n\n| Field name | Description | Type | Required |\n| --- | --- | --- | --- |\n| `Id` | A unique identifier for the payment expectation. For example - UUID, combination of orderitem and fulfillment status etc. | String | Required |\n| `gross_amount` | The gross amount of the payment expectation. Does not account for any fees or currency conversions. | numeric | Required |\n| `currency` | Currency associated with `gross_amount`. | enum | Required |\n| `type` | Either `inbound` or `outbound`. | enum | Required |\n| `customer_id` | Identifier for the customer involved in the payment expectation. | string | Optional |\n| `created_at` | When the payment expectation was created. | timestamp | Required |\n| `updated_at` | When the payment expectation was updated. | timestamp | Optional |\n| `reconciliation_reference` | Reference used to do a look-up on settlement data (`charge_id`). | string | Required |\n\n[](#reconciliation-statuses)\n\nAfter the data is imported, reconciliation starts automatically, and each transaction gets a reconciliation status. The reconciliation status represents the state of the transaction and helps you understand what action to take. Settlement reconciliation and Transaction reconciliation have different statuses.\n\n### Settlement reconciliation statuses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor reconciliation between settlement and bank data, each settlement is assigned one of the following statuses:\n\n*   **Completely matched**: Both “amount” and “settlement\\_id” matched with the Bank Statement\n*   **Unmatched**:“Settlement\\_id” not matched/found either in settlement data or Bank data\n*   **Partially matched**: “Settlement\\_id” matched/found in the Bank Statement but difference in “amount” beyond the threshold\n\nYou can configure the settlement reconciliation threshold when you compare settlement data to bank deposit data. If the difference in amounts is within the threshold, the settlement ID gets tagged as completely matched. If the difference in amounts is outside of the threshold, the settlement ID gets tagged as partially matched.\n\nHere is an example of how the settlement reconciliation statuses are computed (in this example, the threshold is 1 USD):\n\n| Settlement reconciliation status | Settlement ID (Stripe data) | Settlement ID (bank data) | Settlement amount expected (Stripe data) | Deposit amount (bank data) |\n| --- | --- | --- | --- | --- |\n| **Completely matched** | ST-123 | ST-123 | 1000 USD | 1000 USD |\n| **Partially matched** | ST-abc | ST-abc | 1000 USD | 900 USD |\n| **Unmatched** | ST-xyz | null | 1000 USD | null |\n\n### Transaction reconciliation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTransaction reconciliation (between transaction data and settlement data) has four statuses:\n\n*   **Settled**: The record is present in both datasets and the amount is an exact match. In the case of pay-in reconciliation with three data sets, the settlement reconciliation status needs to be completely matched.\n*   **In process**: The record is present in both datasets but the difference in the amounts is beyond the set threshold.\n*   **Open**: The record is present in the transaction data but missing in the Stripe settlement data. A transaction can be open even if the settlement reconciliation for the corresponding `charge_id` is unmatched.\n*   **Foreign**: The record is present in the Stripe settlement data but missing in transaction data.\n\nConfigure the transaction reconciliation threshold when comparing the amount expected (transaction data) and the amount processed (Stripe records). If the difference in amounts is within the threshold, the charge ID gets tagged as **Settled**. If the difference in amounts is outside of the threshold, the charge ID gets tagged as **In process**.\n\nHere is the sample data showing how the transaction reconciliation statuses are computed (in this example, the threshold is 1 USD):\n\n| Transaction reconciliation status | Charge ID (transaction data) | Charge ID (Stripe records) | Amount expected (transaction data) | Amount processed (Stripe records) |\n| --- | --- | --- | --- | --- |\n| **Settled** | `ch_123` | `ch_123` | 50 USD | 50 USD |\n| **In process** | `ch_abc` | `ch_abc` | 50 USD | 45 USD |\n| **Open** | `ch_xyz` | null | 50 USD | null |\n| **Foreign** | null | `ch_789` | null | 50 USD |\n\n[](#view-analytics)\n\nThe reconciliation analytics page provides high-level details about the overall money movement of your business. It also includes charts for reconciliation status and aging summaries.\n\n### Reconciliation status chart![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe reconciliation status chart provides a high-level view of the funds received or pending from Stripe. It shows an aggregated view of the amount corresponding to the transactions across four reconciliation statuses: Open, In Process, Foreign, and Settled. The key insight is to understand the amount for each of the reconciliation statuses and take actions based on the insights.\n\n### Aging summary chart![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe aging summary chart provides a high-level view of the time it takes Stripe to settle processed transactions. It shows an aggregated view of the transaction amount by settlement days. Use the chart to determine whether Stripe is settling the money on time.\n\nThis helps you understand if Stripe is adhering to the agreed-upon SLA (service level agreement). The graph differentiates between the amount settled on or before SLA and after SLA with different colors. Blocks in blue represent the transaction amount settled on or before the SLA. Blocks in red represent the transaction amount settled after SLA.\n\n[](#generate-reports)\n\nHere are the standard reports that you can generate and download from the Stripe Dashboard:\n\n| Report type | Description | Reconciliation type |\n| --- | --- | --- |\n| Reconciliation result | Transaction-level reconciliation report that shows you the reconciliation status of every transaction against their corresponding Stripe charges or refunds. It helps you track whether or not Stripe has processed the right funds against each of your transactions. | *   Transaction reconciliation<br>*   Pay-in reconciliation |\n| Bank settlement | Settlement level report that shows you if you’ve received the money corresponding to each Stripe settlement in your bank account. | *   Settlement reconciliation<br>*   Pay-in reconciliation |\n| Transaction search | Transaction level search report which helps you access all the details of any transaction using a transaction ID or settlement ID. | *   Transaction reconciliation<br>*   Pay-in reconciliation |\n\n### Download a report![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo download a report:\n\n1.  Go to the Dashboard **Reconciliation** > **Pay-in reconciliation** page.\n2.  Go to the **Reports** tab.\n3.  Click **New report**.\n4.  Select the report type and filters.\n5.  Click **Generate button**.\n6.  After the report completes generation, click **Download**.\n\n### Reconciliation result report![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHere are the columns in the reconciliation report:\n\n| Column name | Default | Description |\n| --- | --- | --- |\n| `reference_id` | Y   | The common reference key between your transaction data and Stripe settlements data. For example, `charge_id` (starting with `ch_`) for the charges and `refund_id` (starting with `re_`) for refunds. |\n| `recon_party_name` | Y   | Name of the payment provider that has processed the payment. For example, Stripe. |\n| `transaction_type` | Y   | Type of the transaction: Forward (for charges) or reverse (for refunds). |\n| `reconciliation_status` | Y   | The reconciliation status of the transaction. One of the following: Open, In process, Settled, Foreign. |\n| `transaction_date` | Y   | The date when the sale or refund was created per your transaction data (internal records). |\n| `settlement_date` | Y   | The date on which Stripe initiated the settlement or payout. |\n| `bank_date` | Y   | The date on which the settlement or payout was received in your bank. This information is fetched from your bank statements. |\n| `total_transaction_amount` | Y   | The gross amount corresponding to the charge or refund per your transaction data. |\n| `total_settlement_amount` | Y   | The gross amount corresponding to the charge or refund per the Stripe’s settlement data. |\n| `account_name` | Y   | The name of the account that is debited or credited from the chart of accounts to create the journal entry. |\n| `credit_cycle_days` | N   | Number of days it takes for your funds to become available and paid out. |\n| `age` | N   | The difference between the `transaction_date` and `settlement_date`, which represents the time taken for the corresponding payout to be initiated after the transaction is created. |\n| `settlement_currency` | Y   | The currency in which Stripe has settled the charge or refund. |\n| `settlement_id` | N   | The ID of the settlement or payout in which the charge or refund was settled. |\n| `settlement_status` | N   | The reconciliation status of the settlement. We match Stripe payouts with your bank statements and assign each settlement one of the following status: Matched, Unmatched, Partially matched |\n\n#### Custom data addition![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can add custom metadata from your transaction data to the reconciliation result report as additional columns. For example, if `store_id` is part of the transaction data, it shows up in the custom metadata section.\n\nTo view the available custom metadata, click **Show** under the columns. The metadata is populated in the report by aggregating based on the reconciliation reference, for example the `charge_id`. If multiple rows of metadata are found with the same `charge_id`, they appear as comma-separated values in the report.\n\n### Bank settlement report![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Column name | Description |\n| --- | --- |\n| `recon_party_name` | Name of the party that has initiated this settlement. For example, Stripe. |\n| `settlement_id` | ID of the settlement or payout. |\n| `settlement_date` | The date on which Stripe initiated the settlement or payout. |\n| `bank_date` | The date on which the settlement or payout was received in your bank. This information is fetched from your bank statements. |\n| `settlement_amount` | The net amount paid by Stripe against the settlement. |\n| `bank_received_amount` | The amount received in your bank account against the settlement. |\n| `outstanding_amount` | The outstanding amount against the settlement. This is the difference between the `settlement_amount` and `bank_received_amount`. |\n| `settlement_match_status` | The reconciliation status of the settlement. We match Stripe payouts with your bank statements and assign each settlement one of the following statuses: Matched, Unmatched, Partially matched. |\n\n#### Transaction search report![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Column name | Description |\n| --- | --- |\n| `reference_id` | The common reference key between your transaction data and Stripe settlements data. For example: `charge_id` (starting with `ch_`) for the charges and `refund_id` (starting with `re_`) for refunds. |\n| `recon_party_name` | Name of the payment provider that has processed the payment. For example, Stripe. |\n| `transaction_type` | Type of transaction: forward (For charges) or reverse (For refunds). |\n| `reconciliation_status` | The reconciliation status of the transaction. One of the following: Open, In process, Settled, Foreign. |\n| `transaction_date` | The date on which the sale or refund was created as per your transaction data (internal records). |\n| `settlement_date` | The date when Stripe initiated the settlement or payout. |\n| `total_transaction_amount` | The gross amount corresponding to the charge or refund as per your transaction data. |\n| `total_settlement_amount` | The gross amount corresponding to the charge or refund as per the Stripe’s settlement data. |\n| `account_name` | The name of the account that is debited or credited from the COA to create the journal entry. |\n| `settlement_currency` | The currency in which Stripe has settled the charge or refund. |\n| `settlement_id` | The ID of the settlement or payout in which the charge or refund was settled. |\n| `settlement_status` | The reconciliation status of the settlement. We match Stripe payouts with your bank statements and assign each settlement one of the following status: Matched, Unmatched, Partially matched. |",
    "title": "Transaction Reconciliation | Stripe Documentation",
    "description": "Reconcile your transaction level records with charges and refunds processed on Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior",
    "markdown": "# Specify product tax codes and tax behavior\n\n## Learn how to add tax codes and tax behavior to your products and prices to automatically calculate tax.\n\n#### Note\n\nStripe Tax uses product tax codes (PTCs) to associate products with their applicable tax rates, which might be lower or higher in different cities or countries. [Assign each of your products a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to automatically apply the rate and other taxability rules.\n\nIf a product doesn’t fit any of the specific codes, use one of the codes with “General” in its name to apply the standard rate of the jurisdiction. See our [list of available tax codes](https://docs.stripe.com/tax/tax-codes).\n\n### Preset tax codes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen activating Stripe Tax you can set two types of preset tax codes: one for products and one for shipping. You can set both in the [Tax settings](https://dashboard.stripe.com/settings/tax) in the Dashboard.\n\n![The tax settings showing the preset tax codes, and the default shipping tax code.](https://b.stripecdn.com/docs-statics-srv/assets/pp_settings_v2.b1d3f908cebf1292d37b0d2f7c5cf4c0.png)\n\nThe tax settings showing the preset tax codes, and the default shipping tax code.\n\n![Preset tax code setting in the Stripe Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/pp_settings.9b418a4caa814152a80f66c7afffd059.png)\n\n#### Preset product tax code ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe preset product tax code represents your product or service in Stripe Tax. We use the preset if you don’t explicitly specify a `tax_code` on your [products](https://docs.stripe.com/api/products \"Products\") or in `product_data` on your transactions. As you process payments, we also use the preset tax code to display the tax thresholds you might be approaching or have exceeded, under the **Monitor tax thresholds** section in your tax settings.\n\nIf you sell multiple different product types (for example, SaaS and e-books), you could use test mode to change your preset tax code and review the impact of different product types on the **Monitor** tab.\n\n#### Preset shipping tax code ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe preset shipping tax code represents the tax treatment for shipping fees when charged. We use this if you don’t explicitly specify a `tax_code` on a shipping rate. Stripe Tax allows you to change the default shipping treatment to Nontaxable if you don’t want to charge any tax on shipping fees. We recommend you leave the default as “Shipping” to ensure the correct tax is always charged.\n\nTo charge tax on shipping for recurring payments, you can create a Product or pass `product_data` for a line item called “shipping” and select the shipping `tax_code`.\n\nThe taxability of shipping can vary by US state and country.\n\n![Map of the United States showing states where shipping is taxable, not taxable, or have no sales tax.](https://b.stripecdn.com/docs-statics-srv/assets/pp_shipping_us_taxability.e90be097aec68286cbc6a83a4e5bfc13.png)\n\n## Tax behavior ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou must specify a `tax_behavior` on a price, or a default tax behavior in the tax settings in the Dashboard, which determines how tax is presented to the buyer. This allows you to localize your checkout depending on the market. When you set tax behavior to exclusive, it adds tax onto the subtotal amount you specify on your price. This is common in US markets and for B2B sales. When set to inclusive, the amount your buyer pays never changes, even if the tax rate varies. This is common practice for B2C buyers in many markets outside the US.\n\n### Setting a default tax behavior (recommended)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can define a default tax behavior that applies to every price that has no tax behavior defined. You can setup the default tax behavior under the [Stripe Tax settings](https://dashboard.stripe.com/settings/tax).\n\nAfter you set the default tax behavior, all prices that don’t have a `tax_behavior` defined, use this setting and are ready for Stripe Tax. The options for the default tax behavior are:\n\n*   **Inclusive**: Inclusive tax is already included in the price. For example, a product has the price defined as 5.00 USD. The final price the customer pays is 5.00 USD.\n*   **Exclusive**: Exclusive tax is added on top of the price. For example, a product has the price defined as 5.00 USD. The tax charged on this product could be 10% and would result in a final price of 5.50 USD. (Tax rates might differ—this is only an explanatory example.)\n*   **Inferred by currency**: The tax behavior is based on the price that’s chosen for a product. For the currencies `USD` and `CAD` the tax behavior is exclusive. For all other currencies the tax behavior is inclusive. This also works with [multi-currency Prices](https://docs.stripe.com/products-prices/pricing-models#multicurrency \"multi-currency price\").\n\nTo override this setting for an individual price, [set a tax behavior on a price](#setting-tax-behavior-on-a-price-(optional)).\n\n## Setting tax behavior on a price (optional)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can set the tax behavior for a [Price](https://docs.stripe.com/api/prices \"Prices\") when creating it with the Dashboard or the API. When creating a Price in the Dashboard, you can inspect the impact of your pricing model on your revenue.\n\n#### Caution\n\nYou can’t change `tax_behavior` after it’s been set to one of “exclusive” or “inclusive”.\n\n![Tax behavior for a Price object in the Stripe Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/pp_pricing.c4124697874540947a451121f0c73c4d.png)\n\nTo create a Price with `tax_behavior` through the API, it might look like this:\n\n`curl https://api.stripe.com/v1/prices \\  -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\  -d unit_amount=10000 \\  -d currency=usd \\  -d product=prod_q23fxaHasd \\  -d tax_behavior=exclusive \\  -d \"recurring[interval]\"=month`\n\nFor a [multi-currency Price](https://docs.stripe.com/products-prices/pricing-models#multicurrency \"multi-currency price\"), use the [currency\\_options.<currency>.tax\\_behavior](https://docs.stripe.com/api/prices/create#create_price-currency_options-tax_behavior) parameter to set different tax behaviors for different currencies.\n\nIn some cases, you might want to use a custom price that hasn’t been pre-configured. You can pass in `price_data` instead of a price ID. For example, accepting a one time payment for a custom price might look like this:\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\  -d success_url=\"[https://example.com/success](https://example.com/success)\" \\  -d cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\" \\  -d \"payment_method_types[0]\"=card \\  -d \"line_items[0][price_data][currency]\"=\"usd\" \\  -d \"line_items[0][price_data][unit_amount]\"=10000 \\  -d \"line_items[0][price_data][tax_behavior]\"=\"exclusive\" \\  -d \"line_items[0][price_data][product]\"=\"prod_Jb3wOhvaIOZZTM\" \\  -d \"line_items[0][quantity]\"=2 \\  -d mode=payment`\n\n## Setting a tax code on a product (recommended) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen creating Products in the Dashboard you can set your `tax_code` in the dropdown by searching for any available [tax code](https://docs.stripe.com/tax/tax-codes). If you don’t, Stripe Tax uses the preset tax code defined on the [Dashboard](https://dashboard.stripe.com/settings/tax). If a product could fit multiple codes, for example, a SaaS product used for personal or business use depending on the type of customer, we recommend creating two separate products in Stripe and assigning the appropriate code to each.\n\n![Tax codes for a product in the Stripe Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/pp_product_tax_category.e6ad090b235a41108b8843420db18330.png)\n\nTo create a Product with `tax_code` using the API, it might look like this:\n\n`curl https://api.stripe.com/v1/products \\  -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\  -d name=\"Test Product\" \\  -d tax_code=  txcd_10000000    `\n\nIn some cases, you might want to use a custom product that hasn’t been pre-configured. You can pass in `product_data` instead of a product ID. For example, accepting a one time payment for a custom product might look like this:\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\  -d success_url=\"[https://example.com/success](https://example.com/success)\" \\  -d cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\" \\  -d \"payment_method_types[0]\"=card \\  -d \"line_items[0][price_data][currency]\"=\"usd\" \\  -d \"line_items[0][price_data][unit_amount]\"=10000 \\  -d \"line_items[0][price_data][tax_behavior]\"=\"exclusive\" \\  -d \"line_items[0][price_data][product_data][name]\"=\"Product name\" \\  -d \"line_items[0][price_data][product_data][tax_code]\"=  txcd_10000000   \\  -d \"line_items[0][quantity]\"=2 \\  -d mode=payment`\n\n## Creating a shipping rate with tax code (optional) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCheckout payment mode allows you to set shipping rates and charge tax on shipping. You can automatically calculate tax on shipping charges by setting the tax code on the shipping rate in the Dashboard or [API](https://docs.stripe.com/api/shipping_rates).\n\n![Shipping rate with a tax code in the Stripe Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/pp_shipping_rate_v3.a204f73ab02310683aace14717d960f4.png)\n\n`curl https://api.stripe.com/v1/shipping_rates \\  -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\  -d display_name=\"Ground shipping\" \\  -d type=\"fixed_amount\" \\  -d \"fixed_amount[amount]\"=500 \\  -d \"fixed_amount[currency]\"=usd \\  -d tax_behavior=\"inclusive\" \\  -d tax_code=\"txcd_92010001\"`",
    "title": "Specify product tax codes and tax behavior | Stripe Documentation",
    "description": "Learn how to add tax codes and tax behavior to your products and prices to automatically calculate tax.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-data/import-external-data/data-template",
    "markdown": "# Transform external data using Data Templates\n\n## Transform external data using Data TemplatesBeta\n\n## Define rules in templates to map external data files to Stripe objects.\n\nYou can use Data Templates to upload and transform external data into Destination records to make it compatible with Stripe products. Data Templates are a set of data processing instructions that you can use to transform external data into Destination records.\n\nData template settings include:\n\n*   Specifying the row in the file where the header is present\n*   Data types that the uploaded fields convert to\n*   Conditions to error out certain rows\n*   How the columns of an uploaded file map to the fields of the Destination Records\n\n[](#create-data-template)\n\nTo create your Data Template:\n\n1.  Go to the Stripe Dashboard > [Data Management](https://dashboard.stripe.com/data-management) page.\n2.  Select **Data Template**.\n3.  Click **Add Data Template** and follow the steps in the details drawer to create the Data template.\n4.  In the **Data template details** step, enter a name for your template and upload a CSV file with sample data.\n\n#### Note\n\nThe header names and rows in your sample file must be the same as the CSV files you plan to transform using the Data template.\n\n[](#configure-csv-data)\n\nConfigure how Stripe processes your external data using Stripe data types.\n\n1.  In the **Header location** field, select your file’s header row number.\n2.  Next, in the **Data types** section, verify or choose a data type for each column.\n3.  Click **CSV settings** to verify or adjust how your file is parsed.\n\n[](#select-destination-record-type)\n\nConfigure how Stripe processes your external data using Stripe data types. You can map user-uploaded data to Stripe using predefined destination record types. Choose the appropriate record type and verify the columns in the uploaded sample file to generate the selected destination record type.\n\nIn the **Select destination record type** step, choose how your data uploads and maps to Stripe by selecting a Destination record type.\n\n[\n\n## Clean up and validation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#cleanup-and-validation)\n\nIn the **Clean up and validate** step, you can use conditions to ignore or validate records. There are two types of conditions:\n\n*   **Clean up conditions**: Add a clean up condition to ignore any records that meet the condition.\n*   **Validation checks**: Add a validation check to identify errors or issues with records and prevent those records from creating Stripe objects.\n\n[\n\n## Map columns![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#map-columns)\n\nAssociate the columns in your file to Stripe object attributes.\n\nMapping options include:\n\n*   Mapping a column from the file directly to the attribute\n*   Manually entering a string value in a text box to assign a hardcoded value to a specific Stripe object attribute\n*   Using custom formulas, such as SUM, CONCAT, and FIND, for data transformation\n\nTo add data mappings:\n\n1.  In the **Mandatory columns** section, add data mappings for each attribute.\n2.  (Optional) In the **Optional columns** section, add a mapping for each data column that maps to an optional Stripe object attribute.\n3.  (Optional) In the **Custom columns** section, add any data columns that don’t map directly to a Stripe object attribute.\n4.  Click **Save and Activate** and view your Data template in the [Data Template](https://dashboard.stripe.com/test/data-management/data-templates) List page.\n5.  Go to the [Import Set](https://dashboard.stripe.com/test/data-management) page, and upload data using your template.",
    "title": "Transform external data using Data Templates | Stripe Documentation",
    "description": "Define rules in templates to map external data files to Stripe objects.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-data/import-external-data/connectors/apple-app-store",
    "markdown": "# Stripe connector for Apple App Store®\\*\n\n## Automate recurring file imports from Apple App Store to Stripe.\n\nTo set up an automated job for importing data and make sure that your Stripe products remain up-to-date, you can import files from the Apple App Store into Stripe’s data management platform.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore you integrate, make sure that you have:\n\n1.  An active Apple Developer and App Store Connect account with access to the application files.\n2.  Admin account access to the Stripe Dashboard.\n3.  An App Store Connect API key with at least the access level of Admin, Finance, or Sales.\n4.  The `.p8` key file that’s saved securely. You need to upload this key to Stripe.\n5.  The Issuer ID associated with the API key.\n6.  The Vendor Number located in the App Store Connect under **Payments and Financial Reports**.\n\n#### Disclaimer\n\nNote: By using this Stripe Connector you warrant that you’ve obtained the requisite permissions, and provided the necessary notices and consents required, in order for you to use the Stripe Connector and to enable Stripe to provide you the Services.\n\n[](#generate-an-app-store-connect-api-key)\n\nTo create a new App Store Connect API key:\n\n1.  Navigate to **Users and Access** > **Integrations** in your [App Store Connect Dashboard](https://appstoreconnect.apple.com/access/api).\n2.  Select the **Team Keys** sub-tab.\n3.  Click the plus icon () next to the heading of active keys table.\n4.  Enter a name, then select **Finance role** to create an API Key.\n5.  Hover over the API key to access additional options, then click **Download API Key** to download the key.\n\nLocate the **Key ID** in the third column of the **Active keys** table and identify the **Issuer ID** directly above the same table.\n\nTo locate your **Vendor number**:\n\n*   Navigate to [App Store Connect Dashboard](https://appstoreconnect.apple.com/).\n*   Click **Payments and Financial Reports**, then access the **Vendor number** under **Legal entity name**.\n\n[\n\n## Maintain your Apple App Store connection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#maintain-connection)\n\nAfter Stripe establishes your connection, we fetch your data once a day. To monitor the health of your connection:\n\n1.  View the status and the latest sync details of your established connections on the [Data management page](https://dashboard.stripe.com/data-management/connectors).\n2.  Click the connector to manage an individual connection. You can edit the name, re-authenticate a broken connection, and delete a connection.\n\n\\*Apple and App Store are trademarks of Apple Inc., registered in the U.S. and other countries and regions.",
    "title": "Stripe connector for Apple App Store®* | Stripe Documentation",
    "description": "Automate recurring file imports from Apple App Store to Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/charges/placing-a-hold",
    "markdown": "# Placing a hold on a card\n\n#### Legacy API\n\nUse the Charges API to authorize a payment now, capture funds later.\n\nStripe supports two-step card payments so you can first authorize a charge, then wait to settle (capture) it later. When a charge is authorized, the card issuer guarantees the funds and holds the amount on the customer’s card for, usually, up to 7 days, or 2 days for in-person payments using [Terminal](https://docs.stripe.com/terminal). The [payment\\_method\\_details.card.capture\\_before](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-capture_before) attribute on the charge indicates the time when the authorization expires.\n\nIf the charge isn’t captured within this time, the authorization is canceled and funds released.\n\nTo authorize a payment without capturing it, make a charge request that also includes the `capture` parameter with a value of **false**. This instructs Stripe to only authorize the amount on the customer’s card.\n\n#### Caution\n\n**Only some payment methods support separate authorization and capture.** For example, card payments, Afterpay, and Klarna support separating these steps. With payment methods that don’t support this functionality, like [ACH](https://docs.stripe.com/payments/ach-debit) or [iDEAL](https://docs.stripe.com/payments/ideal), you can’t capture manually. Refer to the [full list of payment methods](https://docs.stripe.com/payments/payment-methods/integration-options#additional-api-supportability) that support manual capture.\n\nIf you need to cancel an authorization, you can release it by [refunding](https://docs.stripe.com/api#create_refund) the relevant `Charge` object.\n\n`curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=999 \\   -d \"currency\"=\"usd\" \\   -d \"description\"=\"Example charge\" \\   -d \"source\"=\"tok_visa\" \\   -d \"capture\"=\"false\"`\n\n## Capture the funds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo settle an authorized charge, make a [capture charge](https://docs.stripe.com/api#capture_charge) request. The total authorized amount is captured by default, and you cannot capture more than this. To capture less than the initial amount (for example, 8 USD of a 10 USD authorization), pass the `amount` parameter. Partially capturing a charge automatically releases the remaining amount.\n\n`curl -X POST https://api.stripe.com/v1/charges/{{CHARGE_ID}}/capture \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nCard statements from some issuers do not distinguish between authorizations and captured (settled) charges, which can sometimes lead to confusion for your customers. In addition, authorized charges can only be captured once. If you partially capture a charge, you cannot perform another capture for the difference. Depending on your requirements, you may be better served by [saving customer’s card details for later](https://docs.stripe.com/saving-cards) and creating charges as needed.",
    "title": "Placing a hold on a card | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/tax/settings/retrieve",
    "markdown": "# Retrieve settings | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftax%2Fsettings%2Fretrieve)\n\nRetrieves Tax `Settings` for a merchant.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA Tax `Settings` object.\n\n```\ncurl https://api.stripe.com/v1/tax/settings \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"tax.settings\",  \"defaults\": {    \"tax_behavior\": null,    \"tax_code\": \"txcd_10000000\"  },  \"head_office\": {    \"address\": {      \"city\": null,      \"country\": \"US\",      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": \"CA\"    }  },  \"livemode\": false,  \"status\": \"active\",  \"status_details\": {    \"active\": {}  }}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Retrieve settings | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/tax/settings/object",
    "markdown": "# The Tax Setting object | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftax%2Fsettings%2Fobject)\n\n### Attributes\n\n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Default configuration to be used on Stripe Tax calculations.\n    \n*   #### \n    \n    head\\_officenullable object\n    \n    The place where your business is located.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The `active` status indicates you have all required settings to calculate tax. A status can transition out of `active` when new required settings are introduced.\n    \n*   Information about the status.\n    \n\n```\n{  \"object\": \"tax.settings\",  \"defaults\": {    \"tax_behavior\": null,    \"tax_code\": \"txcd_10000000\"  },  \"head_office\": {    \"address\": {      \"city\": null,      \"country\": \"US\",      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": \"CA\"    }  },  \"livemode\": false,  \"status\": \"active\",  \"status_details\": {    \"active\": {}  }}\n```\n\n## [Update settings](https://docs.stripe.com/api/tax/settings/update)\n\nUpdates Tax `Settings` parameters used in tax calculations. All parameters are editable but none can be removed once set.\n\n### Parameters\n\n*   Default configuration to be used on Stripe Tax calculations.\n    \n*   The place where your business is located.\n    \n\n### Returns\n\nA Tax `Settings` object.\n\n```\ncurl https://api.stripe.com/v1/tax/settings \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"defaults[tax_behavior]\"=inclusive \\  -d \"defaults[tax_code]\"=txcd_10000000 \\  -d \"head_office[address][country]\"=DE\n```\n\n```\n{  \"object\": \"tax.settings\",  \"defaults\": {    \"tax_behavior\": \"inclusive\",    \"tax_code\": \"txcd_10000000\"  },  \"head_office\": {    \"address\": {      \"city\": null,      \"country\": \"DE\",      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": null    }  },  \"livemode\": false,  \"status\": \"active\",  \"status_details\": {    \"active\": {}  }}\n```\n\n## [Retrieve settings](https://docs.stripe.com/api/tax/settings/retrieve)\n\nRetrieves Tax `Settings` for a merchant.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA Tax `Settings` object.\n\n```\ncurl https://api.stripe.com/v1/tax/settings \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"tax.settings\",  \"defaults\": {    \"tax_behavior\": null,    \"tax_code\": \"txcd_10000000\"  },  \"head_office\": {    \"address\": {      \"city\": null,      \"country\": \"US\",      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": \"CA\"    }  },  \"livemode\": false,  \"status\": \"active\",  \"status_details\": {    \"active\": {}  }}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Tax Setting object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/tax/settings/update",
    "markdown": "# Update settings | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftax%2Fsettings%2Fupdate)\n\nUpdates Tax `Settings` parameters used in tax calculations. All parameters are editable but none can be removed once set.\n\n### Parameters\n\n*   Default configuration to be used on Stripe Tax calculations.\n    \n*   The place where your business is located.\n    \n\n### Returns\n\nA Tax `Settings` object.\n\n```\ncurl https://api.stripe.com/v1/tax/settings \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"defaults[tax_behavior]\"=inclusive \\  -d \"defaults[tax_code]\"=txcd_10000000 \\  -d \"head_office[address][country]\"=DE\n```\n\n```\n{  \"object\": \"tax.settings\",  \"defaults\": {    \"tax_behavior\": \"inclusive\",    \"tax_code\": \"txcd_10000000\"  },  \"head_office\": {    \"address\": {      \"city\": null,      \"country\": \"DE\",      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": null    }  },  \"livemode\": false,  \"status\": \"active\",  \"status_details\": {    \"active\": {}  }}\n```\n\n## [Retrieve settings](https://docs.stripe.com/api/tax/settings/retrieve)\n\nRetrieves Tax `Settings` for a merchant.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA Tax `Settings` object.\n\n```\ncurl https://api.stripe.com/v1/tax/settings \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"tax.settings\",  \"defaults\": {    \"tax_behavior\": null,    \"tax_code\": \"txcd_10000000\"  },  \"head_office\": {    \"address\": {      \"city\": null,      \"country\": \"US\",      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": \"CA\"    }  },  \"livemode\": false,  \"status\": \"active\",  \"status_details\": {    \"active\": {}  }}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Update settings | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/tax/settings",
    "markdown": "# Tax Settings | Stripe API Reference\n\nYou can use Tax `Settings` to manage configurations used by Stripe Tax calculations.\n\nRelated guide: [Using the Settings API](https://docs.stripe.com/tax/settings-api)\n\n## [The Tax Setting object](https://docs.stripe.com/api/tax/settings/object)\n\n### Attributes\n\n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Default configuration to be used on Stripe Tax calculations.\n    \n*   #### \n    \n    head\\_officenullable object\n    \n    The place where your business is located.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The `active` status indicates you have all required settings to calculate tax. A status can transition out of `active` when new required settings are introduced.\n    \n*   Information about the status.\n    \n\n```\n{  \"object\": \"tax.settings\",  \"defaults\": {    \"tax_behavior\": null,    \"tax_code\": \"txcd_10000000\"  },  \"head_office\": {    \"address\": {      \"city\": null,      \"country\": \"US\",      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": \"CA\"    }  },  \"livemode\": false,  \"status\": \"active\",  \"status_details\": {    \"active\": {}  }}\n```\n\n## [Update settings](https://docs.stripe.com/api/tax/settings/update)\n\nUpdates Tax `Settings` parameters used in tax calculations. All parameters are editable but none can be removed once set.\n\n### Parameters\n\n*   Default configuration to be used on Stripe Tax calculations.\n    \n*   The place where your business is located.\n    \n\n### Returns\n\nA Tax `Settings` object.\n\n```\ncurl https://api.stripe.com/v1/tax/settings \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"defaults[tax_behavior]\"=inclusive \\  -d \"defaults[tax_code]\"=txcd_10000000 \\  -d \"head_office[address][country]\"=DE\n```\n\n```\n{  \"object\": \"tax.settings\",  \"defaults\": {    \"tax_behavior\": \"inclusive\",    \"tax_code\": \"txcd_10000000\"  },  \"head_office\": {    \"address\": {      \"city\": null,      \"country\": \"DE\",      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": null    }  },  \"livemode\": false,  \"status\": \"active\",  \"status_details\": {    \"active\": {}  }}\n```\n\n## [Retrieve settings](https://docs.stripe.com/api/tax/settings/retrieve)\n\nRetrieves Tax `Settings` for a merchant.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA Tax `Settings` object.\n\n```\ncurl https://api.stripe.com/v1/tax/settings \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"tax.settings\",  \"defaults\": {    \"tax_behavior\": null,    \"tax_code\": \"txcd_10000000\"  },  \"head_office\": {    \"address\": {      \"city\": null,      \"country\": \"US\",      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": \"CA\"    }  },  \"livemode\": false,  \"status\": \"active\",  \"status_details\": {    \"active\": {}  }}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Tax Settings | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/events/types",
    "markdown": "# Types of events | Stripe API Reference\n\n*   #### \n    \n    account.application.authorized`data.object` is an application\n    \n    Occurs whenever a user authorizes an application. Sent to the related application only.\n    \n*   #### \n    \n    account.application.deauthorized`data.object` is an application\n    \n    Occurs whenever a user deauthorizes an application. Sent to the related application only.\n    \n*   #### \n    \n    account.external\\_account.created`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is created.\n    \n*   #### \n    \n    account.external\\_account.deleted`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is deleted.\n    \n*   #### \n    \n    account.external\\_account.updated`data.object` is an external account (e.g., [card](#account_card_object) or [bank account](#account_bank_account_object))\n    \n    Occurs whenever an external account is updated.\n    \n*   #### \n    \n    account.updated`data.object` is an [account](#account_object)\n    \n    Occurs whenever an account status or property has changed.\n    \n*   #### \n    \n    application\\_fee.created`data.object` is an [application fee](#application_fee_object)\n    \n    Occurs whenever an application fee is created on a charge.\n    \n*   #### \n    \n    application\\_fee.refund.updated`data.object` is a [fee refund](#fee_refund_object)\n    \n    Occurs whenever an application fee refund is updated.\n    \n*   #### \n    \n    application\\_fee.refunded`data.object` is an [application fee](#application_fee_object)\n    \n    Occurs whenever an application fee is refunded, whether from refunding a charge or from [refunding the application fee directly](#fee_refunds). This includes partial refunds.\n    \n*   #### \n    \n    balance.available`data.object` is a [balance](#balance_object)\n    \n    Occurs whenever your Stripe balance has been updated (e.g., when a charge is available to be paid out). By default, Stripe automatically transfers funds in your balance to your bank account on a daily basis. This event is not fired for negative transactions.\n    \n*   #### \n    \n    billing\\_portal.configuration.created`data.object` is a [billing portal configuration](#portal_configuration_object)\n    \n    Occurs whenever a portal configuration is created.\n    \n*   #### \n    \n    billing\\_portal.configuration.updated`data.object` is a [billing portal configuration](#portal_configuration_object)\n    \n    Occurs whenever a portal configuration is updated.\n    \n*   #### \n    \n    billing\\_portal.session.created`data.object` is a [billing portal session](#portal_session_object)\n    \n    Occurs whenever a portal session is created.\n    \n*   #### \n    \n    capability.updated`data.object` is a [capability](#capability_object)\n    \n    Occurs whenever a capability has new requirements or a new status.\n    \n*   #### \n    \n    cash\\_balance.funds\\_available`data.object` is a [cash balance](#cash_balance_object)\n    \n    Occurs whenever there is a positive remaining cash balance after Stripe automatically reconciles new funds into the cash balance. If you enabled manual reconciliation, this webhook will fire whenever there are new funds into the cash balance.\n    \n*   #### \n    \n    charge.captured`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a previously uncaptured charge is captured.\n    \n*   #### \n    \n    charge.dispute.closed`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when a dispute is closed and the dispute status changes to `lost`, `warning_closed`, or `won`.\n    \n*   #### \n    \n    charge.dispute.created`data.object` is a [dispute](#dispute_object)\n    \n    Occurs whenever a customer disputes a charge with their bank.\n    \n*   #### \n    \n    charge.dispute.funds\\_reinstated`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when funds are reinstated to your account after a dispute is closed. This includes [partially refunded payments](https://docs.stripe.com/disputes#disputes-on-partially-refunded-payments).\n    \n*   #### \n    \n    charge.dispute.funds\\_withdrawn`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when funds are removed from your account due to a dispute.\n    \n*   #### \n    \n    charge.dispute.updated`data.object` is a [dispute](#dispute_object)\n    \n    Occurs when the dispute is updated (usually with evidence).\n    \n*   #### \n    \n    charge.expired`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever an uncaptured charge expires.\n    \n*   #### \n    \n    charge.failed`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a failed charge attempt occurs.\n    \n*   #### \n    \n    charge.pending`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a pending charge is created.\n    \n*   #### \n    \n    charge.refund.updated`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund is updated, on selected payment methods.\n    \n*   #### \n    \n    charge.refunded`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge is refunded, including partial refunds.\n    \n*   #### \n    \n    charge.succeeded`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge is successful.\n    \n*   #### \n    \n    charge.updated`data.object` is a [charge](#charge_object)\n    \n    Occurs whenever a charge description or metadata is updated, or upon an asynchronous capture.\n    \n*   #### \n    \n    checkout.session.async\\_payment\\_failed`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a payment intent using a delayed payment method fails.\n    \n*   #### \n    \n    checkout.session.async\\_payment\\_succeeded`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a payment intent using a delayed payment method finally succeeds.\n    \n*   #### \n    \n    checkout.session.completed`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a Checkout Session has been successfully completed.\n    \n*   #### \n    \n    checkout.session.expired`data.object` is a [checkout session](#checkout_session_object)\n    \n    Occurs when a Checkout Session is expired.\n    \n*   #### \n    \n    climate.order.canceled`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is canceled.\n    \n*   #### \n    \n    climate.order.created`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is created.\n    \n*   #### \n    \n    climate.order.delayed`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is delayed.\n    \n*   #### \n    \n    climate.order.delivered`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order is delivered.\n    \n*   #### \n    \n    climate.order.product\\_substituted`data.object` is a [climate order](#climate_order_object)\n    \n    Occurs when a Climate order’s product is substituted for another.\n    \n*   #### \n    \n    climate.product.created`data.object` is a [climate product](#climate_product_object)\n    \n    Occurs when a Climate product is created.\n    \n*   #### \n    \n    climate.product.pricing\\_updated`data.object` is a [climate product](#climate_product_object)\n    \n    Occurs when a Climate product is updated.\n    \n*   #### \n    \n    coupon.created`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is created.\n    \n*   #### \n    \n    coupon.deleted`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is deleted.\n    \n*   #### \n    \n    coupon.updated`data.object` is a [coupon](#coupon_object)\n    \n    Occurs whenever a coupon is updated.\n    \n*   #### \n    \n    credit\\_note.created`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is created.\n    \n*   #### \n    \n    credit\\_note.updated`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is updated.\n    \n*   #### \n    \n    credit\\_note.voided`data.object` is a [credit note](#credit_note_object)\n    \n    Occurs whenever a credit note is voided.\n    \n*   #### \n    \n    customer\\_cash\\_balance\\_transaction.created`data.object` is a [customer cash balance transaction](#customer_cash_balance_transaction_object)\n    \n    Occurs whenever a new customer cash balance transactions is created.\n    \n*   #### \n    \n    customer.created`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever a new customer is created.\n    \n*   #### \n    \n    customer.deleted`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever a customer is deleted.\n    \n*   #### \n    \n    customer.discount.created`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a coupon is attached to a customer.\n    \n*   #### \n    \n    customer.discount.deleted`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a coupon is removed from a customer.\n    \n*   #### \n    \n    customer.discount.updated`data.object` is a [discount](#discount_object)\n    \n    Occurs whenever a customer is switched from one coupon to another.\n    \n*   #### \n    \n    customer.source.created`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a new source is created for a customer.\n    \n*   #### \n    \n    customer.source.deleted`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source is removed from a customer.\n    \n*   #### \n    \n    customer.source.expiring`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a card or source will expire at the end of the month. This event only works with legacy integrations using Card or Source objects. If you use the PaymentMethod API, this event won’t occur.\n    \n*   #### \n    \n    customer.source.updated`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source’s details are changed.\n    \n*   #### \n    \n    customer.subscription.created`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer is signed up for a new plan.\n    \n*   #### \n    \n    customer.subscription.deleted`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription ends.\n    \n*   #### \n    \n    customer.subscription.paused`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription is paused. Only applies when subscriptions enter `status=paused`, not when [payment collection](https://docs.stripe.com/billing/subscriptions/pause) is paused.\n    \n*   #### \n    \n    customer.subscription.pending\\_update\\_applied`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription’s pending update is applied, and the subscription is updated.\n    \n*   #### \n    \n    customer.subscription.pending\\_update\\_expired`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription’s pending update expires before the related invoice is paid.\n    \n*   #### \n    \n    customer.subscription.resumed`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a customer’s subscription is no longer paused. Only applies when a `status=paused` subscription is [resumed](https://docs.stripe.com/api/subscriptions/resume), not when [payment collection](https://docs.stripe.com/billing/subscriptions/pause) is resumed.\n    \n*   #### \n    \n    customer.subscription.trial\\_will\\_end`data.object` is a [subscription](#subscription_object)\n    \n    Occurs three days before a subscription’s trial period is scheduled to end, or when a trial is ended immediately (using `trial_end=now`).\n    \n*   #### \n    \n    customer.subscription.updated`data.object` is a [subscription](#subscription_object)\n    \n    Occurs whenever a subscription changes (e.g., switching from one plan to another, or changing the status from trial to active).\n    \n*   #### \n    \n    customer.tax\\_id.created`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a tax ID is created for a customer.\n    \n*   #### \n    \n    customer.tax\\_id.deleted`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a tax ID is deleted from a customer.\n    \n*   #### \n    \n    customer.tax\\_id.updated`data.object` is a [tax id](#tax_id_object)\n    \n    Occurs whenever a customer’s tax ID is updated.\n    \n*   #### \n    \n    customer.updated`data.object` is a [customer](#customer_object)\n    \n    Occurs whenever any property of a customer changes.\n    \n*   #### \n    \n    entitlements.active\\_entitlement\\_summary.updated`data.object` is an entitlements active entitlement summary\n    \n    Occurs whenever a customer’s entitlements change.\n    \n*   #### \n    \n    file.created`data.object` is a [file](#file_object)\n    \n    Occurs whenever a new Stripe-generated file is available for your account.\n    \n*   #### \n    \n    financial\\_connections.account.created`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a new Financial Connections account is created.\n    \n*   #### \n    \n    financial\\_connections.account.deactivated`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account’s status is updated from `active` to `inactive`.\n    \n*   #### \n    \n    financial\\_connections.account.disconnected`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account is disconnected.\n    \n*   #### \n    \n    financial\\_connections.account.reactivated`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when a Financial Connections account’s status is updated from `inactive` to `active`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_balance`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `balance_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_ownership`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `ownership_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    financial\\_connections.account.refreshed\\_transactions`data.object` is a [financial connections account](#financial_connections_account_object)\n    \n    Occurs when an Account’s `transaction_refresh` status transitions from `pending` to either `succeeded` or `failed`.\n    \n*   #### \n    \n    identity.verification\\_session.canceled`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession is canceled\n    \n*   #### \n    \n    identity.verification\\_session.created`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession is created\n    \n*   #### \n    \n    identity.verification\\_session.processing`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to processing\n    \n*   #### \n    \n    identity.verification\\_session.redacted`data.object` is an [identity verification session](#identity_verification_session_object)Selection required\n    \n    Occurs whenever a VerificationSession is redacted.\n    \n*   #### \n    \n    identity.verification\\_session.requires\\_input`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to require user input\n    \n*   #### \n    \n    identity.verification\\_session.verified`data.object` is an [identity verification session](#identity_verification_session_object)\n    \n    Occurs whenever a VerificationSession transitions to verified\n    \n*   #### \n    \n    invoice.created`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a new invoice is created. To learn how webhooks can be used with this event, and how they can affect it, see [Using Webhooks with Subscriptions](https://docs.stripe.com/subscriptions/webhooks).\n    \n*   #### \n    \n    invoice.deleted`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice is deleted. Note: This event is not sent for [invoice previews](https://docs.stripe.com/api/invoices/create_preview).\n    \n*   #### \n    \n    invoice.finalization\\_failed`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice cannot be finalized. See the invoice’s [last finalization error](https://docs.stripe.com/api/invoices/object#invoice_object-last_finalization_error) for details.\n    \n*   #### \n    \n    invoice.finalized`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever a draft invoice is finalized and updated to be an open invoice.\n    \n*   #### \n    \n    invoice.marked\\_uncollectible`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice is marked uncollectible.\n    \n*   #### \n    \n    invoice.overdue`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days after an invoice becomes due—where X is determined by Automations\n    \n*   #### \n    \n    invoice.paid`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt succeeds or an invoice is marked as paid out-of-band.\n    \n*   #### \n    \n    invoice.payment\\_action\\_required`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt requires further user action to complete.\n    \n*   #### \n    \n    invoice.payment\\_failed`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt fails, due either to a declined payment or to the lack of a stored payment method.\n    \n*   #### \n    \n    invoice.payment\\_succeeded`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice payment attempt succeeds.\n    \n*   #### \n    \n    invoice.sent`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice email is sent out.\n    \n*   #### \n    \n    invoice.upcoming`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days before a subscription is scheduled to create an invoice that is automatically charged—where X is determined by your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). Note: The received `Invoice` object will not have an invoice ID.\n    \n*   #### \n    \n    invoice.updated`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice changes (e.g., the invoice amount).\n    \n*   #### \n    \n    invoice.voided`data.object` is an [invoice](#invoice_object)\n    \n    Occurs whenever an invoice is voided.\n    \n*   #### \n    \n    invoice.will\\_be\\_due`data.object` is an [invoice](#invoice_object)\n    \n    Occurs X number of days before an invoice becomes due—where X is determined by Automations\n    \n*   #### \n    \n    invoiceitem.created`data.object` is an [invoiceitem](#invoiceitem_object)\n    \n    Occurs whenever an invoice item is created.\n    \n*   #### \n    \n    invoiceitem.deleted`data.object` is an [invoiceitem](#invoiceitem_object)\n    \n    Occurs whenever an invoice item is deleted.\n    \n*   #### \n    \n    issuing\\_authorization.created`data.object` is an [issuing authorization](#issuing_authorization_object)\n    \n    Occurs whenever an authorization is created.\n    \n*   #### \n    \n    issuing\\_authorization.request`data.object` is an [issuing authorization](#issuing_authorization_object)Selection required\n    \n*   #### \n    \n    issuing\\_authorization.updated`data.object` is an [issuing authorization](#issuing_authorization_object)\n    \n    Occurs whenever an authorization is updated.\n    \n*   #### \n    \n    issuing\\_card.created`data.object` is an [issuing card](#issuing_card_object)\n    \n    Occurs whenever a card is created.\n    \n*   #### \n    \n    issuing\\_card.updated`data.object` is an [issuing card](#issuing_card_object)\n    \n    Occurs whenever a card is updated.\n    \n*   #### \n    \n    issuing\\_cardholder.created`data.object` is an [issuing cardholder](#issuing_cardholder_object)\n    \n    Occurs whenever a cardholder is created.\n    \n*   #### \n    \n    issuing\\_cardholder.updated`data.object` is an [issuing cardholder](#issuing_cardholder_object)\n    \n    Occurs whenever a cardholder is updated.\n    \n*   #### \n    \n    issuing\\_dispute.closed`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is won, lost or expired.\n    \n*   #### \n    \n    issuing\\_dispute.created`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is created.\n    \n*   #### \n    \n    issuing\\_dispute.funds\\_reinstated`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever funds are reinstated to your account for an Issuing dispute.\n    \n*   #### \n    \n    issuing\\_dispute.submitted`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is submitted.\n    \n*   #### \n    \n    issuing\\_dispute.updated`data.object` is an [issuing dispute](#issuing_dispute_object)\n    \n    Occurs whenever a dispute is updated.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.activated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is activated following the activation of the physical bundle that belongs to it.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.deactivated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is deactivated following the deactivation of the physical bundle that belongs to it.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.rejected`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is rejected by design review.\n    \n*   #### \n    \n    issuing\\_personalization\\_design.updated`data.object` is an [issuing personalization design](#issuing_personalization_design_object)\n    \n    Occurs whenever a personalization design is updated.\n    \n*   #### \n    \n    issuing\\_token.created`data.object` is an [issuing token](#issuing_token_object)\n    \n    Occurs whenever an issuing digital wallet token is created.\n    \n*   #### \n    \n    issuing\\_token.updated`data.object` is an [issuing token](#issuing_token_object)\n    \n    Occurs whenever an issuing digital wallet token is updated.\n    \n*   #### \n    \n    issuing\\_transaction.created`data.object` is an [issuing transaction](#issuing_transaction_object)\n    \n    Occurs whenever an issuing transaction is created.\n    \n*   #### \n    \n    issuing\\_transaction.updated`data.object` is an [issuing transaction](#issuing_transaction_object)\n    \n    Occurs whenever an issuing transaction is updated.\n    \n*   #### \n    \n    mandate.updated`data.object` is a [mandate](#mandate_object)\n    \n    Occurs whenever a Mandate is updated.\n    \n*   #### \n    \n    payment\\_intent.amount\\_capturable\\_updated`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has funds to be captured. Check the `amount_capturable` property on the PaymentIntent to determine the amount that can be captured. You may capture the PaymentIntent with an `amount_to_capture` value up to the specified amount. [Learn more about capturing PaymentIntents.](https://docs.stripe.com/api/payment_intents/capture)\n    \n*   #### \n    \n    payment\\_intent.canceled`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent is canceled.\n    \n*   #### \n    \n    payment\\_intent.created`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a new PaymentIntent is created.\n    \n*   #### \n    \n    payment\\_intent.partially\\_funded`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when funds are applied to a customer\\_balance PaymentIntent and the ‘amount\\_remaining’ changes.\n    \n*   #### \n    \n    payment\\_intent.payment\\_failed`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has failed the attempt to create a payment method or a payment.\n    \n*   #### \n    \n    payment\\_intent.processing`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has started processing.\n    \n*   #### \n    \n    payment\\_intent.requires\\_action`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent transitions to requires\\_action state\n    \n*   #### \n    \n    payment\\_intent.succeeded`data.object` is a [payment intent](#payment_intent_object)\n    \n    Occurs when a PaymentIntent has successfully completed payment.\n    \n*   #### \n    \n    payment\\_link.created`data.object` is a [payment link](#payment_link_object)\n    \n    Occurs when a payment link is created.\n    \n*   #### \n    \n    payment\\_link.updated`data.object` is a [payment link](#payment_link_object)\n    \n    Occurs when a payment link is updated.\n    \n*   #### \n    \n    payment\\_method.attached`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a new payment method is attached to a customer.\n    \n*   #### \n    \n    payment\\_method.automatically\\_updated`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a payment method’s details are automatically updated by the network.\n    \n*   #### \n    \n    payment\\_method.detached`data.object` is a [payment method](#payment_method_object)\n    \n    Occurs whenever a payment method is detached from a customer.\n    \n*   #### \n    \n    payment\\_method.updated`data.object` is a [payment method](#payment_method_object)\n    \n*   #### \n    \n    payout.canceled`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is canceled.\n    \n*   #### \n    \n    payout.created`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is created.\n    \n*   #### \n    \n    payout.failed`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout attempt fails.\n    \n*   #### \n    \n    payout.paid`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is _expected_ to be available in the destination account. If the payout fails, a `payout.failed` notification is also sent, at a later time.\n    \n*   #### \n    \n    payout.reconciliation\\_completed`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever balance transactions paid out in an automatic payout can be queried.\n    \n*   #### \n    \n    payout.updated`data.object` is a [payout](#payout_object)\n    \n    Occurs whenever a payout is updated.\n    \n*   #### \n    \n    person.created`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is created.\n    \n*   #### \n    \n    person.deleted`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is deleted.\n    \n*   #### \n    \n    person.updated`data.object` is a [person](#person_object)\n    \n    Occurs whenever a person associated with an account is updated.\n    \n*   #### \n    \n    plan.created`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is created.\n    \n*   #### \n    \n    plan.deleted`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is deleted.\n    \n*   #### \n    \n    plan.updated`data.object` is a [plan](#plan_object)\n    \n    Occurs whenever a plan is updated.\n    \n*   #### \n    \n    price.created`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is created.\n    \n*   #### \n    \n    price.deleted`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is deleted.\n    \n*   #### \n    \n    price.updated`data.object` is a [price](#price_object)\n    \n    Occurs whenever a price is updated.\n    \n*   #### \n    \n    product.created`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is created.\n    \n*   #### \n    \n    product.deleted`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is deleted.\n    \n*   #### \n    \n    product.updated`data.object` is a [product](#product_object)\n    \n    Occurs whenever a product is updated.\n    \n*   #### \n    \n    promotion\\_code.created`data.object` is a [promotion code](#promotion_code_object)\n    \n    Occurs whenever a promotion code is created.\n    \n*   #### \n    \n    promotion\\_code.updated`data.object` is a [promotion code](#promotion_code_object)\n    \n    Occurs whenever a promotion code is updated.\n    \n*   #### \n    \n    quote.accepted`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is accepted.\n    \n*   #### \n    \n    quote.canceled`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is canceled.\n    \n*   #### \n    \n    quote.created`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is created.\n    \n*   #### \n    \n    quote.finalized`data.object` is a [quote](#quote_object)\n    \n    Occurs whenever a quote is finalized.\n    \n*   #### \n    \n    quote.will\\_expire`data.object` is a [quote](#quote_object)\n    \n    Occurs X number of days before a quote is scheduled to expire—where X is determined by Automations\n    \n*   #### \n    \n    radar.early\\_fraud\\_warning.created`data.object` is a [radar early fraud warning](#early_fraud_warning_object)\n    \n    Occurs whenever an early fraud warning is created.\n    \n*   #### \n    \n    radar.early\\_fraud\\_warning.updated`data.object` is a [radar early fraud warning](#early_fraud_warning_object)\n    \n    Occurs whenever an early fraud warning is updated.\n    \n*   #### \n    \n    refund.created`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund from a customer’s cash balance is created.\n    \n*   #### \n    \n    refund.updated`data.object` is a [refund](#refund_object)\n    \n    Occurs whenever a refund from a customer’s cash balance is updated.\n    \n*   #### \n    \n    reporting.report\\_run.failed`data.object` is a [reporting report run](#reporting_report_run_object)\n    \n    Occurs whenever a requested `ReportRun` failed to complete.\n    \n*   #### \n    \n    reporting.report\\_run.succeeded`data.object` is a [reporting report run](#reporting_report_run_object)\n    \n    Occurs whenever a requested `ReportRun` completed successfully.\n    \n*   #### \n    \n    reporting.report\\_type.updated`data.object` is a [reporting report type](#reporting_report_type_object)Selection required\n    \n    Occurs whenever a `ReportType` is updated (typically to indicate that a new day’s data has come available).\n    \n*   #### \n    \n    review.closed`data.object` is a [review](#review_object)\n    \n    Occurs whenever a review is closed. The review’s `reason` field indicates why: `approved`, `disputed`, `refunded`, or `refunded_as_fraud`.\n    \n*   #### \n    \n    review.opened`data.object` is a [review](#review_object)\n    \n    Occurs whenever a review is opened.\n    \n*   #### \n    \n    setup\\_intent.canceled`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent is canceled.\n    \n*   #### \n    \n    setup\\_intent.created`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a new SetupIntent is created.\n    \n*   #### \n    \n    setup\\_intent.requires\\_action`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent is in requires\\_action state.\n    \n*   #### \n    \n    setup\\_intent.setup\\_failed`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when a SetupIntent has failed the attempt to setup a payment method.\n    \n*   #### \n    \n    setup\\_intent.succeeded`data.object` is a [setup intent](#setup_intent_object)\n    \n    Occurs when an SetupIntent has successfully setup a payment method.\n    \n*   #### \n    \n    sigma.scheduled\\_query\\_run.created`data.object` is a [scheduled query run](#scheduled_query_run_object)\n    \n    Occurs whenever a Sigma scheduled query run finishes.\n    \n*   #### \n    \n    source.canceled`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source is canceled.\n    \n*   #### \n    \n    source.chargeable`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source transitions to chargeable.\n    \n*   #### \n    \n    source.failed`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source fails.\n    \n*   #### \n    \n    source.mandate\\_notification`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever a source mandate notification method is set to manual.\n    \n*   #### \n    \n    source.refund\\_attributes\\_required`data.object` is a source (e.g., [card](#account_card_object))\n    \n    Occurs whenever the refund attributes are required on a receiver source to process a refund or a mispayment.\n    \n*   Occurs whenever a source transaction is created.\n    \n*   Occurs whenever a source transaction is updated.\n    \n*   #### \n    \n    subscription\\_schedule.aborted`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is canceled due to the underlying subscription being canceled because of delinquency.\n    \n*   #### \n    \n    subscription\\_schedule.canceled`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is canceled.\n    \n*   #### \n    \n    subscription\\_schedule.completed`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is completed.\n    \n*   #### \n    \n    subscription\\_schedule.created`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is created.\n    \n*   #### \n    \n    subscription\\_schedule.expiring`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs 7 days before a subscription schedule will expire.\n    \n*   #### \n    \n    subscription\\_schedule.released`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a new subscription schedule is released.\n    \n*   #### \n    \n    subscription\\_schedule.updated`data.object` is a [subscription schedule](#subscription_schedule_object)\n    \n    Occurs whenever a subscription schedule is updated.\n    \n*   #### \n    \n    tax\\_rate.created`data.object` is a [tax rate](#tax_rate_object)\n    \n    Occurs whenever a new tax rate is created.\n    \n*   #### \n    \n    tax\\_rate.updated`data.object` is a [tax rate](#tax_rate_object)\n    \n    Occurs whenever a tax rate is updated.\n    \n*   #### \n    \n    tax.settings.updated`data.object` is a [tax settings](#tax_settings_object)\n    \n    Occurs whenever tax settings is updated.\n    \n*   #### \n    \n    terminal.reader.action\\_failed`data.object` is a [terminal reader](#terminal_reader_object)\n    \n    Occurs whenever an action sent to a Terminal reader failed.\n    \n*   #### \n    \n    terminal.reader.action\\_succeeded`data.object` is a [terminal reader](#terminal_reader_object)\n    \n    Occurs whenever an action sent to a Terminal reader was successful.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.advancing`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock starts advancing.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.created`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock is created.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.deleted`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock is deleted.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.internal\\_failure`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock fails to advance its frozen time.\n    \n*   #### \n    \n    test\\_helpers.test\\_clock.ready`data.object` is a [test helpers test clock](#test_clock_object)\n    \n    Occurs whenever a test clock transitions to a ready status.\n    \n*   #### \n    \n    topup.canceled`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is canceled.\n    \n*   #### \n    \n    topup.created`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is created.\n    \n*   #### \n    \n    topup.failed`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up fails.\n    \n*   #### \n    \n    topup.reversed`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up is reversed.\n    \n*   #### \n    \n    topup.succeeded`data.object` is a [topup](#topup_object)\n    \n    Occurs whenever a top-up succeeds.\n    \n*   #### \n    \n    transfer.created`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer is created.\n    \n*   #### \n    \n    transfer.reversed`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer is reversed, including partial reversals.\n    \n*   #### \n    \n    transfer.updated`data.object` is a [transfer](#transfer_object)\n    \n    Occurs whenever a transfer’s description or metadata is updated.",
    "title": "Types of events | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/subscriptions/update",
    "markdown": "# Update existing subscriptions | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to update existing subscriptions to Stripe Tax.\n\n[Stripe Tax](https://docs.stripe.com/tax) allows you to calculate the tax to collect on your transactions. It computes the taxes and adds them to the payment automatically, based on the product and the customer location.\n\nWhen you integrate with Stripe Tax, you need to update existing subscriptions to make sure that tax is automatically calculated going forward. This guide assumes that you have existing, active subscriptions. Otherwise, see how to automatically [collect tax on new subscriptions](https://docs.stripe.com/billing/taxes/collect-taxes) or learn more [about subscriptions](https://docs.stripe.com/billing/subscriptions/overview).\n\nUse the following high-level steps to update your active subscriptions to Stripe Tax:\n\n1.  [Activate Stripe Tax](#activate) if you haven’t already.\n2.  [Check customer locations](#customer-locations). In some cases, you might need to update the locations.\n3.  [Update products and prices](#products-prices) with tax codes and tax behaviors.\n4.  [Update subscriptions](#subs) to automatically calculate taxes on future [invoices](https://docs.stripe.com/api/invoices \"invoices\").\n5.  [Confirm](#confirm) that you’ve updated the subscriptions correctly.\n\n#### Interested in using Stripe Tax and currency conversion?\n\nWe’re developing a Payment Element integration that manages tax, discounts, shipping, and currency conversion. Read the [Build a checkout page](https://docs.stripe.com/checkout/custom-checkout) guide to learn more.\n\n[](#activate)\n\nFirst, you need to activate Stripe Tax. Read the [set up guide](https://docs.stripe.com/tax/set-up) to learn how.\n\n[](#customer-locations)\n\nTo correctly calculate tax, we need to know the customer’s location. After activating Stripe Tax, you can check their tax location status by using the Dashboard, the API, or Dashboard exports.\n\nTo check a customer’s tax location status through the Dashboard, go to the [Customers page](https://dashboard.stripe.com/customers), select the customer, and expand the customer’s details. The tax location status (`automatic_tax`) has four possible statuses:\n\n| Status | Description | Possible Action |\n| --- | --- | --- |\n| Valid (`supported`) | Automatic tax fully supported. | No further action required. |\n| Unrecognized location (`unrecognized_location`) | The address isn’t valid for determining a tax location. | Ask the customer for an updated address and set [`customer.address`](https://docs.stripe.com/api/customers/update#update_customer-address) to the new value. You can update the value through the API or Dashboard by editing the customer’s details. |\n| Not registered (`not_collecting`) | The address is recognized and resolved to a location that you haven’t set up a collection location for. | The action to take depends on your [tax obligations](https://docs.stripe.com/tax/monitoring). If you proceed, Stripe Tax doesn’t assess any taxes. If you want it to assess tax, [add an active registration](https://docs.stripe.com/tax/registering) for the jurisdiction the customer is based in. |\n| `failed` | An [error](https://docs.stripe.com/error-codes) occurred with Stripe’s servers. This is rare. | Try the request again or contact Stripe support for additional assistance. |\n\nIn case the `status=unrecognized_location` you need to update the customer location with [an address that Stripe Tax can use](https://docs.stripe.com/tax/customer-locations). In the Dashboard, you can go into the [Customers page](https://dashboard.stripe.com/customers), select the customer, and change its billing or shipping address under Details.\n\nFor more information on which customer address is valid, how they’re used, or how to handle errors, see [Collect customer addresses](https://docs.stripe.com/tax/customer-locations).\n\n[](#products-prices)\n\nYour products and prices use the default tax behavior you assigned when activating Stripe Tax. If you’d prefer to update active products and prices to calculate tax independently, set a tax\\_code and tax\\_behavior. See the full list of [available tax codes](https://docs.stripe.com/tax/tax-codes) and the [guide for setting up](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior) tax codes and tax behavior for more information. For more information about [products and prices](https://docs.stripe.com/billing/taxes/collect-taxes#product-and-price-setup), including how to decide whether a price should be inclusive or exclusive, see the [Tax Setup FAQ](https://docs.stripe.com/tax/faq#set-up).\n\n### Update products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFirst, update any existing products with a `tax_code`. If you don’t explicitly define a `tax_code` on your product, Stripe Tax uses the preset product tax code from your settings.\n\nHere’s how to update a Product with a `tax_code` using the API:\n\n`curl https://api.stripe.com/v1/products/`\n\n`{{PRODUCT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d tax_code=  txcd_10000000`\n\nTo update a Product with a `tax_code` in the Dashboard, go to the [Products page](https://dashboard.stripe.com/products?active=true), select a product to edit and, in the product information page, choose the tax code from the drop-down menu.\n\n### Update prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNext, update the tax behavior for your prices.\n\n#### Common mistake\n\nYou can’t change `tax_behavior` after it’s been set to one of `exclusive` or `inclusive`. If you want to change the tax behavior of a price, you need to create a new price with the desired behavior, and archive the old price.\n\nHere’s how to update a price with the API:\n\n`curl https://api.stripe.com/v1/prices/`\n\n`{{PRICE_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d tax_behavior=exclusive`\n\nTo update a price with the Dashboard, go to the [products page](https://dashboard.stripe.com/products), select the product with the price you want to update, and select additional options in the price information section. In the **Include tax in price** drop-down menu, select the behavior you want to associate with the price.\n\n[](#subs)\n\nWith your customers, products, and prices updated, you’re ready to update existing subscriptions.\n\n#### Caution\n\nGet the list of subscriptions that need to be updated from the [subscriptions page in the Dashboard](https://dashboard.stripe.com/subscriptions). Click **Filter**, check **Automatic tax** and select **Disabled** to display only subscriptions that don’t have automatic tax enabled. Alternatively, you can export all filtered subscriptions to view them as a CSV file. To do this, click **Export** and select **All** as the **Date range**.\n\nHow you update the subscriptions depends on their state:\n\n*   If your subscriptions [don’t have existing tax rates](#no-tax-rates), you only need to enable automatic tax.\n*   If your subscriptions have [existing tax rates](#existing-tax-rates) (at either the subscription or line-item level), you need to clear out any existing tax rates and enable automatic tax. To avoid creating prorated items, you can schedule this update.\n*   If your subscriptions have [subscriptions schedules](#existing-subscription-schedules), you need to remove instances of `automatic_tax[enabled]=false` in the subscription schedule plans.\n\n### Update subscriptions with no existing tax rates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo [update subscriptions](https://docs.stripe.com/api/subscriptions/update) that have no [tax rates](https://docs.stripe.com/billing/taxes/tax-rates) configured, set [`automatic_tax.enabled`](https://docs.stripe.com/api/subscriptions/update#update_subscription-automatic_tax) to `true`.\n\n`curl https://api.stripe.com/v1/subscriptions/`\n\n`{{SUBSCRIPTION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"automatic_tax[enabled]\"=true`\n\nSetting `automatic_tax.enabled=true` activates automatic tax calculations for all subsequent invoices created for that subscription.\n\nTo do this through the Dashboard, update the subscription and turn on the **Calculate tax automatically** option.\n\n### Update subscriptions with existing tax rates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo update subscriptions with [tax rates](https://docs.stripe.com/billing/taxes/tax-rates) set at the [subscription level](https://docs.stripe.com/billing/taxes/collect-taxes?tax-calculation=tax-rates#static-configuration), you need to remove the tax rates before enabling `automatic_tax`. When you make the update:\n\n*   Pass an empty string in the [`default_tax_rates`](https://docs.stripe.com/api/subscriptions/update#update_subscription-default_tax_rates) and [`tax_rates`](https://docs.stripe.com/api/subscriptions/object#subscription_object-items-data-tax_rates) fields for each subscription [`item`](https://docs.stripe.com/api/subscriptions/object#subscription_object-items). Doing this clears out tax rates set at both the subscription (`default_tax_rates`) and line-item (`tax_rates`) levels.\n*   Set [`automatic_tax.enabled`](https://docs.stripe.com/api/subscriptions/update#update_subscription-automatic_tax) to `true`.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`subscription = Stripe::Subscription.retrieve('{{SUBSCRIPTION_ID}}') Stripe::Subscription.update(   subscription.id,   {     automatic_tax: { enabled: true },     # Removes existing tax_rates for each item in the subscription     items: subscription.items.data.map {|item| {id: item.id, tax_rates: ''}},     default_tax_rates: ''   } )`\n\nTo make this update through the Dashboard, edit the subscription, then enable the **calculate tax automatically** option. The Dashboard automatically calculates tax going forward and removes any existing tax rates. If you haven’t updated your prices to set `tax_behavior`, the Dashboard prompts you to update any missing details before you can update the subscription.\n\n### Update Subscriptions with subscription schedules ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you need to collect tax and any of your subscriptions include a subscription schedule that sets `automatic_tax[enabled]=false`, you must remove this parameter. To do this, update all phases of the subscription’s schedule by removing `automatic_tax[enabled]=false` and setting `default_settings[automatic_tax][enabled]=true`.\n\nWhen you update a subscription schedule, you need to pass in all current and future phases. To do this, verify the set parameters, then enable Stripe Tax in the subscription schedule.\n\n`curl https://api.stripe.com/v1/subscription_schedules/`\n\n`{{SUBSCRIPTION_SCHEDULE_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nTo update the subscription schedule after you obtain it, remove the `automatic_tax[enabled]=false` parameter, and pass down the other phases and parameters:\n\n`curl https://api.stripe.com/v1/subscription_schedules/`\n\n`{{SUBSCRIPTION_SCHEDULE_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"phases[0][items][0][price]\"=price_1GqNdGAJVYItwOKqEHb \\  -d \"phases[0][items][0][quantity]\"=1 \\  -d \"phases[0][start_date]\"=1577865600 \\  -d \"phases[0][end_date]\"=1578038400 \\  -d \"phases[1][items][0][price]\"=price_1GqNdGAJVYItwOKqEHb \\  -d \"phases[1][items][0][quantity]\"=2 \\  -d \"phases[1][start_date]\"=1578038400 \\  -d \"phases[1][end_date]\"=1580544000 \\  -d \"default_settings[automatic_tax][enabled]\"=true`\n\n#### Schedule the update![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you want to avoid creating a prorated item, you can schedule the update to occur at the start of the next cycle.\n\nYou can currently only schedule subscription updates with the API:\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`subscription = Stripe::Subscription.retrieve(   '{{SUBSCRIPTION_ID}}', ) schedule = Stripe::SubscriptionSchedule.create({   from_subscription: subscription.id }) Stripe::SubscriptionSchedule.update(   schedule.id,   {     end_behavior: 'release',     phases: [       # The first phase contains items for the       # latest subscription invoice       {         items: [           # Prices and tax_rates for each item           {             price: '{{PRICE_ID}}',             tax_rates: [               '{{TAX_RATE_ID}}'             ]           }         ],         default_tax_rates: ['{{TAX_RATE_ID}}'],         start_date: subscription.current_period_start,         end_date: subscription.current_period_end       },       # The second phase removes manual tax rates and enables       # automatic tax calculation       {         items: [           # Prices for each item with tax_rates: ''           {             price: '{{PRICE_ID}}',             tax_rates: ''           }         ],         default_tax_rates: '',         automatic_tax: {enabled: true},         iterations: 1       }     ]   } )`\n\n[](#confirm)\n\nTo confirm that you’ve properly updated your subscriptions, retrieve the [upcoming invoice](https://docs.stripe.com/api/invoices/upcoming) of a subscription and inspect the results of its tax calculation.\n\nYou can retrieve the tax amounts from the [`tax`](https://docs.stripe.com/api/invoices/object#invoice_object-tax) and [`total_tax_amounts`](https://docs.stripe.com/api/invoices/object#invoice_object-total_tax_amounts) fields on the upcoming invoice, and from the per-line-item [`tax_amounts`](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-tax_amounts) fields. The invoice has an [`automatic_tax`](https://docs.stripe.com/api/invoices/object#invoice_object-automatic_tax) field showing the status of the calculation, with one of three possible statuses:\n\n| Status | Description | Possible Action |\n| --- | --- | --- |\n| `complete` | Stripe Tax has successfully assessed the taxes on the payment. | You can retrieve the tax amounts from the tax and `total_tax_amounts` fields on the latest invoice, and from the per-line item `tax_amounts` fields. |\n| `requires_location_inputs` | Stripe Tax didn’t have enough information to determine the customer’s location and was unable to assess taxes. | Collect more information from a customer (such as a full street address) and update the [`customer.address`](https://docs.stripe.com/api/invoices/object#invoice_object-customer_address) field. |\n| `failed` | Internal Stripe error. | Try the request again or contact Stripe support for additional assistance. |\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Create new subscriptions with Stripe Tax](https://docs.stripe.com/tax/subscriptions)\n*   [Setting tax codes, products, and prices](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior)",
    "title": "Update existing subscriptions | Stripe Documentation",
    "description": "Learn how to update existing subscriptions to Stripe Tax.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=elements",
    "markdown": "# Build a subscriptions integration | Stripe DocumentationThe Stripe Docs logo\n\n![Fixed-price subscription page with Stripe Checkout](https://b.stripecdn.com/docs-statics-srv/assets/fixed-price-collect-payment-details.ca5aa7a3f81fcc3f24954a39e800cc9d.png)\n\n#### Interested in using Stripe Billing?\n\nWe’re developing a Payment Element integration that helps manage subscription features, including free trials, billing cycle anchors, and proration. Read the [Build a checkout page](https://docs.stripe.com/checkout/custom-checkout) guide to learn more.\n\nUse this guide to learn how to sell fixed-price [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"). You’ll use the [Payment Element](https://docs.stripe.com/payments/payment-element) to create a custom payment form that you embed in your application.\n\nIf you don’t want to build a custom payment form, you can integrate with Checkout. For an immersive version of that end-to-end integration guide, see the Billing [quickstart](https://docs.stripe.com/billing/quickstart).\n\nIf you aren’t ready to code an integration, you can set up basic subscriptions [manually in the Dashboard](https://docs.stripe.com/no-code/subscriptions). You can also use [Payment Links](https://docs.stripe.com/payment-links) to set up subscriptions without writing any code. Learn more about [designing an integration](https://docs.stripe.com/billing/subscriptions/designing-integration) to understand the decisions you need to make and the resources you need.\n\n## What you’ll build ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis guide shows you how to:\n\n*   Model your business by building a product catalog.\n*   Build a registration process that creates a customer.\n*   Create subscriptions and collect payment information.\n*   Test and monitor payment and subscription status.\n*   Let customers change their plan or cancel the subscription.\n\n## How to model it on Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Subscriptions](https://docs.stripe.com/api/subscriptions) simplify your billing by automatically creating [Invoices](https://docs.stripe.com/api/invoices \"invoices\") and [PaymentIntents](https://docs.stripe.com/api/payment_intents) for you. To create and activate a subscription, you need to first create a [Product](https://docs.stripe.com/api/products \"Products\") to model what is being sold, and a [Price](https://docs.stripe.com/api/prices \"Prices\") which determines the interval and amount to charge. You also need a [Customer](https://docs.stripe.com/api/customers) to store [PaymentMethods](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") used to make each recurring payment.\n\n### API object definitions\n\n[](#install-setup)\n\nInstall the Stripe client of your choice:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\nAnd then install the Stripe CLI. The CLI provides webhook testing and you can run it to make API calls to Stripe. This guide shows how to use the CLI to set up a pricing model in a later section.\n\n`# Install Homebrew to run this command: [https://brew.sh/](https://brew.sh/) brew install stripe/stripe-cli/stripe  # Connect the CLI to your dashboard stripe login`\n\nFor additional install options, see [Get started with the Stripe CLI](https://docs.stripe.com/stripe-cli).\n\n[](#create-pricing-model)\n\nCreate your [products](https://docs.stripe.com/api/products \"subscription products\") and their [prices](https://docs.stripe.com/api/prices \"Prices\") in the Dashboard or with the Stripe CLI.\n\nThis example uses a fixed-price service with two different service-level options: Basic and Premium. For each service-level option, you need to create a product and a recurring price. (If you want to add a one-time charge for something like a setup fee, create a third product with a one-time price. To keep things simple, this example doesn’t include a one-time charge.)\n\nIn this example, each product bills at monthly intervals. The price for the Basic product is 5 USD. The price for the Premium product is 15 USD.\n\nGo to the [Add a product](https://dashboard.stripe.com/test/products/create) page and create two products. Add one price for each product, each with a monthly recurring billing period:\n\n*   Premium product: Premium service with extra features\n    \n    *   Price: Standard pricing | 15 USD\n*   Basic product: Basic service with minimum features\n    \n    *   Price: Standard pricing | 5 USD\n\nAfter you create the prices, record the price IDs so you can use them in other steps. Price IDs look like this: `price_G0FvDp6vZvdwRZ`.\n\nWhen you’re ready, use the **Copy to live mode** button at the top right of the page to clone your product from [test mode to live mode](https://docs.stripe.com/keys#test-live-modes).\n\n[](#create-customer)\n\nStripe needs a [customer](https://docs.stripe.com/api/customers \"Customers\") for each subscription. In your application frontend, collect any necessary information from your users and pass it to the backend.\n\nIf you need to collect address details, the Address Element enables you to collect a shipping or billing address for your customers. For more information on the Address Element, visit the [Address Element](https://docs.stripe.com/elements/address-element) page.\n\n`<form id=\"signup-form\">   <label>     Email     <input id=\"email\" type=\"email\" placeholder=\"Email address\" value=\"test@example.com\" required />   </label>    <button type=\"submit\">     Register   </button> </form>`\n\n`const emailInput = document.querySelector('#email');  fetch('/create-customer', {   method: 'post',   headers: {     'Content-Type': 'application/json',   },   body: JSON.stringify({     email: emailInput.value,   }), }).then(r => r.json());`\n\nOn the server, create the Stripe customer object.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d email={{CUSTOMER_EMAIL}} \\   -d name={{CUSTOMER_NAME}} \\   -d \"shipping[address][city]\"=Brothers \\  -d \"shipping[address][country]\"=US \\  -d \"shipping[address][line1]\"=\"27 Fredrick Ave\" \\  -d \"shipping[address][postal_code]\"=97712 \\  -d \"shipping[address][state]\"=CA \\  -d \"shipping[name]\"={{CUSTOMER_NAME}} \\   -d \"address[city]\"=Brothers \\  -d \"address[country]\"=US \\  -d \"address[line1]\"=\"27 Fredrick Ave\" \\  -d \"address[postal_code]\"=97712 \\  -d \"address[state]\"=CA`\n\n[](#create-subscription)\n\n#### Note\n\nLet your new customer choose a plan and then create the subscription—in this guide, they choose between Basic and Premium.\n\nOn the frontend, pass the selected price ID and the ID of the customer record to the backend.\n\n`fetch('/create-subscription', {   method: 'POST',   headers: {     'Content-Type': 'application/json',   },   body: JSON.stringify({     priceId: priceId,     customerId: customerId,   }), })`\n\nOn the backend, create the subscription with status `incomplete` using `payment_behavior=default_incomplete`. Then return the `client_secret` from the subscription’s first [payment intent](https://docs.stripe.com/payments/payment-intents) to the frontend to complete payment.\n\nSet [save\\_default\\_payment\\_method](https://docs.stripe.com/api/subscriptions/object#subscription_object-payment_settings-save_default_payment_method) to `on_subscription` to save the payment method as the default for a subscription when a payment succeeds. Saving a default payment method increases the success rate of future subscription payments.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`post '/create-subscription' do   content_type 'application/json'   data = JSON.parse(request.body.read)   customer_id = cookies[:customer]   price_id = data['priceId']    # Create the subscription. Note we're expanding the Subscription's   # latest invoice and that invoice's payment_intent   # so we can pass it to the front end to confirm the payment   subscription = Stripe::Subscription.create(     customer: customer_id,     items: [{       price: price_id,     }],     payment_behavior: 'default_incomplete',     payment_settings: {save_default_payment_method: 'on_subscription'},     expand: ['latest_invoice.payment_intent']   )    { subscriptionId: subscription.id, clientSecret: subscription.latest_invoice.payment_intent.client_secret }.to_json end`\n\n#### Note\n\nIf you’re using a [multi-currency Price](https://docs.stripe.com/products-prices/pricing-models#multicurrency \"multi-currency price\"), use the [currency](https://docs.stripe.com/api/subscriptions/create#create_subscription-currency) parameter to tell the Subscription which of the Price’s currencies to use. (If you omit the `currency` parameter, then the Subscription uses the Price’s default currency.)\n\nAt this point the Subscription is `inactive` and awaiting payment. Here’s an example response. The minimum fields to store are highlighted, but store whatever your application frequently accesses.\n\n`{   \"id\": \"sub_JgRjFjhKbtD2qz\",   \"object\": \"subscription\",   \"application_fee_percent\": null,   \"automatic_tax\": {     \"enabled\": false   },   \"billing\": \"charge_automatically\",   \"billing_cycle_anchor\": 1623873347,   \"billing_thresholds\": null,`\n\n[](#collect-payment)\n\nUse [Stripe Elements](https://docs.stripe.com/payments/elements) to collect payment details and activate the subscription. You can customize Elements to match the look-and-feel of your application.\n\n#### Note\n\nIf you’re building an integration with Stripe Elements, [Link](https://docs.stripe.com/payments/link) enables you to create frictionless payments for your customers. They can save, change, and manage all their payment details in Link without any impact to your integration. Meanwhile, as Stripe adds support for more payment methods to Link, your integration can automatically accept them, without requiring you to make changes to your [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods).\n\nThe [Payment Element](https://docs.stripe.com/payments/payment-element) securely collects all necessary payment details for a wide variety of payments methods. The payment methods currently supported by both the Payment Element and Subscriptions are credit cards, Link, SEPA Direct Debit, and BECS Direct Debit.\n\n### Set up Stripe Elements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element is automatically available as a feature of Stripe.js. Include the Stripe.js script on your checkout page by adding it to the `head` of your HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI compliant. Don’t include the script in a bundle or host a copy of it yourself.\n\n`<head>   <title>Checkout</title>   <script src=\"[https://js.stripe.com/v3/](https://js.stripe.com/v3/)\"></script> </head> <body>   <!-- content here --> </body>`\n\nCreate an instance of Stripe with the following JavaScript on your checkout page:\n\n`// Set your publishable key: remember to change this to your live publishable key in production // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\n### Add the Payment Element to your page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element needs a place to live on your payment page. Create an empty DOM node (container) with a unique ID in your payment form.\n\n`<form id=\"payment-form\">   <div id=\"payment-element\">     <!-- Elements will create form elements here -->   </div>   <button id=\"submit\">Subscribe</button>   <div id=\"error-message\">     <!-- Display error message to your customers here -->   </div> </form>`\n\nWhen the form above has loaded, create an instance of the Payment Element and mount it to the container DOM node. In the [create the subscription](#create-subscription) step, you passed the `client_secret` value to the frontend. Pass this value as an option when creating an instance of Elements.\n\n`const options = {   clientSecret: '{{CLIENT_SECRET}}',   // Fully customizable with appearance API.   appearance: {/*...*/}, };  // Set up Stripe.js and Elements to use in checkout form, passing the client secret obtained in step 5 const elements = stripe.elements(options);  // Create and mount the Payment Element const paymentElement = elements.create('payment'); paymentElement.mount('#payment-element');`\n\nThe Payment Element renders a dynamic form that allows your customer to select a payment method. The form automatically collects all necessary payments details for the payment method that they select.\n\n#### Optional Payment Element configurations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Customize the Payment Element to match the design of your site by passing the [appearance object](https://docs.stripe.com/js/elements_object/create#stripe_elements-options-appearance) into `options` when creating an instance of Elements.\n*   Configure the Apple Pay interface to return a [merchant token](https://docs.stripe.com/apple-pay/merchant-tokens?pay-element=web-pe) to support recurring, auto reload, and deferred payments.\n\n### Complete payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse `stripe.confirmPayment` to complete the payment using details from the Payment Element and activate the subscription. This creates a PaymentMethod and confirms the incomplete Subscription’s first PaymentIntent, causing a charge to be made. If [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") (SCA) is required for the payment, the Payment Element handles the authentication process before confirming the PaymentIntent.\n\nProvide a [return\\_url](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-return_url) to this function to indicate where Stripe redirects the user after they complete the payment. Your user might first be redirected to an intermediate site, like a bank authorization page, before being redirected to the `return_url`. Card payments immediately redirect to the `return_url` when a payment is successful.\n\n``const form = document.getElementById('payment-form');  form.addEventListener('submit', async (event) => {   event.preventDefault();    const {error} = await stripe.confirmPayment({     //`Elements` instance that was used to create the Payment Element     elements,     confirmParams: {       return_url: \"[https://example.com/order/123/complete](https://example.com/order/123/complete)\",     }   });    if (error) {     // This point will only be reached if there is an immediate error when     // confirming the payment. Show error to your customer (for example, payment     // details incomplete)     const messageContainer = document.querySelector('#error-message');     messageContainer.textContent = error.message;   } else {     // Your customer will be redirected to your `return_url`. For some payment     // methods like iDEAL, your customer will be redirected to an intermediate     // site first to authorize the payment, then redirected to the `return_url`.   } });``\n\nWhen your customer submits a payment, Stripe redirects them to the `return_url` and includes the following URL query parameters. The return page can use them to get the status of the PaymentIntent so it can display the payment status to the customer.\n\nWhen you specify the `return_url`, you can also append your own query parameters for use on the return page.\n\n| Parameter | Description |\n| --- | --- |\n| `payment_intent` | The unique identifier for the `PaymentIntent`. |\n| `payment_intent_client_secret` | The [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent` object. |\n\nWhen the customer is redirected back to your site, you can use the `payment_intent_client_secret` to query for the PaymentIntent and display the transaction status to your customer.\n\n#### Caution\n\nIf you have tooling that tracks the customer’s browser session, you might need to add the `stripe.com` domain to the referrer exclude list. Redirects cause some tools to create new sessions, which prevents you from tracking the complete session.\n\nUse one of the query parameters to retrieve the PaymentIntent. Inspect the [status of the PaymentIntent](https://docs.stripe.com/payments/paymentintents/lifecycle) to decide what to show your customers. You can also append your own query parameters when providing the `return_url`, which persist through the redirect process.\n\n`// Initialize Stripe.js using your publishable key const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n``);  // Retrieve the \"payment_intent_client_secret\" query parameter appended to // your return_url by Stripe.js const clientSecret = new URLSearchParams(window.location.search).get(   'payment_intent_client_secret' );  // Retrieve the PaymentIntent stripe.retrievePaymentIntent(clientSecret).then(({paymentIntent}) => {   const message = document.querySelector('#message')    // Inspect the PaymentIntent `status` to indicate the status of the payment   // to your customer.   //   // Some payment methods will [immediately succeed or fail][0] upon   // confirmation, while others will first enter a `processing` state.   //   // [0]: [https://stripe.com/docs/payments/payment-methods#payment-notification](https://stripe.com/docs/payments/payment-methods#payment-notification)   switch (paymentIntent.status) {     case 'succeeded':       message.innerText = 'Success! Payment received.';       break;      case 'processing':       message.innerText = \"Payment processing. We'll update you when payment is received.\";       break;      case 'requires_payment_method':       message.innerText = 'Payment failed. Please try another payment method.';       // Redirect your user back to your payment page to attempt collecting       // payment again       break;      default:       message.innerText = 'Something went wrong.';       break;   } });``\n\n[](#webhooks)\n\nTo complete the integration, you need to process [webhooks](https://docs.stripe.com/webhooks \"webhook\") sent by Stripe. These are events triggered whenever state inside of Stripe changes, such as subscriptions creating new invoices. In your application, set up an HTTP handler to accept a POST request containing the webhook event, and verify the signature of the event:\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`post '/webhook' do   # You can use webhooks to receive information about asynchronous payment events.   # For more about our webhook events check out [https://stripe.com/docs/webhooks.](https://stripe.com/docs/webhooks)   webhook_secret = ENV['STRIPE_WEBHOOK_SECRET']   payload = request.body.read   if !webhook_secret.empty?`\n\nDuring development, use the Stripe CLI to [observe webhooks and forward them to your application](https://docs.stripe.com/webhooks#test-webhook). Run the following in a new terminal while your development app is running:\n\n`stripe listen --forward-to localhost:4242/webhook`\n\nFor production, set up a webhook endpoint URL in the Dashboard, or use the [Webhook Endpoints API](https://docs.stripe.com/api/webhook_endpoints).\n\nYou’ll listen to a couple of events to complete the remaining steps in this guide. See [Subscription events](https://docs.stripe.com/billing/subscriptions/overview#subscription-events) for more details about subscription-specific webhooks.\n\n[](#provision-access)\n\nNow that the subscription is active, give your user access to your service. To do this, listen to the `customer.subscription.created`, `customer.subscription.updated`, and `customer.subscription.deleted` events. These events pass a subscription object which contains a `status` field indicating whether the subscription is active, past due, or canceled. See [the subscription lifecycle](https://docs.stripe.com/billing/subscriptions/overview#subscription-lifecycle) for a complete list of statuses.\n\nIn your webhook handler:\n\n1.  Verify the subscription status. If it’s `active` then your user has paid for your product.\n2.  Check the product the customer subscribed to and grant access to your service. Checking the product instead of the price gives you more flexibility if you need to change the pricing or billing interval.\n3.  Store the `product.id`, `subscription.id` and `subscription.status` in your database along with the `customer.id` you already saved. Check this record when determining which features to enable for the user in your application.\n\nThe state of a subscription might change at any point during its lifetime, even if your application does not directly make any calls to Stripe. For example, a renewal might fail due to an expired credit card, which puts the subscription into a past due state. Or, if you implement the [customer portal](https://docs.stripe.com/customer-management), a user might cancel their subscription without directly visiting your application. Implementing your handler correctly keeps your application state in sync with Stripe.\n\n[](#cancel-subscription)\n\nIt’s common to allow customers to cancel their subscriptions. This example adds a cancellation option to the account settings page.\n\n![Sample subscription cancelation interface.](https://b.stripecdn.com/docs-statics-srv/assets/fixed-price-subscriptions-guide-account-settings.6559626ba4b434826a67abfea165e097.png)\n\nAccount settings with the ability to cancel the subscription\n\n`function cancelSubscription(subscriptionId) {   return fetch('/cancel-subscription', {     method: 'post',     headers: {       'Content-Type': 'application/json',     },     body: JSON.stringify({       subscriptionId: subscriptionId,     }),   })     .then(response => {       return response.json();     })     .then(cancelSubscriptionResponse => {       // Display to the user that the subscription has been canceled.     }); }`\n\nOn the backend, define the endpoint for your frontend to call.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`post '/cancel-subscription' do   content_type 'application/json'   data = JSON.parse request.body.read    deleted_subscription = Stripe::Subscription.cancel(data['subscriptionId'])    deleted_subscription.to_json end`\n\nYour application receives a `customer.subscription.deleted` event.\n\nAfter the subscription is canceled, update your database to remove the Stripe subscription ID you previously stored, and limit access to your service.\n\nWhen a subscription is canceled, it can’t be reactivated. Instead, collect updated billing information from your customer, update their default payment method, and create a new subscription with their existing customer record.\n\n[](#test)\n\n### Test payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the following table to test different payment methods and scenarios.\n\n| Payment method | Scenario | How to test |\n| --- | --- | --- |\n| BECS Direct Debit | Your customer successfully pays with BECS Direct Debit. | Fill out the form using the account number `900123456` and BSB `000-000`. The confirmed PaymentIntent initially transitions to `processing`, then transitions to the `succeeded` status three minutes later. |\n| BECS Direct Debit | Your customer’s payment fails with an `account_closed` error code. | Fill out the form using the account number `111111113` and BSB `000-000`. |\n| Credit card | The card payment succeeds and does not require authentication. | Fill out the credit card form using the credit card number `4242 4242 4242 4242` with any expiration, CVC, and postal code. |\n| Credit card | The card payment requires [authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\"). | Fill out the credit card form using the credit card number `4000 0025 0000 3155` with any expiration, CVC, and postal code. |\n| Credit card | The card is declined with a decline code like `insufficient_funds`. | Fill out the credit card form using the credit card number `4000 0000 0000 9995` with any expiration, CVC, and postal code. |\n| SEPA Direct Debit | Your customer successfully pays with SEPA Direct Debit. | Fill out the form using the account number `AT321904300235473204`. The confirmed PaymentIntent initially transitions to processing, then transitions to the succeeded status three minutes later. |\n| SEPA Direct Debit | Your customer’s payment intent status transition from `processing` to `requires_payment_method`. | Fill out the form using the account number `AT861904300235473202`. |\n\n### Monitor events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSet up webhooks to listen to subscription change events like upgrades and cancellations. Read the guide to learn more about [subscription webhooks](https://docs.stripe.com/billing/subscriptions/webhooks). You can view events in the [Dashboard](https://dashboard.stripe.com/test/events)) or with the [Stripe CLI](https://docs.stripe.com/webhooks#test-webhook).\n\nFor more details, see [testing your Billing integration](https://docs.stripe.com/billing/testing).\n\n[](#disclose-cookies)\n\nStripe collects information on customer interactions with Elements to provide services to you, prevent fraud, and improve its services. This includes using cookies and IP addresses to identify which Elements a customer saw during a single checkout session. You’re responsible for disclosing and obtaining all rights and consents necessary for Stripe to use data in these ways. For more information, visit our [privacy center](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe).",
    "title": "Build a subscriptions integration | Stripe Documentation",
    "description": "Create and manage subscriptions to accept recurring payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/registrations-api",
    "markdown": "# Use the Registrations API to manage tax registrations\n\nBusinesses are required to register to collect taxes in locations where they have tax obligations. The [Tax Registration API](https://docs.stripe.com/api/tax/registrations) lets you retrieve and configure tax registrations using an API instead of the Dashboard. Adding your registrations in Stripe turns on tax calculation and collection for your transactions made through Stripe.\n\n## List all tax registrations for your connected accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo get a list of your connected accounts’ tax registrations, make a [list registrations](https://docs.stripe.com/api/tax/registrations) call. You can filter the response by setting the `status` parameter to `active`, `expired`, or `scheduled`.\n\n`curl -G https://api.stripe.com/v1/tax/registrations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d status=active \\  -d limit=3`\n\nIf your connected accounts don’t have access to the Stripe Dashboard, your platform can provide a UI for them to manage their tax registrations. The registrations endpoint helps you implement that functionality.\n\n## Add a tax registration for your connected account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf a tax obligation and registration of the connected account is known to the platform, you can perform a [create registration](https://docs.stripe.com/api/tax/registrations/create) call using the `Stripe-Account` header with a value of the connected account ID to add or schedule the registration for the connected account.\n\n`curl https://api.stripe.com/v1/tax/registrations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d country=IE \\  -d \"country_options[ie][type]\"=oss_union \\  -d active_from=now`\n\nIn this case, a `tax.registration` object is created in the connected account.\n\n`{   \"object\": \"tax.registration\",   \"active_from\": 1669249440,   \"country\": \"IE\",   \"country_options\": {     \"ie\": {       \"type\": \"oss_union\"     }   },   \"livemode\": false,   \"status\": \"active\",   ... }`\n\nAlternatively, for connected accounts with access to the Stripe Dashboard (for example, Standard accounts), you can instruct them to [set up Stripe Tax](https://docs.stripe.com/tax/set-up) using the Dashboard, which includes adding tax registrations.\n\n### Head office address requirement![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo add a tax registration, the connected account must first set up a head office address. Without a defined head office address, an `invalid_request_error` gets triggered with a message about setting your head office address.\n\nUse the [tax settings API](https://docs.stripe.com/tax/settings-api) to add a head office address as a platform:\n\n`curl https://api.stripe.com/v1/tax/settings \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d \"head_office[address][country]\"=DE`\n\nLocation-specific validation and errors might occur, details of which are found in our [tax settings guide](https://docs.stripe.com/tax/settings-api?tax-integration=connect-platform#validations-and-errors).\n\n## Update and expire a tax registration for your connected account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can’t delete a registration after it’s created, but you can end it by setting `expires_at` to a time when the registration is no longer active. Update the registrations with an [update registration](https://docs.stripe.com/api/tax/registrations/update) call using the Stripe-Account header with a value of the connected account ID:\n\n`curl https://api.stripe.com/v1/tax/registrations/taxreg_NkyGPRPytKq66j \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d expires_at=now`\n\nIn this case, the registration expires immediately. [Tax calculations](https://docs.stripe.com/api/tax/calculations) performed for the connected account after the `expires_at` won’t use this registration.\n\n`{   \"object\": \"tax.registration\",   \"active_from\": 1669248000,   \"created\": 1669219200,   \"expires_at\": 1669334400,   \"livemode\": false,   \"status\": \"active\",   ... }`",
    "title": "Use the Registrations API to manage tax registrations | Stripe Documentation",
    "description": "Learn how to add, schedule, and check active tax registrations.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/illinois",
    "markdown": "# Collect tax in Illinois | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Illinois.\n\nIn Illinois, Stripe Tax supports calculation and collection of sales tax.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Illinois. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\n### Sales tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSellers that meet either the sales or transaction number thresholds must register for an Illinois sales tax permit, collect sales tax on sales that ship into Illinois, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous year\n\n**Included transactions**: Retail sales\n\n**Effective date**: October 1, 2018\n\n### Other taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe also support:\n\n*   [Bloomington Amusement tax](https://www.bloomingtonil.gov/departments/finance/local-tax-information/amusement-tax)—for businesses selling video or audio streaming on a pay-per-use, rental, or subscription basis to customers in Bloomington.\n*   [Chicago Lease Tax (Personal Property Lease Transaction Tax)](https://www.chicago.gov/city/en/depts/fin/supp_info/revenue/tax_list/personal_propertyleasetransactiontax.html)—for businesses selling $100,000 or over of software as a service or other leased products into Chicago.\n*   [Chicago Amusement tax](https://www.chicago.gov/city/en/depts/fin/supp_info/revenue/tax_list/amusement_tax.html)—for businesses selling $100,000 or more of digital entertainment into Chicago, including selling video or audio streaming and online gaming.\n*   [East Dundee Amusement tax](https://eastdundee.net/businesses/streaming_services_amusement_tax.php)—for businesses selling video or audio streaming, or remotely-accessed online games on a pay-per-use, rental, or subscription basis to customers in East Dundee.\n*   [Evanston Amusement tax](https://www.cityofevanston.org/how-to/home-rule-taxes)—for businesses selling video or audio streaming, or remotely-accessed online games on a pay-per-use, rental, or subscription basis to customers in Evanston.\n*   [Schiller Park Streaming Surcharge](https://www.villageofschillerpark.com/149/Administration-Department)—for businesses selling video or audio streaming, or remotely-accessed online games on a pay-per-use, rental, or subscription basis that are delivered to customers in Schiller Park.\n\n**Thresholds**\n\n*   Chicago Lease and Chicago Amusement tax apply to businesses selling specific goods to customers in Chicago, even if you don’t have a physical presence there.\n*   Bloomington, East Dundee, Evanston, and Schiller Park amusement taxes only apply when there’s a physical presence in those locations.\n\nTransactions for these taxes aren’t included in tax threshold monitoring for Illinois.\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Illinois at the [tax authority](https://tax.illinois.gov/research/taxinformation/sales/rot.html) or the other taxes we support at the links above. Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Illinois, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-il) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Illinois.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and differs from your customer’s state, Stripe always calculates tax based on your customer’s location.\n\nIf your customer is in Illinois and your origin address is also in Illinois, Stripe applies tax based on your origin address, depending on the type of product or service you sell.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Illinois filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\nReporting-specific considerations:\n\n*   The location reports don’t include transactions with Bloomington Amusement tax, Chicago Lease Tax, Chicago Amusement tax, East Dundee Amusement tax, Evanston Amusement tax, or Schiller Park Streaming Surcharge as these are filed to the local jurisdiction using a different report. To see transactions with these taxes, you can use the [exports](https://docs.stripe.com/tax/reports#exports).\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Illinois. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Illinois | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Illinois.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/hawaii",
    "markdown": "# Collect tax in Hawaii | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Hawaii.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Hawaii. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers that meet either the sales or transaction number thresholds must register for a Hawaii sales tax permit, collect sales tax on sales that ship into Hawaii, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: July 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Hawaii at the [tax authority](https://tax.hawaii.gov/). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Hawaii, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-hi) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Hawaii.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\nInstead of a traditional sales tax paid by consumers, Hawaii has a tax on businesses called General Excise Tax (GET). Businesses can recover GET by passing it on to their customers. Businesses generally display GET as a separate item on receipts, but they are not required to do so.\n\nBecause a business must pay GET on the entire amount paid by a customer, it also owes GET on any GET reimbursement it collects from customers. To cover that additional tax amount, Hawaii allows businesses to pass GET on to customers at a higher rate than the base GET rate. Stripe Tax only supports the maximum pass-on rate, which fully covers a business’ GET liability.\n\nFor example:\n\nA product sells for 100 USD and is subject to 4% GET, so the seller owes 4 USD GET. If the seller passes that on to the customer and collects 104 USD, the entire amount is subject to 4% GET. As a result, the seller’s GET liability becomes 4.16 USD.\n\nThe seller can recover the entire GET amount from the customer by instead using the maximum pass-on rate, which for a 4% GET rate is 4.166%. That lets the seller charge the customer 4.166%, or 4.16 USD, which covers their entire GET liability. GET rates can vary by county and by business type. To learn more about GET and the maximum pass-on rates, see [Hawaii’s tax facts page](https://files.hawaii.gov/tax/legal/taxfacts/tf2015-37-1.pdf).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Hawaii filing requirements. You have the option to report on an annual, semiannual, quarterly, or monthly basis.\n\nReporting-specific considerations:\n\n*   In Hawaii, wholesalers are required to identify wholesale sales because they’re subject to a lower tax rate instead of being completely exempt. You won’t see a location report for Hawaii if you have any customer-exempt transactions. Use the [exports](https://docs.stripe.com/tax/reports#exports) instead for a detailed tax breakdown of each transaction.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Hawaii. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Hawaii | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Hawaii.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/tennessee",
    "markdown": "# Collect tax in Tennessee | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Tennessee.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Tennessee. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers with sales exceeding the threshold must register for a Tennessee sales tax permit, collect sales tax on sales that ship into Tennessee, and remit sales tax back to the state.\n\n**Threshold**: 100,000 USD\n\n**Period**: 12 months\n\n**Included transactions**: Retail sales\n\n**Effective date**: October 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Tennessee at the [tax authority](https://www.tn.gov/revenue/taxes/sales-and-use-tax.html). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Tennessee, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-tn) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Tennessee.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and differs from your customer’s state, Stripe always calculates tax based on your customer’s location.\n\nIf your customer is in Tennessee and your origin address is also in Tennessee, Stripe applies tax based on your origin address, depending on the type of product or service you sell.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Tennessee filing requirements. You have the option to report on an annual, fiscal year, quarterly, or monthly basis.\n\nReporting-specific considerations:\n\n*   In most areas of Tennessee, if the price of a single item exceeds the local tax limit for that specific area, the local tax doesn’t apply to that excess amount. You won’t see a location report for Tennessee if you have these transactions. Use the [exports](https://docs.stripe.com/tax/reports#exports) instead for a detailed tax breakdown of each transaction.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Tennessee. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Tennessee | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Tennessee.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/kentucky",
    "markdown": "# Collect tax in Kentucky | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Kentucky.\n\nIn Kentucky, Stripe Tax supports calculation and collection of [sales tax](https://revenue.ky.gov/Business/Sales-Use-Tax/Pages/default.aspx).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Kentucky. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\n### Sales tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSellers that meet either the sales or transaction number thresholds must register for a Kentucky sales tax permit, collect sales tax on sales that ship into Kentucky, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: July 1, 2018\n\n### Other taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe also support:\n\n*   [Kentucky State and Local Communications Tax](https://revenue.ky.gov/Business/Telecommunications-Tax/Pages/default.aspx)—for businesses selling video streaming to customers in Kentucky. This includes the Multi Channel Video Programming Excise Tax and Utility Gross Receipts License Tax. These taxes only apply when your business has physical presence in Kentucky. This means there isn’t a revenue threshold for when remote sellers need to pay this tax. Transactions for these taxes aren’t included in Stripe monitoring for Kentucky. The linked page is only accesible within the US or via a VPN.\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for tax in Kentucky at the [tax authority](https://onestop.ky.gov/start/Pages/statetax.aspx). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Kentucky, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ky) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Kentucky.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Kentucky filing requirements. You have the option to report on an annual, fiscal year, quarterly, or monthly basis.\n\nReporting-specific considerations:\n\n*   The location reports don’t include transactions with the Kentucky State and Local Communications Tax as these are filed to the state using a different report. To see transactions with these taxes, you can use the [exports](https://docs.stripe.com/tax/reports#exports).\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Kentucky. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Kentucky | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Kentucky.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/washington",
    "markdown": "# Collect tax in Washington | Stripe DocumentationThe Stripe Docs logo\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Washington. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nAccording to the state, sellers with sales equal to or exceeding the sales number thresholds must register for a Washington sales tax permit, collect sales tax on sales that ship into Washington, and remit that sales tax to the state.\n\nPrior to March 14, 2019, remote sellers could also have economic nexus if they had 200 or more transactions in the state. And, effective July 1, 2019, [SSB Bill 5581](http://lawfilesext.leg.wa.gov/biennium/2019-20/Pdf/Bills/Session%20Laws/Senate/5581-S.SL.pdf#page=1) eliminated both the notice and reporting requirements established in the state’s 2018 Marketplace Fairness law in addition to the 200 transaction trigger. If you previously registered because you met the 200 transaction threshold, assess your sales to see if you exceed the 100,000 USD threshold. If you do, continue to collect and submit retail sales tax.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: October 1, 2018\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Washington at the [tax authority](https://dor.wa.gov/). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Washington, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-wa) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Washington.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Washington filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\nReporting-specific considerations:\n\n*   Washington requires wholesale sales to be identified because they’re subject to a lower tax rate instead of being completely exempt. When a report contains any customer-exempt transactions, it displays a warning message. For a detailed breakdown of each transaction, [export the transaction data](https://docs.stripe.com/tax/reports#exports).\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Washington. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Washington | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Washington.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/integration/workflow-transitions",
    "markdown": "# Status transitions and finalization | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about invoice status transitions and finalization.\n\nThe following graphic shows the different ways that an invoice can transition from status to status:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/invoice_states_diagram_simplified.edbc1852633266183562d1235636a6ad.svg)\n\nStatus transitions and finalization\n\n## Transitions and endpoints ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following table outlines the status transitions and their endpoints. It also lists the [webhooks](https://docs.stripe.com/webhooks \"webhook\") that are emitted by the endpoint, and the resulting status for each:\n\n## Finalize draft invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you enable [automatic collection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), Stripe automatically finalizes, and begins automatic collection of the [invoice](https://docs.stripe.com/billing/invoices/subscription). We wait an hour after receiving a successful response to the `invoice.created` event before attempting payment. If we don’t receive a successful response within 72 hours, we attempt to finalize and send the invoice.\n\nInvoices are initially created with `status=draft`, and you can only edit them while they’re in this state. When an invoice is ready to be paid, finalize it. Finalizing an invoice sets `status=open` on the invoice. You can manually finalize an invoice in the [Dashboard](https://docs.stripe.com/invoicing/dashboard) or by using the [Finalize](https://docs.stripe.com/api/invoices/finalize) endpoint. If you’ve configured [webhook](https://docs.stripe.com/webhooks) endpoints, you receive an `invoice.finalized` event when an invoice finalizes.\n\n`curl -X POST https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/finalize \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nIn live mode, if your webhook endpoint doesn’t [respond properly](https://docs.stripe.com/webhooks), Stripe continues retrying the webhook notification for up to 3 days with an exponential back off. In test mode, we retry three times over a few hours. During that time, we won’t attempt to charge the customer unless we receive a successful response. We also send you an email to notify you that the webhook is failing.\n\nThis behavior applies to all webhook endpoints defined on your account, including cases where a [Connect application](https://stripe.com/works-with) or other third-party service is having trouble handling incoming webhooks.\n\n## Post-finalization ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFinalizing an invoice does the following:\n\n*   It allows the invoice to be paid.\n*   It ensures that an invoice number is present.\n*   It makes certain properties [immutable](#immutable) on the invoice.\n*   It creates an incomplete payment intent for the invoice.\n*   It generates a unique URL where someone can pay the invoice, and a link to download a [PDF of the invoice](https://docs.stripe.com/api/invoices/object#invoice_object-invoice_pdf).\n\n#### Caution\n\nIf an invoice isn’t finalized, you can’t collect payment.\n\n### Finalized invoice restrictions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter you finalize an invoice, you can’t change certain fields that pertain to the amount and customer. This is to satisfy the common tax-compliance requirement that finalized invoices be retained—as they were finalized—for a legally required minimum time period.\n\nIn some jurisdictions, editing fields that modify the total amount due on an invoice could render the invoice invalid. These are typically fields associated with your account, customer, line items, or taxes. It’s your responsibility to make sure that the invoices you create comply with all applicable laws.\n\nIf you require updates to the invoice amount after it finalizes, use [credit notes](https://docs.stripe.com/invoicing/dashboard/credit-notes). Credit notes allow you to modify the invoice amount by specifying an adjustment in money owed by the customer. You can issue credit notes for any invoice in an `open` or `paid` status. Finalizing the invoice copies the following customer fields to it and makes them immutable:\n\n*   [invoice.customer\\_address](https://docs.stripe.com/api/invoices/object#invoice_object-customer_address)\n*   [invoice.customer\\_email](https://docs.stripe.com/api/invoices/object#invoice_object-customer_email)\n*   [invoice.customer\\_name](https://docs.stripe.com/api/invoices/object#invoice_object-customer_name)\n*   [invoice.customer\\_phone](https://docs.stripe.com/api/invoices/object#invoice_object-customer_phone)\n*   [invoice.customer\\_shipping](https://docs.stripe.com/api/invoices/object#invoice_object-customer_shipping)\n*   [invoice.customer\\_tax\\_exempt](https://docs.stripe.com/api/invoices/object#invoice_object-customer_tax_exempt)\n*   [invoice.customer\\_tax\\_ids](https://docs.stripe.com/api/invoices/object#invoice_object-customer_tax_ids)\n\nIf you want to change a customer-related property on an invoice:\n\n1.  Void the current invoice.\n2.  [Duplicate](https://docs.stripe.com/invoicing/dashboard#modify-invoice) the voided invoice.\n3.  Update the customer information on the new invoice.\n\n### Emails after finalization ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBy default, Stripe automatically sends invoices when you set [collection\\_method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method) to `send_invoice`. Stripe doesn’t email invoices in the following cases:\n\n*   When [charged automatically](https://docs.stripe.com/invoicing/automatic-charging).\n*   When [automatic collection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection) is turned off for the invoice.\n*   When the [Email finalized invoices to customers](https://dashboard.stripe.com/settings/billing/automatic) option is turned off.\n\n#### Note\n\nIf you turn off the **Email finalized invoices to customers** option, automatic or manual finalization doesn’t send an invoice.\n\n## Asynchronous payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSome payment methods require customer interaction to complete the payment—for example, a European card or bank transfer may require [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") (SCA).\n\nUse the invoice’s [payment\\_intent](https://docs.stripe.com/api/invoices/object#invoice_object-payment_intent) parameter to choose how to handle the response from the payment attempt, which may be either `success` or `requires_action`.\n\nWhen the status of the PaymentIntent is `requires_action`, you must have your user complete a [3D Secure authentication](https://docs.stripe.com/billing/migration/strong-customer-authentication#scenario-4) to complete the payment.\n\nInstead of building this yourself, you can rely on Stripe to handle it for you. [Enable reminder emails](https://dashboard.stripe.com/settings/billing/automatic) in the Dashboard so that Stripe can automatically send emails to your customers whenever `requires_action` occurs. These emails include a link to the [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page), where a customer can perform all of the actions required to pay the invoice. To learn more about these emails and how to customize them, see [Sending email reminders](https://docs.stripe.com/invoicing/send-email).",
    "title": "Status transitions and finalization | Stripe Documentation",
    "description": "Learn about invoice status transitions and finalization.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payment_links/payment_links",
    "markdown": "# Payment Link | Stripe API Reference\n\n## [The Payment Link object](https://docs.stripe.com/api/payment_links/payment_links/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Whether the payment link’s `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated.\n    \n*   #### \n    \n    line\\_itemsobjectExpandable\n    \n    The line items representing what is being sold.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The public URL that can be shared with customers.\n    \n\n### More attributes\n\n*   #### \n    \n    allow\\_promotion\\_codesboolean\n    \n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n*   #### \n    \n    application\\_fee\\_amountnullable integerConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentnullable floatConnect only\n    \n\n*   #### \n    \n    billing\\_address\\_collectionenum\n    \n*   #### \n    \n    consent\\_collectionnullable object\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    inactive\\_messagenullable string\n    \n*   #### \n    \n    invoice\\_creationnullable object\n    \n\n*   #### \n    \n    on\\_behalf\\_ofnullable stringExpandableConnect only\n    \n*   #### \n    \n    payment\\_intent\\_datanullable object\n    \n*   #### \n    \n    payment\\_method\\_collectionenum\n    \n*   #### \n    \n    payment\\_method\\_typesnullable array of enums\n    \n*   #### \n    \n    phone\\_number\\_collectionobject\n    \n*   #### \n    \n    restrictionsnullable object\n    \n*   #### \n    \n    shipping\\_address\\_collectionnullable object\n    \n*   #### \n    \n    shipping\\_optionsarray of objects\n    \n\n*   #### \n    \n    subscription\\_datanullable object\n    \n\n*   #### \n    \n    transfer\\_datanullable objectConnect only\n    \n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {},  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```\n\n## [Create a payment link](https://docs.stripe.com/api/payment_links/payment_links/create)\n\nCreates a payment link.\n\n### Parameters\n\n*   #### \n    \n    line\\_itemsarray of objectsRequired\n    \n    The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. Metadata associated with this Payment Link will automatically be copied to [checkout sessions](https://docs.stripe.com/api/checkout/sessions) created by this payment link.\n    \n\n### More parameters\n\n*   #### \n    \n    allow\\_promotion\\_codesboolean\n    \n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    billing\\_address\\_collectionenum\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n*   #### \n    \n    payment\\_intent\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_collectionenum\n    \n*   #### \n    \n    payment\\_method\\_typesarray of enums\n    \n*   #### \n    \n    phone\\_number\\_collectionobject\n    \n\n*   #### \n    \n    shipping\\_address\\_collectionobject\n    \n*   #### \n    \n    shipping\\_optionsarray of objects\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the payment link.\n\n```\ncurl https://api.stripe.com/v1/payment_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"line_items[0][price]\"=price_1MoC3TLkdIwHu7ixcIbKelAC \\  -d \"line_items[0][quantity]\"=1\n```\n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {},  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```\n\n## [Update a payment link](https://docs.stripe.com/api/payment_links/payment_links/update)\n\nUpdates a payment link.\n\n### Parameters\n\n*   Whether the payment link’s `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated.\n    \n*   #### \n    \n    line\\_itemsarray of objects\n    \n    The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. Metadata associated with this Payment Link will automatically be copied to [checkout sessions](https://docs.stripe.com/api/checkout/sessions) created by this payment link.\n    \n\n### More parameters\n\n*   #### \n    \n    allow\\_promotion\\_codesboolean\n    \n\n*   #### \n    \n    billing\\_address\\_collectionenum\n    \n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    payment\\_intent\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_collectionenum\n    \n*   #### \n    \n    payment\\_method\\_typesarray of enums\n    \n\n*   #### \n    \n    shipping\\_address\\_collectionobject\n    \n\n### Returns\n\nUpdated payment link.\n\nPOST /v1/payment\\_links/:id\n\n```\ncurl https://api.stripe.com/v1/payment_links/plink_1MoC3ULkdIwHu7ixZjtGpVl2 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```\n\n## [Retrieve a payment link's line items](https://docs.stripe.com/api/payment_links/line_items)\n\nWhen retrieving a payment link, there is an includable **line\\_items** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` payment link line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more line items are available, the resulting array will be empty.\n\nGET /v1/payment\\_links/:id/line\\_items\n\n```\ncurl https://api.stripe.com/v1/payment_links/plink_1N4CWjLkdIwHu7ix2Y2F1kqb/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"li_NpsHNiHSaDeU0X\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 1099,      \"amount_tax\": 0,      \"amount_total\": 1099,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1N4AEsLkdIwHu7ix7Ssho8Cl\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1683237782,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NppuJWzzNnD5Ut\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 1    }  ],  \"has_more\": false,  \"url\": \"/v1/payment_links/plink_1N4CWjLkdIwHu7ix2Y2F1kqb/line_items\"}\n```",
    "title": "Payment Link | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoices/pay",
    "markdown": "# Pay an invoice | Stripe API Reference\n\nStripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns the invoice object.\n\nPOST /v1/invoices/:id/pay\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/pay \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ix6PgS6g8S\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": true,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"send_invoice\",  \"created\": 1680641304,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZw0zvTyquTfF\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": 1681246104,  \"ending_balance\": 0,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": \"https://invoice.stripe.com/i/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3dVBYNnF0dGlvdXRubGVjSXVOOWhiVWpmUktPLDcxMTgyMTA10200x7P2wMSm?s=ap\",  \"invoice_pdf\": \"https://pay.stripe.com/invoice/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3dVBYNnF0dGlvdXRubGVjSXVOOWhiVWpmUktPLDcxMTgyMTA10200x7P2wMSm/pdf?s=ap\",  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": \"9545A614-0001\",  \"on_behalf_of\": null,  \"paid\": true,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680641304,  \"period_start\": 1680641304,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"paid\",  \"status_transitions\": {    \"finalized_at\": 1680641304,    \"marked_uncollectible_at\": null,    \"paid_at\": 1680641304,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680641304}\n```\n\n## [Search invoices](https://docs.stripe.com/api/invoices/search)\n\nSearch for invoices you’ve previously created using Stripe’s [Search Query Language](https://docs.stripe.com/search#search-query-language). Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.\n\n### Parameters\n\n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next\\_page value returned in a previous response to request subsequent results.\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` invoices. If no objects match the query, the resulting array will be empty. See the related guide on [expanding properties in lists](https://docs.stripe.com/expand#lists).\n\n```\ncurl -G https://api.stripe.com/v1/invoices/search \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d query=\"total<1\"\n```\n\n```\n{  \"object\": \"search_result\",  \"url\": \"/v1/invoices/search\",  \"has_more\": false,  \"data\": [    {      \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",      \"object\": \"invoice\",      \"account_country\": \"US\",      \"account_name\": \"Stripe Docs\",      \"account_tax_ids\": null,      \"amount_due\": 0,      \"amount_paid\": 0,      \"amount_remaining\": 0,      \"amount_shipping\": 0,      \"application\": null,      \"application_fee_amount\": null,      \"attempt_count\": 0,      \"attempted\": false,      \"auto_advance\": false,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null,        \"status\": null      },      \"billing_reason\": \"manual\",      \"charge\": null,      \"collection_method\": \"charge_automatically\",      \"created\": 1680644467,      \"currency\": \"usd\",      \"custom_fields\": null,      \"customer\": \"cus_NeZwdNtLEOXuvB\",      \"customer_address\": null,      \"customer_email\": \"jennyrosen@example.com\",      \"customer_name\": \"Jenny Rosen\",      \"customer_phone\": null,      \"customer_shipping\": null,      \"customer_tax_exempt\": \"none\",      \"customer_tax_ids\": [],      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"discounts\": [],      \"due_date\": null,      \"ending_balance\": null,      \"footer\": null,      \"from_invoice\": null,      \"hosted_invoice_url\": null,      \"invoice_pdf\": null,      \"issuer\": {        \"type\": \"self\"      },      \"last_finalization_error\": null,      \"latest_revision\": null,      \"lines\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"      },      \"livemode\": false,      \"metadata\": {},      \"next_payment_attempt\": null,      \"number\": null,      \"on_behalf_of\": null,      \"paid\": false,      \"paid_out_of_band\": false,      \"payment_intent\": null,      \"payment_settings\": {        \"default_mandate\": null,        \"payment_method_options\": null,        \"payment_method_types\": null      },      \"period_end\": 1680644467,      \"period_start\": 1680644467,      \"post_payment_credit_notes_amount\": 0,      \"pre_payment_credit_notes_amount\": 0,      \"quote\": null,      \"receipt_number\": null,      \"rendering_options\": null,      \"shipping_cost\": null,      \"shipping_details\": null,      \"starting_balance\": 0,      \"statement_descriptor\": null,      \"status\": \"draft\",      \"status_transitions\": {        \"finalized_at\": null,        \"marked_uncollectible_at\": null,        \"paid_at\": null,        \"voided_at\": null      },      \"subscription\": null,      \"subtotal\": 0,      \"subtotal_excluding_tax\": 0,      \"tax\": null,      \"test_clock\": null,      \"total\": 0,      \"total_discount_amounts\": [],      \"total_excluding_tax\": 0,      \"total_tax_amounts\": [],      \"transfer_data\": null,      \"webhooks_delivered_at\": 1680644467    }    {...}    {...}  ],}\n```\n\n## [Send an invoice for manual payment](https://docs.stripe.com/api/invoices/send)\n\nStripe will automatically send invoices to customers according to your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.\n\nRequests made in test-mode result in no emails being sent, despite sending an `invoice.sent` event.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the invoice object.\n\nPOST /v1/invoices/:id/send\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ixJlveR2DO/send \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ixJlveR2DO\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": true,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"send_invoice\",  \"created\": 1680641304,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwvqcz9Sh2uw\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": 1681246104,  \"ending_balance\": 0,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": \"https://invoice.stripe.com/i/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3SDR0Q1Q4U1N0YkVjY2lvSmRoRGppU3E1eGVJLDcxMTgyMTA10200hQIJrDM1?s=ap\",  \"invoice_pdf\": \"https://pay.stripe.com/invoice/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3SDR0Q1Q4U1N0YkVjY2lvSmRoRGppU3E1eGVJLDcxMTgyMTA10200hQIJrDM1/pdf?s=ap\",  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ixJlveR2DO/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": \"3AB9C0CA-0001\",  \"on_behalf_of\": null,  \"paid\": true,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680641304,  \"period_start\": 1680641304,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"paid\",  \"status_transitions\": {    \"finalized_at\": 1680641304,    \"marked_uncollectible_at\": null,    \"paid_at\": 1680641304,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680641304}\n```\n\n## [Void an invoice](https://docs.stripe.com/api/invoices/void)\n\nMark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to [deletion](#delete_invoice), however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.\n\nConsult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to [issue another invoice](#create_invoice) or [credit note](#create_credit_note) instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the voided invoice object.\n\nPOST /v1/invoices/:id/void\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/void \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ix6PgS6g8S\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"void\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Pay an invoice | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoices/void",
    "markdown": "# Void an invoice | Stripe API Reference\n\nMark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to [deletion](#delete_invoice), however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.\n\nConsult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to [issue another invoice](#create_invoice) or [credit note](#create_credit_note) instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the voided invoice object.\n\nPOST /v1/invoices/:id/void\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/void \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ix6PgS6g8S\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"void\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Void an invoice | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/credit_notes/void",
    "markdown": "# Void a credit note | Stripe API Reference\n\nMarks a credit note as void. Learn more about [voiding credit notes](https://docs.stripe.com/billing/invoices/credit-notes#voiding).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the voided credit note object if the call succeeded.\n\nPOST /v1/credit\\_notes/:id/void\n\n```\ncurl -X POST https://api.stripe.com/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/void \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"void\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": 1681750959}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Void a credit note | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/disputes",
    "markdown": "# Disputes and fraud | Stripe DocumentationThe Stripe Docs logo\n\n## Learn what disputes are, how the process works, and how to prevent them from happening.\n\nA dispute (also known as a chargeback) occurs when a cardholder questions your payment with their card issuer.\n\nTo process a chargeback, the issuer creates a formal dispute on the card network, which immediately reverses the payment, pulling the money for the payment—as well as one or more network dispute fees—from Stripe. After that, Stripe debits your balance for the payment amount and dispute fee.\n\nTo help our users submit the best possible response for each dispute, Stripe provides a guided process within the [Dashboard](https://dashboard.stripe.com/test/disputes). This allows you to provide all of the necessary text and images that are appropriate to the [dispute reason](https://docs.stripe.com/disputes/categories) and your counter argument.\n\n## Managing and preventing disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you need help with a dispute, [contact support](https://support.stripe.com/contact).\n\n## Additional resources![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
    "title": "Disputes and fraud | Stripe Documentation",
    "description": "Learn what disputes are, how the process works, and how to prevent them from happening.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/credit_notes/create",
    "markdown": "# Create a credit note | Stripe API Reference\n\nIssue a credit note to adjust the amount of a finalized invoice. For a `status=open` invoice, a credit note reduces its `amount_due`. For a `status=paid` invoice, a credit note does not affect its `amount_due`. Instead, it can result in any combination of the following:\n\n*   Refund: create a new refund (using `refund_amount`) or link an existing refund (using `refund`).\n*   Customer balance credit: credit the customer’s balance (using `credit_amount`) which will be automatically applied to their next invoice when it’s finalized.\n*   Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using `out_of_band_amount`).\n\nFor post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.\n\nYou may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s `pre_payment_credit_notes_amount` or `post_payment_credit_notes_amount` depending on its `status` at the time of credit note creation.\n\n### Parameters\n\n*   ID of the invoice.\n    \n*   Line items that make up the credit note.\n    \n*   The credit note’s memo appears on the credit note PDF.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `duplicate` |\n    | `fraudulent` |\n    | `order_change` |\n    | `product_unsatisfactory` |\n    \n\n### More parameters\n\n*   #### \n    \n    out\\_of\\_band\\_amountinteger\n    \n\n### Returns\n\nReturns a credit note object if the call succeeded.\n\n```\ncurl https://api.stripe.com/v1/credit_notes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d invoice=in_1MxvRkLkdIwHu7ixABNtI99m\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [Update a credit note](https://docs.stripe.com/api/credit_notes/update)\n\nUpdates an existing credit note.\n\n### Parameters\n\n*   Credit note memo.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the updated credit note object if the call succeeded.\n\nPOST /v1/credit\\_notes/:id\n\n```\ncurl https://api.stripe.com/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {    \"order_id\": \"6735\"  },  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [Retrieve a credit note's line items](https://docs.stripe.com/api/credit_notes/lines)\n\nWhen retrieving a credit note, you’ll get a **lines** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of [line\\_item objects](#credit_note_line_item_object).\n\nGET /v1/credit\\_notes/:id/lines\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes/cn_1NPtPy2eZvKYlo2CPaEMGMY8/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/credit_notes/cn_1NPtPy2eZvKYlo2CPaEMGMY8/lines\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/credit_notes/cn_1Nn7fB2eZvKYlo2CuJ0wZBlA/lines\",      \"has_more\": false,      \"data\": [        {          \"id\": \"cnli_1Nn7fB2eZvKYlo2COYgPG88j\",          \"object\": \"credit_note_line_item\",          \"amount\": 799,          \"amount_excluding_tax\": 799,          \"description\": \"My First Invoice Item (created for API docs)\",          \"discount_amount\": 0,          \"discount_amounts\": [],          \"invoice_line_item\": \"il_1Nn7fB2eZvKYlo2C3GKZP9wi\",          \"livemode\": false,          \"quantity\": 1,          \"tax_amounts\": [],          \"tax_rates\": [],          \"type\": \"invoice_line_item\",          \"unit_amount\": null,          \"unit_amount_decimal\": null,          \"unit_amount_excluding_tax\": \"799\"        }      ]    }    {...}    {...}  ],}\n```\n\n## [Retrieve a credit note preview's line items](https://docs.stripe.com/api/credit_notes/preview_lines)\n\nWhen retrieving a credit note preview, you’ll get a **lines** property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\n*   ID of the invoice.\n    \n*   Line items that make up the credit note.\n    \n*   The credit note’s memo appears on the credit note PDF.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `duplicate` |\n    | `fraudulent` |\n    | `order_change` |\n    | `product_unsatisfactory` |\n    \n\n### More parameters\n\n*   #### \n    \n    out\\_of\\_band\\_amountinteger\n    \n\n### Returns\n\nReturns a list of [line\\_item objects](#credit_note_line_item_object).\n\nGET /v1/credit\\_notes/preview/lines\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes/preview/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d invoice=in_1Nn8592eZvKYlo2Ci4yFC46f\n```\n\n```\n{  \"id\": \"cn_1Nn7fB2eZvKYlo2CuJ0wZBlA\",  \"object\": \"credit_note\",  \"amount\": 1451,  \"amount_shipping\": 0,  \"created\": 1693952641,  \"currency\": \"usd\",  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"effective_at\": null,  \"invoice\": \"in_1Nn7fB2eZvKYlo2C7meA67Xp\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1Nn7fB2eZvKYlo2Cp8nLMci9\",        \"object\": \"credit_note_line_item\",        \"amount\": 951,        \"amount_excluding_tax\": 951,        \"description\": \"My First Invoice Item (created for API docs)\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1Nn7fB2eZvKYlo2ChKG2H1tv\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [          {            \"amount\": 152,            \"inclusive\": false,            \"tax_rate\": \"txr_1Nn7fB2eZvKYlo2CcbF7zzmD\",            \"taxability_reason\": null,            \"taxable_amount\": 799          }        ],        \"tax_rates\": [          {            \"id\": \"txr_1Nn7fB2eZvKYlo2CcbF7zzmD\",            \"object\": \"tax_rate\",            \"active\": true,            \"country\": \"DE\",            \"created\": 1693952641,            \"description\": \"VAT Germany\",            \"display_name\": \"VAT\",            \"effective_percentage\": null,            \"inclusive\": false,            \"jurisdiction\": \"DE\",            \"livemode\": false,            \"metadata\": {},            \"percentage\": 19,            \"state\": null,            \"tax_type\": \"vat\"          }        ],        \"type\": \"invoice_line_item\",        \"unit_amount\": null,        \"unit_amount_decimal\": null,        \"unit_amount_excluding_tax\": \"951\"      },      {        \"id\": \"cnli_1Nn7fB2eZvKYlo2C7OxQLHdz\",        \"object\": \"credit_note_line_item\",        \"amount\": 500,        \"amount_excluding_tax\": 500,        \"description\": \"Service credit\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"custom_line_item\",        \"unit_amount\": 500,        \"unit_amount_decimal\": \"500\",        \"unit_amount_excluding_tax\": \"500\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1Nn7fB2eZvKYlo2CuJ0wZBlA/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"ABCD-1234-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1032D82eZvKYlo2C/cnst_123456789/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1451,  \"subtotal_excluding_tax\": 1451,  \"tax_amounts\": [    {      \"amount\": 152,      \"inclusive\": false,      \"tax_rate\": \"txr_1Nn7fB2eZvKYlo2CcbF7zzmD\",      \"taxability_reason\": null,      \"taxable_amount\": 799    }  ],  \"total\": 1451,  \"total_excluding_tax\": null,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [Retrieve a credit note](https://docs.stripe.com/api/credit_notes/retrieve)\n\nRetrieves the credit note object with the given identifier.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a credit note object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```",
    "title": "Create a credit note | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/taxes/migration",
    "markdown": "# Migrate to Stripe Tax | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to migrate existing subscriptions to Stripe Tax.\n\n[Stripe Tax](https://docs.stripe.com/tax) allows you to calculate the tax to collect on your transactions. It computes the taxes and adds them to the payment automatically, based on the product and the customer location.\n\nWhen you integrate with Stripe Tax, you need to update existing subscriptions to make sure that tax is automatically calculated going forward. This guide assumes that you have existing, active subscriptions. Otherwise, see how to automatically [collect tax on new subscriptions](https://docs.stripe.com/billing/taxes/collect-taxes) or learn more [about subscriptions](https://docs.stripe.com/billing/subscriptions/overview).\n\nUse the following high-level steps to update your active subscriptions to Stripe Tax:\n\n1.  [Activate Stripe Tax](#activate) if you haven’t already.\n2.  [Check customer locations](#customer-locations). In some cases, you might need to update the locations.\n3.  [Update products and prices](#products-prices) with tax codes and tax behaviors.\n4.  [Update subscriptions](#subs) to automatically calculate taxes on future [invoices](https://docs.stripe.com/api/invoices \"invoices\").\n5.  [Confirm](#confirm) that you’ve updated the subscriptions correctly.\n\n#### Interested in using Stripe Tax and currency conversion?\n\nWe’re developing a Payment Element integration that manages tax, discounts, shipping, and currency conversion. Read the [Build a checkout page](https://docs.stripe.com/checkout/custom-checkout) guide to learn more.\n\n[](#activate)\n\nFirst, you need to activate Stripe Tax. Read the [set up guide](https://docs.stripe.com/tax/set-up) to learn how.\n\n[](#customer-locations)\n\nTo correctly calculate tax, we need to know the customer’s location. After activating Stripe Tax, you can check their tax location status by using the Dashboard, the API, or Dashboard exports.\n\nTo check a customer’s tax location status through the Dashboard, go to the [Customers page](https://dashboard.stripe.com/customers), select the customer, and expand the customer’s details. The tax location status (`automatic_tax`) has four possible statuses:\n\n| Status | Description | Possible Action |\n| --- | --- | --- |\n| Valid (`supported`) | Automatic tax fully supported. | No further action required. |\n| Unrecognized location (`unrecognized_location`) | The address isn’t valid for determining a tax location. | Ask the customer for an updated address and set [`customer.address`](https://docs.stripe.com/api/customers/update#update_customer-address) to the new value. You can update the value through the API or Dashboard by editing the customer’s details. |\n| Not registered (`not_collecting`) | The address is recognized and resolved to a location that you haven’t set up a collection location for. | The action to take depends on your [tax obligations](https://docs.stripe.com/tax/monitoring). If you proceed, Stripe Tax doesn’t assess any taxes. If you want it to assess tax, [add an active registration](https://docs.stripe.com/tax/registering) for the jurisdiction the customer is based in. |\n| `failed` | An [error](https://docs.stripe.com/error-codes) occurred with Stripe’s servers. This is rare. | Try the request again or contact Stripe support for additional assistance. |\n\nIn case the `status=unrecognized_location` you need to update the customer location with [an address that Stripe Tax can use](https://docs.stripe.com/tax/customer-locations). In the Dashboard, you can go into the [Customers page](https://dashboard.stripe.com/customers), select the customer, and change its billing or shipping address under Details.\n\nFor more information on which customer address is valid, how they’re used, or how to handle errors, see [Collect customer addresses](https://docs.stripe.com/tax/customer-locations).\n\n[](#products-prices)\n\nYour products and prices use the default tax behavior you assigned when activating Stripe Tax. If you’d prefer to update active products and prices to calculate tax independently, set a tax\\_code and tax\\_behavior. See the full list of [available tax codes](https://docs.stripe.com/tax/tax-codes) and the [guide for setting up](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior) tax codes and tax behavior for more information. For more information about [products and prices](https://docs.stripe.com/billing/taxes/collect-taxes#product-and-price-setup), including how to decide whether a price should be inclusive or exclusive, see the [Tax Setup FAQ](https://docs.stripe.com/tax/faq#set-up).\n\n### Update products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFirst, update any existing products with a `tax_code`. If you don’t explicitly define a `tax_code` on your product, Stripe Tax uses the preset product tax code from your settings.\n\nHere’s how to update a Product with a `tax_code` using the API:\n\n`curl https://api.stripe.com/v1/products/`\n\n`{{PRODUCT_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d tax_code=  txcd_10000000`\n\nTo update a Product with a `tax_code` in the Dashboard, go to the [Products page](https://dashboard.stripe.com/products?active=true), select a product to edit and, in the product information page, choose the tax code from the drop-down menu.\n\n### Update prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNext, update the tax behavior for your prices.\n\n#### Common mistake\n\nYou can’t change `tax_behavior` after it’s been set to one of `exclusive` or `inclusive`. If you want to change the tax behavior of a price, you need to create a new price with the desired behavior, and archive the old price.\n\nHere’s how to update a price with the API:\n\n`curl https://api.stripe.com/v1/prices/`\n\n`{{PRICE_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d tax_behavior=exclusive`\n\nTo update a price with the Dashboard, go to the [products page](https://dashboard.stripe.com/products), select the product with the price you want to update, and select additional options in the price information section. In the **Include tax in price** drop-down menu, select the behavior you want to associate with the price.\n\n[](#subs)\n\nWith your customers, products, and prices updated, you’re ready to update existing subscriptions.\n\n#### Caution\n\nGet the list of subscriptions that need to be updated from the [subscriptions page in the Dashboard](https://dashboard.stripe.com/subscriptions). Click **Filter**, check **Automatic tax** and select **Disabled** to display only subscriptions that don’t have automatic tax enabled. Alternatively, you can export all filtered subscriptions to view them as a CSV file. To do this, click **Export** and select **All** as the **Date range**.\n\nHow you update the subscriptions depends on their state:\n\n*   If your subscriptions [don’t have existing tax rates](#no-tax-rates), you only need to enable automatic tax.\n*   If your subscriptions have [existing tax rates](#existing-tax-rates) (at either the subscription or line-item level), you need to clear out any existing tax rates and enable automatic tax. To avoid creating prorated items, you can schedule this update.\n*   If your subscriptions have [subscriptions schedules](#existing-subscription-schedules), you need to remove instances of `automatic_tax[enabled]=false` in the subscription schedule plans.\n\n### Update subscriptions with no existing tax rates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo [update subscriptions](https://docs.stripe.com/api/subscriptions/update) that have no [tax rates](https://docs.stripe.com/billing/taxes/tax-rates) configured, set [`automatic_tax.enabled`](https://docs.stripe.com/api/subscriptions/update#update_subscription-automatic_tax) to `true`.\n\n`curl https://api.stripe.com/v1/subscriptions/`\n\n`{{SUBSCRIPTION_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"automatic_tax[enabled]\"=true`\n\nSetting `automatic_tax.enabled=true` activates automatic tax calculations for all subsequent invoices created for that subscription.\n\nTo do this through the Dashboard, update the subscription and turn on the **Calculate tax automatically** option.\n\n### Update subscriptions with existing tax rates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo update subscriptions with [tax rates](https://docs.stripe.com/billing/taxes/tax-rates) set at the [subscription level](https://docs.stripe.com/billing/taxes/collect-taxes?tax-calculation=tax-rates#static-configuration), you need to remove the tax rates before enabling `automatic_tax`. When you make the update:\n\n*   Pass an empty string in the [`default_tax_rates`](https://docs.stripe.com/api/subscriptions/update#update_subscription-default_tax_rates) and [`tax_rates`](https://docs.stripe.com/api/subscriptions/object#subscription_object-items-data-tax_rates) fields for each subscription [`item`](https://docs.stripe.com/api/subscriptions/object#subscription_object-items). Doing this clears out tax rates set at both the subscription (`default_tax_rates`) and line-item (`tax_rates`) levels.\n*   Set [`automatic_tax.enabled`](https://docs.stripe.com/api/subscriptions/update#update_subscription-automatic_tax) to `true`.\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`subscription = Stripe::Subscription.retrieve('{{SUBSCRIPTION_ID}}') Stripe::Subscription.update(   subscription.id,   {     automatic_tax: { enabled: true },     # Removes existing tax_rates for each item in the subscription     items: subscription.items.data.map {|item| {id: item.id, tax_rates: ''}},     default_tax_rates: ''   } )`\n\nTo make this update through the Dashboard, edit the subscription, then enable the **calculate tax automatically** option. The Dashboard automatically calculates tax going forward and removes any existing tax rates. If you haven’t updated your prices to set `tax_behavior`, the Dashboard prompts you to update any missing details before you can update the subscription.\n\n### Update Subscriptions with subscription schedules ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you need to collect tax and any of your subscriptions include a subscription schedule that sets `automatic_tax[enabled]=false`, you must remove this parameter. To do this, update all phases of the subscription’s schedule by removing `automatic_tax[enabled]=false` and setting `default_settings[automatic_tax][enabled]=true`.\n\nWhen you update a subscription schedule, you need to pass in all current and future phases. To do this, verify the set parameters, then enable Stripe Tax in the subscription schedule.\n\n`curl https://api.stripe.com/v1/subscription_schedules/`\n\n`{{SUBSCRIPTION_SCHEDULE_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\"`\n\nTo update the subscription schedule after you obtain it, remove the `automatic_tax[enabled]=false` parameter, and pass down the other phases and parameters:\n\n`curl https://api.stripe.com/v1/subscription_schedules/`\n\n`{{SUBSCRIPTION_SCHEDULE_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"phases[0][items][0][price]\"=price_1GqNdGAJVYItwOKqEHb \\  -d \"phases[0][items][0][quantity]\"=1 \\  -d \"phases[0][start_date]\"=1577865600 \\  -d \"phases[0][end_date]\"=1578038400 \\  -d \"phases[1][items][0][price]\"=price_1GqNdGAJVYItwOKqEHb \\  -d \"phases[1][items][0][quantity]\"=2 \\  -d \"phases[1][start_date]\"=1578038400 \\  -d \"phases[1][end_date]\"=1580544000 \\  -d \"default_settings[automatic_tax][enabled]\"=true`\n\n#### Schedule the update![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you want to avoid creating a prorated item, you can schedule the update to occur at the start of the next cycle.\n\nYou can currently only schedule subscription updates with the API:\n\n`# Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`subscription = Stripe::Subscription.retrieve(   '{{SUBSCRIPTION_ID}}', ) schedule = Stripe::SubscriptionSchedule.create({   from_subscription: subscription.id }) Stripe::SubscriptionSchedule.update(   schedule.id,   {     end_behavior: 'release',     phases: [       # The first phase contains items for the       # latest subscription invoice       {         items: [           # Prices and tax_rates for each item           {             price: '{{PRICE_ID}}',             tax_rates: [               '{{TAX_RATE_ID}}'             ]           }         ],         default_tax_rates: ['{{TAX_RATE_ID}}'],         start_date: subscription.current_period_start,         end_date: subscription.current_period_end       },       # The second phase removes manual tax rates and enables       # automatic tax calculation       {         items: [           # Prices for each item with tax_rates: ''           {             price: '{{PRICE_ID}}',             tax_rates: ''           }         ],         default_tax_rates: '',         automatic_tax: {enabled: true},         iterations: 1       }     ]   } )`\n\n[](#confirm)\n\nTo confirm that you’ve properly updated your subscriptions, retrieve the [upcoming invoice](https://docs.stripe.com/api/invoices/upcoming) of a subscription and inspect the results of its tax calculation.\n\nYou can retrieve the tax amounts from the [`tax`](https://docs.stripe.com/api/invoices/object#invoice_object-tax) and [`total_tax_amounts`](https://docs.stripe.com/api/invoices/object#invoice_object-total_tax_amounts) fields on the upcoming invoice, and from the per-line-item [`tax_amounts`](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-tax_amounts) fields. The invoice has an [`automatic_tax`](https://docs.stripe.com/api/invoices/object#invoice_object-automatic_tax) field showing the status of the calculation, with one of three possible statuses:\n\n| Status | Description | Possible Action |\n| --- | --- | --- |\n| `complete` | Stripe Tax has successfully assessed the taxes on the payment. | You can retrieve the tax amounts from the tax and `total_tax_amounts` fields on the latest invoice, and from the per-line item `tax_amounts` fields. |\n| `requires_location_inputs` | Stripe Tax didn’t have enough information to determine the customer’s location and was unable to assess taxes. | Collect more information from a customer (such as a full street address) and update the [`customer.address`](https://docs.stripe.com/api/invoices/object#invoice_object-customer_address) field. |\n| `failed` | Internal Stripe error. | Try the request again or contact Stripe support for additional assistance. |\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Collect taxes for recurring payments](https://docs.stripe.com/billing/taxes/collect-taxes?tax-calculation=stripe-tax)\n*   [Products, prices, tax codes, and tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior)",
    "title": "Migrate to Stripe Tax | Stripe Documentation",
    "description": "Learn how to migrate existing subscriptions to Stripe Tax.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payment_intents/capture",
    "markdown": "# Capture a PaymentIntent | Stripe API Reference\n\nCapture the funds of an existing uncaptured PaymentIntent when its status is `requires_capture`.\n\nUncaptured PaymentIntents are cancelled a set number of days (7 by default) after their creation.\n\nLearn more about [separate authorization and capture](https://docs.stripe.com/payments/capture-later).\n\n### Parameters\n\n*   The amount to capture from the PaymentIntent, which must be less than or equal to the original amount. Any additional amount is automatically refunded. Defaults to the full `amount_capturable` if it’s not provided.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n*   #### \n    \n    statement\\_descriptor\\_suffixstring\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns a PaymentIntent object with `status=\"succeeded\"` if the PaymentIntent is capturable. Returns an error if the PaymentIntent isn’t capturable or if an invalid amount to capture is provided.\n\nPOST /v1/payment\\_intents/:id/capture\n\n```\ncurl -X POST https://api.stripe.com/v1/payment_intents/pi_3MrPBM2eZvKYlo2C1TEMacFD/capture \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pi_3MrPBM2eZvKYlo2C1TEMacFD\",  \"object\": \"payment_intent\",  \"amount\": 1000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 1000,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": null,  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MrPBM2eZvKYlo2C1TEMacFD_secret_9J35eTzWlxVmfbbQhmkNbewuL\",  \"confirmation_method\": \"automatic\",  \"created\": 1524505326,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"One blue fish\",  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": \"ch_1EXUPv2eZvKYlo2CStIqOmbY\",  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": \"pm_1EXUPv2eZvKYlo2CUkqZASBe\",  \"payment_method_options\": {},  \"payment_method_types\": [    \"card\"  ],  \"processing\": null,  \"receipt_email\": null,  \"redaction\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"succeeded\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Confirm a PaymentIntent](https://docs.stripe.com/api/payment_intents/confirm)\n\nConfirm that your customer intends to pay with current or provided payment method. Upon confirmation, the PaymentIntent will attempt to initiate a payment. If the selected payment method requires additional authentication steps, the PaymentIntent will transition to the `requires_action` status and suggest additional actions via `next_action`. If payment fails, the PaymentIntent transitions to the `requires_payment_method` status or the `canceled` status if the confirmation limit is reached. If payment succeeds, the PaymentIntent will transition to the `succeeded` status (or `requires_capture`, if `capture_method` is set to `manual`). If the `confirmation_method` is `automatic`, payment may be attempted using our [client SDKs](https://docs.stripe.com/stripe-js/reference#stripe-handle-card-payment) and the PaymentIntent’s [client\\_secret](#payment_intent_object-client_secret). After `next_action`s are handled by the client, no additional confirmation is required to complete the payment. If the `confirmation_method` is `manual`, all payment attempts must be initiated using a secret key. If any actions are required for the payment, the PaymentIntent will return to the `requires_confirmation` state after those actions are completed. Your server needs to then explicitly re-confirm the PaymentIntent to initiate the next payment attempt.\n\n### Parameters\n\n*   ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://docs.stripe.com/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent.\n    \n*   Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).\n    \n*   Indicates that you intend to make future payments with this PaymentIntent’s payment method.\n    \n    Providing this parameter will [attach the payment method](https://docs.stripe.com/payments/save-during-payment) to the PaymentIntent’s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://docs.stripe.com/api/payment_methods/attach) to a Customer after the transaction completes.\n    \n    When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://docs.stripe.com/strong-customer-authentication).\n    \n    If `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `off_session`<br><br>Use `off_session` if your customer may or may not be present in your checkout flow. |\n    | `on_session`<br><br>Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. |\n    \n*   Shipping information for this PaymentIntent.\n    \n\n### More parameters\n\n*   #### \n    \n    capture\\_methodenumsecret key only\n    \n\n*   #### \n    \n    error\\_on\\_requires\\_actionboolean\n    \n*   #### \n    \n    mandatestringsecret key only\n    \n\n*   #### \n    \n    off\\_sessionboolean | stringsecret key only\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_optionsobjectsecret key only\n    \n*   #### \n    \n    payment\\_method\\_typesarray of stringssecret key only\n    \n*   #### \n    \n    radar\\_optionsobjectsecret key only\n    \n\n### Returns\n\nReturns the resulting PaymentIntent after all possible transitions are applied.\n\nPOST /v1/payment\\_intents/:id/confirm\n\n```\ncurl https://api.stripe.com/v1/payment_intents/pi_3MtweELkdIwHu7ix0Dt0gF2H/confirm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_method=pm_card_visa \\  --data-urlencode return_url=\"https://www.example.com\"\n```\n\n```\n{  \"id\": \"pi_3MtweELkdIwHu7ix0Dt0gF2H\",  \"object\": \"payment_intent\",  \"amount\": 2000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 2000,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": {    \"enabled\": true  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MtweELkdIwHu7ix0Dt0gF2H_secret_ALlpPMIZse0ac8YzPxkMkFgGC\",  \"confirmation_method\": \"automatic\",  \"created\": 1680802258,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": \"ch_3MtweELkdIwHu7ix05lnLAFd\",  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": \"pm_1MtweELkdIwHu7ixxrsejPtG\",  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    },    \"link\": {      \"persistent_token\": null    }  },  \"payment_method_types\": [    \"card\",    \"link\"  ],  \"processing\": null,  \"receipt_email\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"source\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"succeeded\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Increment an authorization](https://docs.stripe.com/api/payment_intents/increment_authorization)\n\nPerform an incremental authorization on an eligible [PaymentIntent](https://docs.stripe.com/api/payment_intents/object). To be eligible, the PaymentIntent’s status must be `requires_capture` and [incremental\\_authorization\\_supported](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) must be `true`.\n\nIncremental authorizations attempt to increase the authorized amount on your customer’s card to the new, higher `amount` provided. Similar to the initial authorization, incremental authorizations can be declined. A single PaymentIntent can call this endpoint multiple times to further increase the authorized amount.\n\nIf the incremental authorization succeeds, the PaymentIntent object returns with the updated [amount](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount). If the incremental authorization fails, a [card\\_declined](https://docs.stripe.com/error-codes#card-declined) error returns, and no other fields on the PaymentIntent or Charge update. The PaymentIntent object remains capturable for the previously authorized amount.\n\nEach PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines. After it’s captured, a PaymentIntent can no longer be incremented.\n\nLearn more about [incremental authorizations](https://docs.stripe.com/terminal/features/incremental-authorizations).\n\n### Parameters\n\n*   The updated total amount that you intend to collect from the cardholder. This amount must be greater than the currently authorized amount.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    For card charges, use [statement\\_descriptor\\_suffix](https://stripe.com/docs/payments/account/statement-descriptors#dynamic). Otherwise, you can use this value as the complete description of a charge on your customers’ statements. It must contain at least one letter and be 1–22 characters long.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns a PaymentIntent object with the updated amount if the incremental authorization succeeds. Returns an error if the incremental authorization failed or the PaymentIntent isn’t eligible for incremental authorizations.\n\nPOST /v1/payment\\_intents/:id/increment\\_authorization\n\n```\ncurl https://api.stripe.com/v1/payment_intents/pi_1DtBRR2eZvKYlo2CmCVxxvd7/increment_authorization \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=2099\n```\n\n```\n{  \"id\": \"pi_1DtBRR2eZvKYlo2CmCVxxvd7\",  \"object\": \"payment_intent\",  \"amount\": 2099,  \"amount_capturable\": 2099,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": null,  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"manual\",  \"client_secret\": \"pi_1DtBRR2eZvKYlo2CmCVxxvd7_secret_cWsUkvyTOjhLKh5Wxu61nYc0i\",  \"confirmation_method\": \"automatic\",  \"created\": 1680196960,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": \"ch_3MrPBM2eZvKYlo2C1CEBUD4A\",  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": \"pm_1MrPBL2eZvKYlo2CaNa8L11Z\",  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"processing\": null,  \"receipt_email\": null,  \"redaction\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"requires_capture\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Reconcile a customer\\_balance PaymentIntent](https://docs.stripe.com/api/payment_intents/apply_customer_balance)\n\nManually reconcile the remaining amount for a `customer_balance` PaymentIntent.\n\n### Parameters\n\n*   Amount that you intend to apply to this PaymentIntent from the customer’s cash balance.\n    \n    A positive integer representing how much to charge in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) (for example, 100 cents to charge 1 USD or 100 to charge 100 JPY, a zero-decimal currency).\n    \n    The maximum amount is the amount of the PaymentIntent.\n    \n    When you omit the amount, it defaults to the remaining amount requested on the PaymentIntent.\n    \n\n### Returns\n\nReturns a PaymentIntent object.\n\nPOST /v1/payment\\_intents/:id/apply\\_customer\\_balance\n\n```\ncurl -X POST https://api.stripe.com/v1/payment_intents/pi_1GszwY2eZvKYlo2CohCEmT6b/apply_customer_balance \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pi_1GszwY2eZvKYlo2CohCEmT6b\",  \"object\": \"payment_intent\",  \"amount\": 1000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": null,  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_1GszwY2eZvKYlo2CohCEmT6b_secret_1jQJzqkrQvx4BpwI5hn6WSEO5\",  \"confirmation_method\": \"automatic\",  \"created\": 1591918582,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"Created by stripe.com/docs demo\",  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": null,  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"processing\": null,  \"receipt_email\": null,  \"redaction\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"requires_payment_method\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Search PaymentIntents](https://docs.stripe.com/api/payment_intents/search)\n\nSearch for PaymentIntents you’ve previously created using Stripe’s [Search Query Language](https://docs.stripe.com/search#search-query-language). Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.\n\n### Parameters\n\n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next\\_page value returned in a previous response to request subsequent results.\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` PaymentIntents. If no objects match the query, the resulting array will be empty. See the related guide on [expanding properties in lists](https://docs.stripe.com/expand#lists).\n\nGET /v1/payment\\_intents/search\n\n```\ncurl -G https://api.stripe.com/v1/payment_intents/search \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d query=\"amount>1000\"\n```\n\n```\n{  \"object\": \"search_result\",  \"url\": \"/v1/payment_intents/search\",  \"has_more\": false,  \"data\": [    {      \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",      \"object\": \"payment_intent\",      \"amount\": 2000,      \"amount_capturable\": 0,      \"amount_details\": {        \"tip\": {}      },      \"amount_received\": 0,      \"application\": null,      \"application_fee_amount\": null,      \"automatic_payment_methods\": {        \"enabled\": true      },      \"canceled_at\": null,      \"cancellation_reason\": null,      \"capture_method\": \"automatic\",      \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",      \"confirmation_method\": \"automatic\",      \"created\": 1680800504,      \"currency\": \"usd\",      \"customer\": null,      \"description\": null,      \"invoice\": null,      \"last_payment_error\": null,      \"latest_charge\": null,      \"livemode\": false,      \"metadata\": {},      \"next_action\": null,      \"on_behalf_of\": null,      \"payment_method\": null,      \"payment_method_options\": {        \"card\": {          \"installments\": null,          \"mandate_options\": null,          \"network\": null,          \"request_three_d_secure\": \"automatic\"        },        \"link\": {          \"persistent_token\": null        }      },      \"payment_method_types\": [        \"card\",        \"link\"      ],      \"processing\": null,      \"receipt_email\": null,      \"review\": null,      \"setup_future_usage\": null,      \"shipping\": null,      \"source\": null,      \"statement_descriptor\": null,      \"statement_descriptor_suffix\": null,      \"status\": \"requires_payment_method\",      \"transfer_data\": null,      \"transfer_group\": null    }    {...}    {...}  ],}\n```",
    "title": "Capture a PaymentIntent | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoices/mark_uncollectible",
    "markdown": "# Mark an invoice as uncollectible\n\nMarking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the invoice object.\n\nPOST /v1/invoices/:id/mark\\_uncollectible\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtG0nLkdIwHu7ixAaUw3Cb4/mark_uncollectible \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtG0nLkdIwHu7ixAaUw3Cb4\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 599,  \"amount_paid\": 0,  \"amount_remaining\": 599,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680638365,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZw0zvTyquTfF\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [    {      \"type\": \"eu_vat\",      \"value\": \"DE123456789\"    },    {      \"type\": \"eu_vat\",      \"value\": \"DE123456781\"    }  ],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"il_1MtG0nLkdIwHu7ix3eCoIIw7\",        \"object\": \"line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"currency\": \"usd\",        \"description\": \"My First Invoice Item (created for API docs)\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1MtG0nLkdIwHu7ixDqfiUgg8\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1680638365,          \"start\": 1680638365        },        \"price\": {          \"id\": \"price_1Mr89PLkdIwHu7ixf5QhiWm2\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1680131491,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NcMtLgctyqlJDC\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 1099,          \"unit_amount_decimal\": \"1099\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/invoices/in_1MtG0nLkdIwHu7ixAaUw3Cb4/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680638365,  \"period_start\": 1680638365,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": -500,  \"statement_descriptor\": null,  \"status\": \"uncollectible\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax\": null,  \"test_clock\": null,  \"total\": 1099,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 1099,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": null,  \"closed\": true,  \"forgiven\": true}\n```\n\n## [Pay an invoice](https://docs.stripe.com/api/invoices/pay)\n\nStripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns the invoice object.\n\nPOST /v1/invoices/:id/pay\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/pay \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ix6PgS6g8S\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": true,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"send_invoice\",  \"created\": 1680641304,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZw0zvTyquTfF\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": 1681246104,  \"ending_balance\": 0,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": \"https://invoice.stripe.com/i/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3dVBYNnF0dGlvdXRubGVjSXVOOWhiVWpmUktPLDcxMTgyMTA10200x7P2wMSm?s=ap\",  \"invoice_pdf\": \"https://pay.stripe.com/invoice/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3dVBYNnF0dGlvdXRubGVjSXVOOWhiVWpmUktPLDcxMTgyMTA10200x7P2wMSm/pdf?s=ap\",  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": \"9545A614-0001\",  \"on_behalf_of\": null,  \"paid\": true,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680641304,  \"period_start\": 1680641304,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"paid\",  \"status_transitions\": {    \"finalized_at\": 1680641304,    \"marked_uncollectible_at\": null,    \"paid_at\": 1680641304,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680641304}\n```\n\n## [Search invoices](https://docs.stripe.com/api/invoices/search)\n\nSearch for invoices you’ve previously created using Stripe’s [Search Query Language](https://docs.stripe.com/search#search-query-language). Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.\n\n### Parameters\n\n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next\\_page value returned in a previous response to request subsequent results.\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` invoices. If no objects match the query, the resulting array will be empty. See the related guide on [expanding properties in lists](https://docs.stripe.com/expand#lists).\n\n```\ncurl -G https://api.stripe.com/v1/invoices/search \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d query=\"total<1\"\n```\n\n```\n{  \"object\": \"search_result\",  \"url\": \"/v1/invoices/search\",  \"has_more\": false,  \"data\": [    {      \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",      \"object\": \"invoice\",      \"account_country\": \"US\",      \"account_name\": \"Stripe Docs\",      \"account_tax_ids\": null,      \"amount_due\": 0,      \"amount_paid\": 0,      \"amount_remaining\": 0,      \"amount_shipping\": 0,      \"application\": null,      \"application_fee_amount\": null,      \"attempt_count\": 0,      \"attempted\": false,      \"auto_advance\": false,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null,        \"status\": null      },      \"billing_reason\": \"manual\",      \"charge\": null,      \"collection_method\": \"charge_automatically\",      \"created\": 1680644467,      \"currency\": \"usd\",      \"custom_fields\": null,      \"customer\": \"cus_NeZwdNtLEOXuvB\",      \"customer_address\": null,      \"customer_email\": \"jennyrosen@example.com\",      \"customer_name\": \"Jenny Rosen\",      \"customer_phone\": null,      \"customer_shipping\": null,      \"customer_tax_exempt\": \"none\",      \"customer_tax_ids\": [],      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"discounts\": [],      \"due_date\": null,      \"ending_balance\": null,      \"footer\": null,      \"from_invoice\": null,      \"hosted_invoice_url\": null,      \"invoice_pdf\": null,      \"issuer\": {        \"type\": \"self\"      },      \"last_finalization_error\": null,      \"latest_revision\": null,      \"lines\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"      },      \"livemode\": false,      \"metadata\": {},      \"next_payment_attempt\": null,      \"number\": null,      \"on_behalf_of\": null,      \"paid\": false,      \"paid_out_of_band\": false,      \"payment_intent\": null,      \"payment_settings\": {        \"default_mandate\": null,        \"payment_method_options\": null,        \"payment_method_types\": null      },      \"period_end\": 1680644467,      \"period_start\": 1680644467,      \"post_payment_credit_notes_amount\": 0,      \"pre_payment_credit_notes_amount\": 0,      \"quote\": null,      \"receipt_number\": null,      \"rendering_options\": null,      \"shipping_cost\": null,      \"shipping_details\": null,      \"starting_balance\": 0,      \"statement_descriptor\": null,      \"status\": \"draft\",      \"status_transitions\": {        \"finalized_at\": null,        \"marked_uncollectible_at\": null,        \"paid_at\": null,        \"voided_at\": null      },      \"subscription\": null,      \"subtotal\": 0,      \"subtotal_excluding_tax\": 0,      \"tax\": null,      \"test_clock\": null,      \"total\": 0,      \"total_discount_amounts\": [],      \"total_excluding_tax\": 0,      \"total_tax_amounts\": [],      \"transfer_data\": null,      \"webhooks_delivered_at\": 1680644467    }    {...}    {...}  ],}\n```\n\n## [Send an invoice for manual payment](https://docs.stripe.com/api/invoices/send)\n\nStripe will automatically send invoices to customers according to your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.\n\nRequests made in test-mode result in no emails being sent, despite sending an `invoice.sent` event.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the invoice object.\n\nPOST /v1/invoices/:id/send\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ixJlveR2DO/send \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ixJlveR2DO\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": true,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"send_invoice\",  \"created\": 1680641304,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwvqcz9Sh2uw\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": 1681246104,  \"ending_balance\": 0,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": \"https://invoice.stripe.com/i/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3SDR0Q1Q4U1N0YkVjY2lvSmRoRGppU3E1eGVJLDcxMTgyMTA10200hQIJrDM1?s=ap\",  \"invoice_pdf\": \"https://pay.stripe.com/invoice/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3SDR0Q1Q4U1N0YkVjY2lvSmRoRGppU3E1eGVJLDcxMTgyMTA10200hQIJrDM1/pdf?s=ap\",  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ixJlveR2DO/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": \"3AB9C0CA-0001\",  \"on_behalf_of\": null,  \"paid\": true,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680641304,  \"period_start\": 1680641304,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"paid\",  \"status_transitions\": {    \"finalized_at\": 1680641304,    \"marked_uncollectible_at\": null,    \"paid_at\": 1680641304,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680641304}\n```\n\n## [Void an invoice](https://docs.stripe.com/api/invoices/void)\n\nMark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to [deletion](#delete_invoice), however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.\n\nConsult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to [issue another invoice](#create_invoice) or [credit note](#create_credit_note) instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the voided invoice object.\n\nPOST /v1/invoices/:id/void\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/void \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ix6PgS6g8S\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"void\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```",
    "title": "Mark an invoice as uncollectible | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/customer/tax-ids",
    "markdown": "# Customer Tax IDs | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to store, validate, and render customer tax ID numbers with Stripe Billing.\n\nDisplaying a customer’s tax ID on [invoice](https://docs.stripe.com/api/invoices \"invoices\") documents is a common requirement that you can satisfy by adding tax IDs to customers. A customer’s tax IDs display in the header of invoice and credit note PDFs.\n\n## Supported Tax ID types ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCurrently, Stripe supports the following Tax ID types in the following regions:\n\n| Country | Enum | Description | Example |\n| --- | --- | --- | --- |\n| Andorra | `ad_nrt` | Andorran NRT number | _A-123456-Z_ |\n| Argentina | `ar_cuit` | Argentinian tax ID number | _12-3456789-01_ |\n| Australia | `au_abn` | Australian Business Number (AU ABN) | _12345678912_ |\n| Australia | `au_arn` | Australian Taxation Office Reference Number | _123456789123_ |\n| Austria | `eu_vat` | European VAT number | _ATU12345678_ |\n| Bahrain | `bh_vat` | Bahraini VAT Number | _123456789012345_ |\n| Belgium | `eu_vat` | European VAT number | _BE0123456789_ |\n| Bolivia | `bo_tin` | Bolivian tax ID | _123456789_ |\n| Brazil | `br_cnpj` | Brazilian CNPJ number | _01.234.456/5432-10_ |\n| Brazil | `br_cpf` | Brazilian CPF number | _123.456.789-87_ |\n| Bulgaria | `bg_uic` | Bulgaria Unified Identification Code | _123456789_ |\n| Bulgaria | `eu_vat` | European VAT number | _BG0123456789_ |\n| Canada | `ca_bn` | Canadian BN | _123456789_ |\n| Canada | `ca_gst_hst` | Canadian GST/HST number | _123456789RT0002_ |\n| Canada | `ca_pst_bc` | Canadian PST number (British Columbia) | _PST-1234-5678_ |\n| Canada | `ca_pst_mb` | Canadian PST number (Manitoba) | _123456-7_ |\n| Canada | `ca_pst_sk` | Canadian PST number (Saskatchewan) | _1234567_ |\n| Canada | `ca_qst` | Canadian QST number (Québec) | _1234567890TQ1234_ |\n| Chile | `cl_tin` | Chilean TIN | _12.345.678-K_ |\n| China | `cn_tin` | Chinese tax ID | _123456789012345678_ |\n| Colombia | `co_nit` | Colombian NIT number | _123.456.789-0_ |\n| Costa Rica | `cr_tin` | Costa Rican tax ID | _1-234-567890_ |\n| Croatia | `eu_vat` | European VAT number | _HR12345678912_ |\n| Cyprus | `eu_vat` | European VAT number | _CY12345678Z_ |\n| Czech Republic | `eu_vat` | European VAT number | _CZ1234567890_ |\n| Denmark | `eu_vat` | European VAT number | _DK12345678_ |\n| Dominican Republic | `do_rcn` | Dominican RCN number | _123-4567890-1_ |\n| Ecuador | `ec_ruc` | Ecuadorian RUC number | _1234567890001_ |\n| Egypt | `eg_tin` | Egyptian Tax Identification Number | _123456789_ |\n| El Salvador | `sv_nit` | El Salvadorian NIT number | _1234-567890-123-4_ |\n| Estonia | `eu_vat` | European VAT number | _EE123456789_ |\n| EU  | `eu_oss_vat` | European One Stop Shop VAT number for non-Union scheme | _EU123456789_ |\n| Finland | `eu_vat` | European VAT number | _FI12345678_ |\n| France | `eu_vat` | European VAT number | _FRAB123456789_ |\n| Georgia | `ge_vat` | Georgian VAT | _123456789_ |\n| Germany | `de_stn` | German Tax Number (Steuernummer) | _1234567890_ |\n| Germany | `eu_vat` | European VAT number | _DE123456789_ |\n| Greece | `eu_vat` | European VAT number | _EL123456789_ |\n| Hong Kong | `hk_br` | Hong Kong BR number | _12345678_ |\n| Hungary | `eu_vat` | European VAT number | _HU12345678_ |\n| Hungary | `hu_tin` | Hungary tax number (adószám) | _12345678-1-23_ |\n| Iceland | `is_vat` | Icelandic VAT | _123456_ |\n| India | `in_gst` | Indian GST number | _12ABCDE3456FGZH_ |\n| Indonesia | `id_npwp` | Indonesian NPWP number | _12.345.678.9-012.345_ |\n| Ireland | `eu_vat` | European VAT number | _IE1234567AB_ |\n| Israel | `il_vat` | Israel VAT | _000012345_ |\n| Italy | `eu_vat` | European VAT number | _IT12345678912_ |\n| Japan | `jp_cn` | Japanese Corporate Number (\\*Hōjin Bangō\\*) | _1234567891234_ |\n| Japan | `jp_rn` | Japanese Registered Foreign Businesses' Registration Number (\\*Tōroku Kokugai Jigyōsha no Tōroku Bangō\\*) | _12345_ |\n| Japan | `jp_trn` | Japanese Tax Registration Number (\\*Tōroku Bangō\\*) | _T1234567891234_ |\n| Kazakhstan | `kz_bin` | Kazakhstani Business Identification Number | _123456789012_ |\n| Kenya | `ke_pin` | Kenya Revenue Authority Personal Identification Number | _P000111111A_ |\n| Latvia | `eu_vat` | European VAT number | _LV12345678912_ |\n| Liechtenstein | `li_uid` | Liechtensteinian UID number | _CHE123456789_ |\n| Lithuania | `eu_vat` | European VAT number | _LT123456789123_ |\n| Luxembourg | `eu_vat` | European VAT number | _LU12345678_ |\n| Malaysia | `my_frp` | Malaysian FRP number | _12345678_ |\n| Malaysia | `my_itn` | Malaysian ITN | _C 1234567890_ |\n| Malaysia | `my_sst` | Malaysian SST number | _A12-3456-78912345_ |\n| Malta | `eu_vat` | European VAT number | _MT12345678_ |\n| Mexico | `mx_rfc` | Mexican RFC number | _ABC010203AB9_ |\n| Netherlands | `eu_vat` | European VAT number | _NL123456789B12_ |\n| New Zealand | `nz_gst` | New Zealand GST number | _123456789_ |\n| Nigeria | `ng_tin` | Nigerian Tax Identification Number | _12345678-0001_ |\n| Norway | `no_vat` | Norwegian VAT number | _123456789MVA_ |\n| Norway | `no_voec` | Norwegian VAT on e-commerce number | _1234567_ |\n| Oman | `om_vat` | Omani VAT Number | _OM1234567890_ |\n| Peru | `pe_ruc` | Peruvian RUC number | _12345678901_ |\n| Philippines | `ph_tin` | Philippines Tax Identification Number | _123456789012_ |\n| Poland | `eu_vat` | European VAT number | _PL1234567890_ |\n| Portugal | `eu_vat` | European VAT number | _PT123456789_ |\n| Romania | `eu_vat` | European VAT number | _RO1234567891_ |\n| Romania | `ro_tin` | Romanian tax ID number | _1234567890123_ |\n| Russia | `ru_inn` | Russian INN | _1234567891_ |\n| Russia | `ru_kpp` | Russian KPP | _123456789_ |\n| Saudi Arabia | `sa_vat` | Saudi Arabia VAT | _123456789012345_ |\n| Serbia | `rs_pib` | Serbian PIB number | _123456789_ |\n| Singapore | `sg_gst` | Singaporean GST | _M12345678X_ |\n| Singapore | `sg_uen` | Singaporean UEN | _123456789F_ |\n| Slovakia | `eu_vat` | European VAT number | _SK1234567891_ |\n| Slovenia | `eu_vat` | European VAT number | _SI12345678_ |\n| Slovenia | `si_tin` | Slovenia tax number (davčna številka) | _12345678_ |\n| South Africa | `za_vat` | South African VAT number | _4123456789_ |\n| South Korea | `kr_brn` | Korean BRN | _123-45-67890_ |\n| Spain | `es_cif` | Spanish NIF number (previously Spanish CIF number) | _A12345678_ |\n| Spain | `eu_vat` | European VAT number | _ESA1234567Z_ |\n| Sweden | `eu_vat` | European VAT number | _SE123456789123_ |\n| Switzerland | `ch_uid` | Switzerland UID number | _CHE-123.456.789 HR_ |\n| Switzerland | `ch_vat` | Switzerland VAT number | _CHE-123.456.789 MWST_ |\n| Taiwan | `tw_vat` | Taiwanese VAT | _12345678_ |\n| Thailand | `th_vat` | Thai VAT | _1234567891234_ |\n| Turkey | `tr_tin` | Turkish Tax Identification Number | _0123456789_ |\n| Ukraine | `ua_vat` | Ukrainian VAT | _123456789_ |\n| United Arab Emirates | `ae_trn` | United Arab Emirates TRN | _123456789012345_ |\n| United Kingdom | `eu_vat` | Northern Ireland VAT number | _XI123456789_ |\n| United Kingdom | `gb_vat` | United Kingdom VAT number | _GB123456789_ |\n| United States | `us_ein` | United States EIN | _12-3456789_ |\n| Uruguay | `uy_ruc` | Uruguayan RUC number | _123456789012_ |\n| Venezuela | `ve_rif` | Venezuelan RIF number | _A-12345678-9_ |\n| Vietnam | `vn_tin` | Vietnamese tax ID number | _1234567890_ |\n\n## Validation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou’re responsible for the accuracy of customer information including their tax ID number. The invoice includes the customer tax ID whether or not it’s valid.\n\nStripe provides automatic validation to help determine ​​if the formatting is correct when you add the ID to our system. You can see the results of the validation in the Dashboard along with other customer information, including details returned from the government databases, and the registered name and address. However, we don’t continue to validate them over time. ​​If automatic validation isn’t available, you must manually verify these IDs.\n\n### Australian Business Numbers (ABN) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe automatically validates all Australian Business Numbers (ABNs) with the [Australian Business Register (ABR)](https://abr.gov.au/).\n\n### European Value-Added-Tax (EU VAT) Numbers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe also automatically validates all European Value-Added-Tax (EU VAT) numbers with the [European Commission’s VAT Information Exchange System (VIES)](http://ec.europa.eu/taxation_customs/vies/). This process only validates whether or not the tax ID is valid—you still need to verify the customer’s name and address to make sure it matches the registration information.\n\nVIES validation usually takes only a few seconds, but depending on the availability of various government databases, might take longer. Stripe automatically handles VIES downtime and attempts retries.\n\n### United Kingdom Value-Added-Tax (GB VAT) Numbers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe automatically validates all UK Value-Added-Tax (GB VAT) numbers with the [United Kingdom’s Revenue & Customs (HMRC)](https://www.gov.uk/). This process only validates whether or not the tax ID is valid—you still need to verify the customer’s name and address to make sure it matches the registration information.\n\nHMRC validation usually takes only a few seconds, but depending on the availability, might take longer. Stripe automatically handles HMRC downtime and attempts retries.\n\n### Testing customer tax ID verification ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse these magic tax IDs to trigger certain verification conditions in test mode. The tax ID type must be either the EU VAT Number or Australian Business Number (ABN).\n\n| Number | Type |\n| --- | --- |\n| `000000000` | Successful verification |\n| `111111111` | Unsuccessful verification |\n| `222222222` | Verification remains pending indefinitely |\n\n### Validation webhooks and Dashboard display ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBecause this validation process happens asynchronously, the [customer.tax\\_id.updated](https://docs.stripe.com/api/events/types#event_types-customer.tax_id.updated) webhook notifies you of validation updates.\n\n![Tax validation tooltip in the Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/validation-tooltip.de17a6f286a786e5643e39f43c02a42e.png)\n\nHover over a customer’s EU VAT number to display their VIES information.\n\nThe Dashboard displays the results of the validation within the customer details, including information returned from the government databases, and the registered name and address.\n\nWhen automatic validation isn’t available, you must manually verify these IDs.\n\n## Managing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can manage tax IDs in the Dashboard, with the [customer portal](https://docs.stripe.com/customer-management), or the [Tax ID API](https://docs.stripe.com/api/customer_tax_ids).\n\nTo add a tax ID:\n\n1.  Navigate to the [Customers](https://dashboard.stripe.com/customers) page, and select the applicable customer.\n2.  Click the pencil icon next to **Details** on the right.\n3.  Scroll down to **Tax Status** and **Tax ID** fields.\n4.  Click **Add another ID** to add a row to the tax ID list, where you can select the ID type and value.",
    "title": "Customer Tax IDs | Stripe Documentation",
    "description": "Learn how to store, validate, and render customer tax ID numbers with Stripe Billing.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/taxes/tax-rates",
    "markdown": "# Tax rates and IDs | Stripe DocumentationThe Stripe Docs logo\n\n## Assign tax rates to draft invoices for automatic tax calculation.\n\nIf you’re looking for automated tax calculation where you don’t need to define the rates, use [Stripe Tax](https://docs.stripe.com/tax).\n\nAfter you [create a tax rate](https://docs.stripe.com/billing/taxes/tax-rates), you can assign it:\n\n*   On individual [invoice](https://docs.stripe.com/api/invoices \"invoices\") items.\n*   On the entire subtotal of the invoice.\n\n#### Note\n\nStripe recommends that you assign a tax rate on individual invoice items.\n\n## Set tax rates on individual items ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can set tax rates on individual items using the [Dashboard](https://dashboard.stripe.com/invoices/create) or [API](https://docs.stripe.com/api/tax_rates). You can add up to five tax rates to each line item.\n\nIf you’re creating an invoice through the Dashboard, assign tax rates to individual line items.\n\n## Set default tax rates for the entire invoice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you sell one type of product, or have simple tax needs, you can set a default tax rate on the invoice. Default tax rates apply to all invoice line items. For more complex use cases, you can also set an item-level tax rate that overrides the default tax rate. You can add up to five default tax rates to each invoice.\n\nIf you’re creating an invoice through the Dashboard, you can assign a default tax rate after you add an item.",
    "title": "Tax rates and IDs | Stripe Documentation",
    "description": "Assign tax rates to draft invoices for automatic tax calculation.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/taxes/collect-taxes?tax-calculation=tax-rates",
    "markdown": "# Collect taxes for recurring payments\n\n## Learn how to collect and report taxes for recurring payments.\n\nTo calculate tax for recurring payments, Stripe offers Stripe Tax and Tax Rates.\n\n*   **Stripe Tax**—a paid product that automatically calculates the tax on your transactions without the need to define the rates and rules. Fees only apply after you’ve added at least one location where you’re registered to calculate and remit tax. For more information, see [Stripe Tax](https://docs.stripe.com/tax).\n    \n*   **Tax Rates**—a free feature that allows you to define any number of tax rates for [invoices](https://docs.stripe.com/api/invoices \"invoices\"), [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"), and one-time payments that use Checkout. Stripe won’t create or maintain any tax rates on your behalf. For more information, see [Tax Rates](https://docs.stripe.com/api/tax_rates) and [how to use them](https://docs.stripe.com/billing/taxes/tax-rates).\n    \n\nStripe Tax allows you to calculate the tax to collect on your recurring payments when using Stripe Billing. You can create new subscriptions or add Stripe Tax to existing subscriptions, and examine any potential impact to the amount on your customer’s upcoming invoice. Stripe Tax is natively integrated with Stripe Billing and automatically handles tax calculation with your pricing model (for example, sub-cent, package), prorations, discounts, trials, and more. This guide assumes you’re setting up Stripe Tax and Billing for the first time.\n\nTo update existing subscriptions, reference the [Update existing subscriptions](https://docs.stripe.com/tax/subscriptions/update) guide.\n\n#### Note\n\n[](#get-started)\n\nThis short video shows to how to enable tax collection for recurring payments using hosted integrations like Stripe Checkout.\n\n[\n\n## Update your products and prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#product-and-price-setup)\n\nStripe Tax uses information stored on the [Products](https://docs.stripe.com/api/products \"Products\") and [Prices](https://docs.stripe.com/api/prices \"Prices\") APIs to determine the right rates and rules to apply when calculating tax. Update the products and prices you use to include:\n\n1.  [Tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-behavior): The tax behavior on a price can be either inclusive or exclusive. This determines how the buyer sees the tax. When you set tax behavior to exclusive, it adds tax onto the subtotal amount you specify on your price. This is common in US markets and for B2B sales. When set to inclusive, the amount your buyer pays never changes, even if the tax rate varies. This is common practice for B2C buyers in many markets outside the US.\n    \n    Setting the tax behavior explicitly on a price is optional, if you [set up the default tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#setting-tax-behavior-on-a-price-(optional)) in the [Stripe Tax settings](https://dashboard.stripe.com/login?redirect=%2Fsettings%2Ftax). You can override the default tax behavior setting by setting a tax behavior on a price.\n    \n2.  (Optional) [Tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior): A tax code is a classification of your product or service for Stripe Tax that makes sure we apply the correct tax rate to your transactions. Some examples include “Audio book,” “Gift card,” or “Software as a service.” If you don’t set the tax code, Stripe Tax uses the preset [tax settings](https://dashboard.stripe.com/login?redirect=%2Fsettings%2Ftax).\n    \n\n#### Caution\n\nYou can’t change `tax_behavior` after you set it to one of “exclusive” or “inclusive.” You can create a new price and archive the current one instead.\n\nIf you don’t want to create your products and prices upfront, you can pass `price_data.tax_behavior` and `product_data.tax_code` when creating subscriptions.\n\nLearn more about [Products, prices, tax codes, and tax behavior](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior).\n\nThis guide uses an e-magazine as an example of a product with a recurring payment.\n\nFirst, create a [Price](https://docs.stripe.com/api/prices) on your server with a monthly charge for a new [Product](https://docs.stripe.com/api/products) named “My Product”. For tax purposes you add two extra fields:\n\n*   `tax_behavior` on the Price object. Set to `inclusive` or `exclusive`. This is a required field if you’re using Stripe Tax with Subscriptions.\n*   `tax_code` on the Product object. A Stripe [tax code](https://docs.stripe.com/api/tax_codes), which maps to a product tax code. Consult our [list of tax codes](https://docs.stripe.com/tax/tax-codes) for more information.\n\n`curl https://api.stripe.com/v1/products \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d name=\"My Product\" \\  -d tax_code=  txcd_10000000    `\n\nRecord the product ID for the product. It looks like this:\n\n`{   \"id\": \"prod_H94k5odtwJXMtQ\",`\n\nUse the product ID to create a price.\n\n`curl https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d unit_amount=1000 \\  -d currency=usd \\  -d \"recurring[interval]\"=month \\  -d product=prod_H94k5odtwJXMtQ \\  -d tax_behavior=exclusive`\n\n#### Note\n\nWhen `price_data.tax_behavior` is set to `exclusive`, tax is added onto the subtotal amount you specify. This is common in US markets and for B2B sales. When set to `inclusive`, the amount your buyer pays will never change, even if the tax rate varies. This is common practice for B2C buyers in many markets outside the US.\n\nRecord the price ID so you can use it in subsequent steps. It looks like this:\n\n`{   \"id\": \"price_HGd7M3DV3IMXkC\",`\n\n[](#create-a-customer)\n\nWhen a user subscribes to your website, create a [Customer](https://docs.stripe.com/api/customers) on your server.\n\nWhen creating a customer, you can send us a description and the payment method only. However, the more information you send us, the better the tax calculation can identify the location of your customer and tax them accordingly. We recommend populating the `customer.address` field. To make sure the customer address is valid upon creation, pass `tax[validate_location]='immediately'`. You can also [expand](https://docs.stripe.com/api/expanding_objects) the `tax` field to confirm the location Stripe Tax has identified for your customer.\n\nYou can either add a country and a postal code:\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d description=\"a new user\" \\   --data-urlencode email=\"franklin@example.com\" \\  -d payment_method=pm_1FU2bgBF6ERF9jhEQvwnA7sX \\  -d \"address[country]\"=US \\  -d \"address[postal_code]\"=94103 \\  -d \"tax[validate_location]\"=immediately \\  -d \"expand[]\"=tax`\n\nOr, ideally, add a complete billing address:\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d description=\"a new user\" \\   --data-urlencode email=\"franklin@example.com\" \\  -d payment_method=pm_1FU2bgBF6ERF9jhEQvwnA7sX \\  -d \"address[line1]\"=\"510 Townsend St\" \\  -d \"address[city]\"=\"San Francisco\" \\  -d \"address[state]\"=CA \\  -d \"address[country]\"=US \\  -d \"address[postal_code]\"=94103 \\  -d \"tax[validate_location]\"=immediately \\  -d \"expand[]\"=tax`\n\nOr, only an IP address:\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d description=\"a new user\" \\   --data-urlencode email=\"franklin@example.com\" \\  -d payment_method=pm_1FU2bgBF6ERF9jhEQvwnA7sX \\  -d \"tax[validate_location]\"=immediately \\  -d \"expand[]\"=tax`\n\nThe expanded `tax` field indicates the computed tax location (using the address first, falling back on the given IP address) and if the customer is compatible with automatic tax calculation:\n\n`{   \"id\": \"cus_13729he8947269\",   \"object\": \"customer\",   // ... other fields omitted   \"tax\": {     \"location\": {\"country\": \"US\", \"state\": \"CA\", \"source\": \"billing_address\"},     \"ip_address\": null,     \"automatic_tax\": \"supported\",   } }`\n\nThe value of `automatic_tax` has four possible states:\n\n| Status | Description | Possible Action |\n| --- | --- | --- |\n| `supported` | Automatic tax fully supported. | No further action needed. |\n| `unrecognized_location` | The address isn’t valid for determining a tax location. | Ask customer for an updated address and set `customer.address` to the new value. |\n| `not_collecting` | The address is resolvable to a location for which you haven’t set up a registration. | Depending on your tax obligations, you can either proceed and Stripe Tax won’t assess any taxes, or you might want to [add a new registration](https://docs.stripe.com/tax/registering) for the jurisdiction in which the customer is based. |\n| `failed` | An error occurred with Stripe’s servers. This is rare. | Try the request again, or contact Stripe support for additional assistance. |\n\n[](#create-a-subscription)\n\nNow that the Customer is set up for tax calculation, you can create a Subscription on your server with the customer and their selected plan. To enable automatic tax calculation on subscriptions, set the `automatic_tax[enabled]` parameter to `true`:\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=cus_13729he8947269 \\  -d \"items[0][price]\"=price_HGd7M3DV3IMXkC \\  -d \"items[0][quantity]\"=1 \\  -d \"automatic_tax[enabled]\"=true \\  -d payment_behavior=default_incomplete \\  -d \"expand[0]\"=latest_invoice`\n\nSetting this parameter causes all subsequent [Invoices](https://docs.stripe.com/api/invoices \"invoices\") to be created with automatic tax calculations activated.\n\nTo inspect the results of the latest tax calculation, retrieve the latest Invoice of a Subscription. You can do this by expanding the `latest_invoice` field on any Subscription request, as in the examples above. You can retrieve the tax amounts from the `tax` and `total_tax_amounts` fields on the latest invoice, and also from the per-line item `tax_amounts` fields.\n\nIf Stripe Tax does not have enough information to determine the customer’s location, a [customer\\_tax\\_location\\_invalid](https://docs.stripe.com/error-codes#customer-tax-location-invalid) error is returned.\n\n[](#collect-payment)\n\nTo complete payment of the first [invoice](https://docs.stripe.com/api/invoices \"invoices\") and activate the subscription, use `stripe.confirmCardPayment` when your customer submits the form.\n\n`const btn = document.querySelector('#submit-payment-btn'); btn.addEventListener('click', async (e) => {   e.preventDefault();   const nameInput = document.getElementById('name');    // Create payment method and confirm payment intent.   stripe.confirmCardPayment(clientSecret, {     payment_method: {       card: cardElement,       billing_details: {         name: nameInput.value,       },     }   }).then((result) => {     if(result.error) {       alert(result.error.message);     } else {       // Successful subscription payment     }   }); });`\n\nThe subscription automatically becomes `active` upon payment. See our [Subscriptions with Elements guide](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=elements#collect-payment) for more details on setting up your checkout page.\n\n[\n\n## Handling location validation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handling-location-validation)\n\nStripe Tax requires a [recognized customer location](https://docs.stripe.com/tax/customer-locations) to calculate tax.\n\nWe recommend validating a customer’s `automatic_tax` status before attempting to create or update a subscription or one-off draft [invoice](https://docs.stripe.com/api/invoices \"invoices\") with `automatic_tax[enabled]=true`.\n\nCreating or updating a subscription or invoice behaves the following way when the [customer location is unrecognized](https://docs.stripe.com/tax/customer-locations#handling-errors):\n\n*   Creating or updating a subscription that **causes an immediate** invoice and payment attempt errors with an HTTP status 400 response.\n*   Updating a subscription that **does not cause an immediate** invoice or payment attempt returns an HTTP status 200 response. However, the customer location validation happens later asynchronously when the invoice is finalized. If the customer location is invalid during invoice finalization, Stripe sends a `invoice.finalization_failed` webhook. If you don’t take any action, the invoice remains in a `draft` state, regardless of the value of `auto_advance`.\n*   Creating or updating a draft invoice (either within the short window after a subscription cycle, or for a one-off invoice) updates the invoice’s `automatic_tax.status` to `requires_location_inputs`. You can then either update the customer object to correct the address, and then update or finalize the invoice, or turn off automatic tax calculation. If you don’t take any action, the invoice remains in a `draft` state, regardless of the value of `auto_advance`.\n\nIf tax calculation fails due to an unrecognized customer location on a recurring Subscription Invoice, Stripe sends a `invoice.finalization_failed` webhook when attempting to finalize the invoice. Keep this in mind when updating the location details of your customer.\n\nWe recommend listening for Subscription-related events (for example, invoice finalization failures) with [webhooks](https://docs.stripe.com/billing/subscriptions/webhooks) because most activity happens asynchronously.\n\n[](#preview-price)\n\nStripe also provides an endpoint for previewing an upcoming [invoice](https://docs.stripe.com/api/invoices \"invoices\") for a subscription. You can use this endpoint to preview the initial invoice for a new subscription:\n\n`curl -G https://api.stripe.com/v1/invoices/upcoming \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=cus_13729he8947269 \\  -d \"subscription_items[0][price]\"=price_HGd7M3DV3IMXkC \\  -d \"subscription_items[0][quantity]\"=1 \\  -d \"automatic_tax[enabled]\"=true`\n\nIf you haven’t created a Customer yet, but you’ve collected your customer’s billing information, you can use the `customer_details` parameter in the place of a Customer ID:\n\n`curl -G https://api.stripe.com/v1/invoices/upcoming \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"customer_details[address][line1]\"=\"510 Townsend St\" \\  -d \"customer_details[address][city]\"=\"San Francisco\" \\  -d \"customer_details[address][state]\"=CA \\  -d \"customer_details[address][country]\"=US \\  -d \"customer_details[address][postal_code]\"=94103 \\  -d \"subscription_items[0][price]\"=price_HGd7M3DV3IMXkC \\  -d \"subscription_items[0][quantity]\"=1 \\  -d \"automatic_tax[enabled]\"=true`\n\nWhen previewing the first invoice for a subscription, the subscription ID in the response won’t point to a valid subscription.\n\nYou can also use this endpoint if you have an ongoing subscription without taxes enabled and would like to preview what the upcoming invoice would look like if you were to enable automatic tax.\n\n`curl -G https://api.stripe.com/v1/invoices/upcoming \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=cus_13729he8947269 \\  -d subscription=sub_1JebWO2eZvKYlo2C1WYmWFd3 \\  -d \"automatic_tax[enabled]\"=true`\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Determining customer locations](https://docs.stripe.com/tax/customer-locations)\n*   [Customer tax IDs](https://docs.stripe.com/billing/customer/tax-ids)\n*   [Reporting and filing](https://docs.stripe.com/tax/reports)\n*   [Tax Rates](https://docs.stripe.com/billing/taxes/tax-rates)\n*   [Tax Rates on Invoices](https://docs.stripe.com/invoicing/taxes/tax-rates)",
    "title": "Collect taxes for recurring payments | Stripe Documentation",
    "description": "Learn how to collect and report taxes for recurring payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/tax_rates",
    "markdown": "# Tax Rate | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftax_rates)\n\n## [The Tax Rate object](https://docs.stripe.com/api/tax_rates/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.\n    \n*   The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page.\n    \n*   This specifies if the tax rate is inclusive or exclusive.\n    \n*   #### \n    \n    jurisdictionnullable string\n    \n    The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Tax rate percentage out of 100. For tax calculations with automatic\\_tax\\[enabled\\]=true, this percentage includes the statutory tax rate of non-taxable jurisdictions.\n    \n\n### More attributes\n\n*   #### \n    \n    effective\\_percentagenullable float\n    \n*   #### \n    \n    jurisdiction\\_levelnullable enum\n    \n\n```\n{  \"id\": \"txr_1MzS4RLkdIwHu7ixwvpZ9c2i\",  \"object\": \"tax_rate\",  \"active\": true,  \"country\": null,  \"created\": 1682114687,  \"description\": \"VAT Germany\",  \"display_name\": \"VAT\",  \"inclusive\": false,  \"jurisdiction\": \"DE\",  \"livemode\": false,  \"metadata\": {},  \"percentage\": 16,  \"state\": null,  \"tax_type\": null}\n```\n\n## [Create a tax rate](https://docs.stripe.com/api/tax_rates/create)\n\nCreates a new tax rate.\n\n### Parameters\n\n*   #### \n    \n    display\\_namestringRequired\n    \n    The display name of the tax rate, which will be shown to users.\n    \n*   This specifies if the tax rate is inclusive or exclusive.\n    \n*   This represents the tax rate percent out of 100.\n    \n*   Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.\n    \n\n*   An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.\n    \n*   The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nThe created tax rate object.\n\n```\ncurl https://api.stripe.com/v1/tax_rates \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d display_name=VAT \\  -d description=\"VAT Germany\" \\  -d percentage=16 \\  -d jurisdiction=DE \\  -d inclusive=false\n```\n\n```\n{  \"id\": \"txr_1MzS4RLkdIwHu7ixwvpZ9c2i\",  \"object\": \"tax_rate\",  \"active\": true,  \"country\": null,  \"created\": 1682114687,  \"description\": \"VAT Germany\",  \"display_name\": \"VAT\",  \"inclusive\": false,  \"jurisdiction\": \"DE\",  \"livemode\": false,  \"metadata\": {},  \"percentage\": 16,  \"state\": null,  \"tax_type\": null}\n```\n\n## [Update a tax rate](https://docs.stripe.com/api/tax_rates/update)\n\nUpdates an existing tax rate.\n\n### Parameters\n\n*   Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.\n    \n\n*   An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.\n    \n*   The display name of the tax rate, which will be shown to users.\n    \n*   The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nThe updated tax rate.\n\n```\ncurl https://api.stripe.com/v1/tax_rates/txr_1MzS4RLkdIwHu7ixwvpZ9c2i \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d active=false\n```\n\n```\n{  \"id\": \"txr_1MzS4RLkdIwHu7ixwvpZ9c2i\",  \"object\": \"tax_rate\",  \"active\": false,  \"country\": null,  \"created\": 1682114687,  \"description\": \"VAT Germany\",  \"display_name\": \"VAT\",  \"effective_percentage\": 16,  \"inclusive\": false,  \"jurisdiction\": \"DE\",  \"livemode\": false,  \"metadata\": {},  \"percentage\": 16,  \"state\": null,  \"tax_type\": null}\n```\n\n## [Retrieve a tax rate](https://docs.stripe.com/api/tax_rates/retrieve)\n\nRetrieves a tax rate with the given ID\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an tax rate if a valid tax rate ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/tax_rates/txr_1MzS4RLkdIwHu7ixwvpZ9c2i \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txr_1MzS4RLkdIwHu7ixwvpZ9c2i\",  \"object\": \"tax_rate\",  \"active\": true,  \"country\": null,  \"created\": 1682114687,  \"description\": \"VAT Germany\",  \"display_name\": \"VAT\",  \"inclusive\": false,  \"jurisdiction\": \"DE\",  \"livemode\": false,  \"metadata\": {},  \"percentage\": 16,  \"state\": null,  \"tax_type\": null}\n```",
    "title": "Tax Rate | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/tax_rates/object",
    "markdown": "# The Tax Rate object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.\n    \n*   The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page.\n    \n*   This specifies if the tax rate is inclusive or exclusive.\n    \n*   #### \n    \n    jurisdictionnullable string\n    \n    The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Tax rate percentage out of 100. For tax calculations with automatic\\_tax\\[enabled\\]=true, this percentage includes the statutory tax rate of non-taxable jurisdictions.\n    \n\n### More attributes\n\n*   #### \n    \n    effective\\_percentagenullable float\n    \n*   #### \n    \n    jurisdiction\\_levelnullable enum\n    \n\n```\n{  \"id\": \"txr_1MzS4RLkdIwHu7ixwvpZ9c2i\",  \"object\": \"tax_rate\",  \"active\": true,  \"country\": null,  \"created\": 1682114687,  \"description\": \"VAT Germany\",  \"display_name\": \"VAT\",  \"inclusive\": false,  \"jurisdiction\": \"DE\",  \"livemode\": false,  \"metadata\": {},  \"percentage\": 16,  \"state\": null,  \"tax_type\": null}\n```\n\n## [Create a tax rate](https://docs.stripe.com/api/tax_rates/create)\n\nCreates a new tax rate.\n\n### Parameters\n\n*   #### \n    \n    display\\_namestringRequired\n    \n    The display name of the tax rate, which will be shown to users.\n    \n*   This specifies if the tax rate is inclusive or exclusive.\n    \n*   This represents the tax rate percent out of 100.\n    \n*   Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.\n    \n\n*   An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.\n    \n*   The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nThe created tax rate object.\n\n```\ncurl https://api.stripe.com/v1/tax_rates \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d display_name=VAT \\  -d description=\"VAT Germany\" \\  -d percentage=16 \\  -d jurisdiction=DE \\  -d inclusive=false\n```\n\n```\n{  \"id\": \"txr_1MzS4RLkdIwHu7ixwvpZ9c2i\",  \"object\": \"tax_rate\",  \"active\": true,  \"country\": null,  \"created\": 1682114687,  \"description\": \"VAT Germany\",  \"display_name\": \"VAT\",  \"inclusive\": false,  \"jurisdiction\": \"DE\",  \"livemode\": false,  \"metadata\": {},  \"percentage\": 16,  \"state\": null,  \"tax_type\": null}\n```\n\n## [Update a tax rate](https://docs.stripe.com/api/tax_rates/update)\n\nUpdates an existing tax rate.\n\n### Parameters\n\n*   Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.\n    \n\n*   An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.\n    \n*   The display name of the tax rate, which will be shown to users.\n    \n*   The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nThe updated tax rate.\n\n```\ncurl https://api.stripe.com/v1/tax_rates/txr_1MzS4RLkdIwHu7ixwvpZ9c2i \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d active=false\n```\n\n```\n{  \"id\": \"txr_1MzS4RLkdIwHu7ixwvpZ9c2i\",  \"object\": \"tax_rate\",  \"active\": false,  \"country\": null,  \"created\": 1682114687,  \"description\": \"VAT Germany\",  \"display_name\": \"VAT\",  \"effective_percentage\": 16,  \"inclusive\": false,  \"jurisdiction\": \"DE\",  \"livemode\": false,  \"metadata\": {},  \"percentage\": 16,  \"state\": null,  \"tax_type\": null}\n```\n\n## [Retrieve a tax rate](https://docs.stripe.com/api/tax_rates/retrieve)\n\nRetrieves a tax rate with the given ID\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an tax rate if a valid tax rate ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/tax_rates/txr_1MzS4RLkdIwHu7ixwvpZ9c2i \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txr_1MzS4RLkdIwHu7ixwvpZ9c2i\",  \"object\": \"tax_rate\",  \"active\": true,  \"country\": null,  \"created\": 1682114687,  \"description\": \"VAT Germany\",  \"display_name\": \"VAT\",  \"inclusive\": false,  \"jurisdiction\": \"DE\",  \"livemode\": false,  \"metadata\": {},  \"percentage\": 16,  \"state\": null,  \"tax_type\": null}\n```\n\n## [List all tax rates](https://docs.stripe.com/api/tax_rates/list)\n\nReturns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.\n\n### Parameters\n\n*   Optional flag to filter by tax rates that are either active or inactive (archived).\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` tax rates, starting after tax rate `starting_after`. Each entry in the array is a separate tax rate object. If no more tax rates are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/tax_rates \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/tax_rates\",  \"has_more\": false,  \"data\": [    {      \"id\": \"txr_1MzS4RLkdIwHu7ixwvpZ9c2i\",      \"object\": \"tax_rate\",      \"active\": true,      \"country\": null,      \"created\": 1682114687,      \"description\": \"VAT Germany\",      \"display_name\": \"VAT\",      \"inclusive\": false,      \"jurisdiction\": \"DE\",      \"livemode\": false,      \"metadata\": {},      \"percentage\": 16,      \"state\": null,      \"tax_type\": null    }    {...}    {...}  ],}\n```",
    "title": "The Tax Rate object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/customer_tax_ids",
    "markdown": "# Tax IDs | Stripe API Reference\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [The Tax ID object](https://docs.stripe.com/api/tax_ids/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Two-letter ISO code representing the country of the tax ID.\n    \n*   #### \n    \n    customernullable stringExpandable\n    \n    ID of the customer.\n    \n*   Type of the tax ID, one of `ad_nrt`, `ae_trn`, `ar_cuit`, `au_abn`, `au_arn`, `bg_uic`, `bh_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_uid`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kr_brn`, `kz_bin`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sv_nit`, `th_vat`, `tr_tin`, `tw_vat`, `ua_vat`, `us_ein`, `uy_ruc`, `ve_rif`, `vn_tin`, or `za_vat`. Note that some legacy tax IDs have type `unknown`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `ad_nrt` |\n    | `ae_trn` |\n    | `ar_cuit` |\n    | `au_abn` |\n    | `au_arn` |\n    | `bg_uic` |\n    | `bh_vat` |\n    | `bo_tin` |\n    | `br_cnpj` |\n    | `br_cpf` |\n    | Show 64 more |\n    \n*   Value of the tax ID.\n    \n\n### More attributes\n\n*   #### \n    \n    verificationnullable object\n    \n\n```\n{  \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 123456789,  \"customer\": null,  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": null,  \"owner\": {    \"type\": \"self\",    \"customer\": null  }}\n```\n\n## [Create a Customer tax ID](https://docs.stripe.com/api/tax_ids/customer_create)\n\nCreates a new `tax_id` object for a customer.\n\n### Parameters\n\n*   Type of the tax ID, one of `ad_nrt`, `ae_trn`, `ar_cuit`, `au_abn`, `au_arn`, `bg_uic`, `bh_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_uid`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kr_brn`, `kz_bin`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sv_nit`, `th_vat`, `tr_tin`, `tw_vat`, `ua_vat`, `us_ein`, `uy_ruc`, `ve_rif`, `vn_tin`, or `za_vat`\n    \n*   Value of the tax ID.\n    \n\n### Returns\n\nThe created `tax_id` object.\n\nPOST /v1/customers/:id/tax\\_ids\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=eu_vat \\  -d value=DE123456789\n```\n\n```\n{  \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 1679431857,  \"customer\": \"cus_NZKoSNZZ58qtO0\",  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": {    \"status\": \"pending\",    \"verified_address\": null,    \"verified_name\": null  }}\n```\n\n## [Create a tax ID](https://docs.stripe.com/api/tax_ids/create)\n\nCreates a new account or customer `tax_id` object.\n\n### Parameters\n\n*   Type of the tax ID, one of `ad_nrt`, `ae_trn`, `ar_cuit`, `au_abn`, `au_arn`, `bg_uic`, `bh_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_uid`, `ch_vat`, `cl_tin`, `cn_tin`, `co_nit`, `cr_tin`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kr_brn`, `kz_bin`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sv_nit`, `th_vat`, `tr_tin`, `tw_vat`, `ua_vat`, `us_ein`, `uy_ruc`, `ve_rif`, `vn_tin`, or `za_vat`\n    \n*   Value of the tax ID.\n    \n\n### More parameters\n\n### Returns\n\nThe created `tax_id` object.\n\n```\ncurl https://api.stripe.com/v1/tax_ids \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=eu_vat \\  -d value=DE123456789\n```\n\n```\n{  \"id\": \"txi_1NuMB12eZvKYlo2CMecoWkZd\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 123456789,  \"customer\": null,  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": null,  \"owner\": {    \"type\": \"self\",    \"customer\": null  }}\n```\n\n## [Retrieve a Customer tax ID](https://docs.stripe.com/api/tax_ids/customer_retrieve)\n\nRetrieves the `tax_id` object with the given identifier.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `tax_id` object if a valid identifier was provided.\n\nGET /v1/customers/:id/tax\\_ids/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NZKoSNZZ58qtO0/tax_ids/txi_1MoC8zLkdIwHu7ixEhgWcHzJ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"txi_1MoC8zLkdIwHu7ixEhgWcHzJ\",  \"object\": \"tax_id\",  \"country\": \"DE\",  \"created\": 1679431857,  \"customer\": \"cus_NZKoSNZZ58qtO0\",  \"livemode\": false,  \"type\": \"eu_vat\",  \"value\": \"DE123456789\",  \"verification\": {    \"status\": \"pending\",    \"verified_address\": null,    \"verified_name\": null  }}\n```",
    "title": "Tax IDs | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/modify-tax-forms?method=csv",
    "markdown": "# Update and create 1099 tax forms\n\nStripe automatically generates tax forms for all connected accounts that have transactions in a given tax year. Tax forms are available on the [Tax reporting](https://dashboard.stripe.com/connect/taxes/forms) page in the Dashboard. If you need to update or correct a 1099 form, you can do so in one of the following ways:\n\nYou can also create new tax forms by importing CSV files. If your connected account doesn’t already have a tax form, performing Update or Delta imports automatically creates the form.\n\nClick **Create** to create a standalone tax form that isn’t associated with a connected account. You must include all columns except for `form_id` and `stripe_account_id`. E-delivery isn’t available for standalone forms (only postal mailing is allowed for delivery). If you’re creating a standalone form of a non-default form type, you must include the CSV headers of that form type. If you need assistance getting the correct CSV headers, reach out to support@stripe.com.\n\nYou can export tax forms to verify data at scale against your internal systems or to prepare for a subsequent import. Whatever your rationale, you can export tax forms by clicking the **Export** button, then **Export CSV**. Choose the type of tax form to export, which also defines the CSV file that you download. This choice overrides any tax form type filter, if set. If you have multiple types of 1099 forms (for example, 1099-K for some recipients and 1099-NEC for others), you must export them separately.\n\nYou can also choose whether or not to export the tax identification number (TIN). If you don’t include the TIN, the TIN column shows a masked value (for example, `*********`). If you include the TIN, the value appears masked to the last 4 digits (for example, `*****1234`). If you require the full TIN in the export, contact [Stripe support](https://support.stripe.com/contact/email?topic=tax) to enable this feature.\n\nThe export considers any filters that you apply. You can see any applied filters by hovering over the information icon in the lower left corner of the export dialog.\n\nAfter you initiate an export you can monitor it on the **Exports & imports** tab. An export expires 7 days after initiation.\n\n![Export tax forms to CSV file format](https://b.stripecdn.com/docs-statics-srv/assets/export_tax_form_filters.bb0fa09e61e826c09e55ab528e900f3b.png)\n\n## Import tax forms![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides values for payee data and form totals whenever possible. However, you may want to supply your own totals-for example if you provided reimbursements or otherwise altered the totals. Or you may want to import data to correct a filed tax form.\n\n#### Note\n\nThe maximum allowed file size is 75 MB.\n\nWhen it comes to altering form totals specifically, you have 2 options:\n\n*   Overwrite the existing values with your own totals (CSV Import -> Update)\n*   Add to the existing values with your deltas (CSV Import -> Delta).\n\n## Overwriting existing values with Update![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nImporting tax forms allows you to override most of the values supplied on the initial tax form by Stripe. When you import tax forms, Stripe uses the imported values and files the tax forms in accordance with the information you provide. If you make updates in the Dashboard after importing from CSV, the updates aren’t recorded in the filed tax forms. If you need to return to the Stripe-supplied values, contact [Stripe support](https://support.stripe.com/contact/email?topic=tax).\n\nTo import tax forms:\n\n1.  Click **Import**.\n2.  Choose the type of tax form to import.\n3.  Specify whether or not you’ve already filed it.\n\nYou’re not required to supply a payee’s TIN on import. If you provide a 9-digit number for the TIN, it overrides the Stripe-supplied value. Stripe ignores any other value and retains the Stripe-supplied value.\n\n#### Leading Zeros\n\nTools like Google Spreadsheet and Excel usually delete any leading zeros in a CSV. For example, ‘000001234’ becomes ‘1234’ when exported as a CSV and opened in excel. If you export a form as a CSV that has leading zeros in the TIN, importing that same CSV form will fail if the zeros have been deleted. If this happens, add the leading zeros back in the TINs that had them originally and try again.\n\nAfter you initiate an import you can monitor it on the **Exports & imports** tab.\n\n![Import tax forms page with Update selected.](https://b.stripecdn.com/docs-statics-srv/assets/tax-forms-import-update.6dbe2b7abeed23b49343cd83a9b2b629.png)\n\n## Adding to existing values with Delta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nImporting tax forms using **Delta** allows you to add to (or subtract from) the values on the initial tax form totals by Stripe. This lets platforms report just the totals of transactions that happened outside of Stripe. Without this functionality you would have to download the existing values from Stripe, then sum the values from Stripe with the external values, and then import the final values. Instead, just provide the delta amounts and Stripe does the rest. This is particularly useful if you have multiple payout mechanisms or reimbursements on Stripe connected accounts for activity that happened outside of Stripe.\n\nTo import a form using **Delta**, click **Import**, then choose the type of tax form to import. Select **Delta**, and then choose the file that contains the delta totals data.\n\n![Import tax forms page with Update selected.](https://b.stripecdn.com/docs-statics-srv/assets/tax-forms-import-upload-csv.ed08ff649cf6c50b7495047f14846774.png)\n\n## Frequently asked questions about Deltas![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis section provides answer to common questions about using Deltas for 1099 tax forms in Connect.\n\n### Can there be negative values as deltas (e.g. reimbursements made which needs to reduce the total on 1099)?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYes.\n\n### If I send multiple delta amounts, do they get overwritten or are they additive?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThey get overwritten, so if on stripe\\_account\\_id S1 there was a delta added for 10 USD, and then another delta was added for 20 USD, the final delta amount applied is 20 USD and not 30 USD.\n\n### If my calculation method changes or the total changes after I have applied a delta, does the delta still persist?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYes. To learn more about calculation methods, see [Choose a calculation method](https://docs.stripe.com/connect/calculation-methods).\n\n### Will I be able to filter to just the forms that had deltas applied?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYes\n\n### Can I undo the delta values that I just imported?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYes, you can use **Revert** to revert to the Stripe-calculated totals in the form. This restores the value in the form to the value calculated by Stripe after you import CSV files with different values using **Update** or **Delta**, or changes you made using the Dashboard.\n\n### If I update a value for a stripe\\_account\\_id using a Delta, can I also overwrite the amount with a CSV update and/or the tax form editor?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYes, Deltas are applied on top of the stripe calculated total / platform’s overwritten totals. The changes made on the Stripe dashboard UI (Tax form editor) overwrite any other changes. The examples in the following table demonstrate how Stripe determines the final values for a connected account after Deltas and Updates.\n\n| Scenario | Final value | Value after Revert |\n| --- | --- | --- |\n| Stripe calculated (100 USD) | 100 USD | 100 USD |\n| Stripe calculated (100 USD) -> CSV Import (update) (150 USD) | 150 USD | 100 USD |\n| Stripe calculated (100 USD) -> Tax form editor Edit (200 USD) | 200 USD | 100 USD |\n| Stripe calculated (100 USD) -> CSV Import (Delta) (+25 USD) | 125 USD | 100 USD |\n| Stripe calculated (100 USD) -> CSV Import (Update) (150 USD)-> Tax form editor Edit (200 USD) | 200 USD | 100 USD |\n| Stripe calculated (100 USD) -> CSV Import (Update) (150 USD)-> CSV Import (Delta) (+25 USD) | 175 USD | 100 USD |\n| Stripe calculated (100 USD) -> Tax form editor Edit (200 USD) -> CSV Import (Delta) (+25 USD) | 225 USD | 100 USD |\n| Stripe calculated (100 USD) -> CSV Import (Delta) (+25 USD) -> Tax form editor Edit (200 USD) | 200 USD | 100 USD |\n| Stripe calculated (100 USD) -> CSV Import (Delta) (+25 USD) -> Tax form editor Edit (200 USD) -> CSV Import (update) (150 USD) | 175 USD | 100 USD |\n\n## Improvements to CSV imports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCSV imports no longer require supplying all columns when updating values for your 1099 tax forms. Include only the columns in the CSV for the data that you want to change, along with either `form_id` or `stripe_account_id` values, which uniquely identify forms in Stripe. When you import a CSV for a correction, you must include a `form_id` field value. Columns that don’t exist in the CSV import schema default to the values that are on the corresponding tax form. We might perform validation on fields even if you don’t include them in the import. If we find validation errors, the import fails and the changes aren’t applied.\n\n## Override the tax form status ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe calculates a status for each tax form based on the type of form, year-to-date amount, and information completeness. You can override a tax form’s status by setting a value for the `filing_requirement` field on import. This field can have one of the following values:\n\n*   `NOT_REQUIRED` – Don’t file the form, even if it meets the threshold and is complete.\n*   `REQUIRED` – File the form, even if it doesn’t meet the threshold or is incomplete. Conceptually this is the combination of `FILE_EVEN_IF_INCOMPLETE` and `FILE_EVEN_IF_BELOW_THRESHOLD`.\n*   `FILE_EVEN_IF_INCOMPLETE` – File the form if it’s above the threshold, even if it isn’t complete.\n*   `FILE_EVEN_IF_BELOW_THRESHOLD` – File the form if it’s complete, even if it’s below the threshold.\n*   `DEFAULT` – Use federal and state thresholds to decide whether a form should be filed. This is what the initial filing requirement value is for all forms, which can be overridden to one of the other values by platform admins.\n\n## Override the delivery method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe uses your platform’s tax settings to determine whether to use postal delivery for your forms by `DEFAULT`. You can override a tax form’s delivery method for an account by setting a value for the `postal_delivery` field on import. This field can have one of the following values:\n\n`TRUE` - Postal deliver the form when filed, even if the platform’s tax settings don’t require it or the account holder provided consent to paperless delivery.\n\n`FALSE` - Do not postal deliver the form when filed, even if the platform’s tax settings require it or the account holder chose to decline paperless delivery.\n\n`DEFAULT` - Use the platform’s tax settings to determine whether to postal deliver the form when filed.\n\n## Change the type of 1099 form![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can change the type of 1099 form for an account by setting a value for the `form_type` field on import. This field can have one of the following values:\n\n`k` - To swap to a 1099-K form\n\n`misc` - To swap to a 1099-MISC form\n\n`nec` - To swap to a 1099-NEC form\n\n## 1099 CSV schema![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe schemas for 1099-NEC, 1099-K, and 1099-MISC are similar overall. Most fields in the CSV file map directly to a box on the tax form and are named accordingly. To get the column names for your CSV import, the best approach is to do a CSV export, change the values, delete the columns you aren’t changing, and import that CSV file.\n\nThe following table describes the schema when you use Update or Correct to update values in a 1099 form.\n\n| Field | Description |\n| --- | --- |\n| `form_id` | The ID of the tax form. You can’t change this value. |\n| `email_address` | The payee’s email address. You can’t change this value. To change a connected account’s email address, visit Connect communication settings or the 1099 tax forms dashboard. |\n| `status` | The federal filing status of the tax form. You can’t change this value. To force a tax form into a different status, use `filing_requirements`. |\n| `postal_delivery` | Whether to mail the form. You can use this field to override your postal delivery default in tax form settings. |\n| `delivery_status` | The postal delivery status of the tax form. You can’t change this value. |\n| `stripe_account_id` | The payee’s Stripe account ID. You can’t change this value. |\n| `filing_requirement` | Use this field to override a tax form status. |\n| `payee_name_line_1` | The payee’s name. |\n| `payee_name_line_2` | Overflow for the payee’s name, sometimes used for a _doing business as_ (DBA) name. |\n| `payee_tin` | The payee’s TIN. On export this is masked by default. Masked values are ignored on import. |\n| `payee_tin_type` | The type (business or individual) of a payee’s TIN. This field may be necessary for some state filings. |\n| `payee_address_line 1` | The first line of the payee’s address. |\n| `payee_address_line 2` | The second line of the payee’s address. |\n| `payee_city` | The payee’s city. |\n| `payee_region` | The payee’s state or region. |\n| `payee_postal_code` | The payee’s postal code. |\n| `payee_country` | The payee’s country. |\n| `payee_account_number` | The account number on the tax form. This field defaults to the `stripe_account_id`, but you can override the value on import. |\n| `january_amount` | The total amount paid in January. Other months follow the same format. |\n| `nonemployee_compensation` | The total compensation paid to the non-employee. |\n| `federal_income_tax_withheld` | The total amount withheld from federal income taxes, if any. |\n| `state_tax_withheld` | The total amount withheld from state income taxes, if any. |\n| `other_state_tax_withheld` | The total amount withheld from the other state income taxes, if any. |\n| `state_filer_id` | The payer’s ID for filing in the state. |\n| `other_state_filer_id` | The payer’s ID for filing in the other state. |\n| `state_income` | The payee’s state income. |\n| `other_state_income` | The payee’s other state income. |\n| `fatca_filing` | Whether to check the [Foreign Account Tax Compliance Act](https://www.irs.gov/businesses/corporations/foreign-account-tax-compliance-act-fatca) (FATCA) filing requirement. |\n| `second_tin_notice` | Use this field to specify whether the payer has received a TIN notice for the payee twice in 3 calendar years. |\n| `paperless_delivery_consent` | Use this field to specify whether you have collected paperless delivery consent. Possible values are `NOT_PROVIDED`, `PROVIDED`, and `REVOKED`. `NOT_PROVIDED` means you have not collected consent. `PROVIDED` means you have collected consent. `REVOKED` means that the connected account does not want e-delivery and has explicitly declined to give consent. When importing, leaving the field empty defaults to `NOT_PROVIDED`. |\n\nThe following table describes the schema for CSV export when you update the values in a tax form by adding a Delta to the value calculated by Stripe. Many of the fields are the same as the schema when you use Update or Correct. For fields that are different when using a Delta, the field names includes _\\_delta_ at the end.\n\n| Field | Description |\n| --- | --- |\n| form\\_id | The ID of the tax form. You can’t change this value and either form\\_id or stripe\\_account\\_id are the required values for the import with Delta. |\n| stripe\\_account\\_id | The payee’s Stripe account ID. You can’t change this value. |\n| nonemployee\\_compensation\\_delta | The delta to add on the compensation paid to the non-employee total already in Stripe. |\n| federal\\_income\\_tax\\_withheld\\_delta | The delta to add on the total amount withheld from federal income taxes total already in Stripe. |\n| state\\_tax\\_withheld\\_delta | The delta to add on the amount withheld from state income taxes total already in Stripe. |\n| state\\_income\\_delta | The delta to add on the payee’s state income total already in Stripe. |\n| january\\_amount\\_delta | The delta to add on the january totals already in Stripe. |\n| february\\_amount\\_delta | The delta to add on the february totals already in Stripe. |\n| royalties\\_delta | The delta to add on the royalties total already in Stripe. |\n| rents\\_delta | The delta to add on the _rents_ total already in Stripe. |\n\nIf you signed up for stripe hosted e-delivery, you can have your users update their tax information themselves before their tax form is filed. If users update their information after filing, the tax form page shows an option to correct the filed 1099 form with the updated information. For more information, see [Quick correct: Payee details](https://docs.stripe.com/connect/modify-tax-forms?method=dashboard#quick-correct:-payee-details).\n\nUsers can edit their Legal name, Taxpayer Identification Number (TIN), and address. Note that some information can’t be edited after a user’s legal entity is verified, including date of birth, and business type. To edit the information user must contact Stripe Support.",
    "title": "Update and create 1099 tax forms | Stripe Documentation",
    "description": "Update and create 1099 tax forms for connected accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/subscriptions/create",
    "markdown": "# Create a subscription | Stripe API Reference\n\nCreates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.\n\nWhen you create a subscription with `collection_method=charge_automatically`, the first invoice is finalized as part of the request. The `payment_behavior` parameter determines the exact behavior of the initial payment.\n\nTo start subscriptions where the first invoice always begins in a `draft` status, use [subscription schedules](https://docs.stripe.com/billing/subscriptions/subscription-schedules#managing) instead. Schedules provide the flexibility to model more complex billing configurations that change over time.\n\n### Parameters\n\n*   The identifier of the customer to subscribe.\n    \n*   #### \n    \n    cancel\\_at\\_period\\_endboolean\n    \n    Boolean indicating whether this subscription should cancel at the end of the current period.\n    \n\n*   #### \n    \n    default\\_payment\\_methodstring\n    \n    ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer’s [invoice\\_settings.default\\_payment\\_method](https://docs.stripe.com/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default\\_source](https://docs.stripe.com/api/customers/object#customer_object-default_source).\n    \n*   The subscription’s description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.\n    \n*   #### \n    \n    itemsarray of objectsRequired\n    \n    A list of up to 20 subscription items, each with an attached price.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Only applies to subscriptions with `collection_method=charge_automatically`.\n    \n    Use `allow_incomplete` to create Subscriptions with `status=incomplete` if the first invoice can’t be paid. Creating Subscriptions with this status allows you to manage scenarios where additional customer actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to create Subscriptions with `status=incomplete` when the first invoice requires payment, otherwise start as active. Subscriptions transition to `status=active` when successfully confirming the PaymentIntent on the first invoice. This allows simpler management of scenarios where additional customer actions are needed to pay a subscription’s invoice, such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method. If the PaymentIntent is not confirmed within 23 hours Subscriptions transition to `status=incomplete_expired`, which is a terminal state.\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s first invoice can’t be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further customer action is needed, this parameter doesn’t create a Subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    `pending_if_incomplete` is only used with updates and cannot be passed when creating a Subscription.\n    \n    Subscriptions with `collection_method=send_invoice` are automatically activated regardless of the first Invoice status.\n    \n    Possible enum values\n    \n    `allow_incomplete`\n    \n    `default_incomplete`\n    \n    `error_if_incomplete`\n    \n    `pending_if_incomplete`\n    \n\n### More parameters\n\n*   #### \n    \n    add\\_invoice\\_itemsarray of objects\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    backdate\\_start\\_datetimestamp\n    \n*   #### \n    \n    billing\\_cycle\\_anchortimestamp\n    \n*   #### \n    \n    billing\\_cycle\\_anchor\\_configobject\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    pending\\_invoice\\_item\\_intervalobject\n    \n*   #### \n    \n    promotion\\_codestringDeprecated\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n*   #### \n    \n    trial\\_endstring | timestamp\n    \n\n### Returns\n\nThe newly created `Subscription` object, if the call succeeded. If the attempted charge fails, the subscription is created in an `incomplete` status.\n\n```\ncurl https://api.stripe.com/v1/subscriptions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_Na6dX7aXxi11N4 \\  -d \"items[0][price]\"=price_1MowQULkdIwHu7ixraBm864M\n```\n\n```\n{  \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679609767,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679609767,  \"currency\": \"usd\",  \"current_period_end\": 1682288167,  \"current_period_start\": 1679609767,  \"customer\": \"cus_Na6dX7aXxi11N4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_Na6dzxczY5fwHx\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679609768,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1000,          \"amount_decimal\": \"1000\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"discounts\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1000,          \"unit_amount_decimal\": \"1000\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"  },  \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"schedule\": null,  \"start_date\": 1679609767,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Update a subscription](https://docs.stripe.com/api/subscriptions/update)\n\nUpdates an existing subscription to match the specified parameters. When changing prices or quantities, we optionally prorate the price we charge next month to make up for any price changes. To preview how the proration is calculated, use the [create preview](https://docs.stripe.com/api/invoices/create_preview) endpoint.\n\nBy default, we prorate subscription changes. For example, if a customer signs up on May 1 for a 100 USD price, they’ll be billed 100 USD immediately. If on May 15 they switch to a 200 USD price, then on June 1 they’ll be billed 250 USD (200 USD for a renewal of her subscription, plus a 50 USD prorating adjustment for half of the previous month’s 100 USD difference). Similarly, a downgrade generates a credit that is applied to the next invoice. We also prorate when you make quantity changes.\n\nSwitching prices does not normally change the billing date or generate an immediate charge unless:\n\n*   The billing interval is changed (for example, from monthly to yearly).\n*   The subscription moves from free to paid.\n*   A trial starts or ends.\n\nIn these cases, we apply a credit for the unused time on the previous price, immediately charge the customer using the new price, and reset the billing date. Learn about how [Stripe immediately attempts payment for subscription changes](https://docs.stripe.com/billing/subscriptions/upgrade-downgrade#immediate-payment).\n\nIf you want to charge for an upgrade immediately, pass `proration_behavior` as `always_invoice` to create prorations, automatically invoice the customer for those proration adjustments, and attempt to collect payment. If you pass `create_prorations`, the prorations are created but not automatically invoiced. If you want to bill the customer for the prorations before the subscription’s renewal date, you need to manually [invoice the customer](https://docs.stripe.com/api/invoices/create).\n\nIf you don’t want to prorate, set the `proration_behavior` option to `none`. With this option, the customer is billed 100 USD on May 1 and 200 USD on June 1. Similarly, if you set `proration_behavior` to `none` when switching between different billing intervals (for example, from monthly to yearly), we don’t generate any credits for the old subscription’s unused time. We still reset the billing date and bill immediately for the new subscription.\n\nUpdating the quantity on a subscription many times in an hour may result in [rate limiting](https://docs.stripe.com/rate-limits). If you need to bill for a frequently changing quantity, consider integrating [usage-based billing](https://docs.stripe.com/billing/subscriptions/usage-based) instead.\n\n### Parameters\n\n*   #### \n    \n    cancel\\_at\\_period\\_endboolean\n    \n    Boolean indicating whether this subscription should cancel at the end of the current period.\n    \n*   #### \n    \n    default\\_payment\\_methodstring\n    \n    ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer’s [invoice\\_settings.default\\_payment\\_method](https://docs.stripe.com/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default\\_source](https://docs.stripe.com/api/customers/object#customer_object-default_source).\n    \n*   The subscription’s description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.\n    \n*   A list of up to 20 subscription items, each with an attached price.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice’s payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.\n    \n    Use `pending_if_incomplete` to update the subscription using [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://docs.stripe.com/billing/pending-updates-reference#supported-attributes).\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    Possible enum values\n    \n    `allow_incomplete`\n    \n    `default_incomplete`\n    \n    `error_if_incomplete`\n    \n    `pending_if_incomplete`\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    `always_invoice`\n    \n    Always invoice immediately for prorations.\n    \n    `create_prorations`\n    \n    Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment).\n    \n    `none`\n    \n    Disable creating prorations in this request.\n    \n\n### More parameters\n\n*   #### \n    \n    add\\_invoice\\_itemsarray of objects\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    billing\\_cycle\\_anchorstring\n    \n\n*   #### \n    \n    cancellation\\_detailsobject\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    pending\\_invoice\\_item\\_intervalobject\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n*   #### \n    \n    trial\\_endstring | timestamp\n    \n\n### Returns\n\nThe newly updated `Subscription` object, if the call succeeded. If `payment_behavior` is `error_if_incomplete` and a charge is required for the update and it fails, this call raises [an error](https://docs.stripe.com/api/errors), and the subscription update does not go into effect.\n\nPOST /v1/subscriptions/:id\n\n```\ncurl https://api.stripe.com/v1/subscriptions/sub_1MowQVLkdIwHu7ixeRlqHVzs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679609767,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679609767,  \"currency\": \"usd\",  \"current_period_end\": 1682288167,  \"current_period_start\": 1679609767,  \"customer\": \"cus_Na6dX7aXxi11N4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_Na6dzxczY5fwHx\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679609768,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1000,          \"amount_decimal\": \"1000\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"discounts\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1000,          \"unit_amount_decimal\": \"1000\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"  },  \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"schedule\": null,  \"start_date\": 1679609767,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Retrieve a subscription](https://docs.stripe.com/api/subscriptions/retrieve)\n\nRetrieves the subscription with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the subscription object.\n\nGET /v1/subscriptions/:id\n\n```\ncurl https://api.stripe.com/v1/subscriptions/sub_1MowQVLkdIwHu7ixeRlqHVzs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679609767,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679609767,  \"currency\": \"usd\",  \"current_period_end\": 1682288167,  \"current_period_start\": 1679609767,  \"customer\": \"cus_Na6dX7aXxi11N4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_Na6dzxczY5fwHx\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679609768,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1000,          \"amount_decimal\": \"1000\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"discounts\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1000,          \"unit_amount_decimal\": \"1000\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"  },  \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"schedule\": null,  \"start_date\": 1679609767,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [List subscriptions](https://docs.stripe.com/api/subscriptions/list)\n\nBy default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify `status=canceled`.\n\n### Parameters\n\n*   The ID of the customer whose subscriptions will be retrieved.\n    \n*   Filter for subscriptions that contain this recurring price ID.\n    \n*   The status of the subscriptions to retrieve. Passing in a value of `canceled` will return all canceled subscriptions, including those belonging to deleted customers. Pass `ended` to find subscriptions that are canceled and subscriptions that are expired due to [incomplete payment](https://docs.stripe.com/billing/subscriptions/overview#subscription-statuses). Passing in a value of `all` will return subscriptions of all statuses. If no value is supplied, all subscriptions that have not been canceled are returned.\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of subscriptions.\n\n```\ncurl -G https://api.stripe.com/v1/subscriptions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscriptions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",      \"object\": \"subscription\",      \"application\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null      },      \"billing_cycle_anchor\": 1679609767,      \"billing_thresholds\": null,      \"cancel_at\": null,      \"cancel_at_period_end\": false,      \"canceled_at\": null,      \"cancellation_details\": {        \"comment\": null,        \"feedback\": null,        \"reason\": null      },      \"collection_method\": \"charge_automatically\",      \"created\": 1679609767,      \"currency\": \"usd\",      \"current_period_end\": 1682288167,      \"current_period_start\": 1679609767,      \"customer\": \"cus_Na6dX7aXxi11N4\",      \"days_until_due\": null,      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"discounts\": null,      \"ended_at\": null,      \"invoice_settings\": {        \"issuer\": {          \"type\": \"self\"        }      },      \"items\": {        \"object\": \"list\",        \"data\": [          {            \"id\": \"si_Na6dzxczY5fwHx\",            \"object\": \"subscription_item\",            \"billing_thresholds\": null,            \"created\": 1679609768,            \"metadata\": {},            \"plan\": {              \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",              \"object\": \"plan\",              \"active\": true,              \"aggregate_usage\": null,              \"amount\": 1000,              \"amount_decimal\": \"1000\",              \"billing_scheme\": \"per_unit\",              \"created\": 1679609766,              \"currency\": \"usd\",              \"discounts\": null,              \"interval\": \"month\",              \"interval_count\": 1,              \"livemode\": false,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_Na6dGcTsmU0I4R\",              \"tiers_mode\": null,              \"transform_usage\": null,              \"trial_period_days\": null,              \"usage_type\": \"licensed\"            },            \"price\": {              \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",              \"object\": \"price\",              \"active\": true,              \"billing_scheme\": \"per_unit\",              \"created\": 1679609766,              \"currency\": \"usd\",              \"custom_unit_amount\": null,              \"livemode\": false,              \"lookup_key\": null,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_Na6dGcTsmU0I4R\",              \"recurring\": {                \"aggregate_usage\": null,                \"interval\": \"month\",                \"interval_count\": 1,                \"trial_period_days\": null,                \"usage_type\": \"licensed\"              },              \"tax_behavior\": \"unspecified\",              \"tiers_mode\": null,              \"transform_quantity\": null,              \"type\": \"recurring\",              \"unit_amount\": 1000,              \"unit_amount_decimal\": \"1000\"            },            \"quantity\": 1,            \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",            \"tax_rates\": []          }        ],        \"has_more\": false,        \"total_count\": 1,        \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"      },      \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",      \"livemode\": false,      \"metadata\": {},      \"next_pending_invoice_item_invoice\": null,      \"on_behalf_of\": null,      \"pause_collection\": null,      \"payment_settings\": {        \"payment_method_options\": null,        \"payment_method_types\": null,        \"save_default_payment_method\": \"off\"      },      \"pending_invoice_item_interval\": null,      \"pending_setup_intent\": null,      \"pending_update\": null,      \"schedule\": null,      \"start_date\": 1679609767,      \"status\": \"active\",      \"test_clock\": null,      \"transfer_data\": null,      \"trial_end\": null,      \"trial_settings\": {        \"end_behavior\": {          \"missing_payment_method\": \"create_invoice\"        }      },      \"trial_start\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a subscription](https://docs.stripe.com/api/subscriptions/cancel)\n\nCancels a customer’s subscription immediately. The customer will not be charged again for the subscription.\n\nNote, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually [deleted](#delete_invoiceitem). If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.\n\nBy default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n*   #### \n    \n    cancellation\\_detailsobject\n    \n\n### Returns\n\nThe canceled `Subscription` object. Its subscription status will be set to `canceled`.\n\nDELETE /v1/subscriptions/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/subscriptions/sub_1MlPf9LkdIwHu7ixB6VIYRyX \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_1MlPf9LkdIwHu7ixB6VIYRyX\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1678768838,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": 1678768842,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": \"cancellation_requested\"  },  \"collection_method\": \"charge_automatically\",  \"created\": 1678768838,  \"currency\": \"usd\",  \"current_period_end\": 1681447238,  \"current_period_start\": 1678768838,  \"customer\": \"cus_NWSaVkvdacCUi4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"ended_at\": 1678768842,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_NWSaWTp80M123q\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1678768839,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MlPf7LkdIwHu7ixgcbP7cwE\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1099,          \"amount_decimal\": \"1099\",          \"billing_scheme\": \"per_unit\",          \"created\": 1678768837,          \"currency\": \"usd\",          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NWSaMgipulx8IQ\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MlPf7LkdIwHu7ixgcbP7cwE\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1678768837,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NWSaMgipulx8IQ\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1099,          \"unit_amount_decimal\": \"1099\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MlPf9LkdIwHu7ixB6VIYRyX\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MlPf9LkdIwHu7ixB6VIYRyX\"  },  \"latest_invoice\": \"in_1MlPf9LkdIwHu7ixEo6hdgCw\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"plan\": {    \"id\": \"price_1MlPf7LkdIwHu7ixgcbP7cwE\",    \"object\": \"plan\",    \"active\": true,    \"aggregate_usage\": null,    \"amount\": 1099,    \"amount_decimal\": \"1099\",    \"billing_scheme\": \"per_unit\",    \"created\": 1678768837,    \"currency\": \"usd\",    \"interval\": \"month\",    \"interval_count\": 1,    \"livemode\": false,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NWSaMgipulx8IQ\",    \"tiers_mode\": null,    \"transform_usage\": null,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"quantity\": 1,  \"schedule\": null,  \"start_date\": 1678768838,  \"status\": \"canceled\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```",
    "title": "Create a subscription | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/subscriptions/object",
    "markdown": "# The Subscription object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    cancel\\_at\\_period\\_endboolean\n    \n    If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.\n    \n\n*   #### \n    \n    current\\_period\\_endtimestamp\n    \n    End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.\n    \n*   #### \n    \n    current\\_period\\_starttimestamp\n    \n    Start of the current period that the subscription has been invoiced for.\n    \n*   ID of the customer who owns the subscription.\n    \n*   #### \n    \n    default\\_payment\\_methodnullable stringExpandable\n    \n    ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer’s [invoice\\_settings.default\\_payment\\_method](https://docs.stripe.com/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default\\_source](https://docs.stripe.com/api/customers/object#customer_object-default_source).\n    \n*   #### \n    \n    descriptionnullable string\n    \n    The subscription’s description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.\n    \n*   List of subscription items, each with an attached price.\n    \n*   #### \n    \n    latest\\_invoicenullable stringExpandable\n    \n    The most recent invoice this subscription has generated.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    pending\\_setup\\_intentnullable stringExpandable\n    \n    You can use this [SetupIntent](https://docs.stripe.com/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription’s payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication#scenario-2).\n    \n*   #### \n    \n    pending\\_updatenullable object\n    \n    If specified, [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid.\n    \n*   Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, `unpaid`, or `paused`.\n    \n    For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this status can only have metadata and default\\_source updated. Once the first invoice is paid, the subscription moves into an `active` status. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal status, the open invoice will be voided and no further invoices will be generated.\n    \n    A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.\n    \n    A subscription can only enter a `paused` status [when a trial ends without a payment method](https://docs.stripe.com/billing/subscriptions/trials#create-free-trials-without-payment). A `paused` subscription doesn’t generate invoices and can be resumed after your customer adds their payment method. The `paused` status is different from [pausing collection](https://docs.stripe.com/billing/subscriptions/pause-payment), which still generates invoices and leaves the subscription’s status unchanged.\n    \n    If subscription `collection_method=charge_automatically`, it becomes `past_due` when payment is required but cannot be paid (due to failed payment or awaiting additional user actions). Once Stripe has exhausted all payment retry attempts, the subscription will become `canceled` or `unpaid` (depending on your subscriptions settings).\n    \n    If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.\n    \n\n### More attributes\n\n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentnullable floatConnect only\n    \n\n*   #### \n    \n    billing\\_cycle\\_anchortimestamp\n    \n*   #### \n    \n    billing\\_cycle\\_anchor\\_confignullable object\n    \n*   #### \n    \n    billing\\_thresholdsnullable object\n    \n*   #### \n    \n    cancel\\_atnullable timestamp\n    \n*   #### \n    \n    canceled\\_atnullable timestamp\n    \n*   #### \n    \n    cancellation\\_detailsnullable object\n    \n\n*   #### \n    \n    days\\_until\\_duenullable integer\n    \n*   #### \n    \n    default\\_sourcenullable stringExpandable\n    \n*   #### \n    \n    default\\_tax\\_ratesnullable array of objects\n    \n*   #### \n    \n    discountnullable objectDeprecated\n    \n*   #### \n    \n    discountsarray of stringsExpandable\n    \n*   #### \n    \n    ended\\_atnullable timestamp\n    \n\n*   #### \n    \n    next\\_pending\\_invoice\\_item\\_invoicenullable timestamp\n    \n*   #### \n    \n    on\\_behalf\\_ofnullable stringExpandableConnect only\n    \n*   #### \n    \n    pause\\_collectionnullable object\n    \n*   #### \n    \n    payment\\_settingsnullable object\n    \n*   #### \n    \n    pending\\_invoice\\_item\\_intervalnullable object\n    \n*   #### \n    \n    schedulenullable stringExpandable\n    \n\n*   #### \n    \n    test\\_clocknullable stringExpandable\n    \n*   #### \n    \n    transfer\\_datanullable objectConnect only\n    \n*   #### \n    \n    trial\\_endnullable timestamp\n    \n*   #### \n    \n    trial\\_settingsnullable object\n    \n*   #### \n    \n    trial\\_startnullable timestamp\n    \n\n```\n{  \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679609767,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679609767,  \"currency\": \"usd\",  \"current_period_end\": 1682288167,  \"current_period_start\": 1679609767,  \"customer\": \"cus_Na6dX7aXxi11N4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_Na6dzxczY5fwHx\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679609768,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1000,          \"amount_decimal\": \"1000\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"discounts\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1000,          \"unit_amount_decimal\": \"1000\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"  },  \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"schedule\": null,  \"start_date\": 1679609767,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Create a subscription](https://docs.stripe.com/api/subscriptions/create)\n\nCreates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.\n\nWhen you create a subscription with `collection_method=charge_automatically`, the first invoice is finalized as part of the request. The `payment_behavior` parameter determines the exact behavior of the initial payment.\n\nTo start subscriptions where the first invoice always begins in a `draft` status, use [subscription schedules](https://docs.stripe.com/billing/subscriptions/subscription-schedules#managing) instead. Schedules provide the flexibility to model more complex billing configurations that change over time.\n\n### Parameters\n\n*   The identifier of the customer to subscribe.\n    \n*   #### \n    \n    cancel\\_at\\_period\\_endboolean\n    \n    Boolean indicating whether this subscription should cancel at the end of the current period.\n    \n\n*   #### \n    \n    default\\_payment\\_methodstring\n    \n    ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer’s [invoice\\_settings.default\\_payment\\_method](https://docs.stripe.com/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default\\_source](https://docs.stripe.com/api/customers/object#customer_object-default_source).\n    \n*   The subscription’s description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.\n    \n*   #### \n    \n    itemsarray of objectsRequired\n    \n    A list of up to 20 subscription items, each with an attached price.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Only applies to subscriptions with `collection_method=charge_automatically`.\n    \n    Use `allow_incomplete` to create Subscriptions with `status=incomplete` if the first invoice can’t be paid. Creating Subscriptions with this status allows you to manage scenarios where additional customer actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to create Subscriptions with `status=incomplete` when the first invoice requires payment, otherwise start as active. Subscriptions transition to `status=active` when successfully confirming the PaymentIntent on the first invoice. This allows simpler management of scenarios where additional customer actions are needed to pay a subscription’s invoice, such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method. If the PaymentIntent is not confirmed within 23 hours Subscriptions transition to `status=incomplete_expired`, which is a terminal state.\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s first invoice can’t be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further customer action is needed, this parameter doesn’t create a Subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    `pending_if_incomplete` is only used with updates and cannot be passed when creating a Subscription.\n    \n    Subscriptions with `collection_method=send_invoice` are automatically activated regardless of the first Invoice status.\n    \n    Possible enum values\n    \n    `allow_incomplete`\n    \n    `default_incomplete`\n    \n    `error_if_incomplete`\n    \n    `pending_if_incomplete`\n    \n\n### More parameters\n\n*   #### \n    \n    add\\_invoice\\_itemsarray of objects\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    backdate\\_start\\_datetimestamp\n    \n*   #### \n    \n    billing\\_cycle\\_anchortimestamp\n    \n*   #### \n    \n    billing\\_cycle\\_anchor\\_configobject\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    pending\\_invoice\\_item\\_intervalobject\n    \n*   #### \n    \n    promotion\\_codestringDeprecated\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n*   #### \n    \n    trial\\_endstring | timestamp\n    \n\n### Returns\n\nThe newly created `Subscription` object, if the call succeeded. If the attempted charge fails, the subscription is created in an `incomplete` status.\n\n```\ncurl https://api.stripe.com/v1/subscriptions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_Na6dX7aXxi11N4 \\  -d \"items[0][price]\"=price_1MowQULkdIwHu7ixraBm864M\n```\n\n```\n{  \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679609767,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679609767,  \"currency\": \"usd\",  \"current_period_end\": 1682288167,  \"current_period_start\": 1679609767,  \"customer\": \"cus_Na6dX7aXxi11N4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_Na6dzxczY5fwHx\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679609768,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1000,          \"amount_decimal\": \"1000\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"discounts\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1000,          \"unit_amount_decimal\": \"1000\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"  },  \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"schedule\": null,  \"start_date\": 1679609767,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Update a subscription](https://docs.stripe.com/api/subscriptions/update)\n\nUpdates an existing subscription to match the specified parameters. When changing prices or quantities, we optionally prorate the price we charge next month to make up for any price changes. To preview how the proration is calculated, use the [create preview](https://docs.stripe.com/api/invoices/create_preview) endpoint.\n\nBy default, we prorate subscription changes. For example, if a customer signs up on May 1 for a 100 USD price, they’ll be billed 100 USD immediately. If on May 15 they switch to a 200 USD price, then on June 1 they’ll be billed 250 USD (200 USD for a renewal of her subscription, plus a 50 USD prorating adjustment for half of the previous month’s 100 USD difference). Similarly, a downgrade generates a credit that is applied to the next invoice. We also prorate when you make quantity changes.\n\nSwitching prices does not normally change the billing date or generate an immediate charge unless:\n\n*   The billing interval is changed (for example, from monthly to yearly).\n*   The subscription moves from free to paid.\n*   A trial starts or ends.\n\nIn these cases, we apply a credit for the unused time on the previous price, immediately charge the customer using the new price, and reset the billing date. Learn about how [Stripe immediately attempts payment for subscription changes](https://docs.stripe.com/billing/subscriptions/upgrade-downgrade#immediate-payment).\n\nIf you want to charge for an upgrade immediately, pass `proration_behavior` as `always_invoice` to create prorations, automatically invoice the customer for those proration adjustments, and attempt to collect payment. If you pass `create_prorations`, the prorations are created but not automatically invoiced. If you want to bill the customer for the prorations before the subscription’s renewal date, you need to manually [invoice the customer](https://docs.stripe.com/api/invoices/create).\n\nIf you don’t want to prorate, set the `proration_behavior` option to `none`. With this option, the customer is billed 100 USD on May 1 and 200 USD on June 1. Similarly, if you set `proration_behavior` to `none` when switching between different billing intervals (for example, from monthly to yearly), we don’t generate any credits for the old subscription’s unused time. We still reset the billing date and bill immediately for the new subscription.\n\nUpdating the quantity on a subscription many times in an hour may result in [rate limiting](https://docs.stripe.com/rate-limits). If you need to bill for a frequently changing quantity, consider integrating [usage-based billing](https://docs.stripe.com/billing/subscriptions/usage-based) instead.\n\n### Parameters\n\n*   #### \n    \n    cancel\\_at\\_period\\_endboolean\n    \n    Boolean indicating whether this subscription should cancel at the end of the current period.\n    \n*   #### \n    \n    default\\_payment\\_methodstring\n    \n    ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer’s [invoice\\_settings.default\\_payment\\_method](https://docs.stripe.com/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default\\_source](https://docs.stripe.com/api/customers/object#customer_object-default_source).\n    \n*   The subscription’s description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.\n    \n*   A list of up to 20 subscription items, each with an attached price.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice’s payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.\n    \n    Use `pending_if_incomplete` to update the subscription using [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://docs.stripe.com/billing/pending-updates-reference#supported-attributes).\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    Possible enum values\n    \n    `allow_incomplete`\n    \n    `default_incomplete`\n    \n    `error_if_incomplete`\n    \n    `pending_if_incomplete`\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    `always_invoice`\n    \n    Always invoice immediately for prorations.\n    \n    `create_prorations`\n    \n    Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment).\n    \n    `none`\n    \n    Disable creating prorations in this request.\n    \n\n### More parameters\n\n*   #### \n    \n    add\\_invoice\\_itemsarray of objects\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    billing\\_cycle\\_anchorstring\n    \n\n*   #### \n    \n    cancellation\\_detailsobject\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    pending\\_invoice\\_item\\_intervalobject\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n*   #### \n    \n    trial\\_endstring | timestamp\n    \n\n### Returns\n\nThe newly updated `Subscription` object, if the call succeeded. If `payment_behavior` is `error_if_incomplete` and a charge is required for the update and it fails, this call raises [an error](https://docs.stripe.com/api/errors), and the subscription update does not go into effect.\n\nPOST /v1/subscriptions/:id\n\n```\ncurl https://api.stripe.com/v1/subscriptions/sub_1MowQVLkdIwHu7ixeRlqHVzs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679609767,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679609767,  \"currency\": \"usd\",  \"current_period_end\": 1682288167,  \"current_period_start\": 1679609767,  \"customer\": \"cus_Na6dX7aXxi11N4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_Na6dzxczY5fwHx\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679609768,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1000,          \"amount_decimal\": \"1000\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"discounts\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1000,          \"unit_amount_decimal\": \"1000\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"  },  \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"schedule\": null,  \"start_date\": 1679609767,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Retrieve a subscription](https://docs.stripe.com/api/subscriptions/retrieve)\n\nRetrieves the subscription with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the subscription object.\n\nGET /v1/subscriptions/:id\n\n```\ncurl https://api.stripe.com/v1/subscriptions/sub_1MowQVLkdIwHu7ixeRlqHVzs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679609767,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679609767,  \"currency\": \"usd\",  \"current_period_end\": 1682288167,  \"current_period_start\": 1679609767,  \"customer\": \"cus_Na6dX7aXxi11N4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_Na6dzxczY5fwHx\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679609768,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1000,          \"amount_decimal\": \"1000\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"discounts\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1000,          \"unit_amount_decimal\": \"1000\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"  },  \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"schedule\": null,  \"start_date\": 1679609767,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [List subscriptions](https://docs.stripe.com/api/subscriptions/list)\n\nBy default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify `status=canceled`.\n\n### Parameters\n\n*   The ID of the customer whose subscriptions will be retrieved.\n    \n*   Filter for subscriptions that contain this recurring price ID.\n    \n*   The status of the subscriptions to retrieve. Passing in a value of `canceled` will return all canceled subscriptions, including those belonging to deleted customers. Pass `ended` to find subscriptions that are canceled and subscriptions that are expired due to [incomplete payment](https://docs.stripe.com/billing/subscriptions/overview#subscription-statuses). Passing in a value of `all` will return subscriptions of all statuses. If no value is supplied, all subscriptions that have not been canceled are returned.\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of subscriptions.\n\n```\ncurl -G https://api.stripe.com/v1/subscriptions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscriptions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",      \"object\": \"subscription\",      \"application\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null      },      \"billing_cycle_anchor\": 1679609767,      \"billing_thresholds\": null,      \"cancel_at\": null,      \"cancel_at_period_end\": false,      \"canceled_at\": null,      \"cancellation_details\": {        \"comment\": null,        \"feedback\": null,        \"reason\": null      },      \"collection_method\": \"charge_automatically\",      \"created\": 1679609767,      \"currency\": \"usd\",      \"current_period_end\": 1682288167,      \"current_period_start\": 1679609767,      \"customer\": \"cus_Na6dX7aXxi11N4\",      \"days_until_due\": null,      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"discounts\": null,      \"ended_at\": null,      \"invoice_settings\": {        \"issuer\": {          \"type\": \"self\"        }      },      \"items\": {        \"object\": \"list\",        \"data\": [          {            \"id\": \"si_Na6dzxczY5fwHx\",            \"object\": \"subscription_item\",            \"billing_thresholds\": null,            \"created\": 1679609768,            \"metadata\": {},            \"plan\": {              \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",              \"object\": \"plan\",              \"active\": true,              \"aggregate_usage\": null,              \"amount\": 1000,              \"amount_decimal\": \"1000\",              \"billing_scheme\": \"per_unit\",              \"created\": 1679609766,              \"currency\": \"usd\",              \"discounts\": null,              \"interval\": \"month\",              \"interval_count\": 1,              \"livemode\": false,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_Na6dGcTsmU0I4R\",              \"tiers_mode\": null,              \"transform_usage\": null,              \"trial_period_days\": null,              \"usage_type\": \"licensed\"            },            \"price\": {              \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",              \"object\": \"price\",              \"active\": true,              \"billing_scheme\": \"per_unit\",              \"created\": 1679609766,              \"currency\": \"usd\",              \"custom_unit_amount\": null,              \"livemode\": false,              \"lookup_key\": null,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_Na6dGcTsmU0I4R\",              \"recurring\": {                \"aggregate_usage\": null,                \"interval\": \"month\",                \"interval_count\": 1,                \"trial_period_days\": null,                \"usage_type\": \"licensed\"              },              \"tax_behavior\": \"unspecified\",              \"tiers_mode\": null,              \"transform_quantity\": null,              \"type\": \"recurring\",              \"unit_amount\": 1000,              \"unit_amount_decimal\": \"1000\"            },            \"quantity\": 1,            \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",            \"tax_rates\": []          }        ],        \"has_more\": false,        \"total_count\": 1,        \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"      },      \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",      \"livemode\": false,      \"metadata\": {},      \"next_pending_invoice_item_invoice\": null,      \"on_behalf_of\": null,      \"pause_collection\": null,      \"payment_settings\": {        \"payment_method_options\": null,        \"payment_method_types\": null,        \"save_default_payment_method\": \"off\"      },      \"pending_invoice_item_interval\": null,      \"pending_setup_intent\": null,      \"pending_update\": null,      \"schedule\": null,      \"start_date\": 1679609767,      \"status\": \"active\",      \"test_clock\": null,      \"transfer_data\": null,      \"trial_end\": null,      \"trial_settings\": {        \"end_behavior\": {          \"missing_payment_method\": \"create_invoice\"        }      },      \"trial_start\": null    }    {...}    {...}  ],}\n```",
    "title": "The Subscription object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoices/finalize",
    "markdown": "# Finalize an invoice | Stripe API Reference\n\nStripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.\n\n### Parameters\n\n*   Controls whether Stripe performs [automatic collection](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice’s state doesn’t automatically advance without an explicit action.\n    \n\n### Returns\n\nReturns an invoice object with `status=open`.\n\nPOST /v1/invoices/:id/finalize\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/finalize \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ix6PgS6g8S\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": true,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"send_invoice\",  \"created\": 1680641304,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZw0zvTyquTfF\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": 1681246104,  \"ending_balance\": 0,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": \"https://invoice.stripe.com/i/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3dVBYNnF0dGlvdXRubGVjSXVOOWhiVWpmUktPLDcxMTgyMTA10200x7P2wMSm?s=ap\",  \"invoice_pdf\": \"https://pay.stripe.com/invoice/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3dVBYNnF0dGlvdXRubGVjSXVOOWhiVWpmUktPLDcxMTgyMTA10200x7P2wMSm/pdf?s=ap\",  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": \"9545A614-0001\",  \"on_behalf_of\": null,  \"paid\": true,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680641304,  \"period_start\": 1680641304,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"paid\",  \"status_transitions\": {    \"finalized_at\": 1680641304,    \"marked_uncollectible_at\": null,    \"paid_at\": 1680641304,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680641304}\n```\n\n## [Mark an invoice as uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)\n\nMarking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the invoice object.\n\nPOST /v1/invoices/:id/mark\\_uncollectible\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtG0nLkdIwHu7ixAaUw3Cb4/mark_uncollectible \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtG0nLkdIwHu7ixAaUw3Cb4\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 599,  \"amount_paid\": 0,  \"amount_remaining\": 599,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680638365,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZw0zvTyquTfF\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [    {      \"type\": \"eu_vat\",      \"value\": \"DE123456789\"    },    {      \"type\": \"eu_vat\",      \"value\": \"DE123456781\"    }  ],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"il_1MtG0nLkdIwHu7ix3eCoIIw7\",        \"object\": \"line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"currency\": \"usd\",        \"description\": \"My First Invoice Item (created for API docs)\",        \"discount_amounts\": [],        \"discountable\": true,        \"discounts\": [],        \"invoice_item\": \"ii_1MtG0nLkdIwHu7ixDqfiUgg8\",        \"livemode\": false,        \"metadata\": {},        \"period\": {          \"end\": 1680638365,          \"start\": 1680638365        },        \"price\": {          \"id\": \"price_1Mr89PLkdIwHu7ixf5QhiWm2\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1680131491,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NcMtLgctyqlJDC\",          \"recurring\": null,          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"one_time\",          \"unit_amount\": 1099,          \"unit_amount_decimal\": \"1099\"        },        \"proration\": false,        \"proration_details\": {          \"credited_items\": null        },        \"quantity\": 1,        \"subscription\": null,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoiceitem\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/invoices/in_1MtG0nLkdIwHu7ixAaUw3Cb4/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680638365,  \"period_start\": 1680638365,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": -500,  \"statement_descriptor\": null,  \"status\": \"uncollectible\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax\": null,  \"test_clock\": null,  \"total\": 1099,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 1099,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": null,  \"closed\": true,  \"forgiven\": true}\n```\n\n## [Pay an invoice](https://docs.stripe.com/api/invoices/pay)\n\nStripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns the invoice object.\n\nPOST /v1/invoices/:id/pay\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/pay \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ix6PgS6g8S\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": true,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"send_invoice\",  \"created\": 1680641304,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZw0zvTyquTfF\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": 1681246104,  \"ending_balance\": 0,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": \"https://invoice.stripe.com/i/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3dVBYNnF0dGlvdXRubGVjSXVOOWhiVWpmUktPLDcxMTgyMTA10200x7P2wMSm?s=ap\",  \"invoice_pdf\": \"https://pay.stripe.com/invoice/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3dVBYNnF0dGlvdXRubGVjSXVOOWhiVWpmUktPLDcxMTgyMTA10200x7P2wMSm/pdf?s=ap\",  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": \"9545A614-0001\",  \"on_behalf_of\": null,  \"paid\": true,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680641304,  \"period_start\": 1680641304,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"paid\",  \"status_transitions\": {    \"finalized_at\": 1680641304,    \"marked_uncollectible_at\": null,    \"paid_at\": 1680641304,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680641304}\n```\n\n## [Search invoices](https://docs.stripe.com/api/invoices/search)\n\nSearch for invoices you’ve previously created using Stripe’s [Search Query Language](https://docs.stripe.com/search#search-query-language). Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.\n\n### Parameters\n\n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for pagination across multiple pages of results. Don’t include this parameter on the first call. Use the next\\_page value returned in a previous response to request subsequent results.\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` invoices. If no objects match the query, the resulting array will be empty. See the related guide on [expanding properties in lists](https://docs.stripe.com/expand#lists).\n\n```\ncurl -G https://api.stripe.com/v1/invoices/search \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d query=\"total<1\"\n```\n\n```\n{  \"object\": \"search_result\",  \"url\": \"/v1/invoices/search\",  \"has_more\": false,  \"data\": [    {      \"id\": \"in_1MtHbELkdIwHu7ixl4OzzPMv\",      \"object\": \"invoice\",      \"account_country\": \"US\",      \"account_name\": \"Stripe Docs\",      \"account_tax_ids\": null,      \"amount_due\": 0,      \"amount_paid\": 0,      \"amount_remaining\": 0,      \"amount_shipping\": 0,      \"application\": null,      \"application_fee_amount\": null,      \"attempt_count\": 0,      \"attempted\": false,      \"auto_advance\": false,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null,        \"status\": null      },      \"billing_reason\": \"manual\",      \"charge\": null,      \"collection_method\": \"charge_automatically\",      \"created\": 1680644467,      \"currency\": \"usd\",      \"custom_fields\": null,      \"customer\": \"cus_NeZwdNtLEOXuvB\",      \"customer_address\": null,      \"customer_email\": \"jennyrosen@example.com\",      \"customer_name\": \"Jenny Rosen\",      \"customer_phone\": null,      \"customer_shipping\": null,      \"customer_tax_exempt\": \"none\",      \"customer_tax_ids\": [],      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"discounts\": [],      \"due_date\": null,      \"ending_balance\": null,      \"footer\": null,      \"from_invoice\": null,      \"hosted_invoice_url\": null,      \"invoice_pdf\": null,      \"issuer\": {        \"type\": \"self\"      },      \"last_finalization_error\": null,      \"latest_revision\": null,      \"lines\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/invoices/in_1MtHbELkdIwHu7ixl4OzzPMv/lines\"      },      \"livemode\": false,      \"metadata\": {},      \"next_payment_attempt\": null,      \"number\": null,      \"on_behalf_of\": null,      \"paid\": false,      \"paid_out_of_band\": false,      \"payment_intent\": null,      \"payment_settings\": {        \"default_mandate\": null,        \"payment_method_options\": null,        \"payment_method_types\": null      },      \"period_end\": 1680644467,      \"period_start\": 1680644467,      \"post_payment_credit_notes_amount\": 0,      \"pre_payment_credit_notes_amount\": 0,      \"quote\": null,      \"receipt_number\": null,      \"rendering_options\": null,      \"shipping_cost\": null,      \"shipping_details\": null,      \"starting_balance\": 0,      \"statement_descriptor\": null,      \"status\": \"draft\",      \"status_transitions\": {        \"finalized_at\": null,        \"marked_uncollectible_at\": null,        \"paid_at\": null,        \"voided_at\": null      },      \"subscription\": null,      \"subtotal\": 0,      \"subtotal_excluding_tax\": 0,      \"tax\": null,      \"test_clock\": null,      \"total\": 0,      \"total_discount_amounts\": [],      \"total_excluding_tax\": 0,      \"total_tax_amounts\": [],      \"transfer_data\": null,      \"webhooks_delivered_at\": 1680644467    }    {...}    {...}  ],}\n```\n\n## [Send an invoice for manual payment](https://docs.stripe.com/api/invoices/send)\n\nStripe will automatically send invoices to customers according to your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.\n\nRequests made in test-mode result in no emails being sent, despite sending an `invoice.sent` event.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the invoice object.\n\nPOST /v1/invoices/:id/send\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ixJlveR2DO/send \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ixJlveR2DO\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": true,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"send_invoice\",  \"created\": 1680641304,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwvqcz9Sh2uw\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": 1681246104,  \"ending_balance\": 0,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": \"https://invoice.stripe.com/i/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3SDR0Q1Q4U1N0YkVjY2lvSmRoRGppU3E1eGVJLDcxMTgyMTA10200hQIJrDM1?s=ap\",  \"invoice_pdf\": \"https://pay.stripe.com/invoice/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3SDR0Q1Q4U1N0YkVjY2lvSmRoRGppU3E1eGVJLDcxMTgyMTA10200hQIJrDM1/pdf?s=ap\",  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ixJlveR2DO/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": \"3AB9C0CA-0001\",  \"on_behalf_of\": null,  \"paid\": true,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680641304,  \"period_start\": 1680641304,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"paid\",  \"status_transitions\": {    \"finalized_at\": 1680641304,    \"marked_uncollectible_at\": null,    \"paid_at\": 1680641304,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680641304}\n```",
    "title": "Finalize an invoice | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoices/send",
    "markdown": "# Send an invoice for manual payment\n\nStripe will automatically send invoices to customers according to your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.\n\nRequests made in test-mode result in no emails being sent, despite sending an `invoice.sent` event.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the invoice object.\n\nPOST /v1/invoices/:id/send\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ixJlveR2DO/send \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ixJlveR2DO\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": true,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"send_invoice\",  \"created\": 1680641304,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwvqcz9Sh2uw\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": 1681246104,  \"ending_balance\": 0,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": \"https://invoice.stripe.com/i/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3SDR0Q1Q4U1N0YkVjY2lvSmRoRGppU3E1eGVJLDcxMTgyMTA10200hQIJrDM1?s=ap\",  \"invoice_pdf\": \"https://pay.stripe.com/invoice/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OZVp3SDR0Q1Q4U1N0YkVjY2lvSmRoRGppU3E1eGVJLDcxMTgyMTA10200hQIJrDM1/pdf?s=ap\",  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ixJlveR2DO/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": \"3AB9C0CA-0001\",  \"on_behalf_of\": null,  \"paid\": true,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680641304,  \"period_start\": 1680641304,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"paid\",  \"status_transitions\": {    \"finalized_at\": 1680641304,    \"marked_uncollectible_at\": null,    \"paid_at\": 1680641304,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680641304}\n```\n\n## [Void an invoice](https://docs.stripe.com/api/invoices/void)\n\nMark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to [deletion](#delete_invoice), however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.\n\nConsult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to [issue another invoice](#create_invoice) or [credit note](#create_credit_note) instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the voided invoice object.\n\nPOST /v1/invoices/:id/void\n\n```\ncurl -X POST https://api.stripe.com/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/void \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"in_1MtGmCLkdIwHu7ix6PgS6g8S\",  \"object\": \"invoice\",  \"account_country\": \"US\",  \"account_name\": \"Stripe Docs\",  \"account_tax_ids\": null,  \"amount_due\": 0,  \"amount_paid\": 0,  \"amount_remaining\": 0,  \"amount_shipping\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"attempt_count\": 0,  \"attempted\": false,  \"auto_advance\": false,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"billing_reason\": \"manual\",  \"charge\": null,  \"collection_method\": \"charge_automatically\",  \"created\": 1680644467,  \"currency\": \"usd\",  \"custom_fields\": null,  \"customer\": \"cus_NeZwdNtLEOXuvB\",  \"customer_address\": null,  \"customer_email\": \"jennyrosen@example.com\",  \"customer_name\": \"Jenny Rosen\",  \"customer_phone\": null,  \"customer_shipping\": null,  \"customer_tax_exempt\": \"none\",  \"customer_tax_ids\": [],  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": [],  \"due_date\": null,  \"ending_balance\": null,  \"footer\": null,  \"from_invoice\": null,  \"hosted_invoice_url\": null,  \"invoice_pdf\": null,  \"issuer\": {    \"type\": \"self\"  },  \"last_finalization_error\": null,  \"latest_revision\": null,  \"lines\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/invoices/in_1MtGmCLkdIwHu7ix6PgS6g8S/lines\"  },  \"livemode\": false,  \"metadata\": {},  \"next_payment_attempt\": null,  \"number\": null,  \"on_behalf_of\": null,  \"paid\": false,  \"paid_out_of_band\": false,  \"payment_intent\": null,  \"payment_settings\": {    \"default_mandate\": null,    \"payment_method_options\": null,    \"payment_method_types\": null  },  \"period_end\": 1680644467,  \"period_start\": 1680644467,  \"post_payment_credit_notes_amount\": 0,  \"pre_payment_credit_notes_amount\": 0,  \"quote\": null,  \"receipt_number\": null,  \"rendering_options\": null,  \"shipping_cost\": null,  \"shipping_details\": null,  \"starting_balance\": 0,  \"statement_descriptor\": null,  \"status\": \"void\",  \"status_transitions\": {    \"finalized_at\": null,    \"marked_uncollectible_at\": null,    \"paid_at\": null,    \"voided_at\": null  },  \"subscription\": null,  \"subtotal\": 0,  \"subtotal_excluding_tax\": 0,  \"tax\": null,  \"test_clock\": null,  \"total\": 0,  \"total_discount_amounts\": [],  \"total_excluding_tax\": 0,  \"total_tax_amounts\": [],  \"transfer_data\": null,  \"webhooks_delivered_at\": 1680644467}\n```\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Send an invoice for manual payment | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/subscriptions/update",
    "markdown": "# Update a subscription | Stripe API Reference\n\nUpdates an existing subscription to match the specified parameters. When changing prices or quantities, we optionally prorate the price we charge next month to make up for any price changes. To preview how the proration is calculated, use the [create preview](https://docs.stripe.com/api/invoices/create_preview) endpoint.\n\nBy default, we prorate subscription changes. For example, if a customer signs up on May 1 for a 100 USD price, they’ll be billed 100 USD immediately. If on May 15 they switch to a 200 USD price, then on June 1 they’ll be billed 250 USD (200 USD for a renewal of her subscription, plus a 50 USD prorating adjustment for half of the previous month’s 100 USD difference). Similarly, a downgrade generates a credit that is applied to the next invoice. We also prorate when you make quantity changes.\n\nSwitching prices does not normally change the billing date or generate an immediate charge unless:\n\n*   The billing interval is changed (for example, from monthly to yearly).\n*   The subscription moves from free to paid.\n*   A trial starts or ends.\n\nIn these cases, we apply a credit for the unused time on the previous price, immediately charge the customer using the new price, and reset the billing date. Learn about how [Stripe immediately attempts payment for subscription changes](https://docs.stripe.com/billing/subscriptions/upgrade-downgrade#immediate-payment).\n\nIf you want to charge for an upgrade immediately, pass `proration_behavior` as `always_invoice` to create prorations, automatically invoice the customer for those proration adjustments, and attempt to collect payment. If you pass `create_prorations`, the prorations are created but not automatically invoiced. If you want to bill the customer for the prorations before the subscription’s renewal date, you need to manually [invoice the customer](https://docs.stripe.com/api/invoices/create).\n\nIf you don’t want to prorate, set the `proration_behavior` option to `none`. With this option, the customer is billed 100 USD on May 1 and 200 USD on June 1. Similarly, if you set `proration_behavior` to `none` when switching between different billing intervals (for example, from monthly to yearly), we don’t generate any credits for the old subscription’s unused time. We still reset the billing date and bill immediately for the new subscription.\n\nUpdating the quantity on a subscription many times in an hour may result in [rate limiting](https://docs.stripe.com/rate-limits). If you need to bill for a frequently changing quantity, consider integrating [usage-based billing](https://docs.stripe.com/billing/subscriptions/usage-based) instead.\n\n### Parameters\n\n*   #### \n    \n    cancel\\_at\\_period\\_endboolean\n    \n    Boolean indicating whether this subscription should cancel at the end of the current period.\n    \n*   #### \n    \n    default\\_payment\\_methodstring\n    \n    ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer’s [invoice\\_settings.default\\_payment\\_method](https://docs.stripe.com/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default\\_source](https://docs.stripe.com/api/customers/object#customer_object-default_source).\n    \n*   The subscription’s description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.\n    \n*   A list of up to 20 subscription items, each with an attached price.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription’s invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://docs.stripe.com/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.\n    \n    Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice’s payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://docs.stripe.com/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.\n    \n    Use `pending_if_incomplete` to update the subscription using [pending updates](https://docs.stripe.com/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://docs.stripe.com/billing/pending-updates-reference#supported-attributes).\n    \n    Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription’s invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/upgrades#2019-03-14) to learn more.\n    \n    Possible enum values\n    \n    `allow_incomplete`\n    \n    `default_incomplete`\n    \n    `error_if_incomplete`\n    \n    `pending_if_incomplete`\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    `always_invoice`\n    \n    Always invoice immediately for prorations.\n    \n    `create_prorations`\n    \n    Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment).\n    \n    `none`\n    \n    Disable creating prorations in this request.\n    \n\n### More parameters\n\n*   #### \n    \n    add\\_invoice\\_itemsarray of objects\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    billing\\_cycle\\_anchorstring\n    \n\n*   #### \n    \n    cancellation\\_detailsobject\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    pending\\_invoice\\_item\\_intervalobject\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n*   #### \n    \n    trial\\_endstring | timestamp\n    \n\n### Returns\n\nThe newly updated `Subscription` object, if the call succeeded. If `payment_behavior` is `error_if_incomplete` and a charge is required for the update and it fails, this call raises [an error](https://docs.stripe.com/api/errors), and the subscription update does not go into effect.\n\nPOST /v1/subscriptions/:id\n\n```\ncurl https://api.stripe.com/v1/subscriptions/sub_1MowQVLkdIwHu7ixeRlqHVzs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679609767,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679609767,  \"currency\": \"usd\",  \"current_period_end\": 1682288167,  \"current_period_start\": 1679609767,  \"customer\": \"cus_Na6dX7aXxi11N4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_Na6dzxczY5fwHx\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679609768,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1000,          \"amount_decimal\": \"1000\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"discounts\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1000,          \"unit_amount_decimal\": \"1000\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"  },  \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"schedule\": null,  \"start_date\": 1679609767,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Retrieve a subscription](https://docs.stripe.com/api/subscriptions/retrieve)\n\nRetrieves the subscription with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the subscription object.\n\nGET /v1/subscriptions/:id\n\n```\ncurl https://api.stripe.com/v1/subscriptions/sub_1MowQVLkdIwHu7ixeRlqHVzs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679609767,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679609767,  \"currency\": \"usd\",  \"current_period_end\": 1682288167,  \"current_period_start\": 1679609767,  \"customer\": \"cus_Na6dX7aXxi11N4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"discounts\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_Na6dzxczY5fwHx\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679609768,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1000,          \"amount_decimal\": \"1000\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"discounts\": null,          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679609766,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_Na6dGcTsmU0I4R\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1000,          \"unit_amount_decimal\": \"1000\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"  },  \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"schedule\": null,  \"start_date\": 1679609767,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [List subscriptions](https://docs.stripe.com/api/subscriptions/list)\n\nBy default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify `status=canceled`.\n\n### Parameters\n\n*   The ID of the customer whose subscriptions will be retrieved.\n    \n*   Filter for subscriptions that contain this recurring price ID.\n    \n*   The status of the subscriptions to retrieve. Passing in a value of `canceled` will return all canceled subscriptions, including those belonging to deleted customers. Pass `ended` to find subscriptions that are canceled and subscriptions that are expired due to [incomplete payment](https://docs.stripe.com/billing/subscriptions/overview#subscription-statuses). Passing in a value of `all` will return subscriptions of all statuses. If no value is supplied, all subscriptions that have not been canceled are returned.\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of subscriptions.\n\n```\ncurl -G https://api.stripe.com/v1/subscriptions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscriptions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",      \"object\": \"subscription\",      \"application\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null      },      \"billing_cycle_anchor\": 1679609767,      \"billing_thresholds\": null,      \"cancel_at\": null,      \"cancel_at_period_end\": false,      \"canceled_at\": null,      \"cancellation_details\": {        \"comment\": null,        \"feedback\": null,        \"reason\": null      },      \"collection_method\": \"charge_automatically\",      \"created\": 1679609767,      \"currency\": \"usd\",      \"current_period_end\": 1682288167,      \"current_period_start\": 1679609767,      \"customer\": \"cus_Na6dX7aXxi11N4\",      \"days_until_due\": null,      \"default_payment_method\": null,      \"default_source\": null,      \"default_tax_rates\": [],      \"description\": null,      \"discount\": null,      \"discounts\": null,      \"ended_at\": null,      \"invoice_settings\": {        \"issuer\": {          \"type\": \"self\"        }      },      \"items\": {        \"object\": \"list\",        \"data\": [          {            \"id\": \"si_Na6dzxczY5fwHx\",            \"object\": \"subscription_item\",            \"billing_thresholds\": null,            \"created\": 1679609768,            \"metadata\": {},            \"plan\": {              \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",              \"object\": \"plan\",              \"active\": true,              \"aggregate_usage\": null,              \"amount\": 1000,              \"amount_decimal\": \"1000\",              \"billing_scheme\": \"per_unit\",              \"created\": 1679609766,              \"currency\": \"usd\",              \"discounts\": null,              \"interval\": \"month\",              \"interval_count\": 1,              \"livemode\": false,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_Na6dGcTsmU0I4R\",              \"tiers_mode\": null,              \"transform_usage\": null,              \"trial_period_days\": null,              \"usage_type\": \"licensed\"            },            \"price\": {              \"id\": \"price_1MowQULkdIwHu7ixraBm864M\",              \"object\": \"price\",              \"active\": true,              \"billing_scheme\": \"per_unit\",              \"created\": 1679609766,              \"currency\": \"usd\",              \"custom_unit_amount\": null,              \"livemode\": false,              \"lookup_key\": null,              \"metadata\": {},              \"nickname\": null,              \"product\": \"prod_Na6dGcTsmU0I4R\",              \"recurring\": {                \"aggregate_usage\": null,                \"interval\": \"month\",                \"interval_count\": 1,                \"trial_period_days\": null,                \"usage_type\": \"licensed\"              },              \"tax_behavior\": \"unspecified\",              \"tiers_mode\": null,              \"transform_quantity\": null,              \"type\": \"recurring\",              \"unit_amount\": 1000,              \"unit_amount_decimal\": \"1000\"            },            \"quantity\": 1,            \"subscription\": \"sub_1MowQVLkdIwHu7ixeRlqHVzs\",            \"tax_rates\": []          }        ],        \"has_more\": false,        \"total_count\": 1,        \"url\": \"/v1/subscription_items?subscription=sub_1MowQVLkdIwHu7ixeRlqHVzs\"      },      \"latest_invoice\": \"in_1MowQWLkdIwHu7ixuzkSPfKd\",      \"livemode\": false,      \"metadata\": {},      \"next_pending_invoice_item_invoice\": null,      \"on_behalf_of\": null,      \"pause_collection\": null,      \"payment_settings\": {        \"payment_method_options\": null,        \"payment_method_types\": null,        \"save_default_payment_method\": \"off\"      },      \"pending_invoice_item_interval\": null,      \"pending_setup_intent\": null,      \"pending_update\": null,      \"schedule\": null,      \"start_date\": 1679609767,      \"status\": \"active\",      \"test_clock\": null,      \"transfer_data\": null,      \"trial_end\": null,      \"trial_settings\": {        \"end_behavior\": {          \"missing_payment_method\": \"create_invoice\"        }      },      \"trial_start\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a subscription](https://docs.stripe.com/api/subscriptions/cancel)\n\nCancels a customer’s subscription immediately. The customer will not be charged again for the subscription.\n\nNote, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually [deleted](#delete_invoiceitem). If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.\n\nBy default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n*   #### \n    \n    cancellation\\_detailsobject\n    \n\n### Returns\n\nThe canceled `Subscription` object. Its subscription status will be set to `canceled`.\n\nDELETE /v1/subscriptions/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/subscriptions/sub_1MlPf9LkdIwHu7ixB6VIYRyX \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"sub_1MlPf9LkdIwHu7ixB6VIYRyX\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1678768838,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": 1678768842,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": \"cancellation_requested\"  },  \"collection_method\": \"charge_automatically\",  \"created\": 1678768838,  \"currency\": \"usd\",  \"current_period_end\": 1681447238,  \"current_period_start\": 1678768838,  \"customer\": \"cus_NWSaVkvdacCUi4\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"ended_at\": 1678768842,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_NWSaWTp80M123q\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1678768839,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MlPf7LkdIwHu7ixgcbP7cwE\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1099,          \"amount_decimal\": \"1099\",          \"billing_scheme\": \"per_unit\",          \"created\": 1678768837,          \"currency\": \"usd\",          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NWSaMgipulx8IQ\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MlPf7LkdIwHu7ixgcbP7cwE\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1678768837,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NWSaMgipulx8IQ\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1099,          \"unit_amount_decimal\": \"1099\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MlPf9LkdIwHu7ixB6VIYRyX\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MlPf9LkdIwHu7ixB6VIYRyX\"  },  \"latest_invoice\": \"in_1MlPf9LkdIwHu7ixEo6hdgCw\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"plan\": {    \"id\": \"price_1MlPf7LkdIwHu7ixgcbP7cwE\",    \"object\": \"plan\",    \"active\": true,    \"aggregate_usage\": null,    \"amount\": 1099,    \"amount_decimal\": \"1099\",    \"billing_scheme\": \"per_unit\",    \"created\": 1678768837,    \"currency\": \"usd\",    \"interval\": \"month\",    \"interval_count\": 1,    \"livemode\": false,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NWSaMgipulx8IQ\",    \"tiers_mode\": null,    \"transform_usage\": null,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"quantity\": 1,  \"schedule\": null,  \"start_date\": 1678768838,  \"status\": \"canceled\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```\n\n## [Resume a subscription](https://docs.stripe.com/api/subscriptions/resume)\n\nInitiates resumption of a paused subscription, optionally resetting the billing cycle anchor and creating prorations. If a resumption invoice is generated, it must be paid or marked uncollectible before the subscription will be unpaused. If payment succeeds the subscription will become `active`, and if payment fails the subscription will be `past_due`. The resumption invoice will void automatically if not paid by the expiration date.\n\n### Parameters\n\n*   #### \n    \n    billing\\_cycle\\_anchorstring\n    \n    Either `now` or `unchanged`. Setting the value to `now` resets the subscription’s billing cycle anchor to the current time (in UTC). Setting the value to `unchanged` advances the subscription’s billing cycle anchor to the period that surrounds the current time. For more information, see the billing cycle [documentation](https://docs.stripe.com/billing/subscriptions/billing-cycle).\n    \n*   Determines how to handle [prorations](https://docs.stripe.com/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item’s `quantity` changes. The default value is `create_prorations`.\n    \n    Possible enum values\n    \n    `always_invoice`\n    \n    Always invoice immediately for prorations.\n    \n    `create_prorations`\n    \n    Will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://docs.stripe.com/subscriptions/upgrading-downgrading#immediate-payment).\n    \n    `none`\n    \n    Disable creating prorations in this request.\n    \n\n### More parameters\n\n### Returns\n\nThe subscription object.\n\nPOST /v1/subscriptions/:id/resume\n\n```\ncurl https://api.stripe.com/v1/subscriptions/sub_1MoGGtLkdIwHu7ixk5CfdiqC/resume \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d billing_cycle_anchor=now\n```\n\n```\n{  \"id\": \"sub_1MoGGtLkdIwHu7ixk5CfdiqC\",  \"object\": \"subscription\",  \"application\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_cycle_anchor\": 1679447726,  \"billing_thresholds\": null,  \"cancel_at\": null,  \"cancel_at_period_end\": false,  \"canceled_at\": null,  \"cancellation_details\": {    \"comment\": null,    \"feedback\": null,    \"reason\": null  },  \"collection_method\": \"charge_automatically\",  \"created\": 1679447723,  \"currency\": \"usd\",  \"current_period_end\": 1682126126,  \"current_period_start\": 1679447726,  \"customer\": \"cus_NZP5i1diUz55jp\",  \"days_until_due\": null,  \"default_payment_method\": null,  \"default_source\": null,  \"default_tax_rates\": [],  \"description\": null,  \"discount\": null,  \"ended_at\": null,  \"invoice_settings\": {    \"issuer\": {      \"type\": \"self\"    }  },  \"items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"si_NZP5BhUIuWzXDG\",        \"object\": \"subscription_item\",        \"billing_thresholds\": null,        \"created\": 1679447724,        \"metadata\": {},        \"plan\": {          \"id\": \"price_1MoGGsLkdIwHu7ixA9yHsq2N\",          \"object\": \"plan\",          \"active\": true,          \"aggregate_usage\": null,          \"amount\": 1099,          \"amount_decimal\": \"1099\",          \"billing_scheme\": \"per_unit\",          \"created\": 1679447722,          \"currency\": \"usd\",          \"interval\": \"month\",          \"interval_count\": 1,          \"livemode\": false,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NZP5rEATBlScM9\",          \"tiers_mode\": null,          \"transform_usage\": null,          \"trial_period_days\": null,          \"usage_type\": \"licensed\"        },        \"price\": {          \"id\": \"price_1MoGGsLkdIwHu7ixA9yHsq2N\",          \"object\": \"price\",          \"active\": true,          \"billing_scheme\": \"per_unit\",          \"created\": 1679447722,          \"currency\": \"usd\",          \"custom_unit_amount\": null,          \"livemode\": false,          \"lookup_key\": null,          \"metadata\": {},          \"nickname\": null,          \"product\": \"prod_NZP5rEATBlScM9\",          \"recurring\": {            \"aggregate_usage\": null,            \"interval\": \"month\",            \"interval_count\": 1,            \"trial_period_days\": null,            \"usage_type\": \"licensed\"          },          \"tax_behavior\": \"unspecified\",          \"tiers_mode\": null,          \"transform_quantity\": null,          \"type\": \"recurring\",          \"unit_amount\": 1099,          \"unit_amount_decimal\": \"1099\"        },        \"quantity\": 1,        \"subscription\": \"sub_1MoGGtLkdIwHu7ixk5CfdiqC\",        \"tax_rates\": []      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/subscription_items?subscription=sub_1MoGGtLkdIwHu7ixk5CfdiqC\"  },  \"latest_invoice\": \"in_1MoGGwLkdIwHu7ixHSrelo8X\",  \"livemode\": false,  \"metadata\": {},  \"next_pending_invoice_item_invoice\": null,  \"on_behalf_of\": null,  \"pause_collection\": null,  \"payment_settings\": {    \"payment_method_options\": null,    \"payment_method_types\": null,    \"save_default_payment_method\": \"off\"  },  \"pending_invoice_item_interval\": null,  \"pending_setup_intent\": null,  \"pending_update\": null,  \"plan\": {    \"id\": \"price_1MoGGsLkdIwHu7ixA9yHsq2N\",    \"object\": \"plan\",    \"active\": true,    \"aggregate_usage\": null,    \"amount\": 1099,    \"amount_decimal\": \"1099\",    \"billing_scheme\": \"per_unit\",    \"created\": 1679447722,    \"currency\": \"usd\",    \"interval\": \"month\",    \"interval_count\": 1,    \"livemode\": false,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NZP5rEATBlScM9\",    \"tiers_mode\": null,    \"transform_usage\": null,    \"trial_period_days\": null,    \"usage_type\": \"licensed\"  },  \"quantity\": 1,  \"schedule\": null,  \"start_date\": 1679447723,  \"status\": \"active\",  \"test_clock\": null,  \"transfer_data\": null,  \"trial_end\": null,  \"trial_settings\": {    \"end_behavior\": {      \"missing_payment_method\": \"create_invoice\"    }  },  \"trial_start\": null}\n```",
    "title": "Update a subscription | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/quotes",
    "markdown": "# Quote | Stripe API Reference\n\n## [The Quote object](https://docs.stripe.com/api/quotes/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    line\\_itemsobjectExpandable\n    \n    A list of items the customer is being quoted for.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n\n### More attributes\n\n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n*   #### \n    \n    application\\_fee\\_amountnullable integerConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentnullable floatConnect only\n    \n\n*   #### \n    \n    customernullable stringExpandable\n    \n*   #### \n    \n    default\\_tax\\_ratesarray of stringsExpandable\n    \n*   #### \n    \n    descriptionnullable string\n    \n*   #### \n    \n    discountsarray of stringsExpandable\n    \n\n*   #### \n    \n    from\\_quotenullable object\n    \n\n*   #### \n    \n    invoicenullable stringExpandable\n    \n\n*   #### \n    \n    on\\_behalf\\_ofnullable stringExpandableConnect only\n    \n\n*   #### \n    \n    subscriptionnullable stringExpandable\n    \n\n*   #### \n    \n    subscription\\_schedulenullable stringExpandable\n    \n*   #### \n    \n    test\\_clocknullable stringExpandable\n    \n\n*   #### \n    \n    transfer\\_datanullable objectConnect only\n    \n\n```\n{  \"id\": \"qt_1Mr7wVLkdIwHu7ixJYSiPTGq\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680130691,  \"currency\": \"usd\",  \"customer\": \"cus_NcMfB0SSFHINCV\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682722691,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": null,  \"on_behalf_of\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": null,    \"finalized_at\": null  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Create a quote](https://docs.stripe.com/api/quotes/create)\n\nA quote models prices and services for a customer. Default options for `header`, `description`, `footer`, and `expires_at` can be set in the dashboard via the [quote template](https://dashboard.stripe.com/settings/billing/quote).\n\n### Parameters\n\n*   #### \n    \n    line\\_itemsarray of objects\n    \n    A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the quote object.\n\n```\ncurl https://api.stripe.com/v1/quotes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NcMfB0SSFHINCV \\  -d \"line_items[0][price]\"=price_1Mr7wULkdIwHu7ixhPkIEN2w \\  -d \"line_items[0][quantity]\"=2\n```\n\n```\n{  \"id\": \"qt_1Mr7wVLkdIwHu7ixJYSiPTGq\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680130691,  \"currency\": \"usd\",  \"customer\": \"cus_NcMfB0SSFHINCV\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682722691,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {},  \"number\": null,  \"on_behalf_of\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": null,    \"finalized_at\": null  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Update a quote](https://docs.stripe.com/api/quotes/update)\n\nA quote models prices and services for a customer.\n\n### Parameters\n\n*   #### \n    \n    line\\_itemsarray of objects\n    \n    A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    default\\_tax\\_ratesarray of strings\n    \n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the updated quote object.\n\n```\ncurl https://api.stripe.com/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"qt_1Mr7wVLkdIwHu7ixJYSiPTGq\",  \"object\": \"quote\",  \"amount_subtotal\": 2198,  \"amount_total\": 2198,  \"application\": null,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null,    \"status\": null  },  \"collection_method\": \"charge_automatically\",  \"computed\": {    \"recurring\": null,    \"upfront\": {      \"amount_subtotal\": 2198,      \"amount_total\": 2198,      \"total_details\": {        \"amount_discount\": 0,        \"amount_shipping\": 0,        \"amount_tax\": 0      }    }  },  \"created\": 1680130691,  \"currency\": \"usd\",  \"customer\": \"cus_NcMfB0SSFHINCV\",  \"default_tax_rates\": [],  \"description\": null,  \"discounts\": [],  \"expires_at\": 1682722691,  \"footer\": null,  \"from_quote\": null,  \"header\": null,  \"invoice\": null,  \"invoice_settings\": {    \"days_until_due\": null,    \"issuer\": {      \"type\": \"self\"    }  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"number\": null,  \"on_behalf_of\": null,  \"status\": \"draft\",  \"status_transitions\": {    \"accepted_at\": null,    \"canceled_at\": null,    \"finalized_at\": null  },  \"subscription\": null,  \"subscription_data\": {    \"description\": null,    \"effective_date\": null,    \"trial_period_days\": null  },  \"subscription_schedule\": null,  \"test_clock\": null,  \"total_details\": {    \"amount_discount\": 0,    \"amount_shipping\": 0,    \"amount_tax\": 0  },  \"transfer_data\": null}\n```\n\n## [Retrieve a quote's line items](https://docs.stripe.com/api/quotes/line_items/list)\n\nWhen retrieving a quote, there is an includable **line\\_items** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` quote line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more line items are available, the resulting array will be empty.\n\nGET /v1/quotes/:id/line\\_items\n\n```\ncurl https://api.stripe.com/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/quotes/qt_1Mr7wVLkdIwHu7ixJYSiPTGq/line_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"li_1Mr7wVLkdIwHu7ixBJJ8ww4j\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 2198,      \"amount_tax\": 0,      \"amount_total\": 2198,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1Mr7wULkdIwHu7ixhPkIEN2w\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1680130690,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NcMfZX1FelgpZm\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 2    }    {...}    {...}  ],}\n```",
    "title": "Quote | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payment_links/payment_links/create",
    "markdown": "# Create a payment link | Stripe API Reference\n\nCreates a payment link.\n\n### Parameters\n\n*   #### \n    \n    line\\_itemsarray of objectsRequired\n    \n    The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. Metadata associated with this Payment Link will automatically be copied to [checkout sessions](https://docs.stripe.com/api/checkout/sessions) created by this payment link.\n    \n\n### More parameters\n\n*   #### \n    \n    allow\\_promotion\\_codesboolean\n    \n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    application\\_fee\\_percentfloatConnect only\n    \n\n*   #### \n    \n    billing\\_address\\_collectionenum\n    \n\n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n*   #### \n    \n    payment\\_intent\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_collectionenum\n    \n*   #### \n    \n    payment\\_method\\_typesarray of enums\n    \n*   #### \n    \n    phone\\_number\\_collectionobject\n    \n\n*   #### \n    \n    shipping\\_address\\_collectionobject\n    \n*   #### \n    \n    shipping\\_optionsarray of objects\n    \n\n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns the payment link.\n\n```\ncurl https://api.stripe.com/v1/payment_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"line_items[0][price]\"=price_1MoC3TLkdIwHu7ixcIbKelAC \\  -d \"line_items[0][quantity]\"=1\n```\n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {},  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```\n\n## [Update a payment link](https://docs.stripe.com/api/payment_links/payment_links/update)\n\nUpdates a payment link.\n\n### Parameters\n\n*   Whether the payment link’s `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated.\n    \n*   #### \n    \n    line\\_itemsarray of objects\n    \n    The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. Metadata associated with this Payment Link will automatically be copied to [checkout sessions](https://docs.stripe.com/api/checkout/sessions) created by this payment link.\n    \n\n### More parameters\n\n*   #### \n    \n    allow\\_promotion\\_codesboolean\n    \n\n*   #### \n    \n    billing\\_address\\_collectionenum\n    \n*   #### \n    \n    custom\\_fieldsarray of objects\n    \n\n*   #### \n    \n    payment\\_intent\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_collectionenum\n    \n*   #### \n    \n    payment\\_method\\_typesarray of enums\n    \n\n*   #### \n    \n    shipping\\_address\\_collectionobject\n    \n\n### Returns\n\nUpdated payment link.\n\nPOST /v1/payment\\_links/:id\n\n```\ncurl https://api.stripe.com/v1/payment_links/plink_1MoC3ULkdIwHu7ixZjtGpVl2 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```\n\n## [Retrieve a payment link's line items](https://docs.stripe.com/api/payment_links/line_items)\n\nWhen retrieving a payment link, there is an includable **line\\_items** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` payment link line items, starting after Line Item `starting_after`. Each entry in the array is a separate Line Item object. If no more line items are available, the resulting array will be empty.\n\nGET /v1/payment\\_links/:id/line\\_items\n\n```\ncurl https://api.stripe.com/v1/payment_links/plink_1N4CWjLkdIwHu7ix2Y2F1kqb/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"li_NpsHNiHSaDeU0X\",      \"object\": \"item\",      \"amount_discount\": 0,      \"amount_subtotal\": 1099,      \"amount_tax\": 0,      \"amount_total\": 1099,      \"currency\": \"usd\",      \"description\": \"T-shirt\",      \"price\": {        \"id\": \"price_1N4AEsLkdIwHu7ix7Ssho8Cl\",        \"object\": \"price\",        \"active\": true,        \"billing_scheme\": \"per_unit\",        \"created\": 1683237782,        \"currency\": \"usd\",        \"custom_unit_amount\": null,        \"livemode\": false,        \"lookup_key\": null,        \"metadata\": {},        \"nickname\": null,        \"product\": \"prod_NppuJWzzNnD5Ut\",        \"recurring\": null,        \"tax_behavior\": \"unspecified\",        \"tiers_mode\": null,        \"transform_quantity\": null,        \"type\": \"one_time\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\"      },      \"quantity\": 1    }  ],  \"has_more\": false,  \"url\": \"/v1/payment_links/plink_1N4CWjLkdIwHu7ix2Y2F1kqb/line_items\"}\n```\n\n## [Retrieve payment link](https://docs.stripe.com/api/payment_links/payment_links/retrieve)\n\nRetrieve a payment link.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the payment link.\n\nGET /v1/payment\\_links/:id\n\n```\ncurl https://api.stripe.com/v1/payment_links/plink_1MoC3ULkdIwHu7ixZjtGpVl2 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",  \"object\": \"payment_link\",  \"active\": true,  \"after_completion\": {    \"hosted_confirmation\": {      \"custom_message\": null    },    \"type\": \"hosted_confirmation\"  },  \"allow_promotion_codes\": false,  \"application_fee_amount\": null,  \"application_fee_percent\": null,  \"automatic_tax\": {    \"enabled\": false,    \"liability\": null  },  \"billing_address_collection\": \"auto\",  \"consent_collection\": null,  \"currency\": \"usd\",  \"custom_fields\": [],  \"custom_text\": {    \"shipping_address\": null,    \"submit\": null  },  \"customer_creation\": \"if_required\",  \"invoice_creation\": {    \"enabled\": false,    \"invoice_data\": {      \"account_tax_ids\": null,      \"custom_fields\": null,      \"description\": null,      \"footer\": null,      \"issuer\": null,      \"metadata\": {},      \"rendering_options\": null    }  },  \"livemode\": false,  \"metadata\": {},  \"on_behalf_of\": null,  \"payment_intent_data\": null,  \"payment_method_collection\": \"always\",  \"payment_method_types\": null,  \"phone_number_collection\": {    \"enabled\": false  },  \"shipping_address_collection\": null,  \"shipping_options\": [],  \"submit_type\": \"auto\",  \"subscription_data\": {    \"description\": null,    \"invoice_settings\": {      \"issuer\": {        \"type\": \"self\"      }    },    \"trial_period_days\": null  },  \"tax_id_collection\": {    \"enabled\": false  },  \"transfer_data\": null,  \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"}\n```\n\n## [List all payment links](https://docs.stripe.com/api/payment_links/payment_links/list)\n\nReturns a list of your payment links.\n\n### Parameters\n\n*   Only return payment links that are active or inactive (e.g., pass `false` to list all inactive payment links).\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` payment links, starting after payment link `starting_after`. Each entry in the array is a separate payment link object. If no more payment links are available, the resulting array will be empty. This request should never raise an error.\n\n```\ncurl -G https://api.stripe.com/v1/payment_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/payment_links\",  \"has_more\": false,  \"data\": [    {      \"id\": \"plink_1MoC3ULkdIwHu7ixZjtGpVl2\",      \"object\": \"payment_link\",      \"active\": true,      \"after_completion\": {        \"hosted_confirmation\": {          \"custom_message\": null        },        \"type\": \"hosted_confirmation\"      },      \"allow_promotion_codes\": false,      \"application_fee_amount\": null,      \"application_fee_percent\": null,      \"automatic_tax\": {        \"enabled\": false,        \"liability\": null      },      \"billing_address_collection\": \"auto\",      \"consent_collection\": null,      \"currency\": \"usd\",      \"custom_fields\": [],      \"custom_text\": {        \"shipping_address\": null,        \"submit\": null      },      \"customer_creation\": \"if_required\",      \"invoice_creation\": {        \"enabled\": false,        \"invoice_data\": {          \"account_tax_ids\": null,          \"custom_fields\": null,          \"description\": null,          \"footer\": null,          \"issuer\": null,          \"metadata\": {},          \"rendering_options\": null        }      },      \"livemode\": false,      \"metadata\": {},      \"on_behalf_of\": null,      \"payment_intent_data\": null,      \"payment_method_collection\": \"always\",      \"payment_method_types\": null,      \"phone_number_collection\": {        \"enabled\": false      },      \"shipping_address_collection\": null,      \"shipping_options\": [],      \"submit_type\": \"auto\",      \"subscription_data\": {        \"description\": null,        \"invoice_settings\": {          \"issuer\": {            \"type\": \"self\"          }        },        \"trial_period_days\": null      },      \"tax_id_collection\": {        \"enabled\": false      },      \"transfer_data\": null,      \"url\": \"https://buy.stripe.com/test_cN25nr0iZ7bUa7meUY\"    }    {...}    {...}  ],}\n```",
    "title": "Create a payment link | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/asia-pacific",
    "markdown": "# Collect tax in Asia Pacific\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in APAC.\n\nIn the Asia Pacific (APAC) region, Stripe supports tax calculation in the following countries. Click the links below to learn about the thresholds in each country and the types of goods and services we support.\n\n*   [](https://docs.stripe.com/tax/supported-countries/asia-pacific/australia)\n*   [](https://docs.stripe.com/tax/supported-countries/asia-pacific/georgia)\n*   [](https://docs.stripe.com/tax/supported-countries/asia-pacific/hong-kong)\n*   [](https://docs.stripe.com/tax/supported-countries/asia-pacific/indonesia)\n*   [](https://docs.stripe.com/tax/supported-countries/asia-pacific/japan)\n*   [](https://docs.stripe.com/tax/supported-countries/asia-pacific/malaysia)\n*   [](https://docs.stripe.com/tax/supported-countries/asia-pacific/new-zealand)\n*   [](https://docs.stripe.com/tax/supported-countries/asia-pacific/singapore)\n*   [](https://docs.stripe.com/tax/supported-countries/asia-pacific/south-korea)\n*   [](https://docs.stripe.com/tax/supported-countries/asia-pacific/thailand)\n*   [](https://docs.stripe.com/tax/supported-countries/asia-pacific/vietnam)\n\n## When and how to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are different rules for when and how you need to register to collect tax depending on the country. Click the links above to learn about the thresholds for tax collection in each location.\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in each location. Stripe only monitors if you have reached a tax threshold for sales outside of the country your business is based in. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nIn Indonesia, Malaysia, South Korea, Thailand, and Vietnam, your business needs to be a remote seller with no physical presence (such as a shop or warehouse) to collect tax on Stripe.\n\nAfter you’ve registered with a country, add your registration to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard to start collecting tax on your transactions in that location.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe only supports calculation for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) in Indonesia, Malaysia, South Korea, Thailand, and Vietnam sold by remote sellers. For the other countries listed, Stripe can calculate tax for [any of the product tax codes you assign to your products](https://docs.stripe.com/tax/tax-codes) and for domestic and cross-border sales.\n\n### Domestic transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA transaction where your business and your customer are in the same country is called a domestic transaction. Stripe assumes the sale of most goods or services to be taxable unless the tax authority has specifically made them exempt.\n\n### Cross border transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA cross-border transaction is where your customer is located in a different country to your business or when goods are shipped from one country to another.\n\nStripe calculates tax on a cross-border transaction taking into account the following factors:\n\n*   the location of your business\n*   the tax registrations you’ve added to Stripe\n*   the location of the buyer\n*   the type of the product sold (based on which [product tax code](https://docs.stripe.com/tax/tax-codes) you assigned to your product)\n*   the status of the customer (whether they’re an individual or a business)\n\n#### Digital products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDigital products are non-physical items or services that are delivered, given, or rendered electronically. This includes digital goods and electronically supplied services. We determine whether you’re selling digital products or physical goods using the [product tax code](https://docs.stripe.com/tax/tax-codes) you assigned to your product.\n\nDigital products are generally taxable in the country where your customer is located. However sales of digital products to businesses in other countries might have reverse charge applied. With reverse charge, your business provides an invoice for the purchase so that your customer can calculate the tax.\n\n#### Physical goods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen physical goods are shipped to a customer in a different country to your business, the transaction is referred to as an export. Exports are zero rated and Stripe applies the [zero rate](https://docs.stripe.com/tax/zero-tax). The transaction might still be subject to taxes and customs duties in the country your customer is in. Stripe doesn’t calculate these.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes. Stripe doesn’t file taxes on your behalf.",
    "title": "Collect tax in Asia Pacific | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in APAC.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa",
    "markdown": "# Collect tax in Europe, Middle East, and Africa\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in EMEA.\n\nIn the Europe, Middle East and Africa (EMEA) region, Stripe supports tax calculation in the following countries. Stripe also supports tax calculation in all of the countries in the European Union (EU). Learn more about [tax support for the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\nClick the links below to learn about the thresholds in each country and the types of goods and services we support.\n\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/bahrain)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/egypt)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/iceland)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/kazakhstan)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/kenya)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/nigeria)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/norway)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/oman)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/saudi-arabia)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/south-africa)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/switzerland)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/turkiye)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/united-arab-emirates)\n*   [](https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/united-kingdom)\n\n## When and how to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent rules determine when and how you need to register to collect tax depending on the country. Click the links above to learn about the thresholds for tax collection in each location.\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in each location. Stripe only monitors if you have reached a tax threshold for sales outside of the country your business is based in. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nIn Iceland, Saudi Arabia, South Africa, and Türkiye, your business needs to be a remote seller with no physical presence (such as a shop or warehouse) to collect tax on Stripe.\n\nAfter you’ve registered with a country, add your registration to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard to start collecting tax on your transactions in that location.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhat you sell and where you sell impacts how tax is calculated on your sales. There are also different rules that apply when your customer is located in the same country as your business or located somewhere else.\n\n### Domestic transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA transaction where your business and your customer are in the same country is called a domestic transaction. Stripe assumes the sale of most goods or services to be taxable unless the tax authority has specifically made them exempt. In this region, Stripe only supports calculation for domestic transactions in Norway, Switzerland, United Arab Emirates, and the United Kingdom.\n\n### Cross border transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA cross-border transaction is where your customer is located in a different country to your business or when goods are shipped from one country to another.\n\nStripe calculates tax on a cross-border transaction taking into account the following factors:\n\n*   the location of your business\n*   the tax registrations you’ve added to Stripe\n*   the location of the buyer\n*   the type of the product sold (based on which [product tax code](https://docs.stripe.com/tax/tax-codes) you assigned to your product)\n*   the status of the customer (whether they’re an individual or a business)\n\n#### Digital products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDigital products are non-physical items or services that are delivered, given, or rendered electronically. This includes digital goods and electronically supplied services. We determine whether you’re selling digital products or physical goods using the [product tax code](https://docs.stripe.com/tax/tax-codes) you assigned to your product.\n\nDigital products are generally taxable in the country where your customer is located. However sales of digital products to businesses in other countries might have reverse charge applied. With reverse charge, your business provides an invoice for the purchase so that your customer can calculate the tax.\n\n#### Physical goods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen physical goods are shipped to a customer in a different country to your business, the transaction is referred to as an export. Exports are zero rated and Stripe applies the [zero rate](https://docs.stripe.com/tax/zero-tax). The transaction might still be subject to taxes and customs duties in the country your customer is in. Stripe doesn’t calculate these.\n\nIn Saudi Arabia and Türkiye, Stripe only supports calculation for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) and not physical goods.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes. Stripe doesn’t file taxes on your behalf.",
    "title": "Collect tax in Europe, Middle East, and Africa | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in EMEA.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union",
    "markdown": "# Collect tax in the European Union\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in the European Union.\n\nBusinesses selling goods and services to customers in the European Union (EU) may need to collect value added tax (VAT). That’s the case even if your business isn’t established (based) in the EU. Although the VAT laws are generally similar across the EU, the tax rates and rules may vary per country.\n\n## When and how to register![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent rules determine when and how you need to register for VAT, depending on the country your business is located in. After you’ve registered with a country, add your registration to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard to start collecting tax on your transactions. Learn more about the different registration schemes [in our guide](https://stripe.com/guides/introduction-to-eu-vat-and-vat-oss).\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in each country in the European Union. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\n[](#eu-businesses)\n\n### Domestic registration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDomestic registration is the standard VAT registration for businesses selling goods and services within an EU country. Any business can register, regardless of their physical location.\n\nSome EU countries allow businesses to wait to register for VAT until their sales exceed a certain amount (tax registration threshold). However, other EU countries require all businesses to register, regardless of sales volume. Those countries use tax collection thresholds. Businesses below the threshold can apply for special schemes that exempt them from VAT collection obligations. For detailed information, visit the tax administration websites of each country.\n\nStripe monitors your registration obligations in the EU countries other than the country where your business is based. You can add your domestic registration to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard to start collecting tax.\n\nIf you sell digital services or imported low-value goods exclusively through online marketplaces and the marketplace operator is responsible for collecting tax on these sales, you aren’t required to register for VAT in the countries where your customers are located.\n\n#### Smaller sellers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you sell to customers in other EU countries, you might need to register in those countries too. You don’t need to register in other EU countries if:\n\n*   your total sales are under 10,000 EUR in a calendar year **and**\n*   you sell digital products or physical goods **and**\n*   your sales are to individuals and not businesses in another EU country\n\nThe VAT rate of the EU country your business is based in applies instead. Stripe refers to this simplification rule as the small seller option. We determine whether you’re selling digital products or physical goods using the [product tax code](https://docs.stripe.com/tax/tax-codes) you assigned to your product.\n\nWhen you select the ‘domestic registration’ option, you’re asked to indicate if your business is a small seller with sales below the 10,000 EUR threshold. You only see this option for the country that you have set as your [origin address](https://docs.stripe.com/tax/set-up#origin-address). If you choose yes, we monitor your cross-border transactions in the EU and notify you when you exceed that threshold.\n\nAfter you exceed the small seller threshold, you’re required to collect tax in the country your customers are located in. You can do so in two ways:\n\n*   Register domestically in the EU countries your customers are located in\n*   Register for the [Union One Stop Shop (OSS) scheme](https://vat-one-stop-shop.ec.europa.eu/one-stop-shop_en) in your home EU country.\n\nThere are three steps to reflect this change in Stripe:\n\n1.  End your domestic small seller registration in Stripe on the [Registrations tab](https://dashboard.stripe.com/tax/registrations).\n2.  Add a new domestic registration for the location your business is based and select **no** when you’re asked if you are a small seller.\n3.  Add any other new domestic or One Stop Shop registrations to start collecting tax in those locations.\n\n### Union One Stop Shop (OSS) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you sell goods or services to individuals (and not to businesses), you can register for the Union One Stop Shop (OSS) scheme in the EU country your business is based in. You won’t have to register with each EU country you sell goods or services to. Instead you’ll be able to register for OSS through your home country VAT website and submit one return for your sales across the EU. You’ll remit all VAT to your local tax authority who will distribute it to the countries where your customers are located.\n\nLearn more about [One-Stop Shop](https://stripe.com/guides/introduction-to-eu-vat-and-vat-oss). Select the country your business is based in [from the table](https://docs.stripe.com/tax/supported-countries/european-union#eu-countries) if you need help finding the right links.\n\n### Import One Stop Shop (IOSS) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you sell physical goods to individuals in the EU and the goods are imported from outside of the EU in packages (consignments) that are valued at or below 150 EUR, you can register for Import One Stop Shop in the EU country where you’re based. This means your customer pays VAT when they buy the goods and not when the goods arrive at the border in the EU. After you’re registered, you can collect VAT on your sales of these goods to customers across the EU without having to register in every country. You also only submit one return to the country you’re based in for the sales of these goods. Stripe assumes that goods purchased together are shipped together. If a transaction is over 150 EUR, IOSS won’t apply, which means your customers are charged by Customs when the goods arrive at the border in the EU.\n\n[](#outside-eu-businesses)\n\nIf your business is based outside the EU, you may need to register to collect VAT from your first sale in an EU country. There are different VAT registration options for businesses based outside the EU.\n\n### Domestic registration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can register to collect VAT in each EU country your customers are based in. You may be required to appoint a tax representative, depending on the country you and your customer are located in.\n\nSelect the country your customer is based in from the list in the sidebar if you need help finding the right links.\n\nIf you sell digital services or goods exclusively through online marketplaces and the marketplace operator is responsible for collecting tax on these sales, you’re not required to register for VAT.\n\n### Non-Union One Stop Shop (OSS) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis scheme is for businesses based outside the EU selling services to individuals in the EU. You can choose which EU country you register in. Once you’re registered, you can collect VAT on your sales to customers across the EU without having to register in every country. You’ll also only submit one return for all your EU sales to the country you registered in. You do not need to appoint a tax representative to use the OSS non-Union scheme.\n\n### Import One Stop Shop (IOSS) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you sell physical goods to individuals in the EU and the goods are imported in packages (consignments) that are valued at or under 150 EUR, you can register in the EU country of your choice for Import One Stop Shop. This means your customer pays VAT when they buy the goods and not when the goods arrive at the border in the EU. After you register, you can collect VAT on your sales of these goods to customers across the EU without having to register in every country. You’ll also only submit one return for all your EU sales to the country you registered in. Businesses based outside the EU normally need to appoint a local intermediary to register for IOSS. Stripe assumes that goods purchased together are shipped together. If a transaction is over 150 EUR, IOSS won’t apply, which means your customers might have to pay taxes and customs duties when the goods arrive at the border in the EU.\n\n### Union One Stop Shop (OSS) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBusinesses based outside of the EU can use this scheme if they sell physical goods that are located in an EU country and shipped to individuals in other EU countries.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates VAT on a transaction using the following pieces of information:\n\n*   the location of your business\n*   the tax registrations you’ve added to Stripe\n*   the location of the customer\n*   the type of the product sold (based on which [product tax code](https://docs.stripe.com/tax/tax-codes) you assigned to your product)\n*   the status of the customer (whether or not they’re a VAT-registered business).\n\n[](#services)\n\nWhen your business is located in the same country as your customer, Stripe calculates VAT by applying that country’s tax rates.\n\nWhen you and your customer are in different countries (cross-border sales), there are more complicated rules that apply. These rules determine where the services are considered to be delivered and which country is entitled to collect the tax. Here’s a summary of how Stripe applies tax on sales of services:\n\n*   **Digital goods or electronically supplied services**: Generally taxable in the customer’s country. If you’ve indicated your business is a [small seller](https://docs.stripe.com/tax/supported-countries/european-union#eu-businesses-domestic-registration-small-sellers) the VAT of the country your business is based in applies.\n    \n*   **Services related to immovable property**: Taxable in the country where the property is located. Stripe assumes that the property is located in the customer’s country.\n    \n*   **Services involving work on movable property**: Taxable in the customer’s country as Stripe assumes that the work is performed in the customer’s country.\n    \n*   **Services that can be delivered remotely**: Taxable in the customer’s country when they’re provided to individuals outside the European Union or other businesses. When they’re provided to individuals in other EU countries, they’re taxable in the seller’s country.\n    \n*   **Other services**: Taxable in the country your business is based in when provided to individuals. Taxable in the customer’s country when provided to other businesses. These rules apply if you select a [product tax code](https://docs.stripe.com/tax/tax-codes) `txcd_20030000` General - Services.\n    \n\n### Reverse charge![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn some cases, when you sell services to a VAT-registered business in another EU country, the customer is responsible for calculating and remitting the VAT. Those transactions are called [reverse charge](https://docs.stripe.com/tax/zero-tax#reverse-charges \"reverse_charge_mechanism\"). Your business must provide an invoice that specifies the reverse charge instead of including a tax amount.\n\nIf your customer is eligible for a reverse charge and provides their VAT ID in Stripe, we treat their transactions as a reverse charge and don’t calculate tax for them. If your customer provides a domestic tax identification number, reverse charge doesn’t apply. The transaction is treated as a business-to-consumer (B2C) sale, and VAT rules for B2C transactions are followed.\n\nYou can also mark a customer as eligible for [reverse charge](https://docs.stripe.com/tax/zero-tax#reverse-charges) in the Dashboard or using the API, even if you haven’t collected a tax ID for that customer. For information about which tax IDs Stripe validates, see [customer tax IDs](https://docs.stripe.com/invoicing/customer/tax-ids).\n\nStripe doesn’t support the following types of reverse charge:\n\n*   **Domestic reverse charge**: In some EU countries, a reverse charge can apply to the sale of some goods and services between businesses in that country. Stripe supports reverse charge only for cross-border sales, not for sales within the same country.\n*   **Cross-border conditions**: Some EU countries have conditions under which types of services are eligible for reverse charge. For example, a country can require you to have a domestic registration. Stripe assumes that all services sold to customers with a business tax ID are eligible for reverse charge.\n\n[](#physical-goods)\n\nWhen your business is located in the same country as your customer and the goods are shipped within that country, Stripe calculates tax by applying that country’s tax rates.\n\nWhen the goods are shipped to a customer in a different EU country to your business, Stripe calculates the tax based on the type of customer. Different rules apply depending on if your customer is an individual or a VAT registered business.\n\n*   **Sales to an individual**: if the sales are to an individual and your business arranges the delivery (transport) then the goods are taxed using the rules of the country your customer is based in. The exception is if you’re an EU based business and have indicated your business is a [small seller](https://docs.stripe.com/tax/supported-countries/european-union#eu-businesses-domestic-registration-small-sellers) in Stripe. The tax of the country your business is based in will apply instead.\n*   **Sales to a VAT registered business**: the sales are taxable in the country your business is based in. Stripe applies the zero rate if the customer provides their VAT ID number. If you sell to a business in another EU country and your customer doesn’t provide a valid VAT ID number, you should collect VAT from the country your business is based in. However, Stripe processes these sales in the same way it processes a sale to an individual.\n\nWhen the goods are shipped to a customer outside of the EU, Stripe Tax will treat this sale as an export and [apply the zero rate](https://docs.stripe.com/tax/zero-tax). The transaction might still be subject to taxes and customs duties in the country your customer is in. Stripe doesn’t calculate these.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions in the EU. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nThe way you file tax returns and pay (remit) your taxes will depend on which types of registrations you have.\n\n*   **Domestic registration**: you’ll file your tax returns in each country you have a registration. Some EU countries may require you to appoint a local tax representative to do this if you are not based in the EU.\n*   **One Stop Shop**: you’ll file your tax returns for all your eligible sales across the EU with the country you have a One Stop Shop registration in. If you use different OSS schemes, you need to submit a separate return for each scheme. Learn more about [One-Stop Shop](https://stripe.com/guides/introduction-to-eu-vat-and-vat-oss#4-file-vat-returns).\n\nSelect the country you need to file in from the list in the sidebar if you need help finding the right links. You are responsible for filing and remitting your taxes in the EU. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.\n\n## Marketplace tax liability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe EU uses the term “deemed sellers” to refer to marketplace operators that might have tax collection obligations. To qualify as a deemed seller, the business must set terms or conditions for the sale, process or enable customer payments, or handle ordering or delivery of the product. A business isn’t considered a deemed seller if it only processes payments, lists or advertises goods, or redirects customers to other websites or apps without further involvement in the sale.\n\nThe tax collection obligation for marketplace operators usually applies to:\n\n*   Sales of digital services.\n*   Sales of goods by non-EU sellers to EU individuals if the goods are located in the EU at the point of sale.\n*   Sales of goods to EU individuals where the goods are imported into the EU in packages valued at 150 EUR or less.\n\nMarketplace operators facilitating other types of sales might be required to collect VAT on these sales based on other indicators and contractual arrangements.\n\nA marketplace operator that collects VAT on a sale is treated as if it were buying the product from the merchant and selling it to the customer. This only applies for VAT purposes and doesn’t change the commercial position where the title to the product passes from the seller to the buyer.",
    "title": "Collect tax in the European Union | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in the European Union.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/latin-america",
    "markdown": "# Collect tax in Latin America\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in LATAM.\n\nIn the Latin America (LATAM) region, Stripe supports tax calculation in the following countries. Click the following links to learn about the thresholds in each country and the types of goods and services we support.\n\n*   [](https://docs.stripe.com/tax/supported-countries/latin-america/chile)\n*   [](https://docs.stripe.com/tax/supported-countries/latin-america/colombia)\n*   [](https://docs.stripe.com/tax/supported-countries/latin-america/mexico)\n\n## When and how to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent rules determine when and how you need to register to collect tax depending on the country. Click the links above to learn about the thresholds for tax collection in each location.\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in each location. Stripe only monitors if you have reached a tax threshold for sales outside of the country your business is based in. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nIn Chile, Colombia, and Mexico your business needs to be a remote seller with no physical presence (such as a shop or warehouse) to collect tax on Stripe.\n\nAfter you’ve registered with a country, add your registration to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard to start collecting tax on your transactions in that location.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe only supports calculation for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) in Chile, Colombia, and Mexico sold by remote sellers.\n\n### Domestic transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA transaction where your business and your customer are in the same country is called a domestic transaction. Stripe doesn’t yet support calculation on domestic transactions in this region.\n\n### Cross border transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA cross-border transaction is where your customer is located in a different country to your business or when goods are shipped from one country to another.\n\nStripe calculates tax on a cross-border transaction taking into account the following factors:\n\n*   the location of your business\n*   the tax registrations you’ve added to Stripe\n*   the location of the buyer\n*   the type of the product sold (based on which [product tax code](https://docs.stripe.com/tax/tax-codes) you assigned to your product)\n*   the status of the customer (whether they’re an individual or a business)\n\n#### Digital products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDigital products are non-physical items or services that are delivered, given, or rendered electronically. This includes digital goods and electronically supplied services. We determine whether you’re selling digital products or physical goods using the [product tax code](https://docs.stripe.com/tax/tax-codes) you assigned to your product.\n\nDigital products are generally taxable in the country where your customer is located. However sales of digital products to businesses in other countries might have reverse charge applied. With reverse charge, your business provides an invoice for the purchase so that your customer can calculate the tax.\n\n#### Physical goods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen physical goods are shipped to a customer in a different country to your business, the transaction is referred to as an export. Stripe doesn’t yet support calculation on exports of physical goods in this region.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes. Stripe doesn’t file taxes on your behalf.",
    "title": "Collect tax in Latin America | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in LATAM.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/bahrain",
    "markdown": "# Collect tax in Bahrain | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Bahrain.\n\nIn Bahrain, Stripe only supports collecting VAT for electronic services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Bahrain. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to consumers in Bahrain have no registration threshold; they must register for VAT purposes from the first sale. Sales to business customers in Bahrain don’t trigger any tax registration obligations because non-resident businesses aren’t required to collect tax on these sales.\n\n*   **Threshold**: 1 transaction\n*   **Included transactions**: Business-to-consumer (B2C) sales of digital goods or electronically supplied services (digital products)\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Bahrain to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Bahrain on the [government website](https://www.nbr.gov.bh/vat_registration) (Arabic content).\n\nAfter you’ve registered to collect tax in Bahrain, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=bh) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Bahrain.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Bahrain. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Bahrain, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Bahrain. Stripe doesn’t file taxes on your behalf.",
    "title": "Collect tax in Bahrain | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Bahrain.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/slovenia",
    "markdown": "# Collect tax in Slovenia | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Slovenia.\n\nSlovenia is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Slovenia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Slovenia on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Slovenia.\n\n*   [Domestic VAT registration](https://edavki.durs.si/EdavkiPortal/OpenPortal/CommonPages/Opdynp/PageC.aspx?category=davek_na_dodano_vrednost_podjetja)\n*   [One-Stop Shop registration schemes](https://edavki.durs.si/EdavkiPortal/OpenPortal/CommonPages/Opdynp/PageC.aspx?category=posebna_ureditev_moss_ddv_podjetja)\n\nAfter you’ve registered to collect tax in Slovenia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=si) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Slovenia.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSlovenia applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Slovenia. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Slovenia | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Slovenia.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/egypt",
    "markdown": "# Collect tax in Egypt | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Egypt.\n\nIn Egypt, Stripe only supports collecting VAT for digital services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Egypt. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to consumers in Egypt have a registration threshold of EGP 500,000 for a rolling 12 month period. Sales to business customers in Egypt don’t trigger any tax registration obligations because non-resident businesses aren’t required to collect tax on these sales.\n\n*   **Threshold**: 500,000 EGP\n*   **Time frame**: rolling 12 months\n*   **Included transactions**: Business-to-consumer (B2C) sales of digital goods or electronically supplied services (digital products)\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Egypt to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Egypt on the [government website](https://www.eta.gov.eg/en/digital-services).\n\nAfter you’ve registered to collect tax in Egypt, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=eg) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Egypt.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Egypt. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Egypt, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Egypt. Stripe doesn’t file taxes on your behalf.",
    "title": "Collect tax in Egypt | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Egypt.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/south-africa",
    "markdown": "# Collect tax in South Africa\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in South Africa.\n\nIn South Africa, Stripe Tax supports calculation and collection of [VAT](https://www.sars.gov.za/types-of-tax/value-added-tax/) for remote sellers. You must have no physical presence in the country to collect this tax on Stripe.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in South Africa. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nA non-resident business supplying goods and services in South Africa becomes liable to be registered if the total value of taxable sales is more than 1 million ZAR in a 12-month period, or is expected to exceed this amount. Where a non-resident company is liable to register for VAT purposes, they must appoint a VAT representative. The obligation to appoint a VAT representative doesn’t apply to providers of digital services.\n\nNon-residents supplying digital services from a place outside South Africa to South African customers (both B2B and B2C) must register by the end of any month if they exceed the threshold of 1 million ZAR in any consecutive 12-month period and any two of the following three circumstances apply:\n\n*   The recipient of the services is a resident of South Africa\n*   The payment for the services originates from a bank registered under the Banks Act 94 of 1990 (the Banks Act)\n*   The recipient of the services has a business, residential, or postal address in South Africa\n\nFor example, if you’re based outside of South Africa and sell digital services to consumers in South Africa and cross the threshold during any 12-month period (from February of the past year to January of the current year, for example) you must register by the end of the month that you crossed the threshold in.\n\n**Threshold**: 1 million ZAR\n\n**Period**: 12 months\n\n**Included transactions**: Any taxable transaction.\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFind more information on how to register for VAT in South Africa on the government website:\n\n*   [General information about VAT in South Africa](https://www.sars.gov.za/types-of-tax/value-added-tax/)\n*   [How to register](https://www.sars.gov.za/types-of-tax/value-added-tax/register-for-vat/)\n\nAfter you’ve registered to collect tax in South Africa, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=za) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in South Africa.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates VAT for your transactions in South Africa.\n\nGenerally, most transactions are taxable in the jurisdiction where your customer is. Stripe assumes the sale of most goods or services to be taxable unless specifically exempted.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to South Africa. Stripe doesn’t file taxes on your behalf. However, we do have trusted partners who can help manage your filing and remittance.",
    "title": "Collect tax in South Africa | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in South Africa.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/asia-pacific/georgia",
    "markdown": "# Collect tax in Georgia | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Georgia.\n\nIn Georgia, Stripe only supports collecting [VAT](https://nr.rs.ge/home) for electronically supplied services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Georgia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing electronically supplied services (digital products) to individuals in Georgia have no registration threshold. The Georgian tax administration refers to a remote seller as a “foreign taxable person that pays VAT without an obligation of registration.”\n\n*   **Threshold**: 1 transaction\n*   **Included transactions**: Business-to-consumer (B2C) sales of digital goods and services\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Georgia to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Georgia on the [government website](https://nr.rs.ge/home).\n\nAfter you’ve registered to collect tax in Georgia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=ge) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Georgia.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Georgia. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Georgia, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Georgia. Stripe doesn’t file taxes on your behalf.",
    "title": "Collect tax in Georgia | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Georgia.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/spain",
    "markdown": "# Collect tax in Spain | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Spain.\n\nSpain is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Spain. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Spain on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Spain.\n\n*   [General information and domestic VAT registration](https://sede.agenciatributaria.gob.es/Sede/en_gb/iva.html)\n*   [One-Stop Shop registration schemes](https://sede.agenciatributaria.gob.es/Sede/en_gb/iva/iva-comercio-electronico/nuevos-regimenes-especiales-ventanilla-unica.html)\n\nAfter you’ve registered to collect tax in Spain, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=es) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Spain.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSpain applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\nIn Spain, there are some territories outside of the scope of the standard tax system and might have different rules that apply. Stripe won’t calculate tax for customers based there, even if you’ve added a registration for Spain. Learn more about how Stripe handles [excluded territories](https://docs.stripe.com/tax/zero-tax?#excluded-territories). This applies to the following locations:\n\n*   Canary Islands\n*   Ceuta\n*   Melilla\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Spain. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Spain | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Spain.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/kazakhstan",
    "markdown": "# Collect tax in Kazakhstan | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Kazakhstan.\n\nIn Kazakhstan, Stripe only supports collecting VAT for digital services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Kazakhstan. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to consumers in Kazakhstan have no registration threshold; they must register for VAT purposes from the first sale. Sales to business customers in Kazakhstan don’t trigger any tax registration obligations because non-resident businesses aren’t required to collect tax on these sales.\n\n*   **Threshold**: 1 transaction\n*   **Included transactions**: Business-to-consumer (B2C) sales of digital goods or electronically supplied services (digital products)\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Kazakhstan to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Kazakhstan on the [government website](https://kgd.gov.kz/en/content/taxation-foreign-companies-engaged-electronic-trade-goods-and-provision-electronic-services).\n\nAfter you’ve registered to collect tax in Kazakhstan, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=kz) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Kazakhstan.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Kazakhstan. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Kazakhstan, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Kazakhstan. Stripe doesn’t file taxes on your behalf.",
    "title": "Collect tax in Kazakhstan | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Kazakhstan.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/kenya",
    "markdown": "# Collect tax in Kenya | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Kenya.\n\nIn Kenya, Stripe only supports collecting VAT for electronic, internet and digital marketplace supplies. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Kenya. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to both businesses and individuals in Kenya have no registration threshold; they must register for VAT within 30 days after the first sale.\n\n**Threshold**: 1 transaction **Included transactions**: Business-to-consumer (B2C) and business-to-business (B2B) sales of digital goods or electronically supplied services (digital products)\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Kenya to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Kenya on the [government website](https://kra.go.ke/individual/filing-paying/types-of-taxes/value-added-tax) and in this [guide for remote sellers](https://www.kra.go.ke/images/publications/USERGUIDE---DST-NON-RESIDENT-REGISTRATION-REVIEWED-FINAL-18.12.2020-1.pdf).\n\nAfter you’ve registered to collect tax in Kenya, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=ke) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Kenya.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Kenya. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Kenya, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Kenya. Stripe doesn’t file taxes on your behalf.",
    "title": "Collect tax in Kenya | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Kenya.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/finland",
    "markdown": "# Collect tax in Finland | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Finland.\n\nFinland is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Finland. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Finland on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Finland.\n\n*   [VAT information and domestic registration](https://www.vero.fi/en/businesses-and-corporations/taxes-and-charges/vat/)\n*   [One-Stop Shop registration schemes](https://www.vero.fi/en/businesses-and-corporations/taxes-and-charges/vat/international-commerce/arvonlis%C3%A4veron-erityisj%C3%A4rjestelm%C3%A4t-onestopshop/)\n\nAfter you’ve registered to collect tax in Finland, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=fi) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Finland.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFinland applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\nIn Finland, the Åland Islands are outside of the scope of the standard tax system and might have different rules that apply. Stripe won’t calculate tax for customers based there, even if you’ve added a registration for Finland. Learn more about how Stripe handles [excluded territories](https://docs.stripe.com/tax/zero-tax?#excluded-territories).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Finland. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Finland | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Finland.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/sweden",
    "markdown": "# Collect tax in Sweden | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Sweden.\n\nSweden is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Sweden. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Sweden on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Sweden.\n\n*   [General information and domestic VAT registration](https://www.skatteverket.se/servicelankar/otherlanguages/inenglishengelska/businessesandemployers/startingandrunningaswedishbusiness/declaringtaxesbusinesses/vat.4.12815e4f14a62bc048f52be.html)\n*   [One-Stop Shop registration schemes](https://www.skatteverket.se/servicelankar/otherlanguages/inenglishengelska/businessesandemployers/startingandrunningaswedishbusiness/declaringtaxesbusinesses/vat/reportvatunderthespecialschemesoss.4.1997e70d1848dabbac92128.html)\n\nAfter you’ve registered to collect tax in Sweden, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=se) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Sweden.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSweden applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Sweden. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Sweden | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Sweden.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/switzerland",
    "markdown": "# Collect tax in Switzerland | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Switzerland.\n\nIn Switzerland, Stripe Tax supports calculation and collection of [VAT](https://www.estv.admin.ch/estv/en/home/value-added-tax.html).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Switzerland. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nIf your global taxable turnover exceeds 100,000 CHF in a calendar year and you’re based outside Switzerland, appoint a fiscal representative and register in Switzerland with your first taxable transaction there. You don’t need to register if:\n\n*   You only sell to Swiss businesses (B2B sales) and the sales are subject to reverse charge in Switzerland.\n*   You only provide tax exempt services to customers in Switzerland.\n\nIf you operate outside Switzerland and perform a taxable sale within Switzerland while your global taxable turnover remains below 100,000 CHF, you must register if it’s probable that your global taxable turnover surpasses 100,000 CHF in the next 12 months.\n\n**Threshold**: 100,000 CHF (global)\n\n**Period**: 12 months\n\n**Included transactions**: Taxable transactions perfomed in and outside Switzerland.\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nForeign businesses must appoint a fiscal representative to register for VAT purposes in Switzerland and provide cash or bank guarantee for future VAT liabilities.\n\nFind more information on how to register for VAT in Switzerland on the [government website](https://www.estv.admin.ch/estv/en/home/value-added-tax.html).\n\nAfter you’ve registered to collect tax in Switzerland, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=ch) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Switzerland.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates VAT for your transactions in Switzerland. Stripe considers most goods or services sales taxable unless explicitly exempted.\n\nMost services provided by foreign businesses that aren’t registered for VAT in Switzerland are subject to reverse charge. Switzerland applies reverse charge to sales of services to both VAT-registered businesses and individuals who acquire services exceed more than 10,000 CHF in a calendar from abroad. However, after foreign sellers register for Swiss VAT, they must charge VAT on all taxable services to Swiss businesses and individuals because the reverse charge no longer applies.\n\nStripe doesn’t support the special rules requiring foreign businesses to charge Swiss VAT on the sale of goods to Swiss customers if their sales of low-value goods exempt from import VAT exceed the annual threshold of 100,000 CHF. Swiss law categorizes low-value goods as those where import VAT would be less than 5 CHF. Depending on the VAT rate, this includes goods valued up to 62 CHF (if taxed at 8.1%) or up to 193 CHF (if taxed at 2.6%).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Switzerland. Stripe doesn’t file taxes on your behalf. However, we do have trusted partners who can help manage your filing and remittance.",
    "title": "Collect tax in Switzerland | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Switzerland.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/nigeria",
    "markdown": "# Collect tax in Nigeria | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Nigeria.\n\nIn Nigeria, Stripe only supports collecting VAT for digital services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Nigeria. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to both businesses and individuals in Nigeria have no registration threshold; they must register for VAT purposes from the first sale.\n\n*   **Threshold**: 25,000 USD\n*   **Time frame**: 12 months\n*   **Included transactions**: Business-to-consumer (B2C) and Business-to-business (B2B) sales of digital goods or electronically supplied services (digital products)\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Nigeria to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Nigeria on the [government website](https://taxpromax.firs.gov.ng/nrtpPreregistrationPage).\n\nAfter you’ve registered to collect tax in Nigeria, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=ng) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Nigeria.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Nigeria. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Nigeria, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Nigeria. Stripe doesn’t file taxes on your behalf.",
    "title": "Collect tax in Nigeria | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Nigeria.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/france",
    "markdown": "# Collect tax in France | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in France.\n\nFrance is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in France. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in France on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in France.\n\n*   [Domestic VAT registration](https://www.impots.gouv.fr/internationalenbusiness/competent-department)\n*   [One-Stop Shop registration schemes](https://www.impots.gouv.fr/professionnel/jutilise-le-guichet-unique-tva-ioss-oss) (French content)\n\nAfter you’ve registered to collect tax in France, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=fr) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in France.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFrance applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\nIn France, there are some territories outside of the scope of the standard tax system and might have different rules that apply. Stripe won’t calculate tax for customers based there, even if you’ve added a registration for France. Learn more about how Stripe handles [excluded territories](https://docs.stripe.com/tax/zero-tax?#excluded-territories). This applies to the following locations:\n\n*   Saint Barthélemy\n*   Saint Martin\n*   Saint Pierre and Miquelon\n*   Wallis and Futuna\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to France. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in France | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in France.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/asia-pacific/thailand",
    "markdown": "# Collect tax in Thailand | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Thailand.\n\nIn Thailand, Stripe only supports collecting [VAT](https://eservice.rd.go.th/rd-ves-web/landing) for digital services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Thailand. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers supplying digital goods and services to Thai consumers are required to register for VAT purposes if their taxable sales of digital goods and services exceed THB 1.8 million. The threshold period is an accounting period (for corporations) or a calendar year (for individuals). Remote sellers are required to register for VAT within 30 days from the day they have satisfied the registration threshold. As accounting periods vary per company, Stripe uses a calendar year as the threshold period.\n\n**Threshold**: THB 1.8 million\n\n**Time frame**: Calendar year\n\n**Included transactions**: Business-to-consumer (B2C) sales of digital goods and services\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Thailand to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Thailand on the [government website](https://eservice.rd.go.th/rd-ves-web/landing).\n\nAfter you’ve registered to collect tax in Thailand, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=th) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Thailand.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Thailand. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Thailand, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Thailand. Stripe doesn’t file taxes on your behalf.",
    "title": "Collect tax in Thailand | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Thailand.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/oman",
    "markdown": "# Collect tax in Oman | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Oman.\n\nIn Oman, Stripe only supports collecting VAT for electronically supplied services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Oman. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to consumers in Oman have no registration threshold; they must register for VAT purposes from the first sale. Sales to business customers in Oman don’t trigger any tax registration obligations because non-resident businesses aren’t required to collect tax on these sales.\n\n*   **Threshold**: 1 transaction\n*   **Included transactions**: Business-to-consumer (B2C) sales of digital goods or electronically supplied services (digital products)\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Oman to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Oman on the [government website](https://taxoman.gov.om/portal/web/taxportal/e-services).\n\nAfter you’ve registered to collect tax in Oman, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=om) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Oman.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Oman. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Oman, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Oman. Stripe doesn’t file taxes on your behalf.",
    "title": "Collect tax in Oman | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Oman.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/turkiye",
    "markdown": "# Collect tax in Türkiye | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Türkiye.\n\nIn Türkiye, Stripe only supports collecting [VAT](https://digitalservice.gib.gov.tr/kdv3_side/main.jsp) for digital services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Türkiye. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to consumers in Türkiye have no registration threshold; they must register for VAT purposes from the first sale. Sales to business customers in Türkiye don’t trigger any tax registration obligations as remote sellers aren’t required to collect tax on such sales.\n\n**Threshold**: 1 transaction\n\n**Included transactions**: Business-to-consumer (B2C) sales of digital goods or electronically supplied services (digital products)\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Türkiye to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Türkiye on the [government website](https://digitalservice.gib.gov.tr/kdv3_side/main.jsp).\n\nAfter you’ve registered to collect tax in Türkiye, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=tr) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Türkiye.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Türkiye. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Türkiye, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Türkiye. Stripe doesn’t file taxes on your behalf.",
    "title": "Collect tax in Türkiye | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Türkiye.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/germany",
    "markdown": "# Collect tax in Germany | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Germany.\n\nGermany is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Germany. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Germany on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Germany.\n\n*   [Domestic VAT registration](https://www.elster.de/bportal/infoseite/unternehmer_bop?locale=en_US)\n*   [One-Stop Shop for EU businesses](https://www.bzst.de/DE/Unternehmen/Umsatzsteuer/One-Stop-Shop_EU/one_stop_shop_eu_node.html)(German content)\n*   [One-Stop Shop for businesses outside the EU](https://www.bzst.de/EN/Businesses/VAT/OSS_non_Union/OSS_non_union_scheme/OSS_non_union_scheme_node.html)\n*   [Import One-Stop Shop registration](https://www.bzst.de/EN/Businesses/VAT/Import_One_Stop_Shop/import_one_stop_shop_node.html)\n\nAfter you’ve registered to collect tax in Germany, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=de) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Germany.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nGermany applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Germany. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Germany | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Germany.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/asia-pacific/australia",
    "markdown": "# Collect tax in Australia | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Australia.\n\nIn Australia, Stripe Tax supports calculation and [collection of GST](https://www.ato.gov.au/business/gst/).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Australia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers must register in Australia if their sales of services or low-value goods to Australian individuals exceed 75,000 AUD in the past 12 months or are expected to in the next 12 months. Sales to GST-registered Australian businesses that are subject to reverse charge don’t count toward the threshold. Non-profit organizations who sell remotely have a higher 150,000 AUD threshold but the threshold monitoring tool doesn’t track this.\n\n**Threshold**: 75,000 AUD (or 150,000 AUD for non-profit organizations)\n\n**Time frame**: Previous or current year.\n\n**Included transactions**: Any taxable transactions that reverse charge doesn’t apply to.\n\nStripe supports domestic registration in Australia for both Australian businesses and remote sellers.\n\nIf a remote business sells digital services or low-value goods into Australia exclusively through online marketplaces that are responsible for collecting tax on these sales, the seller isn’t required to register for GST in Australia. These sales don’t count toward the seller’s registration threshold.\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFind more information on how to register for GST in Australia on the government website:\n\n*   [Registration for businesses with an origin address in Australia](https://www.ato.gov.au/Business/GST/Registering-for-GST/)\n*   [Registration for remote sellers](https://www.ato.gov.au/Business/International-tax-for-business/Non-resident-businesses-and-GST/) (businesses based outside of Australia selling into Australia)\n\nAfter you’ve registered to collect tax in Australia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=au) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Australia.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates GST for your transactions in Australia. Stripe assumes most sales to be taxable unless specifically exempt. If you’re a remote seller and sell services to Australian customers, GST is typically collected on sales to individuals. No tax is charged on sales to business customers who provide their Australian Business Register (ABN) number.\n\nStripe doesn’t calculate GST on sales of imported low-value goods (valued 1,000 AUD or less) to Australian individuals.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Australia. Stripe doesn’t file taxes on your behalf. However, we do have trusted partners who can help manage your filing and remittance.\n\n## Marketplace tax liability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAustralia defines electronic distribution platform (EDP) operators as marketplace operators that might have tax collection obligations. To qualify as an EDP, a marketplace operator must set terms or conditions for the sale, process or enable customer payments, or handle ordering or delivery of the product. Businesses that only provides payment processing or maintain the technical infrastructure behind an online marketplace don’t qualify as EDPs. EDP operators must collect GST on:\n\n*   Sales of imported low-value goods by remote sellers to private individuals in Australia.\n*   Sales of digital services by remote sellers to private individuals in Australia.",
    "title": "Collect tax in Australia | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Australia.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/greece",
    "markdown": "# Collect tax in Greece | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Greece.\n\nGreece is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Greece. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Greece on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Greece.\n\n*   [VAT information and domestic registration](https://www.aade.gr/en/epicheireseis/phorologikes-yperesies/phpa)\n*   [One-Stop Shop registration schemes](https://www.aade.gr/oss)\n\nAfter you’ve registered to collect tax in Greece, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=gr) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Greece.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nGreece applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Greece. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Greece | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Greece.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/austria",
    "markdown": "# Collect tax in Austria | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Austria.\n\nAustria is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Austria. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Austria on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Austria.\n\n*   [Domestic VAT registration](https://www.bmf.gv.at/en/topics/taxation/vat-assessment-refund.html)\n*   [One-Stop Shop registration](https://www.usp.gv.at/en/steuern-finanzen/umsatzsteuer/Umsatzsteuer-One-Stop-Shop.html)\n*   [Import One-Stop Shop registration](https://www.usp.gv.at/en/steuern-finanzen/umsatzsteuer/Umsatzsteuer-One-Stop-Shop/IOSS/Registrierung-zum-IOSS.html)\n\nAfter you’ve registered to collect tax in Austria, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=at) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Austria.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAustria applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Austria. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Austria | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Austria.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/belgium",
    "markdown": "# Collect tax in Belgium | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Belgium.\n\nBelgium is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Belgium. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Belgium on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Belgium.\n\n*   [Domestic VAT registration](https://business.belgium.be/en/setting_up_your_business/registration_with_the_vat_authorities)\n*   [One-Stop Shop registration schemes](https://finance.belgium.be/en/E-services/Intervat/oss)\n\nAfter you’ve registered to collect tax in Belgium, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=be) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Belgium.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBelgium applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Belgium. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Belgium | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Belgium.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/united-kingdom",
    "markdown": "# Collect tax in the United Kingdom\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in the United Kingdom.\n\nIn the United Kingdom, Stripe Tax supports calculation and collection of [VAT](https://www.gov.uk/how-vat-works).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in the United Kingdom. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nIf you’re based outside the United Kingdom, you must register in the UK within 30 days of performing the first taxable transaction there. You’re also liable to register if you have reasonable grounds to believe that you’ll perform taxable transactions within the next 30 days. A taxable transaction is any sale made in the UK that’s neither exempt from VAT nor subject to reverse charge. Taxable transactions include those that are zero-rated for VAT purposes.\n\nFor example, if you’re based in the US and sell digital services to overseas customers, you must register in the UK as soon as you have reasonable grounds to believe that a UK consumer will purchase your services. If a UK consumer has actually bought your digital services, you must register within 30 days of performing the sale. However, if you only sell to UK businesses, you don’t need to register because such sales are subject to reverse charge and don’t constitute taxable transactions for UK VAT purposes.\n\nThe HMRC VAT Notice 700/1 [Who should register for VAT](https://www.gov.uk/government/publications/vat-notice-7001-should-i-be-registered-for-vat/vat-notice-7001-should-i-be-registered-for-vat#Exempt-supplies) provides more information on registration in the UK.\n\n**Threshold**: 1 transaction in the UK.\n\n**Included transactions**: Any taxable transactions that reverse charge doesn’t apply to.\n\nIf a remote business sells digital services or low-value goods into the UK exclusively through online marketplaces that are responsible for collecting tax on these sales, the seller isn’t required to register for UK VAT. These sales don’t count towards the seller’s registration threshold.\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFind more information on how to register for VAT in the United Kingdom on the government website:\n\n*   [General information about UK VAT](https://www.gov.uk/how-vat-works)\n*   [How to register](https://www.gov.uk/register-for-vat)\n\nAfter you’ve registered to collect tax in the United Kingdom, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=gb) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in the United Kingdom.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates VAT for your transactions in the United Kingdom. Stripe assumes most sales to be taxable unless specifically exempted. If you’re a remote seller providing digital services to UK customers, UK VAT is typically collected on sales to individuals. Tax isn’t charged on sales to business customers who provide their VAT identification number.\n\nStripe doesn’t calculate VAT on imported low-value goods that are shipped into the UK in packages valued at 135 GBP or less.\n\nThe United Kingdom has some territories outside the scope of the standard tax system that have different rules. Stripe won’t calculate tax for customers based there, even if you’ve added a registration for the UK. This applies to the following locations:\n\n*   British Virgin Islands\n*   Channel Islands (Guernsey and Jersey)\n*   Falkland Islands\n*   Gibraltar\n\nLearn more about how Stripe handles [excluded territories](https://docs.stripe.com/tax/zero-tax?#excluded-territories).\n\nNorthern Ireland applies its own special VAT rules. If you sell goods into Northern Ireland, you have to follow the same rules as other European Union countries. But if you sell services, you have to charge taxes based on the laws of the United Kingdom. Stripe Tax doesn’t support sales of goods to Northern Ireland.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to the United Kingdom. Stripe doesn’t file taxes on your behalf. However, we do have trusted partners who can help manage your filing and remittance.\n\n## Marketplace tax liability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe UK uses the terms “online marketplace operators” and “digital platform operators” to refer to marketplace operators that might have tax collection obligations. To qualify as an online marketplace operator, the business must set terms or conditions for the sale, process or enable customer payments, or handle ordering or delivery of the product. A business isn’t considered an online marketplace if it only processes payments, lists or advertises goods, or redirects customers to other websites or apps without further involvement in the sale.\n\nThe tax collection obligation for marketplace operators typically includes:\n\n*   Sales of digital services\n*   Sales of goods by remote sellers to UK private individuals when the goods are in the UK at the point of sale.\n*   Sales of goods to UK private individuals if the goods are imported into the UK in packages valued at 135 GBP or less.\n\nMarketplace operators facilitating other types of sales might need to collect VAT based on different indicators and contractual arrangements.\n\nA marketplace operator that collects UK VAT on a sale is treated as if it were buying the product from the merchant and selling it to the customer. This applies only for VAT purposes and doesn’t change the commercial position where the title to the product passes from the seller to the buyer.",
    "title": "Collect tax in the United Kingdom | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in the United Kingdom.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/united-arab-emirates",
    "markdown": "# Collect tax in United Arab Emirates\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in United Arab Emirates.\n\nIn United Arab Emirates, Stripe Tax supports calculation and collection of VAT.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in United Arab Emirates. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nIf you’re located outside the UAE, you must register in the UAE as soon as you perform taxable sales in the UAE and where no other person is obligated to pay the due VAT on these supplies in the UAE (no reverse charge applies). The registration deadline is within 30 days of performing the first taxable sale.\n\nFor example, if you’re based in the US and sell digital services to UAE consumers, you must register within 30 days of performing the first sale. However, if you only sell to UAE businesses, you don’t need to register because such sales are subject to reverse charge.\n\n**Threshold**: 1 transaction\n\n**Included transactions**: Any taxable transactions that reverse charge doesn’t apply to.\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFind more information on how to register for VAT in United Arab Emirates on the [government website](https://tax.gov.ae/en/taxes/vat.aspx).\n\nAfter you’ve registered to collect tax in United Arab Emirates, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=ae) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in United Arab Emirates.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates VAT for your transactions in United Arab Emirates.\n\nGenerally, most transactions are taxable in the jurisdiction where your customer is. Stripe assumes the sale of most goods or services to be taxable unless specifically exempted.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to United Arab Emirates. Stripe doesn’t file taxes on your behalf. However, we do have trusted partners who can help manage your filing and remittance.",
    "title": "Collect tax in United Arab Emirates | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in United Arab Emirates.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/asia-pacific/hong-kong",
    "markdown": "# Collect tax from Hong Kong\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax from Hong Kong.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHong Kong doesn’t impose VAT or sales tax. This means you won’t see an option to add your registration for Hong Kong to Stripe and collect taxes from your customers based in Hong Kong.\n\nHowever Hong Kong does impose other taxes on businesses, including a profits tax. Learn more about the taxes that apply in Hong Kong at the [tax authority](https://www.gov.hk/en/business/taxes/profittax/index.htm).\n\nIf you’re a business based in Hong Kong you could still have tax obligations based on sales to customers in other locations. Use the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou may need to register to collect tax on your sales in other countries. Learn more in our guides about:\n\n*   [Registering for sales tax in the United States](https://stripe.com/guides/sales-tax-registration-process-us)\n*   [Registering for VAT in the European Union](https://stripe.com/guides/tax-registration-process-europe)\n\nAfter you’ve registered to collect tax in a location, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=hk) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in that location.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nGenerally, most transactions are taxable in the jurisdiction where your customer is. Stripe assumes the sale of most goods or services to be taxable unless specifically exempted.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou are responsible for filing and remitting your taxes. Stripe doesn’t file taxes on your behalf.",
    "title": "Collect tax from Hong Kong | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax from Hong Kong.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/bulgaria",
    "markdown": "# Collect tax in Bulgaria | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Bulgaria.\n\nBulgaria is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Bulgaria. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Bulgaria on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Bulgaria.\n\n*   [Domestic VAT registration](https://old.nra.bg/page?id=605) (Bulgarian content)\n*   [One-Stop Shop registration schemes](https://vat-one-stop-shop.ec.europa.eu/contact-country/bulgaria_en)\n\nAfter you’ve registered to collect tax in Bulgaria, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=bg) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Bulgaria.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBulgaria applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Bulgaria. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Bulgaria | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Bulgaria.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/asia-pacific/vietnam",
    "markdown": "# Collect tax in Vietnam | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Vietnam.\n\nIn Vietnam, Stripe only supports collecting [VAT](https://etaxvn.gdt.gov.vn/nccnn/Request) for digital services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Vietnam. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to consumers in Vietnam have no registration threshold; they must register for VAT purposes from the first sale.\n\n**Threshold**: 1 transaction\n\n**Included transactions**: Sales of digital goods and services\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Vietnam to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Vietnam on the [government website](https://etaxvn.gdt.gov.vn/nccnn/Request).\n\nAfter you’ve registered to collect tax in Vietnam, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=vn) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Vietnam.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Vietnam. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Vietnam, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Vietnam. Stripe doesn’t file taxes on your behalf.",
    "title": "Collect tax in Vietnam | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Vietnam.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/iceland",
    "markdown": "# Collect tax in Iceland | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Iceland.\n\nIn Iceland, Stripe Tax supports calculation and collection of [VAT](https://www.skatturinn.is/english/companies/value-added-tax/) for remote sellers. You must have no physical presence in the country to collect this tax on Stripe.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Iceland. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers must register for VAT if their taxable turnover in Iceland exceeds 2,000,000 ISK within any 12-month period, and it requires fiscal representation. Remote sellers who provide electronically supplied services and subscriptions to physical papers and magazines for Icelandic consumers can use a simplified registration procedure (VOES) that doesn’t require fiscal representation. Sales to VAT-registered businesses where the customer pays for the VAT through the reverse charge mechanism don’t count towards the threshold.\n\n**Threshold**: 2,000,000 ISK\n\n**Period**: 12 months\n\n**Included transactions**: Any taxable transactions that reverse charge doesn’t apply to.\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFind more information on how to register for VAT in Iceland on the government website:\n\n*   [Information about VAT in Iceland](https://www.skatturinn.is/english/companies/value-added-tax/)\n*   [Start to register](https://voes.rsk.is/)\n\nAfter you’ve registered to collect tax in Iceland, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=is) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Iceland.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates VAT for your transactions in Iceland.\n\nGenerally, most transactions are taxable in the jurisdiction where your customer is. Stripe assumes the sale of most goods or services to be taxable unless specifically exempted.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Iceland. Stripe doesn’t file taxes on your behalf. However, we do have trusted partners who can help manage your filing and remittance.",
    "title": "Collect tax in Iceland | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Iceland.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/latin-america/chile",
    "markdown": "# Collect tax in Chile | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Chile.\n\nIn Chile, Stripe only supports collecting VAT for digital services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Chile. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to consumers in Chile have no registration threshold; they must register for VAT purposes from the first sale. Sales to business customers in Chile don’t trigger any tax registration obligations as remote sellers aren’t required to collect tax on such sales.\n\n**Threshold**: 1 transaction\n\n**Included transactions**: Business-to-consumer (B2C) sales of digital goods or electronically supplied services (digital products)\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Chile to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Chile on the [government website](https://www.sii.cl/vat/).\n\nAfter you’ve registered to collect tax in Chile, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=cl) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Chile.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Chile. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Chile, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Chile. Stripe doesn’t file taxes on your behalf.",
    "title": "Collect tax in Chile | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Chile.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/hungary",
    "markdown": "# Collect tax in Hungary | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Hungary.\n\nHungary is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Hungary. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Hungary on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Hungary.\n\n*   [VAT information and domestic registration](https://nav.gov.hu/en/taxation)\n*   [One-Stop Shop registration schemes](https://nav.gov.hu/en/main-tiles/e_services/System_for_taxpayers_not_established_in_the_EC/The_Mini_One_Stop_Sho20150929)\n\nAfter you’ve registered to collect tax in Hungary, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=hu) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Hungary.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHungary applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Hungary. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Hungary | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Hungary.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/latin-america/colombia",
    "markdown": "# Collect tax in Colombia | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Colombia.\n\nIn Colombia, Stripe only supports collecting VAT for digital services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Colombia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to consumers in Colombia have no registration threshold; they must register for VAT purposes from the first sale. Sales to business customers in Colombia don’t trigger any tax registration obligations as remote sellers aren’t required to collect tax on such sales.\n\n**Threshold**: 1 transaction\n\n**Included transactions**: Business-to-consumer (B2C) sales of digital goods or electronically supplied services (digital products)\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Colombia to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Colombia on the [government website](https://www.dian.gov.co/Prensa/Aprendelo-en-un-DIAN-X3/Paginas/Paso-a-Paso-Inscripcion-al-RUT.aspx) (Spanish).\n\nAfter you’ve registered to collect tax in Colombia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=co) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Colombia.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Colombia. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Colombia, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Colombia. Stripe doesn’t file taxes on your behalf.",
    "title": "Collect tax in Colombia | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Colombia.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/asia-pacific/indonesia",
    "markdown": "# Collect tax in Indonesia | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Indonesia.\n\nIn Indonesia, Stripe only supports collecting [VAT for digital goods and services](https://www.pajak.go.id/en/digitaltax). In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Indonesia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to Indonesian customers are appointed as VAT collectors when they meet either of the following thresholds:\n\n*   The total value of digital goods and services provided to customers in Indonesia exceeds IDR 600 million in a period of 12 months or IDR 50 million in one calendar month.\n*   Website traffic in Indonesia exceeds 12,000 users in one year or 1,000 users in one month.\n\nRemote sellers who meet the registration thresholds can ask to be appointed a VAT collector and start collecting VAT voluntarily but aren’t obligated to do so.\n\nStripe only monitors the threshold of 50 million IDR per calendar month.\n\n**Threshold**: 50 million IDR\n\n**Time frame**: Calendar month\n\n**Included transactions**: Sales of digital goods and services\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Indonesia to collect this tax on Stripe.\n\nFind more information on how to register for VAT as a remote seller in Indonesia on the [government website](https://www.pajak.go.id/en/digitaltax).\n\nAfter you’ve registered to collect tax in Indonesia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=id) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Indonesia.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Indonesia. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Indonesia, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Indonesia. Stripe doesn’t file taxes on your behalf.",
    "title": "Collect tax in Indonesia | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Indonesia.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/croatia",
    "markdown": "# Collect tax in Croatia | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Croatia.\n\nCroatia is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Croatia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Croatia on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Croatia.\n\n*   [Domestic VAT registration](https://e-porezna.porezna-uprava.hr/Prijava.aspx) (Croatian content)\n*   [One-Stop Shop registration schemes](https://vat-one-stop-shop.ec.europa.eu/contact-country/croatia_en)\n\nAfter you’ve registered to collect tax in Croatia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=hr) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Croatia.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCroatia applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Croatia. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Croatia | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Croatia.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/italy",
    "markdown": "# Collect tax in Italy | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Italy.\n\nItaly is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Italy. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Italy on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Italy.\n\n*   [General information about VAT registration](https://www.agenziaentrate.gov.it/portale/web/english/vat-registration-in-italy)\n*   [One-Stop Shop registration schemes](https://www.agenziaentrate.gov.it/portale/web/english/vat-oss/import-scheme)\n\nAfter you’ve registered to collect tax in Italy, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=it) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Italy.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nItaly applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\nIn Italy, the Vatican City is outside of the scope of the standard tax system and might have different rules that apply. Stripe won’t calculate tax for customers based there, even if you’ve added a registration for Italy. Learn more about how Stripe handles [excluded territories](https://docs.stripe.com/tax/zero-tax?#excluded-territories).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Italy. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Italy | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Italy.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/cyprus",
    "markdown": "# Collect tax in Cyprus | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Cyprus.\n\nCyprus is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Cyprus. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Cyprus on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Cyprus.\n\n*   [Domestic VAT registration](https://www.mof.gov.cy/mof/tax/taxdep.nsf/All/88A7B920B681122AC22582510035432D?OpenDocument)\n*   [One-Stop Shop registration schemes](https://www.mof.gov.cy/mof/TAX/taxdep.nsf/taxOSS_en/taxOSS_en?opendocument)\n\nAfter you’ve registered to collect tax in Cyprus, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=cy) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Cyprus.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCyprus applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Cyprus. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Cyprus | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Cyprus.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/czechia",
    "markdown": "# Collect tax in Czechia | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Czechia.\n\nCzechia is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Czechia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Czechia on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Czechia.\n\n*   [Domestic VAT registration](https://adisspr.mfcr.cz/pmd/home) (Czech content)\n*   [One-Stop Shop registration schemes](https://vat-one-stop-shop.ec.europa.eu/contact-country/czech-republic_en)\n\nAfter you’ve registered to collect tax in Czechia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=cz) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Czechia.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCzechia applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Czechia. Stripe doesn’t file taxes on your behalf. EFor more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Czechia | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Czechia.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/asia-pacific/japan",
    "markdown": "# Collect tax in Japan | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Japan.\n\nIn Japan, Stripe Tax supports calculation and collection of [Consumption Tax (CT)](https://www.nta.go.jp/english/taxes/consumption_tax/index.htm).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Japan. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers must register in Japan if:\n\n*   Their taxable sales in Japan exceed the registration threshold of 10 million JPY in the base period.\n*   Their taxable sales or salaries paid exceed 10 million JPY in the specified period.\n\nThe base period refers to:\n\n*   The calendar year two years prior to the current one (for example, the base period for the year of 2021 is 2019). This applies to sole proprietors.\n*   The business year two years prior to the current one. This applies to corporations.\n\nThe specified period refers to the first 6 months of the previous calendar year (for sole proprietors) or the first 6 months of a fiscal year (for corporations).\n\nRegistered remote sellers must have an office located in Japan or have a tax representative in Japan. Remote sellers that provide electronic services to Japanese consumers can use a simplified registration procedure.\n\n**Threshold**: 10 million JPY\n\n**Time frame**: Japanese base period and specified period as defined above.\n\n**Included transactions**: Any taxable transactions that reverse charge doesn’t apply to.\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo collect Consumption Tax, any business must either have an office located in Japan or have a tax representative in Japan. This also applies to remote sellers of electronic services, however there is a simplified registration process for these businesses.\n\nFind more information on how to register for CT in Japan on the government website:\n\n*   [General information about Consumption Tax in Japan](https://www.nta.go.jp/english/taxes/consumption_tax/01.htm)\n*   [Registration for remote sellers of electronic services](https://www.nta.go.jp/english/taxes/consumption_tax/04.htm)\n\nAfter you’ve registered to collect tax in Japan, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=jp) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Japan.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates CT for your transactions in Japan.\n\nGenerally, most transactions are taxable in the jurisdiction where your customer is. Stripe assumes the sale of most goods or services to be taxable unless specifically exempted.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Japan. Stripe doesn’t file taxes on your behalf. However, we do have trusted partners who can help manage your filing and remittance.",
    "title": "Collect tax in Japan | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Japan.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/ireland",
    "markdown": "# Collect tax in Ireland | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Ireland.\n\nIreland is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Ireland. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Ireland on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Ireland.\n\n*   [Domestic VAT registration](https://www.revenue.ie/en/vat/vat-registration/index.aspx)\n*   [One-Stop Shop registration schemes for EU businesses](https://www.revenue.ie/en/vat/vat-ecommerce/union-scheme/index.aspx)\n*   [One-Stop Shop registration schemes for businesses based outside the EU](https://www.ros.ie/vatoss-web/vatoss.html?execution=e1s1)\n\nAfter you’ve registered to collect tax in Ireland, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=ie) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Ireland.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIreland applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Ireland. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Ireland | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Ireland.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/estonia",
    "markdown": "# Collect tax in Estonia | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Estonia.\n\nEstonia is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Estonia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Estonia on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Estonia.\n\n*   [VAT information and domestic registration](https://www.emta.ee/en/business-client/taxes-and-payment/value-added-tax)\n*   [One-Stop Shop registration schemes](https://emta.ee/en/business-client/taxes-and-payment/value-added-tax/special-schemes-e-commerce-and-services)\n\nAfter you’ve registered to collect tax in Estonia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=ee) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Estonia.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEstonia applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Estonia. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Estonia | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Estonia.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/latvia",
    "markdown": "# Collect tax in Latvia | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Latvia.\n\nLatvia is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Latvia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Latvia on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Latvia.\n\n*   [General information and domestic VAT registration](https://www.vid.gov.lv/lv/pievienotas-vertibas-nodoklis) (Latvian content)\n*   [One-Stop Shop registration schemes](https://www.vid.gov.lv/lv/pvn-ipasais-rezims-ossioss) (Latvian content)\n\nAfter you’ve registered to collect tax in Latvia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=lv) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Latvia.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLatvia applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Latvia. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Latvia | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Latvia.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/denmark",
    "markdown": "# Collect tax in Denmark | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Denmark.\n\nDenmark is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Denmark. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Denmark on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Denmark.\n\n*   [General information and domestic VAT registration](https://skat.dk/en-us/businesses/vat)\n*   [One-Stop Shop registration schemes](https://skat.dk/en-us/businesses/vat/vat-on-sales-to-private-consumers-in-the-eu/what-is-vat-one-stop-shop)\n\nAfter you’ve registered to collect tax in Denmark, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=dk) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Denmark.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDenmark applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Denmark. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Denmark | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Denmark.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/luxembourg",
    "markdown": "# Collect tax in Luxembourg | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Luxembourg.\n\nLuxembourg is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Luxembourg. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Luxembourg on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Luxembourg.\n\n*   [VAT information and domestic registration](https://guichet.public.lu/en/entreprises/creation-developpement/declarations-initiales/tva-impots/inscription-tva.html)\n*   [One-Stop Shop registration schemes](https://pfi.public.lu/fr/professionnel/tva/oss/ossuk.html)\n\nAfter you’ve registered to collect tax in Luxembourg, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=lu) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Luxembourg.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLuxembourg applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Luxembourg. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Luxembourg | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Luxembourg.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/lithuania",
    "markdown": "# Collect tax in Lithuania | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Lithuania.\n\nLithuania is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Lithuania. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Lithuania on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Lithuania.\n\n*   [General information and domestic VAT registration](https://www.vmi.lt/evmi/en/prid%C4%97tin%C4%97s-vert%C4%97s-mokestis3)\n*   [One-Stop Shop registration schemes](https://www.vmi.lt/oss/Page/Home/Default.xhtml;jsessionid=G0ylIvP_SON3lzNx478FRO_kS0wiprHo8Z8_3zxx.oss-f2) (Lithuanian content)\n\nAfter you’ve registered to collect tax in Lithuania, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=lt) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Lithuania.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLithuania applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Lithuania. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Lithuania | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Lithuania.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/asia-pacific/malaysia",
    "markdown": "# Collect tax in Malaysia | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Malaysia.\n\nIn Malaysia, Stripe only supports collecting the [Service Tax](https://mystods.customs.gov.my/) on digital services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Malaysia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to Malaysian customers must register for Service Tax purposes if the total value of digital goods and services provided to customers in Malaysia within a period of 12 months exceeds 500,000 MYR.\n\n**Threshold**: 500,000 MYR\n\n**Time frame**: 12 months\n\n**Included transactions**: Sales of digital goods and services\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Malaysia to collect this tax on Stripe.\n\nFind more information on how to register for Service Tax as a remote seller in Malaysia on the [government website](https://mystods.customs.gov.my/).\n\nAfter you’ve registered to collect tax in Malaysia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=my) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Malaysia.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Malaysia. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Malaysia, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Malaysia. Stripe doesn’t file taxes on your behalf.",
    "title": "Collect tax in Malaysia | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Malaysia.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/netherlands",
    "markdown": "# Collect tax in Netherlands | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Netherlands.\n\nNetherlands is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Netherlands. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Netherlands on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Netherlands.\n\n*   [VAT information and domestic registration](https://www.belastingdienst.nl/wps/wcm/connect/bldcontenten/belastingdienst/business/vat/vat_in_the_netherlands/)\n*   [One-Stop Shop registration schemes](https://www.belastingdienst.nl/wps/wcm/connect/bldcontenten/belastingdienst/business/vat/vat_in_the_netherlands/how-to-declare-vat-for-e-commerce-and-services/how-to-declare-vat-for-e-commerce-and-services)\n\nAfter you’ve registered to collect tax in Netherlands, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=nl) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Netherlands.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNetherlands applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Netherlands. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Netherlands | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Netherlands.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/asia-pacific/new-zealand",
    "markdown": "# Collect tax in New Zealand\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in New Zealand.\n\nIn New Zealand, Stripe Tax supports calculation and collection of [GST](https://www.ird.govt.nz/gst).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in New Zealand. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers supplying goods or services in New Zealand must register if their taxable turnover from these transactions exceeded 60,000 NZD within the past 12-month period or will exceed this amount in the next 12 months. These rules apply to businesses supplying remote services such as digital content or low-value goods from outside New Zealand to customers who are resident in New Zealand and aren’t registered for GST. Sales to New Zealand GST-registered businesses that are subject to reverse charge don’t count towards the threshold.\n\n**Threshold**: 60,000 NZD\n\n**Time frame**: Previous or current year.\n\n**Included transactions**: Any taxable transactions that reverse charge doesn’t apply to.\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFind more information on how to register for GST in New Zealand on the government website:\n\n*   [Register for GST](https://www.ird.govt.nz/gst/registering-for-gst/register-for-gst)\n*   [How GST works for remote sellers](https://www.ird.govt.nz/gst/gst-for-overseas-businesses)\n\nAfter you’ve registered to collect tax in New Zealand, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=nz) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in New Zealand.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates GST for your transactions in New Zealand.\n\nGenerally, most transactions are taxable in the jurisdiction where your customer is. Stripe assumes the sale of most goods or services to be taxable unless specifically exempted.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to New Zealand. Stripe doesn’t file taxes on your behalf. However, we do have trusted partners who can help manage your filing and remittance.",
    "title": "Collect tax in New Zealand | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in New Zealand.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/latin-america/mexico",
    "markdown": "# Collect tax in Mexico | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Mexico.\n\nIn Mexico, Stripe only supports collecting VAT for digital services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to Mexican customers must register for VAT purposes within 30 days of the first sale to a customer located in Mexico. There are no registration thresholds or simplified registration procedures. Non-residents must appoint a legal representative and establish a tax domicile in Mexico.\n\n**Threshold**: 1 transaction\n\n**Included transactions**: Sales of digital goods or electronically supplied services (digital products)\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Mexico. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Mexico to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Mexico on the [government website](http://omawww.sat.gob.mx/plataformastecnologicas/Paginas/PlataformasTecnologicas_ServiciosDigitales/pt_sd_inicio.html) (Spanish).\n\nAfter you’ve registered to collect tax in Mexico, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=mx) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Mexico.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Mexico. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Mexico, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Mexico. Stripe doesn’t file taxes on your behalf.",
    "title": "Collect tax in Mexico | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Mexico.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/portugal",
    "markdown": "# Collect tax in Portugal | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Portugal.\n\nPortugal is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Portugal. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Portugal on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Portugal.\n\n*   [VAT information and registration](https://info.portaldasfinancas.gov.pt/pt/docs/Conteudos_1pagina/Pages/portuguese-tax-system.aspx)\n*   [One-Stop Shop registration schemes](https://www.portaldasfinancas.gov.pt/oss/) (Portugese content)\n\nAfter you’ve registered to collect tax in Portugal, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=pt) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Portugal.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPortugal applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Portugal. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Portugal | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Portugal.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/integration/quickstart",
    "markdown": "# Create and send an invoice\n\nSearch the docs or ask a question",
    "title": "Create and send an invoice | Stripe Documentation",
    "description": "Learn how to create and send an invoice with code.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/norway",
    "markdown": "# Collect tax in Norway | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Norway.\n\nIn Norway, Stripe Tax supports calculation and collection of [VAT](https://www.skatteetaten.no/en/business-and-organisation/vat-and-duties/vat/).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Norway. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nIf you’re based outside Norway, you must register in Norway as soon as your taxable sales in Norway reach 50,000 NOK during a period of 12 months and no reverse charge applies. Businesses located in the [European Economic Area](https://en.wikipedia.org/wiki/European_Economic_Area \"European Economic Area\") can register directly with the Norwegian tax administration. Businesses located outside the EEA must appoint a Norwegian VAT representative unless they use the simplified registration procedure (VOEC), which is available for B2C sales of digital services and low-value goods (< ​3,000 NOK).\n\nFor example, if you’re based in the US, sell digital services to Norwegian consumers and exceed the threshold during a period of 12 months (from February of the past year to January of the current year), you must register in Norway. However, if you sell digital services only to Norwegian businesses, you don’t need to register because these services are subject to reverse charge.\n\n**Threshold**: 50,000 NOK\n\n**Period**: 12 months\n\n**Included transactions**: Any taxable transactions that reverse charge doesn’t apply to.\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFind more information on how to register for VAT in Norway on the government website:\n\n*   [General information about VAT in Norway](https://www.skatteetaten.no/en/business-and-organisation/vat-and-duties/vat/)\n*   [How to register](https://www.skatteetaten.no/en/business-and-organisation/vat-and-duties/vat/register-change-delete/)\n\nAfter you’ve registered to collect tax in Norway, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=no) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Norway.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates VAT for your transactions in Norway.\n\nGenerally, most transactions are taxable in the jurisdiction where your customer is. Stripe assumes the sale of most goods or services to be taxable unless specifically exempted.\n\nIn Norway, there are some territories outside of the scope of the standard tax system and might have different rules that apply. Stripe won’t calculate tax for customers based there, even if you’ve added a registration for Norway. Learn more about how Stripe handles [excluded territories](https://docs.stripe.com/tax/zero-tax?#excluded-territories). This applies to the following locations:\n\n*   Jan Mayen\n*   Svalbard\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Norway. Stripe doesn’t file taxes on your behalf. However, we do have trusted partners who can help manage your filing and remittance.",
    "title": "Collect tax in Norway | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Norway.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/poland",
    "markdown": "# Collect tax in Poland | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Poland.\n\nPoland is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Poland. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Poland on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Poland.\n\n*   [Domestic VAT registration](https://www.podatki.gov.pl/en/value-added-tax/registering-for-vat/)\n*   [One-Stop Shop registration schemes](https://www.podatki.gov.pl/vat/abc-vat/procedury/punkt-kompleksowej-obslugi-oss-i-ioss/) (Polish content)\n\nAfter you’ve registered to collect tax in Poland, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=pl) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Poland.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPoland applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Poland. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Poland | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Poland.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/quickstart-guide",
    "markdown": "# No-code quickstart guide | Stripe DocumentationThe Stripe Docs logo\n\n## Get started with Stripe Invoicing—no code required.\n\nStripe Invoicing can help you get paid and save time using the Dashboard. Automatically charge your customer’s payment method on file, or email them the [invoice](https://docs.stripe.com/api/invoices \"invoices\") with or without a link to a payment page. You can also send the invoice or payment page link manually.\n\n#### Note\n\nIf you’re interested in managing subscriptions and recurring revenue, see [Subscriptions](https://docs.stripe.com/billing).\n\n![Hosted Invoice Page](https://b.stripecdn.com/docs-statics-srv/assets/hosted-invoice-page-guide.df3cc5a1e4180c338269aacdfa792180.png)\n\nHosted Invoice Page\n\n![Invoice PDF](https://b.stripecdn.com/docs-statics-srv/assets/invoice-pdf-guide.d79c407ca08ee4b14dc0519fb3772309.png)\n\nInvoice PDF\n\n[](#payment-methods)\n\nBy default, customers can pay invoices with any of the payment methods that you enable in your [Invoice template](https://dashboard.stripe.com/settings/billing/invoice). If you’re a first-time user, Stripe automatically enables card, [Link](https://docs.stripe.com/payments/link), bank transfers, Cash App Pay, and WeChat Pay payment methods. To enable additional payment methods, you need to activate them in your [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods).\n\nIn some situations, there might be restrictions that prevent payment methods from being used for an invoice. For instance, a payment method might only operate in one currency, or have limitations on the amount that can be paid. Stripe doesn’t automatically select a payment method when these limitations prevent it from being used. To learn more, see [Payment methods](https://docs.stripe.com/invoicing/payment-methods#supported).\n\n![Choose additional payment methods](https://b.stripecdn.com/docs-statics-srv/assets/supported-payment-methods.194614192ca2c72656bc0587e8e21f46.png)\n\nChoose additional payment methods\n\n[](#get-paid)\n\nYou can [create and send](https://dashboard.stripe.com/invoices/create) an invoice from the Dashboard. Invoices provide an itemized list of goods and services rendered, which includes the cost, quantity, and taxes. You can also use them as a tool to collect payment. Learn more about [using the Dashboard](https://docs.stripe.com/invoicing/dashboard).\n\n![Create and send an invoice](https://b.stripecdn.com/docs-statics-srv/assets/create-send-invoices.985a3078348be3c2591f8d5e2d96e21c.png)\n\nCreate and send an invoice\n\n[](#custom-templates)\n\nYou can use the [Invoice template](https://dashboard.stripe.com/account/billing/invoice) to customize ​​the content of your invoices. Set a default memo, footer, numbering scheme, and determine your default payment terms. Because you know more about your customers and your business than Stripe does, make sure your invoices include all of the required information. See the full invoice customization guide at [Customize invoices](https://docs.stripe.com/invoicing/customize).\n\n![Configure the Invoice template](https://b.stripecdn.com/docs-statics-srv/assets/invoice-template.d50c4ba2210f06442b6adbb7279fe7a4.png)\n\nConfigure the Invoice template\n\n![Manage tax information](https://b.stripecdn.com/docs-statics-srv/assets/manage-tax-information.3bbd3b8425726dc4ac243bb5bfd707a3.png)\n\nManage tax information\n\n[](#track-invoice)\n\nInvoices move through different statuses from the time they’re created to when they’re paid. You can track the status of an invoice on the [Invoices page](https://dashboard.stripe.com/test/invoices). To let your customer know that the due date for an invoice is approaching, [send them an email reminder](https://docs.stripe.com/invoicing/send-email). For more information on tracking your invoices, see [Manage invoices](https://docs.stripe.com/invoicing/dashboard/manage-invoices).\n\n![Track and manage your invoices](https://b.stripecdn.com/docs-statics-srv/assets/track-invoices.647ee840cc77e53c4d8537ec43ba9289.png)\n\nTrack and manage your invoices\n\n[](#invoicing-plus)\n\nInvoicing Plus includes advanced features to automate how you collect and reconcile invoice payments.\n\n#### Note\n\nAre you interested in automatic collection and reconciliation features? Upgrade to [Invoicing Plus](https://stripe.com/invoicing/pricing).\n\n### Automate invoicing and get paid faster ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can automate Stripe Invoicing and get paid faster by choosing to [automatically charge](https://docs.stripe.com/invoicing/automatic-charging) your customer’s payment method on file. If you’re a Plus user, let Stripe handle [invoice recovery](https://docs.stripe.com/invoicing/automatic-collection) issues.\n\n![Automate invoicing](https://b.stripecdn.com/docs-statics-srv/assets/advanced-invoicing-features.70dfe42ac952e7924876201c06e5902d.png)\n\nAutomate invoicing\n\n### Close your books and account for revenue ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUsing [automatic reconciliation](https://docs.stripe.com/invoicing/automatic-reconciliation) means that you don’t need to expose your sensitive bank account details to users or manually reconcile open invoices with your bank. With auto-reconciliation for invoices, Stripe can:\n\n*   Match incoming payments with invoice amounts.\n*   Manage overpayment or underpayment, when the amount paid doesn’t match the invoice.\n*   Reduce the number of API calls required to transfer funds into Stripe.\n*   Manage payment retries on open invoices.\n\n![Close your books](https://b.stripecdn.com/docs-statics-srv/assets/invoicing-auto-reconciliation.2d4b2648e4b67e8b2a2c7225a22bec69.png)\n\nClose your books\n\n[](#customer-portal)\n\nShare a link to your [customer portal](https://docs.stripe.com/billing/subscriptions/customer-portal \"customer portal\"), where customers can log in with their email to manage invoices, view invoice history, update payment information, and so on. Learn how to create and share your [customer portal link](https://docs.stripe.com/customer-management/activate-no-code-customer-portal).",
    "title": "No-code quickstart guide | Stripe Documentation",
    "description": "Get started with Stripe Invoicing—no code required.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/europe-middle-east-and-africa/saudi-arabia",
    "markdown": "# Collect tax in Saudi Arabia\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Saudi Arabia.\n\nIn Saudi Arabia, Stripe only supports collecting VAT for digital services. In Stripe, these are referred to as “digital products.” To collect this tax on Stripe, you must be a remote seller without a physical presence in the country.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Saudi Arabia. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers providing digital goods or electronically supplied services (digital products) to consumers in Saudi Arabia have no registration threshold; they must register for VAT purposes from the first sale. Sales to business customers in Saudi Arabia don’t trigger any tax registration obligations because non-resident businesses aren’t required to collect tax on these sales.\n\n**Threshold**: 1 transaction\n\n**Included transactions**: Business-to-consumer (B2C) sales of digital goods or electronically supplied services (digital products)\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must be a remote seller with no physical presence in Saudi Arabia to collect this tax on Stripe.\n\nFind more information on how to register for VAT in Saudi Arabia on the [government website](https://zatca.gov.sa/en/eServices/Pages/eServices_001.aspx).\n\nAfter you’ve registered to collect tax in Saudi Arabia, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=sa) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Saudi Arabia.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe only support calculations for [digital products](https://docs.stripe.com/tax/tax-codes?type=digital) (non-physical items or services that are delivered, given, or rendered electronically) in Saudi Arabia. Stripe doesn’t calculate tax for products that don’t use a digital product tax code.\n\nView the list of supported [digital product tax codes](https://docs.stripe.com/tax/tax-codes?type=digital). To calculate taxes in Saudi Arabia, make sure that you [assign a tax code](https://docs.stripe.com/tax/products-prices-tax-codes-tax-behavior#tax-code-on-product) to each of your products.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Saudi Arabia. Stripe doesn’t file taxes on your behalf.",
    "title": "Collect tax in Saudi Arabia | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Saudi Arabia.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/romania",
    "markdown": "# Collect tax in Romania | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Romania.\n\nRomania is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Romania. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Romania on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Romania.\n\n*   [Tax information](https://www.anaf.ro/anaf/internet/ANAF/acasa/) (Romanian content)\n*   [One-Stop Shop registration schemes](https://www.anaf.ro/anaf/internet/ANAF/servicii_online/one_stop_shop/) (Romanian content)\n\nAfter you’ve registered to collect tax in Romania, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=ro) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Romania.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRomania applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Romania. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Romania | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Romania.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/european-union/malta",
    "markdown": "# Collect tax in Malta | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Malta.\n\nMalta is part of the EU and applies the EU VAT rules. Read more about those rules on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union). You can also [read our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Malta. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nYou can read more about registration obligations in Malta on the [European Union page](https://docs.stripe.com/tax/supported-countries/european-union) or in [our guide to VAT](https://stripe.com/guides/tax-registration-process-europe).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDifferent registration schemes could apply to your business, depending on whether you’re based inside or outside the EU. After you’ve decided which registration scheme is correct for your business, learn how to register in Malta.\n\n*   [General information and domestic VAT registration](https://cfr.gov.mt/en/faqs/Pages/VAT/VAT-FAQs.aspx)\n*   [One-Stop Shop registration schemes](https://cfr.gov.mt/en/eServices/Pages/OSS.aspx)\n\nAfter you’ve registered to collect tax in Malta, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=mt) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Malta.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMalta applies the EU VAT rules. Learn more about [tax calculation in the European Union](https://docs.stripe.com/tax/supported-countries/european-union).\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) in the Dashboard. Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Malta. Stripe doesn’t file taxes on your behalf. For more information, browse the [Tax Stripe Apps](https://marketplace.stripe.com/categories/tax) on the App Marketplace.",
    "title": "Collect tax in Malta | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Malta.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/asia-pacific/singapore",
    "markdown": "# Collect tax in Singapore | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Singapore.\n\nIn Singapore, Stripe Tax supports calculation and collection of [GST](https://www.iras.gov.sg/taxes/goods-services-tax-(gst)).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Singapore. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nRemote sellers must register for GST if the Singaporean taxable turnover exceeded 1 million SGD in the past 12 months (retrospective basis) or is likely to exceed 1 million SGD in the next 12 months (prospective basis).\n\nA special registration rule applies to remote sellers of digital services. As of Jan 1, 2020, non-resident suppliers must register under the Overseas Vendor Registration regime if in a calendar year:\n\n1.  They have a global turnover exceeding 1 million SGD.\n2.  They make B2C supplies of digital services to customers in Singapore exceeding 100,000 SGD. Global turnover refers to all supplies made that would be taxable supplies if made in Singapore.\n\nStripe only monitors the 100,000 SGD threshold of the Overseas Vendor Registration.\n\n### Domestic Registration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Threshold**: 1 million SGD\n\n**Time frame**: Previous or current year.\n\n**Included transactions**: Any taxable transactions that reverse charge doesn’t apply to.\n\n### Overseas Vendor Registration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**Threshold**: 100,000 SGD and 1 million SGD (global turnover)\n\n**Time frame**: Calendar year.\n\n**Included transactions**: For the 100,000 SGD threshold, any taxable transactions that:\n\n*   Is either a digital good or an electronically supplied service\n*   Is a B2C transaction\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFind more information on how to register for GST in Singapore on the government website:\n\n*   [Information about GST](https://www.iras.gov.sg/taxes/goods-services-tax-(gst))\n*   [How to register](https://www.iras.gov.sg/taxes/goods-services-tax-(gst)/gst-registration-deregistration/applying-for-gst-registration)\n\nAfter you’ve registered to collect tax in Singapore, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=sg) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Singapore.\n\nLearn more about [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates GST for your transactions in Singapore.\n\nGenerally, most transactions are taxable in the jurisdiction where your customer is. Stripe assumes the sale of most goods or services to be taxable unless specifically exempted.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations). Learn more about [the different types of reports](https://docs.stripe.com/tax/reports).\n\nYou’re responsible for filing and remitting your taxes to Singapore. Stripe doesn’t file taxes on your behalf. However, we do have trusted partners who can help manage your filing and remittance.",
    "title": "Collect tax in Singapore | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Singapore.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/integration-overview",
    "markdown": "# Integrate with Invoicing | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to create and send invoices.\n\nNo-code or code\n\nStripe-hosted [invoices](https://docs.stripe.com/api/invoices \"invoices\") are commonly created and sent from the Dashboard with no code required. For more advanced billing setups, or to automate invoicing, use our Invoicing API.\n\n[](https://dashboard.stripe.com/test/invoices)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/invoicing-hero.096c89608f5466609f9ce07529a4d502.png)\n\n## Use the Dashboard ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n## Integrate with the Invoicing API ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
    "title": "Integrate with Invoicing | Stripe Documentation",
    "description": "Learn how to create and send invoices.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/features",
    "markdown": "# Invoicing features | Stripe DocumentationThe Stripe Docs logo\n\n[Skip to content](#main-content)\n\n[\n\nCreate account\n\n\n\n](https://dashboard.stripe.com/register/invoicing)\n\nor\n\n[\n\nSign in\n\n\n\n](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Finvoicing%2Ffeatures)\n\n[](https://docs.stripe.com/)\n\nSearch the docs or ask a question\n\n/\n\n[Create account](https://dashboard.stripe.com/register/invoicing)\n\n[\n\nSign in\n\n\n\n](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Finvoicing%2Ffeatures)\n\n[\n\nGet started\n\n\n\n](https://docs.stripe.com/get-started)\n\n[\n\nPayments\n\n\n\n](https://docs.stripe.com/payments)\n\n[\n\nFinance automation\n\n\n\n](https://docs.stripe.com/finance-automation)\n\n[\n\nBanking as a service\n\n\n\n](https://docs.stripe.com/financial-services)\n\n[\n\nDeveloper tools\n\n\n\n](https://docs.stripe.com/development)\n\n[\n\nNo-code\n\n\n\n](https://docs.stripe.com/no-code)\n\n[\n\nGet started\n\n\n\n](https://docs.stripe.com/get-started)\n\n[\n\nPayments\n\n\n\n](https://docs.stripe.com/payments)\n\n[\n\nFinance automation\n\n\n\n](https://docs.stripe.com/finance-automation)\n\n[\n\nGet started\n\n\n\n](https://docs.stripe.com/get-started)\n\n[\n\nPayments\n\n\n\n](https://docs.stripe.com/payments)\n\n[\n\nFinance automation\n\n\n\n](https://docs.stripe.com/finance-automation)\n\n[\n\nBanking as a service\n\n\n\n](https://docs.stripe.com/financial-services)\n\n[\n\nDeveloper tools\n\n\n\n](https://docs.stripe.com/development)\n\n[Overview](https://docs.stripe.com/finance-automation)\n\nBilling\n\n[Overview](https://docs.stripe.com/billing)\n\n[About the Billing APIs](https://docs.stripe.com/billing/billing-apis)\n\n[Subscriptions](https://docs.stripe.com/subscriptions)\n\n[Invoicing](https://docs.stripe.com/invoicing \"Create and manage invoices for one-time payments\")\n\n[Overview](https://docs.stripe.com/invoicing/overview \"Learn how Stripe Invoicing works\")\n\n[API quickstart](https://docs.stripe.com/invoicing/integration/quickstart \"Learn how to create and send an invoice with code\")\n\n[Invoicing without code](https://docs.stripe.com/invoicing/quickstart-guide)\n\n[Build your integration](https://docs.stripe.com/invoicing/integration-overview \"Learn how to create and send invoices\")\n\nInvoicing features\n\n[Status transitions and finalization](https://docs.stripe.com/invoicing/integration/workflow-transitions \"Learn about Invoicing workflow transitions\")\n\n[Customize invoices](https://docs.stripe.com/invoicing/customize \"Learn how to customize invoices\")\n\n[Products and prices](https://docs.stripe.com/invoicing/products-prices \"Create and use products and prices\")\n\n[Group invoice line items](https://docs.stripe.com/invoicing/group-line-items \"Organize line items into groups on an invoice\")\n\n[Summarize line items](https://docs.stripe.com/invoicing/line-item-grouping \"Summarize line items on an invoice\")\n\n[Manage bulk invoice line items](https://docs.stripe.com/invoicing/bulk-update-line-item \"Create, update, and delete multiple line items of an invoice at once\")\n\n[Preview an invoice](https://docs.stripe.com/invoicing/preview \"Create a preview of an invoice.\")\n\n[Edit invoices](https://docs.stripe.com/invoicing/invoice-edits \"Learn how to edit invoices\")\n\n[Send customer emails](https://docs.stripe.com/invoicing/send-email \"Send customer emails with or without code\")\n\n[Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page \"Use the Hosted Invoice Page\")\n\n[Generate credit notes](https://docs.stripe.com/invoicing/integration/programmatic-credit-notes \"Refund finalized invoices with credit notes\")\n\n[Global invoicing](https://docs.stripe.com/invoicing/global-invoicing \"Best practices for setting up invoices in different regions\")\n\n[Taxes](https://docs.stripe.com/invoicing/taxes \"Automatically collect sales tax, VAT, and GST\")\n\nInvoice payments\n\n[Create Invoice Payment Plans](https://docs.stripe.com/invoicing/payment-plans \"Learn how to create Invoice Payment Plans\")\n\n[Payment methods for invoices](https://docs.stripe.com/invoicing/payment-methods \"Supported payment methods for invoices\")\n\n[Automated collections](https://docs.stripe.com/invoicing/automated-collections)\n\nInvoice customers\n\n[Customers](https://docs.stripe.com/invoicing/customer \"Customers and Stripe Invoicing\")\n\n[Customer credit balance](https://docs.stripe.com/invoicing/customer/balance \"Use the customer credit balance\")\n\n[Customer tax IDs](https://docs.stripe.com/invoicing/customer/tax-ids \"Store, validate, and render customer tax ID numbers\")\n\n[Usage-based Billing](https://docs.stripe.com/billing/subscriptions/usage-based)\n\n[Connect and Billing](https://docs.stripe.com/billing/multi-entity-business)\n\n[Tax and Billing](https://docs.stripe.com/billing/taxes)\n\n[Quotes](https://docs.stripe.com/quotes \"Learn about quotes\")\n\n[Revenue recovery](https://docs.stripe.com/billing/revenue-recovery \"Learn about automated revenue recovery features for subscriptions\")\n\n[Automations](https://docs.stripe.com/billing/automations)\n\n[Revenue recognition](https://docs.stripe.com/revenue-recognition/methodology/subscriptions-and-invoicing \"Use Revenue Recognition with subscriptions\")\n\n[Customer management](https://docs.stripe.com/customer-management \"Learn how to enable self-serve customer management\")\n\n[Entitlements](https://docs.stripe.com/billing/entitlements \"Determine when you can grant your customers access to your product's features and when to revoke access.\")\n\n[Test your integration](https://docs.stripe.com/billing/testing \"Test your billing integration\")\n\nTax\n\nReporting\n\nData\n\nStartup incorporation\n\n[Home](https://docs.stripe.com/ \"Home\")[Finance automation](https://docs.stripe.com/finance-automation \"Finance automation\")[Billing](https://docs.stripe.com/billing \"Billing\")[Invoicing](https://docs.stripe.com/invoicing \"Invoicing\")\n\n## Explore invoicing features in depth.\n\n## Core capabilities ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[](https://docs.stripe.com/invoicing/integration/workflow-transitions \"Status transitions and finalization\")\n\n[Status transitions and finalization](https://docs.stripe.com/invoicing/integration/workflow-transitions \"Status transitions and finalization\")\n\n[\n\nLearn about Invoicing workflow transitions\n\n](https://docs.stripe.com/invoicing/integration/workflow-transitions \"Status transitions and finalization\")\n\n[](https://docs.stripe.com/invoicing/customize \"Customize invoices\")\n\n[Customize invoices](https://docs.stripe.com/invoicing/customize \"Customize invoices\")\n\n[\n\nLearn how to customize invoices\n\n](https://docs.stripe.com/invoicing/customize \"Customize invoices\")\n\n[](https://docs.stripe.com/invoicing/products-prices \"Products and prices\")\n\n[Products and prices](https://docs.stripe.com/invoicing/products-prices \"Products and prices\")\n\n[\n\nCreate and use products and prices\n\n](https://docs.stripe.com/invoicing/products-prices \"Products and prices\")\n\n[](https://docs.stripe.com/invoicing/group-line-items \"Group invoice line items\")\n\n[Group invoice line items](https://docs.stripe.com/invoicing/group-line-items \"Group invoice line items\")\n\n[\n\nOrganize line items into groups on an invoice\n\n](https://docs.stripe.com/invoicing/group-line-items \"Group invoice line items\")\n\n[](https://docs.stripe.com/invoicing/line-item-grouping \"Summarize line items\")\n\n[Summarize line items](https://docs.stripe.com/invoicing/line-item-grouping \"Summarize line items\")\n\n[\n\nSummarize line items on an invoice\n\n](https://docs.stripe.com/invoicing/line-item-grouping \"Summarize line items\")\n\n[](https://docs.stripe.com/invoicing/bulk-update-line-item \"Manage bulk invoice line items\")\n\n[Manage bulk invoice line items](https://docs.stripe.com/invoicing/bulk-update-line-item \"Manage bulk invoice line items\")\n\n[\n\nCreate, update, and delete multiple line items of an invoice at once\n\n](https://docs.stripe.com/invoicing/bulk-update-line-item \"Manage bulk invoice line items\")\n\n[](https://docs.stripe.com/invoicing/preview \"Preview an invoice\")\n\n[Preview an invoice](https://docs.stripe.com/invoicing/preview \"Preview an invoice\")\n\n[\n\nCreate a preview of an invoice.\n\n](https://docs.stripe.com/invoicing/preview \"Preview an invoice\")\n\n[](https://docs.stripe.com/invoicing/invoice-edits \"Edit invoices\")\n\n[Edit invoices](https://docs.stripe.com/invoicing/invoice-edits \"Edit invoices\")\n\n[\n\nLearn how to edit invoices\n\n](https://docs.stripe.com/invoicing/invoice-edits \"Edit invoices\")\n\n[](https://docs.stripe.com/invoicing/send-email \"Send customer emails\")\n\n[Send customer emails](https://docs.stripe.com/invoicing/send-email \"Send customer emails\")\n\n[\n\nSend customer emails with or without code\n\n](https://docs.stripe.com/invoicing/send-email \"Send customer emails\")\n\n[](https://docs.stripe.com/invoicing/hosted-invoice-page \"Hosted Invoice Page\")\n\n[Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page \"Hosted Invoice Page\")\n\n[\n\nUse the Hosted Invoice Page\n\n](https://docs.stripe.com/invoicing/hosted-invoice-page \"Hosted Invoice Page\")\n\n[](https://docs.stripe.com/invoicing/hosted-invoice-page/scheduled-payments \"Scheduled payments\")\n\n[Scheduled payments](https://docs.stripe.com/invoicing/hosted-invoice-page/scheduled-payments \"Scheduled payments\")\n\n[\n\nThe Hosted Invoice Page and scheduled payments\n\n](https://docs.stripe.com/invoicing/hosted-invoice-page/scheduled-payments \"Scheduled payments\")\n\n[](https://docs.stripe.com/invoicing/integration/programmatic-credit-notes \"Generate credit notes\")\n\n[Generate credit notes](https://docs.stripe.com/invoicing/integration/programmatic-credit-notes \"Generate credit notes\")\n\n[\n\nRefund finalized invoices with credit notes\n\n](https://docs.stripe.com/invoicing/integration/programmatic-credit-notes \"Generate credit notes\")\n\n## Global invoicing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[](https://docs.stripe.com/invoicing/global-invoicing \"Global invoicing\")\n\n[Global invoicing](https://docs.stripe.com/invoicing/global-invoicing \"Global invoicing\")\n\n[\n\nBest practices for setting up invoices in different regions\n\n](https://docs.stripe.com/invoicing/global-invoicing \"Global invoicing\")\n\n[](https://docs.stripe.com/invoicing/global-config-guide \"Set up invoices in Europe\")\n\n[Set up invoices in Europe](https://docs.stripe.com/invoicing/global-config-guide \"Set up invoices in Europe\")\n\n[\n\nLearn the best practices for setting up invoices in Europe\n\n](https://docs.stripe.com/invoicing/global-config-guide \"Set up invoices in Europe\")\n\n[](https://docs.stripe.com/invoicing/japan-config-guide \"Set up invoices in Japan\")\n\n[Set up invoices in Japan](https://docs.stripe.com/invoicing/japan-config-guide \"Set up invoices in Japan\")\n\n[\n\nLearn the best practices for setting up invoices in Japan\n\n](https://docs.stripe.com/invoicing/japan-config-guide \"Set up invoices in Japan\")\n\n[](https://docs.stripe.com/invoicing/multi-currency-customers \"Multi-currency customers\")\n\n[Multi-currency customers](https://docs.stripe.com/invoicing/multi-currency-customers \"Multi-currency customers\")\n\n[\n\nChange the billable currency for any customer\n\n](https://docs.stripe.com/invoicing/multi-currency-customers \"Multi-currency customers\")\n\n[](https://docs.stripe.com/invoicing/india-emandate-guide \"India e-Mandates\")\n\n[India e-Mandates](https://docs.stripe.com/invoicing/india-emandate-guide \"India e-Mandates\")\n\n[\n\nLearn how to integrate India e-Mandates\n\n](https://docs.stripe.com/invoicing/india-emandate-guide \"India e-Mandates\")\n\n[](https://docs.stripe.com/invoicing/dashboard/customize-iban-country \"Customize the IBAN country\")\n\n[Customize the IBAN country](https://docs.stripe.com/invoicing/dashboard/customize-iban-country \"Customize the IBAN country\")\n\n[\n\nBank transfers and customizing the IBAN country\n\n](https://docs.stripe.com/invoicing/dashboard/customize-iban-country \"Customize the IBAN country\")\n\n## Taxes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[](https://docs.stripe.com/invoicing/taxes \"Taxes\")\n\n[Taxes](https://docs.stripe.com/invoicing/taxes \"Taxes\")\n\n[\n\nAutomatically collect sales tax, VAT, and GST\n\n](https://docs.stripe.com/invoicing/taxes \"Taxes\")\n\n[](https://docs.stripe.com/invoicing/taxes/account-tax-ids \"Account tax IDs\")\n\n[Account tax IDs](https://docs.stripe.com/invoicing/taxes/account-tax-ids \"Account tax IDs\")\n\n[\n\nStore and render tax ID numbers\n\n](https://docs.stripe.com/invoicing/taxes/account-tax-ids \"Account tax IDs\")\n\n[](https://docs.stripe.com/invoicing/taxes/tax-rates \"Tax rates and IDs\")\n\n[Tax rates and IDs](https://docs.stripe.com/invoicing/taxes/tax-rates \"Tax rates and IDs\")\n\n[\n\nAssign tax rates to draft invoices\n\n](https://docs.stripe.com/invoicing/taxes/tax-rates \"Tax rates and IDs\")\n\n[](https://docs.stripe.com/invoicing/taxes/manual-tax-amounts \"Manual tax amounts\")\n\n[Manual tax amounts](https://docs.stripe.com/invoicing/taxes/manual-tax-amounts \"Manual tax amounts\")\n\n[\n\nUse tax amounts calculated outside of Stripe with Stripe Billing\n\n](https://docs.stripe.com/invoicing/taxes/manual-tax-amounts \"Manual tax amounts\")\n\n## Invoice payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[](https://docs.stripe.com/invoicing/payment-plans \"Create Invoice Payment Plans\")\n\n[Create Invoice Payment Plans](https://docs.stripe.com/invoicing/payment-plans \"Create Invoice Payment Plans\")\n\n[\n\nLearn how to create Invoice Payment Plans\n\n](https://docs.stripe.com/invoicing/payment-plans \"Create Invoice Payment Plans\")\n\n[](https://docs.stripe.com/invoicing/payment-methods \"Payment methods for invoices\")\n\n[Payment methods for invoices](https://docs.stripe.com/invoicing/payment-methods \"Payment methods for invoices\")\n\n[\n\nSupported payment methods for invoices\n\n](https://docs.stripe.com/invoicing/payment-methods \"Payment methods for invoices\")\n\n[](https://docs.stripe.com/invoicing/ach-debit \"ACH Direct Debit\")\n\n[ACH Direct Debit](https://docs.stripe.com/invoicing/ach-debit \"ACH Direct Debit\")\n\n[\n\nConfigure, create, and process invoices to use ACH Direct Debit\n\n](https://docs.stripe.com/invoicing/ach-debit \"ACH Direct Debit\")\n\n[](https://docs.stripe.com/invoicing/bank-transfer \"Bank transfer\")\n\n[Bank transfer](https://docs.stripe.com/invoicing/bank-transfer \"Bank transfer\")\n\n[\n\nPay invoices by transferring funds to a bank account\n\n](https://docs.stripe.com/invoicing/bank-transfer \"Bank transfer\")\n\n[](https://docs.stripe.com/invoicing/automated-collections \"Automated collections\")\n\n[Automated collections](https://docs.stripe.com/invoicing/automated-collections \"Automated collections\")\n\n[\n\nAutomatic invoice advancement\n\n](https://docs.stripe.com/invoicing/automated-collections \"Automated collections\")\n\n[](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection \"Automatic invoice advancement\")\n\n[Automatic invoice advancement](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection \"Automatic invoice advancement\")\n\n[\n\nLearn about automatic advancement and collection.\n\n](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection \"Automatic invoice advancement\")\n\n[](https://docs.stripe.com/invoicing/automatic-reconciliation \"Automatic reconciliation\")\n\n[Automatic reconciliation](https://docs.stripe.com/invoicing/automatic-reconciliation \"Automatic reconciliation\")\n\n[\n\nUnderstand cash reconciliation\n\n](https://docs.stripe.com/invoicing/automatic-reconciliation \"Automatic reconciliation\")\n\n[](https://docs.stripe.com/invoicing/automatic-collection \"Automatic collection\")\n\n[Automatic collection](https://docs.stripe.com/invoicing/automatic-collection \"Automatic collection\")\n\n[\n\nAutomatically collect payment from your customers\n\n](https://docs.stripe.com/invoicing/automatic-collection \"Automatic collection\")\n\n[](https://docs.stripe.com/invoicing/automatic-charging \"Automatic charging\")\n\n[Automatic charging](https://docs.stripe.com/invoicing/automatic-charging \"Automatic charging\")\n\n[\n\nStripe’s automatic collection and dunning features.\n\n](https://docs.stripe.com/invoicing/automatic-charging \"Automatic charging\")\n\n## Invoice customers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[](https://docs.stripe.com/invoicing/customer \"Customers\")\n\n[Customers](https://docs.stripe.com/invoicing/customer \"Customers\")\n\n[\n\nCustomers and Stripe Invoicing\n\n](https://docs.stripe.com/invoicing/customer \"Customers\")\n\n[](https://docs.stripe.com/invoicing/customer/balance \"Customer credit balance\")\n\n[Customer credit balance](https://docs.stripe.com/invoicing/customer/balance \"Customer credit balance\")\n\n[\n\nUse the customer credit balance\n\n](https://docs.stripe.com/invoicing/customer/balance \"Customer credit balance\")\n\n[](https://docs.stripe.com/invoicing/customer/tax-ids \"Customer tax IDs\")\n\n[Customer tax IDs](https://docs.stripe.com/invoicing/customer/tax-ids \"Customer tax IDs\")\n\n[\n\nStore, validate, and render customer tax ID numbers\n\n](https://docs.stripe.com/invoicing/customer/tax-ids \"Customer tax IDs\")\n\nWas this page helpful?\n\nYesNo\n\nNeed help? [Contact Support](https://support.stripe.com/).\n\nJoin our [early access program](https://insiders.stripe.dev/).\n\nCheck out our [product changelog](https://stripe.com/blog/changelog).\n\nQuestions? [Contact Sales](https://stripe.com/contact/sales).\n\nPowered by [Markdoc](https://markdoc.dev/)\n\nSign up for developer updates:\n\nYou can unsubscribe at any time. Read our [privacy policy](https://stripe.com/privacy).\n\nOn this page\n\n[Core capabilities](#core-capabilities \"Core capabilities \")\n\n[Global invoicing](#global-invoicing \"Global invoicing \")\n\n[Taxes](#taxes \"Taxes \")\n\n[Invoice payments](#invoice-payments \"Invoice payments \")\n\n[Invoice customers](#invoice-customers \"Invoice customers \")\n\nRelated Guides\n\n[\n\nHow Invoicing Works\n\n\n\n](https://docs.stripe.com/invoicing/overview)\n\n[\n\nUse the Dashboard\n\n\n\n](https://docs.stripe.com/invoicing/dashboard)\n\n[\n\nIntegrate with the API\n\n\n\n](https://docs.stripe.com/invoicing/integration)\n\nProducts Used\n\n[\n\nInvoicing\n\n\n\n](https://docs.stripe.com/invoicing)",
    "title": "Invoicing features | Stripe Documentation",
    "description": "Explore invoicing features in depth.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/line-item-grouping",
    "markdown": "# Invoice summary items | Stripe DocumentationThe Stripe Docs logo\n\nFor an existing draft invoice, create an invoice summary item as described below. The summary item represents a group that you can assign line items to, and the `description` field of the summary item renders as the group header for these line items.\n\nBy default, Stripe renders all the line items assigned to the summary item. You can also hide all line items assigned to the summary item and only display the group header by setting `display_items=none` as a parameter on the summary item. If you set `display_items=none`, it hides all line items assigned to the summary item. It is not possible to selectively hide some line items but not others, except for line items with a value of 0 USD (see **Hide individual $0 line items** section).\n\n`curl https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/summary_items \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d description=\"Summary item 1\" \\   -d display_items=\"none\"`\n\nInstead of creating the summary items one-by-one, you can also bulk create with the [create](https://docs.stripe.com/api/invoices/create) or [update](https://docs.stripe.com/api/invoices/update) invoice endpoints. The example code below creates a draft invoice with two empty summary items\n\n`curl https://api.stripe.com/v1/invoices \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"rendering[summary_items_data][0][description]\"=\"Summary item 1\" \\   -d \"rendering[summary_items_data][0][display_items]\"=\"none\" \\   -d \"rendering[summary_items_data][1][description]\"=\"Summary item 2\" \\   -d \"expand[]\"=\"rendering.summary_items\"`\n\nRemember to expand `rendering.summary_items` so you can see the list of summary items in the response.",
    "title": "Invoice summary items | Stripe Documentation",
    "description": "Learn how to use the Invoicing APIs to summarize and hide invoice line items.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/bulk-update-line-item",
    "markdown": "# Manage bulk invoice line items\n\n## Manage bulk invoice line itemsBeta\n\n## Add, update and remove multiple invoice line items with the Invoices API.\n\nYou can edit multiple line items on an invoice by bulk adding, updating, and removing line items with the [Invoices API](https://docs.stripe.com/api/invoices).\n\n[](#add-line-items)\n\nTo create multiple line items on the same invoice, reference the [invoice ID](https://docs.stripe.com/api/invoices/object#invoice_object-). You can also assign a preexisting unassigned invoice item with the [invoice item ID](https://docs.stripe.com/api/invoiceitems/object#invoiceitem_object-). Here’s how to create two new line items and assign an existing invoice item to this invoice.\n\n`curl https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/add_lines \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d \"lines[0][amount]\"=7500 \\   -d \"lines[0][currency]\"=\"usd\" \\   -d \"lines[1][price]\"={{PRICE_ID}} \\   -d \"lines[1][description]\"=\"New line item\" \\   -d \"lines[2][invoice_item]\"={{INVOICE_ITEM_1}}`\n\n#### Common mistake\n\nEnsure that you are using the invoice item ID, using a line item ID here will result in an error.\n\n[](#update-lines)\n\nFrom here, you can update multiple line items on the same invoice based on the invoice ID and line item IDs like the following:\n\n`curl https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/update_lines \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d \"lines[0][id]\"={{LINE_ITEM_1}} \\   -d \"lines[0][description]\"=\"New description\" \\   -d \"lines[0][metadata][key]\"=\"new value\" \\   -d \"lines[1][id]\"={{LINE_ITEM_2}} \\   -d \"lines[1][price]\"={{PRICE_ID}} \\   -d \"lines[2][id]\"={{LINE_ITEM_3}} \\   -d \"lines[2][discountable]\"=true`\n\nThe example above updates the description and metadata for line item 1, the price for line item 2, and whether it’s discountable for line item 3.\n\n[](#remove-lineitems)\n\nYou can delete or unassign multiple line items on the same invoice by referencing the invoice ID and line item IDs and distinguishing between different removal types with the `behavior` key. Here’s how to permanently delete `LINE_ITEM_1` and unassign `LINE_ITEM_2`. You can reassign `LINE_ITEM_2` to another invoice in another request.\n\n`curl https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/remove_lines \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d \"lines[0][id]\"={{LINE_ITEM_1}} \\   -d \"lines[0][behavior]\"=\"delete\" \\   -d \"lines[1][id]\"={{LINE_ITEM_2}} \\   -d \"lines[1][behavior]\"=\"unassign\"`\n\n[](#restrictions)\n\nThere are some restrictions when using this feature\n\n*   The invoice must still be in a draft state\n*   There are two [types of invoice line items](https://docs.stripe.com/api/invoices/line_item#invoice_line_item_object-type)\n    1.  `type: invoiceitem`: Generated when an [invoice item](https://docs.stripe.com/api/invoiceitems) is added to an invoice.\n    2.  `type: subscription`: Automatically generated for a subscription invoice from each subscription item. This is the [full list of fields that are available](https://docs.stripe.com/api/invoices/update_lines#bulk_update_lines-lines) to update for each line item. While all fields are supported for `invoiceitem` line items, you can only update a small subset for `subscription` line items. Fields that are supported for `subscription` line items are `tax_rates`, or `discounts`.\n*   You can update a maximum of 50 line items in one API call. This limit is subject to change and might increase or decrease.\n\n[](#invoice-metadata)\n\nYou can set invoice metadata in the same request for any of the above endpoints. Here’s an example calling [update\\_lines](https://docs.stripe.com/api/invoices).\n\n`curl https://api.stripe.com/v1/invoices/`\n\n`{{INVOICE_ID}}`\n\n`/update_lines \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d \"lines[0][id]\"={{LINE_ITEM_1}} \\   -d \"lines[0][description]\"=\"New description\" \\   -d \"lines[1][id]\"={{LINE_ITEM_1}} \\   -d \"lines[2][description]\"=\"Another description\" \\   -d \"invoice_metadata[is_processed]\"=\"true\"`",
    "title": "Manage bulk invoice line items | Stripe Documentation",
    "description": "Add, update and remove multiple invoice line items with the Invoices API.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/group-line-items",
    "markdown": "# Group invoice line items | Stripe DocumentationThe Stripe Docs logo\n\n### Create an invoice rendering template![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Go to **Settings > Invoice template** in the Stripe Dashboard.\n2.  In the **Templates** section, click **\\+ Create template**.\n3.  Name your template. You use the template name when you apply the template to a subscription or a one-time invoice.\n\n### Add a policy to the template![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you create the template, add a line item grouping policy to it. You write these policies in CEL, which allows Stripe to dynamically filter and group line items.\n\n#### Best practices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you create a template, keep in mind:\n\n*   The order of the policies matter. For example, if the first policy picks up all the line items that satisfy the filter condition, the second policy picks up all the remaining line items that aren’t yet in a group after the first policy.\n*   `expand()` is a Stripe-specific macro to expand fields on the API object. See the Stripe-specific CEL expression macros section.\n\n#### Write a CEL expression![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInvoice template CEL expressions take an invoice [line item object](https://docs.stripe.com/api/invoices/line_item) as the input. You can use any of that object’s fields in an expression. For example:\n\n`line_item.field_name line_item.description`\n\nYou can expand ID fields that point to other Stripe objects, like a [subscription](https://docs.stripe.com/api/subscriptions/object) or [subscription\\_item](https://docs.stripe.com/api/subscription_items/object), with the `expand()` function. For example, to access a subscription’s metadata:\n\n`line_item.subscription.expand().metadata`\n\n#### Common mistake\n\nYou can only expand one level deep. For example, you can’t expand a subscription’s payment method and type fields. This is not currently supported: `line_item.subscription.expand().default_payment_method.expand().type`\n\n##### Stripe-specific CEL expression macros![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the list of standard CEL expression macros, we currently support these Stripe-specific functions:\n\n*   `expand()`: Expands publicly user expandable API fields. For example, in a CEL expression, `line_item.invoice_item` returns the invoice item ID. With `line_item.invoice_item.expand()`, it returns the full invoice item object.\n\n#### Line item grouping fields![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA line item grouping has three fields:\n\n| Field | Type | Description |\n| --- | --- | --- |\n| **Group by** | CEL Expression `<line_item => string>` | Controls the grouping of line items. It’s evaluated against each line item on the invoice that hasn’t been filtered out and returns a string. Line items with the same result string are grouped together under a summary item, where the result string becomes the description of the summary item.<br><br>For example, if you want to group together static line item names, like “PO Number”, the CEL expression would be `PO Number`.<br><br>If you want to dynamically group line items using “PO” from a line item’s metadata, the CEL expression would be:<br><br>`'PO Number' + line_item.invoice_item.expand().metadata['PO']`<br><br>With this expression, a line item with `metadata['PO'] = 123` evaluates to “PO Number: 123”. If multiple line items evaluate to the exact same string, they’re grouped together under a summary item where the description is “PO Number: 123”. |\n| **Filter by** | CEL Expression `<line_item => boolean>` | Filters line items in a policy. This expression is evaluated against each invoice line item on the invoice. If a given invoice line item matches the filter, it’s added to the invoice line item group defined for this policy.<br><br>For example, if you want to group line items that have a PO number, use `has(line_item.invoice_item.expand().metadata.PO)`. If the line item’s invoice item resource has a metadata field of `PO`, the expression returns `true`. Otherwise, it returns `false`. |\n| **Hide line items** | Toggle | Controls whether to collapse or expand the summary items formed from an invoice line item grouping policy. Summary items are expanded by default. |\n\n### Apply the invoice rendering template to a one-time invoice or subscription![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo use the invoice line item grouping policy, apply the template to an invoice or a subscription.\n\nUse the [invoice editor](https://dashboard.stripe.com/invoices/create) in the Stripe Dashboard to apply invoice rendering templates to new and draft invoices.\n\nUse the [subscription editor](https://dashboard.stripe.com/subscriptions?create=subscription) in the Stripe Dashboard to apply the invoice rendering template to a subscription. All future invoices generated from that subscription use the invoice line item grouping policies of that rendering template. You can apply the template draft to subscription invoices. You can’t apply the template to finalized invoices.\n\nLearn more about [invoice transitions and finalization](https://docs.stripe.com/invoicing/integration/workflow-transitions).",
    "title": "Group invoice line items | Stripe Documentation",
    "description": "Dynamically filter and group invoice line items.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/products-prices",
    "markdown": "# Products and prices | Stripe DocumentationThe Stripe Docs logo\n\n## Use the Invoicing API to manage products and prices.\n\nDefine all your business and product offerings in one place. [Products](https://docs.stripe.com/api/products \"Products\") define what you sell and [Prices](https://docs.stripe.com/api/prices \"Prices\") track how much and how often to charge. This is a core entity within Stripe that works with [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"), [invoices](https://docs.stripe.com/api/invoices \"invoices\"), and [Checkout](https://docs.stripe.com/payments/checkout).\n\nPrices enable these use cases:\n\n*   A software provider that charges a one-time setup fee whenever a user creates a new subscription.\n*   An e-commerce store that sends a recurring box of goods for 10 USD per month and wants to allow customers to purchase one-time add-ons.\n*   A professional services firm that can now create a standard list of services and choose from that list per invoice instead of typing out each line item by hand.\n*   A non-profit organization that allows donors to define a custom recurring donation amount per customer.\n\nYou can manage your product catalog with products and prices. Products define what you sell and prices track how much and how often to charge. Manage your products and their prices in the Dashboard or through the API.\n\nIf you used the Dashboard in test mode to set up your business, you can copy each of your products over to live mode by using **Copy to live mode** in the [Product catalog page](https://dashboard.stripe.com/products). Use our official libraries to access the Stripe API from your application.\n\n1.  Navigate to the **Product catalog** page, and click **Add product**.\n    \n2.  Select whether you want to create a **One-time product**, or a **Recurring one-time product**.\n    \n3.  Give your product a name, and assign it a price.",
    "title": "Products and prices | Stripe Documentation",
    "description": "Use the Invoicing API to manage products and prices.",
    "languageCode": "en-US"
  }
]