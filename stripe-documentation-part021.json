[
  {
    "url": "https://docs.stripe.com/connect/1099-K",
    "markdown": "# 1099-K form state requirements | Stripe DocumentationThe Stripe Docs logo\n\n## View the state requirements for 1099-K forms.\n\n#### Warning\n\nSome participating State regulatory agencies haven’t fully finalized filing requirements and requirements remain subject to change for the 2023 tax season. Updates that occur to this page are automatically reflected in the form status badges and counts in the tax reporting Dashboard.\n\nFor 1099-K forms, the IRS requires filing if, in a calendar year, the gross amount of total reportable payments exceeds $20,000 and there are more than 200 transactions. Filing requirements for some states might differ from federal requirements.\n\nWe outline state filing requirements for 1099-K forms to help you identify which [states you can file directly](https://docs.stripe.com/connect/tax-forms-state-requirements) in your Dashboard, which states require a state tax registration or withholding ID when filing, and which states you’re responsible for filing directly with.\n\n#### Warning\n\nIf you have done backup withholding or state withholding, you might have additional reporting requirements with states. We recommend that you consult a tax advisor.\n\n| STATE | 1099-K FILING REQUIRED | DOES STRIPE FILE | FILING DUE DATE\\* | FILING THRESHOLD | IF ISSUED, PROVIDE STATE NUMBER |\n| --- | --- | --- | --- | --- | --- |\n| **Alabama** | State Portal |     | April 30 | Same as IRS | –   |\n| **Alaska** | No  | –   | –   | \\-  | –   |\n| **Arizona** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Arkansas** | CFSF |     | Same as IRS | $2,500 | –   |\n| **California** | CFSF |     | Same as IRS | Same as IRS | –   |\n| **Colorado** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Connecticut** | State Portal |     | April 30 | Same as IRS | Connecticut Tax Registration Number |\n| **Delaware** | No  | –   | –   | \\-  | –   |\n| **District of Columbia** | State Portal |     | Same as IRS | $600 | –   |\n| **Florida** | State Portal |     | April 30 | Same as IRS | –   |\n| **Georgia** | State Portal |     | Same as IRS | Same as IRS | –   |\n| **Hawaii** | CFSF |     | Same as IRS | Same as IRS | –   |\n| **Idaho** | No  | –   | –   | \\-  | –   |\n| **Illinois** | State Portal |     | Same as IRS | $1,000 and 4 transactions | –   |\n| **Indiana** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Iowa** | If State Witholding |     | February 15 | $0  | –   |\n| **Kansas** | CFSF |     | Same as IRS | Same as IRS | Kansas Withholding Tax Account Number |\n| **Kentucky** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Louisiana** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Maine** | State Portal |     | –   | Same as IRS | –   |\n| **Maryland** | State Portal |     | Same as IRS | $600 | Maryland Central Registration Number |\n| **Massachusetts** | State Portal |     | Same as IRS | $600 | –   |\n| **Michigan** | No  | –   | –   | \\-  | –   |\n| **Minnesota** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Mississippi** | No  | –   | –   | \\-  | –   |\n| **Missouri** | No  | –   | –   | \\-  | –   |\n| **Montana** | State Portal |     | April 1 | $600 | –   |\n| **Nebraska** | No  | –   | –   | \\-  | –   |\n| **Nevada** | No  | –   | –   | \\-  | –   |\n| **New Hampshire** | No  | –   | –   | \\-  | –   |\n| **New Jersey** | CFSF |     | Same as IRS | $1,000 | –   |\n| **New Mexico** | No  | –   | –   | \\-  | –   |\n| **New York** | State Portal |     | April 30 | Same as IRS | –   |\n| **North Carolina** | State Portal |     | Same as IRS | $600 | NC Withholding ID Number or EIN |\n| **North Dakota** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Ohio** | No  | –   | –   | \\-  | –   |\n| **Oklahoma** | No  | –   | –   | \\-  | –   |\n| **Oregon** | State Portal |     | Same as IRS | Same as IRS | –   |\n| **Pennsylvania** | No  | –   | –   | \\-  | –   |\n| **Rhode Island** | If State Witholding |     | Same as IRS | $100 | –   |\n| **South Carolina** | If State Witholding |     | Same as IRS | $0  | SC Withholding File Number or EIN |\n| **South Dakota** | No  | –   | –   | \\-  | –   |\n| **Tennessee** | State Portal |     | April 30 | Same as IRS | –   |\n| **Texas** | No  | –   | –   | \\-  | –   |\n| **Utah** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Vermont** | State Portal |     | April 30 | $600 | Vermont Withholding Account Number |\n| **Virginia** | State Portal |     | April 30 | $600 | –   |\n| **Washington** | No  | –   | –   | \\-  | –   |\n| **West Virginia** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Wisconsin** | If State Witholding |     | Same as IRS | $0  | Wisconsin Withholding Tax Number\\*\\* |\n| **Wyoming** | No  | –   | –   | \\-  | –   |\n\n## How to interpret form state requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe supports filing in all states that require 1099-K filing and don’t have withholding-based filing requirements. When you file your 1099-K forms from the [Tax forms view](https://dashboard.stripe.com/connect/taxes/forms) in the Dashboard, Stripe submits your forms to the IRS and all qualifying states.\n\n### 1099-K FILING REQUIRED![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n|     |     |\n| --- | --- |\n| State Portal | Stripe submits the forms directly to these states. An additional state filing fee of 1.49 USD applies per 1099-K form filed directly with state revenue authorities. |\n| CFSF | States listed as CFSF are part of the Combined Federal / State Filing (CFSF) program. Forms filed to the IRS are automatically forwarded to the state, eliminating separate reporting to the participating states. If forms have already been filed with the IRS, you won’t be charged an additional state filing fee for filing in these states.<br><br>Some states still require direct filing with the state, even though they participate in the CFSF program. Stripe submits the forms directly to these states. |\n| If State Withholding | You’re required to file a 1099-K form with that state only if you withheld state taxes. In your Dashboard, you can specify the amount withheld by updating the form and updating the `state_tax_withheld` column. When you file your 1099-K forms in the Dashboard, we automatically export forms eligible for state filing and with `state_tax_withheld` so you can file directly with applicable states. |\n\n#### Note\n\nSome forms that appear to be below the federal filing threshold can also appear as `Ready` or `Needs attention` due to Grouped TINs or state filing thresholds. [Learn more](https://docs.stripe.com/connect/file-tax-forms#below-threshold-forms)\n\n### FILING DUE DATE![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhile the IRS filing deadline for 1099-K forms is March 31 and the IRS deadline to deliver 1099 forms to your payees is January 31st, we coupled filing and delivery together to streamline the tax reporting process. **January 23rd, 2024** is the latest recommended date to file forms with the IRS and states in your Stripe Dashboard. This guarantees forms are filed with the IRS and a copy is sent to the recipients before the IRS delivery deadline of January 31st.\n\n### STATE NUMBERS![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nState Tax Registration or Withholding IDs are only required for some states. After you obtain the registration or withholding ID, add the states in which you’ll file and the corresponding IDs on the [Tax forms settings](https://dashboard.stripe.com/settings/connect/tax_forms) page. In the Dashboard, click **Settings**. On **Product settings**, under **Connect**, click **Tax form settings**. When filing forms in your Dashboard, you must provide an appropriate ID in states that require one.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [File form with states](https://docs.stripe.com/connect/tax-forms-state-requirements)\n*   [Add the state tax Registration or withholding ID](https://docs.stripe.com/connect/tax-forms-state-requirements#add-state-reg)",
    "title": "1099-K form state requirements | Stripe Documentation",
    "description": "View the state requirements for 1099-K forms.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/1099-NEC",
    "markdown": "# 1099-NEC form state requirements | Stripe DocumentationThe Stripe Docs logo\n\n## View the state requirements for 1099-NEC forms.\n\n#### Warning\n\nSome participating State regulatory agencies haven’t fully finalized filing requirements and requirements remain subject to change for the 2023 tax season. Updates that occur to this page are automatically reflected in the form status badges and counts in the tax reporting Dashboard.\n\nFor 1099-NEC forms, the IRS requires filing if the amount of total reportable payments is $600 or more. Filing requirements for some states might differ from federal requirements.\n\nWe outline state filing requirements for 1099-NEC forms to help you identify which [states you can file directly](https://docs.stripe.com/connect/tax-forms-state-requirements) in your Dashboard, which states require a state tax registration or withholding ID when filing, and which states you’re responsible for filing directly with.\n\n#### Warning\n\nIf you have done backup withholding or state withholding, you might have additional reporting requirements with states. We recommend that you consult a tax advisor.\n\n| STATE | 1099-NEC FILING REQUIRED | DOES STRIPE FILE | FILING DUE DATE\\* | FILING THRESHOLD | IF ISSUED, PROVIDE STATE NUMBER |\n| --- | --- | --- | --- | --- | --- |\n| **Alabama** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Alaska** | No  | –   | –   | \\-  | –   |\n| **Arizona** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Arkansas** | CFSF |     | Same as IRS | Same as IRS | –   |\n| **California** | CFSF |     | Same as IRS | Same as IRS | –   |\n| **Colorado** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Connecticut** | If State Witholding |     | Same as IRS | $0  | Connecticut Tax Registration Number |\n| **Delaware** | State Portal |     | Same as IRS | Same as IRS | Must use EIN |\n| **District of Columbia** | State Portal |     | Same as IRS | Same as IRS | –   |\n| **Florida** | No  | –   | –   | \\-  | –   |\n| **Georgia** | If State Witholding |     | Same as IRS | Same as IRS | –   |\n| **Hawaii** | CFSF |     | Same as IRS | Same as IRS | –   |\n| **Idaho** | CFSF |     | February 28 | Same as IRS | Idaho Withholding Account Number |\n| **Illinois** | No  | –   | –   | \\-  | –   |\n| **Indiana** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Iowa** | If State Witholding |     | February 15 | $0  | –   |\n| **Kansas** | If State Witholding |     | Same as IRS | $0  | Kansas Withholding Tax Account Number |\n| **Kentucky** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Louisiana** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Maine** | State Portal |     | –   | Same as IRS | –   |\n| **Maryland** | If State Witholding |     | Same as IRS | $0  | Maryland Central Registration Number |\n| **Massachusetts** | State Portal |     | Same as IRS | Same as IRS | –   |\n| **Michigan** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Minnesota** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Mississippi** | State Portal |     | Same as IRS | $601 | –   |\n| **Missouri** | CFSF |     | Same as IRS | Same as IRS | –   |\n| **Montana** | State Portal |     | Same as IRS | Same as IRS | –   |\n| **Nebraska** | If State Witholding |     | Same as IRS | $0  | Nebraska Number |\n| **Nevada** | No  | –   | –   | \\-  | –   |\n| **New Hampshire** | No  | –   | –   | \\-  | –   |\n| **New Jersey** | CFSF |     | Same as IRS | Same as IRS | –   |\n| **New Mexico** | No  | –   | –   | \\-  | –   |\n| **New York** | No  | –   | –   | \\-  | –   |\n| **North Carolina** | If State Witholding |     | Same as IRS | $0  | NC Withholding ID Number or EIN |\n| **North Dakota** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Ohio** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Oklahoma** | CFSF |     | Same as IRS | Same as IRS | –   |\n| **Oregon** | State Portal |     | Same as IRS | Same as IRS | –   |\n| **Pennsylvania** | State Portal |     | Same as IRS | Same as IRS | PA Employer Account ID |\n| **Rhode Island** | If State Witholding |     | Same as IRS | $100 | –   |\n| **South Carolina** | If State Witholding |     | Same as IRS | $0  | SC Withholding File Number or EIN |\n| **South Dakota** | No  | –   | –   | \\-  | –   |\n| **Tennessee** | No  | –   | –   | \\-  | –   |\n| **Texas** | No  | –   | –   | \\-  | –   |\n| **Utah** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Vermont** | If State Witholding |     | Same as IRS | $0  | Vermont Withholding Account Number |\n| **Virginia** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Washington** | No  | –   | –   | \\-  | –   |\n| **West Virginia** | If State Witholding |     | Same as IRS | $0  | –   |\n| **Wisconsin** | If State Witholding |     | Same as IRS | $0  | Wisconsin Withholding Tax Number\\*\\* |\n| **Wyoming** | No  | –   | –   | \\-  | –   |\n\n## How to interpret form state requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe supports filing in all states that require 1099-NEC filing and don’t have withholding-based filing requirements. When you file your 1099-NEC forms from the [Tax forms view](https://dashboard.stripe.com/connect/taxes/forms) in the Dashboard, Stripe submits your forms to the IRS and all qualifying states.\n\n### 1099-NEC FILING REQUIRED![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n|     |     |\n| --- | --- |\n| State Portal | Stripe submits the forms directly to these states. An additional state filing fee of 1.49 USD applies per 1099-NEC form filed directly with state revenue authorities. |\n| CFSF | States listed as CFSF are part of the Combined Federal / State Filing (CFSF) program. Forms filed to the IRS are automatically forwarded to the state, eliminating separate reporting to the participating states. If forms have already been filed with the IRS, you won’t be charged an additional state filing fee for filing in these states.<br><br>Some states still require direct filing with the state, even though they participate in the CFSF program. Stripe submits the forms directly to these states. |\n| If State Withholding | You’re required to file a 1099-NEC form with that state only if you withheld state taxes. In your Dashboard, you can specify the amount withheld by updating the form and updating the `state_tax_withheld` column. When you file your 1099-NEC forms in the Dashboard, we automatically export forms eligible for state filing and with `state_tax_withheld` so you can file directly with applicable states. |\n\n#### Note\n\nSome forms that appear to be below the federal filing threshold can also appear as `Ready` or `Needs attention` due to Grouped TINs or state filing thresholds. [Learn more](https://docs.stripe.com/connect/file-tax-forms#below-threshold-forms)\n\n### FILING DUE DATE![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhile the IRS deadline to file 1099-NEC forms and deliver forms to your payees is January 31st, we coupled filing and delivery together to streamline the process. **January 23rd, 2024** is the latest recommended date to file forms with the IRS and states in your Stripe Dashboard. This guarantees forms are filed with the IRS and a copy is sent to the recipients before the IRS delivery deadline of January 31st.\n\n### STATE NUMBERS![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nState Tax Registration or Withholding IDs are only required for some states. After you obtain the registration or withholding ID, add the states in which you’ll file and the corresponding IDs on the [Tax forms settings](https://dashboard.stripe.com/settings/connect/tax_forms) page. In the Dashboard, click **Settings**. On **Product settings**, under **Connect**, click **Tax form settings**. When filing forms in your Dashboard, you must provide an appropriate ID in states that require one.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [File form with states](https://docs.stripe.com/connect/tax-forms-state-requirements)\n*   [Add the state tax Registration or withholding ID](https://docs.stripe.com/connect/tax-forms-state-requirements#add-state-reg)",
    "title": "1099-NEC form state requirements | Stripe Documentation",
    "description": "View the state requirements for 1099-NEC forms.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/plan-integration/get-started/project-timeline",
    "markdown": "# Project timeline | Stripe DocumentationThe Stripe Docs logo\n\nWhile you can integrate payments in as little as 1 week, the following timeline assumes that your business has internal systems that add complexity to your Stripe integration. With this in mind, we estimate that the total integration time can range from less than 1 week to up to 3 months. Primary dependencies include engineering resources, internal system integrations, and change management across impacted teams.\n\n1 Tasks in the same phase can be completed in parallel.  \n2 Applicable if you’re migrating customer data from your previous processor.",
    "title": "Project timeline | Stripe Documentation",
    "description": "Follow our project timeline to successfully integrate Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/fleet/configurations-overview?dashboard-or-api=api",
    "markdown": "# Terminal configurations | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use the Terminal Configurations object to apply configurations to your readers.\n\nThe Terminal [Configuration](https://docs.stripe.com/api/terminal/configuration) object contains all relevant configurations for a reader, such as the splash screen, tipping settings, offline mode, and so on. Because these settings are hierarchical, you can apply a configuration at either the account level or at the individual location level. You can set configurations in the following ways:\n\n*   On individual [Locations](https://docs.stripe.com/api/terminal/locations): Applies to all readers registered to that Location\n*   At the account level: Applies to all readers in your fleet\n\nYou can override account-level settings with location-level settings. If you don’t configure settings at the location level, they inherit the account-level settings.\n\n#### Note\n\nWe don’t support assigning or adding configurations to zones.\n\nFor example, you can model your `Configuration` objects as follows:\n\n![Configuration Hierarchy](https://b.stripecdn.com/docs-statics-srv/assets/configuration-object-tree.5ec745ad57500a800c4f34f0a970224e.png)\n\nIn this scenario, Location 3 inherits the configurations from the account “Default configuration”, while Locations 1 and 2 have their own configuration.\n\n#### Note\n\nIf you don’t set a configuration on the location-level, the Location inherits the default configuration on the account. For example, if you don’t set the splash screen on the Location, it inherits it from the default configuration set at the account level.\n\nAny configuration changes made with the API or Dashboard can take up to 10 minutes to reflect on the target readers.\n\n### Retrieve the account default configuration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe automatically provisions the default configuration for your account. When you set up your hierarchy, any setting that isn’t established at the location level inherits the setting from the default configuration. You can’t apply the default configuration directly to a Location. To retrieve the account default configuration, use the [configuration retrieve](https://docs.stripe.com/api/terminal/configuration/retrieve) request:\n\n`curl -G https://api.stripe.com/v1/terminal/configurations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d is_account_default=true`\n\n### Create a configuration for an individual location![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo create a `Configuration` object, use the [create configuration](https://docs.stripe.com/api/terminal/configuration/create) request:\n\n`curl https://api.stripe.com/v1/terminal/configurations \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"bbpos_wisepos_e[splashscreen]\"=file_1KjBJdE7XUJuZdf0F6GgO9uY`\n\nTo assign it to a location, provide the `Configuration` object you previously created to the [update location](https://docs.stripe.com/api/terminal/locations/update) request:\n\n`curl https://api.stripe.com/v1/terminal/locations/tml_DPJxAAnxbn3JQz \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d configuration_overrides=tmc_EjHtMwLT8HmATT`\n\n### Update an existing configuration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo update a `Configuration` object, use the [update configuration](https://docs.stripe.com/api/terminal/configuration/update) request:\n\n`curl https://api.stripe.com/v1/terminal/configurations/tmc_EjHtMwLT8HmATT \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"bbpos_wisepos_e[splashscreen]\"=file_1KjBJdE7XUJuZdf0F6GgO9uY`\n\n### Delete a configuration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo delete a `Configuration` object, use the [delete configuration](https://docs.stripe.com/api/terminal/configuration/delete) request:\n\n`curl -X DELETE https://api.stripe.com/v1/terminal/configurations/tmc_EjHtMwLT8HmATT \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`",
    "title": "Terminal configurations | Stripe Documentation",
    "description": "Learn how to use the Terminal Configurations object to apply configurations to your readers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/payment_intents/retrieve_payment_intent",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/connect/enable-payment-acceptance-guide",
    "markdown": "# Enable other businesses to accept payments directly\n\nThis guide covers letting your users accept payments, moving a portion of your users’ earnings into your balance, and paying out the remainder to your users’ bank accounts. To illustrate these concepts, we’ll use an example platform that lets businesses build their own online stores.\n\n## Prerequisites![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  [Register your platform](https://dashboard.stripe.com/connect/tasklist).\n2.  Add business details to [activate your account](https://dashboard.stripe.com/account/onboarding).\n3.  [Complete your platform profile](https://dashboard.stripe.com/connect/settings/profile).\n4.  [Customize your brand settings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding). Add a business name, icon, and brand color.\n\n[](#setup)\n\nInstall Stripe’s official libraries so you can access the API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#create-account)\n\nWhen a user (seller or service provider) signs up on your platform, create a user [Account](https://docs.stripe.com/api/accounts) (referred to as a _connected account_) so you can accept payments and move funds to their bank account. Connected accounts represent your user in Stripe’s API and help facilitate the collection of onboarding requirements so Stripe can verify the user’s identity. In our store builder example, the connected account represents the business setting up their Internet store.\n\n![Screenshot of Connect Onboarding form](https://b.stripecdn.com/docs-statics-srv/assets/Kavholm-Seamless-Standard.78b64d90c0bf87130c8b6ba1ef53df7f.png)\n\n### Create a connected account and prefill information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the `/v1/accounts` API to [create](https://docs.stripe.com/api/accounts/create) a connected account. You can create the connected account by using the [default connected account parameters](https://docs.stripe.com/connect/migrate-to-controller-properties), or by specifying the account type.\n\n`curl -X POST https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nIf you’ve already collected information for your connected accounts, you can prefill that information on the account object. You can prefill any account information, including personal and business information, external account information, and so on.\n\nConnect Onboarding doesn’t ask for the prefilled information. However, it does ask the account holder to confirm the prefilled information before accepting the [Connect service agreement](https://docs.stripe.com/connect/service-agreement-types).\n\nWhen testing your integration, prefill account information using [test data](https://docs.stripe.com/connect/testing).\n\n### Create an account link ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can create an account link by calling the [Account Links](https://docs.stripe.com/api/account_links) API with the following parameters:\n\n*   `account`\n*   `refresh_url`\n*   `return_url`\n*   `type` = `account_onboarding`\n\n`curl https://api.stripe.com/v1/account_links \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\   --data-urlencode refresh_url=\"[https://example.com/reauth](https://example.com/reauth)\" \\   --data-urlencode return_url=\"[https://example.com/return](https://example.com/return)\" \\  -d type=account_onboarding`\n\n### Redirect your user to the account link URL ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe response to your [Account Links](https://docs.stripe.com/api/account_links) request includes a value for the key `url`. Redirect to this link to send your user into the flow. Account Links are temporary and are single-use only because they grant access to the connected account user’s personal information. Authenticate the user in your application before redirecting them to this URL. If you want to prefill information, you must do so before generating the account link. After you create the account link, you won’t be able to read or write information for the account.\n\n#### Security tip\n\nDon’t email, text, or otherwise send account link URLs outside of your platform application. Instead, provide them to the authenticated account holder within your application.\n\n### Handle the user returning to your platform ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConnect Onboarding requires you to pass both a `return_url` and `refresh_url` to handle all cases where the user is redirected to your platform. It’s important that you implement these correctly to provide the best experience for your user.\n\n#### Note\n\nYou can use HTTP for your `return_url` and `refresh_url` while in test mode (for example, to test with localhost), but live mode only accepts HTTPS. Be sure to swap testing URLs for HTTPS URLs before going live.\n\n#### return\\_url![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe issues a redirect to this URL when the user completes the Connect Onboarding flow. This doesn’t mean that all information has been collected or that there are no outstanding requirements on the account. This only means the flow was entered and exited properly.\n\nNo state is passed through this URL. After a user is redirected to your `return_url`, check the state of the `details_submitted` parameter on their account by doing either of the following:\n\n*   Listening to `account.updated` webhooks\n*   Calling the [Accounts](https://docs.stripe.com/api/accounts) API and inspecting the returned object\n\n#### refresh\\_url![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour user is redirected to the `refresh_url` in these cases:\n\n*   The link is expired (a few minutes went by since the link was created)\n*   The user already visited the link (the user refreshed the page or clicked back or forward in the browser)\n*   Your platform is no longer able to access the account\n*   The account has been rejected\n\nYour `refresh_url` should trigger a method on your server to call [Account Links](https://docs.stripe.com/api/account_links) again with the same parameters, and redirect the user to the Connect Onboarding flow to create a seamless experience.\n\n### Handle users that haven’t completed onboarding ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf a user is redirected to your `return_url`, they might not have completed the onboarding process. Use the `/v1/accounts` endpoint to retrieve the user’s account and check for `charges_enabled`. If the account isn’t fully onboarded, provide UI prompts to allow the user to continue onboarding later. The user can complete their account activation through a new account link (generated by your integration). To see if they’ve completed the onboarding process, check the state of the `details_submitted` parameter on their account.\n\n[](#enable-payment-methods)\n\nView your [payment methods settings](https://dashboard.stripe.com/settings/connect/payment_methods) and enable the payment methods you want to support. Card payments are enabled by default but you can enable and disable payment methods as needed. This guide assumes Bancontact, credit cards, EPS, giropay, iDEAL, Przelewy24, SEPA Direct Debit, and Sofort are enabled.\n\nBefore the payment form is displayed, Stripe evaluates the currency, payment method restrictions, and other parameters to determine the list of supported payment methods. Payment methods that increase conversion and that are most relevant to the currency and customer’s location are prioritized. Lower priority payment methods are hidden in an overflow menu.\n\n[](#accept-payment)\n\nEmbed [Stripe Checkout](https://stripe.com/payments/checkout) as a payment form directly on your website or redirect users to a Stripe-hosted page to accept payments. Checkout supports multiple payment methods and automatically shows the most relevant ones to your customer You can also use the Payment Element, a prebuilt UI component that is embedded as an iframe in your payment form, to accept multiple payment methods with a single frontend integration.\n\n### Create a Checkout Session Client-side Server-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA Checkout Session controls what your customer sees in the embeddable payment form such as line items, the order amount and currency, and acceptable payment methods. When performing direct charges, Checkout uses the connected account’s branding settings. See the [Customize branding](https://docs.stripe.com/connect/direct-charges?platform=web&ui=stripe-hosted#branding) section for more information.\n\nUnlike destination charges and separate charges and transfers, users (connected accounts) are responsible for handling disputes on direct charges—it’s not the responsibility of the platform.\n\nOn your server, make the following call to the Stripe API. After creating a Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d mode=payment \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1 \\  -d \"payment_intent_data[application_fee_amount]\"=123 \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n*   `line_items` - This argument represents items that your customer is purchasing and that will show up in the hosted user interface.\n*   `success_url` - This argument redirects a user after they complete a payment.\n*   `cancel_url` - This argument redirects a user after they click cancel.\n*   `Stripe-Account` - This header indicates a [direct charge](https://docs.stripe.com/connect/direct-charges) for your connected account. With direct charges, the connected account is responsible for Stripe fees, refunds, and chargebacks. The connected account’s branding is used in Checkout, which allows their customers to feel like they’re interacting directly with the merchant instead of your platform.\n*   (Optional) `payment_intent_data[application_fee_amount]` - This argument specifies the amount your platform plans to take from the transaction. After the payment is processed on the connected account, the `application_fee_amount` is transferred to the platform and the Stripe fee is deducted from the connected account’s balance.\n\n![Account creation flow](https://b.stripecdn.com/docs-statics-srv/assets/direct_charges.a2a8b68037ac95fe22140d6dde9740d3.svg)\n\n### Handle post-payment events Server-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe sends a [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) event when the payment completes. [Use a webhook to receive these events](https://docs.stripe.com/webhooks/quickstart) and run actions, like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes. Some payment methods also take 2-14 days for payment confirmation. Setting up your integration to listen for asynchronous events enables you to accept multiple [payment methods](https://stripe.com/payments/payment-methods-guide) with a single integration.\n\nIn addition to handling the `checkout.session.completed` event, we recommend handling two other events when collecting payments with Checkout:\n\nThese events all include the [Checkout Session](https://docs.stripe.com/api/checkout/sessions) object. After the payment succeeds, the underlying [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") status changes from `processing` to `succeeded`.\n\n[](#testing)\n\nTest your account creation flow by [creating accounts](https://docs.stripe.com/connect/testing#creating-accounts) and [using OAuth](https://docs.stripe.com/connect/testing#using-oauth). Test your **Payment methods** settings for your connected accounts by logging into one of your test accounts and navigating to the [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods). Test your checkout flow with your test keys and a test account. You can use our [test cards](https://docs.stripe.com/testing) to test your payments flow and simulate various payment outcomes.\n\nBy default, any charge that you create for a connected account accumulates in the connected account’s [Stripe balance](https://docs.stripe.com/connect/account-balances) and is paid out on a daily rolling basis. Connected accounts can manage their own payout schedules in the [Stripe Dashboard](https://dashboard.stripe.com/settings/payouts).",
    "title": "Enable other businesses to accept payments directly | Stripe Documentation",
    "description": "Facilitate direct payments between other businesses and their own customers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/products-prices/getting-started",
    "markdown": "# Get started with products and prices\n\n## Start modeling your business on Stripe with products and prices.\n\n[Products](https://docs.stripe.com/api/products \"Products\") and [Prices](https://docs.stripe.com/api/prices \"Prices\") are core resources for several Stripe integrations, including [Checkout Sessions](https://docs.stripe.com/api/checkout/sessions), [Payment Links](https://docs.stripe.com/payment-links), [Subscriptions](https://docs.stripe.com/billing) and [Invoices](https://docs.stripe.com/invoicing).\n\nFirst, make sure you understand the overall goals of your integration project-make your design decisions before you start building it. For example, if you’re building a [Subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") integration, read [designing an integration](https://docs.stripe.com/billing/subscriptions/designing-integration) to learn more about design decisions and [pricing models](https://docs.stripe.com/products-prices/pricing-models) to understand how to translate your business model on Stripe.\n\nNext, decide whether you need to create new products and prices in Stripe or import an existing product catalog from another system into Stripe. [Create new products and prices](#create-products-prices) in the Dashboard if your product catalog is small or you don’t want to use code. If you have a very large product catalog, use the [Products](https://docs.stripe.com/api/products) API to [import](#import-products-prices) your catalog programmatically.\n\n## Multiple products and prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can create as many products as you need to represent your product catalog. You can also create multiple prices for each product. Whether you should create multiple products as opposed to multiple prices depends on several factors. Generally, however, you want to:\n\n*   Create multiple prices for a single product if you’re selling the same item at different price points. For example, if you offer a subscription tier at monthly and yearly rates, create one product for the tier and one price for the monthly rate and another for the yearly rate. See an example of this for a [good-better-best flat rate pricing model](https://docs.stripe.com/products-prices/pricing-models#flat-rate). (If you’re selling the same item in different currencies, then instead of creating multiple prices, create a single [multi-currency Price](https://docs.stripe.com/products-prices/pricing-models#multicurrency \"multi-currency price\").)\n    \n*   Create multiple products if the items require different provisioning or fulfillment in your application. In the [good-better-best](https://docs.stripe.com/products-prices/pricing-models#flat-rate) model, for example, you would create a different product for each tier. Similarly, if you have different versions of a product, like different colors or sizes of a t-shirt, you would create a product for each version.\n    \n\n### Test mode![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can copy products from test mode to live mode so that you don’t need to recreate them. Prices associated with the product are also copied over. In the Product detail view in the Dashboard, click **Copy to live mode** in the upper right corner.\n\nYou can only copy test products to live mode once. If you make updates to the test product after the copy, the live product won’t reflect the changes.\n\n## Create products and prices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUsing the [Dashboard](https://dashboard.stripe.com/products) is the easiest way to create new products and prices. If you want to use the API, see the guide for [managing products and prices](https://docs.stripe.com/products-prices/manage-prices); this section only describes the Dashboard steps.\n\n### Create a product ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo create a product in the Dashboard:\n\n1.  Go to **More** > **Product catalog**.\n2.  Click **+Add product**.\n3.  Enter the **Name** of your product.\n4.  _(Optional)_ Add a **Description**. The description appears at checkout, on the [customer portal](https://docs.stripe.com/customer-management), and in [quotes](https://docs.stripe.com/quotes).\n5.  _(Optional)_ Add an **Image** of your product. Use a JPEG, PNG, or WEBP file that’s smaller than 2MB. The image appears at checkout.\n6.  _(Optional)_ If you’re using [Stripe Tax](https://docs.stripe.com/tax), select a **Tax code** for your product. See [tax codes](https://docs.stripe.com/tax/tax-codes) for more information about the appropriate category for your product.\n7.  _(Optional)_ Enter a **Statement descriptor**. This descriptor overrides any account descriptors for recurring payments. Choose something that your customers would recognize on a bank statement.\n8.  _(Optional)_ Enter a **Unit label**. This describes how you sell your product. For example, if you charge by the seat, enter “seat” so the line item includes “per seat” for the price. Unit labels appear at checkout, and in invoices, receipts, and the [customer portal](https://docs.stripe.com/billing/subscriptions/customer-portal \"customer portal\").\n\nTo save a product in the Dashboard, you must also add at least one price. You can also create multiple prices for a product. See [create a price](#create-price) to learn more.\n\n### Create a price ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo create a price in the Dashboard, you have to [create a product](#create-product) first. You can create multiple prices for a product.\n\n1.  Select a **Pricing model**. For more details about recurring pricing models, read the [pricing model guide](https://docs.stripe.com/products-prices/pricing-models).\n    \n    *   **Flat-rate pricing**: Charge the same price for each unit. If you use this option, select **One time** or **Recurring**.\n    *   **Package pricing**: Charge by the package, or group of units, such as charging 25 USD for every 5 units. Purchases are rounded up by default, so a customer buying 8 units pays 50 USD.\n    *   **Graduated pricing**: Use pricing tiers that might result in a different price for some units in an order. For example, you might charge 10 USD per unit for the first 100 units and then 5 USD per unit for the next 50. If you use this option, select the currency for the price and fill in the tier table.\n    *   **Volume pricing**: Charge the same price for each unit based on the total number of units sold. For example, you might charge 10 USD per unit for 50 units, and 7 USD per unit for 100 units. If you use this option, select the currency for the price and fill in the tier table.\n    \n    *   **Customer chooses price**: Let the payer decide on the amount to pay for your product, service, or cause. **Customer chooses price** is only compatible with Checkout and Payment Links.\n    \n    *   **Usage-based pricing**: Charge your customers based on how much of your service they use during the billing cycle.\n2.  _(Optional)_ If you’re selling in multiple currencies, click **Add another currency** to set how much to charge in each currency.\n    \n3.  Select a **Billing period** for recurring prices. You can add a custom period if none of the drop-down options are what you want.\n    \n4.  Select whether to **Include tax in price**. Learn more about [taxes and subscriptions](https://docs.stripe.com/billing/taxes).\n    \n5.  _(Optional)_ Enter a **Price description**. Customers don’t see this description.\n    \n6.  Click **Create price** to save the price. You can [edit the price](#edit-price) later.\n\n## Import products and prices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you have a very large product catalog, use the [Products](https://docs.stripe.com/api/products) API to import your catalog programmatically. If you’re importing your product catalog to Stripe, you can use anything as your starting data source, like a product management system or CSV file.\n\nUse the [Products](https://docs.stripe.com/api/products) API to create a product in Stripe for each product in your system. To map products in your system to products in Stripe, assign each product that you import a unique [`id`](https://docs.stripe.com/api/products/create#create_product-id). For each product, use the [Prices](https://docs.stripe.com/api/prices) API to make a corresponding price. Make sure to store the `id` of the newly created price. You’ll need to pass this `id` when you [use the products and prices](#use-products-and-prices) in your integration.\n\nConfirm the import by checking the [Dashboard](https://dashboard.stripe.com/products) or using the API to [list all products](https://docs.stripe.com/api/products/list).\n\n### Deleting prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDuring development, you might need to run this script multiple times for testing. If you use the same Product ID, you’ll see an error stating that a Product with that ID already exists. If you haven’t used the Product yet, you can delete it using the Stripe Dashboard:\n\n1.  Go to the Products [Dashboard](https://dashboard.stripe.com/products) and find your Product.\n    \n2.  In the **Pricing** section, click the overflow menu () next to the Price and select **Delete Price**.\n    \n3.  Click the overflow menu () at the top of the page, and select **Delete Product**.\n    \n\n### Synchronize products and prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou’ll likely need to run through an import more than once. You can create a script to test the import and, if you want to, synch your original data source with Stripe. To make your script idempotent and resilient to errors, you can safely try to create the product first, then update it if the product already exists.\n\nTo keep your product catalog synchronized with Stripe, use webhooks or other mechanisms to trigger product updates in Stripe. To [update a product](https://docs.stripe.com/api/products/update) programmatically, use the following pattern.\n\nFirst, find the existing price associated with the product with [list all prices](https://docs.stripe.com/api/prices/list) API to make sure the price still matches your data source. Each product should have exactly one active price.\n\n`curl -G https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d product=  {{PRODUCT_ID}}   \\  -d active=true`\n\nNext, check whether the decimal amount of the price has changed. The `unit_amount_decimal` [field](https://docs.stripe.com/api/prices/object#price_object-unit_amount_decimal) displays the unit amount in cents.\n\nIf the amount doesn’t match, you have to create a new price. When you [create a new price](https://docs.stripe.com/api/prices/create), specify the `product` ID of the original product, the `currency`, and the updated `unit_amount` price.\n\n`curl https://api.stripe.com/v1/prices \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d product=  {{PRODUCT_ID}}   \\  -d unit_amount=2000 \\  -d currency=usd`\n\nFinally, [update the old price](https://docs.stripe.com/api/prices/update) to mark it as `active=false`.\n\n`curl https://api.stripe.com/v1/prices/`\n\n`{{PRICE_ID}}`\n\n `\\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d active=false`\n\n## Use products and prices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNow that you have products and prices in Stripe, you can use them in an integration.",
    "title": "Get started with products and prices | Stripe Documentation",
    "description": "Start modeling your business on Stripe with products and prices.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/plan-integration/get-started/planning-considerations",
    "markdown": "# Planning considerations | Stripe DocumentationThe Stripe Docs logo\n\n## Identify essential integration decisions and considerations.\n\nBefore you start building your integration, make sure that everyone impacted by the move to Stripe understands their requirements. This guide identifies the integration decisions and considerations you need when using Stripe for the first time.\n\n[](#structure-stripe-accounts)\n\nOne of the first questions to answer is whether you’ll need a single Stripe account, or several. To learn more, see our [account overview](https://docs.stripe.com/get-started/account).\n\n### Considerations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   **Which countries will you operate in?**\n    \n    If more than one, consider creating ​​Stripe accounts where you have legal entities to take advantage of local acquiring for local customers.\n    \n    In some countries, Stripe supports adding [multiple bank accounts for different currencies](https://docs.stripe.com/payouts#supported-accounts-and-settlement-currencies), which might impact the number of accounts you create.\n    \n    For example, if you have legal entities in the United States, Canada, and the Netherlands, and plan to pay out to bank accounts in multiple currencies, you might choose to have a US account for USD [payouts](https://docs.stripe.com/payouts \"payout\"), a CA account for CAD payouts, and one NL account capable of settling in EUR, GBP, and DKK. This account organization allows you to benefit from local acquiring and separate payouts by business line.\n    \n*   **Do you need to direct funds to more than one bank account?**\n    \n    If both bank accounts are in the same currency, create separate Stripe accounts to take advantage of automatic payouts and avoid manually switching between bank accounts for each payout.\n    \n*   **How will you create your accounts?**\n    \n    You need to complete account setup for each Stripe account. To set up regional Stripe accounts, add new accounts using your [first Stripe account](https://docs.stripe.com/get-started/account/multiple-accounts) to streamline authentication and access.\n    \n    If your integration requires multiple Stripe accounts, it’s important to know which account you’re operating in. You need to specify the [secret key](https://docs.stripe.com/api/authentication) on each API request to correctly identify the regional account.\n    \n    If you’re going to use a single account for Stripe transactions and charge customers in every currency, you only need to go through account setup one time. This account organization guarantees that all data is available in a single account, which streamlines the integration and reporting process. You can also create additional Stripe accounts later for different geographies if needed.\n    \n*   **Can you benefit from local acquiring?**\n    \n    To benefit from local acquiring, you need to have regional accounts.\n    \n*   **Do you need centralized reporting in a single Stripe account?**\n    \n    | Options | Regional | Unified |\n    | --- | --- | --- |\n    | **Description** | A more complex integration that uses multiple regional Stripe accounts to manage multiple bank accounts or acquire in local currencies. Requires a local legal entity for each Stripe account. | The simplest integration that uses a single Stripe account for charging customers in every currency and specific payment methods depending on the account’s location. |\n    | **Benefits** | *   Acquire in the local market with the most support for new payment methods.<br>*   Eliminate FX and settles into like currency.<br>*   Achieve higher authorization rates and lower network costs | *   Unify reporting under a single Stripe account for all markets.<br>*   Avoid developing internal logic for routing customer transactions to the correct Stripe account for processing. |\n    | **Limitations** | *   Adds complexity to reporting and integration.<br>*   Lacks a holistic Dashboard view of data. | *   Some payment methods might not be compatible.<br>*   Necessitates cross-border acquiring and settlement FX. |\n    \n\n[](#how-accept-payments)\n\n[PaymentIntents](https://docs.stripe.com/payments/payment-intents) is our default API. PaymentIntents track the lifecycle of a customer’s payment flow ​​and enable you to integrate against asynchronous payment flows like [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\"). Asynchronous flows are especially important when it comes to supporting global expansion (for example, [SCA](https://docs.stripe.com/strong-customer-authentication), compliance with 3D Secure in Europe (and similar regulations in India), and introducing other payment methods such as SEPA Direct Debit or SOFORT in Europe.\n\n### Considerations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   **Which [payment methods](https://docs.stripe.com/payments/payment-methods) will you offer your customers?**\n    \n    To see which payment methods the PaymentMethods API supports, check for [digital wallets](https://docs.stripe.com/payments/wallets#product-support), [bank debits](https://docs.stripe.com/payments/bank-debits#product-support), [bank redirects](https://docs.stripe.com/payments/bank-redirects#product-support), [buy now, pay later](https://docs.stripe.com/payments/buy-now-pay-later#product-support), and [vouchers](https://docs.stripe.com/payments/vouchers#product-support).\n    \n*   **Which countries will you operate in?**\n    \n    If your business is based in the [European Economic Area](https://en.wikipedia.org/wiki/European_Economic_Area \"European Economic Area\") (EEA) and you serve customers in the EEA, you must integrate on PaymentIntents to comply with SCA regulations. ​​If your business is based in India and serving customers in India, we also recommend using PaymentIntents.\n    \n*   **Which payment methods and countries are on your roadmap?**\n    \n    If you don’t require PaymentIntents today but plan to expand to new payment methods or countries, we recommend that you integrate with PaymentIntents for all methods that are currently available as PaymentMethods, and plan your [migration to PaymentIntents](https://docs.stripe.com/payments/payment-intents/migration) for the remaining methods when they become available on the [PaymentMethods API](https://docs.stripe.com/payments/payment-methods).\n    \n\n[](#how-capture-payment-details)\n\nThe client-side integration process typically involves building components for Stripe. Use our [website checklist](https://docs.stripe.com/get-started/checklist/website) to make sure you’re following best practices and standards for your frontend development.\n\nThe [Integration security guide](https://docs.stripe.com/security) helps you ensure [PCI compliance](https://docs.stripe.com/security/guide#validating-pci-compliance \"PCI compliance\") and explains the importance of secure communication between your customer and your servers.\n\n### Considerations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   **Is your business already PCI-compliant?**\n    \n    If yes, and you want to process cards without tokenizing, speak to your Stripe contact or [support.stripe.com](https://support.stripe.com/).\n    \n*   **Will you be using multiple payment processors?**\n    \n    If yes, consider dual-tokenization when processing card payments. Dual-tokenizing can help you to continue to run charges on your other payment processor without prompting your customers for their credit card details again.\n    \n*   **How will you manage fraud in the checkout experience?**\n    \n    To provide Stripe with additional fraud signals, include [Stripe.js](https://docs.stripe.com/payments/elements) on every page that a customer interacts with related to the checkout process. This includes product and payment pages.\n    \n*   **How much control do you need over the checkout experience?**\n    \n    Stripe offers two main ways to create payment forms: [Elements](https://docs.stripe.com/payments/elements) and [Checkout](https://docs.stripe.com/payments/checkout). Both are secure, optimized for conversion, and PCI-compliant, though they differ in terms of customizability and time to integrate.\n    \n    | Options | Stripe Checkout | Stripe.JS and Elements |\n    | --- | --- | --- |\n    | **Description** | Stripe Checkout is a secure, Stripe-hosted page that lets you collect payments. It works across devices and can help increase your conversion. | Elements is a set of prebuilt UI components, like inputs and buttons, for building your checkout flow. Stripe.js tokenizes sensitive payment details without ever letting it touch your server. |\n    | **Benefits** | *   Simplified integration.<br>*   Up-to-date with available payment methods.<br>*   Optimized conversion.<br>*   Co-branded with your business logo and colors. | *   Optimized conversion with dynamic inputs.<br>*   Simplified PCI compliance with SAQ A reporting because all sensitive information is handled by Stripe.js.<br>*   Customizable styling to match the appearance of your checkout flow. |\n    | **Limitations** | *   Temporarily redirects customers off your web domain.<br>*   Fewer options for customization. | *   Increased integration time and effort compared to Checkout.<br>*   Elements doesn’t support all payment methods, requiring that you build additional fields to use unsupported methods. |\n    \n    ### Create a PaymentMethod with Stripe.js or a mobile SDK![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n    \n    If you’re using Stripe.js and Elements, tokenize payment details from a customer before creating a charge.\n    \n    At a high level, this process involves using a [publishable key](https://support.stripe.com/questions/where-do-i-find-my-api-keys) to transmit card (or other payment method) details from a client browser or mobile app directly to Stripe’s servers.\n    \n    Stripe ingests these sensitive payment details and returns a [PaymentMethod](https://docs.stripe.com/api/payment_methods) that can be charged. For users accessing the service using a web browser, use [Stripe.js](https://docs.stripe.com/payments/elements).\n    \n    If the user is submitting payment details using an [iOS](https://docs.stripe.com/payments/accept-a-payment?platform=ios) or [Android](https://docs.stripe.com/payments/accept-a-payment?platform=android) app, use one of Stripe’s libraries.\n    \n\n[](#how-reconcile-payments-payouts)\n\n​​Involve your finance team early in your scoping so that they can advise you on your new reconciliation process and reporting needs. To learn more about your options, start by reviewing the Payments and payouts and Financial reports Guides. Depending on your needs, you may use a combination of Financial Reports, Dashboard exports, Sigma, and the API.\n\n### Considerations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   **Do you require fast and frequent access to transaction data and payouts?**\n    \n    *   [Financial Reports](https://docs.stripe.com/reports) and [Sigma](https://docs.stripe.com/stripe-data) make your data available by 12:00 UTC the following day.\n    *   Dashboard exports, while available immediately, take longer to generate, which makes them best for pulling small increments of data on the order of several thousand records—not tens of thousands.\n    *   Building custom reporting using the Stripe APIs provides access to the specific data you need as it becomes available. However, it’s resource-intensive to both build and maintain.\n    \n*   **Do you have data analytics tooling?**\n    \n    Sigma is our custom reporting tool that makes all of your transactional data available as an interactive SQL environment in the [Dashboard](https://dashboard.stripe.com/test/get-started/sigma). You can use it to gain insights into anything from ARPU to customer churn, and identify new business opportunities.\n    \n*   **Which data points do you use to reconcile your finances? Are any of these fields custom and generated by your team (for example, an order or booking ID)?**\n    \n    Make sure ​​your custom data is included as [metadata](https://docs.stripe.com/payments/payment-intents#storing-information-in-metadata) on any relevant reporting objects.\n    \n\n| Options | Financial reports | Sigma | Custom reports |\n| --- | --- | --- | --- |\n| **Description** | View the financial data within your Stripe account, helping to streamline your business workflows | Process business data using SQL. Use SQL to explore your Stripe data, revenue, and create customized reports | Build your own reporting through Dashboard exports, the API, and webhooks |\n| **Benefits** | *   Prebuilt<br>*   Downloadable with the Dashboard or API<br>*   Leverages feature development | *   Flexibility to create the reports you need<br>*   Downloadable with the Dashboard or API<br>*   Leverages feature development | *   Complete flexibility and access to raw data |\n| **Limitations** | *   Limited to reports available | *   Requires SQL to build reports | *   Requires significant time and resources to build<br>*   Maintained entirely by your team<br><br>* * * |\n\n### Considerations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   **Does your business require that you pay out specific amounts to your bank account?**\n    \n    If you don’t need to control your payouts, use automatic payouts to sweep your entire balance automatically into your bank account on your payout schedule.\n    \n    If you do need to deposit specific amounts, you can use manual payouts to delimit the amount you transfer to your bank account. Manual payouts don’t allow you to link the payout amount to specific transactions.\n    \n    Alternatively, consider [Instant Payouts](https://docs.stripe.com/payouts/instant-payouts-banks) to a debit card, which facilitates remaining on automatic payouts.\n    \n*   **Do you want to retain a balance in your account?**\n    \n    Manual and Instant Payouts allow you to keep a Stripe balance of your choosing.\n    \n*   **Do you plan to reconcile between transactions on your account and payouts to your bank?**\n    \n    If yes, use automatic payouts.\n    \n\n| Options | Manual | Automatic and instant payouts |\n| --- | --- | --- |\n| **Description** | Manually create payouts for the specified amount and currency to the bank account of your choosing. | Automatically pay out funds when they’re available and after settlement, either daily, weekly, or monthly. Take advantage of Instant Payouts while your account is configured for automatic payouts. |\n| **Benefits** | *   Supports custom payout schedules that you can be trigger from the API or manually from your Dashboard.<br>*   You can trigger manual payouts by specific events or at the discretion of your account. | *   Automatically includes failed payouts in the next payout.<br>*   Allows transaction-level mapping to payout amount for straightforward reconciliation.<br>*   Where regionally available, can use Instant Payouts to manually initiate immediate payment to a debit card on file. |\n| **Limitations** | *   Absent payout triggers, available funds may stay in account balance for extended periods of time.<br>*   Need to implement retry logic using `payout.failed` webhook.<br>*   Can’t determine which transactions are included in a given manual payout.<br>*   Can’t use Instant Payouts while configured for manual payouts. | *   Can’t accommodate biweekly, bimonthly, or other custom payout schedules. |\n\n[](#how-protect-fraud-disputes)\n\nAs an e-commerce business, it’s essential to keep fraud rates low and handle customer disputes. Stripe offers [Radar](https://docs.stripe.com/radar), which helps you fine-tune your fraud prevention environment, get insights about suspicious charges, and assess your fraud management performance from a unified dashboard. For businesses in many markets, and more generally for e-commerce, fighting fraud is fundamental to success.\n\n### Considerations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   **Do you encounter moderate or high fraud and dispute rates?**\n    \n    Consider employing some of these [best practices](https://docs.stripe.com/disputes/prevention/best-practices) as part of your overall fraud strategy to avoid excessive chargebacks and reduce potential customer burden and losses.\n    \n*   **Would your business benefit from granular control in your fraud prevention tooling?**\n    \n    Radar allows you to choose your risk tolerance, write your own Rules to fine-tune your protection using a variety of transaction attributes, and manage custom block and review lists that enable you to quickly take action on fraud.",
    "title": "Planning considerations | Stripe Documentation",
    "description": "Identify essential integration decisions and considerations.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/account/activate",
    "markdown": "# Activate your account | Stripe DocumentationThe Stripe Docs logo\n\n## Activate your Stripe account and keep it safe.\n\nYou can begin using your Stripe account in [test mode](https://docs.stripe.com/test-mode \"test mode\") as soon as you create it. In test mode, you can simulate all of Stripe’s features without moving real money. To accept real payments, you need to first activate your account and then use live mode. If you haven’t [created your Stripe account](https://dashboard.stripe.com/register) yet, complete that process before continuing.\n\n## Activate your account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo activate your account, fill out the [account application](https://dashboard.stripe.com/account/onboarding) requesting some basic information about your business, product, and your personal relationship to your business. After activating your account, you can immediately start accepting live payments.\n\nStripe’s “Know Your Customer” (KYC) obligations require that we collect and maintain this information on all Stripe users. These requirements come from our regulators and financial partners, and are intended to prevent abuse of the financial system. We review the information you provide internally to make sure that it complies with [our services agreement](https://stripe.com/legal). We’ll contact you if we need any further information.\n\nAfter you activate your Stripe account, you can’t change its country. If you need to use Stripe in a different country that we support, you must create a new account.\n\n#### Caution\n\nWe take privacy and security very seriously. Our [privacy policy](https://stripe.com/privacy) explains how and for what purposes we collect, use, retain, disclose, and safeguard any personal data you provide to us.\n\n## Public business information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour customers see the following details on either their card statements or in [email receipts](https://docs.stripe.com/receipts) sent by Stripe.\n\n*   Business name and website URL\n*   Business email address, phone number, and address\n*   Support site URL\n*   Statement descriptor text\n\nYou provide this information when you activate your account, and can update it any time in your [Account settings](https://dashboard.stripe.com/settings/public). Make sure that your statement descriptor text and business information are clearly associated with you. If your customer can’t recognize one of your payments, they might [dispute](https://docs.stripe.com/disputes) it.\n\nStatement descriptors are limited to between 5 and 22 characters. They must contain at least 5 letters and can’t use the special characters `<`, `>`, `\\`, `'`, `\"`, or `*`.\n\nYou can also use dynamic statement descriptors when creating a charge so that each payment has a custom statement descriptor. This dynamic text is appended to the [shortened descriptor](https://dashboard.stripe.com/settings/public) set in the Stripe Dashboard. Statement descriptor prefixes are limited to between 2 and 10 characters. For detailed information, see the documentation on [statement descriptors](https://docs.stripe.com/get-started/account/statement-descriptors).\n\n## Keep your account safe ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter you set up your account, you’ll want to keep it safe. Here are our recommendations:\n\n*   **Keep private information private**: Don’t share your password and keep your secret [API keys](https://docs.stripe.com/keys) confidential on your own servers. As a reminder, Stripe employees will never ask you for your keys.\n    \n*   **Don’t reuse your Stripe password**: Use a password that’s unique to Stripe. If you use your password on another site and that site is compromised, an attacker could use those stolen credentials to take over your account.\n    \n*   **Use team members to provide others with access to your account**: You can [invite others](https://docs.stripe.com/get-started/account/teams) (with limited access) to your Stripe account so that they can log in and take certain actions.\n    \n*   **Update your computer and browser regularly**: We recommend configuring your computer to automatically download and install updates (for example, [macOS](https://support.apple.com/en-us/HT201541) or [Windows](https://support.microsoft.com/en-us/kb/306525)). This helps protect your system against automated attacks and malware.\n    \n*   **Beware of phishing**: All [genuine Stripe sites](https://support.stripe.com/questions/verify-you-are-on-an-official-stripe-webpage) use the `stripe.com` domain and HTTPS. If you get an email from us that you don’t expect, go directly to our site to log in. Don’t enter your password after clicking a link in an email. If you’re ever not sure it’s really us, review [Verified Stripe domains](https://support.stripe.com/questions/verified-stripe-domains) on Stripe Support.\n    \n*   **Enable two-factor verification**: When you enable two-factor authentication, you’ll need to provide an additional unique code from your mobile device to complete the login process—either received as a text message or generated through an app like Google Authenticator. This means that even if someone steals your username and password, they won’t be able to log in. To enable this feature, go to your [user settings](https://dashboard.stripe.com/settings/user).",
    "title": "Activate your account | Stripe Documentation",
    "description": "Activate your Stripe account and keep it safe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/disputes/object",
    "markdown": "# The Dispute object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Disputed amount. Usually the amount of the charge, but it can differ (usually because of currency fluctuation or because only part of the order is disputed).\n    \n*   ID of the charge that’s disputed.\n    \n\n*   Evidence provided to respond to a dispute. Updating any field in the hash submits all fields in the hash for review.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    payment\\_intentnullable stringExpandable\n    \n    ID of the PaymentIntent that’s disputed.\n    \n*   Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Learn more about [dispute reasons](https://docs.stripe.com/disputes/categories).\n    \n*   Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `won`, or `lost`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `lost` |\n    | `needs_response` |\n    | `under_review` |\n    | `warning_closed` |\n    | `warning_needs_response` |\n    | `warning_under_review` |\n    | `won` |\n    \n\n### More attributes\n\n*   #### \n    \n    balance\\_transactionsarray of objects\n    \n\n*   #### \n    \n    is\\_charge\\_refundableboolean\n    \n\n*   #### \n    \n    payment\\_method\\_detailsnullable object\n    \n\n```\n{  \"id\": \"dp_1MtJUT2eZvKYlo2CNaw2HvEv\",  \"object\": \"dispute\",  \"amount\": 1000,  \"balance_transactions\": [],  \"charge\": \"ch_1AZtxr2eZvKYlo2CJDX8whov\",  \"created\": 1680651737,  \"currency\": \"usd\",  \"evidence\": {    \"access_activity_log\": null,    \"billing_address\": null,    \"cancellation_policy\": null,    \"cancellation_policy_disclosure\": null,    \"cancellation_rebuttal\": null,    \"customer_communication\": null,    \"customer_email_address\": null,    \"customer_name\": null,    \"customer_purchase_ip\": null,    \"customer_signature\": null,    \"duplicate_charge_documentation\": null,    \"duplicate_charge_explanation\": null,    \"duplicate_charge_id\": null,    \"product_description\": null,    \"receipt\": null,    \"refund_policy\": null,    \"refund_policy_disclosure\": null,    \"refund_refusal_explanation\": null,    \"service_date\": null,    \"service_documentation\": null,    \"shipping_address\": null,    \"shipping_carrier\": null,    \"shipping_date\": null,    \"shipping_documentation\": null,    \"shipping_tracking_number\": null,    \"uncategorized_file\": null,    \"uncategorized_text\": null  },  \"evidence_details\": {    \"due_by\": 1682294399,    \"has_evidence\": false,    \"past_due\": false,    \"submission_count\": 0  },  \"is_charge_refundable\": true,  \"livemode\": false,  \"metadata\": {},  \"payment_intent\": null,  \"reason\": \"general\",  \"status\": \"warning_needs_response\"}\n```\n\n## [Update a dispute](https://docs.stripe.com/api/disputes/update)\n\nWhen you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your [dashboard](https://dashboard.stripe.com/disputes), but if you prefer, you can use the API to submit evidence programmatically.\n\nDepending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our [guide to dispute types](https://docs.stripe.com/disputes/categories).\n\n### Parameters\n\n*   Evidence to upload, to respond to a dispute. Updating any field in the hash will submit all fields in the hash for review. The combined character count of all fields is limited to 150,000.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Whether to immediately submit evidence to the bank. If `false`, evidence is staged on the dispute. Staged evidence is visible in the API and Dashboard, and can be submitted to the bank by making another request with this attribute set to `true` (the default).\n    \n\n### Returns\n\nReturns the dispute object.\n\n```\ncurl https://api.stripe.com/v1/disputes/dp_1MtJUT2eZvKYlo2CNaw2HvEv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"dp_1MtJUT2eZvKYlo2CNaw2HvEv\",  \"object\": \"dispute\",  \"amount\": 1000,  \"balance_transactions\": [],  \"charge\": \"ch_1AZtxr2eZvKYlo2CJDX8whov\",  \"created\": 1680651737,  \"currency\": \"usd\",  \"evidence\": {    \"access_activity_log\": null,    \"billing_address\": null,    \"cancellation_policy\": null,    \"cancellation_policy_disclosure\": null,    \"cancellation_rebuttal\": null,    \"customer_communication\": null,    \"customer_email_address\": null,    \"customer_name\": null,    \"customer_purchase_ip\": null,    \"customer_signature\": null,    \"duplicate_charge_documentation\": null,    \"duplicate_charge_explanation\": null,    \"duplicate_charge_id\": null,    \"product_description\": null,    \"receipt\": null,    \"refund_policy\": null,    \"refund_policy_disclosure\": null,    \"refund_refusal_explanation\": null,    \"service_date\": null,    \"service_documentation\": null,    \"shipping_address\": null,    \"shipping_carrier\": null,    \"shipping_date\": null,    \"shipping_documentation\": null,    \"shipping_tracking_number\": null,    \"uncategorized_file\": null,    \"uncategorized_text\": null  },  \"evidence_details\": {    \"due_by\": 1682294399,    \"has_evidence\": false,    \"past_due\": false,    \"submission_count\": 0  },  \"is_charge_refundable\": true,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"payment_intent\": null,  \"reason\": \"general\",  \"status\": \"warning_needs_response\"}\n```\n\n## [Retrieve a dispute](https://docs.stripe.com/api/disputes/retrieve)\n\nRetrieves the dispute with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a dispute if a valid dispute ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/disputes/dp_1MtJUT2eZvKYlo2CNaw2HvEv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"dp_1MtJUT2eZvKYlo2CNaw2HvEv\",  \"object\": \"dispute\",  \"amount\": 1000,  \"balance_transactions\": [],  \"charge\": \"ch_1AZtxr2eZvKYlo2CJDX8whov\",  \"created\": 1680651737,  \"currency\": \"usd\",  \"evidence\": {    \"access_activity_log\": null,    \"billing_address\": null,    \"cancellation_policy\": null,    \"cancellation_policy_disclosure\": null,    \"cancellation_rebuttal\": null,    \"customer_communication\": null,    \"customer_email_address\": null,    \"customer_name\": null,    \"customer_purchase_ip\": null,    \"customer_signature\": null,    \"duplicate_charge_documentation\": null,    \"duplicate_charge_explanation\": null,    \"duplicate_charge_id\": null,    \"product_description\": null,    \"receipt\": null,    \"refund_policy\": null,    \"refund_policy_disclosure\": null,    \"refund_refusal_explanation\": null,    \"service_date\": null,    \"service_documentation\": null,    \"shipping_address\": null,    \"shipping_carrier\": null,    \"shipping_date\": null,    \"shipping_documentation\": null,    \"shipping_tracking_number\": null,    \"uncategorized_file\": null,    \"uncategorized_text\": null  },  \"evidence_details\": {    \"due_by\": 1682294399,    \"has_evidence\": false,    \"past_due\": false,    \"submission_count\": 0  },  \"is_charge_refundable\": true,  \"livemode\": false,  \"metadata\": {},  \"payment_intent\": null,  \"reason\": \"general\",  \"status\": \"warning_needs_response\"}\n```\n\n## [List all disputes](https://docs.stripe.com/api/disputes/list)\n\nReturns a list of your disputes.\n\n### Parameters\n\n*   Only return disputes associated to the charge specified by this charge ID.\n    \n*   Only return disputes associated to the PaymentIntent specified by this PaymentIntent ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` disputes, starting after dispute `starting_after`. Each entry in the array is a separate dispute object. If no more disputes are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/disputes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/disputes\",  \"has_more\": false,  \"data\": [    {      \"id\": \"dp_1MtJUT2eZvKYlo2CNaw2HvEv\",      \"object\": \"dispute\",      \"amount\": 1000,      \"balance_transactions\": [],      \"charge\": \"ch_1AZtxr2eZvKYlo2CJDX8whov\",      \"created\": 1680651737,      \"currency\": \"usd\",      \"evidence\": {        \"access_activity_log\": null,        \"billing_address\": null,        \"cancellation_policy\": null,        \"cancellation_policy_disclosure\": null,        \"cancellation_rebuttal\": null,        \"customer_communication\": null,        \"customer_email_address\": null,        \"customer_name\": null,        \"customer_purchase_ip\": null,        \"customer_signature\": null,        \"duplicate_charge_documentation\": null,        \"duplicate_charge_explanation\": null,        \"duplicate_charge_id\": null,        \"product_description\": null,        \"receipt\": null,        \"refund_policy\": null,        \"refund_policy_disclosure\": null,        \"refund_refusal_explanation\": null,        \"service_date\": null,        \"service_documentation\": null,        \"shipping_address\": null,        \"shipping_carrier\": null,        \"shipping_date\": null,        \"shipping_documentation\": null,        \"shipping_tracking_number\": null,        \"uncategorized_file\": null,        \"uncategorized_text\": null      },      \"evidence_details\": {        \"due_by\": 1682294399,        \"has_evidence\": false,        \"past_due\": false,        \"submission_count\": 0      },      \"is_charge_refundable\": true,      \"livemode\": false,      \"metadata\": {},      \"payment_intent\": null,      \"reason\": \"general\",      \"status\": \"warning_needs_response\"    }    {...}    {...}  ],}\n```\n\n## [Close a dispute](https://docs.stripe.com/api/disputes/close)\n\nClosing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.\n\nThe status of the dispute will change from `needs_response` to `lost`. _Closing a dispute is irreversible_.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the dispute object.\n\nPOST /v1/disputes/:id/close\n\n```\ncurl -X POST https://api.stripe.com/v1/disputes/dp_1MtJUT2eZvKYlo2CNaw2HvEv/close \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"dp_1MtJUT2eZvKYlo2CNaw2HvEv\",  \"object\": \"dispute\",  \"amount\": 1000,  \"balance_transactions\": [],  \"charge\": \"ch_1AZtxr2eZvKYlo2CJDX8whov\",  \"created\": 1680651737,  \"currency\": \"usd\",  \"evidence\": {    \"access_activity_log\": null,    \"billing_address\": null,    \"cancellation_policy\": null,    \"cancellation_policy_disclosure\": null,    \"cancellation_rebuttal\": null,    \"customer_communication\": null,    \"customer_email_address\": null,    \"customer_name\": null,    \"customer_purchase_ip\": null,    \"customer_signature\": null,    \"duplicate_charge_documentation\": null,    \"duplicate_charge_explanation\": null,    \"duplicate_charge_id\": null,    \"product_description\": null,    \"receipt\": null,    \"refund_policy\": null,    \"refund_policy_disclosure\": null,    \"refund_refusal_explanation\": null,    \"service_date\": null,    \"service_documentation\": null,    \"shipping_address\": null,    \"shipping_carrier\": null,    \"shipping_date\": null,    \"shipping_documentation\": null,    \"shipping_tracking_number\": null,    \"uncategorized_file\": null,    \"uncategorized_text\": null  },  \"evidence_details\": {    \"due_by\": 1682294399,    \"has_evidence\": false,    \"past_due\": false,    \"submission_count\": 0  },  \"is_charge_refundable\": true,  \"livemode\": false,  \"metadata\": {},  \"payment_intent\": null,  \"reason\": \"general\",  \"status\": \"warning_needs_response\"}\n```",
    "title": "The Dispute object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/features/mail-telephone-orders/overview",
    "markdown": "# Mail order and telephone order (MOTO) payments\n\n## Remotely process mail order and telephone order payments using Stripe Terminal.\n\nMail order and telephone order (MOTO) processing using Stripe Terminal enables you to collect card details over the telephone or by mail using the [server-driven integration](https://docs.stripe.com/terminal/payments/setup-integration?terminal-sdk-platform=server-driven) on [Stripe Reader S700](https://docs.stripe.com/terminal/payments/setup-reader/stripe-reader-s700) or [BBPOS WisePOS E reader](https://docs.stripe.com/terminal/payments/setup-reader/bbpos-wisepos-e). You might decide to use the details collected to either charge the customer for the order or save their card details for online reuse. MOTO _isn’t_ currently supported on Stripe’s iOS, Android, JavaScript, or React Native SDKs.\n\nWhen using MOTO, enter the card information on the card reader instead of tapping or inserting. After initiating MOTO, the reader prompts you to enter the cardholder’s card number, CVC, expiration date, and postal code. The reader then displays a summary of the details you entered, and you can submit the payment for confirmation or save the card details.\n\n#### Note\n\nMOTO is a gated, paid feature that requires [P2PE](https://support.stripe.com/questions/stripe-terminal-encryption-e2ee-vs-p2pe). If you enable MOTO, the P2PE fee applies to all of your Terminal transactions. Reach out to your [sales representative](https://stripe.com/contact/sales) for more information. After we enable the changes, you must disconnect from and reconnect to your reader for the updated configuration to take effect immediately.",
    "title": "Mail order and telephone order (MOTO) payments | Stripe Documentation",
    "description": "Remotely process mail order and telephone order payments using Stripe Terminal.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/features/apps-on-devices/app-review",
    "markdown": "# Prepare for app review | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to prepare your app for Stripe's review process.\n\nStripe reviews all apps built for Terminal devices before approving them for deployment. The review process helps prevent putting payment information at risk or violating industry-standard best practices for payment devices.\n\n## App review at a glance ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe reviews the [device asset version](https://docs.stripe.com/terminal/features/apps-on-devices/submit#create-device-asset-version) of your app. This process doesn’t require any action from you.\n\n1.  A reviewer downloads your app and installs it on a Terminal smart reader.\n2.  Using the instructions you provided, the reviewer interacts with your app and identifies potential problems, focusing on your app’s payment collection user interface.\n3.  After the reviewer determines there are no present issues, they approve your app for deployment. Stripe [notifies you of app approval](https://docs.stripe.com/terminal/features/apps-on-devices/submit#monitor-status). The reviewer might reject your app if they’re unable to follow instructions, or if the app contains features that might put payment information at risk.\n\nThe exact amount of time and effort required to review each app varies because no two apps are alike.\n\n## App review guidelines ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the guidelines below to help with a timely and successful app review.\n\n### Build multi-tenant apps ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re a platform building apps for Terminal devices on behalf of individual businesses, we encourage you to build a multi-tenant app that serves all of your users. You can build business-specific workflows, such as different image or graphics assets per business, into your app’s configuration and settings. This approach also removes the need for you to submit individual apps per business.\n\n### Prevent collecting keyed payment card numbers or PINs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the Terminal reader running the app to request payment from a customer and collect sensitive card and PIN information. The [Terminal SDK](https://docs.stripe.com/terminal/features/apps-on-devices/build#discover-and-connect-a-reader) allows you to display an appropriate prompt on the device screen.\n\nMake sure that your app doesn’t display user interface elements (for example, an input field) that allow the manual entry of PINs, authentication values, or payment information.\n\n### Support test mode payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDuring development and testing, use a DevKit device to [accept test mode payments](https://docs.stripe.com/terminal/features/apps-on-devices/build). This allows Stripe to use a [physical Terminal test card](https://docs.stripe.com/terminal/references/testing#physical-test-cards) when we review your app.\n\nIf you must accept live payments, make sure the app accepts a minimal charge amount, such as 1 USD (or equivalent in another currency).\n\n### Address technical defects ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Use your DevKit](https://docs.stripe.com/terminal/features/apps-on-devices/build) to identify defects before submitting your app for review.\n\nExamples of common defects include:\n\n*   The app fails to install because of an error during its build process.\n*   The app crashes before we can interact with the app’s payment UI.\n*   The app can’t detect or connect to the reader.\n\nMake sure to address the technical defects that can prevent us from successfully interacting with or using your app. We reject apps that can’t be fully reviewed due to technical defects.\n\n### Write clear and complete instructions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you submit your app for review, assume that Stripe hasn’t seen it before. Make sure your instructions are self-contained and don’t assume any special knowledge to complete the review. We must be able to follow your instructions exactly as submitted.\n\nInclude the following with your app’s instructions:\n\n*   Login information, such as a username or password (if applicable)\n*   Fixed authentication code that remains valid indefinitely (if applicable)\n*   How to reach your payment collection UI\n*   How to exercise the app fully to highlight any problems\n\nDon’t provide credentials that permit access to sensitive information or to functionality that can cause any side effects. For example, an app that accepts orders for food must not cause any actual food preparation to occur as a result of orders placed during app review.\n\n## Submit your app for review ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFollow the steps to [submit your app for review](https://docs.stripe.com/terminal/features/apps-on-devices/submit).\n\n## Skip app review ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can skip app review and move directly to deployment in these cases:\n\n*   To use the API or test your app, you can limit the [compatible\\_device\\_types](https://docs.stripe.com/api/terminal/device_asset_versions/object#terminal_device_asset_version_object-compatible_device_types) to only DevKit device types (`stripe_s700_devkit`).\n*   If you previously uploaded a device asset version in test mode and Stripe reviewed and approved that version’s APK, you can upload it again for live mode.",
    "title": "Prepare for app review | Stripe Documentation",
    "description": "Learn how to prepare your app for Stripe's review process.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/payments/setup-reader/verifone-p400",
    "markdown": "# Set up Verifone P400 | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to set up the Verifone P400.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/verifone-photo-no-white.4db160423e13297d7665a614bf9bd6f1.png)\n\nThe Verifone P400 is a countertop reader for Stripe Terminal apps. It [connects](https://docs.stripe.com/terminal/payments/connect-reader?reader-type=internet) to the Stripe Terminal SDK over the internet.\n\nThis reader is compatible with JavaScript, iOS, Android, and React Native SDKs. To view the reader’s parts and features, see the [product sheet](https://www.verifone.com/sites/default/files/2018-01/p400_datasheet_ltr_013018.pdf).\n\n## Turn the reader on and off ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo turn on the Verifone P400, securely plug the P400 connector cable into the port on the bottom of the reader. The cover slides over the port to hold the cable in place. Plug the power adapter into the connector cable and into a power outlet.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/verifone-connector-cable-horz.d922bf66e6b7b9a405a86ed19a2bcbed.png)\n\nVerifone P400 connector cable\n\nThe Verifone P400 automatically turns on when connected to power. In a countertop deployment, leaving the device on for extended periods is expected. If you need to turn the reader off, remove the power source.\n\n#### Note\n\nEven when it’s not in use, leave the Verifone P400 plugged in to receive automatic software updates.\n\n## Connect the reader to the internet ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBecause the Verifone P400 is a smart reader, its reader software communicates directly with Stripe, managing connectivity through a LAN. The reader must connect to the same local network as your application. If you’re running into issues connecting your reader to the internet follow the [troubleshooting steps](https://docs.stripe.com/terminal/readers/verifone-p400#troubleshooting) to diagnose the issue.\n\n### WiFi Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re setting up a new device, follow the on-screen prompts to connect to the internet using WiFi. To start over, press the red **X** button on the keypad.\n\nTo switch networks, or connect an already online reader to a WiFi network, press **0WIFI** (**0-9-4-3-4**) on the keypad and follow the prompts. Attempting to join a new network disconnects the reader from any existing wireless connection. There’s no fallback to the previously connected network.\n\nYour WiFi network must use WPA-Personal or WPA2-Personal encryption and be password protected. WiFi isn’t supported for non-password-protected networks or enterprise networks.\n\n#### Caution\n\nConnecting over WiFi is a beta feature. For production use, have an Ethernet connection ready as a backup, in case of degraded networks or connectivity issues.\n\n#### Key mapping ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo access characters from the keypad, use this multi-tap key mapping scheme. The table shows which characters each key maps to, in the order they’ll appear.\n\n| Keypad Number | Characters | Keypad Number | Characters |\n| --- | --- | --- | --- |\n| **0** | `0-+=_!?@$%^&/\\()[]{}<>~\\|` | **6** | `6mnoMNO` |\n| **1** | `1qz.QZ` | **7** | `7prsPRS` |\n| **2** | `2abcABC` | **8** | `8tuvTUV` |\n| **3** | `3defDEF` | **9** | `9wxyWXY` |\n| **4** | `4ghiGHI` | **\\*** | ``*,’␣”`:;`` |\n| **5** | `5jklJKL` | **#** | `#` |\n\nFor example, if your network password is **Stripe**, enter `7-7-7-7-7-7-7-8-8-7-7-7-4-4-4-4-7-7-3-3-3`.\n\n### Ethernet![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnect an Ethernet cable from your router to the Verifone P400, using the **ETH** port (not the **RS232** port).\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/verifone-ethernet.0a73ad6671ff1a871d6d321bd2c5d0ca.png)\n\nConnecting Ethernet cable to Ethernet port\n\nThe reader obtains an IP address using DHCP. As soon as the network cable is plugged in, the reader attempts to establish communication with Stripe.\n\n### Network priority![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Verifone P400 resets its priority to Ethernet when rebooting. Even if previously configured for WiFi, the reader switches to Ethernet if it detects an Ethernet cable connection while starting up.\n\nIf you connect to WiFi while an Ethernet cable is connected, the reader switches to the WiFi connection. If the reader fails to connect to WiFi on the first attempt, it falls back to Ethernet connection. Otherwise, the reader continues to prioritize WiFi until rebooted.\n\n## Reader screens ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe reader has a few screens to indicate its connectivity state. The default splash screen indicates that the reader is connected to Stripe and ready for processing.\n\nYou can [customize the reader’s default splash screen](https://docs.stripe.com/terminal/fleet/splash-screen) by setting up [locations](https://docs.stripe.com/terminal/fleet/locations-and-zones).\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/frame-1.def28f57601302f767925405e3d7b9d4.png)\n\nDefault splash screen\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/frame-2.e65c2a6f9947656319ab13359062c0ed.png)\n\nDownloading update screen\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/frame-3.e506a5f3ddd36501c195a36015946372.png)\n\nNot connected screen\n\n## Default reader language ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Verifone P400](https://docs.stripe.com/terminal/readers/verifone-p400) interface displays text in both English and the language of the region the reader is registered in.",
    "title": "Set up Verifone P400 | Stripe Documentation",
    "description": "Learn how to set up the Verifone P400.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/features/apps-on-devices/troubleshooting",
    "markdown": "# Troubleshoot apps on devices | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to resolve known issues with apps on devices.\n\n*   **Why won’t my app upload to Stripe?**\n    \n    If your APK is too big or your upload internet speeds are too slow, you might receive a timeout error when you upload your APK with the [Files](https://docs.stripe.com/api/files) API. Stripe enforces a 45 second timeout on its servers, and produces an error if an app isn’t uploaded within that time. To resolve this issue, upload your APK to a server with better internet (for example, an AWS EC2 instance or another VPS), and then upload to Stripe from there. The network connection between your server and Stripe servers is generally much faster than home or office connections to Stripe through an ISP.\n    \n*   **Do I have to resubmit my test-mode-approved app for approval in live mode?**\n    \n    If you obtained approval for your app in test mode and want to use the app in live mode, you must submit it again for approval. The [app review process](https://docs.stripe.com/terminal/features/apps-on-devices/app-review) is the same for both test mode and live mode. Make sure to upload the exact same APK for automatic approval.\n    \n*   **Why can’t I access the device admin settings screen from my app?**\n    \n    By default, the device user can access admin settings by swiping from the left edge of the screen and tapping **Settings**. This method doesn’t work when a third-party app is the default launch app. You can use the `stripe://settings/` URI to deep-link into admin settings and then launch the URI from your app using the following code in your **Activity** or **Fragment**:\n    \n    `startActivity(   Intent(Intent.ACTION_VIEW)     .setData(Uri.parse(\"stripe://settings/\")) )`\n    \n*   **Why can’t I update the device language on my DevKit?**\n    \n    The reader app on the DevKit can’t currently update the device language. You can change the device language through the Android Settings app. Use `adb` to launch the Android Settings app:\n    \n    `$ adb shell am start -a android.settings.SETTINGS`\n    \n*   **Why can’t I launch or deep-link into Android Settings on Stripe devices?**\n    \n    For security and reliability reasons, Stripe blocks the Android Settings app on production Stripe devices.\n    \n*   **Why can’t I use Apps on Devices with my connected account?**\n    \n    Apps on Devices and its related APIs don’t support [connected account](https://docs.stripe.com/connect/accounts) keys. You must use your platform account key. If you want to use a connected account to isolate access from your platform account, you can instead create [restricted testmode keys](https://docs.stripe.com/keys#create-restricted-api-secret-key) on your platform account.\n    \n*   **Can I run multiple apps on my Stripe Reader S700?**\n    \n    The Stripe Reader S700 supports running multiple apps, but we don’t provide an app launcher. You must build the functionality within your apps to allow switching between apps. When you deploy your apps, you can specify the `default_kiosk_application`, which is the app that launches when the device checks for updates and after payments. You can’t use the Dashboard to configure multiple apps on a device.\n    \n*   **Can I deploy a web app on my Stripe devices?**\n    \n    You can package your web app to run on your Stripe devices. Use a framework, such as [Cordova](https://cordova.apache.org/), to modify your web app for compatibility with Android and generate an Android application package (APK). You can then [upload the APK](https://docs.stripe.com/terminal/features/apps-on-devices/submit) in your Stripe Dashboard.\n    \n    Frameworks aren’t aware of Stripe or the [Android Terminal SDK](https://docs.stripe.com/terminal/references/api), so you must create a JavaScript bridge between your web app and the SDK to send commands from JavaScript.\n    \n    Alternatively, you can use the [server-driven integration](https://docs.stripe.com/terminal/payments/setup-integration) to collect payments, which doesn’t require using the Terminal handoff client library or a JavaScript bridge. This allows Stripe to handle all payment collection commands and communication with the device.\n    \n*   **Why is my app constantly restarting?**\n    \n    The Stripe Terminal card readers restart the default app in the event of a crash. This manifests differently for production and DevKit devices:\n    \n    *   Production – If you configure your app as the default app on production devices, the app automatically restarts when there’s a crash. If the app crashes during initialization (for example, a missing or broken database migration), the device can enter a crash loop.\n        \n    *   DevKit – If you configure the Stripe payment app as the default app on DevKit devices, your app queues on the device and then becomes the primary app. If the app crashes, the Stripe payment app restarts instead.\n        \n    \n*   **Why does my app crash when processing payments with a large amount of line items?**\n    \n    If your app crashes while attempting to process a payment with a large amount of line items, the issue might be memory. The Android OS limits data sent per inter-process (IPC) to 500 KB, when saving state for your activity. To help prevent your app from crashing, you can store your data out of memory, such as in a database.\n    \n*   **What if I find a bug in a deployed app?**\n    \n    If you discover a bug in an app that’s already deployed, you can fix the issue in the app, upload a new version, and then [deploy your app](https://docs.stripe.com/terminal/features/apps-on-devices/deploy).\n    \n*   **How do I view the logs for my app on production readers?**\n    \n    Stripe doesn’t expose logs on production readers. We rely on Sentry integrations for observability.\n    \n*   **I sideloaded my point-of-sale app onto a DevKit and successfully completed a payment transaction. Why won’t my point-of-sale app start after the transaction completes?**\n    \n    On Stripe readers configured for Apps on Devices, the [preferred kiosk app](https://docs.stripe.com/terminal/features/apps-on-devices/deploy?dashboard-or-api=dashboard#deploy-app-version) starts after a transaction completes. On a DevKit, the device’s preferred kiosk app is only set when you include the device in a deploy group.\n    \n    To set the preferred kiosk app on a DevKit device:\n    \n    1.  Submit your app to a DevKit-only deploy group. This allows you to [skip app review](https://docs.stripe.com/terminal/features/apps-on-devices/app-review#skip-app-review).\n    2.  [Deploy the app version](https://docs.stripe.com/terminal/features/apps-on-devices/deploy) to a deploy group that targets your DevKit.",
    "title": "Troubleshoot apps on devices | Stripe Documentation",
    "description": "Learn how to resolve known issues with apps on devices.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/features/apps-on-devices/deploy",
    "markdown": "# Deploy your app | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to deploy your Android app to your devices.\n\nAfter Stripe reviews and approves your app for deployment, we [notify you](https://docs.stripe.com/terminal/features/apps-on-devices/submit#monitor-status) by email, in the Dashboard, or through a webhook. You can then follow the instructions below to deploy your app.\n\nDuring deployment, your app is immediately sent and downloaded to your device. The device reboots to install the app. Devices reboot every 24 hours and apply any updates automatically. To check for and apply updates immediately, you can manually reboot your device.\n\n## Add or edit a deploy group ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBefore you can add or edit a deploy group, you must create a Terminal [location](https://docs.stripe.com/terminal/fleet/locations-and-zones) and add [readers](https://docs.stripe.com/api/terminal/readers/object) to that location.\n\nAfter you create a deploy group, you can edit it at any time by clicking **edit** next to the location.\n\n1.  In the Dashboard, click **Developers** > **Apps**.\n2.  On the [Terminal apps](https://dashboard.stripe.com/terminal/apps_on_devices/apps) tab, click **Manage deploy groups**.\n3.  Click **Add deploy group**.\n4.  Complete the following steps in the **Deploy group** window:\n    *   Enter a group name.\n    *   Choose your Terminal device type.\n    *   Choose the location(s) to add.\n    *   Click **Done**.\n\n## Deploy an app version ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can deploy your app after a [Stripe reviewer approves](https://docs.stripe.com/terminal/features/apps-on-devices/app-review) it.\n\n1.  On the [Terminal apps](https://dashboard.stripe.com/terminal/apps_on_devices/apps) tab, choose the app that you want to deploy.\n2.  On the app details page, click **Deploy version**.\n3.  Choose a version of the approved app, then click **Next**. You can’t deploy an earlier version of an app. The app version must be newer than the currently deployed app.\n4.  Choose the deploy group, then click **Next**.\n5.  Choose your preferred kiosk app, then click **Next**. This is the default app that launches when the Stripe reader turns on. If there’s only one app to deploy, choose that app instead.\n6.  Confirm the deployment details, then click **Deploy**. The app deploys immediately.\n\n## Deploy group best practices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can sort devices into different deploy groups to roll out software independently and isolate fault in case of any issues. You might have fewer or more deploy groups based on tooling, risk tolerance, and specific business needs.\n\nWe recommend the following deploy group setup:\n\n*   **Alpha** - Contains locations that correspond to your internal devkits or internal production devices.\n*   **Beta** - Contains a small number of actual user locations. You can randomly choose these locations, select them based on meaningful criteria (for example, less risky locations), or have users opt in to the Beta deploy group based on their risk tolerance.\n*   **General** - Contains all remaining actual user locations, except those in the Alpha or Beta groups.\n\nWhen your app is ready for deployment, promote deploy groups from least to most risky:\n\n|     |     |     |\n| --- | --- | --- |\n| 1   | Alpha | First, deploy to the Alpha deploy group to test your app in a way that minimizes risk to users. Discovering a bug or undesirable behavior at this stage only affects a small number of internal devices, rather than actual users and real payments. |\n| 2   | Beta | Second, deploy to the Beta deploy group. This balances exposing your app to real users and not exposing all users to potential issues. |\n| 3   | General | Finally, deploy to the General deploy group after addressing any issues or confirming that no issues existed for the Beta deploy group. |",
    "title": "Deploy your app | Stripe Documentation",
    "description": "Learn how to deploy your Android app to your devices.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/terminal/hardware_products/object",
    "markdown": "# The TerminalHardwareProduct object | Stripe API Reference\n\n## [The TerminalHardwareProduct object](https://docs.stripe.com/api/terminal/hardware_products/object)Preview feature\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   The status of the terminal hardware product.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `available`<br><br>Available for new orders. |\n    | `unavailable`<br><br>Can no longer be used for order creation. |\n    \n*   The type of product.\n    \n*   #### \n    \n    unavailable\\_afternullable integer\n    \n    If all the SKUs for this product have an unavailable\\_after then this is the max unavailable\\_after in UNIX timestamp. Otherwise, null.\n    \n\nThe TerminalHardwareProduct object\n\n```\n{  \"id\": \"thpr_MJfotcxYT5Hwsm\",  \"object\": \"terminal.hardware_product\",  \"status\": \"available\",  \"type\": \"bbpos_wisepos_e\",  \"unavailable_after\": null}\n```\n\n## [Retrieve a Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products/retrieve)Preview feature\n\nRetrieves a `TerminalHardwareProduct` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareProduct` object if a valid identifier was provided.\n\nGET /v1/terminal/hardware\\_products/:id\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_products/thpr_MJfotcxYT5Hwsm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thpr_MJfotcxYT5Hwsm\",  \"object\": \"terminal.hardware_product\",  \"status\": \"available\",  \"type\": \"bbpos_wisepos_e\",  \"unavailable_after\": null}\n```\n\n## [List all Terminal Hardware Products](https://docs.stripe.com/api/terminal/hardware_products/list)Preview feature\n\nList all `TerminalHardwareProduct` objects.\n\n### Parameters\n\n*   Only return products that have the given status. Defaults to available.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `available`<br><br>Available for new orders. |\n    | `unavailable`<br><br>Can no longer be used for order creation. |\n    \n\n### Returns\n\nA dictionary with a `data` property that contains an array of terminal hardware products. Each entry in the array is a separate Product object.\n\nGET /v1/terminal/hardware\\_products\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_products \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/hardware_products\",  \"has_more\": false,  \"data\": [    {      \"id\": \"thpr_MJfotcxYT5Hwsm\",      \"object\": \"terminal.hardware_product\",      \"status\": \"available\",      \"type\": \"bbpos_wisepos_e\",      \"unavailable_after\": null    }    {...}    {...}  ],}\n```\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The TerminalHardwareProduct object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/radar/integration",
    "markdown": "# Optimizing your Radar Integration | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to get the most out of Stripe Radar by optimizing your integration to send a complete set of fraud signals.\n\nStripe [Radar](https://docs.stripe.com/radar \"Radar\")’s machine learning models use many signals to distinguish between fraudulent and legitimate payments. We compute some of these signals automatically, but many of them depend on the information that your integration provides. In general, the more data your integration provides, the more successful fraud prevention can be.\n\nIf you don’t collect enough information from your customers, it can reduce the effectiveness of fraud detection. Conversely, if you collect too much information, it can negatively impact the checkout experience and result in a lower conversion rate.\n\n## Integration types![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Radar leverages the power of the Stripe network to effectively detect and block fraudulent transactions, regardless of how you integrate with Stripe. However, the way you integrate with Stripe to process payments can significantly impact the completeness of the fraud signals you send us. The more information you send about a payment, the better Stripe Radar is at detecting and preventing fraud. Using one of our recommended payment integrations allows you to get the most out of Radar. If you can’t use a recommended integration, consider including as much additional data as possible, as explained in our [recommendations](https://docs.stripe.com/radar/integration#recommendations) below.\n\n| Integration type | Radar integration quality |\n| --- | --- |\n| [Stripe Payment Links](https://docs.stripe.com/payment-links) Recommended | Excellent |\n| [Stripe Checkout](https://docs.stripe.com/payments/checkout) Recommended | Excellent |\n| [Stripe Elements](https://docs.stripe.com/payments/elements) with Customer signals Recommended | Excellent |\n| Direct [API](https://docs.stripe.com/api) integration with [Radar Sessions](https://docs.stripe.com/radar/radar-session) and Customer signals | Excellent |\n| Direct [API](https://docs.stripe.com/api) integration with client and Customer signals | Very good |\n| Direct [API](https://docs.stripe.com/api) integration with client signals | Good |\n| Direct [API](https://docs.stripe.com/api) integration with Customer signals | Fair |\n| Direct [API](https://docs.stripe.com/api) integration with no additional signals | Poor |\n\n## Important signals to send to Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIncluding the following information with your payments can have a significant impact on the performance of Stripe Radar’s fraud detection models. Our recommended integrations enable you to collect this information, while direct integrations might need to explicitly include this data.\n\n| Data | Estimated fraud model improvement |\n| --- | --- |\n| [Advanced fraud signals](https://docs.stripe.com/disputes/prevention/advanced-fraud-detection \"advanced fraud signals\") | 36% |\n| IP address | 12% |\n| Customer email | 11% |\n| Customer name | 3%  |\n| Billing address | 1%  |\n\n## Recommendations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe’ve tested the following recommendations to make sure that your conversion rate remains high while maximizing the performance of our machine learning models.\n\n#### Checklist progress\n\nAs you complete each item and check it off, the state of each checkbox is stored within your browser’s cache. You can refer back to this page at any time to see what you’ve completed so far.\n\n*   Collect advanced fraud signals automatically by using Payment Links, Checkout, Elements, or our mobile SDKs\n    \n    The most important action you can take to guard against fraud is to collect customer payment information using one of our [recommended payments integrations](https://docs.stripe.com/payments/online-payments#recommended-integrations). Each method automatically collects important high-signal data, such as device information and IP addresses. To further improve fraud detection, collect the cardholder name, full billing address, postal code, and the card’s CVC code during checkout.\n    \n    You can build a seamless checkout flow within your website or app using any of these methods, and securely pass sensitive card information directly to Stripe without passing it through your servers—greatly simplifying your [PCI compliance](https://docs.stripe.com/security/guide). Determine which integration makes the most sense for your business and product goals, but any of these integration methods help optimize your integration for fraud prevention.\n    \n    #### Note\n    \n    If you’re not using one of the recommended payment integrations, consider using [Radar Sessions](https://docs.stripe.com/radar/radar-session) to automatically collect [advanced fraud signals](https://docs.stripe.com/disputes/prevention/advanced-fraud-detection) to send to Stripe. You can also pass a subset of our advanced fraud signals directly using our APIs, as shown below.\n    \n    `curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n    \n    `sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n    \n    `:\" \\  -d amount=2000 \\  -d currency=usd \\  -d \"payment_method_data[type]\"=card \\  -d \"payment_method_data[card][number]\"=4000002500003155 \\  -d \"payment_method_data[card][exp_month]\"=12 \\  -d \"payment_method_data[card][exp_year]\"=29 \\  -d \"payment_method_data[card][cvc]\"=123 \\  -d \"payment_method_data[ip]\"=\"62.132.141.1\" \\   --data-urlencode \"payment_method_data[user_agent]\"=\"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)\" \\   --data-urlencode \"payment_method_data[referrer]\"=\"[https://example.com/payment-page](https://example.com/payment-page)\" \\  -d \"payment_method_data[payment_user_agent]\"=\"Stripe Button\"`\n    \n    `curl https://api.stripe.com/v1/charges \\  -u \"`\n    \n    `sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n    \n    `:\" \\  -d amount=2000 \\  -d currency=usd \\  -d source=tok_visa \\  -d ip=\"62.132.141.1\" \\   --data-urlencode user_agent=\"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)\" \\   --data-urlencode referrer=\"[https://example.com/payment-page](https://example.com/payment-page)\" \\  -d payment_user_agent=\"Stripe Button\"`\n    \n*   Create payments using the Customer object, where possible\n    \n    Using [Customer](https://docs.stripe.com/api#customers) objects when creating payments allows Stripe to track the payment patterns for each customer over time. This significantly increases our ability to identify irregularities in purchasing behavior. To do this, you should:\n    \n    *   [Set up Payment Methods for future use](https://docs.stripe.com/payments/save-and-reuse) and add a [billing address](https://docs.stripe.com/api/customers/object#customer_object-address) to `Customer` objects and use them to create subsequent payments.\n    *   Provide your customer’s [email address](https://docs.stripe.com/api#customer_object-email) when creating a `Customer` object.\n    *   Provide your customer’s [name](https://docs.stripe.com/api/#customer_object-name) when you tokenize their card information.\n    *   If you ship physical goods, we also recommend collecting the customer’s [shipping address](https://docs.stripe.com/api#customer_object-shipping) and saving this to their associated `Customer` object.\n    \n    Each `Customer` object can also store [multiple payment methods](https://docs.stripe.com/saving-cards#multiple-payment-methods), so you can enhance your customer’s checkout experience by offering to save multiple cards. Stripe can continue to track payment patterns for each customer, regardless of which one they use.\n    \n    If you’re creating a [PaymentIntent](https://docs.stripe.com/api/payment_intents) manually, make sure to handle [declines](https://docs.stripe.com/declines). If you reuse the PaymentIntent, you can track repeated attempts to help counter [card testing](https://docs.stripe.com/disputes/prevention/card-testing).\n    \n*   Include Stripe.js on every page of your site\n    \n    Include [Stripe.js](https://docs.stripe.com/payments/elements) on every page of your site, not just the checkout page where your customer enters their payment information. By doing so, Stripe can detect anomalous behavior that may be indicative of fraud as customers browse your website—[providing additional signals](https://docs.stripe.com/disputes/prevention/advanced-fraud-detection) that increase the effectiveness of our detection.\n    \n    #### Note\n    \n    Always load Stripe.js directly from **https://js.stripe.com/v3/**. We don’t support using a local copy of Stripe.js-it can result in user-visible errors, and reduces the effectiveness of our fraud detection.\n    \n*   Update your privacy policy if necessary\n    \n    Radar collects information on anomalous device or user behavior that might be indicative of fraud. Make sure that your own privacy policy tells your customers about this type of collection. Here’s a paragraph you could add to your policy if it doesn’t already include such a disclosure:\n    \n    > We use Stripe for payment, analytics, and other business services. Stripe collects identifying information about the devices that connect to its services. Stripe uses this information to operate and improve the services it provides to us, including for fraud detection. You can learn more about Stripe and read its privacy policy at https://stripe.com/privacy.\n    \n*   Consider enabling Radar for future use\n    \n    Radar operates on a per-charge level, which means that during a [PaymentIntent lifecycle](https://docs.stripe.com/payments/paymentintents/lifecycle), Radar might scan multiple charges if the payment has retries. By default, Radar doesn’t scan if you [set up a Payment Method for future use](https://docs.stripe.com/payments/save-and-reuse) _without_ a charge. If you want to scan [SetupIntents](https://docs.stripe.com/api/setup_intents), go to the [Radar settings](https://dashboard.stripe.com/settings/radar) and enable **Use Radar on payment methods saved for future use**.",
    "title": "Optimizing your Radar Integration | Stripe Documentation",
    "description": "Learn how to get the most out of Stripe Radar by optimizing your integration to send a complete set of fraud signals.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/payments/setup-reader/bbpos-chipper2xbt",
    "markdown": "# Set up BBPOS Chipper 2X BT\n\n## Learn how to set up the BBPOS Chipper 2X BT.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/bbpos-photo-no-white.bf21912a012f27483d48a968515d723c.png)\n\nThe BBPOS Chipper 2X BT is a handheld reader for use with mobile applications. It uses Bluetooth Low Energy (LE) or USB (Android only) to [connect](https://docs.stripe.com/terminal/payments/connect-reader) to the Stripe Terminal SDK on a mobile device.\n\nThis reader is compatible with iOS, Android, and React Native SDKs. To view the reader’s parts and features, see the [BBPOS Chipper 2X BT product sheet](https://d37ugbyn3rpeym.cloudfront.net/terminal/product-sheets/c2xbt_product_sheet.pdf).\n\n## Turn the reader on and off ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can turn on the BBPOS Chipper 2X BT reader by pressing and releasing the power button. The status light turns on to indicate power. The reader waits for a connection for five minutes before turning off.\n\nWhen the reader [connects to a device running your app](https://docs.stripe.com/terminal/payments/connect-reader), its status light shines steady blue. If inactive for more than 30 seconds, it enters standby mode to conserve power, and the status light begins flashing at 5-second intervals. The reader stays connected to your iOS or Android device while in standby and automatically exits standby mode when you resume activity.\n\nThe reader automatically turns off after 10 hours of inactivity. You can turn the reader off manually by pressing and holding the power button until the status light goes out. You don’t need to turn off the reader to conserve power.\n\n#### Note\n\nWith typical usage, you only need to fully [charge the reader](#charging) once per day.\n\n## Status light ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you turn on the BBPOS Chipper 2X BT, the LED located beside the power button shows the reader’s current status.\n\n| Light | Meaning |\n| --- | --- |\n| **None** | The reader is off. |\n| **Flashing blue every second** | The reader is on and ready to connect to a device. (Will turn off after 5 min.) |\n| **Multicolored flashing** | The reader has been discovered using [Bluetooth Proximity](https://docs.stripe.com/terminal/payments/connect-reader?terminal-sdk-platform=ios&reader-type=bluetooth#bluetooth-proximity) or USB (Android only) and is ready to connect. |\n| **Steady blue** | The reader is connected to a device. |\n| **Flashing blue every 5 seconds** | The reader is in standby mode. (Will remain in standby indefinitely.) |\n| **Alternating red and magenta** | The reader is charging. |\n| **Flashing red** | The reader’s battery is low. |\n| **Rapidly flashing blue and orange** | The reader has finished installing a software update. If the reader is unresponsive after the update completes, restart the reader by turning it off and on. |\n\n## Charge the reader ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo charge the BBPOS Chipper 2X BT, use the included cable or a micro USB cable.\n\nThe BBPOS and Chipper™ name and logo are trademarks or registered trademarks of BBPOS Limited in the United States and/or other countries. The Verifone® name and logo are either trademarks or registered trademarks of Verifone in the United States and/or other countries. Use of the trademarks does not imply any endorsement by BBPOS or Verifone.",
    "title": "Set up BBPOS Chipper 2X BT | Stripe Documentation",
    "description": "Learn how to set up the BBPOS Chipper 2X BT.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/radar/lists",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Lists\n\n## Create your own lists of information to block, allow, or review matching payments.\n\nUsers of Stripe Radar for Fraud Teams can create lists of specific types of information and use them in [rules](https://docs.stripe.com/radar/rules). For example, you might want to create rules using a list of:\n\n*   **Customer IDs for trusted customers**. Use this list to automatically allow payments by these customers.\n*   **Email addresses you tied to fraud**. Automatically block any payment with an email address on this list.\n*   **Suspicious IP addresses**. Place payments into review that have a matching IP address.\n\nLists make rules more manageable. Instead of creating individual rules for one item at a time, you can add similar types of information to a list (for example, email addresses) for a rule to use automatically.\n\n## Default lists![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Radar includes a set of default lists to help you get started. Each of the following types of information has a separate allow and block list that your [default allow and block rules](https://docs.stripe.com/radar/rules) can reference.\n\n*   **Card BIN**\n    \n    The Bank Identification Number (BIN) of the card being used to make the payment. This is the first six digits of the card number (for example, `424242`).\n    \n*   **Card country**\n    \n    The two-letter code corresponding to the country where the card was issued (for example, `US`).\n    \n*   **Card fingerprint**\n    \n    The [fingerprint](https://docs.stripe.com/api#card_object-fingerprint) of the card being used to make the payment. The card fingerprint is a unique Stripe identifier of a particular card number (for example, bEXP6iJPROLniU). It’s a property of the [Card](https://docs.stripe.com/api#card_object) object and you can see it in the Dashboard when viewing a payment.\n    \n*   **Charge description**\n    \n    The [description](https://docs.stripe.com/api#charge_object-description) supplied with the payment.\n    \n*   **Client IP country**\n    \n    The two-letter code corresponding to the country-level geolocation of the IP address where the payment originates (for example, `GB`).\n    \n*   **Client IP address**\n    \n    The IP address from which the payment originates (for example, `13.112.224.240`).\n    \n*   **Customer ID**\n    \n    The [customer ID](https://docs.stripe.com/api#charge_object-customer) supplied with the payment (for example, `cus_AeFLnRaI51AbRi`).\n    \n*   **Email**\n    \n    The first email derived from the charge, card, or customer objects, in that order (for example, `jenny.rosen@example.com`).\n    \n*   **Email domain**\n    \n    The first email domain derived from the `Charge`, `Card`, or `Customer` objects, in that order (for example, `example.com`).\n    \n\n#### Note\n\nYou can add and remove items from these lists but you can’t edit or remove the default lists themselves.\n\n## Custom lists![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can create lists of your own that contain items that are a specific type of information. The types of lists you can create are:\n\n*   String\n*   Case-sensitive string\n*   Card fingerprint\n*   Card BIN\n*   Customer ID\n*   Email\n*   IP address\n*   Country\n\nUse the [Dashboard](https://dashboard.stripe.com/test/radar/lists) or the [API](https://docs.stripe.com/api/radar/value_lists/create) to create lists. To create a new list in the Dashboard:\n\n1.  Click **New**.\n2.  Enter a name for the list (we automatically generate an alias to use as a reference when writing rules, but you can override this).\n3.  Select the type of list to create.\n4.  Click **Add** to save your new list.\n\nAfter creating your new list, [add a new rule](https://docs.stripe.com/radar/rules/reference#lists) that references it.\n\nYou can edit or remove lists you’ve created by clicking the overflow menu (**•••**), and you can edit the list directly by clicking the name of the list.\n\n## Managing list items![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can view and remove items when viewing a list in the [Dashboard](https://dashboard.stripe.com/test/radar/lists). Each item includes information about when it was added and by whom. You can filter items by value, author, and date added. Each list can contain up to 50,000 items.\n\nYou can add items to your default block list by [refunding and reporting a payment as fraudulent](https://docs.stripe.com/radar/risk-evaluation#feedback-on-risk-evaluations). Doing so takes the following actions:\n\n*   Adds the card fingerprint to your default card fingerprint block list. If the payment is made using a [Customer](https://docs.stripe.com/api#customer_object) object, it adds the card fingerprints of any other cards also added to the list.\n*   Adds any email address associated with the payment to your default email block list. It takes the email address from:\n    *   The `receipt_email` of the payment\n    *   The `email` of the `Customer` object that the payment was created on\n    *   Any email addresses found in the customer or payment `description` fields, and in the card’s `name` field\n\nWhen refunding a payment because of suspected fraud, make sure to specify this reason to help our machine learning systems recognize similar cases in the future.\n\nYou can also make a [charge update](https://docs.stripe.com/api/charges/update#update_charge-fraud_details) request using the API and set `fraud_details.user_report` to `fraudulent`. This also adds any associated cards and email addresses to your card fingerprint and email block lists.\n\nWhen adding string list items in the Dashboard, you have the option of selecting the length of time before expiration. These items are only active in the list for as long as you specify. After they expire, they’re no longer active in rule evaluation.",
    "title": "Lists | Stripe Documentation",
    "description": "Create your own lists of information to block, allow, or review matching payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/radar/reviews/risk-insights",
    "markdown": "# Risk insights | Stripe DocumentationThe Stripe Docs logo\n\n## Understand risk factors and details about a particular payment.\n\nStripe Radar’s adaptive [machine learning system](https://stripe.com/radar/guide) determines the risk score and risk level for a payment and uses them to decide when to block or mark payments for review. The system evaluates hundreds of signals about each payment, using data from Stripe’s network across millions of businesses. The risk insights feature, available with Stripe Radar for Fraud Teams, provides a sneak peek into some of the signals that power Radar’s machine learning system.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/risk-insights-card.ef788006b7b5d6acbb4d237386a3c4ed.png)\n\nRisk insights for payments\n\nRisk insights also includes information about the customer, such as matching the cardholder’s name with the provided email, and the success rate of transactions on the Stripe network associated with the email address. A low authorization rate may indicate suspicious behavior, because previous declines sometimes suggest past attempts at fraudulent transactions.\n\nWe also highlight geography-based information, including the billing, shipping, and, IP address locations associated with this payment.\n\n## Risk insights ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you want to see more Radar’s signals, click the **Show all insights** button from the risk insights section. This opens a dialog with a list of signals to Radar’s machine learning engine.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/risk-insights-dialog.90d9ff8cc321c3e9bab7423b07ec97c6.png)\n\nRadar’s risk insights dialog\n\n### Understand fraud factors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n#### Fraud factor numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSome of the signals in the risk insights dialog have badges with numbers next to them. These badges show the fraud factor for a signal on this payment. A fraud factor represents the likelihood of fraud for charges with a value similar to this signal when compared to the average transaction on Stripe. A fraud factor of 3.5x means that charges with a similar value for this signal are 3.5 times more likely to be fraudulent than average. In a higher risk payment, we expect to see some fraud factors greater than 1, and in a lower risk payment we expect to see some fraud factors less than 1.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/risk-insights-fraud-factor.3bd00f6b09999ef71f6d258c2cc20be6.png)\n\nFraud factors\n\nHover over a fraud factor to see more information about the possible values for it. These factors will change over time as the data in our network changes. This data provides context for the distribution of fraud factors for a signal. This dialog also provides the network distribution of values for a signal, letting you know whether the current payment has a value that’s common or if it’s rare or unique in the Stripe network.\n\n#### Top fraud factors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/risk-insights-top-fraud-factors.ef27de20a842cb7d411261e9e7757fc6.png)\n\nTop fraud factors\n\nThe **Top Fraud Factors** section outside the risk insights dialog notifies you with fraud signals when the payment has values that commonly indicate fraud. Because Radar’s machine learning detects complex patterns across hundreds of signals, it’s still possible for a charge to be correctly identified as fraud, even if none of the signals appear suspicious on an individual level.\n\nYou can also view the network of related payments, which includes any other payments made to your business using the same customer ID, IP address, or card number as the payment you’re currently viewing. This can help identify common fraud patterns, such as [card testing](https://docs.stripe.com/disputes/prevention/fraud-types#card-testing) (many different cards sharing a single IP address) or trial abuse (many “customers” share the same card).\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/related-payments-highlight.f0668ec4db4273e04eb4f8f3b8910e08.png)\n\nRelated payments",
    "title": "Risk insights | Stripe Documentation",
    "description": "Understand risk factors and details about a particular payment.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/invoice",
    "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
    "title": "Page not found | Stripe Documentation",
    "description": "Sorry, but the page you were looking for couldn't be found.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/api/subscription",
    "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
    "title": "Page not found | Stripe Documentation",
    "description": "Sorry, but the page you were looking for couldn't be found.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/js/payment_intents/collect_bank_account_for_payment",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/js/payment_intents/confirm_us_bank_account_payment",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/js/elements_object/create_element?type=au_bank_account",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/payments/cash-app-pay/set-up-payment?platform=web&ui=direct-api",
    "markdown": "# Set up future Cash App Pay payments\n\nThis guide covers how to save a Cash App Pay payment details using [Checkout](https://docs.stripe.com/payments/checkout), our fully hosted checkout page.\n\nTo create recurring payments after saving a payment method in Checkout, see [Set up a subscription with Cash App Pay](https://docs.stripe.com/billing/subscriptions/cash-app-pay) for more details.\n\n[](#web-set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-create-customer)\n\nTo reuse a Cash App Pay payment method for future payments, attach it to a [Customer](https://docs.stripe.com/api/customers \"Customers\").\n\nCreate a [Customer object](https://docs.stripe.com/api/customers) when your customer creates an account with your business, and associate the ID of the Customer object with your own internal representation of a customer. Alternatively, you can create a new Customer later, right before saving a payment method for future payments.\n\nCreate a new Customer or retrieve an existing Customer to associate with this payment. Include the following code on your server to create a new Customer.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode description=\"My First Test Customer (created for API docs)\"`\n\n[](#web-create-checkout-session)\n\nYour customer must authorize you to use their Cash App account for future payments through Stripe Checkout. This allows you to accept Cash App payments. Add a checkout button to your website that calls a server-side endpoint to create a [Checkout Session](https://docs.stripe.com/api/checkout/sessions).\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nCreate a Checkout Session in `setup` mode to collect the required information. After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\n[](#web-test-integration)\n\nTo test your integration, choose Cash App Pay as the payment method and tap **Pay**. In test mode, this redirects you to a test payment page where you can approve or decline the payment.\n\nIn live mode, tapping **Pay** redirects you to the Cash App mobile application—you don’t have the option to approve or decline the payment within Cash App. The payment is automatically approved after the redirect.",
    "title": "Set up future Cash App Pay payments | Stripe Documentation",
    "description": "Learn how to save Cash App Pay details and charge your customers later.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/setup_intents/confirm_au_becs_debit_setup",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/payments/paypal/set-up-future-payments?platform=web",
    "markdown": "# Set up future PayPal payments\n\n## Learn how to save PayPal details and charge your customers later.\n\n## Enable recurring payments support from the Stripe Dashboard ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can request access to the recurring payments directly from the Stripe Dashboard. To do that, go to the [Payment Methods Settings](https://dashboard.stripe.com/settings/payment_methods) page, find PayPal and click **Enable** next to the Recurring Payments section. You’ll see the **pending** status. It usually takes up to 5 business days to get access to the recurring payments for PayPal. When access is granted, you’ll see recurring payments on your [PayPal settings](https://dashboard.stripe.com/settings/payment_methods) page.\n\nUse [Stripe Checkout](https://docs.stripe.com/payments/checkout) to collect PayPal payment details in advance, and determine the final amount or payment date later. Use it to:\n\n*   Save payment methods to a wallet to streamline future purchases\n*   Collect surcharges after fulfilling a service\n*   [Start a free trial for a subscription](https://docs.stripe.com/billing/subscriptions/trials)\n\n[](#set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#create-customer)\n\nTo reuse a PayPal payment method for future payments, it must be attached to a [Customer](https://docs.stripe.com/api/customers \"Customers\").\n\nYou should create a Customer object when your customer creates an account on your business. Associating the ID of the Customer object with your own internal representation of a customer will enable you to retrieve and use the stored payment method details later. If your customer hasn’t created an account, you can still create a Customer object now and associate it with your internal representation of the customer’s account later.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#create-checkout-session)\n\nBefore you can accept PayPal payments, your customer must authorize you to use their PayPal account for future payments through Stripe Checkout.\n\nAdd a checkout button to your website that calls a server-side endpoint to create a [Checkout Session](https://docs.stripe.com/api/checkout/sessions).\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nCreate a Checkout Session in `setup` mode to collect the required information. After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\nWhen your customer provides their payment method details, they’re redirected to the `success_url`, a page on your website that informs them that their payment method was saved successfully. Make the Session ID available on your success page by including the `{CHECKOUT_SESSION_ID}` template variable in the `success_url` as in the above example.\n\nWhen your customer clicks on your logo in a Checkout Session without providing their payment method details, Checkout redirects them back to your website by navigating to the `cancel_url`. This is usually the page on your website that the customer viewed prior to redirecting to Stripe Checkout.\n\n#### Caution\n\nDon’t rely on the redirect to the `success_url` alone for detecting payment initiation, as:\n\n*   Malicious users could directly access the `success_url` without paying and gain access to your goods or services.\n*   Customers may not always reach the `success_url` after a successful payment—they might close their browser tab before the redirect occurs.\n\n[](#retrieve-payment-method)\n\nAfter a customer submits their payment details, retrieve the [PaymentMethod](https://docs.stripe.com/payments/payment-methods) object. A [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") stores the customer’s PayPal account information for future payments. You can retrieve the PaymentMethod synchronously using the `success_url` or asynchronously using [webhooks](https://docs.stripe.com/webhooks \"webhook\").\n\nThe decision to retrieve the PaymentMethod synchronously or asynchronously depends on your tolerance for dropoff, as customers might not always reach the `success_url` after a successful payment (for example, it’s possible for them to close their browser tab before the redirect occurs). Using webhooks prevents your integration from experiencing this form of dropoff.\n\nHandle `checkout.session.completed` webhooks, which contain a Session object. To learn more, see [setting up webhooks](https://docs.stripe.com/webhooks). The following example is a `checkout.session.completed` response.\n\n`{   \"id\": \"evt_1Ep24XHssDVaQm2PpwS19Yt0\",   \"object\": \"event\",   \"api_version\": \"2019-03-14\",   \"created\": 1561420781,   \"data\": {     \"object\": {       \"id\": \"cs_test_MlZAaTXUMHjWZ7DcXjusJnDU4MxPalbtL5eYrmS2GKxqscDtpJq8QM0k\",       \"object\": \"checkout.session\",       \"billing_address_collection\": null,       \"cancel_url\": \"[https://example.com/cancel](https://example.com/cancel)\",       \"client_reference_id\": null,       \"customer\": null,       \"customer_email\": null,       \"display_items\": [],       \"mode\": \"setup\",       \"setup_intent\": \"seti_1EzVO3HssDVaQm2PJjXHmLlM\",       \"submit_type\": null,       \"subscription\": null,       \"success_url\": \"[https://example.com/success](https://example.com/success)\"     }   },   \"livemode\": false,   \"pending_webhooks\": 1,   \"request\": {     \"id\": null,     \"idempotency_key\": null   },   \"type\": \"checkout.session.completed\" }`\n\nNote the value of the `setup_intent` key, which is the ID for the SetupIntent created with the Checkout Session. A [SetupIntent](https://docs.stripe.com/payments/setup-intents) is an object used to set up the customer’s PayPal account information for future payments. [Retrieve](https://docs.stripe.com/api/setup_intents/retrieve) the SetupIntent object with the ID.\n\n`curl https://api.stripe.com/v1/setup_intents/seti_1EzVO3HssDVaQm2PJjXHmLlM \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[\n\n## Handle post-setup events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-post-setup-events)\n\nUse a method such as [webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks) to confirm the billing agreement was authorized successfully by your customer, instead of relying on your customer to return to the payment status page. When a customer successfully authorizes the billing agreement, the SetupIntent emits the [setup\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-setup_intent.succeeded) [webhook](https://docs.stripe.com/webhooks \"webhook\") event. If a customer doesn’t successfully authorize the billing agreement, the SetupIntent will emit the [setup\\_intent.setup\\_failed](https://docs.stripe.com/api/events/types#event_types-setup_intent.setup_failed) webhook event and returns to a status of `requires_payment_method`. When a customer revokes the billing agreement from their PayPal account, the [mandate.updated](https://docs.stripe.com/api/events/types#event_types-mandate.updated) is emitted.\n\n[](#testing)\n\nTest your PayPal integration with your [test API keys](https://docs.stripe.com/keys#test-live-modes) by viewing the redirect page. You can test the successful payment case by authenticating the payment on the redirect page. The PaymentIntent will transition from `requires_action` to `succeeded`.\n\nTo test the case where the user fails to authenticate, use your test API keys and view the redirect page. On the redirect page, click **Fail test payment**. The PaymentIntent will transition from `requires_action` to `requires_payment_method`.\n\n[](#charge-later)\n\nWhen you’re ready to charge your customer off-session, use the [Customer](https://docs.stripe.com/api/customers \"Customers\") and [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") IDs to create a [PaymentIntent](https://docs.stripe.com/api/payment_intents).\n\nTo find a `paypal` instrument to charge, [list](https://docs.stripe.com/api/payment_methods/list) the PaymentMethods associated with your Customer.\n\n`curl -G https://api.stripe.com/v1/payment_methods \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer={{CUSTOMER_ID}} \\   -d type=paypal`\n\nWhen you have the Customer and PaymentMethod IDs, create a PaymentIntent with the amount and currency of the payment. Set a few other parameters to make the off-session payment:\n\n*   Set [off\\_session](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-off_session) to `true` to indicate that the customer is not in your checkout flow during this payment attempt. This causes the PaymentIntent to throw an error if authentication is required.\n*   Set the value of the PaymentIntent’s [confirm](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-confirm) property to `true`, which causes confirmation to occur immediately when the PaymentIntent is created.\n*   Set [payment\\_method](https://docs.stripe.com/api#create_payment_intent-payment_method) to the ID of the PaymentMethod and [customer](https://docs.stripe.com/api#create_payment_intent-customer) to the ID of the Customer.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=eur \\  -d customer={{CUSTOMER_ID}} \\   -d \"payment_method_types[]\"=paypal \\  -d payment_method={{PAYMENT_METHOD_ID}} \\   -d off_session=true \\  -d confirm=true`\n\n[](#web-user-initiated-payment-method-cancellation)\n\nA customer can cancel the subscription (Billing Agreement) through their PayPal account. When they do so, Stripe emits a [mandate.updated](https://docs.stripe.com/api/events/types#event_types-mandate.updated) webhook. All subsequent Payment Intents using the saved Payment Method will fail until you change to a Payment Method with active mandates. When payments fail for Subscriptions, the status changes to the Subscription status configured in your [automatic collection settings](https://docs.stripe.com/invoicing/automatic-collection). Notify the customer of failure and [charge them with a different payment method](https://docs.stripe.com/billing/subscriptions/overview#requires-payment-method).",
    "title": "Set up future PayPal payments | Stripe Documentation",
    "description": "Learn how to save PayPal details and charge your customers later.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/setup_intents/confirm_paypal_setup",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/js/embedded_checkout/init",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/payments/cits-and-mits",
    "markdown": "# Customer-Initiated Transactions (CIT) and Merchant-Initiated Transactions (MIT)\n\nThe card networks divide card payments into two types, depending on whether the customer is participating in the payment flow: Customer-Initiated Transactions (CIT) and Merchant-Initiated Transactions (MIT).\n\n#### Note\n\nCard networks assign different characteristics and requirements to transactions, depending on whether they’re customer-initiated or merchant-initiated. For example, a Visa transaction’s authorization validity period varies depending on its type. If you’re using the API, the [payment\\_method\\_details.card.capture\\_before](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-capture_before) attribute on the charge is the most reliable and accurate way to determine your charge’s authorization window.\n\n## Merchant-Initiated Transactions (MIT)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAn MIT is a transaction that you initiate without direct participation of your customer, based on a prior agreement with that customer authorizing you to store and use their credentials. For example, you operate a subscription-based business and your customer has consented to you collecting their future monthly payments using their credit card that you have on file.\n\n### Compliance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you save a customer’s payment information, regardless of the reason, you’re responsible for compliance with all applicable laws, regulations, and network rules. Include terms on your website or app that state how you save payment method details, and require customers to opt in before you save their payment information.\n\nWhen you save a payment method, you can only use it for the specific purposes included in your terms. For example, if you want to automatically charge a saved payment method for future subscription renewals, you must first get explicit consent for that from the customer. You can collect that consent by including a “Save my payment method for automatic renewals” checkbox on the initial payment page.\n\nTo charge customers when they’re offline, include the following in your terms:\n\n*   The customer’s agreement to your initiating a payment or a series of payments on their behalf for specified transactions\n*   The anticipated timing and frequency of payments; for example, whether the charges are for scheduled installments, subscription payments, or unscheduled top-ups\n*   How you determine the payment amount\n*   Your cancellation policy for any subscription services\n\nKeep a record of each customer’s agreement to your terms.\n\n## Customer-Initiated Transactions (CIT)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCITs normally include all other transaction types, including any transaction where the cardholder is available to participate in the payment flow. For example, a customer manually places an order on your website.",
    "title": "Customer-Initiated Transactions (CIT) and Merchant-Initiated Transactions (MIT) | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/tokens/create_token?type=cardElement",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/api/customer_portal/sessions/object?lang=curl",
    "markdown": "# The Customer Portal Session object\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    configurationstringExpandable\n    \n    The configuration used by this session, describing the features available.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   The ID of the customer for this session.\n    \n*   Information about a specific flow for the customer to go through. See the [docs](https://docs.stripe.com/customer-management/portal-deep-links) to learn more about using customer portal deep links and flows.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.\n    \n*   #### \n    \n    on\\_behalf\\_ofnullable stringConnect only\n    \n    The account for which the session was created on behalf of. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://docs.stripe.com/connect/separate-charges-and-transfers#settlement-merchant). Use the [Accounts API](https://docs.stripe.com/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account’s branding settings, which the portal displays.\n    \n*   #### \n    \n    return\\_urlnullable string\n    \n    The URL to redirect customers to when they click on the portal’s link to return to your website.\n    \n*   The short-lived URL of the session that gives customers access to the customer portal.\n    \n\nThe Customer Portal Session object\n\n```\n{  \"id\": \"bps_1MrSjzLkdIwHu7ixex0IvU9b\",  \"object\": \"billing_portal.session\",  \"configuration\": \"bpc_1MAhNDLkdIwHu7ixckACO1Jq\",  \"created\": 1680210639,  \"customer\": \"cus_NciAYcXfLnqBoz\",  \"flow\": null,  \"livemode\": false,  \"locale\": null,  \"on_behalf_of\": null,  \"return_url\": \"https://example.com/account\",  \"url\": \"https://billing.stripe.com/p/session/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OY2lBYjJXcHY4a2NPck96UjBEbFVYRnU5bjlwVUF50100BUtQs3bl\"}\n```\n\n## [Create a portal session](https://docs.stripe.com/api/customer_portal/sessions/create)\n\nCreates a session of the customer portal.\n\n### Parameters\n\n*   The ID of an existing customer.\n    \n*   The ID of an existing [configuration](https://docs.stripe.com/api/customer_portal/configuration) to use for this session, describing its functionality and features. If not specified, the session uses the default configuration.\n    \n*   Information about a specific flow for the customer to go through. See the [docs](https://docs.stripe.com/customer-management/portal-deep-links) to learn more about using customer portal deep links and flows.\n    \n*   The IETF language tag of the locale customer portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.\n    \n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n    The `on_behalf_of` account to use for this session. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://docs.stripe.com/connect/separate-charges-and-transfers#settlement-merchant). Use the [Accounts API](https://docs.stripe.com/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account’s branding settings, which the portal displays.\n    \n*   The default URL to redirect customers to when they click on the portal’s link to return to your website.\n    \n\n### Returns\n\nReturns a portal session object.\n\nPOST /v1/billing\\_portal/sessions\n\n```\ncurl https://api.stripe.com/v1/billing_portal/sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NciAYcXfLnqBoz \\  --data-urlencode return_url=\"https://example.com/account\"\n```\n\n```\n{  \"id\": \"bps_1MrSjzLkdIwHu7ixex0IvU9b\",  \"object\": \"billing_portal.session\",  \"configuration\": \"bpc_1MAhNDLkdIwHu7ixckACO1Jq\",  \"created\": 1680210639,  \"customer\": \"cus_NciAYcXfLnqBoz\",  \"flow\": null,  \"livemode\": false,  \"locale\": null,  \"on_behalf_of\": null,  \"return_url\": \"https://example.com/account\",  \"url\": \"https://billing.stripe.com/p/session/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9OY2lBYjJXcHY4a2NPck96UjBEbFVYRnU5bjlwVUF50100BUtQs3bl\"}\n```\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Customer Portal Session object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/climate/orders/webhooks",
    "markdown": "# Webhooks for Climate Orders API\n\n## Learn about webhook events for products and orders.\n\nStripe uses webhooks to notify your application when an event happens in your account. Set up a [webhook endpoint](https://docs.stripe.com/webhooks/quickstart) to listen for product availability and delivery updates.\n\n## Using product webhook events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### [`climate.product.created`](https://docs.stripe.com/api/events/types#event_types-climate.product.created)\n\nStripe sends this event when Frontier adds a new product to the [carbon removal inventory](https://docs.stripe.com/climate/orders/carbon-removal-inventory). Use this event to keep your application up to date on the latest available products from Frontier.\n\n### [`climate.product.pricing_updated`](https://docs.stripe.com/api/events/types#event_types-climate.product.pricing_updated)\n\nStripe sends this event when the price changes for a product. We’ll notify you by email two weeks in advance, and then send this event when the price changes. Prices never change for confirmed orders. If we update the availability of a product, we’ll only notify you through this event.\n\n## Using order webhook events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou receive an event anytime the status of your order changes.\n\n### [`climate.order.delivered`](https://docs.stripe.com/api/events/types#event_types-climate.order.delivered)\n\nWhen Frontier delivers your order, Stripe sends the [climate.order.delivered](https://docs.stripe.com/api/events/types#event_types-climate.order.delivered) event. This event confirms that Frontier has received carbon removal from the supplier, verified the delivery, and retired the carbon removal units on behalf of you or your designated beneficiary.\n\n### [`climate.order.delayed`](https://docs.stripe.com/api/events/types#event_types-climate.order.delayed)\n\nIf Frontier is unable to fulfill your order by the delivery date, Stripe sends the [climate.order.delayed](https://docs.stripe.com/api/events/types#event_types-climate.order.delayed) event and an email at least 60 days before the end of the delivery year. The event includes the order’s updated `expected_delivery_year`.\n\nYou can decide whether to accept the delay or [cancel the order](https://docs.stripe.com/api/climate/order/cancel) within 30 days to receive a full refund. If you don’t take any action, we’ll attempt to deliver the tons by the updated `expected_delivery_year`.\n\n### [`climate.order.product_substituted`](https://docs.stripe.com/api/events/types#event_types-climate.order.product_substituted)\n\nIf you’re ordering a product from an individual supplier and the supplier fails, Frontier tries to substitute the product with a similar one from another supplier in the Frontier portfolio. Stripe sends the [climate.order.product\\_substituted](https://docs.stripe.com/api/events/types#event_types-climate.order.product_substituted) event along with an email with replacement details at least 60 days before the end of the delivery year. If you don’t want a substitute, you can [cancel the order](https://docs.stripe.com/api/climate/order/cancel) within 30 days and receive a full refund.\n\n### [`climate.order.canceled`](https://docs.stripe.com/api/events/types#event_types-climate.order.canceled)\n\nIf Frontier can’t fulfill your order within 2 years of the original expected delivery date, you receive a full refund. We expect this to be a rare circumstance because we actively manage the portfolio to minimize delivery risk.\n\nFrontier makes cancellation decisions at least 60 days before the order is due. When an order is canceled, Stripe sends an email and the [climate.order.canceled](https://docs.stripe.com/api/events/types#event_types-climate.order.canceled) event.",
    "title": "Webhooks for Climate Orders API | Stripe Documentation",
    "description": "Learn about webhook events for products and orders.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/climate/orders/order-carbon-removal?dashboard-or-api=dashboard",
    "markdown": "# Order carbon removal | Stripe DocumentationThe Stripe Docs logo\n\n[](#create-a-climate-order)\n\nReserve and pay for carbon removal by creating a climate order. You can use the order to track your products through delivery. When you create your order using the **Stripe balance** payment source, we immediately deduct the funds from your Stripe balance.\n\n![The Climate orders dashboard displaying the ability to create an order funded from your Stripe balance](https://b.stripecdn.com/docs-statics-srv/assets/climate_order_from_stripe_balance.de167e2c676c094381bcf1a2408594dd.png)\n\n[](#track-your-climate-orders)\n\nYou have 24 hours to cancel a climate order and receive a refund of the purchase amount, but fees won’t be refunded. You can track the status of your climate orders in the [Dashboard](https://dashboard.stripe.com/climate/orders).",
    "title": "Order carbon removal | Stripe Documentation",
    "description": "Pre-order carbon removal tons from Frontier's offtake portfolio.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/climate/orders/carbon-removal-inventory",
    "markdown": "# Carbon removal inventory | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about available carbon removal inventory.\n\n## Available products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Products](https://docs.stripe.com/api/climate/product \"climate product\") represent the carbon removal inventory available for purchase. All products come from offtake agreements with carbon removal suppliers in [Frontier’s portfolio](https://frontierclimate.com/portfolio?track=offtake).\n\n### Buy the portfolio![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAvoiding the worst impacts of climate change requires a portfolio of technologies. By purchasing the Frontier offtake portfolio, you accelerate the development of a range of carbon removal technologies while simultaneously maximizing the likelihood that your tons are delivered by the expected delivery year.\n\nThe portfolio currently includes Charm, Heirloom, CarbonCapture, and Lithos. Frontier conducts diligence on carbon removal technologies to grow this portfolio as the industry evolves.\n\nA 3% fee is charged when buying the portfolio.\n\n| Product | ID  | Expected delivery year | Price per metric ton |\n| --- | --- | --- | --- |\n| Frontier offtake portfolio | `climsku_frontier_offtake_portfolio_2027` | 2027 | 550 USD |\n\nTo provide users with price certainty, we take on the underlying pricing risk. If the actual price per ton delivered is less than price per ton sold, we’ll use all excess funds to buy more carbon removal. If the actual price per ton delivered is greater than the price per ton sold—for example, if only the more expensive suppliers can deliver—the price doesn’t change for you and the losses are borne by us.\n\nWe aim to fulfill orders from a diverse set of suppliers within Frontier’s offtake portfolio. However, we won’t fractionalize deliveries in quantities less than 1 ton (for example, an order for 4 tons might include deliveries from up to 4 suppliers).\n\n### Buy from individual suppliers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re excited about a particular technology or want to align purchases with company-specific attributes (for example, geography), you can also purchase from individual suppliers.\n\nA 5% fee is charged when ordering from these suppliers.\n\n| Product | ID  | Pathway | Locations | Expected delivery year | Price per metric ton |\n| --- | --- | --- | --- | --- | --- |\n| Lithos 2025 | `climsku_lithos_2025` | Enhanced weathering | San Francisco, CA, US | 2025 | 390 USD |\n| Charm Industrial 2026 | `climsku_charm_industrial_2026` | Biomass carbon removal and storage | San Francisco, CA, US | 2026 | 630 USD |\n| Vaulted 2026 | `climsku_vaulted_2026` | Biomass carbon removal and storage | Houston, TX, US | 2026 | 424 USD |\n| Carbon Capture Inc. 2027 | `climsku_carbon_capture_inc_2027` | Direct air capture | Los Angeles, CA, US | 2027 | 510 USD |\n| Heirloom 2027 | `climsku_heirloom_2027` | Direct air capture | Brisbane, CA, US | 2027 | 990 USD |\n\n## Pricing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOur goal is to bring new buyers into the market, not to make money. We price the products as close to cost as possible.\n\nFees help cover our underlying costs of administering the carbon removal portfolio. Frontier receives these fees for services including, but not limited to, sourcing, performing diligence, negotiating offtake agreements with, monitoring the progress of, and reallocating demand between carbon removal suppliers.",
    "title": "Carbon removal inventory | Stripe Documentation",
    "description": "Learn about available carbon removal inventory.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/sources/giropay",
    "markdown": "# giropay payments with Sources | Stripe DocumentationThe Stripe Docs logo\n\n## Use Sources to accept payments using giropay, a popular payment method in Germany.\n\n#### Warning\n\nWe deprecated the Sources API and plan to remove support for local payment methods. If you currently integrate with giropay using the Sources API, you must [migrate to the Payment Methods API](https://docs.stripe.com/payments/payment-methods/transitioning). We’ll send email communication with more information about this end of support.\n\nFor information about integrating giropay with the current APIs, see [giropay payments](https://docs.stripe.com/payments/giropay).\n\nStripe users in Europe and the United States can accept giropay payments from customers in Germany using [Sources](https://docs.stripe.com/sources).\n\nDuring the payment process, a [Source](https://docs.stripe.com/api#sources) object is created and your customer is redirected to their bank’s website or mobile application to authorize the payment. After completing this, your integration can use the source to make a charge request to complete the payment.\n\ngiropay is a [push](https://docs.stripe.com/sources#pull-or-push-of-funds)\\-based, [single-use](https://docs.stripe.com/sources#single-use-or-reusable) and [synchronous](https://docs.stripe.com/sources#synchronous-or-asynchronous-confirmation) method of payment. This means your customer takes action to send the amount to you through a [redirect](https://docs.stripe.com/sources#flow-for-customer-action) and there is immediate confirmation about the success or failure of a payment.\n\n[\n\n## Create a Source object![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-source)\n\nA `Source` object is either created client-side using [Stripe.js](https://docs.stripe.com/payments/elements) or server-side using the [Source creation endpoint](https://docs.stripe.com/api#create_source), with the following parameters:\n\n| Parameter | Value |\n| --- | --- |\n| `type` | **giropay** |\n| `amount` | A positive integer in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) representing the amount to charge the customer (for example, **1099** for a 10.99 EUR payment). |\n| `currency` | **eur** (giropay must always use Euros) |\n| `owner[name]` | The full name of the account holder. |\n| `redirect[return_url]` | The URL the customer should be redirected to after the authorization process. |\n| `statement_descriptor` (optional) | A custom statement descriptor for the payment. |\n\nTo create a source with [Stripe.js](https://docs.stripe.com/payments/elements), first include the library within your website and set your [publishable API key](https://dashboard.stripe.com/apikeys). Once included, use the following `createSource` method to create a source client-side:\n\n`stripe.createSource({   type: 'giropay',   amount: 1099,   currency: 'eur',   owner: {     name: 'Jenny Rosen',   },   redirect: {     return_url: '__TOKEN_PLACEHOLDER_0__',   }, }).then(function(result) {   // handle result.error or result.source });`\n\nUsing either method, Stripe returns a `Source` object containing the relevant details for the method of payment used. Information specific to giropay is provided within the `giropay` subhash.\n\n`{   \"id\": \"src_16xhynE8WzK49JbAs9M21jaR\",   \"object\": \"source\",   \"amount\": 1099,   \"client_secret\": \"src_client_secret_UfwvW2WHpZ0s3QEn9g5x7waU\",   \"created\": 1445277809,   \"currency\": \"eur\",   \"flow\": \"redirect\",   \"livemode\": true,   \"owner\": {`\n\n### Source creation in mobile applications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re building an iOS or Android app, you can implement sources using our mobile SDKs. Refer to our sources documentation for [iOS](https://docs.stripe.com/mobile/ios/sources) or [Android](https://docs.stripe.com/mobile/android/sources) to learn more.\n\n### Optional: Providing a custom statement descriptor ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\ngiropay requires a [statement descriptor](https://support.stripe.com/questions/when-i-charge-a-customer-what-will-they-see-on-their-card-statements) before the customer is redirected to authenticate the payment. By default, your Stripe account’s statement descriptor is used (you can review this in the [Dashboard](https://dashboard.stripe.com/settings/public)). You can provide a custom descriptor by specifying `statement_descriptor` when creating a source. giropay statement descriptors support a maximum of 35 characters.\n\n`stripe.createSource({   type: 'giropay',   amount: 1099,   currency: 'eur',   statement_descriptor: 'ORDER AT11990',   owner: {     name: 'Jenny Rosen',   },   redirect: {     return_url: '__TOKEN_PLACEHOLDER_0__',   }, }).then(function(result) {   // handle result.error or result.source });`\n\nProviding a custom statement descriptor within a subsequent charge request has no effect.\n\n## Error codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSource creation for giropay payments may return any of the following errors:\n\n| Error | Description |\n| --- | --- |\n| `payment_method_not_available` | The payment method is currently not available. You should invite your customer to fallback to another payment method to proceed. |\n| `processing_error` | An unexpected error occurred preventing us from creating the source. The source creation should be retried. |\n\n[\n\n## Have the customer authorize the payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#customer-action)\n\nWhen creating a source, its status is initially set to `pending` and cannot yet be used to make a charge request. Your customer must authorize a giropay payment to make the source chargeable. To allow your customer to authorize the payment, redirect them to the URL provided within the`redirect[url]` attribute of the `Source` object.\n\nAfter the authorization process, your customer is redirected back to the URL provided as a value of `redirect[return_url]`. This happens regardless of whether authorization was successful or not. If the customer has authorized the payment, the `Source` object’s status is updated to `chargeable` and it is ready to use in a charge request. If your customer declines the payment, the status transitions to `failed`.\n\nStripe populates the `redirect[return_url]` with the following GET parameters when returning your customer to your website:\n\n*   `source`: a string representing the original ID of the `Source` object\n*   `livemode`: indicates if this is a live payment, either `true` or `false`\n*   `client_secret`: used to confirm that the returning customer is the same one who triggered the creation of the source (source IDs are not considered secret)\n\nYou may include any other GET parameters you may need when specifying `redirect[return_url]`. Do not use the above as parameter names yourself as these would be overridden by the values we populate.\n\n### Mobile applications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo integrate giropay within a mobile application, provide your application URI scheme as the `redirect[return_url]` value. By doing so, your customers are returned to your app after completing authorization. Refer to our Sources documentation for [iOS](https://docs.stripe.com/mobile/ios/sources) or [Android](https://docs.stripe.com/mobile/android/sources) to learn more.\n\n### Testing the redirect process![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a `Source` object using your test API keys, you can follow the URL returned in the `redirect[url]` field. This leads to a Stripe page that displays information about the API request, and where you can either authorize or cancel the payment. Authorizing the payment redirects you to the URL specified in `redirect[return_url]`.\n\nAlternatively, to accelerate testing, use the following value for `owner[email]`, where `xxx_` is any prefix of your choice (these patterns are significant only in testmode):\n\n| Email Address | Effect |\n| --- | --- |\n| `xxx_chargeable@example.com` | The source will be created as `pending`, but automatically transition to `chargeable` within seconds of its creation. |\n\n[\n\n## Charge the Source![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#charge-request)\n\nOnce the customer has authenticated the payment, the source’s `status` transitions to `chargeable` and it can be used to make a charge request. This transition happens asynchronously and may occur after the customer was redirected back to your website.\n\nSome customers using giropay assume that the order process is complete once they have authenticated the payment and received confirmation from their bank. This results in customers who close their browser instead of following the redirect and returning to your app or website.\n\nFor these reasons it is essential that your integration rely on [webhooks](https://docs.stripe.com/webhooks \"webhook\") to determine when the source becomes chargeable in order to create a charge. Please refer to our [best practices](https://docs.stripe.com/sources/best-practices) for more details on how to best integrate payment methods using webhooks.\n\n### Webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following webhook events are sent to notify you about changes to the source’s status:\n\n| Event | Description |\n| --- | --- |\n| `source.chargeable` | A `Source` object becomes `chargeable` after a customer has authenticated and verified a payment. |\n| `source.failed` | A `Source` object failed to become chargeable as your customer declined to authenticate the payment. |\n| `source.canceled` | A `Source` object expired and cannot be used to create a charge. |\n\n### Make a charge request using the source![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOnce the source is chargeable, from your `source.chargeable` webhook handler, you can make a charge request using the source ID as the value for the `source` parameter to complete the payment.\n\n`curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d amount=\"1099\" \\   -d currency=\"eur\" \\   -d source=src_18eYalAHEMiOZZp1l9ZTjSU0`\n\ngiropay Sources are [single-use](https://docs.stripe.com/sources#single-use-or-reusable) and cannot be used for recurring or additional payments. Refer to our [Sources & Customers](https://docs.stripe.com/sources/customers) guide for more information on how single-use Sources interact with [Customers](https://docs.stripe.com/api/customers \"Customers\").\n\n[\n\n## Confirm that the charge has succeeded![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#charge-confirmation)\n\nSince giropay is a [synchronous](https://docs.stripe.com/sources#synchronous-or-asynchronous-confirmation) payment method and the customer has already authenticated the payment as part of the redirect, unless there is an unexpected error, the [Charge](https://docs.stripe.com/api#charge_object) will immediately succeed.\n\nYou will also receive the following webhook event as the charge is created:\n\n| Event | Description |\n| --- | --- |\n| `charge.succeeded` | The charge succeeded and the payment is complete. |\n\nWe recommend that you rely on the `charge.succeeded` webhook event to notify your customer that the payment process has been completed and their order is confirmed. Please refer to our [best practices](https://docs.stripe.com/sources/best-practices) for more details on how to best integrate payment methods using webhooks.\n\n### Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe risk of fraud or unrecognized payments is much lower as the customer must authenticate the payment with their bank. As such, there is no dispute process that can result in a chargeback and funds withdrawn from your Stripe account. Should a customer dispute a payment to their bank, it is handled internally—no dispute information is presented in the Dashboard.\n\n### Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayments made with giropay can only be submitted for refund within 180 days from the date of the original charge. After 180 days, it is no longer possible to refund the charge.\n\n### Source expiration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA source must be used within six hours of becoming `chargeable`. If it is not, its status is automatically transitioned to `canceled` and your integration receives a `source.canceled` webhook event. Additionally, `pending` sources are canceled after one hour if they are not used to authenticate a payment.\n\nOnce a source is canceled, the customer’s authenticated payment is refunded automatically—no money is moved into your account. For this reason, make sure the order is canceled on your end and the customer is notified once you receive the `source.canceled` event.",
    "title": "giropay payments with Sources | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/receipts?payment-ui=checkout",
    "markdown": "# Email receipts and paid invoices\n\n## Send payment or refund receipts automatically.\n\nWith [Checkout](https://docs.stripe.com/payments/checkout \"Stripe Checkout\"), you can manually or automatically send customized email receipts or [paid invoices](#paid-invoices).\n\n## Receipt features ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nEach receipt contains a link to view it in a browser, and a unique [receipt number](https://docs.stripe.com/api#charge_object-receipt_number) that’s useful when looking up payment information.\n\nYou can also access the link to view the receipt in a browser through the API in the [PaymentIntent’s](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") related [Charge](https://docs.stripe.com/api/charges/object#charge_object-receipt_url) object. When you visit the link, the receipt always shows the latest status of that charge–if it has been refunded, the receipt accurately reflects it.\n\nAs a security measure, receipt links expire within 30 days. Expired receipt links require the customer to provide the original email address to resend the receipt to that address.\n\n## Automatically send receipts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo enable automated receipts, toggle **Successful payments** on in your [Customer emails settings](https://dashboard.stripe.com/settings/emails). Receipts are only sent when a successful payment has been made—no receipt is sent if the payment fails or is declined.\n\n## Manually send receipts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo send receipts in the [Dashboard](https://dashboard.stripe.com/payments), click **Send receipt** within the **Receipt history** section of a Payment details page. You can also hover over a payment within the **Payments** section of a customer’s page and click the **Send receipt** icon. To resend an email receipt, input a different email address, or specify a comma-separated list of addresses to send it to several recipients. A record of the last 10 receipts is visible on the payment’s page.\n\n## Customize receipts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAlter the appearance and functionality of your receipts with the following customization options:\n\n*   **Language**: Select the language for your receipts in your [Customer emails settings](https://dashboard.stripe.com/settings/emails).\n*   **Branding**: Modify the logo and colors in your [Branding settings](https://dashboard.stripe.com/settings/branding). The upper limit for a custom logo image file size is 512KB. Ideally, the logo should be a square image exceeding 128 x 128 pixels. JPG, PNG, and GIF file types are supported.\n*   **Public information**: Specify the public information you want to include, such as your contact number or website address, in your [Public details settings](https://dashboard.stripe.com/settings/public).\n\nTo display custom text, use the [description](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-description) attribute on the PaymentIntent. Some examples include:\n\n*   Description of goods or services provided.\n*   Authorization code.\n*   Subscription information.\n*   Cancellation policies.\n\nYou can see a real-time preview of your email receipt on your Dashboard Branding settings page. To send a test receipt, hover over the preview image and click **Send test receipt**, then enter your email address.\n\n#### Caution\n\nReceipts pull data from the `Charge` object generated when the PaymentIntent is confirmed. To update receipt data such as the `description` after the charge is generated, you must [update the Charge](https://docs.stripe.com/api/charges/update). Changes to a confirmed PaymentIntent don’t appear on receipts.\n\n## Refund receipts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen a payment is refunded, Stripe can automatically send a receipt to the same email address provided in the original charge. You can also use the Dashboard to manually send a copy of the refund receipt. To enable automated refund receipts, toggle **Refunds** on in your [Customer emails settings](https://dashboard.stripe.com/settings/emails).\n\n## Invoice and subscription payment receipts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe creates a receipt when a customer pays an [invoice](https://docs.stripe.com/api/invoices \"invoices\") or makes any [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") payment. Receipts for subscription and invoice payments are itemized to include line items, discounts, and taxes. After payment, the [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page) includes a link to a receipt that the customer can download for their own records.\n\n## Stripe Connect receipts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nReceipt settings depend on the charge and account type:\n\n*   [Destination charges](https://docs.stripe.com/connect/destination-charges) and [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers): Receipts use the platform account’s **Customer emails**, **Branding**, and **Public details** settings.\n    \n*   [Direct charges](https://docs.stripe.com/connect/direct-charges): Receipts use the connected account’s **Customer emails**, **Branding**, and **Public details** settings.\n    \n\nPlatform accounts can send a receipt for a connected account by passing `receipt_email` when making a charge request.\n\nFor connected accounts that use the Stripe Dashboard (which includes Standard connected accounts), you can configure receipt settings under [Branding](https://dashboard.stripe.com/settings/branding). For connected accounts that don’t use the Dashboard (which includes Express and Custom connected accounts), the platform configures receipt settings through [settings.branding](https://docs.stripe.com/api/accounts/update#update_account-settings-branding).\n\n## Automatically send paid invoices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn addition to ordinary receipts, Checkout can generate paid invoices as proof of payment. Invoices have more information than receipts. For subscriptions, Stripe generates invoices automatically, but for one-time payments, you need to enable them.\n\n#### Note\n\nInvoice creation for one-time payments in Checkout is not an [Invoicing](https://stripe.com/invoicing) feature, and is priced separately. Review [this support article](https://support.stripe.com/questions/pricing-for-post-payment-invoices-for-one-time-purchases-via-checkout-and-payment-links) to learn more.\n\nTo generate invoices, first, in your [Customer emails settings](https://dashboard.stripe.com/settings/emails), under **Email customers about**, select **Successful payments**. Then, when creating a Checkout session, set [invoice\\_creation\\[enabled\\]](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-invoice_creation-enabled) to `true`.\n\n#### Note\n\nEnabling `invoice_creation` isn’t supported if you set `payment_intent_data[capture_method]` to `manual`.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d mode=payment \\  -d \"invoice_creation[enabled]\"=true \\  -d \"line_items[0][price]\"={{ONE_TIME_PRICE_ID}} \\   -d \"line_items[0][quantity]\"=1 \\   --data-urlencode success_url=\"https://example.com\" \\   --data-urlencode cancel_url=\"https://example.com\"`\n\nAfter the payment completes, Stripe sends an invoice summary with links to download the invoice PDF and invoice receipt to the email address your customer provides during checkout.\n\n#### Caution\n\nInvoices for delayed notification payment methods such as [Bacs Direct Debit](https://docs.stripe.com/payments/bacs-debit/accept-a-payment), [Bank transfers](https://docs.stripe.com/payments/bank-transfers/accept-a-payment), [Boleto](https://docs.stripe.com/payments/boleto/accept-a-payment), [Canadian pre-authorized debits](https://docs.stripe.com/payments/acss-debit/accept-a-payment), [Konbini](https://docs.stripe.com/payments/konbini/accept-a-payment), [OXXO](https://docs.stripe.com/payments/oxxo/accept-a-payment), [Pay by Bank](https://docs.stripe.com/payments/pay-by-bank/accept-a-payment), [SEPA Direct Debit](https://docs.stripe.com/payments/sepa-debit/accept-a-payment), [SOFORT](https://docs.stripe.com/payments/sofort/accept-a-payment), or [ACH Direct Debit](https://docs.stripe.com/payments/ach-debit/accept-a-payment) might take longer to send because we send the invoice after successful payment, not upon checkout session completion.\n\n![Screenshot of the invoice PDF that customers can download from the invoice summary email](https://b.stripecdn.com/docs-statics-srv/assets/invoice.9e44668032383601eeec362f38293b7a.png)\n\nThe downloadable invoice PDF\n\n![Screenshot of the invoice receipt that customers can download from the invoice summary email](https://b.stripecdn.com/docs-statics-srv/assets/invoice_receipt.4f120ee7363f8e7728fa553a8a24aae3.png)\n\nThe downloadable invoice receipt\n\n![Screenshot of the invoice summary email Stripe sends](https://b.stripecdn.com/docs-statics-srv/assets/email.560c2666905531b907f7fcd4f1a0a6dd.png)\n\nThe customer email with links to the invoice PDF and receipt\n\nYou can also view the invoice in the [Dashboard](https://dashboard.stripe.com/invoices) or access it programmatically by listening to the [`invoice.paid`](https://docs.stripe.com/api/events/types#event_types-invoice.paid) webhook event.\n\nYou can use the `invoice_data` hash inside `invoice_creation` to further customize the invoice generated by the Checkout Session.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d mode=payment \\  -d \"invoice_creation[enabled]\"=true \\  -d \"invoice_creation[invoice_data][description]\"=\"Invoice for Product X\" \\  -d \"invoice_creation[invoice_data][metadata][order]\"=order-xyz \\  -d \"invoice_creation[invoice_data][account_tax_ids][0]\"=DE123456789 \\  -d \"invoice_creation[invoice_data][custom_fields][0][name]\"=\"Purchase Order\" \\  -d \"invoice_creation[invoice_data][custom_fields][0][value]\"=PO-XYZ \\  -d \"invoice_creation[invoice_data][rendering_options][amount_tax_display]\"=include_inclusive_tax \\  -d \"invoice_creation[invoice_data][footer]\"=\"B2B Inc.\" \\  -d \"line_items[0][price]\"={{ONE_TIME_PRICE_ID}} \\   -d \"line_items[0][quantity]\"=1 \\   --data-urlencode success_url=\"https://example.com\" \\   --data-urlencode cancel_url=\"https://example.com\"`\n\nReview [invoice best practices](https://docs.stripe.com/invoicing/global-invoicing) for your region to make sure you’re collecting the right information from your customers. Information like the customer’s billing and shipping addresses, phone number and tax ID appear on the resulting invoice.",
    "title": "Email receipts and paid invoices | Stripe Documentation",
    "description": "Send payment or refund receipts automatically.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/during-payment/charge-shipping?payment-ui=checkout",
    "markdown": "# Charge for shipping | Stripe DocumentationThe Stripe Docs logo\n\n## Create different shipping rates for your customers.\n\nShipping rates let you display various shipping options—like standard, express, and overnight—with more accurate delivery estimates. Charge your customer for shipping using different Stripe products, some of which require coding. Before you create a shipping rate, learn how to [collect billing and shipping addresses](https://docs.stripe.com/payments/collect-addresses).\n\n#### Third-party plugins\n\nIf you’re using a third-party application with Stripe (for example, [Thrivecart](https://support.thrivecart.com/help/setting-your-physical-fulfilment-shipping-options/) or [Shopify](https://help.shopify.com/en/manual/shipping/setting-up-and-managing-your-shipping/setting-up-shipping-rates)) and want to adjust the shipping rate, visit the docs for that service.\n\nTo add a [shipping rate](https://dashboard.stripe.com/test/shipping-rates) using the Dashboard:\n\n1.  Click **Create shipping rate**.\n2.  Enter an amount, a description, and an optional delivery estimate.\n3.  Click **Save**, and copy the shipping rate ID (`shr_123456`).\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/create-shipping-rate-dashboard.ddd79821d5edee523d7da9d22682be59.png)\n\nEnter your shipping rate details\n\n## Create a Checkout session ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo create a Checkout session that includes your shipping rate, pass in the generated shipping rate ID to the [shipping\\_options](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-shipping_options) parameter. If you want to create the shipping rate at the same time as a Checkout session, use the `shipping_rate_data` parameter with `shipping_options`. Only Checkout sessions in [payment mode](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-mode) support shipping options.\n\nThe following code sample adds two shipping options to the Checkout session:\n\n*   Free shipping, with an estimated delivery of 5-7 business days.\n*   Next day air, at a cost of 15.00 USD, with an estimated delivery of exactly 1 business day.\n\nIn this example, the first option in the `shipping_options` array is pre-selected for the customer on the checkout page. However, customers can choose either option.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"shipping_address_collection[allowed_countries][0]\"=US \\  -d \"shipping_address_collection[allowed_countries][1]\"=CA \\  -d \"shipping_options[0][shipping_rate_data][type]\"=fixed_amount \\  -d \"shipping_options[0][shipping_rate_data][fixed_amount][amount]\"=0 \\  -d \"shipping_options[0][shipping_rate_data][fixed_amount][currency]\"=usd \\  -d \"shipping_options[0][shipping_rate_data][display_name]\"=\"Free shipping\" \\  -d \"shipping_options[0][shipping_rate_data][delivery_estimate][minimum][unit]\"=business_day \\  -d \"shipping_options[0][shipping_rate_data][delivery_estimate][minimum][value]\"=5 \\  -d \"shipping_options[0][shipping_rate_data][delivery_estimate][maximum][unit]\"=business_day \\  -d \"shipping_options[0][shipping_rate_data][delivery_estimate][maximum][value]\"=7 \\  -d \"shipping_options[1][shipping_rate_data][type]\"=fixed_amount \\  -d \"shipping_options[1][shipping_rate_data][fixed_amount][amount]\"=1500 \\  -d \"shipping_options[1][shipping_rate_data][fixed_amount][currency]\"=usd \\  -d \"shipping_options[1][shipping_rate_data][display_name]\"=\"Next day air\" \\  -d \"shipping_options[1][shipping_rate_data][delivery_estimate][minimum][unit]\"=business_day \\  -d \"shipping_options[1][shipping_rate_data][delivery_estimate][minimum][value]\"=1 \\  -d \"shipping_options[1][shipping_rate_data][delivery_estimate][maximum][unit]\"=business_day \\  -d \"shipping_options[1][shipping_rate_data][delivery_estimate][maximum][value]\"=1 \\  -d \"line_items[0][price_data][currency]\"=usd \\  -d \"line_items[0][price_data][product_data][name]\"=T-shirt \\  -d \"line_items[0][price_data][unit_amount]\"=2000 \\  -d \"line_items[0][quantity]\"=1 \\  -d mode=payment \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\nIf successful, the shipping selector appears on your checkout page:\n\n![The shipping selector on the checkout page](https://b.stripecdn.com/docs-statics-srv/assets/example-checkout-session.5807984bdc0a25ddb53aab00768dd079.jpg)\n\nThe shipping selector on the checkout page",
    "title": "Charge for shipping | Stripe Documentation",
    "description": "This guide covers setting shipping rates for Stripe Payment Links, Checkout, and Elements.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/issuing/authorization/respond",
    "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
    "title": "Page not found | Stripe Documentation",
    "description": "Sorry, but the page you were looking for couldn't be found.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/js/payment_intents/handle_card_action",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/api/invoiceitems",
    "markdown": "# Invoice Items | Stripe API Reference\n\n## [The Invoice Item object](https://docs.stripe.com/api/invoiceitems/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`.\n    \n\n*   The ID of the customer who will be billed when this invoice item is billed.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n\n*   The price of the invoice item.\n    \n*   Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.\n    \n\n### More attributes\n\n*   #### \n    \n    discountsnullable array of stringsExpandable\n    \n*   #### \n    \n    invoicenullable stringExpandable\n    \n\n*   #### \n    \n    subscriptionnullable stringExpandable\n    \n*   #### \n    \n    subscription\\_itemnullable string\n    \n*   #### \n    \n    tax\\_ratesnullable array of objects\n    \n*   #### \n    \n    test\\_clocknullable stringExpandable\n    \n*   #### \n    \n    unit\\_amountnullable integer\n    \n*   #### \n    \n    unit\\_amount\\_decimalnullable decimal string\n    \n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"amount\": 1099,  \"currency\": \"usd\",  \"customer\": \"cus_NeZei8imSbMVvi\",  \"date\": 1680640231,  \"description\": \"T-shirt\",  \"discountable\": true,  \"discounts\": [],  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1680640231,    \"start\": 1680640231  },  \"plan\": null,  \"price\": {    \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680640229,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NeZe7xbBdJT8EN\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1099,    \"unit_amount_decimal\": \"1099\"  },  \"proration\": false,  \"quantity\": 1,  \"subscription\": null,  \"tax_rates\": [],  \"test_clock\": null,  \"unit_amount\": 1099,  \"unit_amount_decimal\": \"1099\"}\n```\n\n## [Create an invoice item](https://docs.stripe.com/api/invoiceitems/create)\n\nCreates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.\n\n### Parameters\n\n*   The ID of the customer who will be billed when this invoice item is billed.\n    \n*   The integer amount in cents of the charge to be applied to the upcoming invoice. Passing in a negative `amount` will reduce the `amount_due` on the invoice.\n    \n\n*   An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n*   The ID of the price object. One of `price` or `price_data` is required.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n*   #### \n    \n    unit\\_amount\\_decimalstring\n    \n\n### Returns\n\nThe created invoice item object is returned if successful. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/invoiceitems \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_NeZei8imSbMVvi \\  -d price=price_1MtGUsLkdIwHu7ix1be5Ljaj\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"amount\": 1099,  \"currency\": \"usd\",  \"customer\": \"cus_NeZei8imSbMVvi\",  \"date\": 1680640231,  \"description\": \"T-shirt\",  \"discountable\": true,  \"discounts\": [],  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1680640231,    \"start\": 1680640231  },  \"plan\": null,  \"price\": {    \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680640229,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NeZe7xbBdJT8EN\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1099,    \"unit_amount_decimal\": \"1099\"  },  \"proration\": false,  \"quantity\": 1,  \"subscription\": null,  \"tax_rates\": [],  \"test_clock\": null,  \"unit_amount\": 1099,  \"unit_amount_decimal\": \"1099\"}\n```\n\n## [Update an invoice item](https://docs.stripe.com/api/invoiceitems/update)\n\nUpdates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.\n\n### Parameters\n\n*   The integer amount in cents of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer’s account, pass a negative amount.\n    \n*   An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n*   The ID of the price object. One of `price` or `price_data` is required.\n    \n\n### More parameters\n\n*   #### \n    \n    discountsarray of objects\n    \n\n*   #### \n    \n    tax\\_ratesarray of strings\n    \n\n*   #### \n    \n    unit\\_amount\\_decimalstring\n    \n\n### Returns\n\nThe updated invoice item object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/invoiceitems/:id\n\n```\ncurl https://api.stripe.com/v1/invoiceitems/ii_1MtGUtLkdIwHu7ixBYwjAM00 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"amount\": 1099,  \"currency\": \"usd\",  \"customer\": \"cus_NeZei8imSbMVvi\",  \"date\": 1680640231,  \"description\": \"T-shirt\",  \"discountable\": true,  \"discounts\": [],  \"invoice\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"period\": {    \"end\": 1680640231,    \"start\": 1680640231  },  \"plan\": null,  \"price\": {    \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680640229,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NeZe7xbBdJT8EN\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1099,    \"unit_amount_decimal\": \"1099\"  },  \"proration\": false,  \"quantity\": 1,  \"subscription\": null,  \"tax_rates\": [],  \"test_clock\": null,  \"unit_amount\": 1099,  \"unit_amount_decimal\": \"1099\"}\n```\n\n## [Retrieve an invoice item](https://docs.stripe.com/api/invoiceitems/retrieve)\n\nRetrieves the invoice item with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an invoice item if a valid invoice item ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/invoiceitems/ii_1MtGUtLkdIwHu7ixBYwjAM00 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ii_1MtGUtLkdIwHu7ixBYwjAM00\",  \"object\": \"invoiceitem\",  \"amount\": 1099,  \"currency\": \"usd\",  \"customer\": \"cus_NeZei8imSbMVvi\",  \"date\": 1680640231,  \"description\": \"T-shirt\",  \"discountable\": true,  \"discounts\": [],  \"invoice\": null,  \"livemode\": false,  \"metadata\": {},  \"period\": {    \"end\": 1680640231,    \"start\": 1680640231  },  \"plan\": null,  \"price\": {    \"id\": \"price_1MtGUsLkdIwHu7ix1be5Ljaj\",    \"object\": \"price\",    \"active\": true,    \"billing_scheme\": \"per_unit\",    \"created\": 1680640229,    \"currency\": \"usd\",    \"custom_unit_amount\": null,    \"livemode\": false,    \"lookup_key\": null,    \"metadata\": {},    \"nickname\": null,    \"product\": \"prod_NeZe7xbBdJT8EN\",    \"recurring\": null,    \"tax_behavior\": \"unspecified\",    \"tiers_mode\": null,    \"transform_quantity\": null,    \"type\": \"one_time\",    \"unit_amount\": 1099,    \"unit_amount_decimal\": \"1099\"  },  \"proration\": false,  \"quantity\": 1,  \"subscription\": null,  \"tax_rates\": [],  \"test_clock\": null,  \"unit_amount\": 1099,  \"unit_amount_decimal\": \"1099\"}\n```",
    "title": "Invoice Items | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/collect-addresses",
    "markdown": "# Collect physical addresses and phone numbers\n\nYou can collect addresses and phone numbers with payment links by adding those fields to the checkout session.\n\n### Collect an address![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo collect addresses from your customers:\n\n1.  [Create](https://dashboard.stripe.com/payment-links/create) or edit a payment link.\n    \n    To edit a payment link go to its details page and click the overflow menu ().\n    \n2.  Select **Collect customers’ addresses** in the **Options** section.\n    \n3.  You can collect **Billing addresses only** or you can collect **Billing and shipping addresses**. Choosing either makes these fields required for customers.\n    \n4.  If you collect shipping addresses:\n    \n    *   You need to select the countries you ship to. These countries appear in the **Country** dropdown in the **Shipping Address form** in the checkout session.\n    *   You can optionally add shipping rates. Learn how to [create shipping rates in the Dashboard](https://docs.stripe.com/payments/during-payment/charge-shipping?payment-ui=payment-links).\n\n### Collect a phone number![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you need to collect phone numbers to complete the transaction:\n\n1.  [Create](https://dashboard.stripe.com/payment-links/create) or edit a payment link.\n2.  Select **Require customers to provide a phone number**.",
    "title": "Collect physical addresses and phone numbers | Stripe Documentation",
    "description": "Collect physical addresses and phone numbers from your customers with Stripe's Payment Links, Checkout, or Elements integrations.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payment_methods/object",
    "markdown": "# The PaymentMethod object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.\n    \n*   #### \n    \n    customernullable stringExpandable\n    \n    The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `acss_debit`<br><br>[Pre-authorized debit payments](https://docs.stripe.com/payments/acss-debit) are used to debit Canadian bank accounts through the Automated Clearing Settlement System (ACSS). |\n    | `affirm`<br><br>[Affirm](https://docs.stripe.com/payments/affirm) is a buy now, pay later payment method in the US. |\n    | `afterpay_clearpay`<br><br>[Afterpay / Clearpay](https://docs.stripe.com/payments/afterpay-clearpay) is a buy now, pay later payment method used in Australia, Canada, France, New Zealand, Spain, the UK, and the US. |\n    | `alipay`<br><br>[Alipay](https://docs.stripe.com/payments/alipay) is a digital wallet payment method used in China. |\n    | `amazon_pay`<br><br>[Amazon Pay](https://docs.stripe.com/payments/amazon-pay) is a Wallet payment method that lets hundreds of millions of Amazon customers pay their way, every day. |\n    | `au_becs_debit`<br><br>[BECS Direct Debit](https://docs.stripe.com/payments/au-becs-debit) is used to debit Australian bank accounts through the Bulk Electronic Clearing System (BECS). |\n    | `bacs_debit`<br><br>[Bacs Direct Debit](https://docs.stripe.com/payments/payment-methods/bacs-debit) is used to debit UK bank accounts. |\n    | `bancontact`<br><br>[Bancontact](https://docs.stripe.com/payments/bancontact) is a bank redirect payment method used in Belgium. |\n    | `blik`<br><br>[BLIK](https://docs.stripe.com/payments/blik) is a single-use payment method common in Poland. |\n    | `boleto`<br><br>[Boleto](https://docs.stripe.com/payments/boleto) is a voucher-based payment method used in Brazil. |\n    | Show 68 more |\n    \n\n### More attributes\n\n*   #### \n    \n    acss\\_debitnullable object\n    \n\n*   #### \n    \n    afterpay\\_clearpaynullable object\n    \n\n*   #### \n    \n    allow\\_redisplaynullable enum\n    \n*   #### \n    \n    amazon\\_paynullable object\n    \n*   #### \n    \n    au\\_becs\\_debitnullable object\n    \n*   #### \n    \n    bacs\\_debitnullable object\n    \n*   #### \n    \n    bancontactnullable object\n    \n\n*   #### \n    \n    card\\_presentnullable object\n    \n\n*   #### \n    \n    customer\\_balancenullable object\n    \n\n*   #### \n    \n    interac\\_presentnullable objectPreview feature\n    \n\n*   #### \n    \n    multibanconullable object\n    \n\n*   #### \n    \n    radar\\_optionsnullable object\n    \n*   #### \n    \n    revolut\\_paynullable object\n    \n*   #### \n    \n    sepa\\_debitnullable object\n    \n\n*   #### \n    \n    us\\_bank\\_accountnullable object\n    \n*   #### \n    \n    wechat\\_paynullable object\n    \n\n```\n{  \"id\": \"pm_1MqLiJLkdIwHu7ixUEgbFdYF\",  \"object\": \"payment_method\",  \"billing_details\": {    \"address\": {      \"city\": null,      \"country\": null,      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": null    },    \"email\": null,    \"name\": null,    \"phone\": null  },  \"card\": {    \"brand\": \"visa\",    \"checks\": {      \"address_line1_check\": null,      \"address_postal_code_check\": null,      \"cvc_check\": \"unchecked\"    },    \"country\": \"US\",    \"exp_month\": 8,    \"exp_year\": 2026,    \"fingerprint\": \"mToisGZ01V71BCos\",    \"funding\": \"credit\",    \"generated_from\": null,    \"last4\": \"4242\",    \"networks\": {      \"available\": [        \"visa\"      ],      \"preferred\": null    },    \"three_d_secure_usage\": {      \"supported\": true    },    \"wallet\": null  },  \"created\": 1679945299,  \"customer\": null,  \"livemode\": false,  \"metadata\": {},  \"type\": \"card\"}\n```\n\n## [Create a PaymentMethod](https://docs.stripe.com/api/payment_methods/create)\n\nCreates a PaymentMethod object. Read the [Stripe.js reference](https://docs.stripe.com/stripe-js/reference#stripe-create-payment-method) to learn how to create PaymentMethods via Stripe.js.\n\nInstead of creating a PaymentMethod directly, we recommend using the [PaymentIntents](https://docs.stripe.com/payments/accept-a-payment) API to accept a payment immediately or the [SetupIntent](https://docs.stripe.com/payments/save-and-reuse) API to collect payment method details ahead of a future payment.\n\n### Parameters\n\n*   The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `acss_debit`<br><br>[Pre-authorized debit payments](https://docs.stripe.com/payments/acss-debit) are used to debit Canadian bank accounts through the Automated Clearing Settlement System (ACSS). |\n    | `affirm`<br><br>[Affirm](https://docs.stripe.com/payments/affirm) is a buy now, pay later payment method in the US. |\n    | `afterpay_clearpay`<br><br>[Afterpay / Clearpay](https://docs.stripe.com/payments/afterpay-clearpay) is a buy now, pay later payment method used in Australia, Canada, France, New Zealand, Spain, the UK, and the US. |\n    | `alipay`<br><br>[Alipay](https://docs.stripe.com/payments/alipay) is a digital wallet payment method used in China. |\n    | `amazon_pay`<br><br>[Amazon Pay](https://docs.stripe.com/payments/amazon-pay) is a Wallet payment method that lets hundreds of millions of Amazon customers pay their way, every day. |\n    | `au_becs_debit`<br><br>[BECS Direct Debit](https://docs.stripe.com/payments/au-becs-debit) is used to debit Australian bank accounts through the Bulk Electronic Clearing System (BECS). |\n    | `bacs_debit`<br><br>[Bacs Direct Debit](https://docs.stripe.com/payments/payment-methods/bacs-debit) is used to debit UK bank accounts. |\n    | `bancontact`<br><br>[Bancontact](https://docs.stripe.com/payments/bancontact) is a bank redirect payment method used in Belgium. |\n    | `blik`<br><br>[BLIK](https://docs.stripe.com/payments/blik) is a single-use payment method common in Poland. |\n    | `boleto`<br><br>[Boleto](https://docs.stripe.com/payments/boleto) is a voucher-based payment method used in Brazil. |\n    | Show 67 more |\n    \n*   Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    interac\\_presentobjectPreview feature\n    \n\n### Returns\n\nReturns a PaymentMethod object.\n\n```\ncurl https://api.stripe.com/v1/payment_methods \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=card \\  -d \"card[number]\"=4242424242424242 \\  -d \"card[exp_month]\"=8 \\  -d \"card[exp_year]\"=2026 \\  -d \"card[cvc]\"=314\n```\n\n```\n{  \"id\": \"pm_1MqLiJLkdIwHu7ixUEgbFdYF\",  \"object\": \"payment_method\",  \"billing_details\": {    \"address\": {      \"city\": null,      \"country\": null,      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": null    },    \"email\": null,    \"name\": null,    \"phone\": null  },  \"card\": {    \"brand\": \"visa\",    \"checks\": {      \"address_line1_check\": null,      \"address_postal_code_check\": null,      \"cvc_check\": \"unchecked\"    },    \"country\": \"US\",    \"exp_month\": 8,    \"exp_year\": 2026,    \"fingerprint\": \"mToisGZ01V71BCos\",    \"funding\": \"credit\",    \"generated_from\": null,    \"last4\": \"4242\",    \"networks\": {      \"available\": [        \"visa\"      ],      \"preferred\": null    },    \"three_d_secure_usage\": {      \"supported\": true    },    \"wallet\": null  },  \"created\": 1679945299,  \"customer\": null,  \"livemode\": false,  \"metadata\": {},  \"type\": \"card\"}\n```\n\n## [Update a PaymentMethod](https://docs.stripe.com/api/payment_methods/update)\n\nUpdates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.\n\n### Parameters\n\n*   Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns a PaymentMethod object.\n\nPOST /v1/payment\\_methods/:id\n\n```\ncurl https://api.stripe.com/v1/payment_methods/pm_1MqLiJLkdIwHu7ixUEgbFdYF \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"pm_1MqLiJLkdIwHu7ixUEgbFdYF\",  \"object\": \"payment_method\",  \"billing_details\": {    \"address\": {      \"city\": null,      \"country\": null,      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": null    },    \"email\": null,    \"name\": null,    \"phone\": null  },  \"card\": {    \"brand\": \"visa\",    \"checks\": {      \"address_line1_check\": null,      \"address_postal_code_check\": null,      \"cvc_check\": \"unchecked\"    },    \"country\": \"US\",    \"exp_month\": 8,    \"exp_year\": 2026,    \"fingerprint\": \"mToisGZ01V71BCos\",    \"funding\": \"credit\",    \"generated_from\": null,    \"last4\": \"4242\",    \"networks\": {      \"available\": [        \"visa\"      ],      \"preferred\": null    },    \"three_d_secure_usage\": {      \"supported\": true    },    \"wallet\": null  },  \"created\": 1679945299,  \"customer\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"type\": \"card\"}\n```\n\n## [Retrieve a Customer's PaymentMethod](https://docs.stripe.com/api/payment_methods/customer)\n\nRetrieves a PaymentMethod object for a given Customer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a PaymentMethod object.\n\nGET /v1/customers/:id/payment\\_methods/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_9s6XKzkNRiz8i3/payment_methods/pm_1NVChw2eZvKYlo2CHxiM5E2E \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pm_1NVChw2eZvKYlo2CHxiM5E2E\",  \"object\": \"payment_method\",  \"billing_details\": {    \"address\": {      \"city\": null,      \"country\": null,      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": null    },    \"email\": null,    \"name\": null,    \"phone\": null  },  \"card\": {    \"brand\": \"visa\",    \"checks\": {      \"address_line1_check\": null,      \"address_postal_code_check\": null,      \"cvc_check\": \"pass\"    },    \"country\": \"US\",    \"exp_month\": 12,    \"exp_year\": 2034,    \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",    \"funding\": \"credit\",    \"generated_from\": null,    \"last4\": \"4242\",    \"networks\": {      \"available\": [        \"visa\"      ],      \"preferred\": null    },    \"three_d_secure_usage\": {      \"supported\": true    },    \"wallet\": null  },  \"created\": 1689682128,  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"livemode\": false,  \"metadata\": {},  \"redaction\": null,  \"type\": \"card\"}\n```\n\n## [Retrieve a PaymentMethod](https://docs.stripe.com/api/payment_methods/retrieve)\n\nRetrieves a PaymentMethod object attached to the StripeAccount. To retrieve a payment method attached to a Customer, you should use [Retrieve a Customer’s PaymentMethods](https://docs.stripe.com/api/payment_methods/customer)\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a PaymentMethod object.\n\nGET /v1/payment\\_methods/:id\n\n```\ncurl https://api.stripe.com/v1/payment_methods/pm_1MqLiJLkdIwHu7ixUEgbFdYF \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pm_1MqLiJLkdIwHu7ixUEgbFdYF\",  \"object\": \"payment_method\",  \"billing_details\": {    \"address\": {      \"city\": null,      \"country\": null,      \"line1\": null,      \"line2\": null,      \"postal_code\": null,      \"state\": null    },    \"email\": null,    \"name\": null,    \"phone\": null  },  \"card\": {    \"brand\": \"visa\",    \"checks\": {      \"address_line1_check\": null,      \"address_postal_code_check\": null,      \"cvc_check\": \"unchecked\"    },    \"country\": \"US\",    \"exp_month\": 8,    \"exp_year\": 2026,    \"fingerprint\": \"mToisGZ01V71BCos\",    \"funding\": \"credit\",    \"generated_from\": null,    \"last4\": \"4242\",    \"networks\": {      \"available\": [        \"visa\"      ],      \"preferred\": null    },    \"three_d_secure_usage\": {      \"supported\": true    },    \"wallet\": null  },  \"created\": 1679945299,  \"customer\": null,  \"livemode\": false,  \"metadata\": {},  \"type\": \"card\"}\n```",
    "title": "The PaymentMethod object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/tax-overrides",
    "markdown": "# Tax overrides | Stripe DocumentationThe Stripe Docs logo\n\n## Tax overridesBeta\n\n## Learn how to override tax behavior using Stripe Tax.\n\nSet up Stripe Tax to fit your business needs with tax overrides. Create rules that apply to a product tax code in any supported location.\n\nFor example, you can:\n\n*   Change the [Software as a service (SaaS) - personal use](https://docs.stripe.com/tax/tax-codes?tax_code=txcd_10103000) tax code from taxable to non-taxable in Louisiana to reflect the uncertainty of how SaaS might be taxed.\n*   Apply a 5% tax rate to the [Newspapers](https://docs.stripe.com/tax/tax-codes?tax_code=txcd_35020100%09) tax code in Poland, instead of the applied rate of 8%, to reflect that your product is a regional newspaper and not a national one.\n*   Treat the [Food for non-immediate consumption](https://docs.stripe.com/tax/tax-codes?tax_code=txcd_40040000) tax code as taxable at the standard rate in New York, to reflect that you sell a bagels with cream cheese.\n\nAfter you create a tax override, you’re responsible for keeping the rate and taxability up to date with any changes in tax law. When you remove a tax override, Stripe manages the updates.\n\n## Create a tax override![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo create a tax override rule, you must enable tax collection in Stripe by [adding a tax registration](https://docs.stripe.com/tax/registering?#add-a-registration) for a jurisdiction. We recommend that you create your first tax override in a sandbox to make sure that you get the tax outcome you expect:\n\n1.  In the Dashboard, navigate to the [Overrides tab](https://dashboard.stripe.com/tax/overrides) in the Tax page.\n2.  Click **\\+ Create override**.\n3.  In the section **Product tax code**, choose the product tax code your override applies to.\n4.  _(Optional)_ Specify the date and time for the override rule to become effective under **Effective date**. For example, you can set the override rule to start from the first day of the month. If you don’t set a date, the rule takes effect immediately.\n5.  In the section **Rule location**, choose a jurisdiction where your override applies.\n    *   You can create a rule that applies to a country or state.\n    *   For US jurisdictions, you can also create a rule that only applies to a specific city, county, or district.\n6.  For **Tax type**, choose the type of tax your override applies to.\n7.  Click the Tax behavior you want to apply. We indicate whether the product tax code you chose is taxable or non-taxable in that specific location and for the particular tax type (for example, sales tax or VAT).\n    *   If you choose **Taxable**, you have two options:\n        \n        *   Apply the standard rate. This means that your rule always uses the standard rate that Stripe has determined for that product tax code, tax, and location. If the standard rate changes, that change also applies to your products.\n        *   Apply a custom rate. This means that your rule uses the tax rate that you set. If the standard rate changes for that product, your custom rate still applies.\n        \n        You can’t apply a custom rate in the US when creating a rule for a state that applies to all jurisdictions in a state because several cities and counties have different tax rates. To determine a custom rate for these jurisdictions, select a specific city, county, or district in the jurisdiction dropdown.\n        \n8.  Verify that all of the details in the **Summary** panel are correct. The **Rate preview** displays the expected tax rate that applies for a location within the jurisdiction you chose.\n    *   The calculated tax might vary for other addresses within the same jurisdiction.\n    *   In some cases, the tax code, tax, and location you select might be taxed at the location of your business, rather than the destination of the customer. In these cases, the preview displays how tax applies in your business location. We don’t use your tax override rule in these cases.\n9.  Click **Create rule** to apply your rule immediately, or at the time and date you chose.\n\n## View and maintain your tax overrides![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nView all your override rules in the [Overrides tab](https://dashboard.stripe.com/tax/overrides). Click an override to view the following information:\n\n*   When the rule was created or edited.\n*   Who created or edited the rule.\n*   The taxability and rate that’s applied.\n*   The tax code, location, and tax the rule applies to.\n\nIf you have an override in place, Stripe won’t automatically update the taxability or custom rate of your product if something changes. It’s your responsibility to maintain your tax overrides to make sure they reflect what’s needed for your business.\n\n## Edit a tax override![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your override is scheduled to start in the future, you can edit the start or end time of your override rule. If your rule is already active, you can edit the end date and time. To change the tax code, location, or tax rate, you must archive the rule and create a new one in its place.\n\nTo edit your tax rule:\n\n1.  In the Dashboard, navigate to the [Overrides tab](https://dashboard.stripe.com/tax/overrides) in the Tax page.\n2.  Find the override rule you want to edit.\n3.  Click the overflow menu () next to the rule and choose **Edit rule**.\n4.  Make your changes to the time and date.\n5.  Click **Save**.\n\n## Archive a tax override![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can archive an override that you created. After you archive an override rule, it no longer applies to your tax transactions and Stripe’s default behavior applies instead. Rules can’t be unarchived, but you can create a new rule instead.\n\nTo archive your tax override:\n\n1.  In the Dashboard, navigate to the [Overrides tab](https://dashboard.stripe.com/tax/overrides) in the Tax page.\n2.  Find the tax override you want to archive.\n3.  Click the overflow menu () next to the rule and choose **Archive rule**.\n4.  Confirm your changes, then click **Archive**.\n\n## Verify which transactions have a tax override rule applied![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo verify which tax override applies to a transaction, view the **customizations\\_applied\\_ids** column of the [itemized export](https://docs.stripe.com/tax/reports?#itemized-exports).\n\nWe don’t include transactions that contain tax overrides in the US-specific location reports or summarized reports. Learn more about the [different tax reports](https://docs.stripe.com/tax/reports).\n\n## How we pick which override applies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen two rules apply to the same product in the same jurisdiction, Stripe only applies the more specific rule.\n\nFor example, this might apply if Stripe treats your product as taxable in the state of Colorado, but you want to treat it as non-taxable in all of Colorado except for the city of Boulder, where it should be taxed at the standard rate.\n\nTo change this, you can create a rule for the tax code that you apply to your product for the state of Colorado:\n\n1.  Navigate to the [Overrides tab](https://dashboard.stripe.com/tax/overrides) in the Tax page, then choose **Colorado** from the **Rule location** dropdown.\n2.  Enable **Include all jurisdictions**.\n3.  Choose **Sales Tax** from the **Tax type** dropdown.\n4.  Set **Non-taxable** as the **Tax behavior**.\n\nAdditionally, you can create a second rule for the same tax code to apply tax in Boulder, but not elsewhere in Colorado:\n\n1.  Navigate to the [Overrides tab](https://dashboard.stripe.com/tax/overrides) in the Tax page, then choose **Colorado** from the **Choose location** dropdown under **Rule location**.\n2.  Disable **Include all jurisdictions**.\n3.  Choose **Boulder** from the _Choose a jurisdiction_\\* dropdown.\n4.  Choose **Sales Tax** from the **Tax type** dropdown.\n5.  Set **Standard rate** as the **Tax behavior**.\n\nYou can’t create a tax override that applies to the same specific jurisdiction (for example, Boulder) for the same tax code, during the same time period.\n\n## When you can’t use overrides![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSome parts of a tax calculation can’t be overridden. The following things will continue to affect the final tax calculation:\n\n*   **Sourcing rules**: These rules determine whether tax is calculated using the destination of the buyer or the origin of the seller. If you create an override that applies to a jurisdiction, but your product is sourced to the origin instead, your override rule won’t apply.\n*   Tiers, thresholds, and taxable basis apply in some jurisdictions:\n    *   **Taxable basis**: In certain locations, only a specific portion of the tax code is taxable. For example, in Texas, only 80% of the cost of Software as a service is subject to tax.\n    *   **Treatment based on price**: Products might be treated differently based on their price. For example, in New York, clothing is exempt from tax if it costs under 110 USD, but taxable if it exceeds that amount. Even if you create a rule for New York City with a custom rate, sales of clothing in New York under 110 USD is still considered exempt.\n\nTax overrides in Stripe don’t transfer to TaxJar. When using TaxJar for filing, these overrides aren’t taken into account when TaxJar recalculates the tax you’re expected to file. As a result, tax overrides might not be suitable for your specific use case.",
    "title": "Tax overrides | Stripe Documentation",
    "description": "Learn how to override tax behavior using Stripe Tax.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/disputes/prevention/verification",
    "markdown": "# Card verification checks | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to make use of card verification checks to protect against disputes and fraud.\n\nWhen a card payment is submitted to a card network for authorization, Stripe provides the CVC, postal code, and billing street address for them to verify (if you collected these from the customer in your checkout flow). The card issuer checks this against the information they have on file for the cardholder. If the provided information doesn’t match, the verification check fails. A failed CVC or postal code check can indicate the payment is fraudulent, so review it carefully before fulfilling the order.\n\nEach [Charge](https://docs.stripe.com/api#charge_object) object includes the [verification response](https://docs.stripe.com/api#create_charge-verification-responses) as part of its `source` attribute. You can also find the verification results in the [Dashboard](https://dashboard.stripe.com/test/payments) when viewing a payment.\n\nIf no information is collected, the card issuer can’t perform a verification check. Collect the CVC, postal code, and billing address for every payment to avoid this issue. The results of verification checks help improve the detection of fraudulent activity.\n\n## Card verification code check (CVC) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe CVC (also referred to as CVV) is the three- or four-digit number printed directly on a card, usually on the signature strip or the front of the card. [Radar](https://docs.stripe.com/radar \"Radar\") includes a [rule](https://docs.stripe.com/radar/rules#built-in-rules) to block any payments that fail the CVC verification check, which you can enable or disable within the [Dashboard](https://dashboard.stripe.com/test/radar/rules).\n\nThis doesn’t affect payments where the CVC check couldn’t be performed or is unavailable, for example [Wallets](https://docs.stripe.com/payments/payment-methods \"digital wallet\") like Apple Pay or off-session payments.\n\nYou can perform CVC verification by providing the CVC value either when you create a payment with a new card payment method, or when you attach a new card payment method to a customer.\n\nIn general, only cardholders in physical possession of the card should have access to the CVC number. Businesses are not permitted to store the CVC number, so it’s unlikely that a fraudster can obtain this information through a computer breach. However, CVC verification doesn’t protect against the physical theft of a card, nor card information being used on a computer or website that isn’t secure.\n\n## Address verification (AVS) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAddress verification (AVS) checks two pieces of information, the postal code and the billing street address. AVS checks determine whether this information matches the billing address on file with the card issuer. Radar includes a [rule](https://docs.stripe.com/radar/rules#built-in-rules) to block any payments that fail postal code verification, which you can enable or disable within the [Dashboard](https://dashboard.stripe.com/).\n\nIf enabled, these address checks can fail on legitimate payments in some situations. For example, a customer entering their address incorrectly or moving and not updating their address with the card issuer could cause the address check to fail.\n\nSupport for both types of AVS checks varies by country and card issuer (for example, certain countries don’t use a postal code or some card issuers don’t support street address verification). However, street address verification is commonly supported for cards issued in the United States, Canada, and the United Kingdom.",
    "title": "Card verification checks | Stripe Documentation",
    "description": "Learn how to make use of card verification checks to protect against disputes and fraud.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/arizona",
    "markdown": "# Collect tax in Arizona | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Arizona.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Arizona. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\nSellers who exceed the gross sales must register for an Arizona sales tax permit to collect Transaction Privilege Tax (TPT) on sales that ship to Arizona and remit the sales tax to the state. Arizona is the first state to use a graduated approach for their economic nexus threshold.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: October 1, 2019\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Arizona at the [tax authority](https://azdor.gov/business/transaction-privilege-tax). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Arizona, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-az) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Arizona.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your [origin address](https://docs.stripe.com/tax/set-up#origin-address) is in the US and differs from your customer’s state, Stripe always calculates tax based on your customer’s location.\n\nIf your customer is in Arizona and your origin address is also in Arizona, Stripe applies tax based on your origin address, depending on the type of product or service you sell.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Arizona filing requirements. You have the option to report on an annual, quarterly, or monthly basis.\n\nReporting-specific considerations:\n\n*   Some areas of Arizona have a different tax rate for purchases of a certain value. The different tax rate can be applied to either the total price of the purchase or only the amount above the triggering price. You won’t see a location report for Arizona if you have these transactions. Use the [exports](https://docs.stripe.com/tax/reports#exports) instead for a detailed tax breakdown of each transaction.\n*   Native American reservations that are located in Arizona might impose Tribal taxes when doing business within their borders. A warning message appears when a report contains a transaction from this location. These taxes are not managed by the state and require separate filing.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Arizona. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Arizona | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Arizona.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/refunds/create",
    "markdown": "# Create a refund | Stripe API Reference\n\nWhen you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.\n\nCreating a new refund will refund a charge that has previously been created but not yet refunded. Funds will be refunded to the credit or debit card that was originally charged.\n\nYou can optionally refund only part of a charge. You can do so multiple times, until the entire charge has been refunded.\n\nOnce entirely refunded, a charge can’t be refunded again. This method will raise an error when called on an already-refunded charge, or when trying to refund more money than is left on a charge.\n\n### Parameters\n\n*   A positive integer in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) representing how much of this charge to refund. Can refund only up to the remaining, unrefunded amount of the charge.\n    \n*   The identifier of the charge to refund.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The identifier of the PaymentIntent to refund.\n    \n*   String indicating the reason for the refund. If set, possible values are `duplicate`, `fraudulent`, and `requested_by_customer`. If you believe the charge to be fraudulent, specifying `fraudulent` as the reason will add the associated card and email to your [block lists](https://docs.stripe.com/radar/lists), and will also help us improve our fraud detection algorithms.\n    \n\n### More parameters\n\n*   #### \n    \n    refund\\_application\\_feebooleanConnect only\n    \n*   #### \n    \n    reverse\\_transferbooleanConnect only\n    \n\n### Returns\n\nReturns the `Refund` object if the refund succeeded. Raises [an error](#errors) if the Charge/PaymentIntent has already been refunded, or if an invalid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/refunds \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d charge=ch_1NirD82eZvKYlo2CIvbtLWuY\n```\n\n```\n{  \"id\": \"re_1Nispe2eZvKYlo2Cd31jOCgZ\",  \"object\": \"refund\",  \"amount\": 1000,  \"balance_transaction\": \"txn_1Nispe2eZvKYlo2CYezqFhEx\",  \"charge\": \"ch_1NirD82eZvKYlo2CIvbtLWuY\",  \"created\": 1692942318,  \"currency\": \"usd\",  \"destination_details\": {    \"card\": {      \"reference\": \"123456789012\",      \"reference_status\": \"available\",      \"reference_type\": \"acquirer_reference_number\",      \"type\": \"refund\"    },    \"type\": \"card\"  },  \"metadata\": {},  \"payment_intent\": \"pi_1GszsK2eZvKYlo2CfhZyoZLp\",  \"reason\": null,  \"receipt_number\": null,  \"source_transfer_reversal\": null,  \"status\": \"succeeded\",  \"transfer_reversal\": null}\n```\n\n## [Update a refund](https://docs.stripe.com/api/refunds/update)\n\nUpdates the refund that you specify by setting the values of the passed parameters. Any parameters that you don’t provide remain unchanged.\n\nThis request only accepts `metadata` as an argument.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the refund object if the update succeeds. This call raises [an error](#errors) if update parameters are invalid.\n\n```\ncurl https://api.stripe.com/v1/refunds/re_1Nispe2eZvKYlo2Cd31jOCgZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"re_1Nispe2eZvKYlo2Cd31jOCgZ\",  \"object\": \"refund\",  \"amount\": 1000,  \"balance_transaction\": \"txn_1Nispe2eZvKYlo2CYezqFhEx\",  \"charge\": \"ch_1NirD82eZvKYlo2CIvbtLWuY\",  \"created\": 1692942318,  \"currency\": \"usd\",  \"destination_details\": {    \"card\": {      \"reference\": \"123456789012\",      \"reference_status\": \"available\",      \"reference_type\": \"acquirer_reference_number\",      \"type\": \"refund\"    },    \"type\": \"card\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"payment_intent\": \"pi_1GszsK2eZvKYlo2CfhZyoZLp\",  \"reason\": null,  \"receipt_number\": null,  \"source_transfer_reversal\": null,  \"status\": \"succeeded\",  \"transfer_reversal\": null}\n```\n\n## [Retrieve a refund](https://docs.stripe.com/api/refunds/retrieve)\n\nRetrieves the details of an existing refund.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a refund if you provide a valid ID. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/refunds/re_1Nispe2eZvKYlo2Cd31jOCgZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"re_1Nispe2eZvKYlo2Cd31jOCgZ\",  \"object\": \"refund\",  \"amount\": 1000,  \"balance_transaction\": \"txn_1Nispe2eZvKYlo2CYezqFhEx\",  \"charge\": \"ch_1NirD82eZvKYlo2CIvbtLWuY\",  \"created\": 1692942318,  \"currency\": \"usd\",  \"destination_details\": {    \"card\": {      \"reference\": \"123456789012\",      \"reference_status\": \"available\",      \"reference_type\": \"acquirer_reference_number\",      \"type\": \"refund\"    },    \"type\": \"card\"  },  \"metadata\": {},  \"payment_intent\": \"pi_1GszsK2eZvKYlo2CfhZyoZLp\",  \"reason\": null,  \"receipt_number\": null,  \"source_transfer_reversal\": null,  \"status\": \"succeeded\",  \"transfer_reversal\": null}\n```\n\n## [List all refunds](https://docs.stripe.com/api/refunds/list)\n\nReturns a list of all refunds you created. We return the refunds in sorted order, with the most recent refunds appearing first The 10 most recent refunds are always available by default on the Charge object.\n\n### Parameters\n\n*   Only return refunds for the charge specified by this charge ID.\n    \n*   Only return refunds for the PaymentIntent specified by this ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` refunds, starting after the `starting_after` refund. Each entry in the array is a separate Refund object. If no other refunds are available, the resulting array is empty. If you provide a non-existent charge ID, this call raises [an error](#errors).\n\n```\ncurl -G https://api.stripe.com/v1/refunds \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/refunds\",  \"has_more\": false,  \"data\": [    {      \"id\": \"re_1Nispe2eZvKYlo2Cd31jOCgZ\",      \"object\": \"refund\",      \"amount\": 1000,      \"balance_transaction\": \"txn_1Nispe2eZvKYlo2CYezqFhEx\",      \"charge\": \"ch_1NirD82eZvKYlo2CIvbtLWuY\",      \"created\": 1692942318,      \"currency\": \"usd\",      \"destination_details\": {        \"card\": {          \"reference\": \"123456789012\",          \"reference_status\": \"available\",          \"reference_type\": \"acquirer_reference_number\",          \"type\": \"refund\"        },        \"type\": \"card\"      },      \"metadata\": {},      \"payment_intent\": \"pi_1GszsK2eZvKYlo2CfhZyoZLp\",      \"reason\": null,      \"receipt_number\": null,      \"source_transfer_reversal\": null,      \"status\": \"succeeded\",      \"transfer_reversal\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a refund](https://docs.stripe.com/api/refunds/cancel)\n\nCancels a refund with a status of `requires_action`.\n\nYou can’t cancel refunds in other states. Only refunds for payment methods that require customer action can enter the `requires_action` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the refund object if the cancellation succeeds. This call raises [an error](#errors) if you can’t cancel the refund.\n\nPOST /v1/refunds/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/refunds/re_1Nispe2eZvKYlo2Cd31jOCgZ/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"re_1Nispe2eZvKYlo2Cd31jOCgZ\",  \"object\": \"refund\",  \"amount\": 1000,  \"balance_transaction\": \"txn_1Nispe2eZvKYlo2CYezqFhEx\",  \"charge\": \"ch_1NirD82eZvKYlo2CIvbtLWuY\",  \"created\": 1692942318,  \"currency\": \"usd\",  \"failure_balance_transaction\": \"txn_3MmlLrLkdIwHu7ix0uke3Ezy\",  \"failure_reason\": \"merchant_request\",  \"metadata\": {},  \"payment_intent\": \"pi_1GszsK2eZvKYlo2CfhZyoZLp\",  \"reason\": null,  \"receipt_number\": null,  \"source_transfer_reversal\": null,  \"status\": \"canceled\",  \"transfer_reversal\": null}\n```",
    "title": "Create a refund | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/customer-balance/virtual-bank-account-numbers",
    "markdown": "# Virtual bank account numbers | Stripe DocumentationThe Stripe Docs logo\n\n## Learn best practices for using Virtual Bank Account Numbers (VBANs) for reconciliation on Stripe.\n\nVirtual Bank Account Numbers (VBANs) are an important part of the bank transfers payment method. To accept funds from a bank transfer, Stripe issues a VBAN to your customer. When the customer transfers money to that VBAN, Stripe automatically allocates the funds to the customer’s cash balance. After these funds arrive on the customer’s cash balance, Stripe carries out further reconciliation steps to associate the funds with the correct PaymentIntent or Invoice.\n\nAfter a customer has been allocated a VBAN, it belongs to them forever. Any additional funds that are sent to that VBAN are automatically added to customer’s cash balance. Because VBANs are permanent, it’s important to understand their limits and best practices for using them.\n\n## Allocation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are several ways to allocate a VBAN to a customer.\n\n*   When you create and confirm a **PaymentIntent** with the customer balance payment method, Stripe looks for an existing VBAN that is assigned to the customer and for the country specified in the request. If the customer does not have an appropriate VBAN, Stripe generates a new VBAN for the customer.\n    \n*   When you create a new **Invoice** with the customer balance payment method, Stripe looks for an existing VBAN that matches the country and is assigned to the customer specified in the request. If the customer does not have an appropriate VBAN, Stripe generates a new VBAN for the customer.\n    \n*   The [Funding Instructions API](https://docs.stripe.com/payments/customer-balance/funding-instructions) creates VBANs without requiring an existing PaymentIntent or Invoice. You can use this API when you don’t expect payment from a customer yet but still want to create a new VBAN for them.\n    \n\n## Limits and Best Practices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you integrate with bank transfers, only request a VBAN for a customer if they’re likely to make a payment using a bank transfer. In these cases, you only generate a VBAN when creating a PaymentIntent or a Invoice.\n\nDon’t assign VBANs to inactive customers or make VBAN allocation part of your registration flow.\n\nDue to regional differences in VBAN availability, Stripe enforces different limits per region. If you need more VBANs than the limits allow, please [reach out to our support team](https://support.stripe.com/).\n\n| Region | Limits |\n| --- | --- |\n| US  | We allow up to **5,000** new VBANs every 24 hours. |\n| UK  | We allow up to **2,000** new VBANs every 24 hours. |\n| EU  | We allow up to **5,000** new VBANs every 24 hours and enforce a lifetime limit of **50,000** VBANs per account. Stripe also charges [a fee](https://stripe.com/pricing/local-payment-methods) for every new VBAN allocation over 1,000 allocations made in the EU. |\n| JP  | We allow up to **1,000** new VBANs every 24 hours. |\n| MX  | We allow up to **1,000** new VBANs every 24 hours. |",
    "title": "Virtual bank account numbers | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/ideal",
    "markdown": "# iDEAL payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about iDEAL, a common payment method in the Netherlands.\n\niDEAL is a Netherlands-based payment method that allows customers to complete transactions online using their bank credentials. All major Dutch banks are members of Currence, the scheme that operates iDEAL, making it the most popular online payment method in the Netherlands with a share of online transactions close to 55%.\n\niDEAL redirects customers to their online banking environment to authenticate a payment using a [second factor of authentication](https://docs.stripe.com/payments/payment-methods#customer-actions) and there is [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) about the success or failure of a payment. The exact customer experience depends on their bank.\n\n*   **Customer locations**\n    \n    Netherlands\n    \n*   **Presentment currency**\n    \n    EUR\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Authenticated bank debit\n    \n*   **Recurring payments**\n    \n    via SEPA Direct Debit\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis demo shows the customer experience when using Ideal.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate iDEAL and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable iDEAL. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add iDEAL from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nIf you prefer to manually list payment methods or want to save iDEAL details for future payments, see the following guides:\n\n*   [Manually configure iDEAL as a payment method](https://docs.stripe.com/payments/ideal/accept-a-payment)\n*   [Save iDEAL details for future payments](https://docs.stripe.com/payments/ideal/set-up-payment)\n\nCheck out the iDEAL [sample on GitHub](https://github.com/stripe-samples/accept-a-payment).\n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe risk of fraud or unrecognized payments is low because the customer must authenticate the payment with their bank. As a result, you won’t have disputes that turn into chargebacks, with funds withdrawn from your Stripe account.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\niDEAL payments can be refunded up to 180 days after the original payment.",
    "title": "iDEAL payments | Stripe Documentation",
    "description": "Learn about iDEAL, a common payment method in the Netherlands.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/florida",
    "markdown": "# Collect tax in Florida | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Florida.\n\nIn Florida, Stripe Tax supports calculation and collection of [sales tax](https://floridarevenue.com/taxes/taxesfees/Pages/sales_tax.aspx).\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your potential tax registration obligations in Florida. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\n### Sales tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSellers that meet both the state’s sales threshold must register for a Florida sales tax permit, collect sales tax on sales that ship into Florida, and remit that sales tax to the state.\n\n**Threshold**: 100,000 USD\n\n**Period**: Previous year\n\n**Included transactions**: Taxable sales\n\n**Effective date**: July 1, 2021\n\n### Other taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe also support:\n\n*   [Florida Communications Services tax](https://floridarevenue.com/taxes/taxesfees/Pages/cst.aspx)—for businesses selling video or audio streaming to customers in Florida. This includes the Communications Services Tax, Communications Services Gross Receipts Tax and Local Communications Services Tax. These taxes only apply when your business has physical presence in Florida. This means there isn’t a revenue threshold for when remote sellers need to pay this tax. Transactions for these taxes aren’t included in Stripe monitoring for Florida.\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for tax in Florida at the [tax authority](https://floridarevenue.com/taxes/taxesfees/Pages/sales_tax.aspx). Read more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Florida, add your registrations to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-fl) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in Florida.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Location reports](https://docs.stripe.com/tax/reports#us-location-reports) offer a summary of transaction and refund data for specific US locations and align with Florida filing requirements. You have the option to report on an annual, semiannual, quarterly, or monthly basis.\n\nReporting-specific considerations:\n\n*   Certain areas in Florida can impose an extra sales surtax, but there is a set limit on how much tax will be applied based on the transaction amount. You won’t see a location report for Florida if you had these transactions. Use the [exports](https://docs.stripe.com/tax/reports#exports) instead for a detailed tax breakdown of each transaction.\n*   The location reports don’t include transactions with the Florida Communications Services tax as these are filed to the state using a different report. To see transactions with these taxes, you can use the [exports](https://docs.stripe.com/tax/reports#exports).\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Florida. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Florida | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Florida.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/tax/supported-countries/united-states/alaska",
    "markdown": "# Collect tax in Alaska | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Stripe Tax to calculate, collect, and report tax in Alaska.\n\n## When to register for tax collection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAlaska doesn’t have a state sales tax. However local jurisdictions within Alaska may impose a sales and use tax. Each jursidiction can define what it means to be doing business in that location and whether sales tax applies. Many local jurisdictions in Alaska have chosen to adopt the [Alaska Remote Seller Sales Tax Commission (ARSSTC)](https://arsstc.org/business-sellers/) uniform tax code. This includes using state-wide thresholds to determine whether a business needs to pay tax there.\n\nBusinesses who are remote sellers or marketplace facilitators need to register with the commission and collect tax on their sales into member Alaska localities if they have 100,000 USD or more in annual gross receipts from sales, or 200 or more sales annually into the state.\n\n**Threshold**: 100,000 USD or 200 transactions\n\n**Period**: Previous or current year\n\n**Included transactions**: Gross sales\n\n**Effective date**: The state passed The Alaska Remote Seller Sales Tax Code on January 6, 2020. However, local jurisdictions decide whether to adopt the code. After a local jurisdiction adopts the code, businesses have 30 days to begin collecting sales tax from Alaska buyers located in that jurisdiction.\n\nUse the [Thresholds tab](https://dashboard.stripe.com/tax/thresholds) to get insights about your sales into the state and potential tax registration obligations in Alaska. Stripe also notifies you with email and Dashboard alerts when you need to register to collect tax. Learn more about how the [monitoring tool works](https://docs.stripe.com/tax/monitoring).\n\n## Register to collect tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegister for sales tax in Alaska at the tax authority:\n\n*   Remote sellers can register with the [Alaska Remote Seller Sales Tax Commission](https://arsstc.munirevs.com/)\n*   Businesses with a physical presence in the state need to [register in that particular location](https://arsstc.org/business-sellers/).\n\nRead more about registering for [sales tax in the US in our guide](https://stripe.com/guides/sales-tax-registration-process-us).\n\nAfter you’ve registered to collect tax in Alaska, add your registration to Stripe in the [Registrations tab](https://dashboard.stripe.com/tax/registrations?location=us-ak) in the Dashboard. This turns on tax calculation and collection in Stripe for your transactions in the local jurisdictions with economic nexus laws.\n\nLearn [how to add your registration](https://docs.stripe.com/tax/registering#track-your-registrations-in-the-tax-dashboard) in the Dashboard.\n\n## How we calculate taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe calculates the taxes that apply to your customer’s location.\n\n## Report and file your taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides reports of your completed tax transactions. To access these reports, navigate to the [Registrations tab](https://dashboard.stripe.com/tax/registrations) of the Dashboard.\n\n### Exports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe tax transaction data export provides a comprehensive and aggregated view of transactions by location, including a breakdown of individual tax amounts. Learn more about [tax reporting exports](https://docs.stripe.com/tax/reports#exports).\n\n### Location reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAlaska doesn’t impose any state sales or use tax. However, local jurisdictions can apply these taxes. A location report isn’t available to view these details. Instead, use the [exports](https://docs.stripe.com/tax/reports#exports) to obtain a detailed breakdown of local jurisdiction sales and use tax.\n\n### Filing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou are responsible for filing and remitting your taxes to Alaska. Stripe doesn’t file taxes on your behalf. For automating filing in the US, we recommend using [TaxJar’s AutoFile solution](https://go.taxjar.com/2021StripeTaxInquiry_LP-01-Request.html).",
    "title": "Collect tax in Alaska | Stripe Documentation",
    "description": "Learn how to use Stripe Tax to calculate, collect, and report tax in Alaska.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/tax/calculations/create",
    "markdown": "# Create a Tax Calculation | Stripe API Reference\n\nCalculates tax based on the input and returns a Tax `Calculation` object.\n\n### Parameters\n\n*   #### \n    \n    line\\_itemsarray of objectsRequired\n    \n    A list of items the customer is purchasing.\n    \n*   #### \n    \n    customer\\_detailsobjectRequired unless customer provided\n    \n    Details about the customer, including address and tax IDs.\n    \n*   Shipping cost details to be used for the calculation.\n    \n\n### More parameters\n\n*   #### \n    \n    customerstringRequired unless customer\\_details provided\n    \n\n### Returns\n\nA Tax `Calculation` object containing the first 100 input `line_items` if the calculation succeeds. Otherwise, an error (for example, indicating that the customer address was invalid).\n\nPOST /v1/tax/calculations\n\n```\ncurl https://api.stripe.com/v1/tax/calculations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d currency=usd \\  -d \"customer_details[address][line1]\"=\"920 5th Ave\" \\  -d \"customer_details[address][city]\"=Seattle \\  -d \"customer_details[address][state]\"=WA \\  -d \"customer_details[address][postal_code]\"=98104 \\  -d \"customer_details[address][country]\"=US \\  -d \"customer_details[address_source]\"=shipping \\  -d \"line_items[0][amount]\"=1499 \\  -d \"line_items[0][tax_code]\"=txcd_10000000 \\  -d \"line_items[0][reference]\"=\"Music Streaming Coupon\" \\  -d \"shipping_cost[amount]\"=300 \\  -d \"expand[0]\"=line_items\n```\n\n```\n{  \"id\": \"taxcalc_1OduxkBUZ691iUZ4iWvpMApI\",  \"object\": \"tax.calculation\",  \"amount_total\": 1953,  \"currency\": \"usd\",  \"customer\": null,  \"customer_details\": {    \"address\": {      \"city\": \"Seattle\",      \"country\": \"US\",      \"line1\": \"9205thAve\",      \"line2\": null,      \"postal_code\": \"98104\",      \"state\": \"WA\"    },    \"address_source\": \"shipping\",    \"ip_address\": null,    \"tax_ids\": [],    \"taxability_override\": \"none\"  },  \"expires_at\": 1706708005,  \"line_items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"tax_li_PSqf3RMNZa23H4\",        \"object\": \"tax.calculation_line_item\",        \"amount\": 1499,        \"amount_tax\": 154,        \"livemode\": false,        \"product\": null,        \"quantity\": 1,        \"reference\": \"Music Streaming Coupon\",        \"tax_behavior\": \"exclusive\",        \"tax_code\": \"txcd_10000000\"      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/tax/calculations/taxcalc_1OduxkBUZ691iUZ4iWvpMApI/line_items\"  },  \"livemode\": false,  \"ship_from_details\": null,  \"shipping_cost\": {    \"amount\": 300,    \"amount_tax\": 0,    \"tax_behavior\": \"exclusive\",    \"tax_code\": \"txcd_92010001\"  },  \"tax_amount_exclusive\": 154,  \"tax_amount_inclusive\": 0,  \"tax_breakdown\": [    {      \"amount\": 154,      \"inclusive\": false,      \"tax_rate_details\": {        \"country\": \"US\",        \"percentage_decimal\": \"10.25\",        \"state\": \"WA\",        \"tax_type\": \"sales_tax\"      },      \"taxability_reason\": \"standard_rated\",      \"taxable_amount\": 1499    },    {      \"amount\": 0,      \"inclusive\": false,      \"tax_rate_details\": {        \"country\": \"DE\",        \"percentage_decimal\": \"0.0\",        \"state\": null,        \"tax_type\": \"vat\"      },      \"taxability_reason\": \"zero_rated\",      \"taxable_amount\": 300    }  ],  \"tax_date\": 1706535204}\n```\n\n## [Retrieve a calculation's line items](https://docs.stripe.com/api/tax/calculations/line_items)\n\nRetrieves the line items of a tax calculation as a collection, if the calculation hasn’t expired.\n\n### Parameters\n\n*   A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.\n    \n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.\n    \n\n### Returns\n\nA list of Line Item objects if the Tax calculation is found. Otherwise returns a ‘not found’ error.\n\nGET /v1/tax/calculations/:id/line\\_items\n\n```\ncurl -G https://api.stripe.com/v1/tax/calculations/taxcalc_1NpJD42eZvKYlo2CUti522cz/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/tax/calculations/taxcalc_1NpJD42eZvKYlo2CUti522cz/line_items\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/tax/calculations/taxcalc_1NpJD42eZvKYlo2CUti522cz/line_items\",      \"has_more\": false,      \"data\": [        {          \"id\": \"tax_li_OcYJb5mQOSSSWD\",          \"object\": \"tax.calculation_line_item\",          \"amount\": 1499,          \"amount_tax\": 148,          \"livemode\": false,          \"product\": null,          \"quantity\": 1,          \"reference\": \"Pepperoni Pizza\",          \"tax_behavior\": \"exclusive\",          \"tax_code\": \"txcd_40060003\"        }      ]    }    {...}    {...}  ],}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Create a Tax Calculation | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/entitlements/feature/object",
    "markdown": "# The Feature object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   A unique key you provide as your own system identifier. This may be up to 80 characters.\n    \n*   Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The feature’s name, for your own purpose, not meant to be displayable to the customer.\n    \n\n### More attributes\n\n```\n{  \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",  \"object\": \"entitlements.feature\",  \"livemode\": false,  \"name\": \"My super awesome feature\",  \"lookup_key\": \"my-super-awesome-feature\",  \"active\": true,  \"metadata\": {}}\n```\n\n## [Create a feature](https://docs.stripe.com/api/entitlements/feature/create)\n\nCreates a feature\n\n### Parameters\n\n*   A unique key you provide as your own system identifier. This may be up to 80 characters.\n    \n*   The feature’s name, for your own purpose, not meant to be displayable to the customer.\n    \n*   Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n\nPOST /v1/entitlements/features\n\n```\ncurl https://api.stripe.com/v1/entitlements/features \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"My super awesome feature\" \\  -d lookup_key=my-super-awesome-feature\n```\n\n```\n{  \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",  \"object\": \"entitlements.feature\",  \"livemode\": false,  \"name\": \"My super awesome feature\",  \"lookup_key\": \"my-super-awesome-feature\",  \"active\": true,  \"metadata\": {}}\n```\n\n## [List all features](https://docs.stripe.com/api/entitlements/feature/list)\n\nRetrieve a list of features\n\n### Parameters\n\n*   If set, filter results to only include features with the given archive status.\n    \n*   If set, filter results to only include features with the given lookup\\_key.\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of your features\n\nGET /v1/entitlements/features\n\n```\ncurl -G https://api.stripe.com/v1/entitlements/features \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/entitlements/features\",  \"has_more\": false,  \"data\": [    {      \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",      \"object\": \"entitlements.feature\",      \"livemode\": false,      \"name\": \"My super awesome feature\",      \"lookup_key\": \"my-super-awesome-feature\",      \"active\": true,      \"metadata\": {}    }    {...}    {...}  ],}\n```\n\n## [Updates a feature](https://docs.stripe.com/api/entitlements/feature/updates)\n\nUpdate a feature’s metadata or permanently deactivate it.\n\n### Parameters\n\n*   Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The feature’s name, for your own purpose, not meant to be displayable to the customer.\n    \n\n### More parameters\n\n### Returns\n\nThe updated feature.\n\nPOST /v1/entitlements/features/:id\n\n```\ncurl https://api.stripe.com/v1/entitlements/features/feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"feat_test_61QGU1MWyFMSP9YBZ41ClCIKljWvsTgu\",  \"object\": \"entitlements.feature\",  \"livemode\": false,  \"name\": \"My super awesome feature\",  \"lookup_key\": \"my-super-awesome-feature\",  \"active\": true,  \"metadata\": {    \"order_id\": \"6735\"  }}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Feature object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/tax/calculations/object",
    "markdown": "# The Tax Calculation object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the calculation.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Total after taxes.\n    \n\n*   The customer’s details, such as address and tax IDs.\n    \n*   #### \n    \n    expires\\_atnullable timestamp\n    \n    Timestamp of date at which the tax calculation will expire.\n    \n*   #### \n    \n    line\\_itemsnullable objectExpandable\n    \n    The list of items the customer is purchasing.\n    \n*   #### \n    \n    shipping\\_costnullable object\n    \n    The shipping cost details for the calculation.\n    \n*   #### \n    \n    tax\\_amount\\_exclusiveinteger\n    \n    The amount of tax to be collected on top of the line item prices.\n    \n*   #### \n    \n    tax\\_amount\\_inclusiveinteger\n    \n    The amount of tax already included in the line item prices.\n    \n*   #### \n    \n    tax\\_breakdownarray of objects\n    \n    Breakdown of individual tax amounts that add up to the total.\n    \n\n### More attributes\n\n*   #### \n    \n    ship\\_from\\_detailsnullable object\n    \n\nThe Tax Calculation object\n\n```\n{  \"id\": \"taxcalc_1OduxkBUZ691iUZ4iWvpMApI\",  \"object\": \"tax.calculation\",  \"amount_total\": 1953,  \"currency\": \"usd\",  \"customer\": null,  \"customer_details\": {    \"address\": {      \"city\": \"Seattle\",      \"country\": \"US\",      \"line1\": \"9205thAve\",      \"line2\": null,      \"postal_code\": \"98104\",      \"state\": \"WA\"    },    \"address_source\": \"shipping\",    \"ip_address\": null,    \"tax_ids\": [],    \"taxability_override\": \"none\"  },  \"expires_at\": 1706708005,  \"line_items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"tax_li_PSqf3RMNZa23H4\",        \"object\": \"tax.calculation_line_item\",        \"amount\": 1499,        \"amount_tax\": 154,        \"livemode\": false,        \"product\": null,        \"quantity\": 1,        \"reference\": \"Music Streaming Coupon\",        \"tax_behavior\": \"exclusive\",        \"tax_code\": \"txcd_10000000\"      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/tax/calculations/taxcalc_1OduxkBUZ691iUZ4iWvpMApI/line_items\"  },  \"livemode\": false,  \"ship_from_details\": null,  \"shipping_cost\": {    \"amount\": 300,    \"amount_tax\": 0,    \"tax_behavior\": \"exclusive\",    \"tax_code\": \"txcd_92010001\"  },  \"tax_amount_exclusive\": 154,  \"tax_amount_inclusive\": 0,  \"tax_breakdown\": [    {      \"amount\": 154,      \"inclusive\": false,      \"tax_rate_details\": {        \"country\": \"US\",        \"percentage_decimal\": \"10.25\",        \"state\": \"WA\",        \"tax_type\": \"sales_tax\"      },      \"taxability_reason\": \"standard_rated\",      \"taxable_amount\": 1499    },    {      \"amount\": 0,      \"inclusive\": false,      \"tax_rate_details\": {        \"country\": \"DE\",        \"percentage_decimal\": \"0.0\",        \"state\": null,        \"tax_type\": \"vat\"      },      \"taxability_reason\": \"zero_rated\",      \"taxable_amount\": 300    }  ],  \"tax_date\": 1706535204}\n```\n\n## [Create a Tax Calculation](https://docs.stripe.com/api/tax/calculations/create)\n\nCalculates tax based on the input and returns a Tax `Calculation` object.\n\n### Parameters\n\n*   #### \n    \n    line\\_itemsarray of objectsRequired\n    \n    A list of items the customer is purchasing.\n    \n*   #### \n    \n    customer\\_detailsobjectRequired unless customer provided\n    \n    Details about the customer, including address and tax IDs.\n    \n*   Shipping cost details to be used for the calculation.\n    \n\n### More parameters\n\n*   #### \n    \n    customerstringRequired unless customer\\_details provided\n    \n\n### Returns\n\nA Tax `Calculation` object containing the first 100 input `line_items` if the calculation succeeds. Otherwise, an error (for example, indicating that the customer address was invalid).\n\nPOST /v1/tax/calculations\n\n```\ncurl https://api.stripe.com/v1/tax/calculations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d currency=usd \\  -d \"customer_details[address][line1]\"=\"920 5th Ave\" \\  -d \"customer_details[address][city]\"=Seattle \\  -d \"customer_details[address][state]\"=WA \\  -d \"customer_details[address][postal_code]\"=98104 \\  -d \"customer_details[address][country]\"=US \\  -d \"customer_details[address_source]\"=shipping \\  -d \"line_items[0][amount]\"=1499 \\  -d \"line_items[0][tax_code]\"=txcd_10000000 \\  -d \"line_items[0][reference]\"=\"Music Streaming Coupon\" \\  -d \"shipping_cost[amount]\"=300 \\  -d \"expand[0]\"=line_items\n```\n\n```\n{  \"id\": \"taxcalc_1OduxkBUZ691iUZ4iWvpMApI\",  \"object\": \"tax.calculation\",  \"amount_total\": 1953,  \"currency\": \"usd\",  \"customer\": null,  \"customer_details\": {    \"address\": {      \"city\": \"Seattle\",      \"country\": \"US\",      \"line1\": \"9205thAve\",      \"line2\": null,      \"postal_code\": \"98104\",      \"state\": \"WA\"    },    \"address_source\": \"shipping\",    \"ip_address\": null,    \"tax_ids\": [],    \"taxability_override\": \"none\"  },  \"expires_at\": 1706708005,  \"line_items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"tax_li_PSqf3RMNZa23H4\",        \"object\": \"tax.calculation_line_item\",        \"amount\": 1499,        \"amount_tax\": 154,        \"livemode\": false,        \"product\": null,        \"quantity\": 1,        \"reference\": \"Music Streaming Coupon\",        \"tax_behavior\": \"exclusive\",        \"tax_code\": \"txcd_10000000\"      }    ],    \"has_more\": false,    \"total_count\": 1,    \"url\": \"/v1/tax/calculations/taxcalc_1OduxkBUZ691iUZ4iWvpMApI/line_items\"  },  \"livemode\": false,  \"ship_from_details\": null,  \"shipping_cost\": {    \"amount\": 300,    \"amount_tax\": 0,    \"tax_behavior\": \"exclusive\",    \"tax_code\": \"txcd_92010001\"  },  \"tax_amount_exclusive\": 154,  \"tax_amount_inclusive\": 0,  \"tax_breakdown\": [    {      \"amount\": 154,      \"inclusive\": false,      \"tax_rate_details\": {        \"country\": \"US\",        \"percentage_decimal\": \"10.25\",        \"state\": \"WA\",        \"tax_type\": \"sales_tax\"      },      \"taxability_reason\": \"standard_rated\",      \"taxable_amount\": 1499    },    {      \"amount\": 0,      \"inclusive\": false,      \"tax_rate_details\": {        \"country\": \"DE\",        \"percentage_decimal\": \"0.0\",        \"state\": null,        \"tax_type\": \"vat\"      },      \"taxability_reason\": \"zero_rated\",      \"taxable_amount\": 300    }  ],  \"tax_date\": 1706535204}\n```\n\n## [Retrieve a calculation's line items](https://docs.stripe.com/api/tax/calculations/line_items)\n\nRetrieves the line items of a tax calculation as a collection, if the calculation hasn’t expired.\n\n### Parameters\n\n*   A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.\n    \n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.\n    \n\n### Returns\n\nA list of Line Item objects if the Tax calculation is found. Otherwise returns a ‘not found’ error.\n\nGET /v1/tax/calculations/:id/line\\_items\n\n```\ncurl -G https://api.stripe.com/v1/tax/calculations/taxcalc_1NpJD42eZvKYlo2CUti522cz/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/tax/calculations/taxcalc_1NpJD42eZvKYlo2CUti522cz/line_items\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/tax/calculations/taxcalc_1NpJD42eZvKYlo2CUti522cz/line_items\",      \"has_more\": false,      \"data\": [        {          \"id\": \"tax_li_OcYJb5mQOSSSWD\",          \"object\": \"tax.calculation_line_item\",          \"amount\": 1499,          \"amount_tax\": 148,          \"livemode\": false,          \"product\": null,          \"quantity\": 1,          \"reference\": \"Pepperoni Pizza\",          \"tax_behavior\": \"exclusive\",          \"tax_code\": \"txcd_40060003\"        }      ]    }    {...}    {...}  ],}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Tax Calculation object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/tax/transactions/create_reversal",
    "markdown": "# Create a reversal transaction | Stripe API Reference\n\nPartially or fully reverses a previously created `Transaction`.\n\n### Parameters\n\n*   If `partial`, the provided line item or shipping cost amounts are reversed. If `full`, the original transaction is fully reversed.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `full`<br><br>The original transaction is fully reversed. |\n    | `partial`<br><br>The provided line item amounts are reversed. |\n    \n*   #### \n    \n    original\\_transactionstringRequired\n    \n    The ID of the Transaction to partially or fully reverse.\n    \n*   A custom identifier for this reversal, such as `myOrder_123-refund_1`, which must be unique across all transactions. The reference helps identify this reversal transaction in exported [tax reports](https://docs.stripe.com/tax/reports).\n    \n*   #### \n    \n    flat\\_amountintegerRequired if mode=partial and line\\_items nor shipping\\_cost provided\n    \n    A flat amount to reverse across the entire transaction, in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) in negative. This value represents the total amount to refund from the transaction, including taxes.\n    \n*   #### \n    \n    line\\_itemsarray of objectsRequired if mode=partial and neither shipping\\_cost nor flat\\_amount is provided\n    \n    The line item amounts to reverse.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    shipping\\_costobjectRequired if mode=partial and neither line\\_items nor flat\\_amount is provided\n    \n\n### Returns\n\nA new Tax `Transaction` object representing the reversal.\n\nPOST /v1/tax/transactions/create\\_reversal\n\n```\ncurl https://api.stripe.com/v1/tax/transactions/create_reversal \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d mode=partial \\  -d original_transaction=tax_1NaTVd2eZvKYlo2CoOX2Nf7P \\  -d reference=myOrder_123-refund_1 \\  -d \"line_items[0][amount]\"=-1499 \\  -d \"line_items[0][amount_tax]\"=-148 \\  -d \"line_items[0][original_line_item]\"=tax_li_ONDxh8JZw14sP8 \\  -d \"line_items[0][reference]\"=\"refund of Pepperoni Pizza\" \\  -d \"expand[0]\"=line_items\n```\n\n```\n{  \"id\": \"tax_1NaTVd2eZvKYlo2CoOX2Nf7P\",  \"object\": \"tax.transaction\",  \"created\": 1690938353,  \"currency\": \"usd\",  \"customer\": null,  \"customer_details\": {    \"address\": {      \"city\": null,      \"country\": \"US\",      \"line1\": \"354 Oyster Point Blvd\",      \"line2\": \"\",      \"postal_code\": \"94080\",      \"state\": \"CA\"    },    \"address_source\": \"shipping\",    \"ip_address\": null,    \"tax_ids\": [],    \"taxability_override\": \"none\"  },  \"line_items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"tax_li_ONDxh8JZw14sP8\",        \"object\": \"tax.transaction_line_item\",        \"amount\": 1499,        \"amount_tax\": 148,        \"livemode\": false,        \"metadata\": null,        \"product\": null,        \"quantity\": 1,        \"reference\": \"Pepperoni Pizza\",        \"reversal\": null,        \"tax_behavior\": \"exclusive\",        \"tax_code\": \"txcd_40060003\",        \"type\": \"transaction\"      }    ],    \"has_more\": false,    \"url\": \"/v1/tax/transactions/tax_1NaTVd2eZvKYlo2CoOX2Nf7P/line_items\"  },  \"livemode\": false,  \"metadata\": null,  \"posted_at\": 1690932566,  \"reference\": \"myOrder_123\",  \"reversal\": null,  \"shipping_cost\": {    \"amount\": 300,    \"amount_tax\": 0,    \"tax_behavior\": \"exclusive\",    \"tax_code\": \"txcd_92010001\"  },  \"tax_date\": 1690938353,  \"type\": \"transaction\"}\n```\n\n## [Create a transaction from a calculation](https://docs.stripe.com/api/tax/transactions/create_from_calculation)\n\nCreates a Tax Transaction from a calculation, if that calculation hasn’t expired. Calculations expire after 90 days.\n\n### Parameters\n\n*   #### \n    \n    calculationstringRequired\n    \n    Tax Calculation ID to be used as input when creating the transaction.\n    \n*   A custom order or sale identifier, such as ‘myOrder\\_123’. Must be unique across all transactions, including reversals.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nA Tax `Transaction` object.\n\nPOST /v1/tax/transactions/create\\_from\\_calculation\n\n```\ncurl https://api.stripe.com/v1/tax/transactions/create_from_calculation \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d calculation=taxcalc_1NaTVT2eZvKYlo2CsqGeLeU2 \\  -d reference=myOrder_123 \\  -d \"expand[]\"=line_items\n```\n\n```\n{  \"id\": \"tax_1NaTVd2eZvKYlo2CoOX2Nf7P\",  \"object\": \"tax.transaction\",  \"created\": 1690938353,  \"currency\": \"usd\",  \"customer\": null,  \"customer_details\": {    \"address\": {      \"city\": null,      \"country\": \"US\",      \"line1\": \"354 Oyster Point Blvd\",      \"line2\": \"\",      \"postal_code\": \"94080\",      \"state\": \"CA\"    },    \"address_source\": \"shipping\",    \"ip_address\": null,    \"tax_ids\": [],    \"taxability_override\": \"none\"  },  \"line_items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"tax_li_ONDxh8JZw14sP8\",        \"object\": \"tax.transaction_line_item\",        \"amount\": 1499,        \"amount_tax\": 148,        \"livemode\": false,        \"metadata\": null,        \"product\": null,        \"quantity\": 1,        \"reference\": \"Pepperoni Pizza\",        \"reversal\": null,        \"tax_behavior\": \"exclusive\",        \"tax_code\": \"txcd_40060003\",        \"type\": \"transaction\"      }    ],    \"has_more\": false,    \"url\": \"/v1/tax/transactions/tax_1NaTVd2eZvKYlo2CoOX2Nf7P/line_items\"  },  \"livemode\": false,  \"metadata\": null,  \"posted_at\": 1690932566,  \"reference\": \"myOrder_123\",  \"reversal\": null,  \"shipping_cost\": {    \"amount\": 300,    \"amount_tax\": 0,    \"tax_behavior\": \"exclusive\",    \"tax_code\": \"txcd_92010001\"  },  \"tax_date\": 1690938353,  \"type\": \"transaction\"}\n```\n\n## [Retrieve a transaction's line items](https://docs.stripe.com/api/tax/transactions/line_items)\n\nRetrieves the line items of a committed standalone transaction as a collection.\n\n### Parameters\n\n*   A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.\n    \n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.\n    \n\n### Returns\n\nA list of Line Item objects if the Tax Transaction is found. Otherwise returns a ‘not found’ error.\n\nGET /v1/tax/transactions/:id/line\\_items\n\n```\ncurl https://api.stripe.com/v1/tax/transactions/tax_1NaTVd2eZvKYlo2CoOX2Nf7P/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tax_1NaTVd2eZvKYlo2CoOX2Nf7P\",  \"object\": \"list\",  \"url\": \"/v1/tax/transactions/tax_1NaTVd2eZvKYlo2CoOX2Nf7P/line_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tax_li_ONDxh8JZw14sP8\",      \"object\": \"tax.transaction_line_item\",      \"amount\": 1499,      \"amount_tax\": 148,      \"livemode\": false,      \"metadata\": null,      \"product\": null,      \"quantity\": 1,      \"reference\": \"Pepperoni Pizza\",      \"reversal\": null,      \"tax_behavior\": \"exclusive\",      \"tax_code\": \"txcd_40060003\",      \"type\": \"transaction\"    }  ]}\n```\n\n## [Retrieve a transaction](https://docs.stripe.com/api/tax/transactions/retrieve)\n\nRetrieves a Tax `Transaction` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA Tax `Transaction` object.\n\nGET /v1/tax/transactions/:id\n\n```\ncurl https://api.stripe.com/v1/tax/transactions/tax_1NaS0I2eZvKYlo2CRuMhUcmz \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tax_1NaS0I2eZvKYlo2CRuMhUcmz\",  \"object\": \"tax.transaction\",  \"created\": 1690932566,  \"currency\": \"usd\",  \"customer\": null,  \"customer_details\": {    \"address\": {      \"city\": \"South San Francisco\",      \"country\": \"US\",      \"line1\": \"354 Oyster Point Blvd\",      \"line2\": \"\",      \"postal_code\": \"94080\",      \"state\": \"CA\"    },    \"address_source\": \"shipping\",    \"ip_address\": null,    \"tax_ids\": [],    \"taxability_override\": \"none\"  },  \"line_items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"tax_li_ONCP443tgfS8I1\",        \"object\": \"tax.transaction_line_item\",        \"amount\": 1499,        \"amount_tax\": 148,        \"livemode\": false,        \"metadata\": null,        \"product\": null,        \"quantity\": 1,        \"reference\": \"Pepperoni Pizza\",        \"reversal\": null,        \"tax_behavior\": \"exclusive\",        \"tax_code\": \"txcd_40060003\",        \"type\": \"transaction\"      }    ],    \"has_more\": false,    \"url\": \"/v1/tax/transactions/tax_1NaS0I2eZvKYlo2CRuMhUcmz/line_items\"  },  \"livemode\": false,  \"metadata\": null,  \"posted_at\": 1690932566,  \"reference\": \"myOrder_123\",  \"reversal\": null,  \"shipping_cost\": {    \"amount\": 300,    \"amount_tax\": 0,    \"tax_behavior\": \"exclusive\",    \"tax_code\": \"txcd_92010001\"  },  \"ship_from_details\": {    \"address\": {      \"postal_code\": \"75001\",      \"state\": \"TX\",      \"country\": \"US\"    }  },  \"tax_date\": 1690932566,  \"type\": \"transaction\"}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Create a reversal transaction | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/tax/transactions/object",
    "markdown": "# The Tax Transaction object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the transaction.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n\n*   The customer’s details, such as address and tax IDs.\n    \n*   #### \n    \n    line\\_itemsnullable objectExpandable\n    \n    The tax collected or refunded, by line item.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   A custom unique identifier, such as ‘myOrder\\_123’.\n    \n*   If `reversal`, this transaction reverses an earlier transaction.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `reversal`<br><br>Represents a partial or full reversal of an earlier transaction. |\n    | `transaction`<br><br>Represents a customer sale or order. |\n    \n\n### More attributes\n\n*   #### \n    \n    ship\\_from\\_detailsnullable object\n    \n*   #### \n    \n    shipping\\_costnullable object\n    \n\nThe Tax Transaction object\n\n```\n{  \"id\": \"tax_1NaS0I2eZvKYlo2CRuMhUcmz\",  \"object\": \"tax.transaction\",  \"created\": 1690932566,  \"currency\": \"usd\",  \"customer\": null,  \"customer_details\": {    \"address\": {      \"city\": \"South San Francisco\",      \"country\": \"US\",      \"line1\": \"354 Oyster Point Blvd\",      \"line2\": \"\",      \"postal_code\": \"94080\",      \"state\": \"CA\"    },    \"address_source\": \"shipping\",    \"ip_address\": null,    \"tax_ids\": [],    \"taxability_override\": \"none\"  },  \"line_items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"tax_li_ONCP443tgfS8I1\",        \"object\": \"tax.transaction_line_item\",        \"amount\": 1499,        \"amount_tax\": 148,        \"livemode\": false,        \"metadata\": null,        \"product\": null,        \"quantity\": 1,        \"reference\": \"Pepperoni Pizza\",        \"reversal\": null,        \"tax_behavior\": \"exclusive\",        \"tax_code\": \"txcd_40060003\",        \"type\": \"transaction\"      }    ],    \"has_more\": false,    \"url\": \"/v1/tax/transactions/tax_1NaS0I2eZvKYlo2CRuMhUcmz/line_items\"  },  \"livemode\": false,  \"metadata\": null,  \"posted_at\": 1690932566,  \"reference\": \"myOrder_123\",  \"reversal\": null,  \"shipping_cost\": {    \"amount\": 300,    \"amount_tax\": 0,    \"tax_behavior\": \"exclusive\",    \"tax_code\": \"txcd_92010001\"  },  \"ship_from_details\": {    \"address\": {      \"postal_code\": \"75001\",      \"state\": \"TX\",      \"country\": \"US\"    }  },  \"tax_date\": 1690932566,  \"type\": \"transaction\"}\n```\n\n## [Create a reversal transaction](https://docs.stripe.com/api/tax/transactions/create_reversal)\n\nPartially or fully reverses a previously created `Transaction`.\n\n### Parameters\n\n*   If `partial`, the provided line item or shipping cost amounts are reversed. If `full`, the original transaction is fully reversed.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `full`<br><br>The original transaction is fully reversed. |\n    | `partial`<br><br>The provided line item amounts are reversed. |\n    \n*   #### \n    \n    original\\_transactionstringRequired\n    \n    The ID of the Transaction to partially or fully reverse.\n    \n*   A custom identifier for this reversal, such as `myOrder_123-refund_1`, which must be unique across all transactions. The reference helps identify this reversal transaction in exported [tax reports](https://docs.stripe.com/tax/reports).\n    \n*   #### \n    \n    flat\\_amountintegerRequired if mode=partial and line\\_items nor shipping\\_cost provided\n    \n    A flat amount to reverse across the entire transaction, in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) in negative. This value represents the total amount to refund from the transaction, including taxes.\n    \n*   #### \n    \n    line\\_itemsarray of objectsRequired if mode=partial and neither shipping\\_cost nor flat\\_amount is provided\n    \n    The line item amounts to reverse.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    shipping\\_costobjectRequired if mode=partial and neither line\\_items nor flat\\_amount is provided\n    \n\n### Returns\n\nA new Tax `Transaction` object representing the reversal.\n\nPOST /v1/tax/transactions/create\\_reversal\n\n```\ncurl https://api.stripe.com/v1/tax/transactions/create_reversal \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d mode=partial \\  -d original_transaction=tax_1NaTVd2eZvKYlo2CoOX2Nf7P \\  -d reference=myOrder_123-refund_1 \\  -d \"line_items[0][amount]\"=-1499 \\  -d \"line_items[0][amount_tax]\"=-148 \\  -d \"line_items[0][original_line_item]\"=tax_li_ONDxh8JZw14sP8 \\  -d \"line_items[0][reference]\"=\"refund of Pepperoni Pizza\" \\  -d \"expand[0]\"=line_items\n```\n\n```\n{  \"id\": \"tax_1NaTVd2eZvKYlo2CoOX2Nf7P\",  \"object\": \"tax.transaction\",  \"created\": 1690938353,  \"currency\": \"usd\",  \"customer\": null,  \"customer_details\": {    \"address\": {      \"city\": null,      \"country\": \"US\",      \"line1\": \"354 Oyster Point Blvd\",      \"line2\": \"\",      \"postal_code\": \"94080\",      \"state\": \"CA\"    },    \"address_source\": \"shipping\",    \"ip_address\": null,    \"tax_ids\": [],    \"taxability_override\": \"none\"  },  \"line_items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"tax_li_ONDxh8JZw14sP8\",        \"object\": \"tax.transaction_line_item\",        \"amount\": 1499,        \"amount_tax\": 148,        \"livemode\": false,        \"metadata\": null,        \"product\": null,        \"quantity\": 1,        \"reference\": \"Pepperoni Pizza\",        \"reversal\": null,        \"tax_behavior\": \"exclusive\",        \"tax_code\": \"txcd_40060003\",        \"type\": \"transaction\"      }    ],    \"has_more\": false,    \"url\": \"/v1/tax/transactions/tax_1NaTVd2eZvKYlo2CoOX2Nf7P/line_items\"  },  \"livemode\": false,  \"metadata\": null,  \"posted_at\": 1690932566,  \"reference\": \"myOrder_123\",  \"reversal\": null,  \"shipping_cost\": {    \"amount\": 300,    \"amount_tax\": 0,    \"tax_behavior\": \"exclusive\",    \"tax_code\": \"txcd_92010001\"  },  \"tax_date\": 1690938353,  \"type\": \"transaction\"}\n```\n\n## [Create a transaction from a calculation](https://docs.stripe.com/api/tax/transactions/create_from_calculation)\n\nCreates a Tax Transaction from a calculation, if that calculation hasn’t expired. Calculations expire after 90 days.\n\n### Parameters\n\n*   #### \n    \n    calculationstringRequired\n    \n    Tax Calculation ID to be used as input when creating the transaction.\n    \n*   A custom order or sale identifier, such as ‘myOrder\\_123’. Must be unique across all transactions, including reversals.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nA Tax `Transaction` object.\n\nPOST /v1/tax/transactions/create\\_from\\_calculation\n\n```\ncurl https://api.stripe.com/v1/tax/transactions/create_from_calculation \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d calculation=taxcalc_1NaTVT2eZvKYlo2CsqGeLeU2 \\  -d reference=myOrder_123 \\  -d \"expand[]\"=line_items\n```\n\n```\n{  \"id\": \"tax_1NaTVd2eZvKYlo2CoOX2Nf7P\",  \"object\": \"tax.transaction\",  \"created\": 1690938353,  \"currency\": \"usd\",  \"customer\": null,  \"customer_details\": {    \"address\": {      \"city\": null,      \"country\": \"US\",      \"line1\": \"354 Oyster Point Blvd\",      \"line2\": \"\",      \"postal_code\": \"94080\",      \"state\": \"CA\"    },    \"address_source\": \"shipping\",    \"ip_address\": null,    \"tax_ids\": [],    \"taxability_override\": \"none\"  },  \"line_items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"tax_li_ONDxh8JZw14sP8\",        \"object\": \"tax.transaction_line_item\",        \"amount\": 1499,        \"amount_tax\": 148,        \"livemode\": false,        \"metadata\": null,        \"product\": null,        \"quantity\": 1,        \"reference\": \"Pepperoni Pizza\",        \"reversal\": null,        \"tax_behavior\": \"exclusive\",        \"tax_code\": \"txcd_40060003\",        \"type\": \"transaction\"      }    ],    \"has_more\": false,    \"url\": \"/v1/tax/transactions/tax_1NaTVd2eZvKYlo2CoOX2Nf7P/line_items\"  },  \"livemode\": false,  \"metadata\": null,  \"posted_at\": 1690932566,  \"reference\": \"myOrder_123\",  \"reversal\": null,  \"shipping_cost\": {    \"amount\": 300,    \"amount_tax\": 0,    \"tax_behavior\": \"exclusive\",    \"tax_code\": \"txcd_92010001\"  },  \"tax_date\": 1690938353,  \"type\": \"transaction\"}\n```\n\n## [Retrieve a transaction's line items](https://docs.stripe.com/api/tax/transactions/line_items)\n\nRetrieves the line items of a committed standalone transaction as a collection.\n\n### Parameters\n\n*   A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.\n    \n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.\n    \n\n### Returns\n\nA list of Line Item objects if the Tax Transaction is found. Otherwise returns a ‘not found’ error.\n\nGET /v1/tax/transactions/:id/line\\_items\n\n```\ncurl https://api.stripe.com/v1/tax/transactions/tax_1NaTVd2eZvKYlo2CoOX2Nf7P/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tax_1NaTVd2eZvKYlo2CoOX2Nf7P\",  \"object\": \"list\",  \"url\": \"/v1/tax/transactions/tax_1NaTVd2eZvKYlo2CoOX2Nf7P/line_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tax_li_ONDxh8JZw14sP8\",      \"object\": \"tax.transaction_line_item\",      \"amount\": 1499,      \"amount_tax\": 148,      \"livemode\": false,      \"metadata\": null,      \"product\": null,      \"quantity\": 1,      \"reference\": \"Pepperoni Pizza\",      \"reversal\": null,      \"tax_behavior\": \"exclusive\",      \"tax_code\": \"txcd_40060003\",      \"type\": \"transaction\"    }  ]}\n```\n\n## [Retrieve a transaction](https://docs.stripe.com/api/tax/transactions/retrieve)\n\nRetrieves a Tax `Transaction` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA Tax `Transaction` object.\n\nGET /v1/tax/transactions/:id\n\n```\ncurl https://api.stripe.com/v1/tax/transactions/tax_1NaS0I2eZvKYlo2CRuMhUcmz \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tax_1NaS0I2eZvKYlo2CRuMhUcmz\",  \"object\": \"tax.transaction\",  \"created\": 1690932566,  \"currency\": \"usd\",  \"customer\": null,  \"customer_details\": {    \"address\": {      \"city\": \"South San Francisco\",      \"country\": \"US\",      \"line1\": \"354 Oyster Point Blvd\",      \"line2\": \"\",      \"postal_code\": \"94080\",      \"state\": \"CA\"    },    \"address_source\": \"shipping\",    \"ip_address\": null,    \"tax_ids\": [],    \"taxability_override\": \"none\"  },  \"line_items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"tax_li_ONCP443tgfS8I1\",        \"object\": \"tax.transaction_line_item\",        \"amount\": 1499,        \"amount_tax\": 148,        \"livemode\": false,        \"metadata\": null,        \"product\": null,        \"quantity\": 1,        \"reference\": \"Pepperoni Pizza\",        \"reversal\": null,        \"tax_behavior\": \"exclusive\",        \"tax_code\": \"txcd_40060003\",        \"type\": \"transaction\"      }    ],    \"has_more\": false,    \"url\": \"/v1/tax/transactions/tax_1NaS0I2eZvKYlo2CRuMhUcmz/line_items\"  },  \"livemode\": false,  \"metadata\": null,  \"posted_at\": 1690932566,  \"reference\": \"myOrder_123\",  \"reversal\": null,  \"shipping_cost\": {    \"amount\": 300,    \"amount_tax\": 0,    \"tax_behavior\": \"exclusive\",    \"tax_code\": \"txcd_92010001\"  },  \"ship_from_details\": {    \"address\": {      \"postal_code\": \"75001\",      \"state\": \"TX\",      \"country\": \"US\"    }  },  \"tax_date\": 1690932566,  \"type\": \"transaction\"}\n```",
    "title": "The Tax Transaction object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/tax/transactions/create_from_calculation",
    "markdown": "# Create a transaction from a calculation\n\nCreates a Tax Transaction from a calculation, if that calculation hasn’t expired. Calculations expire after 90 days.\n\n### Parameters\n\n*   #### \n    \n    calculationstringRequired\n    \n    Tax Calculation ID to be used as input when creating the transaction.\n    \n*   A custom order or sale identifier, such as ‘myOrder\\_123’. Must be unique across all transactions, including reversals.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nA Tax `Transaction` object.\n\nPOST /v1/tax/transactions/create\\_from\\_calculation\n\n```\ncurl https://api.stripe.com/v1/tax/transactions/create_from_calculation \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d calculation=taxcalc_1NaTVT2eZvKYlo2CsqGeLeU2 \\  -d reference=myOrder_123 \\  -d \"expand[]\"=line_items\n```\n\n```\n{  \"id\": \"tax_1NaTVd2eZvKYlo2CoOX2Nf7P\",  \"object\": \"tax.transaction\",  \"created\": 1690938353,  \"currency\": \"usd\",  \"customer\": null,  \"customer_details\": {    \"address\": {      \"city\": null,      \"country\": \"US\",      \"line1\": \"354 Oyster Point Blvd\",      \"line2\": \"\",      \"postal_code\": \"94080\",      \"state\": \"CA\"    },    \"address_source\": \"shipping\",    \"ip_address\": null,    \"tax_ids\": [],    \"taxability_override\": \"none\"  },  \"line_items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"tax_li_ONDxh8JZw14sP8\",        \"object\": \"tax.transaction_line_item\",        \"amount\": 1499,        \"amount_tax\": 148,        \"livemode\": false,        \"metadata\": null,        \"product\": null,        \"quantity\": 1,        \"reference\": \"Pepperoni Pizza\",        \"reversal\": null,        \"tax_behavior\": \"exclusive\",        \"tax_code\": \"txcd_40060003\",        \"type\": \"transaction\"      }    ],    \"has_more\": false,    \"url\": \"/v1/tax/transactions/tax_1NaTVd2eZvKYlo2CoOX2Nf7P/line_items\"  },  \"livemode\": false,  \"metadata\": null,  \"posted_at\": 1690932566,  \"reference\": \"myOrder_123\",  \"reversal\": null,  \"shipping_cost\": {    \"amount\": 300,    \"amount_tax\": 0,    \"tax_behavior\": \"exclusive\",    \"tax_code\": \"txcd_92010001\"  },  \"tax_date\": 1690938353,  \"type\": \"transaction\"}\n```\n\n## [Retrieve a transaction's line items](https://docs.stripe.com/api/tax/transactions/line_items)\n\nRetrieves the line items of a committed standalone transaction as a collection.\n\n### Parameters\n\n*   A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.\n    \n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.\n    \n\n### Returns\n\nA list of Line Item objects if the Tax Transaction is found. Otherwise returns a ‘not found’ error.\n\nGET /v1/tax/transactions/:id/line\\_items\n\n```\ncurl https://api.stripe.com/v1/tax/transactions/tax_1NaTVd2eZvKYlo2CoOX2Nf7P/line_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tax_1NaTVd2eZvKYlo2CoOX2Nf7P\",  \"object\": \"list\",  \"url\": \"/v1/tax/transactions/tax_1NaTVd2eZvKYlo2CoOX2Nf7P/line_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tax_li_ONDxh8JZw14sP8\",      \"object\": \"tax.transaction_line_item\",      \"amount\": 1499,      \"amount_tax\": 148,      \"livemode\": false,      \"metadata\": null,      \"product\": null,      \"quantity\": 1,      \"reference\": \"Pepperoni Pizza\",      \"reversal\": null,      \"tax_behavior\": \"exclusive\",      \"tax_code\": \"txcd_40060003\",      \"type\": \"transaction\"    }  ]}\n```\n\n## [Retrieve a transaction](https://docs.stripe.com/api/tax/transactions/retrieve)\n\nRetrieves a Tax `Transaction` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA Tax `Transaction` object.\n\nGET /v1/tax/transactions/:id\n\n```\ncurl https://api.stripe.com/v1/tax/transactions/tax_1NaS0I2eZvKYlo2CRuMhUcmz \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tax_1NaS0I2eZvKYlo2CRuMhUcmz\",  \"object\": \"tax.transaction\",  \"created\": 1690932566,  \"currency\": \"usd\",  \"customer\": null,  \"customer_details\": {    \"address\": {      \"city\": \"South San Francisco\",      \"country\": \"US\",      \"line1\": \"354 Oyster Point Blvd\",      \"line2\": \"\",      \"postal_code\": \"94080\",      \"state\": \"CA\"    },    \"address_source\": \"shipping\",    \"ip_address\": null,    \"tax_ids\": [],    \"taxability_override\": \"none\"  },  \"line_items\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"tax_li_ONCP443tgfS8I1\",        \"object\": \"tax.transaction_line_item\",        \"amount\": 1499,        \"amount_tax\": 148,        \"livemode\": false,        \"metadata\": null,        \"product\": null,        \"quantity\": 1,        \"reference\": \"Pepperoni Pizza\",        \"reversal\": null,        \"tax_behavior\": \"exclusive\",        \"tax_code\": \"txcd_40060003\",        \"type\": \"transaction\"      }    ],    \"has_more\": false,    \"url\": \"/v1/tax/transactions/tax_1NaS0I2eZvKYlo2CRuMhUcmz/line_items\"  },  \"livemode\": false,  \"metadata\": null,  \"posted_at\": 1690932566,  \"reference\": \"myOrder_123\",  \"reversal\": null,  \"shipping_cost\": {    \"amount\": 300,    \"amount_tax\": 0,    \"tax_behavior\": \"exclusive\",    \"tax_code\": \"txcd_92010001\"  },  \"ship_from_details\": {    \"address\": {      \"postal_code\": \"75001\",      \"state\": \"TX\",      \"country\": \"US\"    }  },  \"tax_date\": 1690932566,  \"type\": \"transaction\"}\n```\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Create a transaction from a calculation | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/elements_object/create_element?type=afterpayClearpayMessage",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/js/elements_object/create_element?type=affirmMessage",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/payments/oxxo",
    "markdown": "# OXXO payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to accept payments with OXXO.\n\nOXXO is a Mexican chain of convenience stores with thousands of locations across Latin America and represents nearly 20% of online transactions in Mexico. OXXO allows customers to pay bills and online purchases in-store with cash.\n\nTo complete a transaction, customers receive a voucher that includes a reference number for the transaction. [Customers](https://docs.stripe.com/api/customers \"Customers\") then bring their voucher to an OXXO store to make a cash payment. You will receive payment confirmation by the next business day along with the settled funds.\n\n*   **Customer locations**\n    \n    Mexico\n    \n*   **Presentment currency**\n    \n    MXN\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Cash-based payment method\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    No / no\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\nStep 1. Selects OXXO at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/voucher.192ad10df702bb52ef9601e679d1a670.svg)\n\nStep 2. Receives voucher with transaction reference\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/store.6026ce09a3857d0c5e532b8723c3e371.svg)\n\nStep 3. Provides voucher and cash payment at OXXO store\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\nStep 4. Receives notification that payment is complete\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate OXXO and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable OXXO. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n[Payment Links](https://docs.stripe.com/payment-links) also supports adding OXXO from the Dashboard.\n\nIf your integration requires manually listing payment methods, learn how to [manually configure OXXO as a payment](https://docs.stripe.com/payments/oxxo/accept-a-payment).\n\nCheck out the OXXO [sample on GitHub](https://github.com/stripe-samples/accept-a-payment).\n\n## Disputed payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOXXO payments have a low risk of fraud or unrecognized payments because the customer must provide cash payment in person at an OXXO convenience store. Customers can’t dispute OXXO payments.\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOXXO payments can’t be refunded. Some merchants have created a separate process to credit their customers who reach out directly.\n\n## Amount limits ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe amount for a single OXXO must be at least 10.00 MXN and no more than 10,000.00 MXN.",
    "title": "OXXO payments | Stripe Documentation",
    "description": "Learn how to accept payments with OXXO.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/custom-accounts",
    "markdown": "# Using Connect with Custom connected accounts\n\n## Use Custom connected accounts with Connect to control your connected accounts' entire experience.\n\n#### Note\n\nIdentity verification requirements are updated as laws and regulations change around the world. If you’re building your own onboarding flow to onboard accounts, you must plan on reviewing and updating onboarding requirements at least every six months. To avoid this maintenance obligation, use [Connect Onboarding for Custom Accounts](https://docs.stripe.com/connect/custom/hosted-onboarding).\n\nA _Custom_ connected account is almost completely invisible to the account holder. You, the platform, are responsible for all interactions with your connected accounts and for collecting all the information needed to verify each account.\n\nWith Custom connected accounts, you can modify the connected account’s details and settings through the API, including managing their bank accounts and [payout](https://docs.stripe.com/payouts \"payout\") schedule. Since Custom connected account holders can’t log into Stripe, it’s up to you to build the onboarding flow, connected account dashboard, reporting functionality, and communication channels.\n\nCreating a Custom connected account involves the following steps:\n\n1.  Make sure you meet the [minimum requirements](#requirements).\n2.  Properly identify the [country](#country) and any related requirements.\n3.  [Create](#create) the account.\n4.  Complete the [identity verification](#identity-verification) process.\n\n#### Note\n\nTo comply with French PSD2 regulations, platforms in France [must use account tokens](https://stripe.com/guides/frequently-asked-questions-about-stripe-connect-and-psd2#regulatory-status-of-connect). An additional benefit of tokens is that the platform doesn’t have to store PII data, which is transferred from the connected account directly to Stripe. For platforms in other countries, we recommend using account tokens, but they aren’t required.\n\n## Requirements for creating Custom connected accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo use Custom connected accounts, you must meet all of these requirements:\n\n*   **Minimum API version**: You must be using an API version at least as recent as 2014-12-17. You can [view and upgrade](https://dashboard.stripe.com/developers) your API version in the Dashboard if needed.\n*   **Terms of Service update**: Creating Custom connected accounts requires an [update to your terms of service](https://docs.stripe.com/connect/updating-service-agreements#tos-acceptance), as it must include a reference to Stripe’s services agreement. Stripe recommends that you consult with your attorneys on whether you should update your terms acceptance language to include reference to Stripe’s terms.\n*   **Handling information requests**: Instead of requesting information—such as a Social Security Number or passport scan—directly from your connected account user, Stripe requests the information it needs from you. You must collect that information from your connected account and provide it to Stripe. Otherwise, Stripe might disable payouts to the connected account.\n*   **Platform in a supported country**: Platforms in Australia, Austria, Belgium, Brazil, Bulgaria, Canada, Cyprus, the Czech Republic, Denmark, Estonia, Finland, France, Germany, Greece, Hong Kong, Hungary, India, Ireland, Italy, Japan, Latvia, Lithuania, Luxembourg, Malta, Mexico, the Netherlands, New Zealand, Norway, Poland, Portugal, Romania, Singapore, Slovakia, Slovenia, Spain, Sweden, Switzerland, Thailand, the United Kingdom, and the United States can create Custom accounts for any country [Stripe supports](https://stripe.com/global). [Contact us](mailto:connect@stripe.com) to be notified when platforms in your country can use Custom connected accounts.\n*   **Countries that don’t support self-serve**: Due to restrictions that apply when using Connect in the [United Arab Emirates](https://support.stripe.com/questions/connect-availability-in-the-uae), [India](https://support.stripe.com/questions/stripe-india-support-for-marketplaces), and [Thailand](https://support.stripe.com/questions/stripe-thailand-support-for-marketplace), platform users in these countries can’t self-serve Custom connected accounts. To begin onboarding for Custom connected accounts in these countries, [contact us](https://stripe.com/contact/sales).\n*   **Platforms in the UAE**: Platforms in the UAE can only use Custom connected accounts based in the UAE with the following charge types: [destination\\_charges](https://docs.stripe.com/connect/destination-charges) and [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers). Destination charges using the [on\\_behalf\\_of](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-on_behalf_of) attribute are not yet supported for UAE platforms.\n\n#### Caution\n\nPlatforms outside of Mexico that want to create Custom connected accounts in Mexico and make them [settlement merchants](https://docs.stripe.com/connect/account-capabilities#card-payments) require further review. [Contact us](https://support.stripe.com/contact) to start the process.\n\n*   **Vetting for fraud**: Because your platform is responsible for losses incurred by Custom connected accounts, you must scrutinize all accounts that sign up via your platform for potential fraud. Refer to our [risk management best practices guide](https://docs.stripe.com/connect/risk-management/best-practices) for more information.\n\nNote there’s an [additional cost](https://stripe.com/connect/pricing) for active Custom connected accounts. A Custom connected account is considered active if it has received at least one successful payout in a given month.\n\n[](#country)\n\nThe only piece of information you need to create a Custom connected account is the country where the individual or business primarily operates. You can collect everything else at a later time.\n\nFor example, if you’re in the United States and the business or individual you’re creating a connected account for is legally represented in Canada, assign `CA` as the country.\n\nThe country value also determines the [required verification information](https://docs.stripe.com/connect/required-verification-information) for the connected account.\n\n[](#create)\n\nThe basic process to create and connect a Custom connected account is to call the account creation endpoint, setting `type` to `custom` and providing a country and the [appropriate capabilities](https://docs.stripe.com/connect/account-capabilities#supported-capabilities).\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d country=US \\  -d type=custom \\  -d \"capabilities[card_payments][requested]\"=true \\  -d \"capabilities[transfers][requested]\"=true`\n\n#### Caution\n\nThe result of a successful API call is the connected account information:\n\n`{   ...   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   \"type\": \"custom\"   ... }`\n\nStore the `id` in your database—it’s the account ID. You’ll provide this value to [authenticate](https://docs.stripe.com/connect/authentication) as the connected account by passing it into requests in the `Stripe-Account` header.\n\n#### Note\n\nStore the received account ID. You need this information to perform requests on the connected account’s behalf.\n\n[](#identity-verification)\n\nAn account created with only a country is fairly limited: it can only receive a small amount of funds. If you wish to enable payouts and keep the account in good standing, you need to [provide more information](https://docs.stripe.com/connect/identity-verification) about the account holder. The [required verification information](https://docs.stripe.com/connect/required-verification-information) page lists the minimum and likely identity verification requirements.\n\nThe easiest way to collect this information is to integrate [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding), which lets Stripe take care of the verification complexity. Otherwise, you must not only write your own API calls for initial integration, but also continue to check for changing onboarding requirements because of changing regulations around the world.\n\nYou can collect required information when you [create the account](https://docs.stripe.com/api#create_account) or by [updating the account](https://docs.stripe.com/api#update_account) later. At the very least, we recommend collecting and providing the connected account user’s name and date of birth up front. If you collect [address information](https://support.stripe.com/questions/connect-address-validation) upfront, make sure to validate the state value for US, CA, and AU connected accounts in your onboarding flow.\n\n#### Note\n\nFor accounts with [business\\_type](https://docs.stripe.com/api/accounts/object#account_object-business_type) set to `individual`, provide at least one `individual` property (for example, `individual.first_name`) and a [Person](https://docs.stripe.com/api/persons/object) object is created automatically. If you don’t, or for accounts with the `business_type` set to `company`, you need to [create each Person](https://docs.stripe.com/api/persons/create) for the account.\n\n## Webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter an account is created, all notifications about changes to the account are sent to your [webhooks](https://docs.stripe.com/connect/webhooks) as `account.updated` events. Provide your [Connect](https://docs.stripe.com/connect \"Connect\") [webhook](https://docs.stripe.com/webhooks \"webhook\") URL in your [account settings](https://dashboard.stripe.com/account/webhooks) and then watch for these events and respond to them as needed.",
    "title": "Using Connect with Custom connected accounts | Stripe Documentation",
    "description": "Use Custom connected accounts with Connect to control your connected accounts' entire experience.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/stripe-connector-for-salesforce/enablement/code-examples-agnostic",
    "markdown": "# Stripe Connector for Salesforce Platform AgnosticInvocable Example\n\n`public class stripePayment {     @AuraEnabled(cacheable=true)     public static String paymentIntent(String StripeAccountID, String amount, String stripecurrency, String orderID, String onBehalfOf, String customerId) {         // Create Call for invocable         stripeGC.RawInvocableParameters parameters = new stripeGC.RawInvocableParameters();         // Add HTTP Method         parameters.method = 'POST';          // Add endpoint         parameters.endpoint = '/v1/payment_intents';          // Get the Stripe Account ID from Salesforce         // This assumes you already have the Stripe Account ID and will pass it in as a parameter         // Alternately, you could use a SOQL query to obtain the Stripe Account ID as per previous examples         parameters.accountId = StripeAccountID;         parameters.connectAccount = onBehalfOf;          // Prepare the request body         List<String> postPaymentIntentParameters = new List<String>{             'amount=' + amount, // Pass in the amount to be charged for this payment intent in the minimum currency unit (for example, cents for USD)             'currency=' + stripecurrency, // Pass in the currency for this payment intent (for example, 'usd' for USD)             'customer=' + customerId, // Pass in customer to payment intent             'automatic_payment_methods[enabled]=true', //Turning on automatic payment methods             'metadata[order_id]=' + orderID         };          parameters.requestBody = String.join(postPaymentIntentParameters, '&');          List<stripeGC.RawInvocableParameters> paramsCollection = new List<stripeGC.RawInvocableParameters>{ parameters };          List<String> results = stripeGC.AgnosticInvocable.callStripeEndpoint(paramsCollection);          return (results != null && results.size() > 0) ? results[0] : null;     } }`",
    "title": "Stripe Connector for Salesforce Platform AgnosticInvocable Example | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connectors/stripe-connector-for-salesforce/enablement/code-examples-invocations",
    "markdown": "# Stripe Connector for Salesforce Platform invocations\n\nThis guide hands you actionable code examples, that walk you through essential tasks like creating Stripe customers, initiating checkout sessions, and listing existing customers—all directly from Salesforce. Geared toward Salesforce administrators, developers, and anyone interested in seamless Stripe-Salesforce integrations, these examples utilize custom Apex classes for class based invocations using Stripe API calls. Whether you’re building a new e-commerce solution or upgrading your payment workflows, this guide equips you with the tools you need for efficient Stripe operations in Salesforce.\n\n### Create a Customer in Stripe ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following code example creates a Stripe [Customer](https://docs.stripe.com/api/customers) with a `name`, `email`, and `metadata` set.\n\n`// Step 1: Initialize an instance of the stripeGC.v01_CreateCustomers.V1 class stripeGC.CreateCustomers.V1 params = new stripeGC.CreateCustomers.V1();       List<stripeGC.CreateCustomers.V1> paramsCollection = new List<stripeGC.CreateCustomers.V1>{           params       }; // Step 2: Set the accountRecordId parameter to the record ID of the Stripe Account you wish to connect to params.accountRecordId = 'a028B0000029RhlQAE';  // Step 3: Set the metadata field stripeGC.Metadata metadata = new stripeGC.Metadata(); metadata.listAdditionalStringField = new List<stripeGC.AdditionalString>{    new stripeGC.AdditionalString('AccountID', 'abc123') }; params.metadata = metadata;  // Step 4: Set the name field params.name = 'Tim Smith';  // Step 5: Set the email field params.email = 'example@example.com';  // Step 6: Call the stripeGC.v01_PostCustomers.postCustomers_2022_11_15 method List<stripeGC.Customer> customers = stripeGC.v01_CreateCustomers.createCustomers_2022_11_15(paramsCollection);`\n\n## Create a Checkout Session![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following code example creates a Checkout session in Stripe:\n\n`// Step 1: Initialize an instance of the stripeGC.v01_CreateCheckoutSessions.V1 class stripeGC.CreateCheckoutSessions.V1 params = new stripeGC.CreateCheckoutSessions.V1();       List<stripeGC.CreateCheckoutSessions.V1> paramsCollection = new List<stripeGC.CreateCheckoutSessions.V1>{           params       }; // Step 2: Set the accountRecordId parameter to the record ID of the Stripe Account you wish to connect to params.accountRecordId = 'a028B0000029RhlQAE';  // Step 3: Set the checkout line items stripeGC.CreateCheckoutSessionsReqLineItem cliparams = new stripeGC.CreateCheckoutSessionsReqLineItem(); cliparams.price = 'price_1NhcVkBSPQ8HL343ZNsBp'; //price id from Stripe. cliparams.quantity = 1; List<stripeGC.CreateCheckoutSessionsReqLineItem> cliparamlist = new List<stripeGC.CreateCheckoutSessionsReqLineItem>(); cliparamlist.add(cliparams); params.lineItems = cliparamlist;  // Step 4: Set mode,successurl,client ref fields params.mode = 'payment'; params.successUrl = '[https://stripe.com](https://stripe.com/)'; params.clientReferenceId = 'abcd123';  // Step 5: Call the stripeGC.v01_CreateCheckoutSessions.CreateCheckoutSessions_2022_11_15 method List<stripeGC.CheckoutSession> results = stripeGC.v01_CreateCheckoutSessions.createCheckoutSessions_2022_11_15(paramsCollection);`\n\n### List Customers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following code example lists all of your customers that are stored in Stripe:\n\n`// Step 1: Initialize an instance of the stripeGC.v01_ListCustomers.V1 class stripeGC.ListCustomers.V1 params = new stripeGC.ListCustomers.V1(); List<stripeGC.ListCustomers.V1> paramsCollection = new List<stripeGC.ListCustomers.V1>{    params };  // Step 2: Set the accountRecordId parameter to the record ID of the Stripe Account you wish to connect to params.accountRecordId = 'a028B0000029RhlQAE';  // Step 3: Call the stripeGC.v01_ListCustomers.listCustomers_2022_11_15 method List<stripeGC.CustomerResourceCustomerList > results = stripeGC.v01_ListCustomers.listCustomers_2022_11_15(paramsCollection); System.debug(results[0]);`",
    "title": "Stripe Connector for Salesforce Platform invocations | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/components/badge",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nUnlike [buttons](https://docs.stripe.com/stripe-apps/components/button), badges are read-only and don’t perform any actions, such as `onPress` events. Use badges to indicate the state of an item or object in your applications user interface.\n\nTo add the `Badge` component to your app:\n\n`import {Badge} from '@stripe/ui-extension-sdk/ui';`\n\nThe following types of badges are available:\n\n*   **Neutral**: Neutral label, no action required, everything is working as expected\n*   **Info**: Identifies an object or action with an important attribute or a key state\n*   **Positive**: Positive, neutral and important outcome or category, no action required\n*   **Negative**: Negative, important outcome or category, no action required\n*   **Warning**: Needs immediate action, optional to resolve\n*   **Urgent**: Needs immediate action, strong requirement to resolve\n\n`<Badge>   Neutral </Badge>  <Badge type=\"info\">   Info </Badge>  <Badge type=\"positive\">   Positive </Badge>  <Badge type=\"negative\">   Negative </Badge>  <Badge type=\"warning\">   Warning </Badge>  <Badge type=\"urgent\">   Urgent </Badge>`\n\n### Badge props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `children` | Required<br><br>`React.ReactNode`<br><br>The contents of the component. |\n| `type` | Optional<br><br>`(\"neutral\" \\| \"urgent\" \\| \"warning\" \\| \"negative\" \\| \"positive\" \\| \"info\") \\| undefined` |",
    "title": "Badge | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/components/switch",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nTo add the `Switch` component to your app:\n\n`import {Switch} from '@stripe/ui-extension-sdk/ui';`\n\nA common use of Switches is for settings that you save immediately—in other words, `Switch` is rarely part of a larger form that needs to be submitted separately.\n\nHere’s a simple example of a `Switch`.\n\n`<Switch   label=\"This is a Switch.\"   onChange={(e) => {     console.log(e.target.checked);   }} />`\n\n### Switch props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `autoFocus` | Optional<br><br>`boolean \\| undefined`<br><br>If `true`, React will focus the element on mount. |\n| `checked` | Optional<br><br>`boolean \\| undefined`<br><br>Controls whether the input is selected. When you pass this prop, you must also pass an `onChange` handler that updates the passed value. |\n| `defaultChecked` | Optional<br><br>`boolean \\| undefined`<br><br>Specifies the initial value that a user can change. |\n| `description` | Optional<br><br>`string \\| undefined`<br><br>Descriptive text that will be rendered adjacent to the control’s label. |\n| `disabled` | Optional<br><br>`boolean \\| undefined`<br><br>Sets whether or not the element should be disabled. Prevents selection. |\n| `error` | Optional<br><br>`string \\| undefined`<br><br>Error text that will be rendered below the control. |\n| `form` | Optional<br><br>`string \\| undefined`<br><br>Specifies the `id` of the `<form>` this input belongs to. If omitted, it’s the closest parent form. |\n| `hiddenElements` | Optional<br><br>`(\"label\" \\| \"description\" \\| \"error\")[] \\| undefined`<br><br>Visually hides the specified elements. The hidden elements will still be present and visible to screen readers. |\n| `invalid` | Optional<br><br>`boolean \\| undefined`<br><br>Sets whether or not the element is in an invalid state. This is a display-only prop, and will not prevent form submission. |\n| `label` | Optional<br><br>`React.ReactNode`<br><br>Text that describes the control. Will be both visible and clickable. |\n| `name` | Optional<br><br>`string \\| undefined`<br><br>Specifies the name for this input that’s submitted with the form. |\n| `onChange` | Optional<br><br>`((event: React.ChangeEvent<HTMLInputElement>) => void) \\| undefined`<br><br>Required for controlled inputs. Fires immediately when the input’s value is changed by the user (for example, it fires on every keystroke). Behaves like the browser input event. |\n| `readOnly` | Optional<br><br>`boolean \\| undefined`<br><br>If `true`, the input is not editable by the user. |\n| `required` | Optional<br><br>`boolean \\| undefined`<br><br>If `true`, the value must be provided for the form to submit. |\n| `tabIndex` | Optional<br><br>`number \\| undefined`<br><br>Overrides the default Tab button behavior. Avoid using values other than `-1` and `0`. |\n| `value` | Optional<br><br>`string \\| undefined`<br><br>Controls the input’s text. When you pass this prop, you must also pass an `onChange` handler that updates the passed value. |\n\n## State management![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the `Switch` component as an [uncontrolled input](https://docs.stripe.com/stripe-apps/how-ui-extensions-work#use-uncontrolled-components-for-interactions):\n\n`<Switch   onChange={(e) => {     console.log(e.target.checked);   }}   defaultChecked   label=\"This Switch is uncontrolled.\" />`\n\n## Disabled![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can disable a `Switch` component, which prevents changes.\n\n`<Switch   label=\"This Switch is disabled.\"   defaultChecked   disabled />`",
    "title": "Switch | Stripe Documentation",
    "description": "Similar to Checkboxes, you can use Switches to indicate or control boolean values.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/components/table",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nTo add the `Table` component to your app:\n\n`import {Table, TableBody, TableCell, TableFooter, TableHead, TableHeaderCell, TableRow} from '@stripe/ui-extension-sdk/ui';`\n\nThe following shows a preview of a `Table` component with a header, several rows of data, and a footer:\n\n`<Table>   <TableHead>     <TableRow>       <TableHeaderCell>Charge type</TableHeaderCell>       <TableHeaderCell>Amount</TableHeaderCell>     </TableRow>   </TableHead>   <TableBody>     <TableRow>       <TableCell>Setup fee</TableCell>       <TableCell>$95.00</TableCell>     </TableRow>     <TableRow>       <TableCell>Maintenance fee</TableCell>       <TableCell>$50.45</TableCell>     </TableRow>     <TableRow>       <TableCell>Extra storage space (per GB)</TableCell>       <TableCell>$5.95</TableCell>     </TableRow>     <TableRow>       <TableCell>Premium features</TableCell>       <TableCell>$109.00</TableCell>     </TableRow>   </TableBody>   <TableFooter>     <TableRow>       <TableCell>         <Inline css={{font: 'heading'}}>Total</Inline>       </TableCell>       <TableCell>         <Inline css={{font: 'heading'}}>$260.40</Inline>       </TableCell>     </TableRow>   </TableFooter> </Table>`\n\n### Table props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `children` | Required<br><br>`React.ReactNode`<br><br>The contents of the component. |\n\n## Sub-components![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## TableBody![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `TableBody` component contains the rows and cells in a table.\n\n### TableBody props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `children` | Required<br><br>`React.ReactNode`<br><br>The contents of the component. |\n\n## TableCell![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `TableCell` component contains one unit of information in a table corresponding to a row and column.\n\n### TableCell props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `children` | Required<br><br>`React.ReactNode`<br><br>The contents of the component. |\n| `align` | Optional<br><br>`(\"center\" \\| \"left\" \\| \"right\") \\| undefined` |\n| `colSpan` | Optional<br><br>`number \\| undefined` |\n| `maxWidth` | Optional<br><br>`(\"auto\" \\| \"maximized\" \\| \"minimized\" \\| number) \\| undefined` |\n| `minWidth` | Optional<br><br>`(\"auto\" \\| \"maximized\" \\| \"minimized\" \\| number) \\| undefined` |\n| `rowSpan` | Optional<br><br>`number \\| undefined` |\n| `vAlign` | Optional<br><br>`(\"baseline\" \\| \"bottom\" \\| \"middle\" \\| \"top\") \\| undefined` |\n| `width` | Optional<br><br>`(\"auto\" \\| \"maximized\" \\| \"minimized\" \\| number) \\| undefined` |\n| `wrap` | Optional<br><br>`boolean \\| undefined` |\n\nThe `TableFooter` component summarizes or aggregates the columns of information contained in a table.\n\n| Property | Type |\n| --- | --- |\n| `children` | Required<br><br>`React.ReactNode`<br><br>The contents of the component. |\n\n## TableHead![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `TableHead` component describes the columns of information contained in a table.\n\n### TableHead props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `children` | Required<br><br>`React.ReactNode`<br><br>The contents of the component. |\n\nThe `TableHeaderCell` component describes one column of information in a table.\n\n| Property | Type |\n| --- | --- |\n| `children` | Required<br><br>`React.ReactNode`<br><br>The contents of the component. |\n| `align` | Optional<br><br>`(\"center\" \\| \"left\" \\| \"right\") \\| undefined` |\n| `colSpan` | Optional<br><br>`number \\| undefined` |\n| `maxWidth` | Optional<br><br>`(\"auto\" \\| \"maximized\" \\| \"minimized\" \\| number) \\| undefined` |\n| `minWidth` | Optional<br><br>`(\"auto\" \\| \"maximized\" \\| \"minimized\" \\| number) \\| undefined` |\n| `rowSpan` | Optional<br><br>`number \\| undefined` |\n| `vAlign` | Optional<br><br>`(\"baseline\" \\| \"bottom\" \\| \"middle\" \\| \"top\") \\| undefined` |\n| `width` | Optional<br><br>`(\"auto\" \\| \"maximized\" \\| \"minimized\" \\| number) \\| undefined` |\n| `wrap` | Optional<br><br>`boolean \\| undefined` |\n\n## TableRow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `TableRow` component is an entry in a table composed of cells containing information for each column.\n\n### TableRow props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `children` | Required<br><br>`React.ReactNode`<br><br>The contents of the component. |",
    "title": "Table | Stripe Documentation",
    "description": "Display a table using the Table component.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/components/sparkline",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n`const sales = [   {     date: 'Jan',     sold: 1,     product: 'tables'   },   {     date: 'Jan',     sold: 2,     product: 'chairs'   },   {     date: 'Feb',     sold: 4,     product: 'tables'   },   {     date: 'Feb',     sold: 6,     product: 'chairs'   },   {     date: 'Mar',     sold: 2,     product: 'tables'   },   {     date: 'Mar',     sold: 4,     product: 'chairs'   },   {     date: 'Apr',     sold: 7,     product: 'tables',   },   {     date: 'Apr',     sold: 9,     product: 'chairs',   }, ];  <Sparkline data={sales} x=\"date\" y=\"sold\" color=\"product\" />`",
    "title": "Sparkline | Stripe Documentation",
    "description": "A type of line chart to display data succinctly as a simple line.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/components/chip",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nTo add the `Chip` component to your app:\n\n`import {Chip, ChipList} from '@stripe/ui-extension-sdk/ui';`\n\nThis is a preview of several `Chip` components in a `ChipList` component with different property configurations:\n\n`<ChipList>   <Chip     label=\"Currency\"     value=\"USD\"     onDropdown={() => {       alert('Dropdown function triggered');     }}     onClose={() => {       alert('Close function triggered');     }}   />   <Chip     label=\"Status\"     value=\"Succeeded\"     onDropdown={() => {       alert('Dropdown function triggered');     }}     onClose={() => {       alert('Close function triggered');     }}   />   <Chip     label=\"Amount\"     onAddSuggestion={() => {       alert('Add Amount suggestion');     }}   />   <Chip     label=\"Date\"     onAddSuggestion={() => {       alert('Add Date suggestion');     }}   /> </ChipList>`\n\n### ChipList props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `children` | Required<br><br>`React.ReactNode`<br><br>One or more Chip components. |\n| `direction` | Optional<br><br>`(\"row\" \\| \"row-reverse\") \\| undefined` |\n\n### Chip props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `label` | Optional<br><br>`string \\| undefined`<br><br>A string that uniquely identifies the Chip amongst other Chips that may be presented alongside it. If this property is present without a `value`, the Chip will be rendered in the “suggested” style. |\n| `onAddSuggestion` | Optional<br><br>`(() => void) \\| undefined`<br><br>The function to be called when the user clicks a “suggested” Chip in order to activate it. |\n| `onClose` | Optional<br><br>`(() => void) \\| undefined`<br><br>The function to be called when the user clicks the icon to remove a Chip. |\n| `onDropdown` | Optional<br><br>`(() => void) \\| undefined`<br><br>The function to be called when the user clicks the right side of an active Chip in order to edit the selected value. |\n| `value` | Optional<br><br>`(string \\| string[]) \\| undefined`<br><br>The currently selected value of a Chip. |\n\n## Suggested chip![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo suggest to the user with a `plus` icon that they add something represented by a chip, pass a callback function to the `onAddSuggestion` property.\n\n`<Chip   label=\"Date\"   onAddSuggestion={() => {     alert('Suggestion function triggered');   }} />`\n\n## Chip with dropdown![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you want to allow the user to edit the value of a chip after they’ve made their initial selection, provide an `onDropdown` callback function to open a selection interface needed for making edits.\n\n`const [open, setOpen] = React.useState(false);  return (   <>     <Chip       label=\"Status\"       value=\"Succeeded\"       onDropdown={() => setOpen(!open)}       onClose={() => {         alert('Close function triggered');       }}     />     {open && (       <Box         css={{           font: 'caption',           borderRadius: 'medium',           backgroundColor: 'container',           margin: 'small',           padding: 'medium',           color: 'secondary',         }}       >         Dropdown contents       </Box>     )}   </> );`\n\n## Representing multiple values![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you populate the `Chip` component’s `value` property with an array of values, they’re listed within the chip.\n\n`<Chip   label=\"Status\"   value={['Refunded', 'Succeeded']}   onDropdown={() => {     alert('Dropdown function triggered');   }}   onClose={() => {     alert('Close function triggered');   }} />`\n\n## Presenting chips in a list![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn many cases, chips aren’t presented on their own—they’re alongside other chips. The `ChipList` component handles the appropriate spacing and wrapping of chips in a list, and also provides for convenient keyboard navigation of chips using the right and left arrow keys.\n\n`<ChipList>   <Chip     label=\"Currency\"     value=\"USD\"     onDropdown={() => {       alert('Dropdown function triggered');     }}     onClose={() => {       alert('Close function triggered');     }}   />   <Chip     label=\"Status\"     value=\"Succeeded\"     onDropdown={() => {       alert('Dropdown function triggered');     }}     onClose={() => {       alert('Close function triggered');     }}   />   <Chip     value=\"jenny.rosen@stripe.com\"     onClose={() => {       alert('Closed jenny.rosen');     }}   />   <Chip     value=\"usr_0As2kXSWDS1lTZsH5agB\"     onClose={() => {       alert('Closed usr_0As2kXSWDS1lTZsH5agB');     }}   />   <Chip     label=\"Amount\"     onAddSuggestion={() => {       alert('Add Amount suggestion');     }}   />   <Chip     label=\"Date\"     onAddSuggestion={() => {       alert('Add Date suggestion');     }}   /> </ChipList>`\n\n## Non-closeable chip![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a `Chip` represents a required value, it can be useful to present a chip without an `add` or `cancel` icon. Exclude the `onAddSuggestion` and `onClose` callbacks to present users with a non-closeable chip.\n\n`<ChipList>   <Chip     label=\"Amount\"     value=\"$10\"     onDropdown={() => {       alert('Dropdown function triggered');     }}   />   <Chip     label=\"Age\"     value=\"18-24\"     onDropdown={() => {       alert('Dropdown function triggered');     }}   /> </ChipList>`",
    "title": "Chip | Stripe Documentation",
    "description": "Use chips to display and allow users to manipulate values.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/components/banner",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nTo add the `Banner` component to your app:\n\n`import {Banner} from '@stripe/ui-extension-sdk/ui';`\n\n## Overview![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBanners take up the width of their parent container. Banners are suitable for important information requiring user input and persistent display.\n\nBanners come with three preset types:\n\n*   **Default**\n*   **Caution**\n*   **Critical**\n\nThe following shows a preview of the three preset types for a banner:\n\n`<Banner   type=\"default\"   onDismiss={() => console.log('hello world')}   title=\"Neutral title\"   description=\"A short description\"   actions={     <Button onPress={() => console.log('hello world')}>Button</Button>   } /> <Banner   type=\"caution\"   title=\"Check your bank details\"   description=\"Your bank account information must be verified before receiving payouts.\"   onDismiss={() => console.log('hello world')}   actions={     <Box css={{stack: 'x', gap: 'small'}}>       <Button onPress={() => console.log('hello world')}>Update bank account</Button>       <Button onPress={() => console.log('hello world')}>         Learn more       </Button>     </Box>   } /> <Banner   type=\"critical\"   title=\"Check your bank details\"   description=\"Your bank account information must be verified before receiving payouts.\"   actions={     <Button onPress={() => console.log('hello world')}>Update bank account</Button>   } />`\n\n| Property | Type |\n| --- | --- |\n| `actions` | Optional<br><br>`React.ReactNode` |\n| `description` | Optional<br><br>`React.ReactNode` |\n| `onDismiss` | Optional<br><br>`(() => void) \\| undefined` |\n| `title` | Optional<br><br>`React.ReactNode` |\n| `type` | Optional<br><br>`(\"default\" \\| \"caution\" \\| \"critical\") \\| undefined` |\n\n## onDismiss![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBanners have the option of adding a dismiss button—add a click handler to `onDismiss` for the **Hide Banner** button to appear:\n\n`const [open, setOpen] = React.useState(true);  return (   <>     <Button onPress={() => setOpen(!open)}>       {open ? 'Hide' : 'Show'} Banner     </Button>     {open && (       <Banner         type=\"default\"         onDismiss={() => setOpen(false)}         title=\"Neutral title\"         description=\"A short description\"         actions={           <Button onPress={() => console.log('hello world')}>Button</Button>         }       />     )}   </> );`\n\n## Actions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBanners also take an `actions` prop that allows you to add action buttons to the Banner:\n\n`<Banner   type=\"default\"   title=\"Check your bank details\"   description=\"Your bank account information must be verified before receiving payouts.\"   actions={     <Button onPress={() => console.log('hello world')}>       Update bank account     </Button>   } />`",
    "title": "Banner | Stripe Documentation",
    "description": "Use the Banner to show a variety of alerts or messages you want to make explicit to the user.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/components/barchart",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## BarChart\n\n## A bar chart visualizes data as a series of data points using bars.\n\nTo add the `BarChart` component to your app:\n\n`import {BarChart} from '@stripe/ui-extension-sdk/ui';`\n\nThe following shows a preview of the `BarChart` UI component:\n\n`const sales = [   {     date: 'Jan',     sold: 1   },   {     date: 'Feb',     sold: 4   },   {     date: 'Mar',     sold: 2   },   {     date: 'Apr',     sold: 3   } ];  <BarChart data={sales} x=\"date\" y=\"sold\" />`\n\n### BarChart props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `data` | Required<br><br>`{ [x: string]: any; }[]`<br><br>The data used to generate the chart. |\n| `x` | Required<br><br>`string \\| number \\| Channel`<br><br>The property or accessor for the point on the x axis.<br><br>Related types: [Channel](#channel). |\n| `y` | Required<br><br>`string \\| number \\| Channel`<br><br>The property or accessor for the point on the y axis.<br><br>Related types: [Channel](#channel). |\n| `axis` | Optional<br><br>`(\"x\" \\| \"y\" \\| \"both\" \\| \"none\") \\| undefined`<br><br>Determines whether to render labels and ticks for each axis. |\n| `color` | Optional<br><br>`(string \\| number \\| ColorChannel) \\| undefined`<br><br>Groups data by color based on a property or accessor.<br><br>Related types: [ColorChannel](#colorchannel). |\n| `grid` | Optional<br><br>`(\"x\" \\| \"y\" \\| \"both\" \\| \"none\") \\| undefined`<br><br>Determines whether to render grid lines for each axis. |\n| `legend` | Optional<br><br>`boolean \\| undefined`<br><br>Determines whether to render the legend (when more than one item is present). |\n| `tooltip` | Optional<br><br>`boolean \\| undefined`<br><br>Determines whether to render a tooltip when hovering over the chart. |\n| `z` | Optional<br><br>`(string \\| number \\| Channel) \\| undefined`<br><br>Groups data based on a property or accessor.<br><br>Related types: [Channel](#channel). |\n\n### Channel![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `domain` | Optional<br><br>`any[] \\| undefined` |\n| `format` | Optional<br><br>`((Currency \\| UnitIdentifier) \\| (\"capitalize\" \\| { [x: string]: string; })) \\| undefined`<br><br>Related types: [Currency](#currency), [UnitIdentifier](#unitidentifier). |\n| `label` | Optional<br><br>`string \\| undefined` |\n| `range` | Optional<br><br>`any[] \\| undefined` |\n| `value` | Optional<br><br>`(string \\| number) \\| undefined` |\n\n### Currency![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `currency` | Required<br><br>`'AED' \\| 'AFN' \\| 'ALL' \\| 'AMD' \\| 'ANG' \\| 'AOA' \\| 'ARS' \\| 'AUD' \\| 'AWG' \\| 'AZN' \\| 'BAM' \\| 'BBD' \\| 'BDT' \\| 'BGN' \\| 'BHD' \\| 'BIF' \\| 'BMD' \\| 'BND' \\| 'BOB' \\| 'BRL' \\| 'BSD' \\| 'BTN' \\| 'BWP' \\| 'BYN' \\| 'BZD' \\| 'CAD' \\| 'CDF' \\| 'CHF' \\| 'CLP' \\| 'CNY' \\| 'COP' \\| 'CRC' \\| 'CUC' \\| 'CUP' \\| 'CVE' \\| 'CZK' \\| 'DJF' \\| 'DKK' \\| 'DOP' \\| 'DZD' \\| 'EGP' \\| 'ERN' \\| 'ETB' \\| 'EUR' \\| 'FJD' \\| 'FKP' \\| 'GBP' \\| 'GEL' \\| 'GHS' \\| 'GIP' \\| 'GMD' \\| 'GNF' \\| 'GTQ' \\| 'GYD' \\| 'HKD' \\| 'HNL' \\| 'HRK' \\| 'HTG' \\| 'HUF' \\| 'IDR' \\| 'ILS' \\| 'INR' \\| 'IQD' \\| 'IRR' \\| 'ISK' \\| 'JMD' \\| 'JOD' \\| 'JPY' \\| 'KES' \\| 'KGS' \\| 'KHR' \\| 'KMF' \\| 'KPW' \\| 'KRW' \\| 'KWD' \\| 'KYD' \\| 'KZT' \\| 'LAK' \\| 'LBP' \\| 'LKR' \\| 'LRD' \\| 'LSL' \\| 'LYD' \\| 'MAD' \\| 'MDL' \\| 'MGA' \\| 'MKD' \\| 'MMK' \\| 'MNT' \\| 'MOP' \\| 'MRU' \\| 'MUR' \\| 'MVR' \\| 'MWK' \\| 'MXN' \\| 'MYR' \\| 'MZN' \\| 'NAD' \\| 'NGN' \\| 'NIO' \\| 'NOK' \\| 'NPR' \\| 'NZD' \\| 'OMR' \\| 'PAB' \\| 'PEN' \\| 'PGK' \\| 'PHP' \\| 'PKR' \\| 'PLN' \\| 'PYG' \\| 'QAR' \\| 'RON' \\| 'RSD' \\| 'RUB' \\| 'RWF' \\| 'SAR' \\| 'SBD' \\| 'SCR' \\| 'SDG' \\| 'SEK' \\| 'SGD' \\| 'SHP' \\| 'SLL' \\| 'SOS' \\| 'SRD' \\| 'SSP' \\| 'STN' \\| 'SYP' \\| 'SZL' \\| 'THB' \\| 'TJS' \\| 'TMT' \\| 'TND' \\| 'TOP' \\| 'TRY' \\| 'TTD' \\| 'TWD' \\| 'TZS' \\| 'UAH' \\| 'UGX' \\| 'USD' \\| 'UYU' \\| 'UZS' \\| 'VES' \\| 'VND' \\| 'VUV' \\| 'WST' \\| 'XAF' \\| 'XCD' \\| 'XOF' \\| 'XPF' \\| 'YER' \\| 'ZAR' \\| 'ZMW'` |\n\n### UnitIdentifier![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `unit` | Required<br><br>`` 'acre' \\| 'bit' \\| 'byte' \\| 'celsius' \\| 'centimeter' \\| 'day' \\| 'degree' \\| 'fahrenheit' \\| 'fluid-ounce' \\| 'foot' \\| 'gallon' \\| 'gigabit' \\| 'gigabyte' \\| 'gram' \\| 'hectare' \\| 'hour' \\| 'inch' \\| 'kilobit' \\| 'kilobyte' \\| 'kilogram' \\| 'kilometer' \\| 'liter' \\| 'megabit' \\| 'megabyte' \\| 'meter' \\| 'mile' \\| 'mile-scandinavian' \\| 'milliliter' \\| 'millimeter' \\| 'millisecond' \\| 'minute' \\| 'month' \\| 'ounce' \\| 'percent' \\| 'petabyte' \\| 'pound' \\| 'second' \\| 'stone' \\| 'terabit' \\| 'terabyte' \\| 'week' \\| 'yard' \\| 'year' \\| `${'acre' \\| 'bit' \\| 'byte' \\| 'celsius' \\| 'centimeter' \\| 'day' \\| 'degree' \\| 'fahrenheit' \\| 'fluid-ounce' \\| 'foot' \\| 'gallon' \\| 'gigabit' \\| 'gigabyte' \\| 'gram' \\| 'hectare' \\| 'hour' \\| 'inch' \\| 'kilobit' \\| 'kilobyte' \\| 'kilogram' \\| 'kilometer' \\| 'liter' \\| 'megabit' \\| 'megabyte' \\| 'meter' \\| 'mile' \\| 'mile-scandinavian' \\| 'milliliter' \\| 'millimeter' \\| 'millisecond' \\| 'minute' \\| 'month' \\| 'ounce' \\| 'percent' \\| 'petabyte' \\| 'pound' \\| 'second' \\| 'stone' \\| 'terabit' \\| 'terabyte' \\| 'week' \\| 'yard' \\| 'year'}-per-${'acre' \\| 'bit' \\| 'byte' \\| 'celsius' \\| 'centimeter' \\| 'day' \\| 'degree' \\| 'fahrenheit' \\| 'fluid-ounce' \\| 'foot' \\| 'gallon' \\| 'gigabit' \\| 'gigabyte' \\| 'gram' \\| 'hectare' \\| 'hour' \\| 'inch' \\| 'kilobit' \\| 'kilobyte' \\| 'kilogram' \\| 'kilometer' \\| 'liter' \\| 'megabit' \\| 'megabyte' \\| 'meter' \\| 'mile' \\| 'mile-scandinavian' \\| 'milliliter' \\| 'millimeter' \\| 'millisecond' \\| 'minute' \\| 'month' \\| 'ounce' \\| 'percent' \\| 'petabyte' \\| 'pound' \\| 'second' \\| 'stone' \\| 'terabit' \\| 'terabyte' \\| 'week' \\| 'yard' \\| 'year'}` `` |\n\n### ColorChannel![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `domain` | Optional<br><br>`any[] \\| undefined` |\n| `format` | Optional<br><br>`((Currency \\| UnitIdentifier) \\| (\"capitalize\" \\| { [x: string]: string; })) \\| undefined`<br><br>Related types: [Currency](#currency), [UnitIdentifier](#unitidentifier). |\n| `label` | Optional<br><br>`string \\| undefined` |\n| `value` | Optional<br><br>`(string \\| number) \\| undefined` |\n\n## Using color![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `color` channel groups data:\n\n`const sales = [   {     date: 'Jan',     sold: 1,     product: 'tables'   },   {     date: 'Jan',     sold: 2,     product: 'chairs'   },   {     date: 'Feb',     sold: 4,     product: 'tables'   },   {     date: 'Feb',     sold: 6,     product: 'chairs'   },   {     date: 'Mar',     sold: 2,     product: 'tables'   },   {     date: 'Mar',     sold: 4,     product: 'chairs'   },   {     date: 'Apr',     sold: 7,     product: 'tables',   },   {     date: 'Apr',     sold: 9,     product: 'chairs',   }, ];  <BarChart data={sales} x=\"date\" y=\"sold\" color=\"product\" />`\n\n## Axis and value formatting![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInstead of passing a string for an axis value, you can add richer formatting by passing an object including the `value`, `label` and/or `format` properties.\n\n| Property | Type |\n| --- | --- |\n| `value` | `string \\| number`<br><br>The property name in the data set. Required. |\n| `label` | `string`<br><br>The display text for the axis. |\n| `format` | `object`<br><br>Format a number with one of the [supported currency codes](https://raw.githubusercontent.com/unicode-org/cldr/main/common/validity/currency.xml) for example `{currency: 'USD'}`, or a [supported unit](https://tc39.es/proposal-unified-intl-numberformat/section6/locales-currencies-tz_proposed_out.html#sec-issanctionedsimpleunitidentifier) such as `{unit: 'minute'}`. You can also create a compound unit with `-per-` in between, such as `{unit: 'megabyte-per-hour'}`. |\n\n`<BarChart   data={[     {       date: 'January',       sold: 10,     },     {       date: 'February',       sold: 41,     },     {       date: 'March',       sold: 22,     },     {       date: 'April',       sold: 38,     },   ]}   x=\"date\"   y={{value: 'sold', label: 'Price', format: {currency: 'USD'}}} />`\n\n## Domain![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo set the minimum and maximum values of an axis, use the `domain` prop. For example, if you always want the `y` axis to go from 0 to 10 (rather than automatically adjusting to the data provided), add the `domain` property to your configuration:\n\n`const sales = [   {     date: 'Jan',     sold: 1,   },   {     date: 'Feb',     sold: 4,   },   {     date: 'Mar',     sold: 2,   },   {     date: 'Apr',     sold: 3,   }, ];  <BarChart   data={sales}   x=\"date\"   y={{value: 'sold', label: 'Sold', domain: [0, 10]}} />`",
    "title": "BarChart | Stripe Documentation",
    "description": "A bar chart visualizes data as a series of data points using bars.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/ui-testing",
    "markdown": "# UI testing | Stripe DocumentationThe Stripe Docs logo\n\n## Test your Stripe app UI with a set of utilities and helpers.\n\nThe Extension SDK includes a set of tools to write unit tests for your app’s user interface. We recommend running tests with [Jest](https://jestjs.io/) and we include [Jest custom matchers](#matchers) to help with writing assertions.\n\n## Conceptual overview![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen testing your Stripe app’s UI, you’re testing a remote engine that renders your app, not the Document Object Model (DOM) tree directly.\n\nFor security purposes, the React code in your Stripe app repository is serialized, sent through an extension loader using an iframe, and translated into a DOM tree within the Stripe Dashboard. The testing tools provided by the Extension SDK work with the remote rendering engine.\n\n## Example![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis example tests a [Button](https://docs.stripe.com/stripe-apps/components/button) UI component that changes text when clicked. In the test, we render the button, confirm that the initial button text is correct, click the button, and confirm that the text of the button has changed.\n\n`// App.tsx import {useState} from 'react'; import {ContextView, Button} from '@stripe/ui-extension-sdk/ui';  const App = () => {   const [isPressed, setIsPressed] = useState(false);   return (     <ContextView title=\"Hello world\">       <Button onPress={() => setIsPressed(true)}>         {isPressed ? 'You pressed me!' : 'Press me'}       </Button>     </ContextView>   ); };  export default App;  // App.test.tsx import {render} from '@stripe/ui-extension-sdk/testing'; import {Button} from '@stripe/ui-extension-sdk/ui'; import App from './App';  describe('App', () => {   it('changes button text when pressed', async () => {     const {wrapper, update} = render(<App />);      // Expect that the initial text is correct     expect(wrapper.find(Button)).toContainText('Press me');      // Press the button     wrapper.find(Button)!.trigger('onPress');      // This is needed if the \"onPress\" handler involves something asyncronous     // like a promise or a React useEffect hook     await update();      // Expect that the text changed     expect(wrapper.find(Button)).toContainText('You pressed me!');   }); });`\n\n## Rendering a component![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### `render(element: React.ReactElement)`\n\nThe `render` method accepts a React element and returns an object with the following properties:\n\n*   `wrapper`: The root element of the component passed to `render`.\n*   `update`: A function that returns a promise that resolves after the JavaScript event stack has been cleared. This is useful when mocking APIs, dealing with promises, employing React hooks such as `useEffect`, or ensuring asynchronous rendering completes before running subsequent test cases.\n\n`import {render} from '@stripe/ui-extension-sdk/testing'; import App from './App';  it('contains a Button', async () => {   const {wrapper, update} = render(<App />);    await update();    // Continue testing... });`\n\n## Element properties and methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen working with the wrapper or any element within it, use the following properties and methods to assess state and interact with your app:\n\n### `children: Element<unknown>[]`\n\nReturns an array of the direct children of the element.\n\n### `descendants: Element<unknown>[]`\n\nReturns an array of all elements below the element in the tree.\n\n### `debug(options?: {all?: boolean, depth?: number, verbosity?: number}): string`\n\nReturns a text representation of the element. You can modify `debug()` output using the `options` parameter.\n\n*   `all` overrides the default props filtering behavior and instead includes all props in the output. `debug()` omits `className`, `aria-*`, and `data-*` props by default.\n*   `depth` defines the number of children printed. All children are printed by default.\n*   `verbosity` defines the level of expansion for non-scalar props. The default value of `1` expands objects one level deep.\n\n### `act<T>(action: () => T): T`\n\nPerforms an action in the context of a React [act() block](https://reactjs.org/docs/test-utils.html#act). Normally, you can use `update()` (which uses `act()` internally) to handle asynchronous events. However, in some cases you might need to call `act()` directly, such as when your code uses timers (`setTimeout`, `setInterval`, `clearTimeout`, `clearInterval`), and you want to test using [timer mocks](https://jestjs.io/docs/timer-mocks). When using timer mocks, you need to reset or cleanup mocks between tests (in jest this means calling `runOnlyPendingTimers()` and `useRealTimers()`), otherwise library code that uses timers won’t work properly.\n\n### `find(type: Type, props?: Partial<PropsForComponent<Type>>): Element<PropsForComponent<Type>> | null`\n\nFinds a descendant element that matches `type`, where `type` is a component. If it doesn’t find a matching element, it returns null. If it finds a match, the returned element has the correct prop typing, which provides excellent type safety while navigating the React tree.\n\nIf the second `props` argument is passed, it finds the first element of `type` with matching `props`.\n\n`// App.tsx import {Button, ContextView} from '@stripe/ui-extension-sdk/ui';  const App = () => (   <ContextView title=\"Hello world\">     <Button href=\"[http://bad.example.com](http://bad.example.com/)\">Do not press me</Button>     <Button href=\"[http://example.com](http://example.com/)\">Press me</Button>   </ContextView> );  export default App;  // App.test.tsx import {render} from '@stripe/ui-extension-sdk/testing'; import {Button} from '@stripe/ui-extension-sdk/ui'; import App from './App';  it('contains a Button with text', () => {   const {wrapper} = render(<App />);    const button = wrapper.find(Button, {href: '[http://example.com](http://example.com/)'});    expect(button).toContainText('Press me'); });`\n\nBe aware that when using any of the `findX` methods, saved results are immediately stale and future updates to the component aren’t reflected. For example:\n\n`// Bad - this will not work const button = wrapper.find(Button); expect(button).toContainText('Press me'); button!.trigger('onPress'); expect(button).toContainText('You pressed me!'); // button still contains 'Press me'  // Good - this will work expect(wrapper.find(Button)).toContainText('Press me'); wrapper.find(Button)!.trigger('onPress'); expect(wrapper.find(Button)).toContainText('You pressed me!');`\n\n### `findAll(type: Type, props?: Partial<PropsForComponent<Type>>): Element<PropsForComponent<Type>>[]`\n\nLike `find`, but returns all matches as an array.\n\n### `findWhere<Type = unknown>(predicate: (element: Element<unknown>) => boolean): Element<PropsForComponent<Type>> | null`\n\nFinds the first descendant component matching the passed function. The function is called with each element from `descendants` until it finds a match. If it doesn’t find a match, it returns `null`.\n\n`findWhere` accepts an optional TypeScript argument that you can use to specify the type of the returned element. If you omit the generic argument, the returned element has unknown props, so calling `.props` and `.trigger` on it causes type errors, as those functions don’t know what props are valid on your element:\n\n`// App.tsx import {Button, ContextView} from '@stripe/ui-extension-sdk/ui';  const App = () => (   <ContextView title=\"Hello world\">     <Button href=\"[http://example.com](http://example.com/)\">Press me</Button>   </ContextView> );  export default App;  // App.test.tsx import {render} from '@stripe/ui-extension-sdk/testing'; import {Button} from '@stripe/ui-extension-sdk/ui'; import App from './App';  it('contains a Button with a href', () => {   const {wrapper} = render(<App />);    const button = wrapper.findWhere<typeof Button>(     (node) => node.is(Button) && node.prop('href').startsWith('[http://example](http://example/)'),   );    expect(button).toContainText('Press me'); });`\n\n### `findAllWhere<Type = unknown>(predicate: (element: Element<unknown>) => boolean): Element<PropsForComponent<Type>>[]`\n\nLike `findWhere`, but returns all matches as an array.\n\n### `is(type: Type): boolean`\n\nReturns a boolean indicating whether the component type matches the passed type. This function also serves as a type guard, so subsequent calls to values like `props` are typed as the prop type of the passed component.\n\n`import {Button} from '@stripe/ui-extension-sdk/ui';  // If we omit element.is here, we would not know whether 'href' was a valid prop and Typescript // would throw an error. if (element.is(Button) && element.prop('href') === '[http://example.com](http://example.com/)') {   // ... }`\n\n### `prop<K extends keyof Props>(key: K): Props[K]`\n\nReturns the current value of the passed prop name.\n\n### `props: Props`\n\nAll props of the element.\n\n### `text: string`\n\nThe text content of the element (that is, the string you would get by calling `textContent`).\n\n### `trigger<K extends FunctionKeys<Props>>(prop: K, ...args: Arguments<Props<K>>): ReturnType<Props<K>>`\n\nSimulates a function prop being called on your component. This is usually the key to effective testing. After you mount your component, you simulate a change in a subcomponent and assert that the resulting tree is in the expected state.\n\nOptionally, each additional argument passed to `trigger` is passed to the function. This is useful for testing components in isolation.\n\n`// App.tsx import {useState} from 'react'; import {ContextView, Button} from '@stripe/ui-extension-sdk/ui';  const App = () => {   const [buttonText, setButtonText] = useState<string>('Press me');   return (     <ContextView title=\"Hello world\">       <Button onPress={() => setButtonText('You pressed me!')}>         {buttonText}       </Button>     </ContextView>   ); };  export default App;  // App.test.tsx import {render} from '@stripe/ui-extension-sdk/testing'; import {Button} from '@stripe/ui-extension-sdk/ui'; import App from './App';  describe('App', () => {   it('changes button text when pressed', () => {     const {wrapper} = render(<App />);      expect(wrapper.find(Button)).toContainText('Press me');      // Press the button     wrapper.find(Button)!.trigger('onPress', 'You pressed me!');      // Expect that the text changed     expect(wrapper.find(Button)).toContainText('You pressed me!');   }); });`\n\n### `triggerKeypath<T>(keypath: string, ...args: any[]): T`\n\nLike `trigger()`, but allows you to provide a keypath referencing nested objects. Be aware that limitations in TypeScript prevent the same kind of type-safety that `trigger` guarantees.\n\n`const App = ({action}: {action: {onAction(): void; label: string}}) => (   <Button type=\"button\" onPress={action.onAction}>     {action.label}   </Button> );  const spy = jest.fn(); const app = mount(   <App action={{label: 'Hi', onAction: spy}} />, ); app.triggerKeypath('action.onAction'); expect(spy).toHaveBeenCalled();`\n\n## Matchers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Extension SDK provides [Jest custom matchers](https://jestjs.io/docs/using-matchers). These are imported automatically when you import `@stripe/ui-extension-sdk/testing`.\n\n### `toContainComponent(type: RemoteComponentType, props?: object)`\n\nAsserts that at least one component matching `type` is in the descendants of the passed node. If the second `props` argument is passed, it further filters the matches by components whose props are equal to the passed object. Jest’s asymmetric matchers, like `expect.objectContaining`, are fully supported.\n\n`// App.tsx import {Button, ContextView} from '@stripe/ui-extension-sdk/ui';  const App = () => (   <ContextView title=\"Hello world\">     <Button onPress={() => console.log('You pressed me!')}>Press me</Button>   </ContextView> );  export default App;  // App.test.tsx import {render} from '@stripe/ui-extension-sdk/testing'; import {Button} from '@stripe/ui-extension-sdk/ui'; import App from './App';  it('contains a Button', () => {   const {wrapper} = render(<App />);    expect(wrapper).toContainComponent(Button, {     onPress: expect.any(Function),   }); });`\n\n### `toContainComponentTimes(type: RemoteComponentType, times: number, props?: object)`\n\nIdentical to `.toContainComponent`, but asserts that there are exactly `times` matches within the passed node.\n\n### `toHaveProps(props: object)`\n\nChecks whether the node has the specified props.\n\n`// App.tsx import {Button, ContextView} from '@stripe/ui-extension-sdk/ui';  const App = () => (   <ContextView title=\"Hello world\">     <Button onPress={() => console.log('You pressed me!')}>Press me</Button>   </ContextView> );  export default App;  // App.test.tsx import {render} from '@stripe/ui-extension-sdk/testing'; import {Button} from '@stripe/ui-extension-sdk/ui'; import App from './App';  it('contains a Button with an onPress function', () => {   const {wrapper} = render(<App />);    expect(wrapper.find(Button)).toHaveProps({     onPress: expect.any(Function),   }); });`\n\n### `toContainText(text: string)`\n\nChecks that the rendered output of the component contains the passed string as text content (that is, the text is included in what you would get by calling `textContent` on all DOM nodes rendered by the component).\n\n`// App.tsx import {Button, ContextView} from '@stripe/ui-extension-sdk/ui';  const App = () => (   <ContextView title=\"Hello world\">     <Button>Press me</Button>   </ContextView> );  export default App;  // App.test.tsx import {render} from '@stripe/ui-extension-sdk/testing'; import {Button} from '@stripe/ui-extension-sdk/ui'; import App from './App';  it('contains a Button with an onPress function', () => {   const {wrapper} = render(<App />);    expect(wrapper.find(Button)).toContainText('Press me'); });`\n\n## Mock context props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nApp views are passed [context props](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#props) in the Stripe Dashboard. You can generate a mock context props object for testing purposes using the `getMockContextProps` function.\n\n`import {getMockContextProps} from '@stripe/ui-extension-sdk/testing';  const context = getMockContextProps(); const {wrapper} = render(<App {...context} />);`\n\nBy default, the mock context props are standard test values like `id: 'usr_1234'` and `email: 'user@example.com'`. You can override these values by passing in a partial object. The object you pass in is deep-merged with the default object, so you only need to pass in the values you want to override.\n\n`import {getMockContextProps} from '@stripe/ui-extension-sdk/testing';  const context = getMockContextProps({   environment: {     objectContext: {       id: 'inv_1234',       object: 'invoice',     },   }, }); const {wrapper} = render(<App {...context} />);`",
    "title": "UI testing | Stripe Documentation",
    "description": "Test your Stripe app UI with a set of utilities and helpers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/components/spinner",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nTo add the `Spinner` component to your app:\n\n`import {Spinner} from '@stripe/ui-extension-sdk/ui';`\n\nThis is a preview of a `Spinner` component in three sizes:\n\n`<Spinner size=\"small\" /> <Spinner /> <Spinner size=\"large\" />`\n\n### Spinner props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `delay` | Optional<br><br>`number \\| undefined`<br><br>Delay applied to animation. |\n| `size` | Optional<br><br>`(\"small\" \\| \"medium\" \\| \"large\") \\| undefined`<br><br>The size of the component. |",
    "title": "Spinner | Stripe Documentation",
    "description": "Use the Spinner component to indicate something is loading.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/components/button",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nTo add the `Button` component to your app:\n\n`import {Button} from '@stripe/ui-extension-sdk/ui';`\n\nThere are multiple button types available:\n\n`<Button type=\"primary\">Primary</Button> <Button>Secondary</Button> <Button type=\"destructive\">Destructive</Button>`\n\n### Button props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `children` | Required<br><br>`React.ReactNode`<br><br>The contents of the component. |\n| `css` | Optional<br><br>`Object`<br><br>Related types: [CSS](#css). |\n| `disabled` | Optional<br><br>`boolean \\| undefined`<br><br>Whether the action is disabled. |\n| `href` | Optional<br><br>`string \\| undefined`<br><br>Native `href` attribute. |\n| `onPress` | Optional<br><br>`((event: PressEvent) => void) \\| undefined`<br><br>Handler that is called when the press is released over the target. |\n| `size` | Optional<br><br>`(\"small\" \\| \"medium\" \\| \"large\") \\| undefined`<br><br>The size of the component. |\n| `target` | Optional<br><br>`(\"_self\" \\| \"_blank\" \\| \"_top\" \\| \"_parent\") \\| undefined`<br><br>Where to display the linked URL, as the name for a browsing context. |\n| `type` | Optional<br><br>`(\"primary\" \\| \"secondary\" \\| \"destructive\") \\| undefined`<br><br>The type of the button. |\n| `className` | OptionalDeprecated<br><br>`string \\| undefined` |\n\n### CSS![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Content guidelines![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Use the {verb} + {noun} formula for labels![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor example, **Update customer**. It’s acceptable to break this pattern in the case of common actions like **Done**, **Close**, **Cancel**, **Add**, or **Delete**.\n\n### Be as descriptive as possible![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a button performs an action or navigates the user to a location, try to name that action or location within the label.\n\n### Use sentence case![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis applies for most cases except proper nouns and phrases.\n\n### Avoid punctuation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAvoid periods, exclamation points, and question marks.\n\n### Use second person![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen referring to the user within a button or link, always use second person personal pronouns. Example: **Post your status**.\n\n## Primary buttons![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPrimary buttons initiate the primary action of any given page or flow. Avoid having more than one primary button available to the user at a given time.\n\n`<Button type=\"primary\" onPress={() => console.log('Button was pressed')}>   Primary button </Button>`\n\n## Secondary buttons![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSecondary buttons are the default and most common buttons in product interfaces. In general, use the secondary style for buttons that aren’t for primary actions.\n\n`<Button onPress={() => console.log('Button was pressed')}>   Secondary button </Button>`\n\n## Destructive buttons![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse destructive buttons exclusively for actions that result in the destruction of any object or data.\n\n`<Button type=\"destructive\" onPress={() => console.log('Button was pressed')}>   Destructive button </Button>`\n\n## Button sizes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nButtons are available in three sizes, which determine the height of the element. Buttons can be as wide as needed to fill their container.\n\n*   You can use small buttons in contexts where space is limited or to match the size of other, small text such as legal terms, and so on.\n*   Medium is the default size for buttons.\n*   You can use large buttons in contexts where a call to action (CTA) needs increased prominence.\n\n`<Button size=\"small\">Small button</Button> <Button>Medium button</Button> <Button size=\"large\">Large button</Button>`\n\n## Disabled buttons![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`<Button type=\"primary\" disabled>Hello!</Button> <Button disabled>Secondary</Button> <Button type=\"destructive\" disabled>Destructive</Button>`\n\n## Icons in buttons![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse an [icon](https://docs.stripe.com/stripe-apps/components/icon) inside of a button:\n\n`<Button type=\"primary\">   <Icon name=\"addCircle\" />   Add customer </Button>`\n\n## Full-width buttons![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCreate a full-width `Button` component using the `css` prop:\n\n`<Button type=\"primary\" css={{width: 'fill', alignX: 'center'}}>   Full-width button </Button>`\n\n## Opening links in new tabs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
    "title": "Button | Stripe Documentation",
    "description": "Buttons allow users to take actions, and you can use them to direct a user's attention or warn them of outcomes.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payment_intents/update",
    "markdown": "# Update a PaymentIntent | Stripe API Reference\n\nUpdates properties on a PaymentIntent object without confirming.\n\nDepending on which properties you update, you might need to confirm the PaymentIntent again. For example, updating the `payment_method` always requires you to confirm the PaymentIntent again. If you prefer to update and confirm at the same time, we recommend updating properties through the [confirm API](https://docs.stripe.com/api/payment_intents/confirm) instead.\n\n### Parameters\n\n*   Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).\n    \n\n*   ID of the Customer this PaymentIntent belongs to, if one exists.\n    \n    Payment methods attached to other Customers cannot be used with this PaymentIntent.\n    \n    If present in combination with [setup\\_future\\_usage](#payment_intent_object-setup_future_usage), this PaymentIntent’s payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://docs.stripe.com/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent.\n    \n*   Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).\n    \n*   Indicates that you intend to make future payments with this PaymentIntent’s payment method.\n    \n    Providing this parameter will [attach the payment method](https://docs.stripe.com/payments/save-during-payment) to the PaymentIntent’s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://docs.stripe.com/api/payment_methods/attach) to a Customer after the transaction completes.\n    \n    When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://docs.stripe.com/strong-customer-authentication).\n    \n    If `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `off_session`<br><br>Use `off_session` if your customer may or may not be present in your checkout flow. |\n    | `on_session`<br><br>Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. |\n    \n*   Shipping information for this PaymentIntent.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    For card charges, use [statement\\_descriptor\\_suffix](https://stripe.com/docs/payments/account/statement-descriptors#dynamic). Otherwise, you can use this value as the complete description of a charge on your customers’ statements. It must contain at least one letter and be 1–22 characters long.\n    \n*   #### \n    \n    statement\\_descriptor\\_suffixstring\n    \n    Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    capture\\_methodenumsecret key only\n    \n*   #### \n    \n    payment\\_method\\_configurationstring\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_optionsobject\n    \n*   #### \n    \n    payment\\_method\\_typesarray of strings\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n*   #### \n    \n    transfer\\_groupstringConnect only\n    \n\n### Returns\n\nReturns a PaymentIntent object.\n\nPOST /v1/payment\\_intents/:id\n\n```\ncurl https://api.stripe.com/v1/payment_intents/pi_3MtwBwLkdIwHu7ix28a3tqPa \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",  \"object\": \"payment_intent\",  \"amount\": 2000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": {    \"enabled\": true  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",  \"confirmation_method\": \"automatic\",  \"created\": 1680800504,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    },    \"link\": {      \"persistent_token\": null    }  },  \"payment_method_types\": [    \"card\",    \"link\"  ],  \"processing\": null,  \"receipt_email\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"source\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"requires_payment_method\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Retrieve a PaymentIntent](https://docs.stripe.com/api/payment_intents/retrieve)\n\nRetrieves the details of a PaymentIntent that has previously been created.\n\nYou can retrieve a PaymentIntent client-side using a publishable key when the `client_secret` is in the query string.\n\nIf you retrieve a PaymentIntent with a publishable key, it only returns a subset of properties. Refer to the [payment intent](#payment_intent_object) object reference for more details.\n\n### Parameters\n\n*   #### \n    \n    client\\_secretstringRequired if you use a publishable key.\n    \n    The client secret of the PaymentIntent. We require it if you use a publishable key to retrieve the source.\n    \n\n### Returns\n\nReturns a PaymentIntent if a valid identifier was provided.\n\nGET /v1/payment\\_intents/:id\n\n```\ncurl https://api.stripe.com/v1/payment_intents/pi_3MtwBwLkdIwHu7ix28a3tqPa \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",  \"object\": \"payment_intent\",  \"amount\": 2000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": {    \"enabled\": true  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",  \"confirmation_method\": \"automatic\",  \"created\": 1680800504,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": null,  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    },    \"link\": {      \"persistent_token\": null    }  },  \"payment_method_types\": [    \"card\",    \"link\"  ],  \"processing\": null,  \"receipt_email\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"source\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"requires_payment_method\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [List all PaymentIntents](https://docs.stripe.com/api/payment_intents/list)\n\nReturns a list of PaymentIntents.\n\n### Parameters\n\n*   Only return PaymentIntents for the customer that this customer ID specifies.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` PaymentIntents, starting after PaymentIntent `starting_after`. Each entry in the array is a separate PaymentIntent object. If no other PaymentIntents are available, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/payment_intents \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/payment_intents\",  \"has_more\": false,  \"data\": [    {      \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",      \"object\": \"payment_intent\",      \"amount\": 2000,      \"amount_capturable\": 0,      \"amount_details\": {        \"tip\": {}      },      \"amount_received\": 0,      \"application\": null,      \"application_fee_amount\": null,      \"automatic_payment_methods\": {        \"enabled\": true      },      \"canceled_at\": null,      \"cancellation_reason\": null,      \"capture_method\": \"automatic\",      \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",      \"confirmation_method\": \"automatic\",      \"created\": 1680800504,      \"currency\": \"usd\",      \"customer\": null,      \"description\": null,      \"invoice\": null,      \"last_payment_error\": null,      \"latest_charge\": null,      \"livemode\": false,      \"metadata\": {},      \"next_action\": null,      \"on_behalf_of\": null,      \"payment_method\": null,      \"payment_method_options\": {        \"card\": {          \"installments\": null,          \"mandate_options\": null,          \"network\": null,          \"request_three_d_secure\": \"automatic\"        },        \"link\": {          \"persistent_token\": null        }      },      \"payment_method_types\": [        \"card\",        \"link\"      ],      \"processing\": null,      \"receipt_email\": null,      \"review\": null,      \"setup_future_usage\": null,      \"shipping\": null,      \"source\": null,      \"statement_descriptor\": null,      \"statement_descriptor_suffix\": null,      \"status\": \"requires_payment_method\",      \"transfer_data\": null,      \"transfer_group\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a PaymentIntent](https://docs.stripe.com/api/payment_intents/cancel)\n\nYou can cancel a PaymentIntent object when it’s in one of these statuses: `requires_payment_method`, `requires_capture`, `requires_confirmation`, `requires_action` or, [in rare cases](https://docs.stripe.com/payments/intents), `processing`.\n\nAfter it’s canceled, no additional charges are made by the PaymentIntent and any operations on the PaymentIntent fail with an error. For PaymentIntents with a `status` of `requires_capture`, the remaining `amount_capturable` is automatically refunded.\n\nYou can’t cancel the PaymentIntent for a Checkout Session. [Expire the Checkout Session](https://docs.stripe.com/api/checkout/sessions/expire) instead.\n\n### Parameters\n\n*   #### \n    \n    cancellation\\_reasonstring\n    \n    Reason for canceling this PaymentIntent. Possible values are: `duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`\n    \n\n### Returns\n\nReturns a PaymentIntent object if the cancellation succeeds. Returns an error if the PaymentIntent is already canceled or isn’t in a cancelable state.\n\nPOST /v1/payment\\_intents/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/payment_intents/pi_3MtwBwLkdIwHu7ix28a3tqPa/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",  \"object\": \"payment_intent\",  \"amount\": 2000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": {    \"enabled\": true  },  \"canceled_at\": 1680801569,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",  \"confirmation_method\": \"automatic\",  \"created\": 1680800504,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": null,  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    },    \"link\": {      \"persistent_token\": null    }  },  \"payment_method_types\": [    \"card\",    \"link\"  ],  \"processing\": null,  \"receipt_email\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"source\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"canceled\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Capture a PaymentIntent](https://docs.stripe.com/api/payment_intents/capture)\n\nCapture the funds of an existing uncaptured PaymentIntent when its status is `requires_capture`.\n\nUncaptured PaymentIntents are cancelled a set number of days (7 by default) after their creation.\n\nLearn more about [separate authorization and capture](https://docs.stripe.com/payments/capture-later).\n\n### Parameters\n\n*   The amount to capture from the PaymentIntent, which must be less than or equal to the original amount. Any additional amount is automatically refunded. Defaults to the full `amount_capturable` if it’s not provided.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n*   #### \n    \n    statement\\_descriptor\\_suffixstring\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns a PaymentIntent object with `status=\"succeeded\"` if the PaymentIntent is capturable. Returns an error if the PaymentIntent isn’t capturable or if an invalid amount to capture is provided.\n\nPOST /v1/payment\\_intents/:id/capture\n\n```\ncurl -X POST https://api.stripe.com/v1/payment_intents/pi_3MrPBM2eZvKYlo2C1TEMacFD/capture \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pi_3MrPBM2eZvKYlo2C1TEMacFD\",  \"object\": \"payment_intent\",  \"amount\": 1000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 1000,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": null,  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MrPBM2eZvKYlo2C1TEMacFD_secret_9J35eTzWlxVmfbbQhmkNbewuL\",  \"confirmation_method\": \"automatic\",  \"created\": 1524505326,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"One blue fish\",  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": \"ch_1EXUPv2eZvKYlo2CStIqOmbY\",  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": \"pm_1EXUPv2eZvKYlo2CUkqZASBe\",  \"payment_method_options\": {},  \"payment_method_types\": [    \"card\"  ],  \"processing\": null,  \"receipt_email\": null,  \"redaction\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"succeeded\",  \"transfer_data\": null,  \"transfer_group\": null}\n```",
    "title": "Update a PaymentIntent | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/refunds/cancel",
    "markdown": "# Cancel a refund | Stripe API Reference\n\nCancels a refund with a status of `requires_action`.\n\nYou can’t cancel refunds in other states. Only refunds for payment methods that require customer action can enter the `requires_action` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the refund object if the cancellation succeeds. This call raises [an error](#errors) if you can’t cancel the refund.\n\nPOST /v1/refunds/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/refunds/re_1Nispe2eZvKYlo2Cd31jOCgZ/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"re_1Nispe2eZvKYlo2Cd31jOCgZ\",  \"object\": \"refund\",  \"amount\": 1000,  \"balance_transaction\": \"txn_1Nispe2eZvKYlo2CYezqFhEx\",  \"charge\": \"ch_1NirD82eZvKYlo2CIvbtLWuY\",  \"created\": 1692942318,  \"currency\": \"usd\",  \"failure_balance_transaction\": \"txn_3MmlLrLkdIwHu7ix0uke3Ezy\",  \"failure_reason\": \"merchant_request\",  \"metadata\": {},  \"payment_intent\": \"pi_1GszsK2eZvKYlo2CfhZyoZLp\",  \"reason\": null,  \"receipt_number\": null,  \"source_transfer_reversal\": null,  \"status\": \"canceled\",  \"transfer_reversal\": null}\n```\n\n## [Confirmation Token](https://docs.stripe.com/api/confirmation_tokens)\n\nConfirmationTokens help transport client side data collected by Stripe JS over to your server for confirming a PaymentIntent or SetupIntent. If the confirmation is successful, values present on the ConfirmationToken are written onto the Intent.\n\nTo learn more about how to use ConfirmationToken, visit the related guides:\n\n*   [Finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server)\n*   [Build two-step confirmation](https://docs.stripe.com/payments/build-a-two-step-confirmation).\n\n## [Tokens](https://docs.stripe.com/api/tokens)\n\nTokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. A token representing this information is returned to your server to use. Use our [recommended payments integrations](https://docs.stripe.com/payments) to perform this process on the client-side. This guarantees that no sensitive card data touches your server, and allows your integration to operate in a PCI-compliant way.\n\nIf you can’t use client-side tokenization, you can also create tokens using the API with either your publishable or secret API key. If your integration uses this method, you’re responsible for any PCI compliance that it might require, and you must keep your secret API key safe. Unlike with client-side tokenization, your customer’s information isn’t sent directly to Stripe, so we can’t determine how it’s handled or stored.\n\nYou can’t store or use tokens more than once. To store card or bank account information for later use, create [Customer](https://docs.stripe.com/api#customers) objects or [External accounts](https://docs.stripe.com/api#external_accounts). [Radar](https://docs.stripe.com/radar), our integrated solution for automatic fraud protection, performs best with integrations that use client-side tokenization.\n\nEndpoints\n\n[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_bank_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_card)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_cvc_update)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_person)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_pii)[GET/v1/tokens/:id](https://docs.stripe.com/api/tokens/retrieve)\n\n## [Cash Balance](https://docs.stripe.com/api/cash_balance)\n\nA customer’s `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "Cancel a refund | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/legacy-transfers",
    "markdown": "# Controlling bank and debit card transfers\n\n## Stripe allows platforms to entirely control the transfers for its Custom Connect accounts.\n\n#### Caution\n\nThis page describes an older version of [Connect](https://docs.stripe.com/connect \"Connect\"). In the latest version of Connect, the legacy `transfers` endpoint has been deprecated in favor of `payouts`. The Dashboard’s user interface reflects this change, using the term “[payouts](https://docs.stripe.com/payouts \"payout\")” instead of transfers, regardless of your Stripe API version. Refer to [bank and debit card payouts](https://docs.stripe.com/connect/payouts-connected-accounts) for information about the latest version of the Connect API.\n\nBy default, any charge you make on behalf of a connected account accumulates in the connected account’s [Stripe balance](https://docs.stripe.com/connect/account-balances) and is paid out on a daily rolling basis. However, Stripe offers fine-grained control over this behavior for Custom accounts.\n\nYou can:\n\n*   Set the destination [bank accounts and debit cards](#bank-accounts)\n*   Control [how frequently](#payout-information) funds are automatically paid out\n*   Perform [manual transfers](#using-manual-transfers)\n*   Send funds [instantly](#instant-payouts)\n\n## Managing bank accounts and debit cards ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCustom accounts have an `external_accounts` property: a list of all bank accounts and debit cards associated with the Stripe account. Any external account is a possible destination for funds.\n\n`{   \"id\":` \n\n`\"{{CONNECTED_ACCOUNT_ID}}\"`\n\n`,   \"object\": \"account\",   \"external_accounts\": {     \"object\": \"list\",     \"has_more\": false,     \"url\": \"/v1/accounts/acct_14qyt6Alijdnw0EA/external_accounts\",     \"data\": [       {         \"id\":   \"{{BANK_ACCOUNT_ID}}\"  ,         \"object\": \"bank_account\",         \"account\": \"acct_14qyt6Alijdnw0EA\",         \"account_holder_name\": \"Jane Austen\",         \"account_holder_type\": \"individual\",         \"bank_name\": \"STRIPE TEST BANK\",         \"country\": \"US\",         \"currency\": \"usd\",         \"default_for_currency\": false,         \"fingerprint\": \"sSZ2yLp0EZTH17cF\",         \"last4\": \"6789\",         \"metadata\": {         },         \"routing_number\": \"110000000\",         \"status\": \"new\"       },       {...},       {...},     ],   ... }`\n\nDestination accounts are added via the `external_accounts` parameter when [creating](https://docs.stripe.com/connect/custom-accounts#create) or [updating](https://docs.stripe.com/connect/updating-service-agreements) Stripe accounts. The value should be a bank account or debit card token returned from [Stripe.js](https://docs.stripe.com/js). Alternatively, you can provide a hash of the bank account details, but using Stripe.js is preferred as it prevents sensitive data from hitting your server.\n\nWhen using debit cards as a transfer destination, the following restrictions apply:\n\n*   Must be a non-prepaid US Visa, Mastercard, or Discover\n*   Limited to 9,999 USD per transfer on [Instant Payouts](#instant-payouts)\n*   Generally limited to 3,000 USD per transfer otherwise\n\n## Managing multiple bank and debit accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBy default, providing a new value for `external_accounts` while updating a Custom account _replaces_ the existing account with the new one. To _add_ additional bank accounts or debit cards to a connected account, use the [Bank Account](https://docs.stripe.com/api#account_create_bank_account) and [Card](https://docs.stripe.com/api#account_create_card) creation API endpoints.\n\n`curl https://api.stripe.com/v1/accounts/`\n\n`{{CONNECTED_ACCOUNT_ID}}`\n\n`/external_accounts \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d external_account=  {{BANK_ACCOUNT_TOKEN_ID}}    `\n\nWhen working with multiple currencies, Stripe automatically sends transfers to an associated bank account or debit card for its currency, thereby avoiding exchange fees. When there are multiple accounts available for a given currency, Stripe uses the one set as `default_for_currency`.\n\nStripe maintains a list of [available country/currency combinations](https://docs.stripe.com/connect/payouts-connected-accounts) for your reference and to help your users choose from the supported options.\n\n## Payout information![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen using automatic transfers, the `transfer_schedule` property on an account indicates how often the Stripe account’s balance is automatically paid out:\n\n`{   ...   \"transfer_schedule\": {     \"delay_days\": 7,     \"interval\": \"daily\"   },   ... }`\n\nThe `delay_days` property reflects how long it takes charges (or linked transfers) to become available for payout. This field is useful for controlling automatic payouts. For example, if you want your Custom accounts to receive their funds 2 weeks after the charge is made, set `interval` to `daily` and `delay_days` to **14**. The default is the lowest permitted value for the account, determined by the connected account’s country. When setting or updating this field, you may pass the string **minimum** to choose the lowest permitted value.\n\nThere are four possible settings for the `interval` property:\n\n*   **manual** prevents automatic payouts. You will have to manually pay out the account’s balance using the [Transfers API](https://docs.stripe.com/api#create_transfer) (acting as the connected account). Also set an account to `manual` to use [Instant Payouts](#instant-payouts).\n*   **daily** automatically pays out charges `delay_days` days after they’re created. The `delay_days` value cannot be less than your own transfer schedule or less than the default transfer schedule for the account.\n*   **weekly** automatically pays out the balance once a week, specified by the `weekly_anchor` parameter (a lower-case weekday such as **monday**).\n*   **monthly** automatically pays out the balance once a month, specified by the `monthly_anchor` parameter (a number from 1 to 31).\n\n## Using manual transfers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you set `transfer_schedule[interval]` to `manual` using the [Accounts API](https://docs.stripe.com/api#account_object-transfer_schedule), Stripe will hold funds in the account holder’s balance until told to pay them out (or until a maximum of 90 days have passed). To trigger a payout of these funds, use the [Transfers API](https://docs.stripe.com/api#create_transfer).\n\nThe Transfers API is only for moving funds from a connected Stripe account’s balance into their external account. To move funds between Stripe accounts, see creating [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers) or [creating destination charges through the platform](https://docs.stripe.com/connect/destination-charges).\n\n#### Note\n\n_Escrow_ has a precise legal definition and Stripe does not support escrow accounts. However, we do provide escrow-like behavior through manual transfers. This gives you control over transfer timing, with the ability to delay payouts to Custom accounts for up to 90 days.\n\nManual transfers can be used as an alternative to escrow when there may be a risk of a delayed delivery, or if there’s the possibility of a refund being needed.\n\n### Standard transfers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs a basic transfer example, to have 10 USD sent from a Custom account’s Stripe balance to their external account:\n\n`curl https://api.stripe.com/v1/transfers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -H \"Stripe-Account: {{CONNECTED_STRIPE_ACCOUNT_ID}}\" \\   -d \"amount\"=1000 \\   -d \"currency\"=\"usd\" \\   -d \"destination\"=\"default_for_currency\"`\n\nSetting `destination=default_for_currency` tells Stripe to transfer to the account’s default bank account or debit card for the given currency.\n\nWith a standard transfer, you can payout up to the user’s available balance. To find that amount, perform a [retrieve balance](https://docs.stripe.com/api#retrieve_balance) call on their behalf.\n\nStripe tracks balance contributions from different payment sources in separate balances. The retrieve balance response breaks down the components of each balance by source type. For example, if you want to create a transfer specifically for a non-credit-card balance, specify the `source_type` in your request.\n\n`curl https://api.stripe.com/v1/transfers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=24784 \\   -d \"currency\"=\"usd\" \\   -d \"destination\"=\"default_for_currency\" \\   -d \"source_type\"=\"bank_account\"`\n\nNote that it is possible for any source’s balance component to go negative (through refunds or chargebacks), and transfers can’t be created for greater than the aggregate available balance.\n\n### Using Instant Payouts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith Instant Payouts, you can immediately send funds to a Custom account’s debit card. Funds typically appear in the associated bank account within 30 minutes, making it possible to go from charge to payout in mere moments.\n\nTo use Instant Payouts, specify **instant** for the `method` property when creating the transfer:\n\n`curl https://api.stripe.com/v1/transfers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -H \"Stripe-Account: {{CONNECTED_STRIPE_ACCOUNT_ID}}\" \\   -d \"amount\"=1000 \\   -d \"currency\"=\"usd\" \\   -d \"method\"=\"instant\"`\n\nInstant Payouts differ from other manual transfers in a couple of ways:\n\n*   You can transfer an account’s available balance plus its _pending_ balance\n*   Instant Payouts can be requested on weekends and holidays\n\nInitially, platforms can transfer up to 500 USD per day—in total, across all connected accounts—through Instant Payouts. [Contact us](https://support.stripe.com/contact) if you need this threshold increased.\n\nInstant Payouts is available for all of the largest US banks, but a small percentage of banks do not yet support it. For those banks, you will have to fall back to standard payouts.\n\nWhen you add a card to an account, Stripe returns a property `available_payout_methods` in the response, which will be a set containing the payout methods Stripe supports for that card. Only values in this set should be passed as the `method` when creating a transfer.\n\n`{   \"id\":` \n\n`\"{{CARD_ID}}\"`\n\n`,   \"object\": \"card\",   ...   \"account\": \"acct_1032D82eZvKYlo2C\",   \"available_payout_methods\": [\"standard\", \"instant\"], }`\n\nIf a Custom account’s card does not support Instant Payouts, you should clearly communicate to the owner of that account that they will not receive their payouts instantly.\n\n### Using webhooks with transfers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAll transfer activity on connected accounts can be tracked using [webhooks](https://docs.stripe.com/webhooks). (When using Connect, you should always be using webhooks.) Specific to transfers, you’ll see these events:\n\n*   `transfer.created`\n*   `transfer.updated`\n*   `transfer.paid`\n*   `transfer.failed`\n\nFor most transfers, these event notifications occur over a series of days. Instant Payouts typically send `transfer.paid` within 30 minutes.\n\nIf a transfer cannot be completed, a `transfer.failed` event occurs. The event’s `failure_reason` property indicates why.",
    "title": "Controlling bank and debit card transfers | Stripe Documentation",
    "description": "Stripe allows platforms to entirely control the transfers for its Custom Connect accounts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/customer_bank_accounts/object",
    "markdown": "# The Bank Account object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    account\\_holder\\_namenullable string\n    \n    The name of the person or business that owns the bank account.\n    \n*   #### \n    \n    account\\_holder\\_typenullable string\n    \n    The type of entity that holds the account. This can be either `individual` or `company`.\n    \n*   Name of the bank associated with the routing number (e.g., `WELLS FARGO`).\n    \n*   Two-letter ISO code representing the country the bank account is located in.\n    \n\n*   #### \n    \n    customernullable stringExpandable\n    \n    The ID of the customer that the bank account is associated with.\n    \n*   #### \n    \n    fingerprintnullable string\n    \n    Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.\n    \n*   The last four digits of the bank account number.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    routing\\_numbernullable string\n    \n    The routing transit number for the bank account.\n    \n\n### More attributes\n\n*   #### \n    \n    accountnullable stringExpandable\n    \n*   #### \n    \n    account\\_typenullable string\n    \n*   #### \n    \n    available\\_payout\\_methodsnullable array of enums\n    \n\n```\n{  \"id\": \"ba_1MvoIJ2eZvKYlo2CO9f0MabO\",  \"object\": \"bank_account\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"customer\": \"cus_9s6XI9OFIdpjIg\",  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {},  \"routing_number\": \"110000000\",  \"status\": \"new\"}\n```\n\n## [Create a bank account](https://docs.stripe.com/api/customer_bank_accounts/create)\n\nWhen you create a new bank account, you must specify a `Customer` object on which to create it.\n\n### Parameters\n\n*   #### \n    \n    sourceobject | stringRequired\n    \n    Either a token, like the ones returned by [Stripe.js](https://docs.stripe.com/js), or a dictionary containing a user’s bank account details (with the options shown below).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the bank account object.\n\nPOST /v1/customers/:id/sources\n\n```\ncurl https://api.stripe.com/v1/customers/ba_1MvoIJ2eZvKYlo2CO9f0MabO/sources \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d source=btok_1MvoS32eZvKYlo2CDhGTErAe\n```\n\n```\n{  \"id\": \"ba_1MvoIJ2eZvKYlo2CO9f0MabO\",  \"object\": \"bank_account\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"customer\": \"cus_9s6XI9OFIdpjIg\",  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {},  \"routing_number\": \"110000000\",  \"status\": \"new\"}\n```\n\n## [Update a bank account](https://docs.stripe.com/api/customer_bank_accounts/update)\n\nUpdates the `account_holder_name`, `account_holder_type`, and `metadata` of a bank account belonging to a customer. Other bank account details are not editable, by design.\n\n### Parameters\n\n*   #### \n    \n    account\\_holder\\_namestring\n    \n    The name of the person or business that owns the bank account.\n    \n*   #### \n    \n    account\\_holder\\_typestring\n    \n    The type of entity that holds the account. This can be either `individual` or `company`.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the bank account object.\n\nPOST /v1/customers/:id/sources/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_9s6XI9OFIdpjIg/sources/ba_1MvoIJ2eZvKYlo2CO9f0MabO \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"ba_1MvoIJ2eZvKYlo2CO9f0MabO\",  \"object\": \"bank_account\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"customer\": \"cus_9s6XI9OFIdpjIg\",  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"routing_number\": \"110000000\",  \"status\": \"new\"}\n```\n\n## [Retrieve a bank account](https://docs.stripe.com/api/customer_bank_accounts/retrieve)\n\nBy default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the bank account object.\n\nGET /v1/customers/:id/bank\\_accounts/:id\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/customers/cus_9s6XI9OFIdpjIg/bank_accounts/ba_1MvoIJ2eZvKYlo2CO9f0MabO \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ba_1MvoIJ2eZvKYlo2CO9f0MabO\",  \"object\": \"bank_account\",  \"account_holder_name\": \"Jane Austen\",  \"account_holder_type\": \"company\",  \"account_type\": null,  \"bank_name\": \"STRIPE TEST BANK\",  \"country\": \"US\",  \"currency\": \"usd\",  \"customer\": \"cus_9s6XI9OFIdpjIg\",  \"fingerprint\": \"1JWtPxqbdX5Gamtc\",  \"last4\": \"6789\",  \"metadata\": {},  \"routing_number\": \"110000000\",  \"status\": \"new\"}\n```\n\n## [List all bank accounts](https://docs.stripe.com/api/customer_bank_accounts/list)\n\nYou can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional bank accounts.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of the bank accounts stored on the customer.\n\nGET /v1/customers/:id/bank\\_accounts\n\ncURL\n\n```\ncurl -G https://api.stripe.com/v1/customers/cus_9s6XI9OFIdpjIg/bank_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers/cus_9s6XI9OFIdpjIg/bank_accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ba_1MvoIJ2eZvKYlo2CO9f0MabO\",      \"object\": \"bank_account\",      \"account_holder_name\": \"Jane Austen\",      \"account_holder_type\": \"company\",      \"account_type\": null,      \"bank_name\": \"STRIPE TEST BANK\",      \"country\": \"US\",      \"currency\": \"usd\",      \"customer\": \"cus_9s6XI9OFIdpjIg\",      \"fingerprint\": \"1JWtPxqbdX5Gamtc\",      \"last4\": \"6789\",      \"metadata\": {},      \"routing_number\": \"110000000\",      \"status\": \"new\"    }    {...}    {...}  ],}\n```",
    "title": "The Bank Account object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payment_intents/cancel",
    "markdown": "# Cancel a PaymentIntent | Stripe API Reference\n\nYou can cancel a PaymentIntent object when it’s in one of these statuses: `requires_payment_method`, `requires_capture`, `requires_confirmation`, `requires_action` or, [in rare cases](https://docs.stripe.com/payments/intents), `processing`.\n\nAfter it’s canceled, no additional charges are made by the PaymentIntent and any operations on the PaymentIntent fail with an error. For PaymentIntents with a `status` of `requires_capture`, the remaining `amount_capturable` is automatically refunded.\n\nYou can’t cancel the PaymentIntent for a Checkout Session. [Expire the Checkout Session](https://docs.stripe.com/api/checkout/sessions/expire) instead.\n\n### Parameters\n\n*   #### \n    \n    cancellation\\_reasonstring\n    \n    Reason for canceling this PaymentIntent. Possible values are: `duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`\n    \n\n### Returns\n\nReturns a PaymentIntent object if the cancellation succeeds. Returns an error if the PaymentIntent is already canceled or isn’t in a cancelable state.\n\nPOST /v1/payment\\_intents/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/payment_intents/pi_3MtwBwLkdIwHu7ix28a3tqPa/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",  \"object\": \"payment_intent\",  \"amount\": 2000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": {    \"enabled\": true  },  \"canceled_at\": 1680801569,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",  \"confirmation_method\": \"automatic\",  \"created\": 1680800504,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": null,  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    },    \"link\": {      \"persistent_token\": null    }  },  \"payment_method_types\": [    \"card\",    \"link\"  ],  \"processing\": null,  \"receipt_email\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"source\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"canceled\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Capture a PaymentIntent](https://docs.stripe.com/api/payment_intents/capture)\n\nCapture the funds of an existing uncaptured PaymentIntent when its status is `requires_capture`.\n\nUncaptured PaymentIntents are cancelled a set number of days (7 by default) after their creation.\n\nLearn more about [separate authorization and capture](https://docs.stripe.com/payments/capture-later).\n\n### Parameters\n\n*   The amount to capture from the PaymentIntent, which must be less than or equal to the original amount. Any additional amount is automatically refunded. Defaults to the full `amount_capturable` if it’s not provided.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n*   #### \n    \n    statement\\_descriptor\\_suffixstring\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns a PaymentIntent object with `status=\"succeeded\"` if the PaymentIntent is capturable. Returns an error if the PaymentIntent isn’t capturable or if an invalid amount to capture is provided.\n\nPOST /v1/payment\\_intents/:id/capture\n\n```\ncurl -X POST https://api.stripe.com/v1/payment_intents/pi_3MrPBM2eZvKYlo2C1TEMacFD/capture \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pi_3MrPBM2eZvKYlo2C1TEMacFD\",  \"object\": \"payment_intent\",  \"amount\": 1000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 1000,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": null,  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MrPBM2eZvKYlo2C1TEMacFD_secret_9J35eTzWlxVmfbbQhmkNbewuL\",  \"confirmation_method\": \"automatic\",  \"created\": 1524505326,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"One blue fish\",  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": \"ch_1EXUPv2eZvKYlo2CStIqOmbY\",  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": \"pm_1EXUPv2eZvKYlo2CUkqZASBe\",  \"payment_method_options\": {},  \"payment_method_types\": [    \"card\"  ],  \"processing\": null,  \"receipt_email\": null,  \"redaction\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"succeeded\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Confirm a PaymentIntent](https://docs.stripe.com/api/payment_intents/confirm)\n\nConfirm that your customer intends to pay with current or provided payment method. Upon confirmation, the PaymentIntent will attempt to initiate a payment. If the selected payment method requires additional authentication steps, the PaymentIntent will transition to the `requires_action` status and suggest additional actions via `next_action`. If payment fails, the PaymentIntent transitions to the `requires_payment_method` status or the `canceled` status if the confirmation limit is reached. If payment succeeds, the PaymentIntent will transition to the `succeeded` status (or `requires_capture`, if `capture_method` is set to `manual`). If the `confirmation_method` is `automatic`, payment may be attempted using our [client SDKs](https://docs.stripe.com/stripe-js/reference#stripe-handle-card-payment) and the PaymentIntent’s [client\\_secret](#payment_intent_object-client_secret). After `next_action`s are handled by the client, no additional confirmation is required to complete the payment. If the `confirmation_method` is `manual`, all payment attempts must be initiated using a secret key. If any actions are required for the payment, the PaymentIntent will return to the `requires_confirmation` state after those actions are completed. Your server needs to then explicitly re-confirm the PaymentIntent to initiate the next payment attempt.\n\n### Parameters\n\n*   ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://docs.stripe.com/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent.\n    \n*   Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).\n    \n*   Indicates that you intend to make future payments with this PaymentIntent’s payment method.\n    \n    Providing this parameter will [attach the payment method](https://docs.stripe.com/payments/save-during-payment) to the PaymentIntent’s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://docs.stripe.com/api/payment_methods/attach) to a Customer after the transaction completes.\n    \n    When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://docs.stripe.com/strong-customer-authentication).\n    \n    If `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `off_session`<br><br>Use `off_session` if your customer may or may not be present in your checkout flow. |\n    | `on_session`<br><br>Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. |\n    \n*   Shipping information for this PaymentIntent.\n    \n\n### More parameters\n\n*   #### \n    \n    capture\\_methodenumsecret key only\n    \n\n*   #### \n    \n    error\\_on\\_requires\\_actionboolean\n    \n*   #### \n    \n    mandatestringsecret key only\n    \n\n*   #### \n    \n    off\\_sessionboolean | stringsecret key only\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_optionsobjectsecret key only\n    \n*   #### \n    \n    payment\\_method\\_typesarray of stringssecret key only\n    \n*   #### \n    \n    radar\\_optionsobjectsecret key only\n    \n\n### Returns\n\nReturns the resulting PaymentIntent after all possible transitions are applied.\n\nPOST /v1/payment\\_intents/:id/confirm\n\n```\ncurl https://api.stripe.com/v1/payment_intents/pi_3MtweELkdIwHu7ix0Dt0gF2H/confirm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_method=pm_card_visa \\  --data-urlencode return_url=\"https://www.example.com\"\n```\n\n```\n{  \"id\": \"pi_3MtweELkdIwHu7ix0Dt0gF2H\",  \"object\": \"payment_intent\",  \"amount\": 2000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 2000,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": {    \"enabled\": true  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MtweELkdIwHu7ix0Dt0gF2H_secret_ALlpPMIZse0ac8YzPxkMkFgGC\",  \"confirmation_method\": \"automatic\",  \"created\": 1680802258,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": \"ch_3MtweELkdIwHu7ix05lnLAFd\",  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": \"pm_1MtweELkdIwHu7ixxrsejPtG\",  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    },    \"link\": {      \"persistent_token\": null    }  },  \"payment_method_types\": [    \"card\",    \"link\"  ],  \"processing\": null,  \"receipt_email\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"source\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"succeeded\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Increment an authorization](https://docs.stripe.com/api/payment_intents/increment_authorization)\n\nPerform an incremental authorization on an eligible [PaymentIntent](https://docs.stripe.com/api/payment_intents/object). To be eligible, the PaymentIntent’s status must be `requires_capture` and [incremental\\_authorization\\_supported](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) must be `true`.\n\nIncremental authorizations attempt to increase the authorized amount on your customer’s card to the new, higher `amount` provided. Similar to the initial authorization, incremental authorizations can be declined. A single PaymentIntent can call this endpoint multiple times to further increase the authorized amount.\n\nIf the incremental authorization succeeds, the PaymentIntent object returns with the updated [amount](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount). If the incremental authorization fails, a [card\\_declined](https://docs.stripe.com/error-codes#card-declined) error returns, and no other fields on the PaymentIntent or Charge update. The PaymentIntent object remains capturable for the previously authorized amount.\n\nEach PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines. After it’s captured, a PaymentIntent can no longer be incremented.\n\nLearn more about [incremental authorizations](https://docs.stripe.com/terminal/features/incremental-authorizations).\n\n### Parameters\n\n*   The updated total amount that you intend to collect from the cardholder. This amount must be greater than the currently authorized amount.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    For card charges, use [statement\\_descriptor\\_suffix](https://stripe.com/docs/payments/account/statement-descriptors#dynamic). Otherwise, you can use this value as the complete description of a charge on your customers’ statements. It must contain at least one letter and be 1–22 characters long.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns a PaymentIntent object with the updated amount if the incremental authorization succeeds. Returns an error if the incremental authorization failed or the PaymentIntent isn’t eligible for incremental authorizations.\n\nPOST /v1/payment\\_intents/:id/increment\\_authorization\n\n```\ncurl https://api.stripe.com/v1/payment_intents/pi_1DtBRR2eZvKYlo2CmCVxxvd7/increment_authorization \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=2099\n```\n\n```\n{  \"id\": \"pi_1DtBRR2eZvKYlo2CmCVxxvd7\",  \"object\": \"payment_intent\",  \"amount\": 2099,  \"amount_capturable\": 2099,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": null,  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"manual\",  \"client_secret\": \"pi_1DtBRR2eZvKYlo2CmCVxxvd7_secret_cWsUkvyTOjhLKh5Wxu61nYc0i\",  \"confirmation_method\": \"automatic\",  \"created\": 1680196960,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": \"ch_3MrPBM2eZvKYlo2C1CEBUD4A\",  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": \"pm_1MrPBL2eZvKYlo2CaNa8L11Z\",  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"processing\": null,  \"receipt_email\": null,  \"redaction\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"requires_capture\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Reconcile a customer\\_balance PaymentIntent](https://docs.stripe.com/api/payment_intents/apply_customer_balance)\n\nManually reconcile the remaining amount for a `customer_balance` PaymentIntent.\n\n### Parameters\n\n*   Amount that you intend to apply to this PaymentIntent from the customer’s cash balance.\n    \n    A positive integer representing how much to charge in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) (for example, 100 cents to charge 1 USD or 100 to charge 100 JPY, a zero-decimal currency).\n    \n    The maximum amount is the amount of the PaymentIntent.\n    \n    When you omit the amount, it defaults to the remaining amount requested on the PaymentIntent.\n    \n\n### Returns\n\nReturns a PaymentIntent object.\n\nPOST /v1/payment\\_intents/:id/apply\\_customer\\_balance\n\n```\ncurl -X POST https://api.stripe.com/v1/payment_intents/pi_1GszwY2eZvKYlo2CohCEmT6b/apply_customer_balance \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pi_1GszwY2eZvKYlo2CohCEmT6b\",  \"object\": \"payment_intent\",  \"amount\": 1000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": null,  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_1GszwY2eZvKYlo2CohCEmT6b_secret_1jQJzqkrQvx4BpwI5hn6WSEO5\",  \"confirmation_method\": \"automatic\",  \"created\": 1591918582,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"Created by stripe.com/docs demo\",  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": null,  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"processing\": null,  \"receipt_email\": null,  \"redaction\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"requires_payment_method\",  \"transfer_data\": null,  \"transfer_group\": null}\n```",
    "title": "Cancel a PaymentIntent | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payment_method_domains/object",
    "markdown": "# The PaymentMethodDomain object | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fpayment_method_domains%2Fobject)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The domain name that this payment method domain object represents.\n    \n*   Whether this payment method domain is enabled. If the domain is not enabled, payment methods that require a payment method domain will not appear in Elements.\n    \n\n### More attributes\n\nThe PaymentMethodDomain object\n\n```\n{  \"id\": \"pmd_1Nnrer2eZvKYlo2Cips79tWl\",  \"object\": \"payment_method_domain\",  \"apple_pay\": {    \"status\": \"active\"  },  \"created\": 1694129445,  \"domain_name\": \"example.com\",  \"enabled\": true,  \"google_pay\": {    \"status\": \"active\"  },  \"link\": {    \"status\": \"active\"  },  \"livemode\": false,  \"paypal\": {    \"status\": \"active\"  }}\n```\n\n## [Create a payment method domain](https://docs.stripe.com/api/payment_method_domains/create)\n\nCreates a payment method domain.\n\n### Parameters\n\n*   #### \n    \n    domain\\_namestringRequired\n    \n    The domain name that this payment method domain object represents.\n    \n*   Whether this payment method domain is enabled. If the domain is not enabled, payment methods that require a payment method domain will not appear in Elements.\n    \n\n### Returns\n\nReturns a payment method domain object.\n\nPOST /v1/payment\\_method\\_domains\n\n```\ncurl https://api.stripe.com/v1/payment_method_domains \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d domain_name=\"example.com\"\n```\n\n```\n{  \"id\": \"pmd_1Nnrer2eZvKYlo2Cips79tWl\",  \"object\": \"payment_method_domain\",  \"apple_pay\": {    \"status\": \"active\"  },  \"created\": 1694129445,  \"domain_name\": \"example.com\",  \"enabled\": true,  \"google_pay\": {    \"status\": \"active\"  },  \"link\": {    \"status\": \"active\"  },  \"livemode\": false,  \"paypal\": {    \"status\": \"active\"  }}\n```\n\n## [Update a payment method domain](https://docs.stripe.com/api/payment_method_domains/update)\n\nUpdates an existing payment method domain.\n\n### Parameters\n\n*   Whether this payment method domain is enabled. If the domain is not enabled, payment methods that require a payment method domain will not appear in Elements.\n    \n\n### Returns\n\nReturns the updated payment method domain object.\n\nPOST /v1/payment\\_method\\_domains/:id\n\n```\ncurl https://api.stripe.com/v1/payment_method_domains/pmd_1Nnrer2eZvKYlo2Cips79tWl \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d enabled=false\n```\n\n```\n{  \"id\": \"pmd_1Nnrer2eZvKYlo2Cips79tWl\",  \"object\": \"payment_method_domain\",  \"apple_pay\": {    \"status\": \"active\"  },  \"created\": 1694129445,  \"domain_name\": \"example.com\",  \"enabled\": false,  \"google_pay\": {    \"status\": \"active\"  },  \"link\": {    \"status\": \"active\"  },  \"livemode\": false,  \"paypal\": {    \"status\": \"active\"  }}\n```\n\n## [Retrieve a payment method domain](https://docs.stripe.com/api/payment_method_domains/retrieve)\n\nRetrieves the details of an existing payment method domain.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a payment method domain object.\n\nGET /v1/payment\\_method\\_domains/:id\n\n```\ncurl https://api.stripe.com/v1/payment_method_domains/pmd_1Nnrer2eZvKYlo2Cips79tWl \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pmd_1Nnrer2eZvKYlo2Cips79tWl\",  \"object\": \"payment_method_domain\",  \"apple_pay\": {    \"status\": \"active\"  },  \"created\": 1694129445,  \"domain_name\": \"example.com\",  \"enabled\": true,  \"google_pay\": {    \"status\": \"active\"  },  \"link\": {    \"status\": \"active\"  },  \"livemode\": false,  \"paypal\": {    \"status\": \"active\"  }}\n```\n\n## [List payment method domains](https://docs.stripe.com/api/payment_method_domains/list)\n\nLists the details of existing payment method domains.\n\n### Parameters\n\n*   The domain name that this payment method domain object represents.\n    \n*   Whether this payment method domain is enabled. If the domain is not enabled, payment methods will not appear in Elements\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of payment method domain objects.\n\nGET /v1/payment\\_method\\_domains\n\n```\ncurl -G https://api.stripe.com/v1/payment_method_domains \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/payment_method_domains\",  \"has_more\": false,  \"data\": [    {      \"id\": \"pmd_1Nnrer2eZvKYlo2Cips79tWl\",      \"object\": \"payment_method_domain\",      \"apple_pay\": {        \"status\": \"active\"      },      \"created\": 1694129445,      \"domain_name\": \"example.com\",      \"enabled\": true,      \"google_pay\": {        \"status\": \"active\"      },      \"link\": {        \"status\": \"active\"      },      \"livemode\": false,      \"paypal\": {        \"status\": \"active\"      }    }    {...}    {...}  ],}\n```",
    "title": "The PaymentMethodDomain object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/cli/trigger",
    "markdown": "# Stripe CLI Reference\n\n[cli](https://docs.stripe.com/cli)",
    "title": "Stripe CLI Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/api/shipping_rates/object",
    "markdown": "# The Shipping Rate object | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fshipping_rates%2Fobject)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Whether the shipping rate can be used for new purchases. Defaults to `true`.\n    \n*   #### \n    \n    display\\_namenullable string\n    \n    The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions.\n    \n*   #### \n    \n    fixed\\_amountnullable object\n    \n    Describes a fixed amount to charge for shipping. Must be present if type is `fixed_amount`.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The type of calculation to use on the shipping rate.\n    \n    Possible enum values\n    \n    `fixed_amount`\n    \n    The shipping rate is a fixed amount.\n    \n\n### More attributes\n\n*   #### \n    \n    delivery\\_estimatenullable object\n    \n\n*   #### \n    \n    tax\\_behaviornullable enum\n    \n*   #### \n    \n    tax\\_codenullable stringExpandable\n    \n\n```\n{  \"id\": \"shr_1MrRx2LkdIwHu7ixikgEA6Wd\",  \"object\": \"shipping_rate\",  \"active\": true,  \"created\": 1680207604,  \"delivery_estimate\": null,  \"display_name\": \"Ground shipping\",  \"fixed_amount\": {    \"amount\": 500,    \"currency\": \"usd\"  },  \"livemode\": false,  \"metadata\": {},  \"tax_behavior\": \"unspecified\",  \"tax_code\": null,  \"type\": \"fixed_amount\"}\n```\n\n## [Create a shipping rate](https://docs.stripe.com/api/shipping_rates/create)\n\nCreates a new shipping rate object.\n\n### Parameters\n\n*   #### \n    \n    display\\_namestringRequired\n    \n    The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions.\n    \n*   Describes a fixed amount to charge for shipping. Must be present if type is `fixed_amount`.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The type of calculation to use on the shipping rate.\n    \n    Possible enum values\n    \n    `fixed_amount`\n    \n    The shipping rate is a fixed amount.\n    \n\n### More parameters\n\n### Returns\n\nReturns a shipping rate object if the call succeeded.\n\n```\ncurl https://api.stripe.com/v1/shipping_rates \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d display_name=\"Ground shipping\" \\  -d type=fixed_amount \\  -d \"fixed_amount[amount]\"=500 \\  -d \"fixed_amount[currency]\"=usd\n```\n\n```\n{  \"id\": \"shr_1MrRx2LkdIwHu7ixikgEA6Wd\",  \"object\": \"shipping_rate\",  \"active\": true,  \"created\": 1680207604,  \"delivery_estimate\": null,  \"display_name\": \"Ground shipping\",  \"fixed_amount\": {    \"amount\": 500,    \"currency\": \"usd\"  },  \"livemode\": false,  \"metadata\": {},  \"tax_behavior\": \"unspecified\",  \"tax_code\": null,  \"type\": \"fixed_amount\"}\n```\n\n## [Update a shipping rate](https://docs.stripe.com/api/shipping_rates/update)\n\nUpdates an existing shipping rate object.\n\n### Parameters\n\n*   Whether the shipping rate can be used for new purchases. Defaults to `true`.\n    \n*   Describes a fixed amount to charge for shipping. Must be present if type is `fixed_amount`.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns the modified shipping rate object if the call succeeded.\n\nPOST /v1/shipping\\_rates/:id\n\n```\ncurl https://api.stripe.com/v1/shipping_rates/shr_1MrRx2LkdIwHu7ixikgEA6Wd \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"shr_1MrRx2LkdIwHu7ixikgEA6Wd\",  \"object\": \"shipping_rate\",  \"active\": true,  \"created\": 1680207604,  \"delivery_estimate\": null,  \"display_name\": \"Ground shipping\",  \"fixed_amount\": {    \"amount\": 500,    \"currency\": \"usd\"  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"tax_behavior\": \"unspecified\",  \"tax_code\": null,  \"type\": \"fixed_amount\"}\n```\n\n## [Retrieve a shipping rate](https://docs.stripe.com/api/shipping_rates/retrieve)\n\nReturns the shipping rate object with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a shipping rate object if a valid identifier was provided.\n\nGET /v1/shipping\\_rates/:id\n\n```\ncurl https://api.stripe.com/v1/shipping_rates/shr_1MrRx2LkdIwHu7ixikgEA6Wd \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"shr_1MrRx2LkdIwHu7ixikgEA6Wd\",  \"object\": \"shipping_rate\",  \"active\": true,  \"created\": 1680207604,  \"delivery_estimate\": null,  \"display_name\": \"Ground shipping\",  \"fixed_amount\": {    \"amount\": 500,    \"currency\": \"usd\"  },  \"livemode\": false,  \"metadata\": {},  \"tax_behavior\": \"unspecified\",  \"tax_code\": null,  \"type\": \"fixed_amount\"}\n```\n\n## [List all shipping rates](https://docs.stripe.com/api/shipping_rates/list)\n\nReturns a list of your shipping rates.\n\n### Parameters\n\n*   Only return shipping rates that are active or inactive.\n    \n*   A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.\n    \n*   Only return shipping rates for the given currency.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` shipping rates, starting after shipping rate `starting_after`. Each entry in the array is a separate shipping rate object. If no more shipping rates are available, the resulting array will be empty. This require should never raise an error.\n\n```\ncurl -G https://api.stripe.com/v1/shipping_rates \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/shipping_rates\",  \"has_more\": false,  \"data\": [    {      \"id\": \"shr_1MrRx2LkdIwHu7ixikgEA6Wd\",      \"object\": \"shipping_rate\",      \"active\": true,      \"created\": 1680207604,      \"delivery_estimate\": null,      \"display_name\": \"Ground shipping\",      \"fixed_amount\": {        \"amount\": 500,        \"currency\": \"usd\"      },      \"livemode\": false,      \"metadata\": {},      \"tax_behavior\": \"unspecified\",      \"tax_code\": null,      \"type\": \"fixed_amount\"    }    {...}    {...}  ],}\n```",
    "title": "The Shipping Rate object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/sources/ideal",
    "markdown": "# iDEAL payments with Sources | Stripe DocumentationThe Stripe Docs logo\n\n## Use Sources to accept payments using iDEAL, the most popular payment method in the Netherlands.\n\n#### Warning\n\nWe deprecated the Sources API and plan to remove support for local payment methods. If you currently integrate with iDEAL using the Sources API, you must [migrate to the Payment Methods API](https://docs.stripe.com/payments/payment-methods/transitioning). We’ll send email communication with more information about this end of support.\n\nFor information about integrating iDEAL with the current APIs, see [iDEAL payments](https://docs.stripe.com/payments/ideal).\n\nStripe users in Europe and the United States can accept iDEAL payments from customers in the Netherlands using [Sources](https://docs.stripe.com/sources)—a single integration path for creating payments using any supported method.\n\nDuring the payment process, a [Source](https://docs.stripe.com/api#sources) object is created and your customer is redirected to their bank’s website or mobile application to authorize the payment. After completing this, your integration uses the source to make a charge request and complete the payment.\n\niDEAL is a [push](https://docs.stripe.com/sources#pull-or-push-of-funds)\\-based, [single-use](https://docs.stripe.com/sources#single-use-or-reusable) and [synchronous](https://docs.stripe.com/sources#synchronous-or-asynchronous-confirmation) method of payment. This means your customer takes action to send the amount to you through a [redirect](https://docs.stripe.com/sources#flow-for-customer-action) and there is immediate confirmation about the success or failure of a payment.\n\n[\n\n## Create a Source object![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-source)\n\nTo create a `Source` object client-side, follow the [iDEAL Bank Element Quickstart](https://docs.stripe.com/payments/ideal). The iDEAL Bank Element lets your customers select their bank inline (rather than in an interstitial bank selection page) and check out faster. Once you’ve created a source object, you can proceed to customer authorization in the next step.\n\n### Custom client-side source creation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you choose to collect your customer’s bank yourself or not collect it at all, create your own form and call `stripe.createSource` as described in the [Stripe.js reference](https://docs.stripe.com/js#stripe-create-source). When doing so, make sure to collect the following information from your customer:\n\n| Parameter | Value |\n| --- | --- |\n| `type` | **ideal** |\n| `amount` | A positive integer in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) representing the amount to charge the customer (for example, **1099** for a 10.99 EUR payment). |\n| `currency` | **eur** (iDEAL must always use Euros) |\n| `ideal[bank]` (optional) | The customer’s bank. |\n| `redirect[return_url]` | The URL the customer should be redirected to after the authorization process. |\n| `statement_descriptor` (optional) | A custom statement descriptor for the payment. |\n\n### Server-side source creation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA `Source` object can also be created server-side using the [Source creation endpoint](https://docs.stripe.com/api#create_source) with the above parameters.\n\nUsing either method, Stripe returns a `Source` object containing the relevant details for the method of payment used. Information specific to iDEAL is provided within the `ideal` subhash.\n\n`{   \"id\": \"src_16xhynE8WzK49JbAs9M21jaR\",   \"object\": \"source\",   \"amount\": 1099,   \"client_secret\": \"src_client_secret_UfwvW2WHpZ0s3QEn9g5x7waU\",   \"created\": 1445277809,   \"currency\": \"eur\",   \"flow\": \"redirect\",   \"livemode\": true,   \"owner\": {`\n\n### Source creation in mobile applications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re building an iOS or Android app, you can implement sources using our mobile SDKs. Refer to our sources documentation for [iOS](https://docs.stripe.com/mobile/ios/sources) or [Android](https://docs.stripe.com/mobile/android/sources) to learn more.\n\n### Optional: Providing a custom statement descriptor ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\niDEAL requires a [statement descriptor](https://support.stripe.com/questions/when-i-charge-a-customer-what-will-they-see-on-their-card-statements) before the customer is redirected to authenticate the payment. By default, your Stripe account’s statement descriptor is used (you can review this in the [Dashboard](https://dashboard.stripe.com/settings/public)). You can provide a custom descriptor by specifying `statement_descriptor` when creating a source.\n\n`stripe.createSource({   type: 'ideal',   amount: 1099,   currency: 'eur',   statement_descriptor: 'ORDER AT11990',   owner: {     name: 'Jenny Rosen',   },   redirect: {     return_url: '__TOKEN_PLACEHOLDER_0__',   }, }).then(function(result) {   // handle result.error or result.source });`\n\nProviding a custom statement descriptor within a subsequent charge request has no effect.\n\n### Optional: Specifying the customer’s bank ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen your customer is redirected, they are first presented with a page to select which bank they use and complete authentication. If you already know which bank your customer uses for iDEAL payments, or request this during the checkout process, you can optionally provide the `ideal[bank]` parameter when creating a source and one of the following values. This allows your customer to be immediately redirected to their bank. The supported values for `ideal[bank]` are:\n\n| Bank name | Value |\n| --- | --- |\n| ABN AMRO | `abn_amro` |\n| ASN Bank | `asn_bank` |\n| Bunq | `bunq` |\n| ING | `ing` |\n| Knab | `knab` |\n| N26 | `n26` |\n| Nationale-Nederlanden | `nn` |\n| Rabobank | `rabobank` |\n| Revolut | `revolut` |\n| RegioBank | `regiobank` |\n| SNS Bank (De Volksbank) | `sns_bank` |\n| Triodos Bank | `triodos_bank` |\n| Van Lanschot | `van_lanschot` |\n| Yoursafe | `yoursafe` |\n\n### Error codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSource creation for iDEAL payments may return any of the following errors:\n\n| Error | Description |\n| --- | --- |\n| `payment_method_not_available` | The payment method is currently not available. You should invite your customer to fallback to another payment method to proceed. |\n| `processing_error` | An unexpected error occurred preventing us from creating the source. The source creation should be retried. |\n| `invalid_ideal_bank` | The iDEAL bank parameter is invalid. It must be one of the values provided above. |\n\n[\n\n## Have the customer authorize the payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#customer-action)\n\nWhen creating a source, its status is initially set to `pending` and cannot yet be used to make a charge request. Your customer must authorize an iDEAL payment to make the source chargeable. To allow your customer to authorize the payment, redirect them to the URL provided within the`redirect[url]` attribute of the `Source` object.\n\nAfter the authorization process, your customer is redirected back to the URL provided as a value of `redirect[return_url]`. This happens regardless of whether authorization was successful or not. If the customer has authorized the payment, the `Source` object’s status will transition to `chargeable` when it is ready to be used in a charge request. If your customer declines the payment, the status will transition to `failed`.\n\nStripe populates the `redirect[return_url]` with the following GET parameters when returning your customer to your website:\n\n*   `source`: a string representing the original ID of the `Source` object\n*   `livemode`: indicates if this is a live payment, either `true` or `false`\n*   `client_secret`: used to confirm that the returning customer is the same one who triggered the creation of the source (source IDs are not considered secret)\n\nYou may include any other GET parameters you may need when specifying `redirect[return_url]`. Do not use the above as parameter names yourself as these would be overridden with the values we populate.\n\n### Mobile applications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo integrate iDEAL within a mobile application, provide your application URI scheme as the `redirect[return_url]` value. By doing so, your customers are returned to your app after completing authorization. Refer to our Sources documentation for [iOS](https://docs.stripe.com/mobile/ios/sources) or [Android](https://docs.stripe.com/mobile/android/sources) to learn more.\n\nIf you are integrating without using our mobile SDKs, the redirect URL must be opened using the device’s native browser. The use of in-app web views and containers is prohibited by iDEAL and can prevent your customer from completing authentication—resulting in a lower conversion rate.\n\n### Testing the redirect process![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a `Source` object using your test API keys, you can follow the URL returned in the `redirect[url]` field. This leads to a Stripe page that displays information about the API request, and where you can either authorize or cancel the payment. Authorizing the payment redirects you to the URL specified in `redirect[return_url]`.\n\nAlternatively, to accelerate testing, use the following value for `owner[email]`, where `xxx_` is any prefix of your choice (these patterns are significant only in testmode):\n\n| Email Address | Effect |\n| --- | --- |\n| `xxx_chargeable@example.com` | The source will be created as `pending`, but automatically transition to `chargeable` within seconds of its creation. |\n\n[\n\n## Charge the Source![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#charge-request)\n\nOnce the customer has authenticated the payment, the source’s `status` transitions to `chargeable` and it can be used to make a charge request. This transition happens asynchronously and may occur after the customer was redirected back to your website.\n\nSome customers using iDEAL assume that the order process is complete once they have authenticated the payment and received confirmation from their bank. This results in customers who close their browser instead of following the redirect and returning to your app or website.\n\nFor these reasons it is essential that your integration rely on [webhooks](https://docs.stripe.com/webhooks \"webhook\") to determine when the source becomes chargeable in order to create a charge. Please refer to our [best practices](https://docs.stripe.com/sources/best-practices) for more details on how to best integrate payment methods using webhooks.\n\n### Webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following webhook events are sent to notify you about changes to the source’s status:\n\n| Event | Description |\n| --- | --- |\n| `source.chargeable` | A `Source` object becomes `chargeable` after a customer has authenticated and verified a payment. |\n| `source.failed` | A `Source` object failed to become chargeable as your customer declined to authenticate the payment. |\n| `source.canceled` | A `Source` object expired and cannot be used to create a charge. |\n\n### Make a charge request using the source![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOnce the source is chargeable, from your `source.chargeable` webhook handler, you can make a charge request using the source ID as the value for the `source` parameter to complete the payment.\n\n`curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d amount=\"1099\" \\   -d currency=\"eur\" \\   -d source=src_18eYalAHEMiOZZp1l9ZTjSU0`\n\niDEAL Sources are [single-use](https://docs.stripe.com/sources#single-use-or-reusable) and cannot be used for recurring or additional payments.\n\nRefer to our [Sources & Customers](https://docs.stripe.com/sources/customers) guide for more information on how single-use Sources interact with [Customers](https://docs.stripe.com/api/customers \"Customers\").\n\n[\n\n## Confirm that the charge has succeeded![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#charge-confirmation)\n\nSince iDEAL is a [synchronous](https://docs.stripe.com/sources#synchronous-or-asynchronous-confirmation) payment method and the customer has already authenticated the payment as part of the redirect, unless there is an unexpected error, the [Charge](https://docs.stripe.com/api#charge_object) will immediately succeed.\n\nYou will also receive the following webhook event as the charge is created:\n\n| Event | Description |\n| --- | --- |\n| `charge.succeeded` | The charge succeeded and the payment is complete. |\n\nWe recommend that you rely on the `charge.succeeded` webhook event to notify your customer that the payment process has been completed and their order is confirmed. Please refer to our [best practices](https://docs.stripe.com/sources/best-practices) for more details on how to best integrate payment methods using webhooks.\n\n### Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe risk of fraud or unrecognized payments is extremely low with iDEAL as the customer must authenticate the payment with their bank. As such, there is no dispute process that can result in a chargeback and funds withdrawn from your Stripe account.\n\n### Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayments made with iDEAL can only be submitted for refund within 180 days from the date of the original charge. After 180 days, it is no longer possible to refund the charge.\n\n### Sources expiration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA source must be used within six hours of becoming `chargeable`. If it is not, its status is automatically transitioned to `canceled` and your integration receives a `source.canceled` webhook event. Additionally, `pending` sources are canceled after one hour if they are not used to authenticate a payment.\n\nOnce a source is canceled, the customer’s authenticated payment is refunded automatically—no money is moved into your account. For this reason, make sure the order is canceled on your end and the customer is notified once you receive the `source.canceled` event.",
    "title": "iDEAL payments with Sources | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payment_method_configurations/object",
    "markdown": "# The Payment Method Configuration object\n\n### Attributes\n\n*   #### \n    \n    idstringretrievable with publishable key\n    \n    Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Whether the configuration can be used for new payments.\n    \n*   #### \n    \n    applicationnullable string\n    \n    For child configs, the Connect application associated with the configuration.\n    \n*   The default configuration is used whenever a payment method configuration is not specified.\n    \n*   The configuration’s name.\n    \n*   For child configs, the configuration’s parent configuration.\n    \n\n### More attributes\n\n*   #### \n    \n    acss\\_debitnullable object\n    \n\n*   #### \n    \n    afterpay\\_clearpaynullable object\n    \n\n*   #### \n    \n    amazon\\_paynullable object\n    \n\n*   #### \n    \n    au\\_becs\\_debitnullable object\n    \n*   #### \n    \n    bacs\\_debitnullable object\n    \n*   #### \n    \n    bancontactnullable object\n    \n\n*   #### \n    \n    cartes\\_bancairesnullable object\n    \n\n*   #### \n    \n    customer\\_balancenullable object\n    \n\n*   #### \n    \n    google\\_paynullable object\n    \n\n*   #### \n    \n    multibanconullable object\n    \n\n*   #### \n    \n    revolut\\_paynullable object\n    \n*   #### \n    \n    sepa\\_debitnullable object\n    \n\n*   #### \n    \n    us\\_bank\\_accountnullable object\n    \n*   #### \n    \n    wechat\\_paynullable object\n    \n\nThe Payment Method Configuration object\n\n```\n{  \"id\": \"pmc_abcdef\",  \"object\": \"payment_method_configuration\",  \"acss_debit\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"active\": true,  \"affirm\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"afterpay_clearpay\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"alipay\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"apple_pay\": {    \"available\": true,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"on\",      \"value\": \"on\"    }  },  \"bancontact\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"card\": {    \"available\": true,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"on\",      \"value\": \"on\"    }  },  \"cartes_bancaires\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"eps\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"giropay\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"google_pay\": {    \"available\": true,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"on\",      \"value\": \"on\"    }  },  \"ideal\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"is_default\": true,  \"klarna\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"link\": {    \"available\": true,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"on\",      \"value\": \"on\"    }  },  \"livemode\": false,  \"name\": \"Default\",  \"p24\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"sepa_debit\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"sofort\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"us_bank_account\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"wechat_pay\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  }}\n```\n\n## [Create a payment method configuration](https://docs.stripe.com/api/payment_method_configurations/create)\n\nCreates a payment method configuration\n\n### Parameters\n\n*   Configuration name.\n    \n*   Configuration’s parent configuration. Specify to create a child configuration.\n    \n\n### More parameters\n\n### Returns\n\nReturns the payment method configuration object\n\nPOST /v1/payment\\_method\\_configurations\n\n```\ncurl https://api.stripe.com/v1/payment_method_configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"Buy Now Pay Laters\"\n```\n\n```\n{  \"id\": \"pmc_abcdef\",  \"object\": \"payment_method_configuration\",  \"acss_debit\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"active\": true,  \"affirm\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"afterpay_clearpay\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"alipay\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"apple_pay\": {    \"available\": true,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"on\",      \"value\": \"on\"    }  },  \"bancontact\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"card\": {    \"available\": true,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"on\",      \"value\": \"on\"    }  },  \"cartes_bancaires\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"eps\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"giropay\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"google_pay\": {    \"available\": true,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"on\",      \"value\": \"on\"    }  },  \"ideal\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"is_default\": true,  \"klarna\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"link\": {    \"available\": true,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"on\",      \"value\": \"on\"    }  },  \"livemode\": false,  \"name\": \"Default\",  \"p24\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"sepa_debit\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"sofort\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"us_bank_account\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"wechat_pay\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  }}\n```\n\n## [Update payment method configuration](https://docs.stripe.com/api/payment_method_configurations/update)\n\nUpdate payment method configuration\n\n### Parameters\n\n*   Whether the configuration can be used for new payments.\n    \n*   Configuration name.\n    \n\n### More parameters\n\n### Returns\n\nAn object with the updated account payment method configuration\n\nPOST /v1/payment\\_method\\_configurations/:id\n\n```\ncurl https://api.stripe.com/v1/payment_method_configurations/pmc_abcdef \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"acss_debit[display_preference][preference]\"=on\n```\n\n```\n{  \"id\": \"pmc_abcdef\",  \"object\": \"payment_method_configuration\",  \"acss_debit\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"active\": true,  \"affirm\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"afterpay_clearpay\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"alipay\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"apple_pay\": {    \"available\": true,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"on\",      \"value\": \"on\"    }  },  \"bancontact\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"card\": {    \"available\": true,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"on\",      \"value\": \"on\"    }  },  \"cartes_bancaires\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"eps\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"giropay\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"google_pay\": {    \"available\": true,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"on\",      \"value\": \"on\"    }  },  \"ideal\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"is_default\": true,  \"klarna\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"link\": {    \"available\": true,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"on\",      \"value\": \"on\"    }  },  \"livemode\": false,  \"name\": \"Default\",  \"p24\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"sepa_debit\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"sofort\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"us_bank_account\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"wechat_pay\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  }}\n```\n\n## [Retrieve payment method configuration](https://docs.stripe.com/api/payment_method_configurations/retrieve)\n\nRetrieve payment method configuration\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA payment method configuration object.\n\nGET /v1/payment\\_method\\_configurations/:id\n\n```\ncurl https://api.stripe.com/v1/payment_method_configurations/pmc_abcdef \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pmc_abcdef\",  \"object\": \"payment_method_configuration\",  \"acss_debit\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"active\": true,  \"affirm\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"afterpay_clearpay\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"alipay\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"apple_pay\": {    \"available\": true,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"on\",      \"value\": \"on\"    }  },  \"bancontact\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"card\": {    \"available\": true,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"on\",      \"value\": \"on\"    }  },  \"cartes_bancaires\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"eps\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"giropay\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"google_pay\": {    \"available\": true,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"on\",      \"value\": \"on\"    }  },  \"ideal\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"is_default\": true,  \"klarna\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"link\": {    \"available\": true,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"on\",      \"value\": \"on\"    }  },  \"livemode\": false,  \"name\": \"Default\",  \"p24\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"sepa_debit\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"sofort\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"us_bank_account\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  },  \"wechat_pay\": {    \"available\": false,    \"display_preference\": {      \"overridable\": null,      \"preference\": \"off\",      \"value\": \"off\"    }  }}\n```\n\n## [List payment method configurations](https://docs.stripe.com/api/payment_method_configurations/list)\n\nList payment method configurations\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA list of all payment method configuration objects\n\nGET /v1/payment\\_method\\_configurations\n\n```\ncurl https://api.stripe.com/v1/payment_method_configurations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"has_more\": false,  \"data\": [    {      \"id\": \"pmc_1JwXwt2eZvKYlo2CHV7mUH3p\",      \"object\": \"payment_method_configuration\",      \"acss_debit\": {        \"available\": false,        \"display_preference\": {          \"overridable\": null,          \"preference\": \"off\",          \"value\": \"off\"        }      },      \"active\": true,      \"affirm\": {        \"available\": false,        \"display_preference\": {          \"overridable\": null,          \"preference\": \"off\",          \"value\": \"off\"        }      },      \"afterpay_clearpay\": {        \"available\": false,        \"display_preference\": {          \"overridable\": null,          \"preference\": \"off\",          \"value\": \"off\"        }      },      \"alipay\": {        \"available\": false,        \"display_preference\": {          \"overridable\": null,          \"preference\": \"off\",          \"value\": \"off\"        }      },      \"apple_pay\": {        \"available\": true,        \"display_preference\": {          \"overridable\": null,          \"preference\": \"on\",          \"value\": \"on\"        }      },      \"bancontact\": {        \"available\": false,        \"display_preference\": {          \"overridable\": null,          \"preference\": \"off\",          \"value\": \"off\"        }      },      \"card\": {        \"available\": true,        \"display_preference\": {          \"overridable\": null,          \"preference\": \"on\",          \"value\": \"on\"        }      },      \"cartes_bancaires\": {        \"available\": false,        \"display_preference\": {          \"overridable\": null,          \"preference\": \"off\",          \"value\": \"off\"        }      },      \"eps\": {        \"available\": false,        \"display_preference\": {          \"overridable\": null,          \"preference\": \"off\",          \"value\": \"off\"        }      },      \"giropay\": {        \"available\": false,        \"display_preference\": {          \"overridable\": null,          \"preference\": \"off\",          \"value\": \"off\"        }      },      \"google_pay\": {        \"available\": true,        \"display_preference\": {          \"overridable\": null,          \"preference\": \"on\",          \"value\": \"on\"        }      },      \"ideal\": {        \"available\": false,        \"display_preference\": {          \"overridable\": null,          \"preference\": \"off\",          \"value\": \"off\"        }      },      \"is_default\": true,      \"klarna\": {        \"available\": false,        \"display_preference\": {          \"overridable\": null,          \"preference\": \"off\",          \"value\": \"off\"        }      },      \"link\": {        \"available\": true,        \"display_preference\": {          \"overridable\": null,          \"preference\": \"on\",          \"value\": \"on\"        }      },      \"livemode\": false,      \"name\": \"Default\",      \"p24\": {        \"available\": false,        \"display_preference\": {          \"overridable\": null,          \"preference\": \"off\",          \"value\": \"off\"        }      },      \"sepa_debit\": {        \"available\": false,        \"display_preference\": {          \"overridable\": null,          \"preference\": \"off\",          \"value\": \"off\"        }      },      \"sofort\": {        \"available\": false,        \"display_preference\": {          \"overridable\": null,          \"preference\": \"off\",          \"value\": \"off\"        }      },      \"us_bank_account\": {        \"available\": false,        \"display_preference\": {          \"overridable\": null,          \"preference\": \"off\",          \"value\": \"off\"        }      },      \"wechat_pay\": {        \"available\": false,        \"display_preference\": {          \"overridable\": null,          \"preference\": \"off\",          \"value\": \"off\"        }      }    }  ]}\n```",
    "title": "The Payment Method Configuration object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/features/mail-telephone-orders/payments",
    "markdown": "# Process MOTO payments | Stripe DocumentationThe Stripe Docs logo\n\n## Process MOTO paymentsBeta\n\n## Process mail order and telephone order (MOTO) payments.\n\nAs when [collecting payments](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven&reader=wpe) with the server-driven integration, the first step is to create a `PaymentIntent`.\n\n1.  [Create a PaymentIntent](#create-payment-intent)\n2.  [Process the payment](#process-payment)\n3.  [Verify the reader state](#verify-reader-state)\n4.  [Capture the payment](#capture-payment)\n\n#### Note\n\nIf you’re displaying cart details using the [setReaderDisplay](https://docs.stripe.com/terminal/features/display) method, you must reset the reader’s display from a line item interface to the splash screen before collecting a MOTO payment.\n\n![MOTO payment collection screenshots](https://b.stripecdn.com/docs-statics-srv/assets/moto-payment-light.4990e358c1ac4d6e4c61d3d180e97e41.png)\n\nMOTO payment collection flow\n\n[](#create-payment-intent)\n\nTo begin collecting a MOTO payment, you must create a [PaymentIntent](https://docs.stripe.com/payments/payment-intents) with [payment\\_method\\_types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types) that includes `card`.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d capture_method=automatic \\  -d amount=1000`\n\n[](#process-payment)\n\nAfter you create a `PaymentIntent`, use [process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent) to process the payment, setting [process\\_config\\[moto\\]](https://docs.stripe.com/api/terminal/readers/process_payment_intent#process_payment_intent-process_config) to `true`.\n\n`curl https://api.stripe.com/v1/terminal/readers/`\n\n`{{READER_ID}}`\n\n`/process_payment_intent \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d payment_intent=  {{PAYMENT_INTENT_ID}}   \\  -d \"process_config[moto]\"=true`\n\nThe [process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent) request is asynchronous. After the request, the reader prompts you to enter the cardholder’s card number, CVC, expiration date, and postal code. You can then confirm the cardholder’s details to submit the payment for authorization.\n\n[](#capture-payment)\n\nYou must call [capture](https://docs.stripe.com/terminal/payments/collect-card-payment?terminal-sdk-platform=server-driven#capture-payment) to complete the payment if the `PaymentIntent` has a status of `requires_capture`.",
    "title": "Process MOTO payments | Stripe Documentation",
    "description": "Process mail order and telephone order (MOTO) payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/features/mail-telephone-orders/save-directly",
    "markdown": "# Saving cards using MOTO | Stripe DocumentationThe Stripe Docs logo\n\nYou’re responsible for your compliance with all applicable laws, regulations, and network rules when saving a customer’s payment details. For example, the European Data Protection Board has issued guidance regarding saving payment details. These requirements generally apply if you want to save your customer’s payment method for future use, such as presenting a customer’s payment method to them in the checkout flow for a future purchase or charging them when they’re not actively using your website or app.\n\nAdd terms to your website or app that state how you plan to save payment method details and allow customers to opt in. If you plan to charge the customer while they’re offline, then at a minimum, make sure that your terms also cover the following:\n\n*   The customer’s agreement to your initiating a payment or a series of payments on their behalf for specified transactions.\n*   The anticipated timing and frequency of payments (for instance, whether charges are for scheduled installment or subscription payments, or for unscheduled top-ups).\n*   How the payment amount is determined.\n*   Your cancellation policy, if you’re setting up the payment method for a subscription service.\n\nMake sure you keep a record of your customer’s written agreement to these terms.\n\nWhen you save a payment method, it can only be used for the specific usage that you included in your terms. If you want to charge customers when they’re offline and also save the customer’s payment method to present to them as a saved payment method for future purchases, you must explicitly collect consent from the customer. One way to do so is with a “Save my payment method for future use” checkbox.",
    "title": "Saving cards using MOTO | Stripe Documentation",
    "description": "Save mail order and telephone order (MOTO) card details for reuse.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/terminal/device_asset_versions/object",
    "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
    "title": "Page not found | Stripe Documentation",
    "description": "Sorry, but the page you were looking for couldn't be found.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/terminal/features/apps-on-devices/deploy?dashboard-or-api=dashboard",
    "markdown": "# Deploy your app | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to deploy your Android app to your devices.\n\nAfter Stripe reviews and approves your app for deployment, we [notify you](https://docs.stripe.com/terminal/features/apps-on-devices/submit#monitor-status) by email, in the Dashboard, or through a webhook. You can then follow the instructions below to deploy your app.\n\nDuring deployment, your app is immediately sent and downloaded to your device. The device reboots to install the app. Devices reboot every 24 hours and apply any updates automatically. To check for and apply updates immediately, you can manually reboot your device.\n\n## Add or edit a deploy group ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBefore you can add or edit a deploy group, you must create a Terminal [location](https://docs.stripe.com/terminal/fleet/locations-and-zones) and add [readers](https://docs.stripe.com/api/terminal/readers/object) to that location.\n\nAfter you create a deploy group, you can edit it at any time by clicking **edit** next to the location.\n\n1.  In the Dashboard, click **Developers** > **Apps**.\n2.  On the [Terminal apps](https://dashboard.stripe.com/terminal/apps_on_devices/apps) tab, click **Manage deploy groups**.\n3.  Click **Add deploy group**.\n4.  Complete the following steps in the **Deploy group** window:\n    *   Enter a group name.\n    *   Choose your Terminal device type.\n    *   Choose the location(s) to add.\n    *   Click **Done**.\n\n## Deploy an app version ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can deploy your app after a [Stripe reviewer approves](https://docs.stripe.com/terminal/features/apps-on-devices/app-review) it.\n\n1.  On the [Terminal apps](https://dashboard.stripe.com/terminal/apps_on_devices/apps) tab, choose the app that you want to deploy.\n2.  On the app details page, click **Deploy version**.\n3.  Choose a version of the approved app, then click **Next**. You can’t deploy an earlier version of an app. The app version must be newer than the currently deployed app.\n4.  Choose the deploy group, then click **Next**.\n5.  Choose your preferred kiosk app, then click **Next**. This is the default app that launches when the Stripe reader turns on. If there’s only one app to deploy, choose that app instead.\n6.  Confirm the deployment details, then click **Deploy**. The app deploys immediately.\n\n## Deploy group best practices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can sort devices into different deploy groups to roll out software independently and isolate fault in case of any issues. You might have fewer or more deploy groups based on tooling, risk tolerance, and specific business needs.\n\nWe recommend the following deploy group setup:\n\n*   **Alpha** - Contains locations that correspond to your internal devkits or internal production devices.\n*   **Beta** - Contains a small number of actual user locations. You can randomly choose these locations, select them based on meaningful criteria (for example, less risky locations), or have users opt in to the Beta deploy group based on their risk tolerance.\n*   **General** - Contains all remaining actual user locations, except those in the Alpha or Beta groups.\n\nWhen your app is ready for deployment, promote deploy groups from least to most risky:\n\n|     |     |     |\n| --- | --- | --- |\n| 1   | Alpha | First, deploy to the Alpha deploy group to test your app in a way that minimizes risk to users. Discovering a bug or undesirable behavior at this stage only affects a small number of internal devices, rather than actual users and real payments. |\n| 2   | Beta | Second, deploy to the Beta deploy group. This balances exposing your app to real users and not exposing all users to potential issues. |\n| 3   | General | Finally, deploy to the General deploy group after addressing any issues or confirming that no issues existed for the Beta deploy group. |",
    "title": "Deploy your app | Stripe Documentation",
    "description": "Learn how to deploy your Android app to your devices.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/cash-app-pay/accept-a-payment",
    "markdown": "# Cash App Pay payments | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nThis guides you through enabling Cash App Pay on [Checkout](https://docs.stripe.com/payments/checkout), our hosted checkout form, and shows the differences between accepting a card payment and a Cash App Pay payment.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support Cash App Pay payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be expressed in USD.\n\n[](#web-set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#accept-a-payment)\n\n#### Note\n\nThis guide builds on the foundational [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) Checkout integration.\n\n### Enable Cash App Pay as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `cashapp` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the `usd` currency\n\n`Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'cashapp'],   line_items: [{     price_data: {       currency: 'usd',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })`\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#web-test-integration)\n\nTo test your integration, choose Cash App Pay as the payment method and tap **Pay**. In test mode, this redirects you to a test payment page where you can approve or decline the payment.\n\nIn live mode, tapping **Pay** redirects you to the Cash App mobile application—you don’t have the option to approve or decline the payment within Cash App. The payment is automatically approved after the redirect.",
    "title": "Cash App Pay payments | Stripe Documentation",
    "description": "Learn how to accept Cash App Pay, a digital wallet popular with US customers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/dashboard/basics",
    "markdown": "# Dashboard basics | Stripe DocumentationThe Stripe Docs logo\n\n## Learn the basics of the Stripe Dashboard.\n\nThe Stripe Dashboard is the user interface that lets you manage and configure your account. Use it to navigate to account resources, invite team members, monitor you integration, and so on.\n\n## Home ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Home](https://dashboard.stripe.com/dashboard) provides information about the activity on your account. It contains analytics and charts that provide information about the performance of your business. Home also shows recent activity that might require you to take action, such as unanswered disputes or identity verifications.\n\n## Navigate the Dashboard ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Dashboard is organized by the most common workflows used to manage your business. For example, the [Payments](https://dashboard.stripe.com/payments) tab allows you to manage the flow of money in and out of your account.\n\nIn many cases, you can use the Dashboard to perform specific actions, such as refunding a payment or canceling a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") without needing to use the API. You can access configuration options and settings from the [Dashboard settings](https://dashboard.stripe.com/settings).\n\n#### Keyboard shortcuts\n\nThe Dashboard supports keyboard shortcuts for common actions. Press **?** on your keyboard on any page in the Dashboard for a list of available shortcuts.\n\n## Team member access ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can invite [team members](https://docs.stripe.com/get-started/account/teams) to access the Dashboard and help manage your business. Each of them can have different levels of access. For instance, you can allow members of your customer service team to access your Dashboard for the purpose of handling [refunds](https://docs.stripe.com/refunds) and [dispute responses](https://docs.stripe.com/disputes/responding#respond).\n\n## Monitor your integration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Developers Dashboard](https://dashboard.stripe.com/developers) provides you with information about the performance and health of your integration. You can view your API and [webhook](https://docs.stripe.com/webhooks \"webhook\") usage with real time charts, upgrade your API version, and review API errors that can be filtered by endpoint or type.\n\nStripe [logs](https://dashboard.stripe.com/logs) every successful or failed request made using your API keys. Each log contains details about the original request, whether it succeeded or failed, the response from Stripe, and a reference to any related API resources.\n\nYou can also review every [event](https://docs.stripe.com/api#events) that takes place on your account in the [Dashboard](https://dashboard.stripe.com/events). Events represent a change to an API resource (for example, when you update or create a [Charge](https://docs.stripe.com/api/charges/object) object), and contain its current information.\n\n## Reporting and searching ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can filter and export all of your transactional data as [reports](https://docs.stripe.com/reports) in CSV format. You can also download a monthly report or [QuickBooks-formatted export](https://docs.stripe.com/reports/quickbooks) from your account’s business settings.\n\nYou can use [Dashboard search](https://docs.stripe.com/dashboard/search) to find specific information using different terms and operators to narrow down the number of results. For instance, you can search for a specific payment using the customer’s email address or the last four digits of their card number.\n\nFor more advanced searches and reporting, [Stripe Sigma](https://stripe.com/sigma) makes all of your data available as an interactive SQL environment in the Dashboard. You can write queries to generate customized reports without needing to use additional reporting tools.\n\n## Browser compatibility ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Dashboard officially supports the following web browsers and mobile environments:\n\n*   The last 20 major versions of Chrome and Firefox.\n*   The last two major versions of Safari and Edge.\n*   The last two major versions of mobile Safari on iOS.",
    "title": "Dashboard basics | Stripe Documentation",
    "description": "Learn the basics of the Stripe Dashboard.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/collect-then-transfer-guide",
    "markdown": "# Collect payments then pay out\n\nThis guide explains how to accept payments and move funds to the bank accounts of your service providers or sellers. For demonstration purposes, we’ll build a home-rental marketplace that connects homeowners to potential tenants. We’ll also show you how to accept payments from tenants (customers) and pay out homeowners (your platform’s users).\n\n## Prerequisites![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  [Register your platform](https://dashboard.stripe.com/connect/tasklist).\n2.  Add business details to [activate your account](https://dashboard.stripe.com/account/onboarding).\n3.  [Complete your platform profile](https://dashboard.stripe.com/connect/settings/profile).\n4.  [Customize your brand settings](https://dashboard.stripe.com/settings/connect/stripe-dashboard/branding). Add a business name, icon, and brand color.\n\n[](#setup)\n\nInstall Stripe’s official libraries to access the API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#create-account)\n\nWhen a user (seller or service provider) signs up on your marketplace, you must create a corresponding user [Account](https://docs.stripe.com/api/accounts) (referred to as a _connected account_). You can’t accept payments and move funds to the bank account of your user without a connected account. Connected accounts represent your users in the Stripe API and collect the information required to verify the user’s identity. In our home-rental example, the connected account represents the homeowner.\n\n### Create a connected account and prefill information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the `/v1/accounts` API to [create](https://docs.stripe.com/api/accounts/create) a connected account by specifying the [connected account properties](https://docs.stripe.com/connect/migrate-to-controller-properties), or by specifying the account type.\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"controller[losses][payments]\"=application \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[stripe_dashboard][type]\"=express`\n\nIf you’ve already collected information for your connected accounts, you can prefill that information on the account object. You can prefill any account information, including personal and business information, external account information, and so on.\n\nConnect Onboarding doesn’t ask for the prefilled information. However, it does ask the account holder to confirm the prefilled information before accepting the [Connect service agreement](https://docs.stripe.com/connect/service-agreement-types).\n\nWhen testing your integration, prefill account information using [test data](https://docs.stripe.com/connect/testing).\n\n### Create an account link ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can create an account link by calling the [Account Links](https://docs.stripe.com/api/account_links) API with the following parameters:\n\n*   `account`\n*   `refresh_url`\n*   `return_url`\n*   `type` = `account_onboarding`\n\n`curl https://api.stripe.com/v1/account_links \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\   --data-urlencode refresh_url=\"[https://example.com/reauth](https://example.com/reauth)\" \\   --data-urlencode return_url=\"[https://example.com/return](https://example.com/return)\" \\  -d type=account_onboarding`\n\n### Redirect your user to the account link URL ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe response to your [Account Links](https://docs.stripe.com/api/account_links) request includes a value for the key `url`. Redirect to this link to send your user into the flow. URLs from the [Account Links](https://docs.stripe.com/api/account_links) API are temporary and are single-use only, because they grant access to the connected account user’s personal information. Authenticate the user in your application before redirecting them to this URL. If you want to prefill information, you must do so before generating the account link. After you create the account link, you can’t read or write information for the connected account.\n\n#### Security tip\n\nDon’t email, text, or otherwise send account link URLs outside of your platform application. Instead, provide them to the authenticated account holder within your application.\n\n### Handle the user returning to your platform ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConnect Onboarding requires you to pass both a `return_url` and `refresh_url` to handle all cases where the user is redirected to your platform. It’s important that you implement these correctly to provide the best experience for your user.\n\n#### Note\n\nYou can use HTTP for your `return_url` and `refresh_url` while in test mode (for example, to test with localhost), but live mode only accepts HTTPS. Be sure to swap testing URLs for HTTPS URLs before going live.\n\n#### return\\_url![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe issues a redirect to this URL when the user completes the Connect Onboarding flow. This doesn’t mean that all information has been collected or that there are no outstanding requirements on the account. This only means the flow was entered and exited properly.\n\nNo state is passed through this URL. After a user is redirected to your `return_url`, check the state of the `details_submitted` parameter on their account by doing either of the following:\n\n*   Listening to `account.updated` webhooks\n*   Calling the [Accounts](https://docs.stripe.com/api/accounts) API and inspecting the returned object\n\n#### refresh\\_url![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe redirects your user to the `refresh_url` in these cases:\n\n*   The link is expired (a few minutes went by since the link was created).\n*   The user already visited the URL (the user refreshed the page or clicked back or forward in the browser).\n*   Your platform is no longer able to access the account.\n*   The account has been rejected.\n\nYour `refresh_url` should trigger a method on your server to call [Account Links](https://docs.stripe.com/api/account_links) again with the same parameters, and redirect the user to the Connect Onboarding flow to create a seamless experience.\n\n### Handle users that haven’t completed onboarding ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA user that’s redirected to your `return_url` might not have completed the onboarding process. Use the `/v1/accounts` endpoint to retrieve the user’s account and check for `charges_enabled`. If the account isn’t fully onboarded, provide UI prompts to allow the user to continue onboarding later. The user can complete their account activation through a new account link (generated by your integration). You can check the state of the `details_submitted` parameter on their account to see if they’ve completed the onboarding process.\n\n[](#enable-payment-methods)\n\nView your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) and enable the payment methods you want to support. Card payments, Google Pay, and Apple Pay are enabled by default but you can enable and disable payment methods as needed.\n\nBefore the payment form is displayed, Stripe evaluates the currency, payment method restrictions, and other parameters to determine the list of supported payment methods. Payment methods that increase conversion and that are most relevant to the currency and customer’s location are prioritized. Lower priority payment methods are hidden in an overflow menu.\n\n[](#accept-payment)\n\nUse [Stripe Checkout](https://stripe.com/payments/checkout) to accept payments. Checkout supports multiple payment methods and automatically shows the most relevant ones to your customer. You can accept payments with Checkout using a Stripe-hosted page or add a prebuilt embeddable payment form directly in your website. You can also create a custom flow (using Payment Element) to accept multiple payment methods with a single front-end integration.\n\n### Create a Checkout Session Client and Server ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA Checkout Session controls what your customer sees in the Stripe-hosted payment page such as line items, the order amount and currency, and acceptable payment methods.\n\nAdd a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nOn your server, make the following call to Stripe’s API. After creating a Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d mode=payment \\  -d \"line_items[0][price]\"=  {{PRICE_ID}}   \\  -d \"line_items[0][quantity]\"=1 \\  -d \"payment_intent_data[application_fee_amount]\"=123 \\  -d \"payment_intent_data[transfer_data][destination]\"=  {{CONNECTED_ACCOUNT_ID}}   \\   --data-urlencode success_url=\"[https://example.com/success](https://example.com/success)\" \\   --data-urlencode cancel_url=\"[https://example.com/cancel](https://example.com/cancel)\"`\n\n*   `line_items` - This argument represents the items the customer is purchasing. The items are displayed in the Stripe-hosted user interface.\n*   `success_url` - This argument redirects a user after they complete a payment.\n*   `cancel_url` - This argument redirects a user after they click cancel.\n*   `payment_intent_data[application_fee_amount]` - This argument specifies the amount your platform plans to take from the transaction. The full charge amount is immediately transferred from the platform to the connected account that’s specified by `transfer_data[destination]` after the charge is captured. The `application_fee_amount` is then transferred back to the platform, and the Stripe fee is deducted from the platform’s amount.\n*   `payment_intent_data[transfer_data][destination]` - This argument indicates that this is a [destination charge](https://docs.stripe.com/connect/destination-charges). A destination charge means the charge is processed on the platform and then the funds are immediately and automatically transferred to the connected account’s pending balance. For our home-rental example, we want to build an experience where the customer pays through the platform and the homeowner gets paid by the platform.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/application_fee_amount.837aa2339469b3c1a4319672971c1367.svg)\n\nCheckout uses the brand settings of your platform account for destination charges. For more information, see [Customize branding](https://docs.stripe.com/connect/destination-charges?platform=web&ui=stripe-hosted#branding).\n\nThis Session creates a destination charge. If you need to control the timing of transfers or need to transfer funds from a single payment to multiple parties, use separate charges and transfers instead. To use separate charges, see [Enable other businesses to accept payments directly](https://docs.stripe.com/connect/enable-payment-acceptance-guide?platform=web).\n\n### Handle post-payment events Server-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe sends a [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) event when the payment completes. [Use a webhook to receive these events](https://docs.stripe.com/webhooks/quickstart) and run actions, like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes. Some payment methods also take 2-14 days for payment confirmation. Setting up your integration to listen for asynchronous events enables you to accept multiple [payment methods](https://stripe.com/payments/payment-methods-guide) with a single integration.\n\nIn addition to handling the `checkout.session.completed` event, we recommend handling two other events when collecting payments with Checkout:\n\nThese events all include the [Checkout Session](https://docs.stripe.com/api/checkout/sessions) object. After the payment succeeds, the underlying [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") status changes from `processing` to `succeeded`.\n\n[](#testing)\n\nTest your account creation flow by [creating accounts](https://docs.stripe.com/connect/testing#creating-accounts) and [using OAuth](https://docs.stripe.com/connect/testing#using-oauth).\n\n| Card number | Scenario | How to test |\n| --- | --- | --- |\n|     | The card payment succeeds and doesn’t require authentication. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card payment requires [authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\"). | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card is declined with a decline code like `insufficient_funds`. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The UnionPay card has a variable length of 13-19 digits. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n\nSee [Testing](https://docs.stripe.com/testing) for additional information to test your integration.\n\nAs the [settlement merchant](https://docs.stripe.com/connect/destination-charges#settlement-merchant) on charges, your platform is responsible for disputes. Make sure you understand the [best practices](https://docs.stripe.com/disputes/responding) for responding to disputes.\n\nBy default, any funds that you transfer to a connected account accumulate in the connected account’s [Stripe balance](https://docs.stripe.com/connect/account-balances) and are paid out on a daily rolling basis. You can change the [payout](https://docs.stripe.com/payouts \"payout\") frequency by going into the connected account’s detail page, clicking the right-most button in the **Balance** section, and selecting **Edit payout schedule**.\n\nTo issue refunds, go to the [Payments](https://dashboard.stripe.com/payments) page. Select individual payments by clicking the checkbox to the left of any payments you want to refund. After you select a payment, Stripe displays a **Refund** button in the upper-right corner of the page. Click the **Refund** button to issue a refund to customers for all payments you have selected.",
    "title": "Collect payments then pay out | Stripe Documentation",
    "description": "Collect payments from customers and pay them out to sellers or service providers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/mandates/object",
    "markdown": "# The Mandate object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    customer\\_acceptanceobject\n    \n    Details about the customer’s acceptance of the mandate.\n    \n*   #### \n    \n    payment\\_methodstringExpandable\n    \n    ID of the payment method associated with this mandate.\n    \n*   #### \n    \n    payment\\_method\\_detailsobject\n    \n    Additional mandate information specific to the payment method type.\n    \n*   The mandate status indicates whether or not you can use it to initiate a payment.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The mandate can be used to initiate a payment. |\n    | `inactive`<br><br>The mandate was rejected, revoked, or previously used, and may not be used to initiate future payments. |\n    | `pending`<br><br>The mandate is newly created and is not yet active or inactive. |\n    \n*   The type of the mandate.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `multi_use`<br><br>Represents permission given for multiple payments. |\n    | `single_use`<br><br>Represents a one-time permission given for a single payment. |\n    \n\n### More attributes\n\n*   #### \n    \n    on\\_behalf\\_ofnullable stringConnect only\n    \n*   #### \n    \n    single\\_usenullable object\n    \n\n```\n{  \"id\": \"mandate_1MvojA2eZvKYlo2CvqTABjZs\",  \"object\": \"mandate\",  \"customer_acceptance\": {    \"accepted_at\": 123456789,    \"online\": {      \"ip_address\": \"127.0.0.0\",      \"user_agent\": \"device\"    },    \"type\": \"online\"  },  \"livemode\": false,  \"multi_use\": {},  \"payment_method\": \"pm_123456789\",  \"payment_method_details\": {    \"sepa_debit\": {      \"reference\": \"123456789\",      \"url\": \"\"    },    \"type\": \"sepa_debit\"  },  \"status\": \"active\",  \"type\": \"multi_use\"}\n```\n\n## [Retrieve a Mandate](https://docs.stripe.com/api/mandates/retrieve)\n\nRetrieves a Mandate object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a Mandate object.\n\n```\ncurl https://api.stripe.com/v1/mandates/mandate_1MvojA2eZvKYlo2CvqTABjZs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mandate_1MvojA2eZvKYlo2CvqTABjZs\",  \"object\": \"mandate\",  \"customer_acceptance\": {    \"accepted_at\": 123456789,    \"online\": {      \"ip_address\": \"127.0.0.0\",      \"user_agent\": \"device\"    },    \"type\": \"online\"  },  \"livemode\": false,  \"multi_use\": {},  \"payment_method\": \"pm_123456789\",  \"payment_method_details\": {    \"sepa_debit\": {      \"reference\": \"123456789\",      \"url\": \"\"    },    \"type\": \"sepa_debit\"  },  \"status\": \"active\",  \"type\": \"multi_use\"}\n```\n\n## [Setup Attempts](https://docs.stripe.com/api/setup_attempts)\n\nA SetupAttempt describes one attempted confirmation of a SetupIntent, whether that confirmation is successful or unsuccessful. You can use SetupAttempts to inspect details of a specific attempt at setting up a payment method using a SetupIntent.\n\n## [Confirmation Token](https://docs.stripe.com/api/confirmation_tokens)\n\nConfirmationTokens help transport client side data collected by Stripe JS over to your server for confirming a PaymentIntent or SetupIntent. If the confirmation is successful, values present on the ConfirmationToken are written onto the Intent.\n\nTo learn more about how to use ConfirmationToken, visit the related guides:\n\n*   [Finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server)\n*   [Build two-step confirmation](https://docs.stripe.com/payments/build-a-two-step-confirmation).\n\n## [Tokens](https://docs.stripe.com/api/tokens)\n\nTokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. A token representing this information is returned to your server to use. Use our [recommended payments integrations](https://docs.stripe.com/payments) to perform this process on the client-side. This guarantees that no sensitive card data touches your server, and allows your integration to operate in a PCI-compliant way.\n\nIf you can’t use client-side tokenization, you can also create tokens using the API with either your publishable or secret API key. If your integration uses this method, you’re responsible for any PCI compliance that it might require, and you must keep your secret API key safe. Unlike with client-side tokenization, your customer’s information isn’t sent directly to Stripe, so we can’t determine how it’s handled or stored.\n\nYou can’t store or use tokens more than once. To store card or bank account information for later use, create [Customer](https://docs.stripe.com/api#customers) objects or [External accounts](https://docs.stripe.com/api#external_accounts). [Radar](https://docs.stripe.com/radar), our integrated solution for automatic fraud protection, performs best with integrations that use client-side tokenization.\n\nEndpoints\n\n[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_bank_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_card)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_cvc_update)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_person)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_pii)[GET/v1/tokens/:id](https://docs.stripe.com/api/tokens/retrieve)\n\n## [Cash Balance](https://docs.stripe.com/api/cash_balance)\n\nA customer’s `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Mandate object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/plan-integration/get-started/reporting-reconciliation",
    "markdown": "# Reporting and reconciliation | Stripe DocumentationThe Stripe Docs logo\n\n## Use Stripe to generate financial reports and perform reconciliation.\n\nLearn about the different payout types, balance transactions, and the advanced reporting features within the Sigma platform.\n\n## Reporting and payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo simplify reporting and reconciliation, use automatic [payouts](https://docs.stripe.com/payouts \"payout\"), because they maintain the association between each transaction and the payout they’re included in.\n\nIf you’re building custom reporting using the APIs, use the [balance transaction endpoint](https://docs.stripe.com/api/balance_transactions/list) and the `payout` parameter to list all transactions included in an automatic payout. A best practice is to retrieve payouts automatically and asynchronously when the [payout.paid](https://docs.stripe.com/api#event_types-payout.paid) or [payout.reconciliation\\_completed](https://docs.stripe.com/api/events/types#event_types-payout.reconciliation_completed) event is received by your [webhook](https://docs.stripe.com/connect/webhooks) handler.\n\nThe number of balance transactions can exceed the maximum limit. In that case, we recommend using the [auto pagination feature](https://docs.stripe.com/api/pagination/auto) to fetch the list of all balance transactions without having to manually paginate results and perform subsequent requests.\n\nHere’s an example balance history API call to retrieve transactions from a payout:\n\n`curl -G https://api.stripe.com/v1/balance_transactions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d payout=  {{PAYOUT_ID}}   \\  -d limit=100`\n\nAutomatic payouts supports [Instant Payouts](https://docs.stripe.com/payouts#instant-payouts) that instantly send funds to a supported debit card. You can request Instant Payouts 24/7, including weekends and holidays, and funds typically appear in the associated bank account within 30 minutes. See the [Instant Payout documentation](https://docs.stripe.com/payouts/instant-payouts-banks) to see if it is available in your region.\n\n### Manual payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use [manual payouts](https://docs.stripe.com/connect/payouts-connected-accounts) if desired. However, Stripe does not support transaction-level reporting for the funds that comprise your manual payouts because you specify the amount you want to get paid out.\n\nHere’s an example manual payout on your account:\n\n`curl https://api.stripe.com/v1/payouts \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -X \"POST\" \\   -d \"amount\"=1000 \\   -d \"currency\"=\"usd\"`\n\n## Financial Reports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe supports many out-of-the-box [reports](https://docs.stripe.com/reports) for financial analysis:\n\n*   [Balance](https://docs.stripe.com/reports/balance): You can view and download summarized and itemized balance transaction data, helping you to close books on a daily, weekly, or monthly basis. These reports help you understand changes to your Stripe balance.\n*   [Reconciliation](https://docs.stripe.com/reports/payout-reconciliation): You can see which transactions have already been paid out and which ones are yet to be paid out using this report. The Reconciliation tab displays the same type of data you see in the Balance tab but grouped in different ways to help you reconcile payouts.\n\nAll reports are available in the Stripe Dashboard, and with the API. You can programmatically request and download any of Stripe’s prebuilt reports using the [Reporting API](https://docs.stripe.com/reports/api).\n\nTo fully automate this process, follow our [four-step integration pattern](https://docs.stripe.com/reports/api#integration-pattern), which includes listening for events that tell you when new reporting data becomes available and running your reports at that time.\n\nHere’s an example API call to generate a “Itemized payout reconciliation report for a single payout” (aka “Settlement file”). Make this API call after you’ve been notified that new data is available:\n\n`curl https://api.stripe.com/v1/reporting/report_runs \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -X \"POST\" \\   -d \"report_type\"=\"payout_reconciliation.by_id.itemized.4\" \\   -d \"parameters[interval_start]\"=1577865600 \\   -d \"parameters[interval_end]\"=1580544000`\n\n## Balance transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Balance transactions](https://docs.stripe.com/reports/balance-transaction-types) are the building blocks of all activity on Stripe. These objects:\n\n*   Represent everything that affected your Stripe balance (credits and debits).\n*   Are automatically created by Stripe (for example, each successful PaymentIntent generates a separate BalanceTransaction object, as does each payout).\n*   Are immutable (a refund is associated with a new BalanceTransaction negating the original).\n*   Can act as your ledger (to understand your balance at any point in time, you can replay all BalanceTransactions up to that point).\n\nBalanceTransactions (`txn_***` objects) are also the basis of all of our reporting—in most reports, the line-level data point is a `txn_***` object.\n\n## Advanced reporting with Sigma![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Sigma](https://docs.stripe.com/stripe-data) makes all of your business data available in an interactive SQL environment in the Dashboard. You can write queries that leverage its extensive schema, allowing you to create fully customized reports using information about your transactions.\n\nWith Sigma, you have the ability to export data directly to CSV, and schedule queries to deliver results by email or [webhook](https://docs.stripe.com/webhooks \"webhook\"). You can generate datasets for your business intelligence tools, reconcile transactional data, and generate custom reports.\n\nTo [activate Sigma](https://dashboard.stripe.com/test/get-started/sigma), navigate to **Settings > Sigma** from the Dashboard. After you activate it, data takes up to 24 hours to load and be queryable. Sigma uses standard ANSI SQL and a broad range of reporting functions. Anyone on your account with permission to view reports can write and run queries.",
    "title": "Reporting and reconciliation | Stripe Documentation",
    "description": "Use Stripe to generate financial reports and perform reconciliation.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments-api/tour",
    "markdown": "# Tour of the API | Stripe DocumentationThe Stripe Docs logo\n\n## See how Stripe API objects fit together and learn best practices for combining them.\n\nThe Stripe APIs are powerful and flexible if you know how to use them. This tour of the API covers key information to help you understand the APIs more deeply:\n\n*   The core concepts we use across the APIs\n*   The path a successful payment takes\n*   The objects that play a role and how to determine when they’re needed\n*   Common patterns and best practices for using those objects together\n\nUnderstanding these patterns helps you move beyond the pre-written code in Stripe tutorials. You can migrate old integrations to use more modern patterns, combine simple patterns in novel ways, and plan for future growth.\n\n[](#undefined)\n\n### Everything is an object![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEverything in your Stripe account is an object, whether you create it with the API or not. Your balance corresponds to a [Balance](https://docs.stripe.com/api/balance) object, you track customers with [Customer](https://docs.stripe.com/api/customers) objects, you store payment details in [PaymentMethod](https://docs.stripe.com/api/payment_methods) objects, and so on.\n\nEven low-code and no-code integrations produce these objects. So do actions you perform in the Dashboard. For instance, when you manually create a customer in the Dashboard, it still creates a Customer object.\n\n### Objects have lives![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe integrations handle complicated processes.\n\nThe API uses a single object to track each process. You create the object at the start of the process, and after every step you can check its `status` to see what needs to happen next—This is sometimes referred to as a _state machine_.\n\nFor instance, while completing a payment, a customer might try several payment methods. If one payment method fails, a `status` of `requires_payment_method` lets you know to prompt the customer for another.\n\n### An integration is made out of cooperating objects![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo accept a payment, a system needs to create several core objects and manage them through several states.\n\nYour Stripe integration is a system that handles this creation and management by communicating with Stripe.\n\nSome integrations do a lot more than that: track customers, manage subscriptions, etc. But their core payment functionality still comes from the same objects and steps, with more objects added around that core.\n\n[](#payment-objects)\n\nStripe uses a variety of related objects to facilitate payments. Before you can build an integration that suits your specific needs, you must familiarize yourself with how these objects work together.\n\nCheck out this video for an overview of payment object roles and capabilities.\n\nTo learn more about Stripe’s payment integration options, see the following guides:\n\n*   [Payment Links](https://docs.stripe.com/payment-links)\n*   [Checkout](https://docs.stripe.com/payments/checkout)\n*   [Subscriptions](https://docs.stripe.com/billing)\n*   [Invoicing](https://docs.stripe.com/invoicing)\n*   [Payment Intents](https://docs.stripe.com/payments/payment-intents)\n\n[](#path-to-a-payment)\n\nIn a modern Stripe integration, every payment uses an object called a [PaymentIntent](https://docs.stripe.com/api/payment_intents). As its name suggests, it represents your _intent_ to collect a payment. This object tracks the steps you go through along the way to fulfilling that intent.\n\nFor instance, suppose a customer clicks a **Check out** button with a 100 USD item in their cart. They haven’t bought it yet, and they might never buy it (maybe at some point they abandon the payment flow, or their card issuer declines the payment). But clicking **Check out** indicates their _intent_ to buy—and you intend to help them. At that point, an integration creates a `PaymentIntent` object in the amount of 100 USD to track the rest of the process.\n\nThe `PaymentIntent`’s path to success goes through [several statuses](https://docs.stripe.com/payments/paymentintents/lifecycle)—here’s a simplified version:\n\n### Payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA PaymentIntent starts with the status `requires_payment_method`. To move it forward, Stripe needs details about the customer’s payment method—either a card number or credentials for some other payment system.\n\nAn integration represents these details using an API object called a [PaymentMethod](https://docs.stripe.com/api/payment_methods). In some integrations, you write the code that creates that object and attaches it to the PaymentIntent. In others, Stripe gathers the details and does the work for you. You can also create and save a payment method for use with future PaymentIntents [using the Setup Intents API](https://docs.stripe.com/payments/setup-intents).\n\n### Confirmation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe next status is `requires_confirmation`. In an interactive payment flow, the customer must confirm that they intend to pay—and that they intend to do it using the method they provided. In a one-time online payment, this usually happens when they click the **Pay** button.\n\nWhen the customer clicks **Pay** or otherwise confirms their intent, an integration notifies Stripe with an API call. In some integrations, you write the code that makes this call. Stripe provides drop-in UI elements, called [Stripe Elements](https://docs.stripe.com/payments/elements), to enable this while still providing flexibility to build a custom integration. In other integrations, like a [Stripe Checkout](https://docs.stripe.com/payments/checkout) or [Payment Links](https://docs.stripe.com/payment-links) integration, Stripe makes the call and handles the next steps. There are many ways to integrate Stripe and combine different objects to handle your use case. [Learn more about integration options for online payments.](https://docs.stripe.com/payments/online-payments)\n\nIn most cases a [Charge](https://docs.stripe.com/api/charges) will be created when a PaymentIntent is confirmed to represent that specific attempt to move money. The Charge might succeed or fail. If it fails the payment can be retried by confirming the PaymentIntent again, usually with new payment details. Allowing retries immediately, without the need to create a new PaymentIntent, tends to increase conversion rates.\n\n### Processing and success![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe intent’s state is now `processing`, and at this point Stripe attempts to process the payment.\n\nStripe always does this part for you—and it can have several steps. (For credit cards, these steps are part of [how cards work](https://docs.stripe.com/payments/cards/overview).) As we work through the steps, we update the intent’s state with the outcome: either `succeeded` or back to `requires_payment_method` if it fails.\n\nWhen we’re done, one last object comes into play: the [Event](https://docs.stripe.com/api/events). We use `Event` objects to represent activity. In this case, the activity might be “the charge succeeded” or “the charge failed.” In some integrations, you write custom code to respond to events using [webhooks](https://docs.stripe.com/webhooks). In others, such as [Checkout](https://docs.stripe.com/payments/checkout) or [Payment Links](https://docs.stripe.com/payment-links) integrations, Stripe listens for the event and provides a pre-written response.",
    "title": "Tour of the API | Stripe Documentation",
    "description": "See how Stripe API objects fit together and learn best practices for combining them.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/cross-border-payouts/special-requirements",
    "markdown": "# Country-specific considerations for cross-border payouts\n\n## Learn which countries have additional requirements for receiving payments from outside their borders.\n\nConnected accounts in certain countries might have additional bank or fund flow restrictions when using cross-border payouts.\n\n## Bank restrictions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMost banks can accept payments from other countries without any special requirements. Some banks in certain countries require more information regarding recipient identity or transaction information for risk and compliance purposes. The receiving bank often has discretion over what they require for cross-border transactions, which can differ between banks, even within the same country.\n\nIf a seller or service provider onboards as a connected account to your platform in one of these countries, we send an email to alert your user of the possibility for additional requirements. If the receiving bank requires additional information, they should reach out to your user directly with their requirements.\n\n#### Note\n\nBanks might have special requirements in certain countries, so your user might pay additional fees for the payout. Stripe might also set a higher [minimum payout](https://docs.stripe.com/payouts#cbp-minimum-payout-amounts) threshold to account for possible fees charged by certain banks.\n\nThe list of possible requirements for the following countries isn’t exhaustive, as Stripe isn’t involved with creating these conditions. If you encounter additional requirements that aren’t listed, please notify [Stripe support](https://support.stripe.com/).\n\nPossible special requirements include:\n\n### Bangladesh![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Submitting a remittance form.\n*   Providing a receipt or invoice as proof that the recipient is legitimately receiving the payment.\n*   Paying additional fees.\n\n### Japan![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Visiting a bank location to submit a copy of their ID and additional paperwork, if they haven’t previously done so. Banks require a national ID card number (MyNumber) to be submitted and on file before they can receive or send international transfers.\n*   Providing a receipt or invoice as proof that the recipient is legitimately receiving the payment.\n*   Paying additional fees.\n*   Supporting payouts only to banks participating in the Foreign Exchange Yen Clearing System (FXYCS).\n\n### Serbia![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Providing additional information on the purpose of the payment.\n*   Providing a receipt or invoice as proof that the recipient is legitimately receiving the payment.\n*   Submitting a remittance form.\n\n## Fund flow restrictions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following fund flows are generally supported in countries for cross-border payouts:\n\n*   [Separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers) without the `on_behalf_of` parameter\n*   Top-up and transfers\n*   [Destination charges](https://docs.stripe.com/connect/destination-charges)\n\nDirect charges and destination charges _with_ the `on_behalf_of` parameter aren’t supported. However, some countries have additional limitations.\n\nFor Brazil, [India](https://support.stripe.com/questions/stripe-india-support-for-marketplaces), and [Thailand](https://support.stripe.com/questions/stripe-thailand-support-for-marketplaces), only the following fund flows are supported:\n\n*   [Separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers) without the `on_behalf_of` parameter\n*   Top-up and transfers",
    "title": "Country-specific considerations for cross-border payouts | Stripe Documentation",
    "description": "Learn which countries have additional requirements for receiving payments from outside their borders.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/payment_intents/confirm_pay_by_bank_payment",
    "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
    "title": "Page not found | Stripe Documentation",
    "description": "Sorry, but the page you were looking for couldn't be found.",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/api/file_links/object",
    "markdown": "# The File Link object | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ffile_links%2Fobject)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    expires\\_atnullable timestamp\n    \n    Time that the link expires.\n    \n*   The file object this link points to.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The publicly accessible URL to download the file.\n    \n\n### More attributes\n\n```\n{  \"id\": \"link_1Mr23jLkdIwHu7ix65betcoo\",  \"object\": \"file_link\",  \"created\": 1680108075,  \"expired\": false,  \"expires_at\": null,  \"file\": \"file_1Mr23iLkdIwHu7ixQkCV3CBR\",  \"livemode\": false,  \"metadata\": {},  \"url\": \"https://files.stripe.com/links/MDB8YWNjdF8xTTJKVGtMa2RJd0h1N2l4fGZsX3Rlc3RfaXVoY2hrUnJPMzlBR3dPb01XMmFkSTVq00yUPLFf3h\"}\n```\n\n## [Create a file link](https://docs.stripe.com/api/file_links/create)\n\nCreates a new file link object.\n\n### Parameters\n\n*   The ID of the file. The file’s `purpose` must be one of the following: `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `finance_report_run`, `identity_document_downloadable`, `pci_document`, `selfie`, `sigma_scheduled_query`, `tax_document_user_upload`, or `terminal_reader_splashscreen`.\n    \n*   The link isn’t usable after this future timestamp.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the file link object if successful and raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/file_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d file=file_1Mr23iLkdIwHu7ixQkCV3CBR\n```\n\n```\n{  \"id\": \"link_1Mr23jLkdIwHu7ix65betcoo\",  \"object\": \"file_link\",  \"created\": 1680108075,  \"expired\": false,  \"expires_at\": null,  \"file\": \"file_1Mr23iLkdIwHu7ixQkCV3CBR\",  \"livemode\": false,  \"metadata\": {},  \"url\": \"https://files.stripe.com/links/MDB8YWNjdF8xTTJKVGtMa2RJd0h1N2l4fGZsX3Rlc3RfaXVoY2hrUnJPMzlBR3dPb01XMmFkSTVq00yUPLFf3h\"}\n```\n\n## [Update a file link](https://docs.stripe.com/api/file_links/update)\n\nUpdates an existing file link object. Expired links can no longer be updated.\n\n### Parameters\n\n*   #### \n    \n    expires\\_atstring | timestamp\n    \n    A future timestamp after which the link will no longer be usable, or `now` to expire the link immediately.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the file link object if successful, and raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/file_links/link_1Mr23jLkdIwHu7ix65betcoo \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"link_1Mr23jLkdIwHu7ix65betcoo\",  \"object\": \"file_link\",  \"created\": 1680108075,  \"expired\": false,  \"expires_at\": null,  \"file\": \"file_1Mr23iLkdIwHu7ixQkCV3CBR\",  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"url\": \"https://files.stripe.com/links/MDB8YWNjdF8xTTJKVGtMa2RJd0h1N2l4fGZsX3Rlc3RfaXVoY2hrUnJPMzlBR3dPb01XMmFkSTVq00yUPLFf3h\"}\n```\n\n## [Retrieve a file link](https://docs.stripe.com/api/file_links/retrieve)\n\nRetrieves the file link with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nIf the identifier you provide is valid, a file link object returns. If not, Stripe raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/file_links/link_1Mr23jLkdIwHu7ix65betcoo \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"link_1Mr23jLkdIwHu7ix65betcoo\",  \"object\": \"file_link\",  \"created\": 1680108075,  \"expired\": false,  \"expires_at\": null,  \"file\": \"file_1Mr23iLkdIwHu7ixQkCV3CBR\",  \"livemode\": false,  \"metadata\": {},  \"url\": \"https://files.stripe.com/links/MDB8YWNjdF8xTTJKVGtMa2RJd0h1N2l4fGZsX3Rlc3RfaXVoY2hrUnJPMzlBR3dPb01XMmFkSTVq00yUPLFf3h\"}\n```\n\n## [List all file links](https://docs.stripe.com/api/file_links/list)\n\nReturns a list of file links.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` file links, starting after the `starting_after` file link. Each entry in the array is a separate file link object. If there aren’t additional available file links, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/file_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/file_links\",  \"has_more\": false,  \"data\": [    {      \"id\": \"link_1Mr23jLkdIwHu7ix65betcoo\",      \"object\": \"file_link\",      \"created\": 1680108075,      \"expired\": false,      \"expires_at\": null,      \"file\": \"file_1Mr23iLkdIwHu7ixQkCV3CBR\",      \"livemode\": false,      \"metadata\": {},      \"url\": \"https://files.stripe.com/links/MDB8YWNjdF8xTTJKVGtMa2RJd0h1N2l4fGZsX3Rlc3RfaXVoY2hrUnJPMzlBR3dPb01XMmFkSTVq00yUPLFf3h\"    }    {...}    {...}  ],}\n```",
    "title": "The File Link object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/features/apps-on-devices/monitor",
    "markdown": "# Monitor your deployment | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to monitor your Android apps on Stripe SmartPOS Android devices.\n\nAfter you deploy your app, you can monitor its deployment progress using the Stripe Dashboard. This allows you to investigate any issues during deployment and to deploy a new app, if needed.\n\nFollow these steps to monitor your app:\n\n1.  In the Stripe Dashboard, click **Developers** > **Apps**.\n2.  On the [Terminal apps](https://dashboard.stripe.com/terminal/apps_on_devices/apps) tab, choose the app that you want to monitor.\n3.  On the app details page, under **App info**, choose the release version to view the deployment status and number of Stripe readers in that status.\n\n| Deployment status | Description |\n| --- | --- |\n| Pending | The device has downloaded the app and is waiting for the app to install when the device reboots. |\n| Installed | The app has successfully installed on the device. |\n| Failed | An error occurred while attempting to install the app on the device. |",
    "title": "Monitor your deployment | Stripe Documentation",
    "description": "Learn how to monitor your Android apps on Stripe SmartPOS Android devices.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/terminal/hardware_orders/object",
    "markdown": "# The TerminalHardwareOrder object | Stripe API Reference\n\n## [The TerminalHardwareOrder object](https://docs.stripe.com/api/terminal/hardware_orders/object)Preview feature\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Represents the total cost for the order.\n    \n\n*   #### \n    \n    hardware\\_order\\_itemsarray of objects\n    \n    An array of line items ordered.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   One of `monthly_invoice`, `payment_intent`, or `none`.\n    \n*   Shipping address for the order.\n    \n\n*   The status of the terminal hardware order.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>Order was canceled. Please create a new order to receive these items. |\n    | `delivered`<br><br>Order has been delivered! |\n    | `pending`<br><br>Order has been received and can still be canceled. |\n    | `ready_to_ship`<br><br>Order has been confirmed and is pending shipment. It cannot be canceled. |\n    | `shipped`<br><br>Order has been shipped, and can no longer be canceled. |\n    | `undeliverable`<br><br>One or more of the order’s items could not be delivered. |\n    \n\n### More attributes\n\n*   #### \n    \n    shipment\\_trackingarray of objects\n    \n\n*   #### \n    \n    total\\_tax\\_amountsarray of objects\n    \n*   #### \n    \n    updatednullable timestamp\n    \n\nThe TerminalHardwareOrder object\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"pending\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [Create a Terminal Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/create)Preview feature\n\nCreates a new `TerminalHardwareOrder` object.\n\n### Parameters\n\n*   #### \n    \n    hardware\\_order\\_itemsarray of objectsRequired\n    \n    An array of line items to order.\n    \n*   The method of payment for this order.\n    \n*   Shipping address for the order.\n    \n*   #### \n    \n    shipping\\_methodstringRequired\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object if creation succeeds.\n\nPOST /v1/terminal/hardware\\_orders\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_orders \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"hardware_order_items[0][terminal_hardware_sku]\"=thsku_L5fys7HZ5o02Nc \\  -d \"hardware_order_items[0][quantity]\"=2 \\  -d payment_type=monthly_invoice \\  -d \"shipping[address][line1]\"=\"1234 Main St.\" \\  -d \"shipping[address][city]\"=\"San Francisco\" \\  -d \"shipping[address][state]\"=CA \\  -d \"shipping[address][postal_code]\"=94111 \\  -d \"shipping[address][country]\"=US \\  -d \"shipping[phone]\"=15555555555 \\  --data-urlencode \"shipping[email]\"=\"test@example.com\" \\  -d \"shipping[name]\"=\"Jenny Rosen\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"pending\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [Retrieve a Terminal Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/retrieve)Preview feature\n\nRetrieves a `TerminalHardwareOrder` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `TerminalHardwareOrder` object if a valid identifier was provided.\n\nGET /v1/terminal/hardware\\_orders/:id\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"pending\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```\n\n## [List all Terminal Hardware Orders](https://docs.stripe.com/api/terminal/hardware_orders/list)Preview feature\n\nList all `TerminalHardwareOrder` objects.\n\n### Parameters\n\n*   Only return orders that have the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled`<br><br>Order was canceled. Please create a new order to receive these items. |\n    | `delivered`<br><br>Order has been delivered! |\n    | `pending`<br><br>Order has been received and can still be canceled. |\n    | `ready_to_ship`<br><br>Order has been confirmed and is pending shipment. It cannot be canceled. |\n    | `shipped`<br><br>Order has been shipped, and can no longer be canceled. |\n    | `undeliverable`<br><br>One or more of the order’s items could not be delivered. |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of terminal hardware orders. Each entry in the array is a separate order object.\n\nGET /v1/terminal/hardware\\_orders\n\ncURL\n\n```\ncurl -G https://api.stripe.com/v1/terminal/hardware_orders \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/terminal/hardware_orders\",  \"has_more\": false,  \"data\": [    {      \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",      \"object\": \"terminal.hardware_order\",      \"amount\": 13602,      \"created\": 1692995962,      \"currency\": \"usd\",      \"hardware_order_items\": [        {          \"amount\": 11800,          \"currency\": \"usd\",          \"quantity\": 2,          \"terminal_hardware_sku\": {            \"id\": \"thsku_L5fys7HZ5o02Nc\",            \"amount\": 450,            \"country\": \"AT\",            \"currency\": \"eur\",            \"product\": \"thpr_MJfof7SLvdkG6T\"          }        }      ],      \"livemode\": true,      \"metadata\": {},      \"payment_type\": \"monthly_invoice\",      \"po_number\": null,      \"shipment_tracking\": [],      \"shipping\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"1234 Main Street\",          \"line2\": \"\",          \"postal_code\": \"94111\",          \"state\": \"CA\"        },        \"amount\": 800,        \"company\": \"Rocket Rides\",        \"currency\": \"usd\",        \"email\": \"test@example.com\",        \"name\": \"Jenny Rosen\",        \"phone\": \"15555555555\"      },      \"shipping_method\": \"standard\",      \"status\": \"pending\",      \"tax\": 1002,      \"total_tax_amounts\": [        {          \"amount\": 1002,          \"inclusive\": false,          \"rate\": {            \"display_name\": \"Sales Tax\",            \"jurisdiction\": \"LOS ANGELES\",            \"percentage\": 8.25          }        }      ],      \"updated\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a Terminal Hardware Order](https://docs.stripe.com/api/terminal/hardware_orders/cancel)Preview feature\n\nSets the status of a terminal hardware order from `pending` to `canceled`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `TerminalHardwareOrder` object.\n\nPOST /v1/terminal/hardware\\_orders/:id/cancel\n\ncURL\n\n```\ncurl -X POST https://api.stripe.com/v1/terminal/hardware_orders/thor_1Nj6mu2eZvKYlo2CRG74vB9n/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"thor_1Nj6mu2eZvKYlo2CRG74vB9n\",  \"object\": \"terminal.hardware_order\",  \"amount\": 13602,  \"created\": 1692995962,  \"currency\": \"usd\",  \"hardware_order_items\": [    {      \"amount\": 11800,      \"currency\": \"usd\",      \"quantity\": 2,      \"terminal_hardware_sku\": {        \"id\": \"thsku_L5fys7HZ5o02Nc\",        \"amount\": 450,        \"country\": \"AT\",        \"currency\": \"eur\",        \"product\": \"thpr_MJfof7SLvdkG6T\"      }    }  ],  \"livemode\": true,  \"metadata\": {},  \"payment_type\": \"monthly_invoice\",  \"po_number\": null,  \"shipment_tracking\": [],  \"shipping\": {    \"address\": {      \"city\": \"San Francisco\",      \"country\": \"US\",      \"line1\": \"1234 Main Street\",      \"line2\": \"\",      \"postal_code\": \"94111\",      \"state\": \"CA\"    },    \"amount\": 800,    \"company\": \"Rocket Rides\",    \"currency\": \"usd\",    \"email\": \"test@example.com\",    \"name\": \"Jenny Rosen\",    \"phone\": \"15555555555\"  },  \"shipping_method\": \"standard\",  \"status\": \"canceled\",  \"tax\": 1002,  \"total_tax_amounts\": [    {      \"amount\": 1002,      \"inclusive\": false,      \"rate\": {        \"display_name\": \"Sales Tax\",        \"jurisdiction\": \"LOS ANGELES\",        \"percentage\": 8.25      }    }  ],  \"updated\": null}\n```",
    "title": "The TerminalHardwareOrder object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/terminal/features/apps-on-devices/submit",
    "markdown": "# Submit your app for review\n\n## Learn how to submit your Android app to Stripe.\n\nAfter you finalize your app, you must submit it to Stripe for [app review](https://docs.stripe.com/terminal/features/apps-on-devices/app-review). You can upload your app using the Stripe Dashboard.\n\nMake sure to follow the [app review guidelines](https://docs.stripe.com/terminal/features/apps-on-devices/app-review#app-review-guidelines) to help with a timely and successful review. For example, verify the instructions that you intend to provide for the Stripe reviewer. Following your instructions to make sure they’re complete can help prevent failing the app review.\n\n### Upload your app![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  In the Stripe Dashboard, click **Developers** > **Apps**.\n2.  On the [Terminal apps](https://dashboard.stripe.com/terminal/apps_on_devices/apps) tab, click **Create app**.\n3.  In the **App information** window, enter the name of your app and the package name, then click **Create app**.\n4.  Complete the following steps in the **Upload your APK** window:\n    *   Choose the compatible devices for your app.\n    *   Upload your APK file.\n    *   Add [instructions](https://docs.stripe.com/terminal/features/apps-on-devices/app-review#instructions) for the Stripe reviewer.\n    *   Enter the email address where Stripe can send updates about your app review. You can enter one or multiple email addresses.\n    *   Click **Submit for review**.\n\n## Monitor the review status ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter you submit your app for review, you can monitor the following for status updates:\n\n| Delivery method | Description |\n| --- | --- |\n| Email | Stripe sends an email notification of your app review results to the email address you provided during submission. |\n| Dashboard | Your app review status appears on the [app details](https://dashboard.stripe.com/terminal/apps_on_devices/apps) page. |\n| Webhook | Stripe sends a [webhook](https://docs.stripe.com/webhooks) to your webhook endpoint:<br><br>*   `terminal.device_asset_version.app_review_approved` - Stripe approves your app for deployment.<br>*   `terminal.device_asset_version.app_review_rejected` - The app reviewer couldn’t approve your app. You must fix the problem and resubmit your app for review.<br><br>You can find all webhook events on the [Events](https://dashboard.stripe.com/events) page. |",
    "title": "Submit your app for review | Stripe Documentation",
    "description": "Learn how to submit your Android app to Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/issuing/controls/advanced-fraud-tools/authorization-signals",
    "markdown": "# Authorization signals | Stripe DocumentationThe Stripe Docs logo\n\n## Authorization signalsBeta\n\n## Make informed, real-time decisions with authorization signals.\n\nWe provide a set of signals at authorization that you can use to make informed decisions.\n\n## Verification data![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor every authorization that takes place, we compare the values provided during checkout with the ones on file. We notify you if we detect a mismatch on:\n\n*   CVV2 (or security code)\n*   Card expiration date\n*   Billing address\n*   Billing zip code\n*   PIN number (when entered)\n\n### Identify fraudulent activity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIdentifying a mismatch between the card details on file and those entered at checkout might help you identify fraudulent activity. For example:\n\n*   A mismatch between the billing postal code and the one provided at checkout might represent a card that’s been stolen by a fraudulent actor who’s unaware of the cardholder’s postal code and attempts to use the card to make a purchase.\n*   A mismatch between the CVV2 on file and the one entered at checkout might represent a fraudulent actor cycling through card numbers to find one that works, without knowledge of the CVV associated with it.\n\nDepending on your risk tolerance and the characteristics of the authorization, such as whether it’s in person or online, you can reject authorizations if any mismatches are identified in the verification data values.\n\n## Fraud disputability assessment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe’s fraud disputability assessment evaluates whether an authorization can be disputed in the event of fraud.\n\n### Make informed decisions based on authorization disputability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nKnowing whether or not you can dispute an authorization in the event of fraud at the time of authorization allows you to make informed decisions. For example, consider an authorization that is otherwise classified as “medium risk”:\n\n*   If you know that you can dispute the authorization if fraud occurs, you can approve it\n*   If you know that you can’t dispute the authorization (if fraud occurs), you can decline it or only approve a lower amount than what’s requested\n\nStripe assesses disputability likelihood by comparing the characteristics of the authorization (such as whether 3DS was used or if the card was present with a chip). We make this assessment against network rules for disputes to proactively determine what would happen in the event of a dispute.\n\n### Determine the likelihood a dispute can be filed![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo determine the disputability likelihood of an authorization in the event of fraud, examine the [fraud\\_disputability\\_likelihood](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-fraud_disputability_likelihood) field on the `Authorization` object. This field populates with various enums that inform you about whether you can dispute the authorization. We label every authorization as `very_likely`, `neutral`, or `very_unlikely`, or `unknown`:\n\n*   When authorizations receive a score of `very_likely`, it’s highly probable that disputes filed based on these authorizations are accepted by the card network. The card network rarely rejects `very_likely` authorization disputes. When they do, it’s typically due to exceptional circumstances. These circumstances might include a card filing a fraud dispute for the second time or exceeding the allowable number of disputes for a card within a specific timeframe defined by Visa.\n*   When authorizations receive a score of `very_unlikely`, disputes are almost always automatically rejected by the card network.\n*   When authorizations receive a score of `neutral`, Stripe assesses that the dispute outcome depends on various factors. Historically, these disputes are more likely to be accepted by the card network. However, this behavior might change at any given point.\n\nLearn more about [fraud disputability likelihood](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-fraud_disputability_likelihood).\n\n## High-risk business alerts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse webhook notifications to receive detailed risk assessments of the acquiring business involved in an authorization.\n\n### Make informed decisions based on risk level![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you have data on the risk level of a business and the likelihood of a dispute, you can make more informed decisions about which authorizations you approve or reject. To make this assessment, Stripe evaluates all of the acquiring transaction activity for a business on Stripe Issuing, including data such as its historical dispute rate.\n\n### Determine the risk level![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo determine the risk level, examine the [risk\\_assessment.merchant\\_dispute\\_risk](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-risk_assessment-merchant_risk) hash field on the `Authorization` object. The following example demonstrates how to use each value.\n\n### Example responses ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA low (normal) risk transaction:\n\n`{   \"id\": \"iauth_1CmMk2IyNTgGDVfzFKlCm0gU\",   \"object\": \"issuing.authorization\",   // ...   \"risk_assessment\": {     \"merchant_dispute_risk\": {       \"risk_level\": \"normal\",       \"dispute_rate\": 5     }   } }`\n\nA high-risk transaction:\n\n`{   \"id\": \"iauth_1CmMk2IyNTgGDVfzFKlCm0gU\",   \"object\": \"issuing.authorization\",   // ...   \"risk_assessment\": {     \"merchant_dispute_risk\": {       \"risk_level\": \"high\",       \"dispute_rate\": 47     }   } }`\n\nLearn more about [merchant dispute risk](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-risk_assessment-merchant_dispute_risk).\n\n## Card testing risk![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCard testing is a prevalent form of fraud where fraudulent actors test stolen card numbers or cycle through primary account numbers (PANs) until they find a valid one. They use this valid PAN at a business with weak verification controls. To counteract this, Stripe assesses the likelihood of your involvement in a card testing attack, takes action on your behalf, and notifies you through the API about the severity of the incident. Additionally, we assess if any cards may have been compromised during the attack.\n\n### Make informed decisions based on card testing risk![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe automatically intervenes in the most obvious card testing scenarios. We offer a balanced approach in medium-risk situations to avoid being overly conservative. These cases require careful consideration of various factors, including the authorization and cardholder details. As a result, we recommend the careful evaluation of all relevant considerations before making a decision on whether to block an authorization.\n\nWe assess card testing risk by, among other things, evaluating the frequency and intensity of “card does not exist” declines associated with a specific bank identification number (BIN) or merchant. These declines are the most definitive significant indicator because they often exhibit a noticeable increase in speed and frequency compared to regular card declines.\n\n### Determine card testing risk![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo determine card testing risk, examine the [risk\\_assessment.card\\_testing\\_risk](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-risk_assessment-card_testing_risk) field on the `Authorization` object. The following example demonstrates how to use each value. We also provide the following fields:\n\n*   `invalid_account_number_decline_rate_past_hour`: Stripe calculates and returns this value when a decline contains a non-existent PAN.\n*   `invalid_credentials_decline_rate_past_hour`: Stripe calculates and returns this value on declines where the PAN exists (or existed in the past), but other verifications such as the CVV, expiration, and postal code are failing.\n\n#### Example responses ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA low risk transaction:\n\n`{   \"id\": \"iauth_1CmMk2IyNTgGDVfzFKlCm0gU\",   \"object\": \"issuing.authorization\",   // ...   \"risk_assessment\": {     \"card_testing_risk\": {       \"invalid_account_number_decline_rate_past_hour\": 5,       \"invalid_credentials_decline_rate_past_hour\": 3     }   } }`\n\nA high-risk transaction:\n\n`{   \"id\": \"iauth_1CmMk2IyNTgGDVfzFKlCm0gU\",   \"object\": \"issuing.authorization\",   // ...   \"risk_assessment\": {     \"card_testing_risk\": {       \"invalid_account_number_decline_rate_past_hour\": 79,       \"invalid_credentials_decline_rate_past_hour\": 83     }   } }`\n\nLearn more about [card testing risk](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-risk_assessment-card_testing_risk).\n\n## Recommended settings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo get started, enable the following settings that align with your business needs. While these settings might not be customized to your business model, geography, or cardholder behavior, you can use them as a source of directional guidance when using Stripe’s tools. Contact us for support in adjusting these thresholds.\n\n|     | Optimize for approval rate | Balance approval rate and fraud prevention | Optimize for fraud prevention |\n| --- | --- | --- | --- |\n| **Verification data** | Block on `mismatch` value | Block on `mismatch` value | Block on `mismatch` and `not_provided` values |\n| **Fraud disputability likelihood** | No action | Block on `very_unlikely` value if fraud is suspected | Block on `very_unlikely` value if fraud is suspected |\n| **High risk merchant alerts** | Block on `high` value if fraud is suspected | Block on `high` value | Block on `high` value |\n| **Card testing risk** | No action | Block on `high` value if fraud is suspected | Block on `elevated` and `high` values if fraud is suspected |\n\nAuthorization signals are currently limited to beta users. You must be an Issuing customer to join the beta. To request access to the beta, log in to your Stripe account and refresh the page. [Contact Stripe](https://stripe.com/contact/sales) for more information.",
    "title": "Authorization signals | Stripe Documentation",
    "description": "Make informed, real-time decisions with authorization signals.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/setup_intents/confirm_card_setup",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/payments/link/elements-link",
    "markdown": "# Link with Web Elements | Stripe DocumentationThe Stripe Docs logo\n\n## Embed Link into your custom payment page for faster checkout.\n\nUse Link with Stripe’s [Web Elements](https://docs.stripe.com/payments/elements) to add one-click checkout to your custom payment page. Customers new to Link can save their payment details and shipping information to enable faster checkout in the future. Learn more about [what Link is](https://docs.stripe.com/payments/link/what-is-link) and how it works.",
    "title": "Link with Web Elements | Stripe Documentation",
    "description": "Embed Link into your custom payment page for faster checkout.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/setup_intents/confirm_setup",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/payments/link/billing-link",
    "markdown": "# Link with Billing | Stripe DocumentationThe Stripe Docs logo\n\n## Speed up invoice payments by using Link with the Hosted Invoice Page.\n\nUse [Link](https://docs.stripe.com/payments/link/what-is-link) with the [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page) to let your customers pay invoices faster. Stripe assigns all invoices a unique URL that you can send to your customer. We host these invoices, which means you can securely collect payments without any extra implementation code. Link is compatible with both the [Invoices](https://docs.stripe.com/api/invoices) and [Subscriptions](https://docs.stripe.com/api/subscriptions) APIs.\n\n![Link in the Hosted Invoice Page](https://b.stripecdn.com/docs-statics-srv/assets/link-in-hip.a98a2864a383c265c375109b168d62ab.png)\n\nLink in the Hosted Invoice Page\n\n## Enable Link in the Hosted Invoice Page ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour customers can pay invoices faster using Link as a payment method to autofill their payment details. The Hosted Invoice Page provides a secure, private URL where your customers can view, pay, and download copies of the invoice.\n\nTo enable Link on the Hosted Invoice page:\n\n1.  Go to the [Invoice template](https://dashboard.stripe.com/settings/billing/invoice) in the Dashboard and under **Payment methods**, click **Manage**.\n2.  Find Link, toggle it on, and click **Save**.\n\nAfter you enable Link in the Hosted Invoice Page, all of your customers will be able to pay their invoices faster using Link.",
    "title": "Link with Billing | Stripe Documentation",
    "description": "Speed up invoice payments by using Link with the Hosted Invoice Page.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/payment_methods/create_payment_method_elements",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/js/elements_object/get_value_address_element",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/payments/link/mobile-payment-element-link",
    "markdown": "# Link in the Mobile Payment Element\n\n## Add Link to your native iOS, Android, and React Native apps.\n\nLet your customer check out faster by using [Link](https://docs.stripe.com/payments/link/what-is-link) in the [Mobile Payment Element](https://docs.stripe.com/payments/accept-a-payment?platform=ios&mobile-ui=payment-element). You can autofill information for any customer already using Link, regardless of whether they initially saved their information in Link with another business. The default Mobile Payment Element integration includes a Link prompt in the card form.\n\n![Link in iOS](https://b.stripecdn.com/docs-statics-srv/assets/link-in-ios.de526c6199ff89fbaa7b1beb5e8bc3da.png)\n\nAdd Link to your iOS integration\n\n## Enable Link ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo offer Link in your mobile app:\n\n1.  [Integrate the Mobile Payment Element](https://docs.stripe.com/payments/accept-a-payment?platform=ios&mobile-ui=payment-element) using the latest version of the Stripe Mobile SDK.\n2.  Enable Link in your [Payment Method settings](https://dashboard.stripe.com/settings/payment_methods).\n3.  Enable [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) by using the [latest version of the API](https://docs.stripe.com/upgrades) or by adding the [automatic\\_payment\\_methods](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-automatic_payment_methods) parameter when creating your PaymentIntent.\n4.  (Optional) [Pass in your customer’s email address](#pass-email).\n\n## Pass in a customer’s email address ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nLink authenticates a customer using their email address. We recommend prefilling as much information as possible to streamline the checkout process.\n\nTo prefill the customer’s name, email address, and phone number, supply `defaultBillingDetails` with your customer information after initializing `PaymentSheet.Configuration`.\n\n`var configuration = PaymentSheet.Configuration() configuration.defaultBillingDetails.name = \"Jenny Rosen\" configuration.defaultBillingDetails.email = \"jenny.rosen@example.com\" configuration.defaultBillingDetails.phone = \"888-888-8888\"`\n\n## Test your integration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can create test mode accounts for Link using any valid email address. When prompted for a one-time passcode, enter `000000`.",
    "title": "Link in the Mobile Payment Element | Stripe Documentation",
    "description": "Add Link to your native iOS, Android, and React Native apps.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/appendix/supported_locales",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/js/element/other_element?type=cardNumber",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/js/element/other_element?type=card",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/js/setup_intents/retrieve_setup_intent",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/payments/save-and-reuse-cards-only",
    "markdown": "# Set up future card payments\n\nTo collect customer payment details that you can reuse later, use Checkout’s setup mode. Setup mode uses the [Setup Intents API](https://docs.stripe.com/api/setup_intents) to create [Payment Methods](https://docs.stripe.com/api/payment_methods).\n\nCheck out our [full, working sample on GitHub](https://github.com/stripe-samples/checkout-remember-me-with-twilio-verify).\n\n[\n\n## Set up Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[\n\n## Create a Checkout Session![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-checkout-session)\n\nAdd a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nTo create a setup mode Session, use the `mode` parameter with a value of `setup` when creating the Session. You can optionally specify the [customer parameter](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-customer) to automatically attach the created payment method to an existing customer. Checkout uses [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) by default, which requires you to pass the [currency](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-currency) parameter when using `setup` mode.\n\nAppend the `{CHECKOUT_SESSION_ID}` template variable to the `success_url` to get access to the Session ID after your customer successfully completes a Checkout Session. After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d mode=setup \\  -d currency=usd \\  -d customer={{CUSTOMER_ID}} \\   --data-urlencode success_url=\"https://example.com/success?session_id={CHECKOUT_SESSION_ID}\"`\n\n[\n\n## Retrieve the Checkout Session![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#retrieve-checkout-session)\n\nAfter a customer successfully completes their Checkout Session, you need to retrieve the Session object. There are two ways to do this:\n\n*   **Asynchronously**: Handle `checkout.session.completed` [webhooks](https://docs.stripe.com/webhooks \"webhook\"), which contain a Session object. Learn more about [setting up webhooks](https://docs.stripe.com/webhooks).\n*   **Synchronously**: Obtain the Session ID from the `success_url` when a user redirects back to your site. Use the Session ID to [retrieve](https://docs.stripe.com/api/checkout/sessions/retrieve) the Session object.\n\n`curl https://api.stripe.com/v1/checkout/sessions/cs_test_MlZAaTXUMHjWZ7DcXjusJnDU4MxPalbtL5eYrmS2GKxqscDtpJq8QM0k \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nThe right choice depends on your tolerance for dropoff, as customers may not always reach the `success_url` after a successful payment. It’s possible for them close their browser tab before the redirect occurs. Handling webhooks prevents your integration from being susceptible to this form of dropoff.\n\nAfter you have retrieved the Session object, get the value of the `setup_intent` key, which is the ID for the SetupIntent created during the Checkout Session. A [SetupIntent](https://docs.stripe.com/payments/setup-intents) is an object used to set up the customer’s bank account information for future payments.\n\nExample `checkout.session.completed` payload:\n\n`{   \"id\": \"evt_1Ep24XHssDVaQm2PpwS19Yt0\",   \"object\": \"event\",   \"api_version\": \"2019-03-14\",   \"created\": 1561420781,   \"data\": {     \"object\": {       \"id\": \"cs_test_MlZAaTXUMHjWZ7DcXjusJnDU4MxPalbtL5eYrmS2GKxqscDtpJq8QM0k\",       \"object\": \"checkout.session\",       \"billing_address_collection\": null,       \"client_reference_id\": null,       \"customer\": \"\",       \"customer_email\": null,       \"display_items\": [],       \"mode\": \"setup\",       \"setup_intent\": \"seti_1EzVO3HssDVaQm2PJjXHmLlM\",       \"submit_type\": null,       \"subscription\": null,       \"success_url\": \"[https://example.com/success](https://example.com/success)\"     }   },   \"livemode\": false,   \"pending_webhooks\": 1,   \"request\": {     \"id\": null,     \"idempotency_key\": null   },   \"type\": \"checkout.session.completed\" }`\n\nNote the `setup_intent` ID for the next step.\n\n[\n\n## Retrieve the SetupIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#retrieve-setup-intent)\n\nUsing the `setup_intent` ID, [retrieve](https://docs.stripe.com/api/setup_intents/retrieve) the SetupIntent object. The returned object contains a `payment_method` ID that you can attach to a customer in the next step.\n\n`curl https://api.stripe.com/v1/setup_intents/seti_1EzVO3HssDVaQm2PJjXHmLlM \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n#### Note\n\nIf you’re requesting this information synchronously from the Stripe API (as opposed to handling webhooks), you can combine the previous step with this step by [expanding](https://docs.stripe.com/api/expanding_objects) the SetupIntent object in the request to the /v1/checkout/session endpoint. Doing this prevents you from having to make two network requests to access the newly created PaymentMethod ID.\n\n[\n\n## Use the payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#use-payment-method)\n\nIf you didn’t create the Checkout Session with an existing customer, use the `payment_method` ID to [attach](https://docs.stripe.com/api/payment_methods/attach) the [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") to a [Customer](https://docs.stripe.com/api/customers \"Customers\"). After you attach the PaymentMethod to a customer, you can charge the PaymentMethod using a [PaymentIntent](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method).\n\n[\n\n## Disclose Stripe to your customers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#disclose-cookies)\n\nStripe collects information on customer interactions with Elements to provide services to you, prevent fraud, and improve its services. This includes using cookies and IP addresses to identify which Elements a customer saw during a single checkout session. You’re responsible for disclosing and obtaining all rights and consents necessary for Stripe to use data in these ways. For more information, visit our [privacy center](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe).",
    "title": "Set up future card payments | Stripe Documentation",
    "description": "Use manual server-side confirmation or present payment methods separately.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/sources/alipay",
    "markdown": "# Alipay payments with Sources | Stripe DocumentationThe Stripe Docs logo\n\n## Use Sources to accept payments using Alipay, a popular payment method in China.\n\n#### Warning\n\nWe deprecated the Sources API and plan to remove support for local payment methods. If you currently integrate with Alipay using the Sources API, you must [migrate to the Payment Methods API](https://docs.stripe.com/payments/payment-methods/transitioning). We’ll send email communication with more information about this end of support.\n\nFor information about integrating Alipay with the current APIs, see [Alipay payments](https://docs.stripe.com/payments/alipay).\n\nStripe users can use [Sources](https://docs.stripe.com/sources) to accept [Alipay](https://alipay.com/) payments from customers from China.\n\nDuring the payment process, a [Source](https://docs.stripe.com/api#sources) object is created and your customer is redirected to Alipay for authorization. After completing this, your integration uses the source to make a charge request and complete the payment.\n\nAlipay is a [push](https://docs.stripe.com/sources#pull-or-push-of-funds)\\-based, [single-use](https://docs.stripe.com/sources#single-use-or-reusable) and [synchronous](https://docs.stripe.com/sources#synchronous-or-asynchronous-confirmation) method of payment. This means that your customer takes action to authorize the push of funds through a [redirect](https://docs.stripe.com/sources#flow-for-customer-action). There is immediate confirmation about the success or failure of a payment.\n\n[\n\n## Create a Source object![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-source)\n\nA `Source` object is either created client-side using [Stripe.js](https://docs.stripe.com/payments/elements) or server-side using the [Source creation endpoint](https://docs.stripe.com/api#create_source), with the following parameters:\n\n| Parameter | Value |\n| --- | --- |\n| `type` | **alipay** |\n| `currency` | cny or the default currency for your country. Accepted currencies are **aud**, **cad**, **cny**, **eur**, **gbp**, **hkd**, **jpy**, **nzd**, **sgd**, or **usd**. Users in Denmark, Norway, Sweden, or Switzerland must use **eur**. |\n| `redirect[return_url]` | The URL the customer should be redirected to after the authorization process. |\n| `amount` | A positive integer in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) representing the amount to charge the customer (for example, **1099** for a 10.99 USD payment). |\n\nTo create a source with [Stripe.js](https://docs.stripe.com/payments/elements), first include the library within your website and set your [publishable API key](https://dashboard.stripe.com/apikeys). Once included, use the following `createSource` method to create a source client-side:\n\n`stripe.createSource({   type: 'alipay',   amount: 1099,   currency: 'usd',   redirect: {     return_url: '__TOKEN_PLACEHOLDER_0__',   }, }).then(function(result) {   // handle result.error or result.source });`\n\nUsing either method, Stripe returns a `Source` object containing the relevant details for the method of payment used. Information specific to Alipay is provided within the `alipay` subhash.\n\n`{   \"id\": \"src_16xhynE8WzK49JbAs9M21jaR\",   \"object\": \"source\",   \"amount\": 1099,   \"client_secret\": \"src_client_secret_UfwvW2WHpZ0s3QEn9g5x7waU\",   \"created\": 1445277809,   \"currency\": \"usd\",   \"flow\": \"redirect\",   \"livemode\": true,   \"owner\": {`\n\n### Error codes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSource creation for Alipay payments may return any of the following errors:\n\n| Error | Description |\n| --- | --- |\n| `payment_method_not_available` | The payment method is currently not available. You should invite your customer to fallback to another payment method to proceed. |\n| `processing_error` | An unexpected error occurred preventing us from creating the source. The source creation should be retried. |\n\n[\n\n## Have the customer complete authorization![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#customer-action)\n\nWhen creating a source, its status is initially set to `pending` and cannot yet be used to make a charge request. Your customer must authorize an Alipay payment to make the source chargeable. To allow your customer to authorize the payment, redirect them to the URL provided within the`redirect[url]` attribute of the `Source` object.\n\nAfter the authorization process, your customer is redirected back to the URL provided as a value of `redirect[return_url]`. This happens regardless of whether authorization was successful or not. If the customer has authorized the payment, the `Source` object’s status will transition to `chargeable` when it is ready to be used in a charge request. If your customer declines the payment, the status will transition to `failed`.\n\nStripe populates the `redirect[return_url]` with the following GET parameters when returning your customer to your website:\n\n*   `source`: a string representing the original ID of the `Source` object\n*   `livemode`: indicates if this is a live payment, either `true` or `false`\n*   `client_secret`: used to confirm that the returning customer is the same one who triggered the creation of the source (source IDs are not considered secret)\n\nYou may include any other GET parameters you may need when specifying `redirect[return_url]`. Do not use the above as parameter names yourself as these would be overridden with the values we populate.\n\n### Mobile applications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo integrate Alipay within a mobile application, provide your application URI scheme as the `redirect[return_url]` value. By doing so, your customers are returned to your app after completing authorization. Direct redirects to the Alipay app are also supported when using our native SDKs.\n\nFor Android sources, the [Alipay SDK](https://doc.open.alipay.com/doc2/detail.htm?treeId=54&articleId=104509&docType=1) is required for app-to-app support.\n\n### Testing the redirect process![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a `Source` object using your test API keys, you can follow the URL returned in the `redirect[url]` field. This leads to a Stripe page that displays information about the API request, and where you can either authorize or cancel the payment. Authorizing the payment redirects you to the URL specified in `redirect[return_url]`.\n\n[\n\n## Charge the Source![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#charge-request)\n\nOnce the customer has authorized the payment, the source’s `status` transitions to `chargeable` and it can be used to make one charge request. This transition happens asynchronously and may occur after the customer was redirected back to your website.\n\nSome customers using Alipay assume that the order process is complete once they have authorized the payment and received confirmation on Alipay’s site or app. This results in customers who close their browser instead of following the redirect and returning to your app or website.\n\nFor these reasons it is essential that your integration rely on [webhooks](https://docs.stripe.com/webhooks \"webhook\") to determine when the source becomes chargeable in order to create a charge. Please refer to our [best practices](https://docs.stripe.com/sources/best-practices) for more details on how to best integrate payment methods using webhooks.\n\n### Webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following webhook events are sent to notify you about changes to the source’s status:\n\n| Event | Description |\n| --- | --- |\n| `source.chargeable` | A `Source` object becomes `chargeable` after a customer has authorized and verified a payment. |\n| `source.failed` | A `Source` object failed to become chargeable as your customer declined to authorize the payment. |\n| `source.canceled` | A `Source` object expired and cannot be used to create a charge. |\n\n### Make a charge request using the source![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOnce the source is chargeable, from your `source.chargeable` webhook handler, you can make a charge request using the source ID as the value for the `source` parameter to complete the payment.\n\n`curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d amount=\"1099\" \\   -d currency=\"eur\" \\   -d source=src_18eYalAHEMiOZZp1l9ZTjSU0`\n\nBy default, your account’s [statement descriptor](https://docs.stripe.com/get-started/account/statement-descriptors) appears on customer statements whenever you create an Alipay payment.\n\n### Error codes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCharge creation for Alipay payments may return any of the following errors:\n\n| Error | Description |\n| --- | --- |\n| `insufficient_funds` | The Alipay account has insufficient funds to complete the purchase. The customer should fund their account and try again, or use an alternative payment method. |\n| `invalid_amount` | This occurs if the charge amount is larger than what is supported by Alipay. |\n\n[\n\n## Confirm that the charge has succeeded![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#charge-confirmation)\n\nSince the customer has already authorized the payment as part of the redirect, unless there is an unexpected error, the [Charge](https://docs.stripe.com/api#charge_object) will immediately succeed.\n\nYou will also receive the following webhook event as the charge is created:\n\n| Event | Description |\n| --- | --- |\n| `charge.succeeded` | The charge succeeded and the payment is complete. |\n\nWe recommend that you rely on the `charge.succeeded` webhook event to notify your customer that the payment process has been completed and their order is confirmed. Please refer to our [best practices](https://docs.stripe.com/sources/best-practices) for more details on how to best integrate payment methods using webhooks.\n\n## Disputed payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf a customer’s Alipay account is used illicitly, Alipay and Stripe handle the issue internally. Alipay payments are disputed only if the customer has a complaint about the provided goods or service. Should a dispute occur, a `charge.dispute.created` webhook event is sent to your webhook endpoint, and Stripe deducts the amount of the dispute from your Stripe balance.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayments made with Alipay can only be submitted for refund within 90 days from the date of the original charge. After 90 days, it is no longer possible to refund the charge.\n\n## Single-use Sources expiration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA single-use Alipay source must be charged within six hours of becoming `chargeable`, or before 23:45 China Standard Time (GMT+8) due to Chinese government restrictions around settlement. If it is not, its status is automatically transitioned to `canceled` and your integration receives a `source.canceled` webhook event. Once a chargeable source is canceled, the customer’s authorized Alipay payment is refunded automatically—no money is moved into your account. For this reason, make sure the order is canceled on your end and the customer is notified when you receive the `source.canceled` event.\n\nAdditionally, `pending` sources are canceled after one hour if they are not used to authorize a payment, ensuring that all sources eventually transition out of their `pending` state to the `canceled` state if they are not used.\n\n## Settlement currencies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAlipay supports settlement in the default currency of your account. If you have a bank account in another currency and would like to create Alipay sources in that currency, please [get in touch](https://support.stripe.com/email). Support for additional currencies is provided on a case-by-case basis.",
    "title": "Alipay payments with Sources | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/sources/wechat-pay",
    "markdown": "# WeChat Pay payments with Sources\n\n## WeChat Pay payments with SourcesBeta\n\n## Use Sources to accept payments using WeChat Pay, a popular payment method in China.\n\n#### Warning\n\nWe deprecated the Sources API and plan to remove support for local payment methods. If you currently integrate with WeChat Pay using the Sources API, you must [migrate to the Payment Methods API](https://docs.stripe.com/payments/payment-methods/transitioning). We’ll send email communication with more information about this end of support.\n\nFor information about integrating WeChat Pay with the current APIs, see [WeChat Pay payments](https://docs.stripe.com/payments/wechat-pay).\n\nStripe users can use [Sources](https://docs.stripe.com/sources)—a single integration path for creating payments using any supported method—to accept [WeChat Pay](https://pay.weixin.qq.com/index.php/public/wechatpay) payments from customers from China.\n\nDuring the payment process, a [Source](https://docs.stripe.com/api#sources) object is created and you receive a WeChat Pay URL that is used to authorize the payment in the WeChat app by scanning a QR code. After completing this, your integration uses the source to make a charge request and complete the payment.\n\nWeChat Pay is a [push](https://docs.stripe.com/sources#pull-or-push-of-funds)\\-based, [single-use](https://docs.stripe.com/sources#single-use-or-reusable) and [synchronous](https://docs.stripe.com/sources#synchronous-or-asynchronous-confirmation) method of payment. This means that once your customer takes action to authorize the charge there is immediate confirmation about the success or failure of a payment.\n\n[\n\n## Create a Source object![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-source)\n\nA `Source` object is either created client-side using [Stripe.js](https://docs.stripe.com/payments/elements) or server-side using the [Source creation endpoint](https://docs.stripe.com/api#create_source), with the following parameters:\n\n| Parameter | Value |\n| --- | --- |\n| `type` | **wechat** |\n| `amount` | A positive integer in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) representing the amount to charge the customer (for example, **1099** for a 10.99 USD payment). |\n| `currency` | The currency of the payment. Must be the default currency for your country. Can be **aud**, **cad**, **eur**, **gbp**, **hkd**, **jpy**, **sgd**, or **usd**. |\n| `statement_descriptor` (optional) | A custom statement descriptor for the payment. |\n\nTo create a source with [Stripe.js](https://docs.stripe.com/payments/elements), first include the library within your website and set your [publishable API key](https://dashboard.stripe.com/apikeys). Once included, use the following `createSource` method to create a source client-side:\n\n`stripe.createSource({   type: 'wechat',   amount: 1099,   currency: 'usd', }).then(function(result) {   // handle result.error or result.source });`\n\nUsing either method, Stripe returns a `Source` object containing the relevant details for the method of payment used. Information specific to WeChat is provided within the `wechat` subhash.\n\n`{   \"id\": \"src_18eYalAHEMiOZZp1l9ZTjSU0\",   \"object\": \"source\",   \"amount\": 1099,   \"client_secret\": \"src_client_secret_UfwvW2WHpZ0s3QEn9g5x7waU\",   \"created\": 1445277809,   \"currency\": \"usd\",   \"flow\": \"none\",   \"livemode\": true,   \"metadata\": {},`\n\n### Optional: Provide a custom statement descriptor ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWeChat Pay can accept a [statement descriptor](https://support.stripe.com/questions/when-i-charge-a-customer-what-will-they-see-on-their-card-statements) before the customer is redirected to authorize the payment. By default, your Stripe account’s statement descriptor is used (you can review this in the [Dashboard](https://dashboard.stripe.com/settings/public)). You can provide a custom descriptor by specifying `statement_descriptor` when creating a source. WeChat statement descriptors support a maximum of 32 characters.\n\n`stripe.createSource({   type: 'wechat',   amount: 1099,   currency: 'usd',   statement_descriptor: 'ORDER AT11990',   owner: {     name: 'Jenny Rosen',   }, }).then(function(result) {   // handle result.error or result.source });`\n\nProviding a custom statement descriptor within a subsequent charge request has no effect.\n\n### Error codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSource creation for WeChat Pay payments may return any of the following errors:\n\n| Error | Description |\n| --- | --- |\n| `payment_method_not_available` | The payment method is currently not available. You should invite your customer to fallback to another payment method to proceed. |\n| `processing_error` | An unexpected error occurred preventing us from creating the source. The source creation should be retried. |\n\n[\n\n## Have the customer authorize the payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#customer-action)\n\nWhen creating a source, its status is initially set to `pending` and cannot yet be used to make a charge request. Your customer must authorize a WeChat Pay payment to make the source chargeable.\n\nTo do so, you will need to show the customer a QR code created from the URL provided within `wechat[qr_code_url]`.\n\nAfter the authorization process, if the customer has authorized the payment, the `Source` object’s status will transition to `chargeable`; it is then ready to be used in a charge request. If your customer declines the payment, the status will transition to `failed`.\n\nTo receive notifications of status changes on `Source` objects, your integration must use [webhooks](https://docs.stripe.com/webhooks \"webhook\").\n\n### Testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor sources created in test mode, the `wechat[qr_code_url]` can be scanned using any QR Code scanning application rather than WeChat. The URL leads to a Stripe page that displays information about the API request, and where you can either authorize or cancel the payment.\n\n[\n\n## Charge the Source![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#charge-request)\n\nOnce the customer has authorized the payment, the source’s `status` transitions to `chargeable` and it can be used to make a charge request. This transition happens asynchronously.\n\nSome customers using WeChat Pay will assume that the order process is complete once they have authorized the payment and received confirmation on WeChat Pay’s app. It is essential that your integration rely on [webhooks](https://docs.stripe.com/webhooks \"webhook\") to determine when the source becomes chargeable in order to create a charge. See our [best practices](https://docs.stripe.com/sources/best-practices) for more details on how to best integrate payment methods using webhooks.\n\n### Webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following webhook events are sent to notify you about changes to the source’s status:\n\n| Event | Description |\n| --- | --- |\n| `source.chargeable` | A `Source` object becomes `chargeable` after a customer has authorized and verified a payment. |\n| `source.failed` | A `Source` object failed to become chargeable as your customer declined to authorize the payment. |\n| `source.canceled` | A `Source` object expired and cannot be used to create a charge. |\n\n### Make a charge request using the source![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOnce the source is chargeable, from your `source.chargeable` webhook handler, you can make a charge request using the source ID as the value for the `source` parameter to complete the payment.\n\n`curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d amount=\"1099\" \\   -d currency=\"usd\" \\   -d source=src_18eYalAHEMiOZZp1l9ZTjSU0`\n\nWeChat Pay Sources are [single-use](https://docs.stripe.com/sources#single-use-or-reusable) and cannot be used for recurring or additional payments. Learn more about using [Sources with Customer objects](https://docs.stripe.com/sources/customers).\n\n[\n\n## Confirm that the charge has succeeded![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#charge-confirmation)\n\nSince WeChat Pay is a [synchronous](https://docs.stripe.com/sources#synchronous-or-asynchronous-confirmation) payment method and the customer has already authorized the payment using the WeChat application, the [Charge](https://docs.stripe.com/api#charge_object) will immediately succeed unless there’s an unexpected error.\n\nYou receive the following webhook event when the charge succeeds:\n\n| Event | Description |\n| --- | --- |\n| `charge.succeeded` | The charge succeeded and the payment is complete. |\n\nStripe recommends that you rely on the `charge.succeeded` webhook event to notify your customer that the payment process has been completed and their order is confirmed. See [best practices](https://docs.stripe.com/sources/best-practices) for more details on integrating payment methods using webhooks.\n\n### Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf a customer’s WeChat Pay account is used illicitly, WeChat Pay and Stripe handle the issue internally. In the context of WeChat Pay, payments are only disputed if the customer has a complaint about the provided goods or service. Should a dispute occur, a `charge.dispute.created` webhook event is sent, and Stripe deducts the amount of the dispute from your Stripe balance.\n\n### Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayments made with WeChat Pay can only be submitted for refund within 180 days from the date of the original charge. After 180 days, it is no longer possible to refund the charge.\n\n### Sources expiration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA WeChat Pay source must be charged within six hours of becoming `chargeable`, or before 23:45 China Standard Time (GMT+8) due to Chinese government restrictions around settlement. If it is not, its status is automatically transitioned to `canceled` and your integration receives a `source.canceled` webhook event. Once a chargeable source is canceled, the customer’s authorized WeChat Pay payment is refunded automatically—no money is moved into your account. For this reason, make sure the order is canceled on your end and the customer is notified when you receive the `source.canceled` event.\n\nAdditionally, `pending` sources are canceled after one hour if they are not used to authorize a payment, ensuring that all sources eventually transition out of their `pending` state to the `canceled` state if they are not used.",
    "title": "WeChat Pay payments with Sources | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payment-authentication/analytics",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nStrong Customer Authentication (SCA) is a regulatory requirement in effect as of September 14, 2019, that impacts many European online payments. It requires customers to use two-factor authentication like 3D Secure to verify their purchase.\n\nSome transactions that are deemed low risk, based on the volume of fraud rates associated with the payment provider or bank, may be exempt from Europe’s [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") requirements.\n\n#### Note\n\nIf Stripe requests an exemption for payments requiring SCA and the transaction passes through the **frictionless flow**, it doesn’t benefit from the liability shift. If an issuer applies the **frictionless flow** without being requested, liability shift generally occurs. Learn more about [liability shifts](https://docs.stripe.com/payments/3d-secure/authentication-flow#disputed-payments).\n\nThe payment authentication report enables you to view the different type of exemptions being used, so you can access SCA impact, understand levels of enforcement, and see the value of the SCA exemptions requested on your behalf.\n\n![Payment authentication report](https://b.stripecdn.com/docs-statics-srv/assets/sca-exemptions.59b0a1bdaec8cdb06592edc3426c279d.png)\n\n**Payments in SCA scope** is the number of all transactions where you or the card issuing bank is in one of the 32 European countries with SCA regulation. It excludes payments that were retried but failed for the same order. See [When is Strong Customer Authentication required?](https://stripe.com/guides/strong-customer-authentication#when-is-strong-customer-authentication-required).\n\n**Exempted payments** is the number of those in-scope payments that were successfully exempted from SCA—either no 3D Secure was present or the payment went through the 3D Secure frictionless flow.\n\n**Exemption rate** is the proportion of attempted transactions that successfully completed.\n\nThe following section contains two views that help you understand changes to your exemption rate over the selected time period, along with the proportion of payment outcomes.\n\n![Authentication report exemption rate chart](https://b.stripecdn.com/docs-statics-srv/assets/exemption-outcome.1f9802e24b808e7ab560f890607dae90.png)\n\n*   **Succeeded—exempted** represents payments that succeeded without requiring an authentication challenge. Either the bank didn’t support 3DS or the payment went through the 3DS frictionless flow.\n*   **Succeeded—authenticated** represents payments that succeed with a two-factor challenge, such as a 3DS challenge flow or authentication through Apple Pay or Google Pay.\n*   **Failed** represents payments that didn’t go through. Either Radar blocked the payment, the issuing bank declined it, or the customer failed the challenge authentication.\n\nThe chart displayed on your Dashboard page shows the different exemptions that were used. Use the breakdown chart to better understand SCA enforcement across your target market, as well as performance of Stripe’s optimizations.\n\n![A chart that breaks down the types of exemptions that were used](https://b.stripecdn.com/docs-statics-srv/assets/exemption-breakdown.1eb7a2402236c8c6cc24248cedbc4982.png)\n\nThere are two ways to claim an SCA exemption:\n\n1.  Direct to authorization - where Stripe requests an exemption as part of the authorization message.\n2.  Stripe requests frictionless authentication by asking for an exemption in the 3DS messages.\n\nSee [Exemptions to Strong Customer Authentication](https://stripe.com/guides/strong-customer-authentication#exemptions-to-strong-customer-authentication) for details on the different types of exemptions.",
    "title": "Analytics | Stripe Documentation",
    "description": "Understand how authentication impacts your payment conversion.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/sources/p24",
    "markdown": "# Przelewy24 payments with Sources | Stripe DocumentationThe Stripe Docs logo\n\n## Przelewy24 payments with SourcesBeta\n\n## Use Sources to accept payments using Przelewy24, the most popular payment method in Poland.\n\n#### Warning\n\nWe deprecated the Sources API and plan to remove support for local payment methods. If you currently integrate with Przelewy24 using the Sources API, you must [migrate to the Payment Methods API](https://docs.stripe.com/payments/payment-methods/transitioning). We’ll send email communication with more information about this end of support.\n\nFor information about integrating Przelewy24 with the current APIs, see [Przelewy24 payments](https://docs.stripe.com/payments/p24).\n\nStripe users in Europe and the United States can accept [Przelewy24](https://www.przelewy24.pl/) payments from customers in Poland using [Sources](https://docs.stripe.com/sources).\n\nDuring the payment process, a [Source](https://docs.stripe.com/api#sources) object is created and your customer is redirected to their bank’s website or mobile application to authorize the payment. After completing this, your integration uses the source to make a charge request and complete the payment.\n\nPrzelewy24 is a [push](https://docs.stripe.com/sources#pull-or-push-of-funds)\\-based, [single-use](https://docs.stripe.com/sources#single-use-or-reusable) and [synchronous](https://docs.stripe.com/sources#synchronous-or-asynchronous-confirmation) method of payment. This means your customer takes action to send the amount to you through a [redirect](https://docs.stripe.com/sources#flow-for-customer-action) and there is immediate confirmation about the success or failure of a payment.\n\n[\n\n## Create a Source object![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-source)\n\nA `Source` object is either created client-side using [Stripe.js](https://docs.stripe.com/payments/elements) or server-side using the [Source creation endpoint](https://docs.stripe.com/api#create_source), with the following parameters:\n\n| Parameter | Value |\n| --- | --- |\n| `type` | **p24** |\n| `amount` | A positive integer in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) representing the amount to charge the customer (for example, **1099** for a 10.99 EUR payment). |\n| `currency` | **eur** or **pln** (Przelewy24 payments must be in either Euros or Polish Zloty). |\n| `owner[name]` (optional) | The name of the account holder. |\n| `owner[email]` | The email address of the account holder. |\n| `redirect[return_url]` | The URL the customer should be redirected to after the authorization process. |\n| `statement_descriptor` (optional) | A custom statement descriptor for the payment. |\n\nTo create a source with [Stripe.js](https://docs.stripe.com/payments/elements), first include the library within your website and set your [publishable API key](https://dashboard.stripe.com/apikeys). Once included, use the following `createSource` method to create a source client-side:\n\n`stripe.createSource({   type: 'p24',   amount: 1099,   currency: 'eur',   owner: {     name: 'Jenny Rosen',     email: 'jenny.rosen@example.com',   },   redirect: {     return_url: '__TOKEN_PLACEHOLDER_0__',   }, }).then(function(result) {   // handle result.error or result.source });`\n\nUsing either method, Stripe returns a `Source` object containing the relevant details for the method of payment used. Information specific to Przelewy24 is provided within the `p24` subhash.\n\n`{   \"id\": \"src_16xhynE8WzK49JbAs9M21jaR\",   \"object\": \"source\",   \"amount\": 1099,   \"client_secret\": \"src_client_secret_UfwvW2WHpZ0s3QEn9g5x7waU\",   \"created\": 1445277809,   \"currency\": \"eur\",   \"flow\": \"redirect\",   \"livemode\": true,   \"owner\": {`\n\n### Source creation in mobile applications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re building an iOS or Android app, you can implement sources using our mobile SDKs. Refer to our sources documentation for [iOS](https://docs.stripe.com/mobile/ios/sources) or [Android](https://docs.stripe.com/mobile/android/sources) to learn more.\n\n### Statement descriptors with Przelewy24 ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPrzelewy24 lets you provide a custom [statement descriptor](https://docs.stripe.com/get-started/account/activate#public-business-information) before the customer is redirected to authenticate the payment. It can be specified by providing `statement_descriptor` when creating a source.\n\nAdditionally, when the customer approves the payment, a unique reference will be stored on the Source under `p24[reference]`. You can share this reference with your customer to help locate payments.\n\nProviding a custom statement descriptor within a subsequent charge request has no effect.\n\n### Error codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSource creation for Przelewy24 payments may return any of the following errors:\n\n| Error | Description |\n| --- | --- |\n| `payment_method_not_available` | The payment method is currently not available. You should invite your customer to fallback to another payment method to proceed. |\n| `processing_error` | An unexpected error occurred preventing us from creating the source. The source creation should be retried. |\n| `invalid_owner_email` | The owner email address is invalid. It must be a valid email address. |\n| `invalid_currency` | The currency is not supported for Przelewy24. It must either be `'eur'` or `'pln'`. |\n\n[\n\n## Have the customer authorize the payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#customer-action)\n\nWhen creating a source, its status is initially set to `pending` and cannot yet be used to make a charge request. Your customer must authorize a Przelewy24 payment to make the source chargeable. To allow your customer to authorize the payment, redirect them to the URL provided within the`redirect[url]` attribute of the `Source` object.\n\nAfter the authorization process, your customer is redirected back to the URL provided as a value of `redirect[return_url]`. This happens regardless of whether authorization was successful or not. If the customer has authorized the payment, the `Source` object’s status is updated to `chargeable` and it is ready to use in a charge request. If your customer declines the payment, the status transitions to `failed`.\n\nStripe populates the `redirect[return_url]` with the following GET parameters when returning your customer to your website:\n\n*   `source`: a string representing the original ID of the `Source` object\n*   `livemode`: indicates if this is a live payment, either `true` or `false`\n*   `client_secret`: used to confirm that the returning customer is the same one who triggered the creation of the source (source IDs are not considered secret)\n\nYou may include any other GET parameters you may need when specifying `redirect[return_url]`. Do not use the above as parameter names yourself as these would be overridden with the values we populate.\n\n### Mobile applications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo integrate Przelewy24 within a mobile application, provide your application URI scheme as the `redirect[return_url]` value. By doing so, your customers are returned to your app after completing authorization. Refer to our Sources documentation for [iOS](https://docs.stripe.com/mobile/ios/sources) or [Android](https://docs.stripe.com/mobile/android/sources) to learn more.\n\nIf you are integrating without using our mobile SDKs, the redirect URL must be opened using the device’s native browser. The use of in-app web views and containers can prevent your customer from completing authentication—resulting in a lower conversion rate.\n\n### Testing the redirect process![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a `Source` object using your test API keys, you can follow the URL returned in the `redirect[url]` field. This leads to a Stripe page that displays information about the API request, and where you can either authorize or cancel the payment. Authorizing the payment redirects you to the URL specified in `redirect[return_url]`.\n\nAlternatively, to accelerate testing, use the following value for `owner[email]`, where `xxx_` is any prefix of your choice (these patterns are significant only in testmode):\n\n| Email Address | Effect |\n| --- | --- |\n| `xxx_chargeable@example.com` | The source will be created as `pending`, but automatically transition to `chargeable` within seconds of its creation. |\n\n[\n\n## Charge the Source![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#charge-request)\n\nOnce the customer has authenticated the payment, the source’s `status` transitions to `chargeable` and it can be used to make a charge request. This transition happens asynchronously and may occur after the customer was redirected back to your website.\n\nSome customers using Przelewy24 assume that the order process is complete once they have authenticated the payment and received confirmation from their bank. This results in customers who close their browser instead of following the redirect and returning to your app or website.\n\nFor these reasons it is essential that your integration rely on [webhooks](https://docs.stripe.com/webhooks \"webhook\") to determine when the source becomes chargeable in order to create a charge. Please refer to our [best practices](https://docs.stripe.com/sources/best-practices) for more details on how to best integrate payment methods using webhooks.\n\n### Webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following webhook events are sent to notify you about changes to the source’s status:\n\n| Event | Description |\n| --- | --- |\n| `source.chargeable` | A `Source` object becomes `chargeable` after a customer has authenticated and verified a payment. |\n| `source.failed` | A `Source` object failed to become chargeable as your customer declined to authenticate the payment. |\n| `source.canceled` | A `Source` object expired and cannot be used to create a charge. |\n\n### Make a charge request using the source![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOnce the source is chargeable, from your `source.chargeable` webhook handler, you can make a charge request using the source ID as the value for the `source` parameter to complete the payment.\n\n`curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d amount=\"1099\" \\   -d currency=\"eur\" \\   -d source=src_18eYalAHEMiOZZp1l9ZTjSU0`\n\nPrzelewy24 Sources are [single-use](https://docs.stripe.com/sources#single-use-or-reusable) and cannot be used for recurring or additional payments. Refer to our [Sources & Customers](https://docs.stripe.com/sources/customers) guide for more information on how single-use Sources interact with [Customers](https://docs.stripe.com/api/customers \"Customers\").\n\n[\n\n## Confirm that the charge has succeeded![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#charge-confirmation)\n\nSince Przelewy24 is a [synchronous](https://docs.stripe.com/sources#synchronous-or-asynchronous-confirmation) payment method and the customer has already authenticated the payment as part of the redirect, unless there is an unexpected error, the [Charge](https://docs.stripe.com/api#charge_object) will immediately succeed.\n\n| Event | Description |\n| --- | --- |\n| `charge.succeeded` | The charge succeeded and the payment is complete. |\n\nWe recommend that you rely on the `charge.succeeded` webhook event to notify your customer that the payment process has been completed and their order is confirmed. Please refer to our [best practices](https://docs.stripe.com/sources/best-practices) for more details on how to best integrate payment methods using webhooks.\n\n### Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe risk of fraud or unrecognized payments is extremely low with Przelewy24 as the customer must authenticate the payment with their bank. As such, there is no dispute process that can result in a chargeback and funds withdrawn from your Stripe account.\n\n### Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayments made with Przelewy24 can only be submitted for refund within 180 days from the date of the original charge. After 180 days, it is no longer possible to refund the charge.\n\n### Sources expiration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA `chargeable` Przelewy24 source must be charged within six hours of becoming `chargeable`. If it is not, its status is automatically transitioned to `canceled` and your integration receives a `source.canceled` webhook event. Once a chargeable source is canceled, the customer’s authenticated Przelewy24 payment is refunded automatically—no money is moved into your account. For this reason, make sure the order is canceled on your end and the customer is notified when you receive the `source.canceled` event.\n\nAdditionally, `pending` sources are canceled after one hour if they are not used to authenticate a payment, ensuring that all sources eventually transition out of their `pending` state to the `canceled` state if they are not used.",
    "title": "Przelewy24 payments with Sources | Stripe Documentation",
    "description": null,
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payment-authentication/dashboard",
    "markdown": "# Work with payment authentication data in the Dashboard\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/download-report.764901ac6d68f7903fef403e75dcdab9.png)\n\nYou can use the **Download report** link displayed on each chart to download the data used to generate the chart as a CSV file.\n\n### Downloading summary report data![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/summary-report.52d113402ce8ee836fc2ccbc4739ec19.png)\n\nWhen you click **Download report** you might be prompted for the type of report you want. The summary report downloads a CSV report containing the main columns for the underlying data.\n\n### Downloading itemized report data![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/itemized-report.298342f0a96ab6dcb9c5c8cb3aa80e6b.png)\n\nWhen you click **Download report** you might be prompted for the type of report you want. The itemized report downloads a CSV report based on the columns you select. You can choose what columns to include from the dropdown: _Default_, _All_, or _Custom_.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/itemized-report-1.8500af94be59b732ac200c1d89c3e5d0.png)\n\nUse the **Show** button to view the columns that will be included in the report.",
    "title": "Work with payment authentication data in the Dashboard | Stripe Documentation",
    "description": "Use the Dashboard to download reports and inspect data sources.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/mobilepay/accept-a-payment",
    "markdown": "# MobilePay payments | Stripe DocumentationThe Stripe Docs logo\n\nMobilePay is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) card wallet payment method used in Denmark and Finland. It allows your customer to [authenticate and approve](https://docs.stripe.com/payments/payment-methods#customer-actions) payments using the MobilePay app.\n\nWhen your customer pays with MobilePay, Stripe performs a card transaction using the card data we receive from MobilePay. The processing of the card transaction is invisible to your integration, and Stripe [immediately notifies you](https://docs.stripe.com/payments/payment-methods#payment-notification) whether the payment succeeded or failed.\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nUse this guide to enable MobilePay on [Checkout](https://docs.stripe.com/payments/checkout), our hosted checkout form, and learn the differences between accepting a card payment and a MobilePay payment.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support MobilePay payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be expressed in Euro, Danish Krona, Swedish Krona or Norwegian Krona (currency codes `eur`, `dkk`, `sek` or `nok`).\n\n[](#set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#accept-a-payment)\n\n#### Note\n\nThis guide builds on the foundational [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) Checkout integration.\n\n### Enable MobilePay as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `mobilepay` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the `eur`, `dkk`, `sek` or `nok` currency\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'mobilepay'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `mobilepay`, all line items must have currency: eur, dkk, sek, nok       currency: 'dkk',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#post-payment-events)\n\nStripe sends a [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded) event when the payment completes. Use the Dashboard, a custom [webhook](https://docs.stripe.com/webhooks \"webhook\"), or a partner solution to receive these events and run actions, like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes, and malicious clients could manipulate the response. Setting up your integration to listen for asynchronous events also makes it easier to accept more payment methods in the future. Check out our [guide to payment methods](https://stripe.com/payments/payment-methods-guide) to see the differences between all supported payment methods.\n\n### Manually![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the Stripe Dashboard to view all your Stripe payments, send email receipts, handle payouts, or retry failed payments.\n\n*   [View your test payments in the Dashboard](https://dashboard.stripe.com/test/payments)\n\n### Custom code![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBuild a webhook handler to listen for events and build custom asynchronous payment flows. Test and debug your webhook integration locally with the Stripe CLI.\n\n*   [Build a custom webhook](https://docs.stripe.com/payments/handling-payment-events#build-your-own-webhook)\n\n### Prebuilt apps![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHandle common business events, like [automation](https://stripe.partners/?f_category=automation) or [marketing and sales](https://stripe.partners/?f_category=marketing-and-sales), by integrating a partner application.\n\n[](#testing)\n\nTo test your integration, choose MobilePay as the payment method and tap **Pay**. In test mode, this redirects you to a test payment page where you can approve or decline the payment.\n\nIn live mode, tapping **Pay** redirects you to the MobilePay mobile application, where you can approve or decline the payment.\n\n[](#failed-payments)\n\nMobilePay transactions can fail if the underlying card transaction is declined. Learn more about [card declines](https://docs.stripe.com/declines/card). In this case, the PaymentMethod is detached and the PaymentIntent’s status automatically transitions to `requires_payment_method`.\n\nWhen the PaymentIntent’s status is `requires_action`, your customer must authenticate the payment within 5 minutes. If no action is taken after 5 minutes, the PaymentMethod detaches and the PaymentIntent’s status automatically transitions to `requires_payment_method`.\n\n[\n\n## Refunds and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#refunds-and-disputes)\n\nStripe performs a card transaction using standard card rails as part of a MobilePay transaction. [Refunds](https://docs.stripe.com/refunds) and [disputes](https://docs.stripe.com/disputes/how-disputes-work) are subject to the Visa and Mastercard network rules.",
    "title": "MobilePay payments | Stripe Documentation",
    "description": "Learn how to accept MobilePay, a popular payment method in Denmark and Finland.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/invoicing/dashboard/customize-iban-country",
    "markdown": "# Customize the IBAN country | Stripe DocumentationThe Stripe Docs logo\n\n## Customize the country of the IBAN when using bank transfers.\n\nThere are multiple ways you can collect payment for your [invoice](https://docs.stripe.com/api/invoices \"invoices\"), one of which is [Bank Transfer](https://docs.stripe.com/invoicing/bank-transfer). With this payment method, customers pay the invoice by transferring funds to a bank account, at which point Stripe reconciles the funds. The invoice provides the bank account details, and an International Bank Account Number (IBAN).\n\nIn general, it’s the merchant’s location that governs the country of the IBAN. If the merchant is part of the Single Euro Payments Area (SEPA), however, you can configure the IBAN country to one of the following: `DE`, `ES`, `FR`, `IE` or `NL`.\n\n1.  Follow the steps in the [Create an invoice](https://docs.stripe.com/invoicing/dashboard#create-invoice) section. Choose **Bank transfer** as a payment method.\n    \n    #### Note\n    \n    Manage your default payment method preferences in [Settings](https://dashboard.stripe.com/settings/billing/invoice).\n    \n2.  Select the country of your choice from the **European IBAN country** drop-down menu (`DE`, `ES`, `FR`, `IE` or `NL`).",
    "title": "Customize the IBAN country | Stripe Documentation",
    "description": "Customize the country of the IBAN when using bank transfers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payment-authentication/writing-queries",
    "markdown": "# Querying authentication conversion | Stripe DocumentationThe Stripe Docs logo\n\n## Use Stripe Sigma to retrieve information about authentication, conversion, and the SCA exemptions used.\n\nSee the `authentication_report_attempts` table under the **Analytics Tables** section of the Sigma schema. Each row within the `authentication_report_attempts` table represents data about an individual attempt object. Our [full-page documentation](https://dashboard.stripe.com/stripe-schema?tableName=authentication_report_attempts) also shows the schema in a split-view format.\n\n## Attempt conversion information![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can get a report for every attempt, with each [PaymentIntent](https://docs.stripe.com/api/payment_intents) or [SetupIntent](https://docs.stripe.com/api/payment_intents) having possibly more than one attempt.\n\n#### Note\n\nIn some cases there are multiple attempts for a single transaction, such as when a payment is declined and then retried. To filter to a specific transaction, use the `is_final_attempt` column. This column is eventually consist after a few days.\n\nThe following example query uses the `authentication_report_attempts` table to retrieve a list of payment intents that were successfully authenticated using the challenge flow.\n\n`select   attempt_id,   intent_id,   payment_method,   threeds_reason as step_up_reason,   charge_outcome from authentication_report_attempts where intent_type = 'payment'   and threeds_outcome_result = 'authenticated'   and authentication_flow = 'challenge'   and is_final_attempt limit 5`\n\n| attempt\\_id | intent\\_id | payment\\_method | step\\_up\\_reason | charge\\_outcome |\n| --- | --- | --- | --- | --- |\n| payatt\\_1IRdZ9F… | pi\\_1Hn8d… | card\\_charge | requested\\_by\\_radar\\_rule | authorized |\n| payatt\\_1I4AFxF… | pi\\_1J8Ljt… | card\\_charge | requested\\_by\\_radar\\_rule | authorized |\n| payatt\\_1HvmxU… | pi\\_1HhsH… | card\\_charge | requested\\_by\\_radar\\_rule | authorized |\n| payatt\\_1I5npGF… | pi\\_1IdKak… | card\\_charge | requested\\_by\\_radar\\_rule | authorized |\n| payatt\\_1HcbWZ… | pi\\_1IAhBh… | card\\_charge | requested\\_by\\_radar\\_rule | authorized |\n\n## SCA exemption information![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can also query information on the [SCA exemptions](https://stripe.com/guides/strong-customer-authentication#exemptions-to-strong-customer-authentication \"SCA exemptions\") used by Stripe or the issuing bank. See [Exemptions to Strong Customer Authentication](https://stripe.com/guides/strong-customer-authentication#exemptions-to-strong-customer-authentication).\n\nThe following query shows the payments that used a low risk direct authorization SCA exemption that was declined for a reason unrelated to the requested exemption.\n\n`select   attempt_id,   intent_id,   charge_outcome,   charge_outcome_reason from authentication_report_attempts where intent_type = 'payment'   and sca_exemption_requested = 'low_risk'   and sca_exemption_mechanism = 'authorization' -- direct to authorization   and sca_exemption_status = 'non_sca_decline'   and is_final_attempt limit 5`\n\n| attempt\\_id | intent\\_id | charge\\_outcome | charge\\_outcome\\_reason |\n| --- | --- | --- | --- |\n| payatt\\_3JeL… | pi\\_3JeL… | issuer\\_declined | insufficient\\_funds |\n| payatt\\_1Itw… | pi\\_1Itw… | issuer\\_declined | do\\_not\\_honor |\n| payatt\\_1Ini3… | pi\\_1Ini3… | issuer\\_declined | do\\_not\\_honor |\n| payatt\\_1IiO7… | pi\\_1IiO7… | issuer\\_declined | do\\_not\\_honor |\n| payatt\\_1I0hGm… | pi\\_1I0hGk… | issuer\\_declined | insufficient\\_funds |\n\n## Impact of deduplication![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following query shows how removing duplicates with `is_final_attempt` affects the calculation of the authentication rate for setups.\n\n#### Note\n\nOur deduplication logic looks for groups of declined transactions (except for the last, potentially) with the same `customer_id​`, `currency`, and `amount​`, appearing close together in time. Such groups are treated as a single unit for conversion calculations. In the Sigma table, we include all raw data, but also include a column, `is_final_attempt​`, that you can use to filter to a representative transaction from each group.\n\n`with setup_attempts as (   select     created,     is_final_attempt,     threeds_outcome_result in (       'attempt_acknowledged',       'authenticated',       'delegated',       'exempted'     ) as threeds_succeeded   from authentication_report_attempts   where created between date'2021-10-29' and date'2021-11-03'     and intent_type = 'setup'     and is_threeds_triggered ) select   date_trunc('day', created) as day,   1. * count_if(threeds_succeeded)     / count(*) as authentication_rate__raw,   2. * count_if(threeds_succeeded and is_final_attempt)     / nullif(count_if(is_final_attempt), 0) as authentication_rate__deduped from setup_attempts group by 1 order by 1`\n\n| day | authentication\\_rate\\_\\_raw | authentication\\_rate\\_\\_deduped |\n| --- | --- | --- |\n| 2021-10-29 | 0.59 | 0.80 |\n| 2021-10-30 | 0.60 | 0.81 |\n| 2021-10-31 | 0.59 | 0.81 |\n| 2021-11-01 | 0.61 | 0.83 |\n| 2021-11-02 | 0.62 | 0.83 |",
    "title": "Querying authentication conversion | Stripe Documentation",
    "description": "Use Stripe Sigma to retrieve information about authentication, conversion, and the SCA exemptions used.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/payment-methods/pmd-registration?dashboard-or-api=dashboard",
    "markdown": "# Register domains for payment methods\n\n## Register and verify domains to use payment methods (including Link, Apple Pay, and Google Pay) in Elements or Checkout's embeddable payment form.\n\nTo use certain payment methods with [Elements](https://docs.stripe.com/payments/elements \"Stripe Elements\") or [Checkout’s embeddable payment form](https://docs.stripe.com/payments/checkout/how-checkout-works?payment-ui=embedded-form), you must register every web domain that will show the payment method. This includes registering top-level domains and subdomains. For example, if you have the domain **yourdomain.com** and subdomains like **shop.yourdomain.com** and **www.yourdomain.com**, this guide explains how to register them.\n\nAfter you register a domain, that domain is ready for use with other payment methods that you might enable in the future.\n\nThe following payment methods require registration:\n\n*   Google Pay\n*   Link\n*   PayPal\n*   Apple Pay (additional verification step required)\n\n#### Apple Pay and merchant validation\n\nThe Apple Pay documentation describes their process of “merchant validation,\" which Stripe handles for you behind the scenes. You don’t need to create an Apple Merchant ID or CSR. Instead, follow the steps in this guide.\n\n## Testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou also need to register domains for testing. When testing locally, you can use a tool such as [ngrok](https://ngrok.com/) to get an HTTPS domain. You can either register in test mode, or register in live mode and the domain will also be registered in test mode automatically. Remember to register your domains in live mode before going live.\n\nYou can create and manage domains in the Dashboard on the [Payment method domains page](https://dashboard.stripe.com/settings/payment_method_domains) for use in production and testing.\n\n#### Using Connect\n\nConnect platforms that create direct charges must use the API to manage domains for their [connected accounts](#register-a-domain-using-connect), not the Stripe Dashboard.\n\n## Register your domain![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo register a domain:\n\n1.  On the [Payment method domains page](https://dashboard.stripe.com/settings/payment_method_domains), click **Add a new domain**.\n2.  Enter your domain name.\n3.  Click **Save and continue**.\n4.  If you’re setting up Apple Pay, verify ownership of your domain with Apple by following the steps described later on this page.\n5.  (Optional) Repeat steps 1-4 for additional domains that you need to register.\n\nAfter completing these steps, your domain shows up on the Payment method domains page.\n\n### Using an iframe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   When using an iframe, its origin must match the top-level origin, except in Safari 17+. Two pages have the same origin if the protocol, host (full domain name), and port (if specified) are the same for both pages.\n*   When using a cross-origin iframe in Safari 17+ you must specify the `allow=“payment”` attribute. To enable Apple Pay, you must also register the source domain that the iframe loads.\n\n## Verify ownership of your domain with Apple Pay ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDuring registration, Stripe automatically attempts to verify ownership of your domain with Apple. If the domain isn’t already verified, register your domain and then follow these steps to verify your registered domain with Apple Pay.\n\n#### Common mistake\n\nApple attempts to request your domain association file, so it needs to be publicly available to [Apple’s servers](https://developer.apple.com/documentation/apple_pay_on_the_web/setting_up_your_server#3179116).\n\n1.  Download the [domain association file](https://stripe.com/files/apple-pay/apple-developer-merchantid-domain-association).\n2.  Host the file at `/.well-known/apple-developer-merchantid-domain-association`. For example, if you register `https://yourdomain.com`, make that file available at `https://yourdomain.com/.well-known/apple-developer-merchantid-domain-association`.\n3.  Click **Verify**.\n\n## Manage your domain![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can see a list of all of your domains in the Dashboard.\n\nTo disable a domain, click the row action and then click **Disable**. If a domain is disabled, the payment methods no longer appear in Elements or Checkout’s embeddable payment form on that domain.\n\nTo enable a disabled domain, click the row action and then click **Enable**.\n\n## Register your domain while using Connect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnect platforms must register all domains where Elements or Checkout’s embeddable payment form displays the payment methods listed above. The domain where the charge is being run needs to be registered for the user running the charge.\n\nIf the platform creates [direct charges](https://docs.stripe.com/connect/direct-charges), use your platform’s secret key to authenticate the request and set the Stripe-Account header to your connected account’s Stripe ID.\n\nIf the platform creates [destination charges](https://docs.stripe.com/connect/destination-charges) or [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers), use your platform’s secret key to authenticate the request and omit the Stripe-Account header.\n\nLearn more about [Making API calls for connected accounts](https://docs.stripe.com/connect/authentication).\n\n`curl https://api.stripe.com/v1/payment_method_domains \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d domain_name=\"example.com\"`",
    "title": "Register domains for payment methods | Stripe Documentation",
    "description": "Register and verify domains to use payment methods (including Link, Apple Pay, and Google Pay) in Elements or Checkout's embeddable payment form.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/cash-app-pay",
    "markdown": "# Cash App Pay payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to accept Cash App Pay, a digital wallet popular with US customers.\n\nCash App is a popular consumer app in the US that allows customers to bank, invest, send, and receive money using their digital wallet.\n\nCash App Pay is a payment method available to all Cash App customers for single use and recurring payments to businesses. Cash App Pay uses the customer’s stored balance or linked debit card to fund the payment. The customer can confirm the payment in one of two ways:\n\n*   During checkout from a mobile device, your site redirects customers to the Cash App mobile application for authentication. The payment is authenticated during the redirect. No additional action is needed in the Cash App mobile application to complete the purchase. The customer is then redirected back to your site.\n*   During checkout from a desktop web application, the customer scans a QR code with their mobile device to authenticate the transaction.\n\n*   **Customer locations**\n    \n    US customers (excluding accounts in US territories).\n    \n*   **Presentment currency**\n    \n    USD\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Digital wallet\n    \n*   **Billing support**\n    \n    Yes\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    Yes\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis demo shows the customer experience when using Cash App Pay.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo get started, see [Accept a payment](https://docs.stripe.com/payments/cash-app-pay/accept-a-payment).\n\nYou don’t have to integrate Cash App Pay and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Cash App Pay. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Cash App Pay from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n*   [Subscriptions](https://docs.stripe.com/billing/subscriptions/overview)\n\nBoost conversion by letting your customers know you accept payments with Cash App Pay by including their approved [brand assets](https://developers.cash.app/docs/api/resources/Cash-App-Pay-assets) on your website.\n\n## Payment limits and options ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhile there are no business level minimum or maximum limits enforced, Cash App sets variable customer level limits for sending and receiving money. This limit is based on a number of factors such as verification status of the customer’s account and transaction history. Use Cash App Pay for lower value orders (for example, below 2000 USD) to reduce the likelihood of a decline.\n\nCash App Pay uses either the customer’s Cash App balance or linked debit card to fund the transaction. By default, Cash App Pay uses the customer’s Cash App balance if the balance can cover the entirety of the order amount. Otherwise, it uses the customer’s linked debit card. A Cash App customer can’t combine payment options for a single order (for example, using the balance for part of the order amount and debit card for the remainder).\n\n## Prohibited and restricted business categories ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn addition to the categories of [businesses restricted from using Stripe overall](https://stripe.com/legal/restricted-businesses), the following categories are prohibited from using Cash App Pay:\n\n*   B2B businesses\n*   Financial services\n*   Businesses accepting Cash App Pay for gift card purchases\n\nPlatforms focused on fundraising, donations, and alcohol sales must seek additional approvals from Stripe. Contact us for additional information.\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nReturns are subject to the return policy that you display on your website. If your business allows returns, you can [refund](https://docs.stripe.com/refunds) Cash App Pay transactions as you normally would for card payments. Cash App Pay supports partial or full refunds for up to 90 days after the original purchase, and processes them asynchronously. After Stripe initiates a refund, Cash App Pay issues the refund to the customer’s original form of payment (either their Cash App balance or linked debit card).\n\nStripe notifies you of the final refund status using the [charge.refund.updated](https://docs.stripe.com/api/events/types#event_types-charge.refund.updated) [webhook](https://docs.stripe.com/webhooks \"webhook\") event. When a refund succeeds, the [Refund](https://docs.stripe.com/api/refunds/object) object’s status transitions to `succeeded`. If the refund fails, the Refund object’s status transitions to `failed` and Stripe returns the amount to your Stripe balance. In these cases, you need to arrange an alternative way of providing your customer with a refund.\n\n## Disputes and fraud ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCustomers must authenticate Cash App Pay payments by logging in to their Cash App account. This requirement helps reduce the risk of fraud or unrecognized payments. Cash App takes financial liability for any losses due to customer fraud.\n\nCustomers can dispute Cash App Pay payments in certain cases–for example, if they’re unaware of the transaction, don’t receive the goods or services, receive duplicate charges for the same transaction, or cancel the transaction without receiving a refund. Customers have 120 calendar days to file a dispute from the date of the original charge, or in situations where they didn’t receive goods, 120 calendar days from the expected receipt date.\n\nIf the Cash App Pay payment used the customer’s linked debit card as the underlying source for payment, customers can initiate a dispute in one of the following ways:\n\n1.  Directly with their issuing financial institution.\n2.  Directly with Cash App. This is the only option for payments that use the Cash App stored balance as the underlying source.\n\nAfter the customer initiates a dispute, Stripe notifies you using:\n\n*   Email notification\n*   The Stripe Dashboard\n*   An API [charge.dispute.created](https://docs.stripe.com/api/events/types#event_types-charge.dispute.created) event (if your integration is set up to receive [webhooks](https://docs.stripe.com/webhooks))\n\nWhen a customer creates a dispute, Stripe deducts the amount of the dispute and associated dispute fee from your Stripe balance until Cash App Pay resolves the dispute. Stripe requests that you upload compelling evidence that you fulfilled the purchase order using the [Stripe Dashboard](https://docs.stripe.com/disputes/responding#respond). This evidence can include:\n\n*   Received return confirmation (for shipped goods returned from the customer to you)\n*   Tracking ID\n*   Shipping date\n*   Record of purchase for intangible goods, such as IP address or email receipt\n*   Record of purchase for services or physical goods, such as phone number or proof of receipt\n\nIf you would rather handle disputes programmatically, you can [respond to disputes using the API](https://docs.stripe.com/disputes/api).\n\nYou must submit the requested information within 13 calendar days. Cash App Pay makes a decision within 58 calendar days of dispute creation. If Cash App Pay resolves the dispute with you winning, Stripe returns the disputed amount to your Stripe balance. If they rule in favor of the customer, the balance charge becomes permanent.\n\n## Statement descriptors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEvery Cash App Pay payment appears on the customer’s bank statement with the `CashApp*` prefix attached to the merchant name. The merchant name is set to the [`company.name`](https://docs.stripe.com/api/accounts/object#account_object-company-name) field.\n\nUnlike cards, Cash App Pay does not support a dynamic statement descriptor to be set at the transaction level. This means that the `statement_descriptor` value in a PaymentIntent request is ignored for Cash App Pay payments.\n\n## Connect ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you use [Connect](https://docs.stripe.com/connect), take the following into consideration before you enable and use Cash App Pay:\n\n### Request Cash App Pay capabilities for your connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSet the `cashapp_payments` capability to `active` on your platform account, and for any connected accounts you want to enable for Cash App Pay. You can do this without code by navigating to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and making sure Cash App Pay is on by default for your connected accounts, or you can [request the account capability](https://docs.stripe.com/connect/account-capabilities#requesting-unrequesting).\n\n### Business of record and statement descriptors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [charge type](https://docs.stripe.com/connect/charges) of Connect payments might change the default statement descriptor and the business name that appears on the customer’s bank statement. The charge type can also change the business of record shown on:\n\n*   The Cash App customer interface\n*   Customer confirmation emails from Cash App\n*   The mandate when [saving payment details](https://docs.stripe.com/payments/cash-app-pay/set-up-payment)\n\n| Charge type | Descriptor taken from |\n| --- | --- |\n| Direct | Connected Account |\n| Destination | Platform |\n| Separate charge and transfer | Platform |\n| Destination (with `on_behalf_of` using a platform saved payment method) | Platform |\n| Separate charge and transfer (with `on_behalf_of` using a platform saved payment method) | Platform |\n| Destination (with `on_behalf_of` not using a platform saved payment method) | Connected Account |\n| Separate charge and transfer (with `on_behalf_of` not using a platform saved payment method) | Connected Account |\n\n#### Note\n\n*   A “platform saved payment method” is a payment method created through PaymentIntent or SetupIntent without using the `on_behalf_of` param. Thus, the saved payment method belongs to the platform account.\n*   To save a customer from repeated authentications for Destination `on_behalf_of` charges, platforms often save a payment method for the customer, then use it for off session Destination `on_behalf_of` charges.\n\n### PaymentMethod cloning ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can save a customer’s Cash App Pay payment method for recurring purchases but the saved Cash App Pay payment method can only be used with the business of record that the customer authorized off-session use for. This means that Connect users can’t [clone](https://docs.stripe.com/payments/payment-methods/connect#cloning-payment-methods) Cash App Pay payment methods across different connected accounts when the connected accounts act as the business of record.",
    "title": "Cash App Pay payments | Stripe Documentation",
    "description": "Learn how to accept Cash App Pay, a digital wallet popular with US customers.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/konbini",
    "markdown": "# Konbini payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to accept payments at convenience stores with Konbini.\n\n* * *\n\nKonbini allows customers in Japan to pay for bills and online purchases at convenience stores with cash.\n\nTo complete a transaction, customers receive payment codes for specific convenience stores along with a confirmation number. Customers then bring the information to a convenience store to make a cash payment. You will receive payment confirmation instantly, while funds will be available for [payout](https://docs.stripe.com/payouts \"payout\") after 4 business days.\n\nCustomers can pay at FamilyMart, Lawson, Ministop and Seicomart stores across Japan.\n\n*   **Customer locations**\n    \n    Japan\n    \n*   **Payment method family**\n    \n    Cash-based payment method\n    \n*   **Connect support**\n    \n    Partial: [request an invite](https://support.stripe.com/contact/email?topic=payment_apis) to create charges [on behalf of](https://docs.stripe.com/connect/charges#on_behalf_of) other accounts\n    \n*   **Billing support**\n    \n    Yes\n    \n*   **Presentment currency**\n    \n    JPY\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Refunds / Partial refunds**\n    \n    Yes/yes\n    \n*   **Minimum charge amount**\n    \n    ¥120\n    \n*   **Maximum charge amount**\n    \n    ¥300,000\n    \n\n## Payment flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4af16ecfd4f0a3f4044c56d6100c4a42.svg)\n\n1\\. Selects Konbini at checkout\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/instructions.2351eba9fc390804d843dcd5985e1b2f.svg)\n\n2\\. Receives payment codes and a confirmation number\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/store.5ca8f4c777abafa3185982baf9d82ff9.svg)\n\n3\\. Makes a cash payment with the appropriate payment code and confirmation number at a convenience store\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/success.1ee3b6d34d944693e654e84f6d1be9f3.svg)\n\n4\\. Receives notification that payment is complete\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Konbini and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Konbini. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add Konbini from the Dashboard:\n\n*   [Invoicing](https://docs.stripe.com/invoicing/quickstart-guide)\n*   [Payment Links](https://docs.stripe.com/payment-links)\n*   [Subscriptions](https://docs.stripe.com/billing/subscriptions/overview)\n\nIf you prefer to manually list payment methods, learn how to [manually configure Konbini as a payment](https://docs.stripe.com/payments/konbini/accept-a-payment).\n\n## Disputed payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nKonbini payments have a low risk of fraud or unrecognized payments because the customer must provide cash payment in person at a convenience store. Generally Konbini payments cannot be disputed by the customer. However, in rare instances irregularities similar in nature to disputes (by the convenience store) might arise, (for example, due to mishandling). Stripe will need to reach out to you in such cases and ask for your cooperation.\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nKonbini payments can be refunded either through the [Dashboard](https://dashboard.stripe.com/payments) or [API](https://docs.stripe.com/api#create_refund). To complete a refund, your customer must provide account information where funds should be returned to. Stripe automatically contacts the customer at the email address provided at time of PaymentIntent confirmation and requests this information from them, after which the refund is processed automatically.\n\n## Billing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse [Stripe Billing](https://stripe.com/billing) to create Konbini supported [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") and [invoices](https://docs.stripe.com/api/invoices \"invoices\").\n\nDue to the in-person nature of Konbini payments, [automatically charged](https://docs.stripe.com/invoicing/automatic-charging) invoices are not supported.\n\nInvoices and subscriptions need to be configured with a [collection\\_method](https://docs.stripe.com/api/invoices/object#invoice_object-collection_method) of `send_invoice`.\n\n## Prohibited business categories ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn top of the categories of [businesses restricted from using Stripe overall](https://stripe.com/restricted-businesses), the following categories are specifically prohibited from using Konbini.\n\n*   Sole proprietors who have been doing business for less than 3 years\n*   Real Money Trading (RMT), that is, sale of virtual (in-game) characters, currency, and so on.\n*   Gambling\n*   Information selling, in particular:\n    *   Money making schemes\n    *   Investment related information\n    *   Gambling strategies for horse racing, pachinko, slot machines, and so on\n*   Multi-level marketing and pyramid schemes\n*   Gore content or products\n*   Unscientific and superstition-based content or products\n*   Prohibited medical products (per the Japanese Pharmaceutical Affairs Act)\n*   Content or products offensive to public order or moral\n*   Personal import facilitation (forwarding)\n*   Foreign money transfer\n*   Loans\n*   Dating sites\n*   E-cigarettes (vaping), waterpipes (shisha, hookah), and so on\n*   Fortune-telling\n\nPlease keep in mind that our financial partner and convenience store chains may reject businesses at their discretion regardless of category.",
    "title": "Konbini payments | Stripe Documentation",
    "description": "Learn how to accept payments at convenience stores with Konbini.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/billing/entitlements",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nDuring the lifecycle of a customer’s subscription, from activation, through upgrades, downgrades, and so on, Stripe updates the customer’s entitlements based on your mapped features.\n\nWhen a customer’s subscription is first activated, Stripe creates entitlements for the features that they’re subscribed to.\n\nAs long as a customer maintains an active subscription for a feature, they retain an active entitlement. Make sure you provision access in your system for any users entitled to this feature.\n\n### Listen for webhook events ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf your webhooks are enabled, we send the following webhook event to notify you when a customer’s entitlements change.\n\n#### Limited entitlements available in summary webhook\n\nThe entitlement summary’s `active_entitlements` property only contains a maximum of 10 entitlements. We also provide a URL to retrieve the full, paginated list of the customer’s entitlements.\n\n| Event | Description |\n| --- | --- |\n| `entitlements.active_entitlement_summary.updated` | Occurs each time a customer’s active entitlements change. |\n\n### Retrieve the list of all active entitlements for a customer ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe list endpoint returns paginated view of a customer’s active entitlements.\n\n`curl -G https://api.stripe.com/v1/entitlements/active_entitlements \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}    `\n\n#### Recommendation\n\nWe recommend you persist these entitlements internally for faster resolution.",
    "title": "Entitlements | Stripe Documentation",
    "description": "Determine when you can grant your customers access to your products features and when to revoke access.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payouts/customized-start-of-day",
    "markdown": "# Customized start of day | Stripe DocumentationThe Stripe Docs logo\n\n## Set your start of day to make your automatic payouts reconciliation easier to track.\n\nStripe supports customized start of day for automatic [payouts](https://docs.stripe.com/payouts \"payout\") to group and send payments in your local timezone with a “customized day” starting time. This makes payout reconciliation easier to track as payouts contain payments processed in a day of your timezone, versus payments processed in a UTC day.\n\nFor example, if a user in Singapore starts their customized day at midnight SGT (Singapore Time), the payments they process from midnight SGT to the following midnight SGT belong to the same day. If they start their day at 06:00 SGT, payments collected between 06:00 SGT on a given day and 06:00 SGT the next day are attributed to the given day.\n\nYour default start of day is UTC midnight [except for some users in Asia-Pacific (APAC) markets](https://support.stripe.com/questions/default-start-of-day-for-asia-pacific-%28apac%29-payouts). You can change your start of day to a time in the allowed range (usually between midnight and morning) in your local timezone.\n\n## Feature availability ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCustomized start of day is available in the following countries:\n\nAustralia\n\nHong Kong\n\nIndia\n\nIndonesia\n\nJapan\n\nMalaysia\n\nNew Zealand\n\nPhilippines\n\nSingapore\n\nThailand\n\n## Change start of day ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo change the start of day:\n\n1.  In the Dashboard, navigate to **Settings** > [**External payout accounts and scheduling**](https://dashboard.stripe.com/settings/payouts).\n2.  In the **Start of day** section, change the default setting to your preferred start of day.\n\n![Start of day settings in the Dashboard](https://b.stripecdn.com/docs-statics-srv/assets/payout-schedule-page-start-of-day-1.b11ce1ceac6e24873a3a5a2a68594ba3.png)\n\nAfter you set the start of day, it doesn’t take effect immediately. The new start of day only takes effect at the new time. For example, if your current time is equivalent to 07:00 Asia/Singapore, and you set the start of day to 00:00 Asia/Singapore, this new start of day takes effect in 17 hours.\n\n![Dashboard callout notifying when the new start of day takes effect](https://b.stripecdn.com/docs-statics-srv/assets/payout-schedule-page-start-of-day-2.f64163c5eb39a0eb6c1f6757e50d73b7.png)\n\nThe settings at the time of the original transaction apply to the payout as well. For example, if the settings at the time of the original transaction indicate a 7-day payout timing, this rule applies to the payout regardless of any later changes in time zones. Let’s say a merchant has a balance of 1000 USD. 500 USD is attributed to UTC Monday and 500 USD is attributed to UTC Tuesday. If their start of the day changes to Singapore Time (SGT) on Wednesday, the 1000 USD balance is still assigned to UTC Monday and Tuesday, and the payout will be processed on the next Monday and Tuesday under UTC, not SGT. Only the payments created after the change to SGT will follow the new time zone in terms of payout timing.\n\n## Example ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA restaurant merchant’s business hours are 10AM to 9PM PST, all the transactions made before the start of business count towards the previous day because they’ve chosen 10AM as their start of day. Assuming this merchant is on a daily automatic payout plan and a 4 business day schedule, all transactions made between 10AM PST Monday and 10AM PST Tuesday are grouped into Monday’s sales and arrive in the merchant’s bank before the end of Friday in one payout.",
    "title": "Customized start of day | Stripe Documentation",
    "description": "Set your start of day to make your automatic payouts reconciliation easier to track.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/components/toast",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nTo add the Toast component to your app:\n\n`import { showToast } from \"@stripe/ui-extension-sdk/utils\";`\n\n`const App = () => {   useEffect(() => {     showToast('Changes saved', {type: \"success\"});   }, []) };`\n\nRender a toast at the bottom of your view to inform the user about the status of an action. For example, a toast can show a user whether an API call succeeded or failed.\n\n``import {showToast} from '@stripe/ui-extension-sdk/utils';  const App = () => {   const handleClick = () => {     fetch(...)       .then((response) => {         showToast(\"Invoice updated\", {type: \"success\"})         return response.json()       })       .catch(() => {         showToast(\"Invoice could not be updated\", {type: \"caution\"})       })   }    // Use the `handleClick`... }``\n\nThe `showToast()` function takes two arguments, a `message` and `options`. The function is defined as follows:\n\n`type ToastType = \"success\" | \"caution\" | \"pending\" | undefined; type ToastOptions = { type?: ToastType; action?: string; onAction: () => void; } (message: string, options?: ToastOptions) => Promise<{     update: (updateMessage: string, updateOptions?: ToastOptions) => void;     dismiss: () => void; }>;`\n\nToast messages can’t exceed 30 characters in length or be empty. If a message is too long or empty, the console logs an error.\n\nUnless they’re of type `pending`, toasts dismiss automatically.\n\n| Is Pending | Has Action | Timeout |\n| --- | --- | --- |\n| `false` | `false` | 4s  |\n| `false` | `true` | 6s  |\n| `true` | `false` | None |\n| `true` | `true` | None |\n\n``import {showToast} from '@stripe/ui-extension-sdk/utils';  const App = () => {   const handleClick = async () => {     const { dismiss, update } = await showToast(\"Refreshing data\", {       type: \"pending\",     });     try {       await refreshData();       dismiss();     } catch (error) {       update(\"Data could not be refreshed\", { type: \"caution\" });     }   }    // Use the `handleClick`... }``\n\nToasts can also prompt the user to take an action. Clicking the action button automatically dismisses the toast.\n\n``import {showToast} from '@stripe/ui-extension-sdk/utils';  const App = () => {   const handleClick = async () => {     let timeout;     const { dismiss } = await showToast('Message \"sent\"', {       action: \"Undo\",       onAction: () => {         clearTimeout(timeout);         showToast('Message \"unsent\"');       },     });     timeout = setTimeout(() => {       sendMessage();       dismiss();     }, 3000);   }    // Use the `handleClick`... }``",
    "title": "Toast | Stripe Documentation",
    "description": "Inform users of temporary status.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/components/checkbox",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nTo add the `Checkbox` component to your app:\n\n`import {Checkbox} from '@stripe/ui-extension-sdk/ui';`\n\n`<Checkbox     label=\"This is a Checkbox.\"     onChange={(e) => {       console.log(e.target.checked);     }}   />`\n\n`Checkbox` takes the following props, in addition to all the appropriate [native DOM attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox).\n\n### Checkbox props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `autoFocus` | Optional<br><br>`boolean \\| undefined`<br><br>If `true`, React will focus the element on mount. |\n| `checked` | Optional<br><br>`boolean \\| undefined`<br><br>Controls whether the input is selected. When you pass this prop, you must also pass an `onChange` handler that updates the passed value. |\n| `defaultChecked` | Optional<br><br>`boolean \\| undefined`<br><br>Specifies the initial value that a user can change. |\n| `description` | Optional<br><br>`string \\| undefined`<br><br>Descriptive text that will be rendered adjacent to the control’s label. |\n| `disabled` | Optional<br><br>`boolean \\| undefined`<br><br>Sets whether or not the element should be disabled. Prevents selection. |\n| `error` | Optional<br><br>`string \\| undefined`<br><br>Error text that will be rendered below the control. |\n| `form` | Optional<br><br>`string \\| undefined`<br><br>Specifies the `id` of the `<form>` this input belongs to. If omitted, it’s the closest parent form. |\n| `hiddenElements` | Optional<br><br>`(\"label\" \\| \"description\" \\| \"error\")[] \\| undefined`<br><br>Visually hides the specified elements. The hidden elements will still be present and visible to screen readers. |\n| `indeterminate` | Optional<br><br>`boolean \\| undefined`<br><br>Sets whether the Checkbox should be rendered as indeterminate (“partially checked”) or not. Note that this is purely visual, and will not change the actual `checked` state of the Checkbox. If a Checkbox is both `indeterminate` and `checked`, it will display as `indeterminate`. |\n| `invalid` | Optional<br><br>`boolean \\| undefined`<br><br>Sets whether or not the element is in an invalid state. This is a display-only prop, and will not prevent form submission. |\n| `label` | Optional<br><br>`React.ReactNode`<br><br>Text that describes the control. Will be both visible and clickable. |\n| `name` | Optional<br><br>`string \\| undefined`<br><br>Specifies the name for this input that’s submitted with the form. |\n| `onChange` | Optional<br><br>`((event: React.ChangeEvent<HTMLInputElement>) => void) \\| undefined`<br><br>Required for controlled inputs. Fires immediately when the input’s value is changed by the user (for example, it fires on every keystroke). Behaves like the browser input event. |\n| `readOnly` | Optional<br><br>`boolean \\| undefined`<br><br>If `true`, the input is not editable by the user. |\n| `required` | Optional<br><br>`boolean \\| undefined`<br><br>If `true`, the value must be provided for the form to submit. |\n| `tabIndex` | Optional<br><br>`number \\| undefined`<br><br>Overrides the default Tab button behavior. Avoid using values other than `-1` and `0`. |\n| `value` | Optional<br><br>`string \\| undefined`<br><br>Controls the input’s text. When you pass this prop, you must also pass an `onChange` handler that updates the passed value. |\n\nYou can set a `Checkbox` component to different states:\n\n*   `indeterminate`\n*   `disabled`\n*   `invalid`\n\n## Indeterminate ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe `Checkbox` component can be in an `indeterminate` state. This is useful when it represents the aggregated state of some other set of checkboxes, of which some may be checked and some may not. Note that this property is purely visual, and does not affect the Checkbox’s underlying checked state.\n\n`const [checked1, setChecked1] = React.useState(false); const [checked2, setChecked2] = React.useState(true);  const handleAggregateChange = () => {   if (checked1 && checked2) {     setChecked1(false);     setChecked2(false);   } else {     setChecked1(true);     setChecked2(true);   } };  return (   <Box     css={{       stack: 'y',     }}   >     <Checkbox       label=\"This Checkbox is aggregating the state of the Checkboxes below it.\"       checked={checked1 && checked2}       indeterminate={checked1 !== checked2}       onChange={handleAggregateChange}     />     <Checkbox       label=\"Checkbox 1\"       checked={checked1}       onChange={() => {         setChecked1(!setChecked1);       }}     />     <Checkbox       label=\"Checkbox 2\"       checked={checked2}       onChange={() => {         setChecked2(!setChecked2);       }}     />   </Box> );`\n\n## Disabled ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n`Checkbox` can be `disabled`. This prevents changes.\n\n`<Checkbox   label=\"This Checkbox is disabled.\"   defaultChecked   disabled /> <Checkbox   disabled   invalid   label=\"This invalid Checkbox is disabled.\" />`\n\n## Invalid ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can mark a `Checkbox` component as `invalid`. This is a styling-only prop, useful in form validation. It won’t prevent form submission.\n\n`<Checkbox label=\"This Checkbox is in an invalid state.\" invalid />`\n\n## State management![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the `Checkbox` component as an [uncontrolled input](https://docs.stripe.com/stripe-apps/how-ui-extensions-work#use-uncontrolled-components-for-interactions):\n\n`<Checkbox   onChange={(e) => {     console.log(e.target.checked);   }}   defaultChecked   label=\"This Checkbox is uncontrolled.\" />`",
    "title": "Checkbox | Stripe Documentation",
    "description": "Use checkboxes to indicate or control boolean values.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/atlas/business-taxes?business-type=llc",
    "markdown": "# Business taxes | Stripe DocumentationThe Stripe Docs logo\n\n## Learn everything you need to know about business taxes.\n\nCompanies formed in Delaware are subject to yearly tax obligations, including:\n\n*   US federal and state corporate income tax as applicable.\n*   Delaware franchise tax (for C Corporations) or annual LLC tax (for Limited Liability Companies).\n*   A similar annual tax if your Delaware company also operates in other US states.\n\nStripe’s partners can assist you in meeting tax requirements for states outside Delaware. Make sure to watch the calendar, and plan ahead to meet any tax deadlines that apply to your business.\n\n#### Tax and accounting advice\n\nStripe isn’t an accounting firm and can’t provide tax or accounting advice. Consult legal and tax professionals for advice on how to meet ongoing obligations that apply to your company. Before you get started, you might want to review the Stripe Atlas guide on [business taxes](https://stripe.com/atlas/guides/business-taxes).\n\n## File US Income Tax ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhat information you need to prepare depends on whether you’re forming a [C Corporation](https://docs.stripe.com/atlas/company-types?business-type=ccorp) or [LLC](https://docs.stripe.com/atlas/company-types?business-type=llc). Before working with an accountant and filing taxes, prepare as much of your company’s year-end financial data as possible. This is part of your [bookkeeping](https://stripe.com/atlas/guides/bookkeeping-and-accounting#what-is-bookkeeping-what-is-accounting) responsibilities. You can use tools like [Bench](https://bench.co/partner/stripe-atlas/?utm_campaign=support) or [Pilot](https://pilot.com/) to help you with this process.\n\nBe sure to have the following information for your LLC (as of the last day of the fiscal year that you’re filing for):\n\n*   **General business information**: This includes your EIN.\n    \n*   **Company financials**: You can learn about year-end financial reports in our [guide to tax season](https://stripe.com/atlas/guides/tax-season#before-you-speak-to-an-accountant).\n    \n*   **Company ownership**: Your LLC might have multiple owners (“members”). Make sure the information reflects the current ownership.\n    \n*   **Additional information**: If your company employs people, owns property, operates locally in the US, or operates abroad, you might have additional tax and reporting requirements. Some of the taxes you might want to ask your accountant about include:\n    \n    *   Transfer pricing (if you’re based outside the US).\n    *   State taxes (if you have business activity in any US state).\n    *   Sales taxes.\n    *   Employment taxes.\n\nIf you’re still waiting for your EIN, you can enter **Applied For** and the application date (which you can find on your Form SS-4 in the Dashboard) in your tax forms.\n\n## Tax partners ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nEach US business is required to pay income taxes. We’ve partnered with tax and accounting advisors who specialize in working with startups to provide you affordable options for filing your corporate income taxes. Top startups use these services and they offer discounts for Stripe Atlas users. Each service specializes in a different area—choose the one that’s right for your company.\n\n1.  [Mosey](https://mosey.com/stripe-atlas/) is best for startups that want ongoing help with registration and compliance filings in multiple states without federal tax prep or bookkeeping.\n2.  [Bench](https://bench.co/partner/stripe-atlas/?utm_campaign=support) is best for pre-revenue startups or small startups who want recurring tax or bookkeeping services for state and federal taxes.\n3.  [Pilot](https://pilot.com/partner/atlas?utm_medium=web&utm_source=partner&utm_campaign=atlas_referrals) is best for startups planning to raise funding, who want recurring tax and bookkeeping services for state and federal taxes.\n4.  [Cleer](https://www.cleer.tax/partner/atlas) is best for startups that want one-time assistance with federal and state tax prep.\n\n## File taxes in Delaware ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour company’s tax and reporting obligations in Delaware depend on whether you’re forming a [C Corporation](https://docs.stripe.com/atlas/company-types?business-type=ccorp) or an [LLC](https://docs.stripe.com/atlas/company-types?business-type=llc).\n\nDelaware LLCs pay an annual LLC tax, sometimes referred to as the Business Entity Tax. If you want to hire a tax professional to complete this, you can work with one of our [tax partners](https://docs.stripe.com/atlas/business-taxes#tax-partners) or a tax advisor of your own choosing.\n\n### Annual LLC tax ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAll LLCs formed or registered in Delaware must pay an annual LLC tax, currently at a flat rate of 300 USD. There’s no requirement to file an annual report. If the annual LLC tax isn’t submitted by June 1, there is a 200 USD penalty and interest of 1.5% per month on the tax amount (and penalty) originally due.\n\n#### Pay the annual Delaware LLC tax ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can save your work and return to it later, just make sure to save your session number, which the Delaware portal gives you the option of sending to an email address for easier access.\n\n1.  Login to [the state of Delaware’s website](https://icis.corp.delaware.gov/ecorp/logintax.aspx?FilingType=FranchiseTax) with your seven digit Delaware Business Entity File Number.\n    *   You can easily find your company’s file number in two ways:\n        1.  Use [Delaware’s entity search tool](https://icis.corp.delaware.gov/ecorp/EntitySearch/NameSearch.aspx) with your company’s legal name.\n        2.  Find the State of Delaware stamp on page 2 of your **Filed Certificate of Incorporation**, accessible in your [Dashboard](https://dashboard.stripe.com/atlas/company).\n2.  Click the green **Pay taxes** button. You should see a flat 300 USD fee for LLC.\n    *   You can pay your Delaware LLC tax fee either by credit card or ACH. After inputting your payment information, push the green **Submit** button to finalize your Delaware state taxes.\n\n## State taxes beyond Delaware ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf your company operates in any US states other than Delaware, it might be subject to annual taxation, registration, and reporting requirements in the other states. Stripe recommends that you consult legal and tax professionals about what requirements apply to your business.\n\n## 2024 key tax season dates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPlan ahead to meet any tax deadlines that apply to your business. Refer to the following information if your company was active in 2023.\n\n*   March 15, 2024: [US LLC partnership income tax](https://docs.stripe.com/atlas/business-taxes?business-type=llc) due, or due date to submit an extension to file taxes later in the year.\n*   April 15, 2024: US individual income tax due date.\n*   June 1, 2024: [Delaware annual LLC tax](https://docs.stripe.com/atlas/business-taxes?business-type=llc#annual-llc-tax) due.\n*   September 16, 2024: If you filed for an extension, this is the due date for filing [US LLC partnership income tax](https://docs.stripe.com/atlas/business-taxes?business-type=llc).\n\nAlso, if your US company has employees or makes payments to US vendors, you might be required to file a US W-2 or 1099 form by January 31, 2024.\n\n### Dissolve your company ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you aren’t operating your company anymore, you might still be obligated to file taxes every year until you dissolve it. When you dissolve a company, you might have tax filings and obligations for the year that you dissolve the company. You can work with our tax partners to figure out what your obligations are.\n\nC Corporations can be dissolved in the state of Delaware only after they pay Delaware franchise tax and file their annual report. LLCs can be dissolved only after they pay annual LLC tax (no annual report is required).\n\nYou can start the process of dissolving your company from the [Company tab](https://dashboard.stripe.com/atlas/company) of your Atlas Dashboard. You should consider working with a lawyer to ensure full dissolution of your company.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Tax season guide](https://stripe.com/atlas/guides/tax-season)\n*   [Business taxes guide](https://stripe.com/atlas/guides/business-taxes)\n*   [Bookkeeping and accounting guide](https://stripe.com/guides/atlas/bookkeeping-and-accounting)\n*   [State of Delaware’s tax FAQ](https://corp.delaware.gov/taxfaq/)",
    "title": "Business taxes | Stripe Documentation",
    "description": "Learn everything you need to know about business taxes.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/components/box",
    "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n`alignSelfX`\n\nOptional\n\n`(\"start\" | \"center\" | \"end\" | \"stretch\") | undefined`\n\nHorizontal alignment. See [Layout properties](https://docs.stripe.com/stripe-apps/style#layout-properties) for details.\n\n`alignSelfY`\n\nOptional\n\n`(\"top\" | \"center\" | \"baseline\" | \"bottom\" | \"stretch\") | undefined`\n\nVertical alignment. See [Layout properties](https://docs.stripe.com/stripe-apps/style#layout-properties) for details.\n\n`alignX`\n\nOptional\n\n`(\"start\" | \"center\" | \"end\" | \"stretch\") | undefined`\n\nHorizontal alignment. See [Layout properties](https://docs.stripe.com/stripe-apps/style#layout-properties) for details.\n\n`alignY`\n\nOptional\n\n`(\"top\" | \"center\" | \"baseline\" | \"bottom\" | \"stretch\") | undefined`\n\nVertical alignment. See [Layout properties](https://docs.stripe.com/stripe-apps/style#layout-properties) for details.\n\n`backgroundColor`\n\nOptional\n\n`(\"container\" | \"surface\") | undefined`\n\n`bleed`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`bleedBottom`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`bleedLeft`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`bleedRight`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`bleedTop`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`bleedX`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`bleedY`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`borderBottomLeftRadius`\n\nOptional\n\n`(\"none\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"rounded\") | undefined`\n\n`borderBottomRightRadius`\n\nOptional\n\n`(\"none\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"rounded\") | undefined`\n\n`borderRadius`\n\nOptional\n\n`(\"none\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"rounded\") | undefined`\n\n`borderTopLeftRadius`\n\nOptional\n\n`(\"none\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"rounded\") | undefined`\n\n`borderTopRightRadius`\n\nOptional\n\n`(\"none\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"rounded\") | undefined`\n\n`bottom`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`boxShadow`\n\nOptional\n\n`(\"none\" | \"base\" | \"top\" | \"hover\" | \"focus\") | undefined`\n\n`color`\n\nOptional\n\n`(\"brand\" | \"primary\" | \"secondary\" | \"disabled\" | \"info\" | \"success\" | \"attention\" | \"critical\") | undefined`\n\n`columnGap`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`display`\n\nOptional\n\n`\"grid\" | undefined`\n\n`distribute`\n\nOptional\n\n`(\"packed\" | \"space-between\") | undefined`\n\n`fill`\n\nOptional\n\n`(\"brand\" | \"primary\" | \"secondary\" | \"disabled\" | \"info\" | \"success\" | \"attention\" | \"critical\") | undefined`\n\n`focusRing`\n\nOptional\n\n`(\"none\" | \"base\" | \"top\" | \"hover\" | \"focus\") | undefined`\n\n`font`\n\nOptional\n\n`(\"body\" | \"bodyEmphasized\" | \"caption\" | \"heading\" | \"kicker\" | \"lead\" | \"subheading\" | \"subtitle\" | \"title\") | undefined`\n\n`fontFamily`\n\nOptional\n\n`(\"monospace\" | \"ui\") | undefined`\n\n`fontWeight`\n\nOptional\n\n`(\"regular\" | \"semibold\" | \"bold\") | undefined`\n\n`gap`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`gapX`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`gapY`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`gridColumns`\n\nOptional\n\n`number | undefined`\n\n`height`\n\nOptional\n\n[fractional sizing token](https://docs.stripe.com/stripe-apps/style#sizing)\n\nThe height of the component. See [Sizing](https://docs.stripe.com/stripe-apps/style#sizing) for details.\n\n`inset`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`keyline`\n\nOptional\n\n`(\"neutral\" | \"critical\") | undefined`\n\n`left`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`margin`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`marginBottom`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`marginLeft`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`marginRight`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`marginTop`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`marginX`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`marginY`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`maxHeight`\n\nOptional\n\n[fractional sizing token](https://docs.stripe.com/stripe-apps/style#sizing)\n\nThe height of the component. See [Sizing](https://docs.stripe.com/stripe-apps/style#sizing) for details.\n\n`maxWidth`\n\nOptional\n\n[fractional sizing token](https://docs.stripe.com/stripe-apps/style#sizing)\n\nThe width of the component. See [Sizing](https://docs.stripe.com/stripe-apps/style#sizing) for details.\n\n`minHeight`\n\nOptional\n\n[fractional sizing token](https://docs.stripe.com/stripe-apps/style#sizing)\n\nThe height of the component. See [Sizing](https://docs.stripe.com/stripe-apps/style#sizing) for details.\n\n`minTileWidth`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`minWidth`\n\nOptional\n\n[fractional sizing token](https://docs.stripe.com/stripe-apps/style#sizing)\n\nThe width of the component. See [Sizing](https://docs.stripe.com/stripe-apps/style#sizing) for details.\n\n`overflow`\n\nOptional\n\n`(\"visible\" | \"hidden\" | \"clip\" | \"scroll\" | \"auto\") | undefined`\n\n`overflowWrap`\n\nOptional\n\n`(\"break-word\" | \"normal\") | undefined`\n\n`overflowX`\n\nOptional\n\n`(\"visible\" | \"hidden\" | \"clip\" | \"scroll\" | \"auto\") | undefined`\n\n`overflowY`\n\nOptional\n\n`(\"visible\" | \"hidden\" | \"clip\" | \"scroll\" | \"auto\") | undefined`\n\n`padding`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`paddingBottom`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`paddingLeft`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`paddingRight`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`paddingTop`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`paddingX`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`paddingY`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`rowGap`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`stack`\n\nOptional\n\n`(\"x\" | \"y\" | \"z\") | undefined`\n\n`textAlign`\n\nOptional\n\n`(\"center\" | \"end\" | \"justify\" | \"left\" | \"match-parent\" | \"right\" | \"start\") | undefined`\n\n`textOverflow`\n\nOptional\n\n`\"ellipsis\" | undefined`\n\n`textTransform`\n\nOptional\n\n`(\"capitalize\" | \"uppercase\" | \"lowercase\" | \"none\" | \"full-width\" | \"full-size-kana\") | undefined`\n\n`top`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`topShadow`\n\nOptional\n\n`(\"none\" | \"base\" | \"top\" | \"hover\" | \"focus\") | undefined`\n\n`whiteSpace`\n\nOptional\n\n`(\"normal\" | \"nowrap\" | \"pre\" | \"pre-wrap\" | \"pre-line\" | \"break-spaces\") | undefined`\n\n`width`\n\nOptional\n\n[fractional sizing token](https://docs.stripe.com/stripe-apps/style#sizing)\n\nThe width of the component. See [Sizing](https://docs.stripe.com/stripe-apps/style#sizing) for details.\n\n`wordBreak`\n\nOptional\n\n`(\"normal\" | \"break-all\" | \"keep-all\" | \"break-word\") | undefined`\n\n`wordWrap`\n\nOptional\n\n`(\"break-word\" | \"normal\") | undefined`\n\n`wrap`\n\nOptional\n\n`(\"wrap\" | \"nowrap\" | \"wrap-reverse\") | undefined`\n\n`zIndex`\n\nOptional\n\n`(\"overlay\" | \"partial\") | undefined`\n\n`background`\n\nOptionalDeprecated\n\nUse the `backgroundColor` property instead.\n\n`(\"container\" | \"surface\") | undefined`\n\n`borderBottomColor`\n\nOptionalDeprecated\n\nUse the `keyline` property instead.\n\n`(\"neutral\" | \"critical\") | undefined`\n\n`borderColor`\n\nOptionalDeprecated\n\nUse the `keyline` property instead.\n\n`(\"neutral\" | \"critical\") | undefined`\n\n`borderLeftColor`\n\nOptionalDeprecated\n\nUse the `keyline` property instead.\n\n`(\"neutral\" | \"critical\") | undefined`\n\n`borderRightColor`\n\nOptionalDeprecated\n\nUse the `keyline` property instead.\n\n`(\"neutral\" | \"critical\") | undefined`\n\n`borderTopColor`\n\nOptionalDeprecated\n\nUse the `keyline` property instead.\n\n`(\"neutral\" | \"critical\") | undefined`\n\n`isolatedDependencies`\n\nOptionalDeprecated\n\n`string[] | undefined`\n\n`layout`\n\nOptionalDeprecated\n\nUse the `stack` property instead.\n\n`(\"column\" | \"inline\" | \"row\" | \"inline-column\" | \"inline-row\") | undefined`\n\n`when`\n\nOptionalDeprecated\n\nUse nested styles instead.\n\n`(string | { pointer: \"none\" | \"coarse\" | \"fine\"; colorScheme: \"dark\" | \"light\"; motion: \"supported\" | \"reduced\"; hover: \"none\" | \"hover\"; viewportWidth: \"small\" | \"medium\" | \"large\" | \"xlarge\"; contrast: \"more\" | \"less\"; }[] | { pointer: \"none\" | \"coarse\" | \"fine\"; colorScheme: \"dark\" | \"light\"; motion: \"supported\" | \"reduced\"; hover: \"none\" | \"hover\"; viewportWidth: \"small\" | \"medium\" | \"large\" | \"xlarge\"; contrast: \"more\" | \"less\"; }) | undefined`",
    "title": "Box | Stripe Documentation",
    "description": "Use boxes to wrap other components and add custom styles and layouts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/atlas/company-types?business-type=ccorp",
    "markdown": "# Company types | Stripe DocumentationThe Stripe Docs logo\n\n## Form a C Corporation or an LLC using Stripe Atlas.\n\nStripe Atlas supports two options for forming a US company in Delaware: C Corporations and Limited Liability Companies (LLC).\n\nWith Stripe Atlas, you can form a new C Corporation or a subsidiary of an existing corporation. The following list contains some of the characteristics of a C Corporation:\n\n*   **Defined governance structure**: A C Corporation has a well-known, regulated, management structure.\n*   **Ownership**: A C Corporation’s structure facilitates granting equity to employees, advisors, and investors.\n*   **Raising outside funding**: A Delaware C Corporation is the entity generally preferred by outside institutional investors who might be unable to invest in LLCs.\n*   **Tax treatment**: A C Corporation with early startup losses can generally use the losses in future years, subject to various limitations, to reduce future taxable income when the company becomes profitable.\n\n## When to form your company ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you plan to form your company near the end of the calendar year, it can make sense to wait until the start of the new year to form your company because of the tax implications. C Corporations active in Delaware any time before December 31 owe at least the minimum Delaware franchise tax for that year. LLCs active before December 31 owe the full annual LLC tax for that year.\n\nNeither the franchise tax nor the LLC tax is prorated. Your company might also owe US federal corporate income tax for the outgoing year. It might also owe taxes to a US state other than Delaware, depending on where the LLC operates.",
    "title": "Company types | Stripe Documentation",
    "description": "Form a C Corporation or an LLC using Stripe Atlas.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-apps/style",
    "markdown": "# Style your app | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to style UI components in your app.\n\nYou can style a Stripe App using design tokens that we provide. This helps you match the Dashboard visually, provide consistency, and maintain a high quality bar.\n\n*   The `Box` and `Inline` components support [custom styles](#custom-styles).\n*   Other components have [preset styles](#preset-styles) which you can sometimes adjust.\n\n## Custom styles![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [Box](https://docs.stripe.com/stripe-apps/components/box) and [Inline](https://docs.stripe.com/stripe-apps/components/inline) components support custom styles. `Box` and `Inline` are styleable containers like HTML `div` and `span`. To style them, use their `css` prop. They use CSS syntax, with a few differences from vanilla CSS.\n\n`<Box   css={{     padding: 'xxlarge',     color: 'secondary',     backgroundColor: 'container',     borderRadius: 'small',   }} >   This is a box. </Box>`\n\nUnlike in vanilla CSS, you can’t choose arbitrary font faces and styles. Use the `font` and `fontWeight` properties. For more information, see [Typography](#typograpphy).\n\n`<Inline css={{font: 'body', color: 'primary', fontWeight: 'semibold'}}>   This text is emphasized </Inline>`\n\nLayout also works differently than it does in vanilla CSS. Instead, Stripe Apps use the same layout system Stripe uses internally. For more information, see [Layout](#layout).\n\n`<Box   css={{     stack: 'x',     gap: 'medium',   }} >   <Box css={{width: '1/4', padding: 'medium', keyline: 'neutral'}} />   <Box css={{width: '3/4', padding: 'medium', keyline: 'neutral'}} /> </Box>`\n\nAll styling tokens are exposed through TypeScript, which means you’ll get a dropdown in your editor to autocomplete from the available values.\n\n## Color![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSet colors in your custom styles by using the following values.\n\n### Backgrounds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo set the background color of a [Box](https://docs.stripe.com/stripe-apps/components/box) or [Inline](https://docs.stripe.com/stripe-apps/components/inline) component, use the CSS `backgroundColor` property:\n\n`<Box css={{ backgroundColor: 'container' }}>   Box with a darker background. </Box>`\n\nUse the following tokens as values for `backgroundColor`:\n\n| Example | Token | Usage |\n| --- | --- | --- |\n|     | `surface` | Used for the background of apps |\n|     | `container` | Used for cards and sections within an app |\n\n### Borders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo add a border to a [Box](https://docs.stripe.com/stripe-apps/components/box) or [Inline](https://docs.stripe.com/stripe-apps/components/inline) component, use the CSS `keyline` property:\n\n`<Box css={{ keyline: 'neutral' }}>   Box with a neutral border. </Box>`\n\nUse the following tokens as values for `keyline`:\n\n| Example | Token | Usage |\n| --- | --- | --- |\n|     | `neutral` | The default color for all borders and dividers |\n|     | `critical` | Used for content which is critically urgent to the user |\n\n### Text & icons![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo set a color for all text or icons in a [Box](https://docs.stripe.com/stripe-apps/components/box) or [Inline](https://docs.stripe.com/stripe-apps/components/inline) component, use the CSS `color` property:\n\n`<Box css={{ color: 'success' }}>   Box with green text. </Box>`\n\nFor an icon that contrasts with the other children of its container, use `fill`. Otherwise, icons match the text around them.\n\n`<Box css={{ color: 'primary' }}>   <Icon css={{ fill: 'success' }}/>   Box with normal text and a green icon. </Box>`\n\nUse the following tokens as values for `color` and `fill`:\n\n| Example | Token | Usage |\n| --- | --- | --- |\n|     | `primary` | The default color for text and icons |\n|     | `secondary` | Used to for text and icons which are less prominent |\n|     | `disabled` | Used for elements which are disabled |\n|     | `info` | Used for content that is neutral and informational |\n|     | `success` | Used for content which indicates the success of some action |\n|     | `attention` | Used for content which is should grab the user’s attention |\n|     | `critical` | Used for content which is critically urgent to the user. Should be used sparingly. |\n\n## Typography![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo change the style of text in a [Box](https://docs.stripe.com/stripe-apps/components/box) or [Inline](https://docs.stripe.com/stripe-apps/components/inline) component, use the custom `font` property:\n\n`<Inline css={{font: 'heading'}}>Heading</Inline>`\n\nThe following styles are available:\n\n| Token | Usage | Example |\n| --- | --- | --- |\n| heading | Used for labeling a section of your app | The quick brown fox jumps over the lazy dog. |\n| subheading | Used for labeling content within a section of your app | The quick brown fox jumps over the lazy dog. |\n| body | Primary body text of the app | The quick brown fox jumps over the lazy dog. |\n| caption | Used for text that should be less prominent than body text | The quick brown fox jumps over the lazy dog. |\n\n### Text overflow and wrapping![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo change how overflow text is handled in a [Box](https://docs.stripe.com/stripe-apps/components/box) component, use the `textOverflow`, `overflow`, `whiteSpace`, and `overflowWrap` properties:\n\n`<Box css={{textOverflow: 'ellipsis', overflow: 'hidden', overflowWrap: 'normal'}}>   Box where long text is cut off with an ellipsis </Box>`\n\n| CSS | Usage | Example |\n| --- | --- | --- |\n| {textOverflow: 'ellipsis', overflow: 'hidden', overflowWrap: 'normal'} | Used for adding an ellipsis (...) to text that overflows the available space | SupercalifragilisticexpialidociousSupercalifragilisticexpialidociousSupercalifragilisticexpialidocious |\n| {overflowWrap: 'break-word'} | Used for breaking up long words | SupercalifragilisticexpialidociousSupercalifragilisticexpialidocious |\n| {whiteSpace: 'nowrap'} | Used to prevent lines from wrapping | This text is too long for the container. |\n\nFor for more overflow and text wrapping scenarios, see [Wrapping and Breaking Text](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Text/Wrapping_Text).\n\n### Text transformation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can transform text in a [Box](https://docs.stripe.com/stripe-apps/components/box) or [Inline](https://docs.stripe.com/stripe-apps/components/inline) component using the `textTransform` property:\n\n`<Box css={{textTransform: 'uppercase'}}>   Box where all text appears uppercase </Box>`\n\nHere are some common values that can be used for the `textTransform` property:\n\n| Token | Usage | Before | After |\n| --- | --- | --- | --- |\n| capitalize | Used to convert the first letter of each word to uppercase | Lorem ipsum dolor sit amet | Lorem ipsum dolor sit amet |\n| uppercase | Used to convert all letters to uppercase | Lorem ipsum dolor sit amet | Lorem ipsum dolor sit amet |\n| lowercase | Used to convert all letters to lowercase | Lorem ipsum dolor sit amet | Lorem ipsum dolor sit amet |\n| none | Used to prevent the case of letters from being changed | loREM iPSUm DOLor SIt AMet | loREM iPSUm DOLor SIt AMet |\n\nSee [text-transform](https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform) for the full list.\n\n### Text alignment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can change the alignment of text in a [Box](https://docs.stripe.com/stripe-apps/components/box) component using the `textAlign` property:\n\n`<Box css={{textAlign: 'center'}}>   Box where text is centered </Box>`\n\nUse the following token values for `textAlign`:\n\n| Token | Usage | Example |\n| --- | --- | --- |\n| left | Used to algin text to the left | This text is left aligned |\n| right | Used to align text to the right | This text is right aligned |\n| start | Used align text to the start direction | This text is start aligned |\n| end | Used to align text to the end direction | This text is end aligned |\n| center | Used to center text | This text is centered |\n| justify | Used to justify text | This is some text that is justified |\n\n## Layout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Stripe Apps layout styling API allows you to write styles that can take advantage of our design tokens and includes other improvements over vanilla CSS. Use these tokens in a [Box](https://docs.stripe.com/stripe-apps/components/box) component to control layout for its children. Other containers, like [List](https://docs.stripe.com/stripe-apps/components/list), handle layout automatically.\n\nWe conceptualize layouts as “stacks.”\n\n### Horizontal stacks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo stack elements horizontally and match widths:\n\n`<Box   css={{     stack: 'x',     gap: 'medium',     alignX: 'stretch', // This is the default and can be omitted   }} >`\n\nTo stack elements horizontally with fractional widths:\n\n`<Box   css={{     stack: 'x',     gap: 'medium',   }} >   <Box css={{width: '1/4', padding: 'medium', keyline: 'neutral'}} />   <Box css={{width: '3/4', padding: 'medium', keyline: 'neutral'}} /> </Box>`\n\nTo stack elements horizontally with a fractional width for one element and the rest of the elements stretched:\n\n`<Box   css={{     stack: 'x',     gap: 'medium',   }} >   <Box css={{padding: 'medium', keyline: 'neutral'}} />   <Box css={{width: '1/4', padding: 'medium', keyline: 'neutral'}} />   <Box css={{padding: 'medium', keyline: 'neutral'}} /> </Box>`\n\nTo align elements to the start with a gap:\n\n`<Box   css={{     stack: 'x',     gap: 'medium',     alignX: 'start',   }} >`\n\nTo distribute elements:\n\n`<Box   css={{     stack: 'x',     distribute: 'space-between',   }} >`\n\nTo align elements to the end with a gap:\n\n`<Box   css={{     stack: 'x',     gap: 'medium',     alignX: 'end',   }} >`\n\nTo vertically align elements to the bottom:\n\n`<Box   css={{     stack: 'x',     gap: 'medium',     alignX: 'start',     alignY: 'bottom',   }} >`\n\nTo include dividers between elements:\n\n`<Box   css={{     stack: 'x',     gap: 'small',     alignX: 'start',   }} >   <Box css={{padding: 'medium', keyline: 'neutral'}} />   <Divider />   <Box css={{padding: 'medium', keyline: 'neutral'}} />   <Divider />   <Box css={{padding: 'medium', keyline: 'neutral'}} /> </Box>`\n\nTo wrap items into rows:\n\n`<Box   css={{     stack: 'x',     gap: 'medium',     wrap: 'wrap',     alignX: 'start',   }} >`\n\nTo have a different horizontal and vertical gap:\n\n`<Box   css={{     stack: 'x',     gapX: 'small',     gapY: 'large',     wrap: 'wrap',     alignX: 'start',   }} >`\n\nTo center elements horizontally while wrapping:\n\n`<Box   css={{     stack: 'x',     gap: 'medium',     wrap: 'wrap',     alignX: 'center',   }} >`\n\nTo center elements vertically while wrapping:\n\n`<Box   css={{     stack: 'x',     gap: 'medium',     wrap: 'wrap',     alignX: 'start',     alignY: 'center',   }} >`\n\n### Vertical stacks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo stack elements vertically and match widths:\n\n`<Box   css={{     stack: 'y',     gap: 'medium',   }} >`\n\nTo stack elements vertically while centering horizontally:\n\n`<Box   css={{     stack: 'y',     gap: 'medium',     alignX: 'center',   }} >   <Box css={{width: '1/4', padding: 'medium', keyline: 'neutral'}} />   <Box css={{width: '2/3', padding: 'medium', keyline: 'neutral'}} />   <Box css={{width: '1/3', padding: 'medium', keyline: 'neutral'}} /> </Box>`\n\n### Layered stacks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo display elements atop one another:\n\n`<Box   css={{     stack: 'z',     alignX: 'center',     alignY: 'center',   }} >   <Box css={{padding: 'xxlarge', keyline: 'neutral'}} />   <Box css={{padding: 'large', keyline: 'neutral'}} />   <Box css={{padding: 'small', keyline: 'neutral'}} /> </Box>`\n\n### Layout properties![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Values |\n| --- | --- |\n| `alignX` | `'start' \\| 'center' \\| 'end' \\| 'stretch'` |\n| `alignY` | `'top' \\| 'center' \\| 'baseline' \\| 'bottom' \\| 'stretch'` |\n| `distribute` | `'space-between' \\| 'packed'` |\n| `gap` | See [Spacing](#spacing) |\n| `overflowX \\| overflowY` | `'visible' \\| 'hidden' \\| 'scroll' \\| 'auto'` |\n| `stack` | `'x' \\| 'y' \\| 'z'` |\n| `wrap` | `'wrap'` |\n\n## Spacing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can specify margins, padding, and layout gaps using the values listed below.\n\n`<Box css={{margin: 'small'}} />`\n\n| Token | Value |\n| --- | --- |\n| `0` | 0px |\n| `xxsmall` | 2px |\n| `xsmall` | 4px |\n| `small` | 8px |\n| `medium` | 16px |\n| `large` | 24px |\n| `xlarge` | 32px |\n| `xxlarge` | 48px |\n\n## Sizing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can specify width and height using fractions or content-based sizing tokens.\n\n`<Box css={{width: '1/2'}} />`\n\n### Fractional sizing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe available fractions include halves, thirds, quarters, fifths, sixths and, twelfths. The `fill` token enables a component to match the size of its container.\n\n| Token | Value |\n| --- | --- |\n| `0` | 0px |\n| `1/2` | 50% |\n| `1/3`, `2/3` | 33.333333%, 66.666667% |\n| `1/4`, `2/4`, `3/4`, | 25%, 50%, 75% |\n| `1/5`, `2/5`, `3/5`, `4/5` | 20%, 40%, 60%, 80% |\n| `1/6`, `2/6`, `3/6`, `4/6`, `5/6` | 16.666667%, 33.333333%, 50%, 66.666667%, 83.333333% |\n| `1/12`, `2/12`, `3/12`, `4/12`, `5/12`, `6/12`, `7/12`, `8/12`, `9/12`, `10/12`, `11/12` | 8.333333%, 16.666667%, 25%, 33.333333%, 41.666667%, 50%, 58.333333%, 66.666667%, 75%, 83.333333%, 91.666667% |\n| `fill` | 100% |\n\n### Content-based sizing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can size a `Box` relative to the content within it.\n\n| Token | Usage |\n| --- | --- |\n| `min` | Content inside the component takes all wrapping opportunities, becoming as small as the longest contents. |\n| `max` | Represents the maximum possible width of the content. When applied to text, the text won’t wrap, even if it causes the text to extend outside the bounds of its container. |\n| `fit` | Fills the available space, but only up to the maximum size of the content. |\n\n## Preset styles![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nComponents other than `Box` and `Inline` have preset styles, which helps maintain consistency. You can sometimes control or override the presets in a specific way.\n\n### Automatic styling![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSome components style themselves automatically. For example, [Chips](https://docs.stripe.com/stripe-apps/components/chip) automatically change their appearance depending on what callbacks they implement. This helps the user understand their behavior. To avoid confusion, you can’t override these details.\n\n`<ChipList>   <Chip     label=\"Currency\"     value=\"USD\"     onDropdown={() => {       alert('Dropdown function triggered');     }}     onClose={() => {       alert('Close function triggered');     }}   />   <Chip     label=\"Status\"     value=\"Succeeded\"     onDropdown={() => {       alert('Dropdown function triggered');     }}     onClose={() => {       alert('Close function triggered');     }}   />   <Chip     label=\"Amount\"     onAddSuggestion={() => {       alert('Add Amount suggestion');     }}   />   <Chip     label=\"Date\"     onAddSuggestion={() => {       alert('Add Date suggestion');     }}   /> </ChipList>`\n\n### Several presets![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSome components, like [Buttons](https://docs.stripe.com/stripe-apps/components/button), have a few styles you can select using a prop. See the documentation for each component for details.\n\n`<Button type=\"primary\">Primary</Button> <Button>Secondary</Button> <Button type=\"destructive\">Destructive</Button>`\n\n### Limited CSS![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSome components support specific CSS properties. For example, [Icons](https://docs.stripe.com/stripe-apps/components/icon) support color using the `fill` property. See the documentation for each component for details.\n\n`<Icon name=\"cancelCircle\" css={{fill: 'critical'}} />`",
    "title": "Style your app | Stripe Documentation",
    "description": "Learn how to style UI components in your app.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/disputes/best-practices",
    "markdown": "# Dispute response best practices | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to format the most convincing evidence to challenge a dispute.\n\nWhen an account owner disputes a payment with their bank, they must provide evidence to support their claim. In many cases, the bank’s goal is to protect their customer from having to pay for something they didn’t authorize or feel was misrepresented or damaged.\n\nAs the seller, you have the right to counter the account owner’s claim and provide evidence that supports your case. While Stripe doesn’t influence the ultimate outcome of the bank’s decision, our goal is to help you defend the dispute. We base the best practices that we provide here on our deep exposure to dispute resolution.\n\n## Likelihood of winning disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour chances of overturning a dispute vary significantly based on several factors, including:\n\n*   The type of dispute\n*   The strength of the evidence you submit\n*   The type of payment (debit, credit, digital wallet, and so on)\n*   The type of purchase (online, in-person, physical product, service, and so on)\n\nStripe’s [Radar for Fraud Teams](https://stripe.com/radar/fraud-teams) uses Radar’s machine learning (ML) models to estimate your chances of winning a dispute. It gives you a prediction score in the dispute details page of your Dashboard, so you can prioritize disputes.\n\nIf you’re enrolled in Radar, but don’t see a win likelihood prediction next to a dispute, it’s likely one of the following reasons:\n\n*   The payment wasn’t made with a credit card\n*   The payment has only received an [inquiry](https://docs.stripe.com/disputes/how-disputes-work#inquiries), not an actual dispute\n*   An error prevented us from generating a prediction (this is rare)\n\nThe prediction score ranks your likelihood of winning a dispute that you’ve submitted relevant evidence for from lowest (one dot) to highest (five dots). The following table shows the expected win percentage for each ranking. Even in the most favorable cases, it’s very difficult to overturn a disputed payment.\n\n| Dispute Win Likelihood Ranking | Chance of Winning the Dispute |\n| --- | --- |\n| 5 dots | 60% |\n| 4 dots | 40% |\n| 3 dots | 25% |\n| 2 dots | 15% |\n| 1 dot | 5%  |\n\n## Keep your evidence relevant to the dispute reason and to the point![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCard issuers review thousands of dispute responses every day. Writing a long explanation to them isn’t going to make your responses more convincing. Similarly, providing evidence about your clearly stated return policy isn’t relevant for a dispute claiming that the customer never received the product. Instead, describe clearly and concisely why the claim is unreasonable and how your evidence proves that, using a neutral and professional tone. For example:\n\n> Jenny Rosen purchased \\[product\\] from our company on \\[date\\] using a Visa credit card. We shipped the product on \\[date\\] to the address provided by the customer, and it was delivered on \\[date\\], as shown in the tracking file provided, so the claim that the product was not received isn’t true.\n\nYou can investigate the dispute while collecting evidence. For example, you can review Google Maps and Street View to see where your delivery took place, or check social media to help establish the customer as the legitimate cardholder.\n\nMany businesses also include email correspondence or texts with their customer, but be aware that these exchanges don’t verify identity. If you include them, only include the relevant excerpts. For example, if you include a long email thread, redact any duplicated copy in the chain.\n\nKeep your evidence factual, professional, and concise. Providing too little evidence is a problem, but overwhelming the card issuer with unnecessary content can obscure your argument.\n\n## Limit evidence file length ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCard issuers manually review thousands of dispute responses daily and won’t comb through lengthy files to find the relevant argument for the network reason code.\n\nFor example, if the dispute network reason code indicates “Canceled Merchandise”, but the customer didn’t comply with your cancellation policy, don’t submit your entire Terms and Conditions agreement. Upload only the relevant cancellation policy section and use a callout or arrow to emphasize the details your customer violated.\n\n![Comparison of good and bad evidence file examples](https://b.stripecdn.com/docs-statics-srv/assets/best-practice-file-length.270360400d9d0c70979f5f5e916d043a.png)\n\n*   **Do:**\n    \n    *   Paste relevant excerpts from your terms into a single doc.\n    *   Outline or underline text specific to the dispute type.\n    \n*   **Don’t:**\n    \n    *   Upload your entire terms of service.\n    \n\nYou can also decrease file size by:\n\n*   Reducing font size\n*   Single spacing documents\n*   Shrinking images within PDFs\n\nThe following information is essential for file types:\n\n| Evidence type | Relevant data |\n| --- | --- |\n| Receipt | Date, currency, amount of disputed items |\n| Shipping documentation | Delivery date and full shipping address |\n| Cancellation policy or other Terms of service | Relevant subsections only |\n| Customer communication | Customer name and relevant message |\n\nFraudulent disputes account for over half of all disputes. It’s important to prove the legitimate cardholder was aware of and authorized the transaction in such cases. Any data that shows proof of this is a standard part of a compelling response, such as:\n\n*   AVS (Address Verification System) matches\n*   CVC (Card Verification Code) confirmations\n*   Signed receipts or contracts\n*   IP address that matches the cardholder’s verified billing address\n\nStripe always includes any AVS or CVC results along with the purchase IP address (if available from your Stripe integration). But if you have any other evidence of authorization (for example, 3DS authentication) include it too.\n\n## Include proof of service or delivery![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter fraudulent disputes, other high frequency dispute [reasons](https://docs.stripe.com/disputes/categories) include claims from cardholders that products or services:\n\n*   Weren’t delivered\n*   Were defective or unsatisfactory\n*   Weren’t as described\n\nProvide proof of service or delivery to refute such claims.\n\nFor a merchandise purchase, provide proof of shipment and delivery that includes the full delivery address, not just the city and postal code verification.\n\nIf your customer provides a “Ship to” name that differs from their own (for example, a gift purchase), be prepared to provide documentation explaining why they’re different. While it’s common practice to purchase and ship to an address that doesn’t match the verified billing address for the card, this is an additional dispute risk.\n\nIf your business provides digital goods, include evidence such as an IP address or system log proving the customer downloaded the content or used your software or service.\n\n## Include a copy of your terms of service and refund policy![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen it comes to disputes, fine print matters. For returns or refunds, it’s critical to provide proof that your customer agreed to and understood your terms of service at checkout, or didn’t follow your policies. Include a clean screenshot of how you present your terms of service during checkout, with the relevant policy clearly emphasized.\n\nDon’t, however, include the text of your entire policy, because card issuers won’t read through it all to find the relevant copy.\n\n## Combine files of the same evidence type![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must specify an evidence type for each file you upload, and you can only submit one piece of evidence per type. For example, you can combine several items representing communication with your customer (email messages, text screenshots, phone transcripts, and so on) into a single file for the `Customer communication` evidence. This also decreases your overall file length.\n\n## Formatting documents and images to upload ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInclude large, clear images for review. Whether you upload files through the Dashboard or the API, both have limitations on the acceptable file types and the combined file size.\n\n*   Only PDF, JPEG, or PNG file types are accepted\n*   The combined file size can’t be more than 4.5MB\n*   The combined page count must be less than 50 pages\n*   You can compress your files with tools such as [Smallpdf](https://smallpdf.com/)\n\nWhen submitting documents or images as evidence, use the following recommendations to make sure they can remain legible:\n\n*   Use a 12 point font or larger\n*   Make sure that documents are US Letter or A4 size, in portrait orientation (you can still add screenshots to your documents in landscape orientation)\n*   Use bold text, callouts, or arrows to draw attention to pertinent information\n*   Avoid using color highlighting\n\nWhen uploading screenshots:\n\n*   Crop the screenshot to the area of interest and circle any key components (for example, delivery confirmation or signature)\n*   Use the text fields in the dispute evidence form to describe what the image contains and how it supports your response\n\nThe card issuer won’t review a response containing any illegible text or data.\n\n## Accepting disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can accept a dispute, effectively agreeing that the cardholder’s reason for the dispute is valid. Accepting a dispute isn’t considered an admission of wrongdoing and is sometimes the most appropriate response. The customer has already received their refund through the dispute process—–if you agree with the refund, it’s best to accept the dispute.\n\nTake this action if you don’t intend to respond and submit evidence. Although accepting disputes doesn’t negatively affect your business any further, it’s not a viable alternative to an effective refund or returns policy. Dispute activity is calculated based on the disputes received, not won or lost, so dispute prevention is critical.\n\n#### Note\n\nDisputes incur a dispute fee that still applies if you accept the dispute.\n\n## Misunderstandings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor disputes that are the result of a misunderstanding, your customer can tell their card issuer that they [no longer dispute the transaction](https://docs.stripe.com/disputes/withdrawing). We recommend you still submit evidence to show that the payment was valid and to make sure the card issuer knows you’re not accepting the dispute.\n\nIn cases where you agree that the customer should keep the disputed funds, accept the dispute rather than ask the cardholder to withdraw the dispute for a regular refund. Remember, the card networks don’t consider how many disputes you win or lose, only how many you receive—a withdrawn dispute still counts as a dispute.\n\n## Disputes on partially refunded payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhile uncommon, a customer can dispute a payment for the full amount even if they’ve already received a partial refund (for example, a refund of a smaller amount that has been agreed upon). We understand this is frustrating as it amounts to an over-refund of more than the original purchase. Always respond in such cases because card issuers are very willing to rectify this situation.\n\n#### Note\n\nBecause merchants can’t contest Cartes Bancaires disputes, you can’t ask the issuer to consider an existing partial refund when the full amount of a Cartes Bancaires payment is disputed.\n\nEven if you plan to accept the un-refunded portion of the dispute, it’s important to provide evidence of the partial refund in your response. Include the amount and date of the refund, and even a screenshot of the refund information from your Dashboard (this is known as a “credit issued” response).\n\nIn most cases, the card issuer cancels the original dispute and then creates a separate one for the corrected amount. On Stripe, we use the existing dispute to track the overall outcome. If the dispute is fully resolved in your favor, you receive the entire amount back. If it’s not, you only receive the partially refunded amount. In this case, the dispute’s `status` is set to `lost`.",
    "title": "Dispute response best practices | Stripe Documentation",
    "description": "Let Stripe's history and experience with dispute outcomes help you compile the most convincing set of evidence to counter a dispute, or choose not to.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/accounts/login_link/object",
    "markdown": "# The Login Link object | Stripe API Reference\n\n### Attributes\n\n*   The URL for the login link.\n    \n\n### More attributes\n\n```\n{  \"object\": \"login_link\",  \"created\": 1686084879,  \"url\": \"https://connect.stripe.com/express/acct_1032D82eZvKYlo2C/F44eiGHh5sEV\"}\n```\n\n## [Create a login link](https://docs.stripe.com/api/accounts/login_link/create)\n\nCreates a single-use login link for a connected account to access the Express Dashboard.\n\n**You can only create login links for accounts that use the [Express Dashboard](https://docs.stripe.com/connect/express-dashboard) and are connected to your platform**.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a login link object if the call succeeded.\n\nPOST /v1/accounts/:id/login\\_links\n\n```\ncurl -X POST https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/login_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"login_link\",  \"created\": 1686084879,  \"url\": \"https://connect.stripe.com/express/acct_1032D82eZvKYlo2C/F44eiGHh5sEV\"}\n```\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Login Link object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/connect/dashboard/understand-your-connect-business",
    "markdown": "# Understand your Connect business | Stripe DocumentationThe Stripe Docs logo\n\n## Use the Connect overview page to gain insight into your payments business and manage platform tasks.\n\nUse the Connect overview page in your Dashboard to understand and manage your Connect payments business. It includes three modules:\n\n*   [Business insights](#business-insights)\n*   [Tasks](#tasks)\n*   [Resources](#resources)\n\n![Example of the Connect overview page.](https://b.stripecdn.com/docs-statics-srv/assets/overview-1.bceac7fdaad8fe3185bfd936e76ca573.png)\n\n## Business insights ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe main section of the page displays high-level metrics that you can use to better understand the health of your payments business, including:\n\n### Top grossing accounts list ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA list of your five highest grossing accounts and their total lifetime gross amounts.\n\n### Account status chart ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA snapshot of the current numbers of your connected accounts in **Active**, **Restricted soon**, and **Restricted** [statuses](https://docs.stripe.com/connect/dashboard#status-badges).\n\n## Tasks ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe tasks section of the page displays cards representing platform tasks that you must complete. The tasks depend on the types of connected accounts that your platform supports. Each card links to a details page that explains how to complete that task.\n\nIf you have no open tasks to complete, you don’t see the Tasks section.\n\n### Task details page ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA task details page contains specific information required for you to complete the task. It can include actions, deadlines, and links to relevant resources.\n\nA task can have one of the following statuses:\n\n*   **Not started**\n*   **In progress**\n*   **Complete**\n\nWhen you complete a task, you can mark it complete by clicking **Complete**.\n\nHere’s an example of the details page for the **Modify your onboarding** task:\n\n![Example of a task details page.](https://b.stripecdn.com/docs-statics-srv/assets/task-detail.07a82a4907032f045bdd07918cc12204.png)\n\n## Resources ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Resources section of the overview page contains cards representing additional Connect resources. Each card links to a Stripe resource where you can learn more about a particular topic.",
    "title": "Understand your Connect business | Stripe Documentation",
    "description": "Use the Connect overview page to gain insight into your payments business and manage platform tasks.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/data-migrations/overview",
    "markdown": "# Migrate payment data | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to migrate your payment data to or from Stripe.\n\nIf you need to transfer sensitive payment information to or from another payment processor, or even between Stripe accounts, we can help you do so in a secure and [PCI-compliant](https://docs.stripe.com/security/guide#validating-pci-compliance) way.\n\nFor each type of data migration, you must request both customer records and the associated payment data. Use Stripe’s [Customer API](https://docs.stripe.com/api/customers) to create, update, or retrieve customer data that doesn’t include payment information.\n\nWe also have processes supporting multi-directional data migration.\n\n## Import payment data to Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re switching to Stripe from another processor or need to add payment data to your Stripe account, request a data import.\n\n## Export payment data from Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re moving from Stripe to another processor or need to transfer payment data to a different provider, you can request a data export.\n\n## Copy payment data between Stripe accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you want to transfer data between two Stripe accounts, complete a self-serve copy migration.",
    "title": "Migrate payment data | Stripe Documentation",
    "description": "This guide describes how Stripe supports transferring sensitive payment information between Stripe accounts and other payment processors.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/element/events/on_change?type=addressElement",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/payments/meses-sin-intereses/accept-a-payment",
    "markdown": "# Accept meses sin intereses card payments\n\n## Learn how to accept credit card payments using meses sin intereses across a variety of Stripe products.\n\nInstallments (meses sin intereses) is a feature of consumer credit cards in Mexico that allows customers to split purchases over multiple billing statements. You receive payment as if it were a normal one-time charge, with fees deducted, and the customer’s bank handles collecting the money over time.\n\nSome restrictions apply to which transactions and cards can use installments. Review the [compatibility requirements](https://docs.stripe.com/payments/mx-installments#requirements).\n\nAccepting an installment payment incurs [an additional fee](https://docs.stripe.com/payments/mx-installments#fees) to the standard credit card transaction fee.\n\nYou can enable installments across a variety of Stripe products. Choose the instructions below matching your implementation.\n\n## Integrate with Checkout ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can accept installments with [Checkout](https://docs.stripe.com/payments/checkout).\n\nCheckout creates a secure, Stripe-hosted payment page that lets you collect payments quickly. It works across devices and can help increase your conversion. Checkout provides a low-code way to get started accepting payments.\n\nYour customers use Checkout to pay with cards (with or without installments) and other payment methods that support Checkout.\n\n## Enable installments with the Checkout Sessions API ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Checkout allows you to collect installment payments. You can use this [integration guide](https://docs.stripe.com/checkout/quickstart) to set up Checkout. After you set up Checkout, you can use it to enable installments by following the instructions below.\n\n1.  [Review Checkout documentation](#review-checkout-docs)\n2.  [Create a new Checkout session](#create-new-session)\n3.  [Select an Installment plan on the client](#select-plan)\n4.  [Retrieve the selected Installment plan](#retrieve-plan)\n\n[](#create-new-session)\n\nCreate a new Checkout session with installments enabled as shown in the example below. You need to substitute your own API key and price object.\n\n#### Note\n\nInstallments only works with `payment` mode, not `setup` or `subscription` mode.\n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode success_url=\"https://example.com/success\" \\   --data-urlencode cancel_url=\"https://example.com/cancel\" \\   -d \"line_items[0][price]\"={{PRICE_ID}} \\   -d \"line_items[0][quantity]\"=3 \\  -d mode=payment \\  -d \"payment_method_options[card][installments][enabled]\"=true`\n\n[](#select-plan)\n\nThe hosted Checkout page displays the available installment options based on the credit card number provided by the customer.\n\nIf a customer clicks on **Pay in installments (meses sin intereses)**, the installment plan option selected by default is the first plan on the list.\n\nThe customer can select their desired installment option using the Checkout interface.\n\n#### Note\n\nInstallment plans only show up for credit cards that support them and for transactions that have a total amount greater than or equal to 300.00 MXN.\n\nIn [test mode](https://docs.stripe.com/test-mode \"test mode\"), you can [use test card numbers](#testing) to test different behaviors.\n\n[](#retrieve-plan)\n\nThe selected installment plan is available through both Dashboard and API. In the Dashboard, click on a payment and scroll down to **Payment details**. If the transaction used installments, you’ll see the length of the plan…\n\nThe selected installment plan is also available on the Payment Intent. After the user has completed payment, get the payment intent ID from the Checkout Session object (for example, `\"payment_intent\": \"pi_...\"`) and then use that payment intent ID to retrieve the PaymentIntent object to see which installment plan the customer selected.\n\n`curl https://api.stripe.com/v1/checkout/sessions/{{CHECKOUT_SESSION_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nWith the payment intent ID, retrieve the PaymentIntent object:\n\n`curl https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nThe PaymentIntent object then shows the selected installment plan:\n\n`{   \"id\": \"pi_...\",   \"object\": \"payment_intent\",   \"amount\": 100000, ...   \"charges\": {     \"data\": [       {         \"id\": \"ch_...\",         \"object\": \"charge\",         \"amount\": 100000,         \"payment_method_details\": {           \"card\": {             \"installments\": {               \"plan\": {                 \"count\": 3,`\n\nAt this point, you’ve successfully used the Checkout Sessions API to accept payments using installments. For more information on setting up Checkout, review the [Checkout integration guide](https://docs.stripe.com/checkout/quickstart). For more information on the installments API setup, review the instructions for integrating with the [Payment Intents API](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\"). You might also find useful information in the [Checkout Sessions](https://docs.stripe.com/api/checkout/sessions) and [Payment Intents](https://docs.stripe.com/api/payment_intents/object) API docs.\n\n## Custom settings ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can customize your installments configuration using the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) payment methods settings page.\n\nYou can find the option to enable or disable installments in your [payment methods settings page](https://dashboard.stripe.com/settings/payment_methods). This setting allows you to enable installments for no-code payment methods, including Payment Links and Checkout.\n\nSeparately, on the payment methods settings page, you can also configure the specific monthly plans you want to offer and the minimum and maximum transaction amounts for each plan. These plan configurations apply to all of your existing installments integrations.\n\n## Test the integration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use the following cards to test your integration:\n\n| Number | Description |\n| --- | --- |\n|     | 3, 6, 9, 12, 18, and 24 month installment plans available |\n|     | No installment plans available. |",
    "title": "Accept meses sin intereses card payments | Stripe Documentation",
    "description": "Learn how to accept credit card payments using meses sin intereses across a variety of Stripe products.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/bacs-debit/import-data",
    "markdown": "# Import Bacs data to Stripe\n\nThe Letter to Payers explains why the migration is needed, how it affects Payers, and the Direct Debit Guarantee.\n\nDownload the pre-approved Letter to Payers template and send it to your customers at least 2 days before your switch date. You can’t make any edits outside of the highlighted fields. If you want to make edits to the Letter to Payers, a review is required by Stripe’s sponsor bank.\n\n#### Caution\n\n[Sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fpayments%2Fbacs-debit%2Fimport-data) to download the Letter to Payers template.\n\nYou can decide how to communicate the letter to your customers. For example email, mail, and text message are all valid communication options. Not alerting payers to this change can result in failed payments and disputes.\n\nThe payer might see two references to the business in the bank portal for 1-3 business days when Stripe imports the business’s existing mandates. This is because one is the mandate with the former provider, and the other is Stripe’s mandate.",
    "title": "Import Bacs data to Stripe | Stripe Documentation",
    "description": "Learn how to import your Bacs data from your current payment processor to Stripe.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/disputes/evidence_object",
    "markdown": "# The Dispute object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Disputed amount. Usually the amount of the charge, but it can differ (usually because of currency fluctuation or because only part of the order is disputed).\n    \n*   ID of the charge that’s disputed.\n    \n\n*   Evidence provided to respond to a dispute. Updating any field in the hash submits all fields in the hash for review.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    payment\\_intentnullable stringExpandable\n    \n    ID of the PaymentIntent that’s disputed.\n    \n*   Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Learn more about [dispute reasons](https://docs.stripe.com/disputes/categories).\n    \n*   Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `won`, or `lost`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `lost` |\n    | `needs_response` |\n    | `under_review` |\n    | `warning_closed` |\n    | `warning_needs_response` |\n    | `warning_under_review` |\n    | `won` |\n    \n\n### More attributes\n\n*   #### \n    \n    balance\\_transactionsarray of objects\n    \n\n*   #### \n    \n    is\\_charge\\_refundableboolean\n    \n\n*   #### \n    \n    payment\\_method\\_detailsnullable object\n    \n\n```\n{  \"id\": \"dp_1MtJUT2eZvKYlo2CNaw2HvEv\",  \"object\": \"dispute\",  \"amount\": 1000,  \"balance_transactions\": [],  \"charge\": \"ch_1AZtxr2eZvKYlo2CJDX8whov\",  \"created\": 1680651737,  \"currency\": \"usd\",  \"evidence\": {    \"access_activity_log\": null,    \"billing_address\": null,    \"cancellation_policy\": null,    \"cancellation_policy_disclosure\": null,    \"cancellation_rebuttal\": null,    \"customer_communication\": null,    \"customer_email_address\": null,    \"customer_name\": null,    \"customer_purchase_ip\": null,    \"customer_signature\": null,    \"duplicate_charge_documentation\": null,    \"duplicate_charge_explanation\": null,    \"duplicate_charge_id\": null,    \"product_description\": null,    \"receipt\": null,    \"refund_policy\": null,    \"refund_policy_disclosure\": null,    \"refund_refusal_explanation\": null,    \"service_date\": null,    \"service_documentation\": null,    \"shipping_address\": null,    \"shipping_carrier\": null,    \"shipping_date\": null,    \"shipping_documentation\": null,    \"shipping_tracking_number\": null,    \"uncategorized_file\": null,    \"uncategorized_text\": null  },  \"evidence_details\": {    \"due_by\": 1682294399,    \"has_evidence\": false,    \"past_due\": false,    \"submission_count\": 0  },  \"is_charge_refundable\": true,  \"livemode\": false,  \"metadata\": {},  \"payment_intent\": null,  \"reason\": \"general\",  \"status\": \"warning_needs_response\"}\n```\n\n## [Update a dispute](https://docs.stripe.com/api/disputes/update)\n\nWhen you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your [dashboard](https://dashboard.stripe.com/disputes), but if you prefer, you can use the API to submit evidence programmatically.\n\nDepending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our [guide to dispute types](https://docs.stripe.com/disputes/categories).\n\n### Parameters\n\n*   Evidence to upload, to respond to a dispute. Updating any field in the hash will submit all fields in the hash for review. The combined character count of all fields is limited to 150,000.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Whether to immediately submit evidence to the bank. If `false`, evidence is staged on the dispute. Staged evidence is visible in the API and Dashboard, and can be submitted to the bank by making another request with this attribute set to `true` (the default).\n    \n\n### Returns\n\nReturns the dispute object.\n\n```\ncurl https://api.stripe.com/v1/disputes/dp_1MtJUT2eZvKYlo2CNaw2HvEv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"dp_1MtJUT2eZvKYlo2CNaw2HvEv\",  \"object\": \"dispute\",  \"amount\": 1000,  \"balance_transactions\": [],  \"charge\": \"ch_1AZtxr2eZvKYlo2CJDX8whov\",  \"created\": 1680651737,  \"currency\": \"usd\",  \"evidence\": {    \"access_activity_log\": null,    \"billing_address\": null,    \"cancellation_policy\": null,    \"cancellation_policy_disclosure\": null,    \"cancellation_rebuttal\": null,    \"customer_communication\": null,    \"customer_email_address\": null,    \"customer_name\": null,    \"customer_purchase_ip\": null,    \"customer_signature\": null,    \"duplicate_charge_documentation\": null,    \"duplicate_charge_explanation\": null,    \"duplicate_charge_id\": null,    \"product_description\": null,    \"receipt\": null,    \"refund_policy\": null,    \"refund_policy_disclosure\": null,    \"refund_refusal_explanation\": null,    \"service_date\": null,    \"service_documentation\": null,    \"shipping_address\": null,    \"shipping_carrier\": null,    \"shipping_date\": null,    \"shipping_documentation\": null,    \"shipping_tracking_number\": null,    \"uncategorized_file\": null,    \"uncategorized_text\": null  },  \"evidence_details\": {    \"due_by\": 1682294399,    \"has_evidence\": false,    \"past_due\": false,    \"submission_count\": 0  },  \"is_charge_refundable\": true,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"payment_intent\": null,  \"reason\": \"general\",  \"status\": \"warning_needs_response\"}\n```\n\n## [Retrieve a dispute](https://docs.stripe.com/api/disputes/retrieve)\n\nRetrieves the dispute with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a dispute if a valid dispute ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/disputes/dp_1MtJUT2eZvKYlo2CNaw2HvEv \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"dp_1MtJUT2eZvKYlo2CNaw2HvEv\",  \"object\": \"dispute\",  \"amount\": 1000,  \"balance_transactions\": [],  \"charge\": \"ch_1AZtxr2eZvKYlo2CJDX8whov\",  \"created\": 1680651737,  \"currency\": \"usd\",  \"evidence\": {    \"access_activity_log\": null,    \"billing_address\": null,    \"cancellation_policy\": null,    \"cancellation_policy_disclosure\": null,    \"cancellation_rebuttal\": null,    \"customer_communication\": null,    \"customer_email_address\": null,    \"customer_name\": null,    \"customer_purchase_ip\": null,    \"customer_signature\": null,    \"duplicate_charge_documentation\": null,    \"duplicate_charge_explanation\": null,    \"duplicate_charge_id\": null,    \"product_description\": null,    \"receipt\": null,    \"refund_policy\": null,    \"refund_policy_disclosure\": null,    \"refund_refusal_explanation\": null,    \"service_date\": null,    \"service_documentation\": null,    \"shipping_address\": null,    \"shipping_carrier\": null,    \"shipping_date\": null,    \"shipping_documentation\": null,    \"shipping_tracking_number\": null,    \"uncategorized_file\": null,    \"uncategorized_text\": null  },  \"evidence_details\": {    \"due_by\": 1682294399,    \"has_evidence\": false,    \"past_due\": false,    \"submission_count\": 0  },  \"is_charge_refundable\": true,  \"livemode\": false,  \"metadata\": {},  \"payment_intent\": null,  \"reason\": \"general\",  \"status\": \"warning_needs_response\"}\n```\n\n## [List all disputes](https://docs.stripe.com/api/disputes/list)\n\nReturns a list of your disputes.\n\n### Parameters\n\n*   Only return disputes associated to the charge specified by this charge ID.\n    \n*   Only return disputes associated to the PaymentIntent specified by this PaymentIntent ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` disputes, starting after dispute `starting_after`. Each entry in the array is a separate dispute object. If no more disputes are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/disputes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/disputes\",  \"has_more\": false,  \"data\": [    {      \"id\": \"dp_1MtJUT2eZvKYlo2CNaw2HvEv\",      \"object\": \"dispute\",      \"amount\": 1000,      \"balance_transactions\": [],      \"charge\": \"ch_1AZtxr2eZvKYlo2CJDX8whov\",      \"created\": 1680651737,      \"currency\": \"usd\",      \"evidence\": {        \"access_activity_log\": null,        \"billing_address\": null,        \"cancellation_policy\": null,        \"cancellation_policy_disclosure\": null,        \"cancellation_rebuttal\": null,        \"customer_communication\": null,        \"customer_email_address\": null,        \"customer_name\": null,        \"customer_purchase_ip\": null,        \"customer_signature\": null,        \"duplicate_charge_documentation\": null,        \"duplicate_charge_explanation\": null,        \"duplicate_charge_id\": null,        \"product_description\": null,        \"receipt\": null,        \"refund_policy\": null,        \"refund_policy_disclosure\": null,        \"refund_refusal_explanation\": null,        \"service_date\": null,        \"service_documentation\": null,        \"shipping_address\": null,        \"shipping_carrier\": null,        \"shipping_date\": null,        \"shipping_documentation\": null,        \"shipping_tracking_number\": null,        \"uncategorized_file\": null,        \"uncategorized_text\": null      },      \"evidence_details\": {        \"due_by\": 1682294399,        \"has_evidence\": false,        \"past_due\": false,        \"submission_count\": 0      },      \"is_charge_refundable\": true,      \"livemode\": false,      \"metadata\": {},      \"payment_intent\": null,      \"reason\": \"general\",      \"status\": \"warning_needs_response\"    }    {...}    {...}  ],}\n```\n\n## [Close a dispute](https://docs.stripe.com/api/disputes/close)\n\nClosing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.\n\nThe status of the dispute will change from `needs_response` to `lost`. _Closing a dispute is irreversible_.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the dispute object.\n\nPOST /v1/disputes/:id/close\n\n```\ncurl -X POST https://api.stripe.com/v1/disputes/dp_1MtJUT2eZvKYlo2CNaw2HvEv/close \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"dp_1MtJUT2eZvKYlo2CNaw2HvEv\",  \"object\": \"dispute\",  \"amount\": 1000,  \"balance_transactions\": [],  \"charge\": \"ch_1AZtxr2eZvKYlo2CJDX8whov\",  \"created\": 1680651737,  \"currency\": \"usd\",  \"evidence\": {    \"access_activity_log\": null,    \"billing_address\": null,    \"cancellation_policy\": null,    \"cancellation_policy_disclosure\": null,    \"cancellation_rebuttal\": null,    \"customer_communication\": null,    \"customer_email_address\": null,    \"customer_name\": null,    \"customer_purchase_ip\": null,    \"customer_signature\": null,    \"duplicate_charge_documentation\": null,    \"duplicate_charge_explanation\": null,    \"duplicate_charge_id\": null,    \"product_description\": null,    \"receipt\": null,    \"refund_policy\": null,    \"refund_policy_disclosure\": null,    \"refund_refusal_explanation\": null,    \"service_date\": null,    \"service_documentation\": null,    \"shipping_address\": null,    \"shipping_carrier\": null,    \"shipping_date\": null,    \"shipping_documentation\": null,    \"shipping_tracking_number\": null,    \"uncategorized_file\": null,    \"uncategorized_text\": null  },  \"evidence_details\": {    \"due_by\": 1682294399,    \"has_evidence\": false,    \"past_due\": false,    \"submission_count\": 0  },  \"is_charge_refundable\": true,  \"livemode\": false,  \"metadata\": {},  \"payment_intent\": null,  \"reason\": \"general\",  \"status\": \"warning_needs_response\"}\n```",
    "title": "The Dispute object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/bacs-debit/email-customization",
    "markdown": "# Bacs Direct Debit email notification requirements\n\n## Design and send your own Bacs Direct Debit notification emails.\n\nBacs Direct Debit requires that you notify your customers when payment details are initially collected and two days before a payment is to be collected. There are three types of Bacs Direct Debit email notifications you need to send in different scenarios:\n\n| Email | Description |\n| --- | --- |\n| Confirmation of signup | Sent when payment details are initially collected and payment is to be collected more than one month later |\n| Advanced notice | Sent two days before payment is to be collected, for every payment \\* |\n| Confirmation of signup incorporating Advanced notice | Sent when payment details are initially collected if the first payment is to be collected within one month of collecting the mandate |\n\n\\* If you are charging a recurring amount where both the charge amount and schedule is unchanging then only one advanced notice email is required and it must be sent before the first payment. This is often a reason why users choose to send their own Bacs email notifications: to reduce the overall number of emails they send their customers.\n\n## Approval process![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo send your own Bacs Direct Debit notification emails, follow these steps:\n\n1.  If you have not already opted to do so, you first need to customize your Business Display Name in the [Bacs Direct Debit settings](https://dashboard.stripe.com/settings/payments#bacs_debit).\n2.  [Contact us](https://support.stripe.com/contact) with screenshots of your email designs for approval. This document lists out the requirements and gives examples to follow when designing your emails.\n3.  Turn off Stripe emails in the [Stripe Dashboard email settings](https://dashboard.stripe.com/account/emails).\n\n## Confirmation of signup![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBacs Direct Debit requires that the following information be included on a Confirmation of signup email notification:\n\n*   A heading advising confirmation of the setup of a Direct Debit Instruction\n*   Wording advising the payer to check the details contained in the email\n*   The payer’s account name\n*   The last 4 numbers of the payer’s account number with the leading digits masked\n*   The payer’s bank sort code\n*   Your customized Business Display Name\n*   Your contact telephone number and email address\n*   Advice of right to cancel\n*   The [mandate reference](https://docs.stripe.com/api/mandates/object#mandate_object-payment_method_details-bacs_debit-reference)\n*   The unedited [Stripe Direct Debit Guarantee](https://stripe.com/legal/bacs-direct-debit-guarantee), including the Direct Debit logo\n\nThe Confirmation of signup email must be sent as soon as you have collected payment details from your customer. Send this email when you receive the [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) event for a payment method of type `bacs_debit`.\n\nThe following example Confirmation of signup email for a fictional company, named Rocket Rides, can be used as a reference for creating your own email:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/bacs-customized-mandate-confirmation.b05c81230fef01460f71ab1a529f7238.png)\n\n## Advanced notice![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBacs Direct Debit requires that the following information be included on an Advanced notice email notification:\n\n*   The total amount of the Direct Debit to be debited from the payer’s account\n*   The Direct Debit due date (day, month, and year) — this will be two business days after the PaymentIntent is created in Stripe\n*   The Frequency of Direct Debit collection — only required when charging an unchanging, recurring amount and you will not be sending an advanced notice email for each charge\n*   The [mandate reference](https://docs.stripe.com/api/mandates/object#mandate_object-payment_method_details-bacs_debit-reference)\n*   Your customized Business Display Name\n*   Your contact telephone number and email address\n\nThe Advanced notice email must be sent two days before you charge your customer. Send this email when you receive a [payment\\_intent.processing](https://docs.stripe.com/api/events/types#event_types-payment_intent.processing) event with a payment method of type `bacs_debit`. If you are collecting a mandate and payment at the same time, and have opted not to send the combined Confirmation of signup incorporating an Advanced notice email, then you must wait until the mandate is accepted to send the Advanced notice email. A mandate is accepted when you receive a [mandate.updated](https://docs.stripe.com/api/events/types#event_types-mandate.updated) event with a [payment\\_method\\_details.type](https://docs.stripe.com/api/mandates/object#mandate_object-payment_method_details-type) set to `bacs_debit` and [payment\\_method\\_details.bacs\\_debit.network\\_status](https://docs.stripe.com/api/mandates/object#mandate_object-payment_method_details-bacs_debit-network_status) updated from `pending` to `accepted`.\n\nThe following example Advanced notice email for a fictional company, named Rocket Rides, can be used as a reference for creating your own email:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/bacs-customized-debit-initiated.531bf6868a65fee83ddd62b0519914e3.png)\n\n## Confirmation of signup incorporating an Advanced notice![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Confirmation of signup and Advanced notice email notifications can only be sent as a single email when the first payment will be collected within one month of the mandate being collected.\n\nBacs Direct Debit requires that the following information be included on an Confirmation of signup email notification that incorporates an advanced notice:\n\n*   A heading advising confirmation of the setup of a Direct Debit Instruction and the future payment schedule\n*   Wording advising the payer to check the details contained in the email\n*   The payer’s account name\n*   The last 4 numbers of the payer’s account number with the leading digits masked\n*   The payer’s bank sort code\n*   Your customized Business Display Name\n*   Your contact telephone number and email address\n*   Advice of right to cancel\n*   The [mandate reference](https://docs.stripe.com/api/mandates/object#mandate_object-payment_method_details-bacs_debit-reference)\n*   The unedited [Stripe Direct Debit Guarantee](https://stripe.com/legal/bacs-direct-debit-guarantee), including the Direct Debit logo\n*   The total amount of the Direct Debit to be debited from the payer’s account\n*   The Direct Debit due date (day, month, and year) — this will be two business days after the PaymentIntent is created in Stripe\n*   The Frequency of Direct Debit collection — only required when charging an unchanging, recurring amount and you will not be sending an advanced notice email for each charge\n\nThe Confirmation of signup email incorporating Advanced notice must be sent as soon as you have collected payment details from your customer. Send this email when you receive the [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) event for a payment method of type `bacs_debit`.",
    "title": "Bacs Direct Debit email notification requirements | Stripe Documentation",
    "description": "Design and send your own Bacs Direct Debit notification emails.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/js/elements_object/create_element?type=paymentMethodMessaging",
    "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
    "title": "Stripe JS Reference",
    "description": "",
    "languageCode": "en"
  },
  {
    "url": "https://docs.stripe.com/payouts/instant-payouts",
    "markdown": "# Instant Payouts for Stripe Dashboard users\n\n## Get access to your Stripe balance instantly.\n\nWith Instant Payouts, Stripe Dashboard users can access their Stripe balances immediately following a successful charge. You can request an Instant Payout any day or time, including weekends and holidays, and funds typically settle in the associated bank account within 30 minutes.\n\n## Compare Instant Payouts to standard payouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInstant Payouts accelerate access to your funds, making them available as soon as funds from a card charge are successfully completed. However, Stripe assesses a fee on each Instant Payout. Any funds not accessed through Instant Payouts continue to be paid out according to your [default payout schedule](https://dashboard.stripe.com/settings/payouts).\n\nInstant Payouts can’t use [alternative currencies](https://docs.stripe.com/payouts/alternative-currencies). For example, an Instant Payout to a Canadian business must be in CAD.\n\nFunds acquired from card payments are available for Instant Payouts as soon as the charge is complete. ACH or bank debits are only available for Instant Payouts after the payment has settled.\n\n## Request an Instant Payout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can initiate Instant Payouts either manually through the Stripe Dashboard or programmatically using the Stripe APIs.\n\n1.  From the Home or Balances tab, click Pay out funds to check your available balance.\n2.  If you’re [eligible for Instant Payouts](#eligibility-and-daily-volume-limits) and have a positive balance, select a Standard or Instant manual payout.\n3.  If you haven’t added an [eligible Instant Payout method](#3managing-payout-methods), you’re prompted to do so. You only need to add a method once.\n4.  Select the amount you want to receive. You can enter up to the maximum amount available, subject to daily volume limits.\n5.  Funds are paid out immediately and arrive at your payout destination within minutes.\n\n## Eligibility and daily volume limits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNew Stripe users aren’t immediately eligible for Instant Payouts. Check your eligibility in the [Dashboard](https://dashboard.stripe.com/balance/overview) or use the [Balances API](https://docs.stripe.com/api/balance/balance_retrieve).\n\nAn instant payout applies to a daily limit according to the time it’s requested. For example, if you request an instant payout at 23:58 on Tuesday and receive the funds at 00:03 on Wednesday, that payout counts toward Tuesday’s limit. Daily reset times depend on your region:\n\n*   United States and Canada: Midnight US Central Time\n*   United Kingdom: Midnight London Time\n*   Singapore: Midnight Singapore Time\n*   Australia: Midnight Sydney Time\n\nInstant Payouts observe the following daily limitations:\n\n*   You’re limited to a maximum instant payout amount per day. Check your daily volume in the [Dashboard](https://dashboard.stripe.com/balance/overview). You can’t initiate Instant Payouts after you reach your daily limit.\n*   You’re limited to a maximum of 10 Instant Payouts per day.\n\n## Pricing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe charges Dashboard users a 1% fee for all Instant Payouts for CA, UK, and SG, and a 1.5% fee for US and AU. Each Instant Payout transaction has a minimum and maximum amount dependent on the currency.\n\n| Country | Instant Payout Minimum | Instant Payout Maximum |\n| --- | --- | --- |\n| US  | 0.50 USD | 9,999 USD |\n| Canada | 0.60 CAD | 9,999 CAD |\n| Singapore | 0.50 SGD | 9,999 SGD |\n| United Kingdom | 0.40 GBP | 9,999 GBP |\n| Australia | 0.50 AUD | 9,999 AUD |\n\n## Manage payout methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must have an eligible payout account to receive Instant Payouts. Use the [External payout accounts and scheduling](https://dashboard.stripe.com/account/payouts) section in the Dashboard Settings tab to manage your payout accounts.\n\n#### Debit card updates\n\nFor security reasons, you can’t edit card details. To update a card, remove it and add it as a new card.\n\n## Instant Payouts on mobile![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you qualify for [Instant Payouts](#eligibility-and-daily-volume-limits) and the [Stripe Dashboard mobile app](https://support.stripe.com/questions/stripe-dashboard-mobile-app-on-iphone-and-android-(for-standard-direct-users)), you can start and monitor Standard or Instant manual payouts using the Stripe Dashboard Mobile App on your iOS or Android device. In the app, go to the **Balances** tab at the bottom of the screen. You can also click on the add icon () from any tab and choose **Pay out funds**. If your balance is positive, you’ll see an option to begin the payout process.\n\nTo get started, download the Stripe Dashboard mobile app for [iOS](https://apps.apple.com/app/apple-store/id978516833?pt=91215812&ct=stripe-docs-instant-payouts&mt=8) or [Android](https://play.google.com/store/apps/details?id=com.stripe.android.dashboard).",
    "title": "Instant Payouts for Stripe Dashboard users | Stripe Documentation",
    "description": "Get access to your Stripe balance instantly.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/checkout/custom-checkout",
    "markdown": "# Build a checkout page | Stripe DocumentationThe Stripe Docs logo\n\n## Build a checkout pageBeta\n\n## Learn how to use Elements and Custom Checkout to build a checkout page.\n\n#### Beta\n\nThe Custom Checkout integration is in private beta. To request access, [click here.](#)\n\nYou can build a custom checkout page on your website using [Stripe Elements](https://docs.stripe.com/payments/elements) and Custom Checkout, a front-end SDK that manages tax, discounts, shipping rates, and so on.\n\nCustom checkout doesn’t support Klarna or Sofort.\n\n[](#set-up-server)\n\nBefore you begin, you need to [register](https://dashboard.stripe.com/register) for a Stripe account.\n\nUse the official Stripe libraries to access the API from your application.\n\n`# Install with npm npm install stripe --save`\n\nSet the SDK to use the `custom_checkout_beta=v1` beta version header.\n\n`import Stripe from 'stripe'; const stripe = Stripe(`\n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`, {   apiVersion: '2024-06-20; custom_checkout_beta=v1' as any, });`\n\n[](#initialize-a-checkoutsession)\n\nAdd an endpoint on your server that creates a Checkout Session object and returns its [client secret](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-client_secret) to your front end.\n\nA Checkout Session represents your customer’s session as they pay for one-time purchases or subscriptions. Checkout Sessions expire 24 hours after creation.\n\n`import Express from 'express';  const app: Express = express();  app.post('/checkout', async (req: Express.Request, res: Express.Response) => {   const session = await stripe.checkout.sessions.create({     line_items: [       {         price_data: {           currency: 'usd',           product_data: {             name: 'T-shirt',           },           unit_amount: 2000,         },         quantity: 1,       },     ],     mode: 'payment',     ui_mode: 'custom' as any,     // The URL of your payment completion page     return_url: '{{RETURN_URL}}'   });    res.json({clientSecret: session.client_secret}); });  app.listen(3000, () => {   console.log('Running on port 3000'); });`\n\nFor more details about creation parameters, see [create a Checkout Session](https://docs.stripe.com/api/checkout/sessions/create).\n\n[](#set-up-frontend)\n\nInstall React Stripe.js and the Stripe.js loader from the [npm public registry](https://www.npmjs.com/package/@stripe/react-stripe-js). You need at least version 2.6.0 for React Stripe.js and version 3.0.7 for the Stripe.js loader.\n\n`npm install --save @stripe/react-stripe-js@^2.6.0 @stripe/stripe-js^3.0.7`\n\nInitialize a `stripe` instance on your front end with your publishable key, passing in the `custom_checkout_beta_2` beta.\n\n`import {loadStripe} from '@stripe/stripe-js'; const stripe = loadStripe(`\n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n`, {   betas: ['custom_checkout_beta_2'], });`\n\nRetrieve the `clientSecret` from your server and wrap your application with the [CustomCheckoutProvider](https://docs.stripe.com/js/custom_checkout/react/custom_checkout_provider) component.\n\nUse the [useCustomCheckout](https://docs.stripe.com/js/custom_checkout/react/use_custom_checkout) hook in your components to get the `checkout` object, which contains data from the Checkout Session as well as methods to update it. For now, render the line items as text and log the `checkout` object to the console to see what’s available.\n\n`import React from 'react'; import {CustomCheckoutProvider} from '@stripe/react-stripe-js';  const App = ({clientSecret}) => (   <CustomCheckoutProvider     stripe={stripe}     options={{clientSecret}}   >     <CheckoutForm />   </CustomCheckoutProvider> );  export default App;`\n\n`import React from 'react'; import {useCustomCheckout} from '@stripe/react-stripe-js';  const CheckoutForm = () => {   const checkout = useCustomCheckout();   console.log(checkout);   return (     <pre>       {JSON.stringify(checkout.lineItems, null, 2)}     </pre>   ) };`\n\n## Next steps![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Collect customer details](https://docs.stripe.com/checkout/custom-checkout/collect-customer-details)\n*   [Collect payment details with the Payment Element](https://docs.stripe.com/checkout/custom-checkout/collect-payment-details)\n*   [Build a pay button to complete checkout](https://docs.stripe.com/checkout/custom-checkout/submit-the-payment)\n*   [Perform fulfillment after a customer pays](https://docs.stripe.com/checkout/fulfillment)",
    "title": "Build a checkout page | Stripe Documentation",
    "description": "Learn how to use Elements and Custom Checkout to build a checkout page.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payouts/instant-payouts-banks",
    "markdown": "# Bank support for Instant Payouts\n\n## Identify whether your account's bank supports Instant Payouts.\n\nStripe supports Instant [Payouts](https://docs.stripe.com/payouts \"payout\") for [eligible users](https://dashboard.stripe.com/payouts/instant_payouts_eligibility) in the United States, Canada, the United Kingdom, Singapore, and Australia. Instant Payouts in each country must use the local currency. For example, an Instant Payout to a Canadian business must be in CAD.\n\nTo see which banks support Instant Payouts, select your country from the dropdown.\n\nInstant Payout support in:\n\n## Debit cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMost US banks issue debit cards that can receive Instant Payouts. To see which US banks support Instant Payouts, expand the corresponding section:\n\n### Supports Instant Payouts for all of its debit cards\n\n### Supports Instant Payouts for some of its debit cards\n\n### Does not support Instant Payouts\n\n## Bank accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSome US banks also offer Instant Payouts to bank accounts.\n\n### Supports Instant Payouts for its bank accounts",
    "title": "Bank support for Instant Payouts | Stripe Documentation",
    "description": "Identify whether your account's bank supports Instant Payouts.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/data-migrations/pan-import",
    "markdown": "# Request a payment data import\n\n## Securely import sensitive payment data.\n\nStripe enables you to retain your existing customer and payment data when you migrate to Stripe. We work with your team and current payment provider, as needed, to securely migrate your information in a few steps:\n\n1.  [Build your Stripe integration](#build-integration).\n2.  [Request and confirm the migration details](#request-migration).\n3.  [Update your integration](#update-integration) to complete the migration.\n4.  (Optional) [Migrate subscriptions](#subscription-migrations).\n\nThis process allows you to accept and charge new customers on Stripe and continue charging your existing customers with your current processor until the migration is complete. Your customers incur no downtime. After the migration process completes, you can process all payments on Stripe.\n\nBuild and test your Stripe integration before requesting data from your current processor. This gives you plenty of time to verify and test your new integration. If you have any questions about the migration process or integrating with Stripe, [let us know](https://support.stripe.com/contact/login?email=true&topic=migrations).\n\n[](#build-integration)\n\nStripe simplifies your security requirements so that your customers don’t have to leave your site to complete a payment. This is done through a combination of client-side and server-side steps:\n\n1.  From your website running in the customer’s browser, Stripe securely collects their payment details.\n2.  Stripe responds with a representative token.\n3.  The browser submits the token to your server, along with any other form data.\n4.  Your server-side code uses that token in an API request (for example, when [creating a charge](https://docs.stripe.com/payments/charges-api)).\n\nThis approach streamlines your website’s checkout flow, while sensitive payment information never touches your server. This allows you to operate in accordance with [PCI-compliance](https://docs.stripe.com/security/guide#validating-pci-compliance) regulations, which can save you time and provide financial benefits.\n\n![Stripe's payment process flow](https://b.stripecdn.com/docs-statics-srv/assets/charge-workflow.6d5c025c1b1e62a53803f1908104e0a8.png)\n\nStripe’s payment process flow\n\nCompared to other payment processors, a Stripe integration can differ in the following ways:\n\n*   Your customer never leaves your website.\n*   Token creation isn’t tied to a specific product or amount.\n*   There’s no need to create a client-side key on-demand. You use a set, publishable [API key](https://docs.stripe.com/keys) instead.\n\n### Prepare your integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor all new customer tokens (not imported), implement the following:\n\n*   Use [Customer](https://docs.stripe.com/api#create_customer) objects to [save the card information](https://docs.stripe.com/saving-cards).\n*   Collect and tokenize customer card information with one of our recommended [payments integrations](https://docs.stripe.com/payments/accept-a-payment/web/compare-integrations).\n*   [Create charges](https://docs.stripe.com/api#create_charge-customer) for these new customers.\n\nUsing this approach, you can accept payments from your new customers on Stripe without impacting your current customers in your existing processor during the migration process.\n\n### Integration considerations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDesigning your integration before you ask your payment processor to transfer data to Stripe is the most efficient way to handle imported data. Some actions you can take before requesting an import include:\n\n*   Complete your Stripe account setup.\n*   Remap customer records.\n*   Handle updates to payment information during the migration.\n*   Enable all optimizations, such as [Adaptive Acceptance](https://stripe.com/authorization#:~:text=for%20issuing%20banks.-,Adaptive%20Acceptance,-Uses%20machine%20learning), [Card Account Updater](https://stripe.com/resources/more/what-is-a-card-account-updater-what-businesses-need-to-know), and [network tokens](https://stripe.com/guides/understanding-benefits-of-network-tokens).\n\n#### Remap customer records![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you prefer, you can configure your integration to [import the payment method data from prior records into existing Stripe customer objects](https://docs.stripe.com/get-started/data-migrations/map-payment-data). Doing so prevents the migration from creating a new (possibly duplicate) customer in your Stripe account for each unique customer ID in the files we receive from your prior processor.\n\nAfter migrating, you might still have to update some records to correspond with the new Stripe [Customer](https://docs.stripe.com/api/customers) identifier, if:\n\n*   You created the Stripe customer before migration, then we imported the payment information to update this customer record.\n*   We imported the payment information as a new customer record.\n\nFor example, customer jenny.rosen@example.com might have ID `42` in your database, corresponding to ID `1893` in your previous processor’s system, but is ID `cus_12345` in your Stripe account. In this case, you must now map your ID `42` to the Stripe ID `cus_12345` in your database. Stripe provides a post-import [mapping file](#update-integration) to help you identify required remapping.\n\n#### Handle updates to payment information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf customers update their payment information with your previous processor in the window between transferring the data and completing the import, those changes are lost.\n\nUpdate your site’s process for handling updates to saved payments to prevent errors or billing issues for your customers. This includes preparations to perform a self-migration for any customer without a stored Stripe customer ID:\n\n1.  Create a new [Customer object](https://docs.stripe.com/api/customers/object) in Stripe for your customer.\n2.  Attach the payment method to the Customer object.\n3.  If necessary, [migrate subscriptions](https://docs.stripe.com/billing/subscriptions/import-subscriptions-toolkit).\n\nAfter migration completes, Stripe [automatically handles card-triggered updates](https://stripe.com/blog/smarter-saved-cards), such as expiration date changes.\n\n[](#request-migration)\n\n1.  After you complete your integration and are ready to process payments on Stripe, [request your payment data from your previous processor](https://support.stripe.com/questions/request-data-from-a-current-processor-for-a-data-import-to-stripe). Many processors require the account owner to request a data transfer.\n2.  Log in to your Stripe account to submit the [migration request form](https://support.stripe.com/contact/email?topic=migrations) to request your import migration.\n3.  Engage with Stripe through the authenticated email thread we create upon receipt of your migration request.\n\n#### Warning\n\nNever send sensitive credit card details or customer information directly to Stripe. If you have this data, let us know in your migration request form so we can help you securely transfer your data.\n\nStripe can import your customer billing address information and payment details. For details on migrating specific payment types, see:\n\n*   [Cards](https://docs.stripe.com/get-started/data-migrations/card-imports)\n*   [ACH](https://docs.stripe.com/get-started/data-migrations/ach-imports)\n*   [SEPA](https://docs.stripe.com/get-started/data-migrations/sepa-imports)\n*   [Bacs](https://docs.stripe.com/payments/bacs-debit/import-data)\n*   [PADs/ACSS](https://docs.stripe.com/get-started/data-migrations/pads-imports)\n\nData migrations doesn’t migrate subscriptions, but you can [recreate](https://docs.stripe.com/billing/subscriptions/migrate-subscriptions) them separately or import them using the [Billing Migration Toolkit](https://docs.stripe.com/billing/subscriptions/import-subscriptions-toolkit).\n\nYour previous processor might take a few days or several weeks to transfer the final data to Stripe. Allow for this transition time in your migration plan.\n\nAfter your previous processor transfers your data, Stripe reviews the data and identifies any problems with the import. We work with you and your previous processor to correct any issues. We then share a summary of the import for your final review and approval.\n\nAfter your approval, Stripe imports the data into your account. We create a [Customer](https://docs.stripe.com/api#customer_object) for each unique customer in the transferred data file, and create and attach the customer’s cards as [Card](https://docs.stripe.com/api#card_object) or [Payment Method](https://docs.stripe.com/api/payment_methods/object) objects. If the transferred data specifies the customer’s default card, we set that as the customer’s [default payment method](https://docs.stripe.com/api#customer_object-default_source) for charges and [subscription](https://docs.stripe.com/api/subscriptions/create) payments.\n\nIf your Stripe account has accumulated significant customer records by the time you migrate, consider [mapping import date into existing Stripe customer objects](https://docs.stripe.com/get-started/data-migrations/map-payment-data) instead of creating new Customer objects.\n\nStripe typically imports data within 10 business days of receiving the correct data from your previous processor, along with any supplementary data files you want to share with our team.\n\n[](#update-integration)\n\nAfter completing the import, Stripe sends you a choice of a CSV or JSON file that shows the mapped relationship between your current processor’s IDs and the imported Stripe object IDs. Parse this mapping file and update your database accordingly. Make sure your integration [handled any card updates](#handle-card-updates) that took place during the transition.\n\n### Post import mapping file![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you update your integration with this mapping file, you can begin charging all of your customers on Stripe.\n\n`{   \"1893\": {     \"cards\": {       \"2600\": {         \"id\": \"card_2222222222\",         \"fingerprint\": \"x9yW1WE4nLvl6zjg\",         \"last4\": \"4242\",         \"exp_month\": 1,         \"exp_year\": 2020,         \"brand\": \"Visa\"       },       \"3520\": {         \"id\": \"card_3333333333\",         \"fingerprint\": \"nZnMWbJBurX3VHIN\",         \"last4\": \"0341\",         \"exp\\_month\": 6,         \"exp\\_year\": 2021,         \"brand\": \"Mastercard\"       }     },     \"id\": \"cus_abc123def456\"   } }`\n\nThe example JSON mapping above shows:\n\n*   Imported customer ID 1893 as a new Stripe Customer with ID `cus_abc123def456`.\n*   Imported customer card ID 2600 as a new Stripe Card with ID `card_2222222222`.\n*   Imported customer card ID 3520 as a new Stripe Card with ID `card_3333333333`.\n\nStripe can import card data as [PaymentMethods](https://docs.stripe.com/api#payment_method_object) instead of Card objects if you specify it in your migration request. The following examples show the mapping files for different types of payment information imports.\n\n`old_customer_id,customer_id,old_card_id,card_id,card_fingerprint,card_last4,card_exp_month,card_exp_year,card_brand old_cus_100,cus_abc123def456,old_src_100,card_2222222222,x9yW1WE4nLvl6zjg,424242,09,2024,Visa`\n\n### Post import payment declines![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf a customer’s credit card is declined after you complete the migration, ask them to provide their card’s CVC number or to update their card information. Then reattempt the charge.\n\n[](#migration-pgp-key)\n\nIf you’re unfamiliar with PGP, see [GPG](http://gnupg.org/) and start by [importing a public key](http://www.gnupg.org/gph/en/manual.html#AEN84). After you familiarize yourself with the basics of PGP, use the following PGP key to encrypt sensitive data (such as credit card information) for PCI-compliant migration.\n\n### PGP migration key![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis creates **FILENAME.gpg** with the following information:\n\n*   Key ID: `9C78B7620C1E99AD`\n*   Key type: `RSA`\n*   Key size: `4096 bits`\n*   Fingerprint: `AEBF 7C48 38C4 4D2F DC99 A3F9 9C78 B762 0C1E 99AD`\n*   User ID: `Stripe Import Key (PCI) <support-migrations@stripe.com>`\n\nAfter you import our key, you can encrypt files to send by running this command in your command line prompt:\n\n`gpg --encrypt --recipient 9C78B7620C1E99AD FILENAME`\n\nFor more details on providing encrypted data to Stripe, see [Upload supplementary data](https://docs.stripe.com/get-started/data-migrations/supplementary-data).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Multiple accounts](https://docs.stripe.com/get-started/account/multiple-accounts)\n*   [Account checklist](https://docs.stripe.com/get-started/account/checklist)",
    "title": "Request a payment data import | Stripe Documentation",
    "description": "You can bring your payment history when you migrate to Stripe. You can securely import customer and payment data into your Stripe account to maintain one center of operations.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/link/save-and-reuse",
    "markdown": "# Set up future payments using Elements and Link\n\n## Save your Link customers' details and charge them later.\n\nThis guide walks you through how to accept payments with [Link](https://docs.stripe.com/payments/link/what-is-link) using the [Setup Intents API](https://docs.stripe.com/api/setup_intents) and either the [Payment Element](https://docs.stripe.com/payments/payment-element) or [Link Authentication Element](https://docs.stripe.com/payments/elements/link-authentication-element).\n\nThere are three ways you can secure a customer email address for Link authentication and enrollment:\n\n*   **Pass in an email address:** You can pass an email address to the Payment Element using [defaultValues](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-defaultValues). If you’re already collecting the email address and or customer’s phone number in the checkout flow, we recommend this approach.\n*   **Collect an email address:** You can collect an email address directly in the Payment Element. If you’re not collecting the email address anywhere in the checkout flow, we recommend this approach.\n*   **Link Authentication Element:** You can use the Link Authentication Element to create a single email input field for both email collection and Link authentication. We recommend doing this if you use the [Address Element](https://docs.stripe.com/elements/address-element).\n\n![Authenticate or enroll with Link directly in the Payment Element during checkout](https://b.stripecdn.com/docs-statics-srv/assets/link-in-pe.2efb5138a4708b781b8a913ebddd9aba.png)\n\nCollect a customer email address for Link authentication or enrollment\n\n[](#set-up-stripe)\n\nFirst, [create a Stripe account](https://dashboard.stripe.com/register) or [sign in](https://dashboard.stripe.com/login).\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#create-customer)\n\nTo set up a payment method for future payments, you must attach it to a [Customer](https://docs.stripe.com/api/customers \"Customers\"). Create a `Customer` object when your customer creates an account with your business. `Customer` objects allow for reusing payment methods and tracking across multiple payments.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#web-create-intent)\n\n#### Note\n\nA [SetupIntent](https://docs.stripe.com/api/setup_intents) is an object that represents your intent to set up a customer’s payment method for future payments during a session and tracks the status of that session. Create a SetupIntent on your server with `link` and the other payment methods you want to support:\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer={{CUSTOMER_ID}} \\   -d \"payment_method_types[]\"=card \\  -d \"payment_method_types[]\"=link`\n\nTo see how to set up other payment methods, see the [Set up future payments](https://docs.stripe.com/payments/save-and-reuse) guide.\n\n### Retrieve the client secret![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe SetupIntent includes a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") that the client side uses to securely complete the payment process. You can use different approaches to pass the client secret to the client side.\n\nRetrieve the client secret from an endpoint on your server, using the browser’s `fetch` function. This approach is best if your client side is a single-page application, particularly one built with a modern frontend framework like React. Create the server endpoint that serves the client secret:\n\n`get '/secret' do   intent = # ... Create or retrieve the SetupIntent   {client_secret: intent.client_secret}.to_json end`\n\nAnd then fetch the client secret with JavaScript on the client side:\n\n`(async () => {   const response = await fetch('/secret');   const {client_secret: clientSecret} = await response.json();   // Render the form using the clientSecret })();`\n\n[](#design-your-integration)\n\nLink authenticates a customer by using their email address. Depending on your checkout flow, you have the following options: pass an email to the Payment Element, collect it directly within the Payment Element, or use the Link Authentication Element. Of these, Stripe recommends passing a customer email address to the Payment Element if available.\n\nIf _any_ of the following apply to you:\n\n*   You want a single, optimized component for email collection and Link authentication.\n*   You need to collect a shipping address from your customer.\n\nThen use the integration flow that implements these elements: the Link Authentication Element, Payment Element and optional Address Element.\n\nA Link-enabled checkout page has the Link Authentication Element at the beginning, followed by the Address Element, and the Payment Element at the end. You can also display the Link Authentication Element on separate pages, in this same order, for multi-page checkout flows.\n\n![Create a payment form using multiple Elements](https://b.stripecdn.com/docs-statics-srv/assets/link-with-elements.f60af275f69b6e6e73c766d1f9928457.png)\n\nCreate a payment form using multiple Elements\n\nThe integration works as follows:\n\n[](#web-collect-payment-details)\n\nNow you can set up your custom payment form with the Elements prebuilt UI components. Your payment page address must start with `https://` rather than `http://` for your integration to work. You can test your integration without using HTTPS. [Enable HTTPS](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\nThe Link Authentication Element renders an email address input. When Link matches a customer email with an existing Link account, it sends the customer a secure, one-time code to their phone to authenticate. If the customer successfully authenticates, Stripe displays their Link-saved addresses and payment methods automatically for them to use.\n\nThis integration also creates the Payment Element, which renders a dynamic form that allows your customer to pick a payment method type. The form automatically collects all necessary payments details for the payment method type selected by the customer. The Payment Element also handles the display of Link-saved payment methods for authenticated customers.\n\n### Set up Stripe Elements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nInstall React Stripe.js and the Stripe.js loader from the [npm public registry](https://www.npmjs.com/package/@stripe/react-stripe-js).\n\n`npm install --save @stripe/react-stripe-js @stripe/stripe-js`\n\nOn your payment page, wrap your payment form with the `Elements` component, passing the [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret) from [the previous step](#web-create-intent). ​​If you already collect the customer’s email in another part of your form, replace your existing input with the `linkAuthenticationElement​`.\n\nIf you don’t collect email, add the `linkAuthenticationElement​` to your checkout flow. You must place the `linkAuthenticationElement` before the `ShippingAddressElement` (optional if you collect shipping addresses) and the `PaymentElement` for Link to autofill Link-saved details for your customer in the `ShippingAddressElement` and `PaymentElement`. You can also pass in the [appearance option](https://docs.stripe.com/elements/appearance-api), customizing the Elements to match the design of your site.\n\nIf you have the customer’s email, pass it to the `defaultValues` option of the `linkAuthenticationElement`. This prefills their email address and initiates the Link authentication process.\n\nIf you have other customer information, pass it to the `defaultValues.billingDetails` object for the `PaymentElement`. Prefilling as much information as possible simplifies Link account creation and reuse for your customers.\n\nThen, render the `linkAuthenticationElement` and `PaymentElement` components in your payment form:\n\n`import {loadStripe} from \"@stripe/stripe-js\"; import {   Elements,   LinkAuthenticationElement,   PaymentElement, } from \"@stripe/react-stripe-js\";  const stripe = loadStripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  // Customize the appearance of Elements using the Appearance API. const appearance = {/* ... */};  // Enable the skeleton loader UI for the optimal loading experience. const loader = 'auto';`\n\nThe `linkAuthenticationElement`, `PaymentElement`, and `ShippingAddressElement` don’t need to be on the same page. If you have a process where customer contact information, shipping details, and payment details display to the customer in separate steps, you can display each Element in the appropriate step or page. Include the `linkAuthenticationElement` as the email input form in the contact info collection step to make sure the customer can take full advantage of the shipping and payment autofill provided by Link.\n\nIf you collect your customer’s email with the Link Authentication Element early in the checkout flow, you don’t need to show it again on the shipping or payment pages.\n\n### Retrieve an email address ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can retrieve the email address details using the `onChange` prop on the `linkAuthenticationElement` component. The `onChange` handler fires whenever the user updates the email field, or when a saved customer email is autofilled.\n\n`<linkAuthenticationElement onChange={(event) => {   setEmail(event.value.email); }} />`\n\n### Prefill a customer email address ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Link Authentication Element accepts an email address. Providing a customer’s email address triggers the Link authentication flow as soon as the customer lands on the payment page using the `defaultValues` option.\n\n`<linkAuthenticationElement options={{defaultValues: {email: 'foo@bar.com'}}}/>`\n\n[](#web-submit-payment)\n\nUse [stripe.confirmSetup](https://docs.stripe.com/js/setup_intents/confirm_setup) to complete the setup with the details you collected. Provide a [return\\_url](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-return_url) to this function so that Stripe can redirect users after they complete their setup. When a payment is successful, Stripe immediately redirects Link and card payments to the `return_url`.\n\n`import {loadStripe} from \"@stripe/stripe-js\"; import {   useStripe,   useElements,   Elements,   LinkAuthenticationElement,   PaymentElement,   // If collecting shipping   AddressElement, } from \"@stripe/react-stripe-js\";  const stripe = loadStripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const appearance = {/* ... */};  // Enable the skeleton loader UI for the optimal loading experience. const loader = 'auto';  const CheckoutPage =({clientSecret}) => (   <Elements stripe={stripe} options={{clientSecret, appearance, loader}}>     <CheckoutForm />   </Elements> );  export default function CheckoutForm() {   const stripe = useStripe();   const elements = useElements();    const handleSubmit = async (event) => {     event.preventDefault();      const {error} = await stripe.confirmSetup({       elements,       confirmParams: {         return_url: \"[https://example.com/order/123/complete](https://example.com/order/123/complete)\",       },     });      if (error) {       // handle error     }   };    return (     <form onSubmit={handleSubmit}>       <h3>Contact info</h3>       <LinkAuthenticationElement />       {/* If collecting shipping */}       <h3>Shipping</h3>       <AddressElement options={{mode: 'shipping', allowedCountries: ['US']}} />       <h3>Payment</h3>       <PaymentElement />        <button type=\"submit\">Submit</button>     </form>   ); }`\n\n[](#charge-saved-payment-method)\n\nWhen you’re ready to charge your customer, use the Customer and PaymentMethod IDs to create a PaymentIntent. To find a payment method to charge, list the payment methods associated with your customer.\n\n`curl https://api.stripe.com/v1/payment_methods \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"type\"=\"link\" \\   -G`\n\nWhen you have the Customer and PaymentMethod IDs, create a PaymentIntent with the amount and currency of the payment with these parameters:\n\n*   Set the value of the PaymentIntent’s [confirm](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-confirm) property to `true`, which causes confirmation to occur immediately when the PaymentIntent is created.\n*   Set [payment\\_method](https://docs.stripe.com/api#create_payment_intent-payment_method) to the ID of the PaymentMethod\n*   Set [customer](https://docs.stripe.com/api#create_payment_intent-customer) to the ID of the Customer.\n*   Set [off\\_session](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-off_session) to `true`. This causes the PaymentIntent to send an error if authentication is required when your customer isn’t actively using your site or app.\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n``: \\   -d amount=1099 \\   -d currency=usd \\   # In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default.   -d \"automatic_payment_methods[enabled]\"=true \\   -d customer=\"{{CUSTOMER_ID}}\" \\   -d payment_method=\"{{PAYMENT_METHOD_ID}}\" \\   -d return_url=\"https://example.com/order/123/complete\" \\   -d off_session=true \\   -d confirm=true``\n\n[](#web-test-the-integration)\n\n#### Caution\n\nDon’t store real user data in [test mode](https://docs.stripe.com/test-mode \"test mode\") Link accounts. Treat them as if they’re publicly available, because these test accounts are associated with your publishable key.\n\nCurrently, Link only works with credit cards, debit cards, and qualified US bank account purchases. Link requires [domain registration](https://docs.stripe.com/payments/payment-methods/pmd-registration).\n\nYou can create test mode accounts for Link using any valid email address. The following table shows the fixed one-time passcode values that Stripe accepts for authenticating test mode accounts:\n\n| Value | Outcome |\n| --- | --- |\n| Any other 6 digits not listed below | Success |\n| 000001 | Error, code invalid |\n| 000002 | Error, code expired |\n| 000003 | Error, max attempts exceeded |\n\nFor testing specific payment methods, refer to the [Payment Element testing examples](https://docs.stripe.com/payments/accept-a-payment?platform=web#additional-testing-resources).\n\n### Multiple funding sources![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs Stripe adds additional funding source support, you don’t need to update your integration. Stripe automatically supports them with the same transaction settlement time and guarantees as card and bank account payments.\n\n### Card authentication and 3D Secure![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLink supports [3D Secure 2 (3DS2)](https://stripe.com/guides/3d-secure-2 \"3D Secure 2 (3DS2)\") authentication for card payments. 3DS2 requires customers to complete an additional verification step with the card issuer when paying. Payments that have been successfully authenticated using 3D Secure are covered by a liability shift.\n\nTo trigger 3DS2 authentication challenge flows with Link in test mode, use the following test card with any CVC, postal code, and future expiration date: .\n\nIn test mode, the authentication process displays a mock authentication page. On that page, you can either authorize or cancel the payment. Authorizing the payment simulates successful authentication and redirects you to the specified return URL. Clicking the **Failure** button simulates an unsuccessful attempt at authentication.\n\nFor more details, refer to the [3D Secure authentication page](https://docs.stripe.com/payments/3d-secure).\n\n#### Note\n\nWhen testing 3DS flows, only test cards for 3DS2 will trigger authentication on Link.\n\n[](#disclose-cookies)\n\nStripe collects information on customer interactions with Elements to provide services to you, prevent fraud, and improve its services. This includes using cookies and IP addresses to identify which Elements a customer saw during a single checkout session. You’re responsible for disclosing and obtaining all rights and consents necessary for Stripe to use data in these ways. For more information, visit our [privacy center](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [What is Link](https://docs.stripe.com/payments/link/what-is-link)\n*   [Link in the Payment Element](https://docs.stripe.com/payments/link/payment-element-link)\n*   [Explore the Link Authentication Element](https://docs.stripe.com/payments/link/link-authentication-element)",
    "title": "Set up future payments using Elements and Link | Stripe Documentation",
    "description": "Save your Link customers' details and charge them later.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/payments/bacs-debit/save-bank-details",
    "markdown": "# Save Bacs Direct Debit bank details\n\n## Learn how to use Checkout to save payment method details for future Bacs Direct Debit payments.\n\nUse [Stripe Checkout](https://docs.stripe.com/payments/checkout) to collect Bacs Direct Debit payment details in advance, with the final amount or payment date determined later. This is useful for:\n\n*   Saving payment methods to a wallet to streamline future purchases.\n*   Collecting surcharges after fulfilling a service.\n*   [Starting a free trial for a subscription](https://docs.stripe.com/billing/subscriptions/trials).\n\n[](#set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#create-customer)\n\nTo reuse a Bacs Direct Debit payment method for future payments, you must attach it to a [Customer](https://docs.stripe.com/api/customers \"Customers\"). Create a Customer object when someone creates an account with you and associate the ID of the Customer object with your own internal representation of a customer so you can use the stored payment method details later. If you have an existing Customer object, skip this step.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#create-checkout-session)\n\nBefore you can accept Direct Debit payments, your customer must provide their bank account information and give permission to debit their account (also known as a [mandate](https://docs.stripe.com/payments/payment-methods/bacs-debit#mandates)) through Stripe Checkout.\n\nAdd a checkout button to your website that calls a server-side endpoint to create a Checkout Session.\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nCreate a Checkout Session in `setup` mode to collect the required information. After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) returned in the response.\n\nWhen your customer provides their payment method details, they’re redirected to the `success_url`, a page on your website that informs them that their payment method was saved successfully. Make the Session ID available on your success page by including the `{CHECKOUT_SESSION_ID}` template variable in the `success_url` as in the above example.\n\nWhen your customer clicks on your logo in a Checkout Session without providing their payment method details, Checkout redirects them back to your website by navigating to the `cancel_url`. This is usually the page on your website that the customer viewed prior to redirecting to Stripe Checkout.\n\n#### Caution\n\nDon’t rely on the redirect to the `success_url` alone for detecting payment initiation, as:\n\n*   Malicious users could directly access the `success_url` without paying and gain access to your goods or services.\n*   Customers may not always reach the `success_url` after a successful payment—they might close their browser tab before the redirect occurs.\n\n#### Note\n\nThe Bacs Direct Debit rules require that customers are sent an email notification when payment details are collected. By default, these emails are sent automatically by Stripe. You can also opt to [send your own Bacs notifications](https://docs.stripe.com/payments/payment-methods/bacs-debit#debit-notifications).\n\n[](#retrieve-payment-method)\n\nAfter a customer submits their payment details, retrieve the [PaymentMethod](https://docs.stripe.com/payments/payment-methods) object. A [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") stores the customer’s bank account information for future payments. You can retrieve the PaymentMethod synchronously using the `success_url` or asynchronously using [webhooks](https://docs.stripe.com/webhooks \"webhook\").\n\nThe decision to retrieve the PaymentMethod synchronously or asynchronously depends on your tolerance for dropoff, as customers might not always reach the `success_url` after a successful payment (for example, it’s possible for them to close their browser tab before the redirect occurs). Using webhooks prevents your integration from experiencing this form of dropoff.\n\nHandle `checkout.session.completed` webhooks, which contain a Session object. To learn more, see [setting up webhooks](https://docs.stripe.com/webhooks). The following example is a `checkout.session.completed` response.\n\n`{   \"id\": \"evt_1Ep24XHssDVaQm2PpwS19Yt0\",   \"object\": \"event\",   \"api_version\": \"2019-03-14\",   \"created\": 1561420781,   \"data\": {     \"object\": {       \"id\": \"cs_test_MlZAaTXUMHjWZ7DcXjusJnDU4MxPalbtL5eYrmS2GKxqscDtpJq8QM0k\",       \"object\": \"checkout.session\",       \"billing_address_collection\": null,       \"cancel_url\": \"[https://example.com/cancel](https://example.com/cancel)\",       \"client_reference_id\": null,       \"customer\": null,       \"customer_email\": null,       \"display_items\": [],       \"mode\": \"setup\",       \"setup_intent\": \"seti_1EzVO3HssDVaQm2PJjXHmLlM\",       \"submit_type\": null,       \"subscription\": null,       \"success_url\": \"[https://example.com/success](https://example.com/success)\"     }   },   \"livemode\": false,   \"pending_webhooks\": 1,   \"request\": {     \"id\": null,     \"idempotency_key\": null   },   \"type\": \"checkout.session.completed\" }`\n\nNote the value of the `setup_intent` key, which is the ID for the SetupIntent created with the Checkout Session. A [SetupIntent](https://docs.stripe.com/payments/setup-intents) is an object used to set up the customer’s bank account information for future payments. [Retrieve](https://docs.stripe.com/api/setup_intents/retrieve) the SetupIntent object with the ID.\n\n`curl https://api.stripe.com/v1/setup_intents/seti_1EzVO3HssDVaQm2PJjXHmLlM \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[\n\n## Handle post-setup events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-post-setup-events)\n\nOnce the Checkout Session completes, payment details are submitted to the bank as a mandate.\n\nThe mandate can change at any time after you’ve collected it. This might be the result of the customer instructing their bank to amend the mandate or because of a change in the bank itself (for example, the customer changes to a different one). Stripe sends the following events when the mandate changes:\n\n| Event name | Description | Can accept payments? |\n| --- | --- | --- |\n| `mandate.updated` | Occurs whenever a mandate is rejected, canceled, or reactivated by the Bacs network. Check [mandate.status](https://docs.stripe.com/api/mandates/object#mandate_object-status) to determine if the mandate can continue to be used. | Yes, if the new status is `active` |\n| `payment_method.automatically_updated` | Occurs when a customer’s bank account details change. | Yes |\n\nThese events are available in the [Dashboard](https://dashboard.stripe.com/events), but you can set up a [webhook](https://docs.stripe.com/webhooks \"webhook\") to handle these programatically.\n\n[](#testing)\n\nThere are several test bank account numbers you can use in [test mode](https://docs.stripe.com/keys#test-live-modes) to make sure this integration is ready.\n\n| Sort code | Account number | Description |\n| --- | --- | --- |\n| 108800 | 00012345 | The payment succeeds and the PaymentIntent transitions from `processing` to `succeeded`. |\n| 108800 | 90012345 | The payment succeeds after three minutes and the PaymentIntent transitions from `processing` to `succeeded`. |\n| 108800 | 33333335 | The payment is accepted but then immediately fails with a `debit_not_authorized` failure code and the PaymentIntent transitions from `processing` to `requires_payment_method`. The Mandate becomes `inactive` and the PaymentMethod can not be used again. |\n| 108800 | 93333335 | The payment fails after three minutes with a `debit_not_authorized` failure code and the PaymentIntent transitions from `processing` to `requires_payment_method`. The Mandate becomes `inactive` and the PaymentMethod can not be used again. |\n| 108800 | 22222227 | The payment fails with an `insufficient_funds` failure code and the PaymentIntent transitions from `processing` to `requires_payment_method`. The Mandate remains `active` and the PaymentMethod can be used again. |\n| 108800 | 92222227 | The payment fails after three minutes with an `insufficient_funds` failure code and the PaymentIntent transitions from `processing` to `requires_payment_method`. The Mandate remains `active` and the PaymentMethod can be used again. |\n| 108800 | 55555559 | The payment succeeds after three minutes and the PaymentIntent transitions from `processing` to `succeeded`, but a dispute is immediately created. |\n| 108800 | 00033333 | Payment Method creation succeeds, but the Mandate is refused by the customer’s bank and immediately transitions to inactive. |\n| 108800 | 00044444 | The request to set up Bacs Direct Debit fails immediately due to an invalid account number and the customer is prompted to update their information before submitting. Payment details are not collected. |\n\nYou can test using any of the account numbers provided above. However, because Bacs Direct Debit payments take several days to process, use the test account numbers that operate on a three-minute delay to better simulate the behavior of live payments.\n\n#### Note\n\nBy default, Stripe automatically sends [emails](https://docs.stripe.com/payments/payment-methods/bacs-debit#debit-notifications) to the customer when payment details are initially collected and each time a debit will be made on their account. These notifications aren’t sent in testmode.\n\n[](#charge-later)\n\nAfter you set up a [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\"), you can accept future Bacs Direct Debit payments by creating and confirming a [PaymentIntent](https://docs.stripe.com/payments/payment-intents).\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"payment_method_types[]\"=\"bacs_debit\" \\   -d payment_method=  {{PAYMENT_METHOD_ID}}   \\   -d customer=  {{CUSTOMER_ID}}   \\   -d confirm=true \\   -d amount=100 \\   -d currency=gbp`",
    "title": "Save Bacs Direct Debit bank details | Stripe Documentation",
    "description": "Learn how to use Checkout to save payment method details for future Bacs Direct Debit payments.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/stripe-data/query-disputes-and-fraud-data",
    "markdown": "# Query disputes and fraud data\n\n## Use Sigma or Data Pipeline to retrieve information about disputes and fraud.\n\nThe `disputes` table contains data about all [disputes](https://docs.stripe.com/disputes) on your account. Each row represents a [Dispute](https://docs.stripe.com/api#dispute_object) object, which is created when a charge is disputed. Each dispute also includes any available data about dispute evidence that you’ve submitted.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/disputes.f293434123d316ff4fafe2524e9b2b0d.png)\n\nThe following example provides some preliminary information about the five most recent lost disputes. It joins the `disputes` and `charges` tables together using the `disputes.charge_id` and `charges.id` columns. Along with a dispute ID, each row contains an associated charge ID, the amount, and the outcome of the ZIP and CVC checks.\n\n`select   date_format(date_trunc('day', disputes.created), '%m-%d-%Y') as day,   disputes.id,   disputes.charge_id,   disputes.amount,   charges.card_address_zip_check as zip,   charges.card_cvc_check as cvc from disputes inner join charges on charges.id=disputes.charge_id where disputes.status = 'lost' and disputes.reason = 'fraudulent' order by day desc limit 5`\n\n| day | id  | charge\\_id | amount | zip | cvc |\n| --- | --- | --- | --- | --- | --- |\n| 7/12/2024 | dp\\_ql1JydyICDzQdIN | ch\\_1aUtynRz8NHZFZE | 1,000 |     | pass |\n| 7/12/2024 | dp\\_k3jODII6SYhwcuF | ch\\_PM01uQfmU1rkaRX | 1,000 | pass | fail |\n| 7/12/2024 | dp\\_AINyCojwEdlMuEW | ch\\_TBIr7SeMSwznLDB | 1,000 | fail | fail |\n| 7/12/2024 | dp\\_SBtr2BTAXnuPn7U | ch\\_8xbnI8BXrqZiQ3c | 1,000 |     | pass |\n| 7/12/2024 | dp\\_pm2F8yBXsbUpO27 | ch\\_ib33xzxnayfOc0q | 1,000 |     | pass |\n\nUsing Sigma or Data Pipeline to create reports about your disputes can help you identify fraudulent payments, which you can prevent by using [Radar](https://docs.stripe.com/radar \"Radar\").\n\n## Radar for Fraud Teams Data![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you use Radar for Fraud Teams, you have a table `radar_rules` that contains all Radar custom rules with their action and predicate. You can use this to obtain the `rule_id` which can then be used in `rule_decisions` table to find all charges affected by rules. This is more flexible than looking at the `outcome_rule_id` attribute in the `charges` table, as it also shows 3DS Rules triggered for Payment Intents and Setup Intents. Radar’s [built-in rules](https://docs.stripe.com/radar/rules#built-in-rules) have fixed rule IDs.\n\nThe following example shows recent payments allowed by an allow-list and their Radar score to check if potentially fraudulent payments were allowed:\n\n`select   outcome_type,   card_cvc_check,   count(*) as cnt,   avg(outcome_risk_score) as avg_risk_score from   charges where   outcome_rule_id = 'allow_if_in_allowlist'   and created >= current_date - interval '14' day group by   1,   2`\n\n### Platform data![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMultiparty payment businesses such as Connect platforms have [particular risk management requirements](https://docs.stripe.com/connect/risk-management). Here’s an example of listing [destination charge](https://docs.stripe.com/connect/destination-charges) businesses on your platform by their dispute rate:\n\n`select   m.value as merchant_external_account_id,   c.destination_id,   arbitrary(a.business_name) as destination_name,   count(*) as cnt_charges,   count_if(c.paid) as cnt_success_charges,   count_if(c.paid) * 1.0 / count(*) as success_rate,   if(     count_if(dispute_id is not null) > 0,     count_if(c.paid) * 1.0 / count_if(c.paid),     0.0   ) as dispute_rate from   charges c   left join charges_metadata m on m.charge_id = c.id   and m.key = 'merchant_external_account_id'   join connected_accounts a on a.id = c.destination_id where   c.created >= current_date - interval '120' day group by   1,2 order by dispute_rate desc`\n\n### 3D Secure Data![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSigma and Data Pipelines contains data on 3D Secure Authentication ([3DS](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\")). This more complex example shows for each 3DS Rule how many times it triggered 3DS and what the outcomes were, considering there might be more than one attempt:\n\n`select   rd.rule_id,   count(distinct rd.id) as cnt_rule_triggered,   count(distinct rd.payment_intent_id) * 1.0 / count(distinct rd.id) * 100.0 as pct_pis,   count_if(at.is_final_attempt) * 1.0 / count(distinct rd.id) * 100.0 as pct_final_attempts,   count_if(     at.is_final_attempt     and at.threeds_outcome_result = 'authenticated'   ) * 1.0 / count(distinct rd.id) * 100.0 as pct_3ds_final_authenticated,   count_if(     at.threeds_outcome_result = 'authenticated'     and at.charge_outcome = 'authorized'   ) * 1.0 / count(distinct rd.id) * 100.0 as pct_3ds_authorized from   rule_decisions rd   left join authentication_report_attempts at on at.intent_id = rd.payment_intent_id where   action = 'request_credentials'   and rd.created >= current_date - interval '30' day group by   1`\n\n### All Radar Rule Attributes and Decisions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou also have access to the `radar_rule_attributes` table. Each row contains most of the [Radar rule attribute](https://docs.stripe.com/radar/rules/reference#supported-attributes) values for a single [charge](https://docs.stripe.com/api/charges/object). You can join the `radar_rule_attributes` and `disputes` tables together using the `radar_rule_attributes.transaction_id` and `disputes.charge_id` columns, which allows you to write rules targeting your disputes and understand trends in your good and bad customers.\n\n`select   card_3d_secure_support,   is_3d_secure_authenticated,   cvc_check,   avg(risk_score) as avg_risk_score,   avg(total_charges_per_card_number_all_time) as avg_total_charges_per_card_number_all_time,   count(*) as cnt_disputes from   radar_rule_attributes r   join disputes d on r.transaction_id = d.charge_id where   d.created >= current_date - interval '60' day group by   1,2,3 order by   cnt_disputes desc`\n\nFor more details on columns available see our guide on [How to continuously improve your fraud management with Radar for Fraud Teams and Stripe Data](https://stripe.com/guides/improve-fraud-management-with-radar-for-fraud-teams-and-stripe-data). It explains, for instance, where to find Radar scores per Charges and so on.\n\n## Tracking Monitoring Programs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Card brand monitoring program](https://docs.stripe.com/disputes/monitoring-programs) metrics are difficult to track because rules are very specific. Some details are crucial, such as when to use volume or transaction count. Tracking them is required to estimate fraud and chargeback levels and take action promptly, because monitoring program notifications don’t happen immediately. We recommend a [continous process](https://stripe.com/guides/improve-fraud-management-with-radar-for-fraud-teams-and-stripe-data) to track and estimate chargeback and fraud metrics.\n\nWith Sigma, you can write a query to estimate fraud levels that simulate how card monitoring programs might assess your payments. The query below isn’t perfect (for example, we assume this is a US merchant where domestic and cross-border payments are counted, but you can adjust the query for your use case). Most importantly, it takes FX (currency exchange rates) into account, and applies the same method of counting payment and fraud periods independently as the monitoring programs typically do.\n\n`with exchange_rates as (   select     date,     currency,     rate   from     exchange_rates_from_usd     cross join unnest (       cast(         json_parse(buy_currency_exchange_rates) as map(varchar, double)       )     ) as t(currency, rate)   where     date = (       select         max(date)       from         exchange_rates_from_usd     ) -- note the calculation for jpy is decimal and may look off ), payments as (   select     -- technically these values are calculated per statement descriptor for CNP but we assume this equals merchant     date_format(p.captured_at, '%Y-%m-01') as start_of_month,     if(       p.card_brand = 'Visa'       or p.card_brand = 'MasterCard',       p.card_brand,       'Other'     ) as network,     count(*) as sales_count,     -- For US, both Cross-Border and Domestic charges are counted     -- we can ignore this in CBMP but show it here just to get a magnitude     count_if(p.card_country != 'US') as sales_count_crossborder,     count_if(pmd.card_3ds_succeeded) as sales_count_3ds,     sum(p.amount / fx.rate / 100.0) as sales_volume_usd,     sum(       if(         p.card_country != 'US',         p.amount / fx.rate / 100.0       )     ) as sales_volume_crossborder_usd,     sum(       if(         p.card_country = 'US'         and pmd.card_3ds_succeeded,         p.amount / fx.rate / 100.0       )     ) as sales_volume_3ds_us_usd   from     charges p     join exchange_rates fx on p.currency = fx.currency     left join payment_method_details pmd on pmd.charge_id = p.id     -- for more information you may use     -- left join authentication_report_attempts aa on attempt_id intent_id   where     p.captured_at >= date_trunc('month', current_date - interval '150' day)     -- CBMPs only consider cleared amounts; refunds still count in the volume unless reversed     and p.status = 'succeeded'     and p.payment_method_type = 'card'   group by     1,     2 -- used for VFMP ), efw as (   select     date_format(e.created, '%Y-%m-01') as start_of_month,     if(       c.card_brand = 'Visa'       or c.card_brand = 'MasterCard',       c.card_brand,       'Other'     ) as network,     -- For US, both Cross-Border and Domestic charges are counted     -- count_if(card_country != 'US') as efw_count_crossborder     count(distinct c.id) as efw_count,     count(distinct if(pmd.card_3ds_succeeded, c.id)) as efw_count_3ds,     sum(c.amount / fx.rate / 100.0) as efw_volume_usd,     sum(       if(         pmd.card_3ds_succeeded,         c.amount / fx.rate / 100.0       )     ) as efw_volume_3ds_usd,     -- for VFMP-3DS     sum(       if(         c.card_country = 'US'         and pmd.card_3ds_succeeded,         c.amount / fx.rate / 100.0       )     ) as efw_volume_3ds_us_usd   from     early_fraud_warnings e     join charges c on e.charge_id = c.id     join exchange_rates fx on c.currency = fx.currency     left join payment_method_details pmd on pmd.charge_id = c.id   where     e.created >= date_trunc('month', current_date - interval '150' day)   group by     1,     2 -- used for VDMP and ECM/ECP ), disputes as (   select     date_format(d.created, '%Y-%m-01') as start_of_month,     if(       c.card_brand = 'Visa'       or c.card_brand = 'MasterCard',       c.card_brand,       'Other'     ) as network,     -- For US, both Cross-Border and Domestic charges are counted     -- count_if(card_country != 'US') as dispute_count_crossborder     -- Because a payment can have multiple disputes, we count the disputes here     count(distinct d.id) as dispute_count_all,     count(distinct if(d.reason = 'fraudulent', d.id)) as fraud_dispute_count_all,     count(       distinct if(         d.network_details_visa_rapid_dispute_resolution,         d.id       )     ) as dispute_count_rdr,     count(       distinct if(         d.network_details_visa_rapid_dispute_resolution is null         or not d.network_details_visa_rapid_dispute_resolution,         d.id       )     ) as dispute_count_exrdr,     count(distinct if(pmd.card_3ds_succeeded, d.id)) as dispute_count_3ds,     count(       distinct if(         d.reason = 'fraudulent'         and pmd.card_3ds_succeeded,         d.id       )     ) as fraud_dispute_count_3ds,     count(       distinct if(         d.reason = 'fraudulent'         and (           d.network_details_visa_rapid_dispute_resolution is null           or not d.network_details_visa_rapid_dispute_resolution         ),         d.id       )     ) as fraud_dispute_count_exrdr,     count_if(d.status = 'won') * 1.0 / count_if(       d.status = 'won'       or d.status = 'lost'     ) as win_rate,     -- The sum of disputes should match and cannot exceed the payment     sum(d.amount / fx.rate / 100.0) as dispute_volume_usd_all,     sum(       if(         reason = 'fraudulent',         d.amount / fx.rate / 100.0       )     ) as fraud_dispute_volume_usd_all,     sum(       if(         (           d.network_details_visa_rapid_dispute_resolution is null           or not d.network_details_visa_rapid_dispute_resolution         ),         d.amount / fx.rate / 100.0       )     ) as dispute_volume_usd_exrdr,     sum(       if(         d.reason = 'fraudulent'         and (           d.network_details_visa_rapid_dispute_resolution is null           or not d.network_details_visa_rapid_dispute_resolution         ),         d.amount / fx.rate / 100.0       )     ) as fraud_dispute_volume_usd_exrdr   from     disputes d     join charges c on d.charge_id = c.id     join exchange_rates fx on c.currency = fx.currency     left join payment_method_details pmd on pmd.charge_id = c.id   where     -- current month data will usually be off due to dispute delays,     -- we still show it as an indicator but it's better tracked weekly     d.created >= date_trunc('month', current_date - interval '150' day)   group by     1,     2 ) select   -- theoretically this might cause gaps if there is a month   -- without payments but a helper table with continuous dates would complicate this example query   p.start_of_month,   p.network,   -- Used for VDMP/ECP/ECM/HEC   p.sales_count,   lag(p.sales_count, 1) over (     order by       p.network,       p.start_of_month   ) as sales_count_prior_month,   p.sales_count_crossborder,   p.sales_count_3ds,   -- Used for VFMP   p.sales_volume_usd,   p.sales_volume_crossborder_usd,   p.sales_volume_3ds_us_usd,   e.efw_count,   e.efw_count_3ds,   -- Used for VFMP   e.efw_volume_usd,   e.efw_volume_3ds_usd,   -- Used for VFMP-3DS   e.efw_volume_3ds_us_usd,   -- Used for VDMP/ECP/ECM/HEC   d.dispute_count_all,   d.dispute_count_rdr,   d.fraud_dispute_count_all,   d.dispute_count_exrdr,   d.dispute_count_3ds,   d.fraud_dispute_count_3ds,   d.fraud_dispute_count_exrdr,   d.dispute_volume_usd_all,   -- Used for EFM   d.fraud_dispute_volume_usd_all,   d.dispute_volume_usd_exrdr,   d.fraud_dispute_volume_usd_exrdr,   d.win_rate,   -- we show all the values below for all networks for comparison but they are only relevant for the indicated ones   -- VDMP deducting RDR actuals   if(     p.network = 'visa',     d.dispute_count_exrdr,     d.dispute_count_all   ) * 1.0 / p.sales_count as rdr_chargeback_ratio_for_visa,   -- ECP/ECM/HECM based on prior month sales   d.dispute_count_all * 1.0 / lag(p.sales_count, 1) over (     order by       p.network,       p.start_of_month   ) as all_chargeback_ratio_for_mastercard,   -- VDMP ignoring RDR and ECP/ECM/HECM for crosscheck   d.dispute_count_all * 1.0 / p.sales_count as all_chargeback_ratio_for_visa_and_mastercard,   -- VFMP   e.efw_volume_usd * 1.0 / p.sales_volume_usd as fraud_ratio_for_visa,   -- VFMP-3DS   e.efw_volume_3ds_us_usd * 1.0 / p.sales_volume_3ds_us_usd as fraud_ratio_for_visa_3ds,   -- EFM based on prior month sales   d.fraud_dispute_count_all * 1.0 / lag(p.sales_count, 1) over (     order by       p.network,       p.start_of_month   ) as fraud_ratio_for_mastercard from   payments p   left join efw e on p.start_of_month = e.start_of_month   and p.network = e.network   left join disputes d on p.start_of_month = d.start_of_month   and p.network = d.network order by   start_of_month desc,   network;`",
    "title": "Query disputes and fraud data | Stripe Documentation",
    "description": "Use Sigma or Data Pipeline to retrieve information about disputes and fraud.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payouts/failures",
    "markdown": "# The Payout object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The amount (in cents) that transfers to your bank account or debit card.\n    \n*   Date that you can expect the payout to arrive in the bank. This factors in delays to account for weekends or bank holidays.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    statement\\_descriptornullable string\n    \n    Extra information about a payout that displays on the user’s bank statement.\n    \n*   Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it’s submitted to the bank, when it becomes `in_transit`. The status changes to `paid` if the transaction succeeds, or to `failed` or `canceled` (within 5 business days). Some payouts that fail might initially show as `paid`, then change to `failed`.\n    \n\n### More attributes\n\n*   #### \n    \n    application\\_feenullable stringExpandableConnect only\n    \n*   #### \n    \n    application\\_fee\\_amountnullable integerConnect only\n    \n\n*   #### \n    \n    balance\\_transactionnullable stringExpandable\n    \n\n*   #### \n    \n    destinationnullable stringExpandable\n    \n*   #### \n    \n    failure\\_balance\\_transactionnullable stringExpandable\n    \n*   #### \n    \n    failure\\_codenullable enum\n    \n*   #### \n    \n    failure\\_messagenullable string\n    \n\n*   #### \n    \n    original\\_payoutnullable stringExpandable\n    \n*   #### \n    \n    reconciliation\\_statusenum\n    \n*   #### \n    \n    reversed\\_bynullable stringExpandable\n    \n\n```\n{  \"id\": \"po_1OaFDbEcg9tTZuTgNYmX0PKB\",  \"object\": \"payout\",  \"amount\": 1100,  \"arrival_date\": 1680652800,  \"automatic\": false,  \"balance_transaction\": \"txn_1OaFDcEcg9tTZuTgYMR25tSe\",  \"created\": 1680648691,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"ba_1MtIhL2eZvKYlo2CAElKwKu2\",  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"metadata\": {},  \"method\": \"standard\",  \"original_payout\": null,  \"reconciliation_status\": \"not_applicable\",  \"reversed_by\": null,  \"source_type\": \"card\",  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"bank_account\"}\n```\n\n## [Create a payout](https://docs.stripe.com/api/payouts/create)\n\nTo send funds to your own bank account, create a new payout object. Your [Stripe balance](#balance) must cover the payout amount. If it doesn’t, you receive an “Insufficient Funds” error.\n\nIf your API key is in test mode, money won’t actually be sent, though every other action occurs as if you’re in live mode.\n\nIf you create a manual payout on a Stripe account that uses multiple payment source types, you need to specify the source type balance that the payout draws from. The [balance object](#balance_object) details available and pending amounts by source type.\n\n### Parameters\n\n*   A positive integer in cents representing how much to payout.\n    \n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   #### \n    \n    statement\\_descriptorstring\n    \n    A string that displays on the recipient’s bank or card statement (up to 22 characters). A `statement_descriptor` that’s longer than 22 characters return an error. Most banks truncate this information and display it inconsistently. Some banks might not display it at all.\n    \n\n### More parameters\n\n### Returns\n\nReturns a payout object if no initial errors are present during the payout creation (invalid routing number, insufficient funds, and so on). We initially mark the status of the payout object as `pending`.\n\n```\ncurl https://api.stripe.com/v1/payouts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1100 \\  -d currency=usd\n```\n\n```\n{  \"id\": \"po_1OaFDbEcg9tTZuTgNYmX0PKB\",  \"object\": \"payout\",  \"amount\": 1100,  \"arrival_date\": 1680652800,  \"automatic\": false,  \"balance_transaction\": \"txn_1OaFDcEcg9tTZuTgYMR25tSe\",  \"created\": 1680648691,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"ba_1MtIhL2eZvKYlo2CAElKwKu2\",  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"metadata\": {},  \"method\": \"standard\",  \"original_payout\": null,  \"reconciliation_status\": \"not_applicable\",  \"reversed_by\": null,  \"source_type\": \"card\",  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"bank_account\"}\n```\n\n## [Update a payout](https://docs.stripe.com/api/payouts/update)\n\nUpdates the specified payout by setting the values of the parameters you pass. We don’t change parameters that you don’t provide. This request only accepts the metadata as arguments.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the payout object if the update succeeds. This call raises [an error](#errors) if update parameters are invalid.\n\n```\ncurl https://api.stripe.com/v1/payouts/po_1OaFDbEcg9tTZuTgNYmX0PKB \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"po_1OaFDbEcg9tTZuTgNYmX0PKB\",  \"object\": \"payout\",  \"amount\": 1100,  \"arrival_date\": 1680652800,  \"automatic\": false,  \"balance_transaction\": \"txn_1OaFDcEcg9tTZuTgYMR25tSe\",  \"created\": 1680648691,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"ba_1MtIhL2eZvKYlo2CAElKwKu2\",  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"method\": \"standard\",  \"original_payout\": null,  \"reconciliation_status\": \"not_applicable\",  \"reversed_by\": null,  \"source_type\": \"card\",  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"bank_account\"}\n```\n\n## [Retrieve a payout](https://docs.stripe.com/api/payouts/retrieve)\n\nRetrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list. Stripe returns the corresponding payout information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a payout object if a you provide a valid identifier. raises [An error](#errors) occurs otherwise.\n\n```\ncurl https://api.stripe.com/v1/payouts/po_1OaFDbEcg9tTZuTgNYmX0PKB \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"po_1OaFDbEcg9tTZuTgNYmX0PKB\",  \"object\": \"payout\",  \"amount\": 1100,  \"arrival_date\": 1680652800,  \"automatic\": false,  \"balance_transaction\": \"txn_1OaFDcEcg9tTZuTgYMR25tSe\",  \"created\": 1680648691,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"ba_1MtIhL2eZvKYlo2CAElKwKu2\",  \"failure_balance_transaction\": null,  \"failure_code\": null,  \"failure_message\": null,  \"livemode\": false,  \"metadata\": {},  \"method\": \"standard\",  \"original_payout\": null,  \"reconciliation_status\": \"not_applicable\",  \"reversed_by\": null,  \"source_type\": \"card\",  \"statement_descriptor\": null,  \"status\": \"pending\",  \"type\": \"bank_account\"}\n```\n\n## [List all payouts](https://docs.stripe.com/api/payouts/list)\n\nReturns a list of existing payouts sent to third-party bank accounts or payouts that Stripe sent to you. The payouts return in sorted order, with the most recently created payouts appearing first.\n\n### Parameters\n\n*   Only return payouts that have the given status: `pending`, `paid`, `failed`, or `canceled`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` payouts, starting after payout `starting_after`. Each entry in the array is a separate payout object. If no other payouts are available, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/payouts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/payouts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"po_1OaFDbEcg9tTZuTgNYmX0PKB\",      \"object\": \"payout\",      \"amount\": 1100,      \"arrival_date\": 1680652800,      \"automatic\": false,      \"balance_transaction\": \"txn_1OaFDcEcg9tTZuTgYMR25tSe\",      \"created\": 1680648691,      \"currency\": \"usd\",      \"description\": null,      \"destination\": \"ba_1MtIhL2eZvKYlo2CAElKwKu2\",      \"failure_balance_transaction\": null,      \"failure_code\": null,      \"failure_message\": null,      \"livemode\": false,      \"metadata\": {},      \"method\": \"standard\",      \"original_payout\": null,      \"reconciliation_status\": \"not_applicable\",      \"reversed_by\": null,      \"source_type\": \"card\",      \"statement_descriptor\": null,      \"status\": \"pending\",      \"type\": \"bank_account\"    }    {...}    {...}  ],}\n```",
    "title": "The Payout object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/cash_balance/object",
    "markdown": "# The Cash balance object | Stripe API Reference\n\n### Attributes\n\n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   A hash of all cash balances available to this customer. You cannot delete a customer with any cash balances, even if the balance is 0. Amounts are represented in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   The ID of the customer whose cash balance this object represents.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   A hash of settings for this cash balance.\n    \n\n```\n{  \"object\": \"cash_balance\",  \"available\": {    \"eur\": 10000  },  \"customer\": \"cus_OaCLf8Fi1nbFpJ\",  \"livemode\": false,  \"settings\": {    \"reconciliation_mode\": \"automatic\",    \"using_merchant_default\": true  }}\n```\n\n## [Update a cash balance's settings](https://docs.stripe.com/api/cash_balance/update)\n\nChanges the settings on a customer’s cash balance.\n\n### Parameters\n\n*   A hash of settings for this cash balance.\n    \n\n### Returns\n\nThe customer’s cash balance, with the updated settings.\n\nPOST /v1/customers/:id/cash\\_balance\n\n```\ncurl https://api.stripe.com/v1/customers/cus_Ob4Xiw8KXOqcvM/cash_balance \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"settings[reconciliation_mode]\"=manual\n```\n\n```\n{  \"object\": \"cash_balance\",  \"available\": null,  \"customer\": \"cus_Ob4Xiw8KXOqcvM\",  \"livemode\": false,  \"settings\": {    \"reconciliation_mode\": \"manual\",    \"using_merchant_default\": false  }}\n```\n\n## [Retrieve a cash balance](https://docs.stripe.com/api/cash_balance/retrieve)\n\nRetrieves a customer’s cash balance.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nThe Cash Balance object for a given customer.\n\nGET /v1/customers/:id/cash\\_balance\n\n```\ncurl https://api.stripe.com/v1/customers/cus_OaCLf8Fi1nbFpJ/cash_balance \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"cash_balance\",  \"available\": {    \"eur\": 10000  },  \"customer\": \"cus_OaCLf8Fi1nbFpJ\",  \"livemode\": false,  \"settings\": {    \"reconciliation_mode\": \"automatic\",    \"using_merchant_default\": true  }}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
    "title": "The Cash balance object | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/api/payment_intents/retrieve",
    "markdown": "# Retrieve a PaymentIntent | Stripe API Reference\n\nRetrieves the details of a PaymentIntent that has previously been created.\n\nYou can retrieve a PaymentIntent client-side using a publishable key when the `client_secret` is in the query string.\n\nIf you retrieve a PaymentIntent with a publishable key, it only returns a subset of properties. Refer to the [payment intent](#payment_intent_object) object reference for more details.\n\n### Parameters\n\n*   #### \n    \n    client\\_secretstringRequired if you use a publishable key.\n    \n    The client secret of the PaymentIntent. We require it if you use a publishable key to retrieve the source.\n    \n\n### Returns\n\nReturns a PaymentIntent if a valid identifier was provided.\n\nGET /v1/payment\\_intents/:id\n\n```\ncurl https://api.stripe.com/v1/payment_intents/pi_3MtwBwLkdIwHu7ix28a3tqPa \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",  \"object\": \"payment_intent\",  \"amount\": 2000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": {    \"enabled\": true  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",  \"confirmation_method\": \"automatic\",  \"created\": 1680800504,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": null,  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    },    \"link\": {      \"persistent_token\": null    }  },  \"payment_method_types\": [    \"card\",    \"link\"  ],  \"processing\": null,  \"receipt_email\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"source\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"requires_payment_method\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [List all PaymentIntents](https://docs.stripe.com/api/payment_intents/list)\n\nReturns a list of PaymentIntents.\n\n### Parameters\n\n*   Only return PaymentIntents for the customer that this customer ID specifies.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` PaymentIntents, starting after PaymentIntent `starting_after`. Each entry in the array is a separate PaymentIntent object. If no other PaymentIntents are available, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/payment_intents \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/payment_intents\",  \"has_more\": false,  \"data\": [    {      \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",      \"object\": \"payment_intent\",      \"amount\": 2000,      \"amount_capturable\": 0,      \"amount_details\": {        \"tip\": {}      },      \"amount_received\": 0,      \"application\": null,      \"application_fee_amount\": null,      \"automatic_payment_methods\": {        \"enabled\": true      },      \"canceled_at\": null,      \"cancellation_reason\": null,      \"capture_method\": \"automatic\",      \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",      \"confirmation_method\": \"automatic\",      \"created\": 1680800504,      \"currency\": \"usd\",      \"customer\": null,      \"description\": null,      \"invoice\": null,      \"last_payment_error\": null,      \"latest_charge\": null,      \"livemode\": false,      \"metadata\": {},      \"next_action\": null,      \"on_behalf_of\": null,      \"payment_method\": null,      \"payment_method_options\": {        \"card\": {          \"installments\": null,          \"mandate_options\": null,          \"network\": null,          \"request_three_d_secure\": \"automatic\"        },        \"link\": {          \"persistent_token\": null        }      },      \"payment_method_types\": [        \"card\",        \"link\"      ],      \"processing\": null,      \"receipt_email\": null,      \"review\": null,      \"setup_future_usage\": null,      \"shipping\": null,      \"source\": null,      \"statement_descriptor\": null,      \"statement_descriptor_suffix\": null,      \"status\": \"requires_payment_method\",      \"transfer_data\": null,      \"transfer_group\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a PaymentIntent](https://docs.stripe.com/api/payment_intents/cancel)\n\nYou can cancel a PaymentIntent object when it’s in one of these statuses: `requires_payment_method`, `requires_capture`, `requires_confirmation`, `requires_action` or, [in rare cases](https://docs.stripe.com/payments/intents), `processing`.\n\nAfter it’s canceled, no additional charges are made by the PaymentIntent and any operations on the PaymentIntent fail with an error. For PaymentIntents with a `status` of `requires_capture`, the remaining `amount_capturable` is automatically refunded.\n\nYou can’t cancel the PaymentIntent for a Checkout Session. [Expire the Checkout Session](https://docs.stripe.com/api/checkout/sessions/expire) instead.\n\n### Parameters\n\n*   #### \n    \n    cancellation\\_reasonstring\n    \n    Reason for canceling this PaymentIntent. Possible values are: `duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`\n    \n\n### Returns\n\nReturns a PaymentIntent object if the cancellation succeeds. Returns an error if the PaymentIntent is already canceled or isn’t in a cancelable state.\n\nPOST /v1/payment\\_intents/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/payment_intents/pi_3MtwBwLkdIwHu7ix28a3tqPa/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa\",  \"object\": \"payment_intent\",  \"amount\": 2000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 0,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": {    \"enabled\": true  },  \"canceled_at\": 1680801569,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH\",  \"confirmation_method\": \"automatic\",  \"created\": 1680800504,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": null,  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    },    \"link\": {      \"persistent_token\": null    }  },  \"payment_method_types\": [    \"card\",    \"link\"  ],  \"processing\": null,  \"receipt_email\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"source\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"canceled\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Capture a PaymentIntent](https://docs.stripe.com/api/payment_intents/capture)\n\nCapture the funds of an existing uncaptured PaymentIntent when its status is `requires_capture`.\n\nUncaptured PaymentIntents are cancelled a set number of days (7 by default) after their creation.\n\nLearn more about [separate authorization and capture](https://docs.stripe.com/payments/capture-later).\n\n### Parameters\n\n*   The amount to capture from the PaymentIntent, which must be less than or equal to the original amount. Any additional amount is automatically refunded. Defaults to the full `amount_capturable` if it’s not provided.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    application\\_fee\\_amountintegerConnect only\n    \n\n*   #### \n    \n    statement\\_descriptorstring\n    \n*   #### \n    \n    statement\\_descriptor\\_suffixstring\n    \n*   #### \n    \n    transfer\\_dataobjectConnect only\n    \n\n### Returns\n\nReturns a PaymentIntent object with `status=\"succeeded\"` if the PaymentIntent is capturable. Returns an error if the PaymentIntent isn’t capturable or if an invalid amount to capture is provided.\n\nPOST /v1/payment\\_intents/:id/capture\n\n```\ncurl -X POST https://api.stripe.com/v1/payment_intents/pi_3MrPBM2eZvKYlo2C1TEMacFD/capture \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pi_3MrPBM2eZvKYlo2C1TEMacFD\",  \"object\": \"payment_intent\",  \"amount\": 1000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 1000,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": null,  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MrPBM2eZvKYlo2C1TEMacFD_secret_9J35eTzWlxVmfbbQhmkNbewuL\",  \"confirmation_method\": \"automatic\",  \"created\": 1524505326,  \"currency\": \"usd\",  \"customer\": null,  \"description\": \"One blue fish\",  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": \"ch_1EXUPv2eZvKYlo2CStIqOmbY\",  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": \"pm_1EXUPv2eZvKYlo2CUkqZASBe\",  \"payment_method_options\": {},  \"payment_method_types\": [    \"card\"  ],  \"processing\": null,  \"receipt_email\": null,  \"redaction\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"succeeded\",  \"transfer_data\": null,  \"transfer_group\": null}\n```\n\n## [Confirm a PaymentIntent](https://docs.stripe.com/api/payment_intents/confirm)\n\nConfirm that your customer intends to pay with current or provided payment method. Upon confirmation, the PaymentIntent will attempt to initiate a payment. If the selected payment method requires additional authentication steps, the PaymentIntent will transition to the `requires_action` status and suggest additional actions via `next_action`. If payment fails, the PaymentIntent transitions to the `requires_payment_method` status or the `canceled` status if the confirmation limit is reached. If payment succeeds, the PaymentIntent will transition to the `succeeded` status (or `requires_capture`, if `capture_method` is set to `manual`). If the `confirmation_method` is `automatic`, payment may be attempted using our [client SDKs](https://docs.stripe.com/stripe-js/reference#stripe-handle-card-payment) and the PaymentIntent’s [client\\_secret](#payment_intent_object-client_secret). After `next_action`s are handled by the client, no additional confirmation is required to complete the payment. If the `confirmation_method` is `manual`, all payment attempts must be initiated using a secret key. If any actions are required for the payment, the PaymentIntent will return to the `requires_confirmation` state after those actions are completed. Your server needs to then explicitly re-confirm the PaymentIntent to initiate the next payment attempt.\n\n### Parameters\n\n*   ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://docs.stripe.com/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent.\n    \n*   Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).\n    \n*   Indicates that you intend to make future payments with this PaymentIntent’s payment method.\n    \n    Providing this parameter will [attach the payment method](https://docs.stripe.com/payments/save-during-payment) to the PaymentIntent’s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://docs.stripe.com/api/payment_methods/attach) to a Customer after the transaction completes.\n    \n    When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://docs.stripe.com/strong-customer-authentication).\n    \n    If `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `off_session`<br><br>Use `off_session` if your customer may or may not be present in your checkout flow. |\n    | `on_session`<br><br>Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. |\n    \n*   Shipping information for this PaymentIntent.\n    \n\n### More parameters\n\n*   #### \n    \n    capture\\_methodenumsecret key only\n    \n\n*   #### \n    \n    error\\_on\\_requires\\_actionboolean\n    \n*   #### \n    \n    mandatestringsecret key only\n    \n\n*   #### \n    \n    off\\_sessionboolean | stringsecret key only\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_optionsobjectsecret key only\n    \n*   #### \n    \n    payment\\_method\\_typesarray of stringssecret key only\n    \n*   #### \n    \n    radar\\_optionsobjectsecret key only\n    \n\n### Returns\n\nReturns the resulting PaymentIntent after all possible transitions are applied.\n\nPOST /v1/payment\\_intents/:id/confirm\n\n```\ncurl https://api.stripe.com/v1/payment_intents/pi_3MtweELkdIwHu7ix0Dt0gF2H/confirm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_method=pm_card_visa \\  --data-urlencode return_url=\"https://www.example.com\"\n```\n\n```\n{  \"id\": \"pi_3MtweELkdIwHu7ix0Dt0gF2H\",  \"object\": \"payment_intent\",  \"amount\": 2000,  \"amount_capturable\": 0,  \"amount_details\": {    \"tip\": {}  },  \"amount_received\": 2000,  \"application\": null,  \"application_fee_amount\": null,  \"automatic_payment_methods\": {    \"enabled\": true  },  \"canceled_at\": null,  \"cancellation_reason\": null,  \"capture_method\": \"automatic\",  \"client_secret\": \"pi_3MtweELkdIwHu7ix0Dt0gF2H_secret_ALlpPMIZse0ac8YzPxkMkFgGC\",  \"confirmation_method\": \"automatic\",  \"created\": 1680802258,  \"currency\": \"usd\",  \"customer\": null,  \"description\": null,  \"invoice\": null,  \"last_payment_error\": null,  \"latest_charge\": \"ch_3MtweELkdIwHu7ix05lnLAFd\",  \"livemode\": false,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": \"pm_1MtweELkdIwHu7ixxrsejPtG\",  \"payment_method_options\": {    \"card\": {      \"installments\": null,      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    },    \"link\": {      \"persistent_token\": null    }  },  \"payment_method_types\": [    \"card\",    \"link\"  ],  \"processing\": null,  \"receipt_email\": null,  \"review\": null,  \"setup_future_usage\": null,  \"shipping\": null,  \"source\": null,  \"statement_descriptor\": null,  \"statement_descriptor_suffix\": null,  \"status\": \"succeeded\",  \"transfer_data\": null,  \"transfer_group\": null}\n```",
    "title": "Retrieve a PaymentIntent | Stripe API Reference",
    "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
    "languageCode": "en-US"
  },
  {
    "url": "https://docs.stripe.com/get-started/data-migrations/card-imports",
    "markdown": "# Import Card Data | Stripe DocumentationThe Stripe Docs logo\n\nWhen you migrate card data from your previous processor, you can import the data in Stripe as the default payment method card (`pm_`) object or a legacy card (`card_`) object. The Payment Intents API supports all Stripe products for both card payment types, but your integration might favor one based on the following considerations.\n\n*   If you’re using a third-party subscription platform with Stripe, check with the platform or your developer to see if they prefer one or the other.\n    \n*   If you have existing payment data in your Stripe account, try to match the type you’re already using:\n    \n    *   `pm_`: Use the [Payment Methods API](https://docs.stripe.com/api/payment-methods) in conjunction with the Payment Intents API.\n    *   `card_`: Use the [Card API](https://docs.stripe.com/api/cards) in conjunction with the Payment Intents API.\n    *   `src_`: You can still use the deprecated Sources API, but we recommend [migrating to the Payment Intents API](https://docs.stripe.com/payments/payment-intents/migration/charges) for access to more features.\n\n## Default cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA _default card_ is the primary card a customer sets or chooses for recurring payments, subscriptions, or as the default payment method for future transactions. When you mark a card as `default`, it automatically becomes the payment method for the next transaction unless you specify otherwise. Use this feature for subscription-based services that require automatic recurring payments. You can set a new card as the new default payment method, or add it as an additional payment method without changing the current default.\n\n| Type | Object prefix | Migration behavior |\n| --- | --- | --- |\n| Card | `card_` | Sets a default card on import. If unspecified in the data file, the first card imported becomes the default. |\n| Payment Method | `pm_` | Doesn’t require a default card. If unspecified in the data file, no card is the default. |\n| Source | `src_` | Doesn’t require a default card. If unspecified in the data file, no card is the default. |\n\n### Providing default card data![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Include default card information in a separate column of your data file, ideally using `TRUE` and `FALSE` values to identify the default and non-default cards.\n*   Marking a card as default during import overrides an existing customer’s current default payment method, if set.\n\n## Current limitations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe can’t migrate cards stored by digital wallets such as Google and Apple because those services (not the previous provider) tokenize the stored values for security. You must add any cards associated with digital wallets as new payment methods in Stripe.\n\n## Address validation for Stripe Tax![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you migrate customer data to an account using Stripe Tax, include customer address fields for the following reasons:\n\n*   **Tax calculation accuracy**: Addresses help calculate taxes correctly in different jurisdictions.\n*   **Compliance with tax laws**: Local tax laws require addresses for tax invoice accuracy.\n*   **Audits and reporting**: Precise address data aids compliance in tax audits and enhances internal analytics by recording transaction locations.\n*   **Enhanced customer checkout**: Starting with accurate addresses improves the checkout process for repeat customers by enabling precise, automatic tax calculation.\n*   **Adaptability to tax law changes**: A full set of customer address data allows a business to adjust to tax regulation changes, preventing compliance issues.\n\n## Card Account Updater (CAU) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFiles from processors often contain expired cards. Stripe’s [CAU feature](https://stripe.com/resources/more/what-is-a-card-account-updater-what-businesses-need-to-know) automatically updates stored card information by retrieving and applying new card details from the issuing bank.\n\nCAU maximizes continuity of service and improves authorization rates, but might incur fees for each updated card in your account. You can specify how we handle expired cards during import.\n\n*   **Skip expired cards**: Don’t import expired card data.\n    \n    #### Note\n    \n    CAU might still update non-expired cards (such as stolen or replacement cards), triggering post-migration charges.\n    \n*   **Import expired cards**: Allow CAU to update as many cards as possible and charge CAU fees to your account.\n\n### How it works![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n![How card updating on import works](https://b.stripecdn.com/docs-statics-srv/assets/dm-cau.376a7292d021463b18118595e4e20e79.jpg)\n\n## Migrate proof of Strong Customer Authentication (SCA) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor European users, PSD2 (Second Payment Services Directive) mandates [Strong Customer Authentication (SCA)](https://docs.stripe.com/strong-customer-authentication) to enhance electronic payment security. SCA requires two out of three independent authentication factors for transactions:\n\n*   Something the customer knows (such as a password)\n*   Something the customer possesses (such as a mobile device)\n*   Something the customer is (such as biometric data)\n\nNetwork transaction IDs from your previous processor show that a customer authenticated a transaction using SCA with the previous processor, enabling Stripe to apply for SCA exemptions for future transactions. This makes your migration to Stripe seamless for your customers, removing their need to re-authenticate.\n\nIf your previous provider can’t supply transaction IDs, let us know in your [import request form](https://docs.stripe.com/get-started/data-migrations/pan-import#request-migration) so we can offer alternative options.\n\n## Card file guidance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   A processor can provide a number of different fields.\n*   We advise your processor to provide a full export of all customer and payment method data to Stripe.\n*   Stripe can filter out any unnecessary fields from the previous processor’s data as needed.\n*   Stripe can merge multiple received files if either the old customer ID or the old source ID is present in both files.\n\n### File formatting requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nExport data files must meet the following data standards for us to proceed with an import:\n\n*   The file must be in CSV format.\n*   The file must be UTF-8 encoded.\n*   Delimit rows by a single newline character `\\n` (not `\\r\\n`).\n*   Delimit columns by `,`\n*   You must wrap all fields containing commas in double quotes `\"`. We recommend wrapping all fields in double quotes.\n*   Leave empty fields entirely empty (no character in between delimiters). You must _not_ denote a missing field with `NULL`, `N/A`, or any other value.\n*   Escape any double quotes that are part of the content with another double quote per the CSV RFC. For example: `\"``William` `\"\"``Bard of Avon``\"\"` `Shakespeare``\"`\n*   Fields can’t contain newline characters (`\\r` or `\\n`) within a field. Example of what to avoid: `101 1st Ave\\nApt 1`\n*   All rows must have the same number of columns.\n*   Columns support any order.\n*   You must encrypt sensitive data files with our [PGP key](https://docs.stripe.com/get-started/data-migrations/pan-import#migration-pgp-key) before submitting through SFTP.\n\n## Card data fields![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Field | Required | Additional info |\n| --- | --- | --- |\n| Old customer ID | Required | We create a customer ID for each unique old customer ID provided. |\n| Card number | Required | Each customer imported must have at least one Card. |\n| Card expiry | Required | You can provide this option as one or two (separate month and year values) columns. |\n| Network Transaction IDs | Required\\* | \\*Mandatory for [SCA impacted merchants](https://support.stripe.com/questions/countries-in-the-european-economic-area-(eea)-impacted-by-strong-customer-authentication-(sca)-regulation). |\n| Address line 1 | Required\\* | \\*Recommended for address validation. Mandatory for Stripe Tax. |\n| City | Required\\* | \\*Recommended for address validation. Mandatory for Stripe Tax. |\n| State | Required\\* | \\*Recommended for address validation. Mandatory for Stripe Tax. |\n| Postal | Required\\* | \\*Recommended for address validation. Mandatory for Stripe Tax. |\n| Country | Required\\* | \\*Recommended for address validation. Mandatory for Stripe Tax. Format as the ISO 2 letter country code. |\n| Stripe customer ID | Optional | Provide in the processor file or a supplementary file to map to existing Stripe customers. |\n| Old card ID | Optional | Recommended if you have one customer with multiple cards in your old processor. |\n| Description | Optional | Additional metadata |\n| Email | Optional | Additional metadata |\n| Phone | Optional | Additional metadata |\n| Is default | Optional | Indicate `TRUE` or `FALSE` to specify whether the card is the default. |\n| Name | Optional | Additional metadata |\n| Address line 2 | Optional | Additional metadata |\n| Customer/Card Metadata | Optional | Any additional metadata |",
    "title": "Import Card Data | Stripe Documentation",
    "description": "Review the fundamental elements required for migrating Card data, including default cards, limitations, address validation, and SCA.",
    "languageCode": "en-US"
  }
]