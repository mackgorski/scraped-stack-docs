,    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": null,  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"virtual\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [Retrieve a card](https://docs.stripe.com/api/issuing/cards/retrieve)\n\nRetrieves an Issuing `Card` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Card` object if a valid identifier was provided. When requesting the ID of a card that has been deleted, a subset of the card’s information will be returned, including a `deleted` property, which will be true.\n\nGET /v1/issuing/cards/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/cards/ic_1MvSieLkdIwHu7ixn6uuO0Xu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",  \"object\": \"issuing.card\",  \"brand\": \"Visa\",  \"cancellation_reason\": null,  \"cardholder\": {    \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",    \"object\": \"issuing.cardholder\",    \"billing\": {      \"address\": {        \"city\": \"Anytown\",        \"country\": \"US\",        \"line1\": \"123 Main Street\",        \"line2\": null,        \"postal_code\": \"12345\",        \"state\": \"CA\"      }    },    \"company\": null,    \"created\": 1680415995,    \"email\": null,    \"individual\": null,    \"livemode\": false,    \"metadata\": {},    \"name\": \"John Doe\",    \"phone_number\": null,    \"requirements\": {      \"disabled_reason\": \"requirements.past_due\",      \"past_due\": [        \"individual.card_issuing.user_terms_acceptance.ip\",        \"individual.card_issuing.user_terms_acceptance.date\",        \"individual.first_name\",        \"individual.last_name\"      ]    },    \"spending_controls\": {      \"allowed_categories\": [],      \"blocked_categories\": [],      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"individual\"  },  \"created\": 1681163868,  \"currency\": \"usd\",  \"exp_month\": 8,  \"exp_year\": 2024,  \"last4\": \"4242\",  \"livemode\": false,  \"metadata\": {},  \"replaced_by\": null,  \"replacement_for\": null,  \"replacement_reason\": null,  \"shipping\": null,  \"spending_controls\": {    \"allowed_categories\": null,    \"blocked_categories\": null,    \"spending_limits\": [],    \"spending_limits_currency\": null  },  \"status\": \"active\",  \"type\": \"virtual\",  \"wallets\": {    \"apple_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"google_pay\": {      \"eligible\": false,      \"ineligible_reason\": \"missing_cardholder_contact\"    },    \"primary_account_identifier\": null  }}\n```\n\n## [List all cards](https://docs.stripe.com/api/issuing/cards/list)\n\nReturns a list of Issuing `Card` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Only return cards belonging to the Cardholder with the provided ID.\n    \n*   Only return cards that have the given type. One of `virtual` or `physical`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `physical`<br><br>A physical card will be printed and shipped. It can be used at physical terminals. |\n    | `virtual`<br><br>No physical card will be printed. The card can be used online and can be [added to digital wallets](https://stripe.com/docs/issuing/cards/digital-wallets). |\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` cards, starting after card `starting_after`. Each entry in the array is a separate Issuing `Card` object. If no more cards are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/issuing/cards \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/cards\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ic_1MvSieLkdIwHu7ixn6uuO0Xu\",      \"object\": \"issuing.card\",      \"brand\": \"Visa\",      \"cancellation_reason\": null,      \"cardholder\": {        \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",        \"object\": \"issuing.cardholder\",        \"billing\": {          \"address\": {            \"city\": \"Anytown\",            \"country\": \"US\",            \"line1\": \"123 Main Street\",            \"line2\": null,            \"postal_code\": \"12345\",            \"state\": \"CA\"          }        },        \"company\": null,        \"created\": 1680415995,        \"email\": null,        \"individual\": null,        \"livemode\": false,        \"metadata\": {},        \"name\": \"John Doe\",        \"phone_number\": null,        \"requirements\": {          \"disabled_reason\": \"requirements.past_due\",          \"past_due\": [            \"individual.card_issuing.user_terms_acceptance.ip\",            \"individual.card_issuing.user_terms_acceptance.date\",            \"individual.first_name\",            \"individual.last_name\"          ]        },        \"spending_controls\": {          \"allowed_categories\": [],          \"blocked_categories\": [],          \"spending_limits\": [],          \"spending_limits_currency\": null        },        \"status\": \"active\",        \"type\": \"individual\"      },      \"created\": 1681163868,      \"currency\": \"usd\",      \"exp_month\": 8,      \"exp_year\": 2024,      \"last4\": \"4242\",      \"livemode\": false,      \"metadata\": {},      \"replaced_by\": null,      \"replacement_for\": null,      \"replacement_reason\": null,      \"shipping\": null,      \"spending_controls\": {        \"allowed_categories\": null,        \"blocked_categories\": null,        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"virtual\",      \"wallets\": {        \"apple_pay\": {          \"eligible\": false,          \"ineligible_reason\": \"missing_cardholder_contact\"        },        \"google_pay\": {          \"eligible\": false,          \"ineligible_reason\": \"missing_cardholder_contact\"        },        \"primary_account_identifier\": null      }    }    {...}    {...}  ],}\n```",
  "title": "The Card object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/accounts/create",
  "markdown": "# Create an account | Stripe API Reference\n\nWith [Connect](https://docs.stripe.com/connect), you can create Stripe accounts for your users. To do this, you’ll first need to [register your platform](https://dashboard.stripe.com/account/applications/settings).\n\nIf you’ve already collected information for your connected accounts, you [can prefill that information](https://docs.stripe.com/connect/best-practices#onboarding) when creating the account. Connect Onboarding won’t ask for the prefilled information during account onboarding. You can prefill any information on the account.\n\n### Parameters\n\n*   #### \n    \n    capabilitiesobjectRequired conditionally\n    \n    Each key of the dictionary represents a capability, and each capability maps to its settings (for example, whether it has been requested or not). Each capability is inactive until you have provided its specific requirements and Stripe has verified them. An account might have some of its requested capabilities be active and some be inactive.\n    \n    Required when [account.controller.stripe\\_dashboard.type](https://docs.stripe.com/api/accounts/create#create_account-controller-dashboard-type) is `none`, which includes Custom accounts.\n    \n\n*   A hash of configuration describing the account controller’s attributes.\n    \n*   #### \n    \n    countrystringdefault is your own country\n    \n    The country in which the account holder resides, or in which the business is legally established. This should be an ISO 3166-1 alpha-2 country code. For example, if you are in the United States and the business for which you’re creating an account is legally represented in Canada, you would use `CA` as the country for the account being created. Available countries include [Stripe’s global markets](https://stripe.com/global) as well as countries where [cross-border payouts](https://stripe.com/docs/connect/cross-border-payouts) are supported.\n    \n*   The email address of the account holder. This is only to make the account easier to identify to you. If [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, Stripe doesn’t email the account without your consent.\n    \n*   Information about the person represented by the account. This field is null unless `business_type` is set to `individual`. Once you create an [Account Link](https://docs.stripe.com/api/account_links) or [Account Session](https://docs.stripe.com/api/account_sessions), this property can only be updated for accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n*   The type of Stripe account to create. May be one of `custom`, `express` or `standard`.\n    \n\n### More parameters\n\n### Returns\n\nReturns an [`Account`](#account_object) object if the call succeeds.\n\n```\ncurl https://api.stripe.com/v1/accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d country=US \\  --data-urlencode email=\"jenny.rosen@example.com\" \\  -d \"controller[fees][payer]\"=application \\  -d \"controller[losses][payments]\"=application \\  -d \"controller[stripe_dashboard][type]\"=express\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"business_profile\": {    \"annual_revenue\": null,    \"estimated_worker_count\": null,    \"mcc\": null,    \"name\": null,    \"product_description\": null,    \"support_address\": null,    \"support_email\": null,    \"support_phone\": null,    \"support_url\": null,    \"url\": null  },  \"business_type\": null,  \"capabilities\": {},  \"charges_enabled\": false,  \"controller\": {    \"fees\": {      \"payer\": \"application\"    },    \"is_controller\": true,    \"losses\": {      \"payments\": \"application\"    },    \"requirement_collection\": \"stripe\",    \"stripe_dashboard\": {      \"type\": \"express\"    },    \"type\": \"application\"  },  \"country\": \"US\",  \"created\": 1695830751,  \"default_currency\": \"usd\",  \"details_submitted\": false,  \"email\": \"jenny.rosen@example.com\",  \"external_accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"  },  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"login_links\": {    \"object\": \"list\",    \"total_count\": 0,    \"has_more\": false,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",    \"data\": []  },  \"metadata\": {},  \"payouts_enabled\": false,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"disabled_reason\": \"requirements.past_due\",    \"errors\": [],    \"eventually_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"past_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"pending_verification\": []  },  \"settings\": {    \"bacs_debit_payments\": {      \"display_name\": null,      \"service_user_number\": null    },    \"branding\": {      \"icon\": null,      \"logo\": null,      \"primary_color\": null,      \"secondary_color\": null    },    \"card_issuing\": {      \"tos_acceptance\": {        \"date\": null,        \"ip\": null      }    },    \"card_payments\": {      \"decline_on\": {        \"avs_failure\": false,        \"cvc_failure\": false      },      \"statement_descriptor_prefix\": null,      \"statement_descriptor_prefix_kanji\": null,      \"statement_descriptor_prefix_kana\": null    },    \"dashboard\": {      \"display_name\": null,      \"timezone\": \"Etc/UTC\"    },    \"invoices\": {      \"default_account_tax_ids\": null    },    \"payments\": {      \"statement_descriptor\": null,      \"statement_descriptor_kana\": null,      \"statement_descriptor_kanji\": null    },    \"payouts\": {      \"debit_negative_balances\": true,      \"schedule\": {        \"delay_days\": 2,        \"interval\": \"daily\"      },      \"statement_descriptor\": null    },    \"sepa_debit_payments\": {}  },  \"tos_acceptance\": {    \"date\": null,    \"ip\": null,    \"user_agent\": null  },  \"type\": \"none\"}\n```\n\n## [Update an account](https://docs.stripe.com/api/accounts/update)\n\nUpdates a [connected account](https://docs.stripe.com/connect/accounts) by setting the values of the parameters passed. Any parameters not provided are left unchanged.\n\nFor accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, you can update any information on the account.\n\nFor accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `stripe`, which includes Standard and Express accounts, you can update all information until you create an [Account Link](https://docs.stripe.com/api/account_links) or [Account Session](https://docs.stripe.com/api/account_sessions) to start Connect onboarding, after which some properties can no longer be updated.\n\nTo update your own account, use the [Dashboard](https://dashboard.stripe.com/settings/account). Refer to our [Connect](https://docs.stripe.com/connect/updating-accounts) documentation to learn more about updating accounts.\n\n### Parameters\n\n*   Each key of the dictionary represents a capability, and each capability maps to its settings (for example, whether it has been requested or not). Each capability is inactive until you have provided its specific requirements and Stripe has verified them. An account might have some of its requested capabilities be active and some be inactive.\n    \n    Required when [account.controller.stripe\\_dashboard.type](https://docs.stripe.com/api/accounts/create#create_account-controller-dashboard-type) is `none`, which includes Custom accounts.\n    \n\n*   The email address of the account holder. This is only to make the account easier to identify to you. If [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, Stripe doesn’t email the account without your consent.\n    \n*   Information about the person represented by the account. This field is null unless `business_type` is set to `individual`. Once you create an [Account Link](https://docs.stripe.com/api/account_links) or [Account Session](https://docs.stripe.com/api/account_sessions), this property can only be updated for accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns an [`Account`](#account_object) object if the call succeeds. If the account ID does not exist or another issue occurs, this call raises [an error](#errors). Some validations will not raise an error but will instead populate the [`requirements.errors`](#account_object-requirements-errors) array.\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1Nv0FGQ9RKHgCVdK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"business_profile\": {    \"annual_revenue\": null,    \"estimated_worker_count\": null,    \"mcc\": null,    \"name\": null,    \"product_description\": null,    \"support_address\": null,    \"support_email\": null,    \"support_phone\": null,    \"support_url\": null,    \"url\": null  },  \"business_type\": null,  \"capabilities\": {},  \"charges_enabled\": false,  \"controller\": {    \"fees\": {      \"payer\": \"application\"    },    \"is_controller\": true,    \"losses\": {      \"payments\": \"application\"    },    \"requirement_collection\": \"stripe\",    \"stripe_dashboard\": {      \"type\": \"express\"    },    \"type\": \"application\"  },  \"country\": \"US\",  \"created\": 1695830751,  \"default_currency\": \"usd\",  \"details_submitted\": false,  \"email\": \"jenny.rosen@example.com\",  \"external_accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"  },  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"login_links\": {    \"object\": \"list\",    \"total_count\": 0,    \"has_more\": false,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",    \"data\": []  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"payouts_enabled\": false,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"disabled_reason\": \"requirements.past_due\",    \"errors\": [],    \"eventually_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"past_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"pending_verification\": []  },  \"settings\": {    \"bacs_debit_payments\": {      \"display_name\": null,      \"service_user_number\": null    },    \"branding\": {      \"icon\": null,      \"logo\": null,      \"primary_color\": null,      \"secondary_color\": null    },    \"card_issuing\": {      \"tos_acceptance\": {        \"date\": null,        \"ip\": null      }    },    \"card_payments\": {      \"decline_on\": {        \"avs_failure\": false,        \"cvc_failure\": false      },      \"statement_descriptor_prefix\": null,      \"statement_descriptor_prefix_kanji\": null,      \"statement_descriptor_prefix_kana\": null    },    \"dashboard\": {      \"display_name\": null,      \"timezone\": \"Etc/UTC\"    },    \"invoices\": {      \"default_account_tax_ids\": null    },    \"payments\": {      \"statement_descriptor\": null,      \"statement_descriptor_kana\": null,      \"statement_descriptor_kanji\": null    },    \"payouts\": {      \"debit_negative_balances\": true,      \"schedule\": {        \"delay_days\": 2,        \"interval\": \"daily\"      },      \"statement_descriptor\": null    },    \"sepa_debit_payments\": {}  },  \"tos_acceptance\": {    \"date\": null,    \"ip\": null,    \"user_agent\": null  },  \"type\": \"none\"}\n```\n\n## [Retrieve account](https://docs.stripe.com/api/accounts/retrieve)\n\nRetrieves the details of an account.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an [`Account`](#account_object) object if the call succeeds. If the account ID does not exist, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1Nv0FGQ9RKHgCVdK \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"business_profile\": {    \"annual_revenue\": null,    \"estimated_worker_count\": null,    \"mcc\": null,    \"name\": null,    \"product_description\": null,    \"support_address\": null,    \"support_email\": null,    \"support_phone\": null,    \"support_url\": null,    \"url\": null  },  \"business_type\": null,  \"capabilities\": {},  \"charges_enabled\": false,  \"controller\": {    \"fees\": {      \"payer\": \"application\"    },    \"is_controller\": true,    \"losses\": {      \"payments\": \"application\"    },    \"requirement_collection\": \"stripe\",    \"stripe_dashboard\": {      \"type\": \"express\"    },    \"type\": \"application\"  },  \"country\": \"US\",  \"created\": 1695830751,  \"default_currency\": \"usd\",  \"details_submitted\": false,  \"email\": \"jenny.rosen@example.com\",  \"external_accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"  },  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"login_links\": {    \"object\": \"list\",    \"total_count\": 0,    \"has_more\": false,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",    \"data\": []  },  \"metadata\": {},  \"payouts_enabled\": false,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"disabled_reason\": \"requirements.past_due\",    \"errors\": [],    \"eventually_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"past_due\": [      \"business_profile.mcc\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"representative.first_name\",      \"representative.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"pending_verification\": []  },  \"settings\": {    \"bacs_debit_payments\": {      \"display_name\": null,      \"service_user_number\": null    },    \"branding\": {      \"icon\": null,      \"logo\": null,      \"primary_color\": null,      \"secondary_color\": null    },    \"card_issuing\": {      \"tos_acceptance\": {        \"date\": null,        \"ip\": null      }    },    \"card_payments\": {      \"decline_on\": {        \"avs_failure\": false,        \"cvc_failure\": false      },      \"statement_descriptor_prefix\": null,      \"statement_descriptor_prefix_kanji\": null,      \"statement_descriptor_prefix_kana\": null    },    \"dashboard\": {      \"display_name\": null,      \"timezone\": \"Etc/UTC\"    },    \"invoices\": {      \"default_account_tax_ids\": null    },    \"payments\": {      \"statement_descriptor\": null,      \"statement_descriptor_kana\": null,      \"statement_descriptor_kanji\": null    },    \"payouts\": {      \"debit_negative_balances\": true,      \"schedule\": {        \"delay_days\": 2,        \"interval\": \"daily\"      },      \"statement_descriptor\": null    },    \"sepa_debit_payments\": {}  },  \"tos_acceptance\": {    \"date\": null,    \"ip\": null,    \"user_agent\": null  },  \"type\": \"none\"}\n```\n\n## [List all connected accounts](https://docs.stripe.com/api/accounts/list)\n\nReturns a list of accounts connected to your platform via [Connect](https://docs.stripe.com/connect). If you’re not a platform, the list is empty.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` accounts, starting after account `starting_after`. Each entry in the array is a separate [`Account`](#account_object) object. If no more accounts are available, the resulting array is empty.\n\n```\ncurl -G https://api.stripe.com/v1/accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",      \"object\": \"account\",      \"business_profile\": {        \"annual_revenue\": null,        \"estimated_worker_count\": null,        \"mcc\": null,        \"name\": null,        \"product_description\": null,        \"support_address\": null,        \"support_email\": null,        \"support_phone\": null,        \"support_url\": null,        \"url\": null      },      \"business_type\": null,      \"capabilities\": {},      \"charges_enabled\": false,      \"controller\": {        \"fees\": {          \"payer\": \"application\"        },        \"is_controller\": true,        \"losses\": {          \"payments\": \"application\"        },        \"requirement_collection\": \"stripe\",        \"stripe_dashboard\": {          \"type\": \"express\"        },        \"type\": \"application\"      },      \"country\": \"US\",      \"created\": 1695830751,      \"default_currency\": \"usd\",      \"details_submitted\": false,      \"email\": \"jenny.rosen@example.com\",      \"external_accounts\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"      },      \"future_requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [],        \"disabled_reason\": null,        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"login_links\": {        \"object\": \"list\",        \"total_count\": 0,        \"has_more\": false,        \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",        \"data\": []      },      \"metadata\": {},      \"payouts_enabled\": false,      \"requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [          \"business_profile.mcc\",          \"business_profile.url\",          \"business_type\",          \"external_account\",          \"representative.first_name\",          \"representative.last_name\",          \"tos_acceptance.date\",          \"tos_acceptance.ip\"        ],        \"disabled_reason\": \"requirements.past_due\",        \"errors\": [],        \"eventually_due\": [          \"business_profile.mcc\",          \"business_profile.url\",          \"business_type\",          \"external_account\",          \"representative.first_name\",          \"representative.last_name\",          \"tos_acceptance.date\",          \"tos_acceptance.ip\"        ],        \"past_due\": [          \"business_profile.mcc\",          \"business_profile.url\",          \"business_type\",          \"external_account\",          \"representative.first_name\",          \"representative.last_name\",          \"tos_acceptance.date\",          \"tos_acceptance.ip\"        ],        \"pending_verification\": []      },      \"settings\": {        \"bacs_debit_payments\": {          \"display_name\": null,          \"service_user_number\": null        },        \"branding\": {          \"icon\": null,          \"logo\": null,          \"primary_color\": null,          \"secondary_color\": null        },        \"card_issuing\": {          \"tos_acceptance\": {            \"date\": null,            \"ip\": null          }        },        \"card_payments\": {          \"decline_on\": {            \"avs_failure\": false,            \"cvc_failure\": false          },          \"statement_descriptor_prefix\": null,          \"statement_descriptor_prefix_kanji\": null,          \"statement_descriptor_prefix_kana\": null        },        \"dashboard\": {          \"display_name\": null,          \"timezone\": \"Etc/UTC\"        },        \"invoices\": {          \"default_account_tax_ids\": null        },        \"payments\": {          \"statement_descriptor\": null,          \"statement_descriptor_kana\": null,          \"statement_descriptor_kanji\": null        },        \"payouts\": {          \"debit_negative_balances\": true,          \"schedule\": {            \"delay_days\": 2,            \"interval\": \"daily\"          },          \"statement_descriptor\": null        },        \"sepa_debit_payments\": {}      },      \"tos_acceptance\": {        \"date\": null,        \"ip\": null,        \"user_agent\": null      },      \"type\": \"none\"    }    {...}    {...}  ],}\n```\n\n## [Delete an account](https://docs.stripe.com/api/accounts/delete)\n\nWith [Connect](https://docs.stripe.com/connect), you can delete accounts you manage.\n\nTest-mode accounts can be deleted at any time.\n\nLive-mode accounts where Stripe is responsible for negative account balances cannot be deleted, which includes Standard accounts. Live-mode accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be deleted when all [balances](https://docs.stripe.com/api/balance/balanace_object) are zero.\n\nIf you want to delete your own account, use the [account information tab in your account settings](https://dashboard.stripe.com/settings/account) instead.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with a deleted parameter if the call succeeds. If the account ID does not exist, this call raises [an error](#errors).\n\n```\ncurl -X DELETE https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"deleted\": true}\n```",
  "title": "Create an account | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/ach-debit/migrating-from-another-processor",
  "markdown": "# Migrating from another processor | Stripe DocumentationThe Stripe Docs logo\n\n## Migrate verified bank accounts from another payment processor with the Payment Methods API.\n\nIf you have verified bank accounts that you’ve used to process ACH Direct Debit payments on another processor, you can migrate them to Stripe to begin accepting payments.\n\nYou and Stripe both share responsibility for maintaining proof of authorization to debit, as well as verification of the bank account.\n\n[](#ach-data-migration)\n\nStripe works with you and your current payment processor to migrate data into your Stripe account. After the import completes, Stripe provides you with a CSV or JSON Mapping File to help you match the old customer IDs to the imported Stripe object IDs.\n\nTo request this option, submit an [intake form](https://support.stripe.com/contact/email?topic=migrations) and select the ACH payment type.\n\n[](#manual-bank-account-migration)\n\nIf you choose to migrate yourself, Stripe temporarily allows you to bypass bank account verification. To request this temporary capability, contact [Stripe support](https://support.stripe.com/contact) and include details about how your business:\n\n*   Collects authorization from customers\n*   Verifies customer bank accounts\n\nAfter Stripe enables this option, process each bank account and create a [SetupIntent](https://docs.stripe.com/api/setup_intents) for each account:\n\n1.  Create a new [Customer object](https://docs.stripe.com/api/customers) or retrieve an existing one to associate with this bank account.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n1.  Create and confirm a SetupIntent with your saved bank account details and the date of your customer’s original authorization to debit the account.\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"payment_method_types[]\"=us_bank_account \\  -d customer={{CUSTOMER_ID}} \\   -d confirm=true \\  -d \"payment_method_options[us_bank_account][verification_method]\"=skip \\  -d \"payment_method_data[type]\"=us_bank_account \\  -d \"payment_method_data[billing_details][name]\"={{ACCOUNT_HOLDER_NAME}} \\   -d \"payment_method_data[billing_details][routing_number]\"={{ROUTING_NUMBER}} \\   -d \"payment_method_data[billing_details][account_number]\"={{ACCOUNT_NUMBER}} \\   -d \"payment_method_data[billing_details][account_holder_type]\"=individual \\  -d \"mandate_data[customer_acceptance][type]\"=offline \\  -d \"mandate_data[customer_acceptance][accepted_at]\"=1692821946`\n\n1.  Retrieve and store the [PaymentMethod ID](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-payment_method) from the response to use for [future payments](https://docs.stripe.com/payments/ach-debit/set-up-payment#web-future-payments). You can also retrieve it by [listing](https://docs.stripe.com/api/payment_methods/list) all PaymentMethods for the customer.",
  "title": "Migrating from another processor | Stripe Documentation",
  "description": "Migrate verified bank accounts from another payment processor with the Payment Methods API.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/capabilities/object",
  "markdown": "# The Capability object | Stripe API Reference\n\n### Attributes\n\n*   The identifier for the capability.\n    \n*   The account for which the capability enables functionality.\n    \n*   Whether the capability has been requested.\n    \n*   Information about the requirements for the capability, including what information needs to be collected, and by when.\n    \n*   The status of the capability. Can be `active`, `inactive`, `pending`, or `unrequested`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active` |\n    | `disabled` |\n    | `inactive` |\n    | `pending` |\n    | `unrequested` |\n    \n\n### More attributes\n\n*   #### \n    \n    future\\_requirementsobject\n    \n*   #### \n    \n    requested\\_atnullable timestamp\n    \n\n```\n{  \"id\": \"card_payments\",  \"object\": \"capability\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"requested\": true,  \"requested_at\": 1688491010,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"status\": \"inactive\"}\n```\n\n## [Update an Account Capability](https://docs.stripe.com/api/capabilities/update)\n\nUpdates an existing Account Capability. Request or remove a capability by updating its `requested` parameter.\n\n### Parameters\n\n*   To request a new capability for an account, pass true. There can be a delay before the requested capability becomes active. If the capability has any activation requirements, the response includes them in the `requirements` arrays.\n    \n    If a capability isn’t permanent, you can remove it from the account by passing false. Some capabilities are permanent after they’ve been requested. Attempting to remove a permanent capability returns an error.\n    \n\n### Returns\n\nReturns an Account Capability object.\n\nPOST /v1/accounts/:id/capabilities/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/capabilities/card_payments \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d requested=true\n```\n\n```\n{  \"id\": \"card_payments\",  \"object\": \"capability\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"requested\": true,  \"requested_at\": 1688491010,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"status\": \"inactive\"}\n```\n\n## [Retrieve an Account Capability](https://docs.stripe.com/api/capabilities/retrieve)\n\nRetrieves information about the specified Account Capability.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Account Capability object.\n\nGET /v1/accounts/:id/capabilities/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/capabilities/card_payments \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"card_payments\",  \"object\": \"capability\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"requested\": true,  \"requested_at\": 1688491010,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"status\": \"inactive\"}\n```\n\n## [List all account capabilities](https://docs.stripe.com/api/capabilities/list)\n\nReturns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nA dictionary with a `data` property that contains an array of the capabilities of this account. Each entry in the array is a separate capability object.\n\nGET /v1/accounts/:id/capabilities\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/capabilities \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/capabilities\",  \"has_more\": false,  \"data\": [    {      \"id\": \"card_payments\",      \"object\": \"capability\",      \"account\": \"acct_1032D82eZvKYlo2C\",      \"future_requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [],        \"disabled_reason\": null,        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"requested\": true,      \"requested_at\": 1693951912,      \"requirements\": {        \"alternatives\": [],        \"current_deadline\": null,        \"currently_due\": [],        \"disabled_reason\": null,        \"errors\": [],        \"eventually_due\": [],        \"past_due\": [],        \"pending_verification\": []      },      \"status\": \"inactive\"    }  ]}\n```\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The Capability object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/account_links/object",
  "markdown": "# The Account Link object | Stripe API Reference\n\n### Attributes\n\n*   The timestamp at which this account link will expire.\n    \n*   The URL for the account link.\n    \n\n### More attributes\n\n```\n{  \"object\": \"account_link\",  \"created\": 1680577733,  \"expires_at\": 1680578033,  \"url\": \"https://connect.stripe.com/setup/c/acct_1Mt0CORHFI4mz9Rw/TqckGNUHg2mG\"}\n```\n\n## [Create an account link](https://docs.stripe.com/api/account_links/create)\n\nCreates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.\n\n### Parameters\n\n*   The identifier of the account to create an account link for.\n    \n*   The type of account link the user is requesting. Possible values are `account_onboarding` or `account_update`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `account_onboarding`<br><br>Provides a form for inputting outstanding requirements. Send the user to the form in this mode to just collect the new information you need. |\n    | `account_update`<br><br>Displays the fields that are already populated on the account object, and allows your user to edit previously provided information. Consider framing this as “edit my profile” or “update my verification information”. |\n    \n*   #### \n    \n    refresh\\_urlstringRequired\n    \n    The URL the user will be redirected to if the account link is expired, has been previously-visited, or is otherwise invalid. The URL you specify should attempt to generate a new account link with the same parameters used to create the original account link, then redirect the user to the new account link’s URL so they can continue with Connect Onboarding. If a new account link cannot be generated or the redirect fails you should display a useful error to the user.\n    \n*   The URL that the user will be redirected to upon leaving or completing the linked flow.\n    \n\n### More parameters\n\n### Returns\n\nReturns an account link object if the call succeeded.\n\n```\ncurl https://api.stripe.com/v1/account_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d account=acct_1Mt0CORHFI4mz9Rw \\  --data-urlencode refresh_url=\"https://example.com/reauth\" \\  --data-urlencode return_url=\"https://example.com/return\" \\  -d type=account_onboarding\n```\n\n```\n{  \"object\": \"account_link\",  \"created\": 1680577733,  \"expires_at\": 1680578033,  \"url\": \"https://connect.stripe.com/setup/c/acct_1Mt0CORHFI4mz9Rw/TqckGNUHg2mG\"}\n```\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The Account Link object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/ach-debit/blocked-bank-accounts",
  "markdown": "# Blocked bank accounts | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to unblock ACH debit bank accounts and avoid future payment failures from blocked accounts.\n\nBank accounts can become blocked for reasons other than insufficient funds, and can become blocked for legitimate reasons or because of an error. You can minimize the chances of an account being blocked, and you can take actions to unblock accounts if you understand the underlying reasons.\n\n## Reasons for blocked bank accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen ACH Debits are returned for reasons other than insufficient funds (for example, an account is closed or frozen), NACHA rules require originators of an ACH Debit to review and confirm the bank account or take other action before reinitiating a debit. To comply with these Rules, Stripe blocks certain bank accounts until we can confirm that the issue causing the returns has been resolved. In addition to ensuring compliance with the NACHA rules, this process helps businesses reduce fraud and avoid repeated dispute and return fees. We don’t block bank accounts because of past insufficient funds returns.\n\n## Minimizing blocked customer bank accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can minimize the risk of dealing with blocked customer bank accounts by taking a few preventative steps. To minimize this risk, we recommend that you:\n\n*   **Verify accounts using Financial Connections Instant Verification**—This helps confirm accurate account details and verify account ownership.\n*   **Prevent accidental disputes**—Use clear [statement descriptors](https://support.stripe.com/questions/update-business-name-shown-on-customer-bank-statements) for your business name that customers can easily recognize on their bank statements, which minimizes the chance that a confused customer unintentionally disputes your payments.\n*   **Reduce bank auto-blocks**—Some banks and business accounts automatically reject ACH Debits attempts from unknown entities. To prevent this, have your customer provide [Stripe Company IDs](https://support.stripe.com/questions/ach-direct-debit-company-ids-for-stripe) to their bank to enable debits initiated by Stripe.\n\n## Identifying blocked accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn the Dashboard, ACH Debits that failed because blocked accounts are labeled `blocked` with an error message. When attempting to confirm a Payment Intent or Setup Intent, these blocked requests return an `HTTP 402` status and contain the `bank_account_unusable` error code. [Payment Intents](https://docs.stripe.com/api/payment_intents) also generate a failed charge, while [Setup Intents](https://docs.stripe.com/api/setup_intents) create a failed Setup Attempt instead.\n\n### Payment method status details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter creating a US bank account payment method, the [us\\_bank\\_account.status\\_details.blocked](https://docs.stripe.com/api/payment_methods/object#payment_method_object-us_bank_account-status_details-blocked) field renders if the account is blocked. You must make requests using a secret key for the field to appear.\n\nYou can access the [network\\_code](https://docs.stripe.com/api/payment_methods/object#payment_method_object-us_bank_account-status_details-blocked-network_code) and [reason properties](https://docs.stripe.com/api/payment_methods/object#payment_method_object-us_bank_account-status_details-blocked-reason) inside the PaymentMethod object to understand the details behind each block. The `network_code` contains the raw ACH return code associated with a previous failed payment or dispute made with this account, while the `reason` is a summary category that corresponds with the code’s semantic meaning.\n\nFor more information on removing blocks, consult the section on [handling blocked bank accounts](https://docs.stripe.com/payments/ach-debit/blocked-bank-accounts#block-category-table) below for each `reason` value. When Stripe removes the block, the `us_bank_account.status_details.blocked` field stops rendering on all previously affected payment methods.\n\n### Listening to status changes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe sends the [payment\\_method.automatically\\_updated](https://docs.stripe.com/api/events/types#event_types-payment_method.automatically_updated) event for all saved payment methods when a blockable ACH return is received. This also includes any verified customer bank accounts that were created using the Stripe [legacy ACH integration](https://docs.stripe.com/payments/ach-debit/migrating-from-charges).\n\nConsuming these events can provide advance notice if your business model relies on recurring payments that need to be processed before a certain date. Inspect the event data for the `us_bank_account.status_details.blocked` field, then work with your customer to unblock or switch bank accounts before initiating future payments.\n\nYou receive equivalent events when the block is removed, indicating that payment methods can be reused immediately, if an active mandate exists or you recollect one.\n\n## Handling blocked bank accounts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf a customer’s account becomes blocked, the action you take depends on the reason the account was blocked. You can identify the `reason` code on the blocked payment method.\n\n| Block category | Reason | Recommended action |\n| --- | --- | --- |\n| Bank-initiated failures | *   `bank_account_closed`<br>*   `bank_account_frozen`<br>*   `bank_account_invalid_details`<br>*   `bank_account_restricted` | Contact the customer to make sure their bank account is still valid, and that other information associated with the account is current and correct. If the customer’s bank account is no longer valid or active, ask them to update their payment method for future debits.<br><br>If, after contacting the customer, you believe the bank account was blocked in error, please contact [Stripe Support](https://support.stripe.com/contact). We’ll request additional information (proof that the account is open and debitable) to verify that the issue that caused the account to be blocked has been resolved. After we confirm this information, we can unblock the account for future use. |\n| Customer-initiated disputes | *   `debit_not_authorized` | When a customer disputes a payment as unauthorized, contact them before attempting any additional debits. After their first dispute, Stripe revokes the associated mandate and requires them to accept a new mandate authorization before additional debits can be attempted. If they dispute a second payment, the bank account is blocked.<br><br>Some bank accounts have anti-fraud tools that automatically reject debit attempts from unknown entities. You can typically identify these blocks with an R29 `network_code`. If you see an R29, contact your customer and confirm that they’ve asked their bank to allow ACH Debits from the [Stripe Company IDs](https://support.stripe.com/questions/ach-direct-debit-company-ids-for-stripe) before attempting additional debits.<br><br>If, after contacting the customer, you believe they unintentionally disputed these payments, contact [Stripe Support](https://support.stripe.com/contact). We’ll request additional information to verify that the accountholder authorized the payment and that the issue causing prior disputes has been resolved. After we confirm this information, we can unblock the account for future use. |\n| Other | *   `bank_account_unusable` | This can occur for bank accounts that are blocked due to activity with other Stripe users. For these accounts, contact [Stripe Support](https://support.stripe.com/contact) to inquire about possible resolution steps. |",
  "title": "Blocked bank accounts | Stripe Documentation",
  "description": "Learn how to unblock ACH debit bank accounts and avoid future payment failures from blocked accounts.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/authorizations/object",
  "markdown": "# The Authorization object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The total amount that was authorized or rejected. This amount is in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `amount` should be the same as `merchant_amount`, unless `currency` and `merchant_currency` are different.\n    \n*   Whether the authorization has been approved.\n    \n*   Card associated with this authorization.\n    \n*   #### \n    \n    cardholdernullable stringExpandable\n    \n    The cardholder to whom this authorization belongs.\n    \n*   The currency of the cardholder. This currency can be different from the currency presented at authorization and the `merchant_currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The current status of the authorization in its lifecycle.\n    \n    Possible enum values\n    \n    `closed`\n    \n    The authorization was declined or [captured](https://docs.stripe.com/issuing/purchases/transactions) through one or more [transactions](https://docs.stripe.com/api/issuing/authorizations/object#issuing_authorization_object-transactions).\n    \n    `pending`\n    \n    The authorization was created and is awaiting approval or was approved and is awaiting [capture](https://docs.stripe.com/issuing/purchases/transactions).\n    \n    `reversed`\n    \n    The authorization was reversed by the merchant or expired without capture.\n    \n\n### More attributes\n\n*   #### \n    \n    amount\\_detailsnullable object\n    \n\n*   #### \n    \n    balance\\_transactionsarray of objects\n    \n\n*   #### \n    \n    network\\_datanullable object\n    \n*   #### \n    \n    pending\\_requestnullable object\n    \n*   #### \n    \n    request\\_historyarray of objects\n    \n*   #### \n    \n    tokennullable stringPreview featureExpandable\n    \n*   #### \n    \n    transactionsarray of objects\n    \n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Update an authorization](https://docs.stripe.com/api/issuing/authorizations/update)\n\nUpdates the specified Issuing `Authorization` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an updated Issuing `Authorization` object if a valid identifier was provided.\n\nPOST /v1/issuing/authorizations/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/authorizations/iauth_1JVXl82eZvKYlo2CPIiWlzrn \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [Retrieve an authorization](https://docs.stripe.com/api/issuing/authorizations/retrieve)\n\nRetrieves an Issuing `Authorization` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an Issuing `Authorization` object if a valid identifier was provided.\n\nGET /v1/issuing/authorizations/:id\n\n```\ncurl https://api.stripe.com/v1/issuing/authorizations/iauth_1JVXl82eZvKYlo2CPIiWlzrn \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",  \"object\": \"issuing.authorization\",  \"amount\": 382,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": false,  \"authorization_method\": \"online\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"San Francisco\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"94111\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1626425119,      \"email\": \"jenny.rosen@example.com\",      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"Jenny Rosen\",      \"phone_number\": \"+18008675309\",      \"redaction\": null,      \"requirements\": {        \"disabled_reason\": null,        \"past_due\": []      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1626425206,    \"currency\": \"usd\",    \"exp_month\": 6,    \"exp_year\": 2024,    \"last4\": \"8693\",    \"livemode\": false,    \"metadata\": {},    \"redaction\": null,    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [        {          \"amount\": 50000,          \"categories\": [],          \"interval\": \"daily\"        }      ],      \"spending_limits_currency\": \"usd\"    },    \"status\": \"active\",    \"type\": \"virtual\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"google_pay\": {        \"eligible\": true,        \"ineligible_reason\": null      },      \"primary_account_identifier\": null    }  },  \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",  \"created\": 1630657706,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 382,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"computer_software_stores\",    \"category_code\": \"5734\",    \"city\": \"SAN FRANCISCO\",    \"country\": \"US\",    \"name\": \"STRIPE\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94103\",    \"state\": \"CA\"  },  \"metadata\": {    \"order_id\": \"6735\"  },  \"network_data\": null,  \"pending_request\": null,  \"redaction\": null,  \"request_history\": [    {      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"created\": 1630657706,      \"currency\": \"usd\",      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"reason\": \"verification_failed\",      \"reason_message\": null    }  ],  \"status\": \"closed\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"not_provided\",    \"cvc_check\": \"mismatch\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```\n\n## [List all authorizations](https://docs.stripe.com/api/issuing/authorizations/list)\n\nReturns a list of Issuing `Authorization` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Only return authorizations that belong to the given card.\n    \n*   Only return authorizations that belong to the given cardholder.\n    \n*   Only return authorizations with the given status. One of `pending`, `closed`, or `reversed`.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` authorizations, starting after authorization `starting_after`. Each entry in the array is a separate Issuing `Authorization` object. If no more authorizations are available, the resulting array will be empty.\n\nGET /v1/issuing/authorizations\n\n```\ncurl -G https://api.stripe.com/v1/issuing/authorizations \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/issuing/authorizations\",  \"has_more\": false,  \"data\": [    {      \"id\": \"iauth_1JVXl82eZvKYlo2CPIiWlzrn\",      \"object\": \"issuing.authorization\",      \"amount\": 382,      \"amount_details\": {        \"atm_fee\": null      },      \"approved\": false,      \"authorization_method\": \"online\",      \"balance_transactions\": [],      \"card\": {        \"id\": \"ic_1JDmgz2eZvKYlo2CRXlTsXj6\",        \"object\": \"issuing.card\",        \"brand\": \"Visa\",        \"cancellation_reason\": null,        \"cardholder\": {          \"id\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",          \"object\": \"issuing.cardholder\",          \"billing\": {            \"address\": {              \"city\": \"San Francisco\",              \"country\": \"US\",              \"line1\": \"123 Main Street\",              \"line2\": null,              \"postal_code\": \"94111\",              \"state\": \"CA\"            }          },          \"company\": null,          \"created\": 1626425119,          \"email\": \"jenny.rosen@example.com\",          \"individual\": null,          \"livemode\": false,          \"metadata\": {},          \"name\": \"Jenny Rosen\",          \"phone_number\": \"+18008675309\",          \"redaction\": null,          \"requirements\": {            \"disabled_reason\": null,            \"past_due\": []          },          \"spending_controls\": {            \"allowed_categories\": [],            \"blocked_categories\": [],            \"spending_limits\": [],            \"spending_limits_currency\": null          },          \"status\": \"active\",          \"type\": \"individual\"        },        \"created\": 1626425206,        \"currency\": \"usd\",        \"exp_month\": 6,        \"exp_year\": 2024,        \"last4\": \"8693\",        \"livemode\": false,        \"metadata\": {},        \"redaction\": null,        \"replaced_by\": null,        \"replacement_for\": null,        \"replacement_reason\": null,        \"shipping\": null,        \"spending_controls\": {          \"allowed_categories\": null,          \"blocked_categories\": null,          \"spending_limits\": [            {              \"amount\": 50000,              \"categories\": [],              \"interval\": \"daily\"            }          ],          \"spending_limits_currency\": \"usd\"        },        \"status\": \"active\",        \"type\": \"virtual\",        \"wallets\": {          \"apple_pay\": {            \"eligible\": true,            \"ineligible_reason\": null          },          \"google_pay\": {            \"eligible\": true,            \"ineligible_reason\": null          },          \"primary_account_identifier\": null        }      },      \"cardholder\": \"ich_1JDmfb2eZvKYlo2CwHUgaAxU\",      \"created\": 1630657706,      \"currency\": \"usd\",      \"livemode\": false,      \"merchant_amount\": 382,      \"merchant_currency\": \"usd\",      \"merchant_data\": {        \"category\": \"computer_software_stores\",        \"category_code\": \"5734\",        \"city\": \"SAN FRANCISCO\",        \"country\": \"US\",        \"name\": \"STRIPE\",        \"network_id\": \"1234567890\",        \"postal_code\": \"94103\",        \"state\": \"CA\"      },      \"metadata\": {        \"order_id\": \"6735\"      },      \"network_data\": null,      \"pending_request\": null,      \"redaction\": null,      \"request_history\": [        {          \"amount\": 382,          \"amount_details\": {            \"atm_fee\": null          },          \"approved\": false,          \"created\": 1630657706,          \"currency\": \"usd\",          \"merchant_amount\": 382,          \"merchant_currency\": \"usd\",          \"reason\": \"verification_failed\",          \"reason_message\": null        }      ],      \"status\": \"closed\",      \"transactions\": [],      \"verification_data\": {        \"address_line1_check\": \"not_provided\",        \"address_postal_code_check\": \"not_provided\",        \"cvc_check\": \"mismatch\",        \"expiry_check\": \"match\"      },      \"wallet\": null    }    {...}    {...}  ],}\n```\n\n## [Approve an authorization](https://docs.stripe.com/api/issuing/authorizations/approve)\n\n\\[Deprecated\\] Approves a pending Issuing `Authorization` object. This request should be made within the timeout window of the [real-time authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations) flow. This method is deprecated. Instead, [respond directly to the webhook request to approve an authorization](https://docs.stripe.com/issuing/controls/real-time-authorizations#authorization-handling).\n\n### Parameters\n\n*   If the authorization’s `pending_request.is_amount_controllable` property is `true`, you may provide this value to control how much to hold for the authorization. Must be positive (use [`decline`](https://docs.stripe.com/api/issuing/authorizations/decline) to decline an authorization request).\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns an approved Issuing `Authorization` object.\n\nPOST /v1/issuing/authorizations/:id/approve\n\n```\ncurl -X POST https://api.stripe.com/v1/issuing/authorizations/iauth_1MvSKeLkdIwHu7ixKr8rO1HV/approve \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"iauth_1MvSKeLkdIwHu7ixKr8rO1HV\",  \"object\": \"issuing.authorization\",  \"amount\": 0,  \"amount_details\": {    \"atm_fee\": null  },  \"approved\": true,  \"authorization_method\": \"keyed_in\",  \"balance_transactions\": [],  \"card\": {    \"id\": \"ic_1MvSKeLkdIwHu7ixFANTvxgn\",    \"object\": \"issuing.card\",    \"brand\": \"Visa\",    \"cancellation_reason\": null,    \"cardholder\": {      \"id\": \"ich_1MsKAB2eZvKYlo2C3eZ2BdvK\",      \"object\": \"issuing.cardholder\",      \"billing\": {        \"address\": {          \"city\": \"Anytown\",          \"country\": \"US\",          \"line1\": \"123 Main Street\",          \"line2\": null,          \"postal_code\": \"12345\",          \"state\": \"CA\"        }      },      \"company\": null,      \"created\": 1680415995,      \"email\": null,      \"individual\": null,      \"livemode\": false,      \"metadata\": {},      \"name\": \"John Doe\",      \"phone_number\": null,      \"requirements\": {        \"disabled_reason\": \"requirements.past_due\",        \"past_due\": [          \"individual.card_issuing.user_terms_acceptance.ip\",          \"individual.card_issuing.user_terms_acceptance.date\",          \"individual.first_name\",          \"individual.last_name\"        ]      },      \"spending_controls\": {        \"allowed_categories\": [],        \"blocked_categories\": [],        \"spending_limits\": [],        \"spending_limits_currency\": null      },      \"status\": \"active\",      \"type\": \"individual\"    },    \"created\": 1681162380,    \"currency\": \"usd\",    \"exp_month\": 8,    \"exp_year\": 2024,    \"last4\": \"4242\",    \"livemode\": false,    \"metadata\": {},    \"replaced_by\": null,    \"replacement_for\": null,    \"replacement_reason\": null,    \"shipping\": null,    \"spending_controls\": {      \"allowed_categories\": null,      \"blocked_categories\": null,      \"spending_limits\": [],      \"spending_limits_currency\": null    },    \"status\": \"active\",    \"type\": \"physical\",    \"wallets\": {      \"apple_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_cardholder_contact\"      },      \"google_pay\": {        \"eligible\": false,        \"ineligible_reason\": \"missing_cardholder_contact\"      },      \"primary_account_identifier\": null    }  },  \"cardholder\": null,  \"created\": 1681162380,  \"currency\": \"usd\",  \"livemode\": false,  \"merchant_amount\": 0,  \"merchant_currency\": \"usd\",  \"merchant_data\": {    \"category\": \"taxicabs_limousines\",    \"category_code\": \"4121\",    \"city\": \"San Francisco\",    \"country\": \"US\",    \"name\": \"Rocket Rides\",    \"network_id\": \"1234567890\",    \"postal_code\": \"94107\",    \"state\": \"CA\"  },  \"metadata\": {},  \"network_data\": null,  \"pending_request\": {    \"amount\": 700,    \"amount_details\": {      \"atm_fee\": null    },    \"currency\": \"usd\",    \"is_amount_controllable\": false,    \"merchant_amount\": 700,    \"merchant_currency\": \"usd\"  },  \"request_history\": [],  \"status\": \"pending\",  \"transactions\": [],  \"verification_data\": {    \"address_line1_check\": \"not_provided\",    \"address_postal_code_check\": \"match\",    \"cvc_check\": \"match\",    \"expiry_check\": \"match\"  },  \"wallet\": null}\n```",
  "title": "The Authorization object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/ach-debit/sec-codes",
  "markdown": "# Overview of ACH SEC codes\n\n## Learn about different types of customer authorizations for ACH Direct Debit.\n\nA Standard Entry Class (SEC) code is a three letter code that describes how a customer or business authorized an ACH transaction. SEC codes are defined and maintained by [Nacha](https://www.nacha.org/newrules), the governing body for the ACH network.\n\nBusinesses must make sure that the correct code is used when initiating debit transactions to make sure they comply with ACH Direct Debit rules and appropriate authorization evidence in the event of a dispute. The business is responsible under the ACH Direct Debit rules for indicating the appropriate SEC code for each ACH transaction.\n\nStripe currently supports four types of SEC codes for ACH Debits. If you don’t specify a mandate collection method, Stripe defaults to using WEB for consumer bank accounts and CCD for business bank accounts.\n\nThe mandate requirements under ACH Direct Debit rules and applicable law vary based on the type of mandate collected. The information on this page relating to your compliance with ACH mandate requirements is for your general guidance, and isn’t legal advice. If you’re unsure of the applicable mandate requirements, consult with a professional about your obligations.\n\n## WEB (Internet Initiated/Mobile Entry) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis code is used to initiate entries to a consumer’s account when the internet or a mobile device is used to initiate the transaction. WEB is the default unless you indicate otherwise. Refunds processed for WEB transactions use the PPD SEC code.\n\n## CCD (Corporate Credit or Debit Entry) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis code is used to facilitate business-to-business payments and is applied to charges to all PaymentMethods that have `account_holder_type=company`, regardless of the authorization type.\n\n## PPD (Prearranged Payment and Deposit) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis code is used to initiate entries to a consumer’s account, based on standing or single-entry authorization from that customer in writing. Your customer’s authorization must be in writing and signed or otherwise authenticated (that is, confirm the customer’s identity and agreement such as using a phone for a previously provided written authorization). Authorizations need to include information required for [online mandates](https://docs.stripe.com/payments/ach-debit#mandates-for-online-custom-payment-forms) and you must provide a copy of the authorization to your customer.\n\nTo initiate a PPD debit, you must create a mandate with offline customer acceptance. You can do so by confirming a PaymentIntent or a SetupIntent with offline customer acceptance and providing a `collection_method=paper` mandate option as shown below:\n\n`curl https://api.stripe.com/v1/payment_intents/`\n\n`{{PAYMENT_INTENT_ID}}`\n\n`/confirm \\  -u \"  sk_test_4eC39HqLyjWDarjtT1zdp7dc  :\" \\  -d \"mandate_data[customer_acceptance][type]\"=offline \\  -d \"mandate_data[customer_acceptance][accepted_at]\"=1647448692 \\  -d \"payment_method_options[us_bank_account][mandate_options][collection_method]\"=paper`\n\n## TEL (Telephone-Initiated Entry) Beta ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis code is used to initiate debit transactions to a consumer’s account when authorization is given over the telephone. TEL debits are currently in private beta. Contact Stripe Support if you initiate bank debits to consumer accounts over the telephone.\n\n### Requirements for Telephone-initiated payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your business accepts ACH payments over the telephone, Stripe supports single TEL ACH debit transactions. Don’t use a TEL entry where a standing authorization is in place or to support a recurring transaction. TEL entries have their own Nacha requirements that you need to meet prior to accepting and processing these payments.\n\n#### Existing relationship![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can only use a TEL entry if:\n\n*   You and the customer have an existing relationship, which means that:\n    *   You and the customer have a written agreement in place for the provision of goods or services; or\n    *   Your customer has purchased goods or services from you within the past 2 years; or\n*   You don’t have an existing relationship with the customer, but the customer initiated the telephone call to you.\n\nYour customer’s pre-existing relationship with one of your affiliates is not sufficient to be an existing relationship between you and your customer.\n\n#### Verifications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou must establish and implement commercially reasonable procedures to verify the identity of the customer (for example, name, address, and telephone number). Additionally, you must establish and implement commercially reasonable procedures to verify that the routing numbers provided by your customers are valid.\n\nYour customer’s explicit oral authorization is needed prior to you initiating a debit entry to their account. Authorizations need to include information required for [online mandates](https://docs.stripe.com/payments/ach-debit#mandates-for-online-custom-payment-forms), along with a telephone number available to your customer for inquiries.\n\nIn addition, you must capture authorization by either an audio recording of the customer’s oral authorization (in accordance with applicable state law regarding the recording of calls) or providing written notice to the customer of their authorization _before_ the first debit of their bank account.\n\nSample script\n\nTo confirm your payment, I understand that you, {{customer’s name}} authorize {{business name}} to debit you on {{debit date}} for the amount of {{amount}} for {{service provided}}. The account information you’ve provided me is as follows: Bank Name: {{bank name}}. Bank ABA Routing Number: {{routing number}}. Bank Account Type: {{checking/savings}}. Bank Account Number: {{account number}}. Is this information correct?\n\nAs of today’s date, {{date}}, this debit authorization is valid and will remain in effect until you, {{customer name}}, notify {{business name}} of its cancellation by calling {{customer support phone number}}\n\nFor single TEL entries, if you provide a written notice instead of audio recording the authorization, you should indicate how you will provide that notice (for example, emails and mailed letters).",
  "title": "Overview of ACH SEC codes | Stripe Documentation",
  "description": "Learn about different types of customer authorizations for ACH Direct Debit.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/setup_intents/collect_bank_account_for_setup",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/expand/use-cases",
  "markdown": "# Use cases for expanding responses\n\n## Learn how the expand attribute helps you perform common tasks.\n\n## See the Stripe fee for a given payment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSometimes, you might want to check the processing fees for a payment. You can only see these Stripe fees after the payment goes through and the balance transaction is created. This [balance transaction](https://docs.stripe.com/api/balance_transactions/object#balance_transaction_object-fee_details) is created automatically in the background, and the `charge.updated` event will show the fees.\n\nInstead of looking up the balance transaction separately, you can retrieve it in a single call using `expand`. For example:\n\n`curl https://api.stripe.com/v1/payment_intents/pi_1Gpl8kLHughnNhxyIb1RvRTu \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"expand[]\"=\"latest_charge.balance_transaction\" \\   -G`\n\nUsers on API version [2022-08-01](https://docs.stripe.com/upgrades#2022-08-01) or older:\n\n`curl https://api.stripe.com/v1/payment_intents/pi_1Gpl8kLHughnNhxyIb1RvRTu \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"expand[]\"=\"charges.data.balance_transaction\" \\   -G`\n\n#### Note\n\nA payment intent must be [captured](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method#capture-funds) and have a [status](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-status) of `succeeded` for the Stripe fees to be available.\n\n## See the charges included in a payout ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nEvery automatic [payout](https://docs.stripe.com/payouts \"payout\") is tied to historical changes to the balance of your Stripe account. The API records these historical changes as [balance transactions](https://docs.stripe.com/api/balance_transactions/object), which you can retrieve using [List Balance Transactions](https://docs.stripe.com/api/balance_transactions/list). From a list of balance transactions, you can expand the [source](https://docs.stripe.com/api/balance_transactions/object#balance_transaction_object-source) property to gather information on what triggered the change to the account balance (Charge, Refund, Transfer, and so on). For example:\n\n`curl https://api.stripe.com/v1/balance_transactions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d payout=po_1Gl3ZLLHughnNhxyDrOia0vI \\   -d type=charge \\   -d \"expand[]\"=\"data.source\" \\   -G`\n\n#### Note\n\nYou can only retrieve balance transaction history on _automatic_ payouts. If you have manual payouts enabled, you must track transaction history on your own.\n\nIf you’re using [Connect](https://docs.stripe.com/connect \"Connect\") with destination charges, you can retrieve the same information on behalf of your connected accounts. One difference is that destination charges involve both a transfer and a linked payment (in the form of a Charge object) to move funds to a connected account. So when listing the balance transactions bundled in your connected account’s payouts, each balance transaction’s source is linked to the transfer’s payment rather than the originating Charge. To retrieve the originating Charge, you need to expand a payment’s linked transfer through the [source\\_transfer](https://docs.stripe.com/api/charges/object#charge_object-source_transfer) property; and from there, expand the transfer’s [source\\_transaction](https://docs.stripe.com/api/transfers/object#transfer_object-source_transaction) property:\n\n`curl https://api.stripe.com/v1/balance_transactions \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d payout=po_1G7bnaD2wdkPsFGzdVOqU44u \\   -d type=payment \\   -d \"expand[]\"=\"data.source.source_transfer.source_transaction\" \\   -H \"Stripe-Account: acct_1G7PaoD2wdkPsFGz\" \\   -G`",
  "title": "Use cases for expanding responses | Stripe Documentation",
  "description": "Learn how the expand attribute helps you perform common tasks.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/setup_intents/confirm_us_bank_account_setup",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/js/payment_intents/verify_microdeposits_for_payment",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/js/tokens/create_token?type=bank_account",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/connect/dashboard/viewing-all-accounts",
  "markdown": "# View all accounts | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to view all of your connected accounts, and filter them by verification status, balance, volume, and other attributes.\n\nThe [accounts overview](https://dashboard.stripe.com/connect/accounts/overview) page provides multiple ways to view your connected accounts. By default, the **All accounts** tab is selected. However, the other tabs organize accounts according to their status. Each tab includes the number of accounts with that status. When you select a tab, the results in your accounts list update automatically. You can then narrow these results further by using the filter feature on each tab.\n\n## Status tabs and workflows ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSelecting different status tabs on the account overview page automatically updates the filters and columns displayed. The interactive table below provides an overview and description of the columns associated with each tab. You can sort many of the columns listed below can also by clicking on the column heading in the Dashboard.\n\nThis tab is displayed by default, and is commonly used to see a high-level view of all your connected accounts.\n\n| Column | Description |\n| --- | --- |\n| Accounts | The name of the account. |\n| Status | The [account status](https://docs.stripe.com/connect/dashboard#status-badges). |\n| Balance | The total of pending and available balances, converted to your platform’s default currency. |\n| Volume | The total gross volume on the account, converted to your platform’s default currency. This is only displayed for connected accounts that don’t have access to the full Stripe Dashboard (including Custom and Express accounts) and connected accounts with [platform controls](https://docs.stripe.com/connect/platform-controls-for-stripe-dashboard-accounts). |\n| Type | Account type (Standard, Express, Custom, or [None](https://docs.stripe.com/connect/migrate-to-controller-properties)). |\n| Country (icon) | An icon representing the account’s country. |\n| Connected | The date the account connected to your platform. |\n\n## Filters ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nEach tab provides a list of accounts based on a shared status, but you can use filters to narrow the results further. When you apply a new filter, the account list updates automatically.\n\n![screenshot of sample filter](https://b.stripecdn.com/docs-statics-srv/assets/filters.09676e78aad7739ba40cc52c335c523e.png)\n\nFilter accounts by country",
  "title": "View all accounts | Stripe Documentation",
  "description": "Learn how to view all of your connected accounts, and filter them by verification status, balance, volume, and other attributes.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/treasury/transaction_entries/object",
  "markdown": "# The TransactionEntry object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   The current impact of the TransactionEntry on the FinancialAccount’s balance.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   When the TransactionEntry will impact the FinancialAccount’s balance.\n    \n*   The FinancialAccount associated with this object.\n    \n*   Token of the flow associated with the TransactionEntry.\n    \n*   #### \n    \n    flow\\_detailsnullable objectExpandable\n    \n    Details of the flow associated with the TransactionEntry.\n    \n*   Type of the flow associated with the TransactionEntry.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `credit_reversal`<br><br>The Transaction is associated with a CreditReversal. |\n    | `debit_reversal`<br><br>The Transaction is associated with a DebitReversal. |\n    | `inbound_transfer`<br><br>The Transaction is associated with an InboundTransfer. |\n    | `issuing_authorization`<br><br>The Transaction is associated with an Issuing authorization. |\n    | `other`<br><br>The Transaction is associated with some other money movement not listed above. |\n    | `outbound_payment`<br><br>The Transaction is associated with an OutboundPayment. |\n    | `outbound_transfer`<br><br>The Transaction is associated with an OutboundTransfer. |\n    | `received_credit`<br><br>The Transaction is associated with a ReceivedCredit. |\n    | `received_debit`<br><br>The Transaction is associated with a ReceivedDebit. |\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   #### \n    \n    transactionstringExpandable\n    \n    The Transaction associated with this object.\n    \n*   The specific money movement that generated the TransactionEntry.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `credit_reversal`<br><br>The TransactionEntry was generated by a CreditReversal. |\n    | `credit_reversal_posting`<br><br>The TransactionEntry was generated by a posted CreditReversal. |\n    | `debit_reversal`<br><br>The TransactionEntry was generated by a DebitReversal. |\n    | `inbound_transfer`<br><br>The TransactionEntry was generated by an InboundTransfer. |\n    | `inbound_transfer_return`<br><br>The TransactionEntry was generated by an InboundTransferReturn. |\n    | `issuing_authorization_hold`<br><br>The TransactionEntry was generated by an Issuing authorization hold. |\n    | `issuing_authorization_release`<br><br>The TransactionEntry was generated by an Issuing authorization release. |\n    | `other`<br><br>The TransactionEntry was generated by some other money movement. |\n    | `outbound_payment`<br><br>The TransactionEntry was generated by an OutboundPayment. |\n    | `outbound_payment_cancellation`<br><br>The TransactionEntry was generated by a cancelled OutboundPayment. |\n    | Show 10 more |\n    \n\nThe TransactionEntry object\n\n```\n{  \"id\": \"trxne_1MtkgV2eZvKYlo2CmofEnIwJ\",  \"object\": \"treasury.transaction_entry\",  \"balance_impact\": {    \"cash\": 0,    \"inbound_pending\": 0,    \"outbound_pending\": -1000  },  \"created\": 1680756271,  \"currency\": \"usd\",  \"effective_at\": 1680756271,  \"financial_account\": \"fa_1MtkgV2eZvKYlo2CdxyvnHeQ\",  \"flow\": \"obt_1MtkgV2eZvKYlo2CCxhXVFLB\",  \"flow_type\": \"outbound_transfer\",  \"livemode\": false,  \"transaction\": \"trxn_1MtkgV2eZvKYlo2CRYxD7KLh\",  \"type\": \"outbound_transfer\"}\n```\n\n## [Retrieve a TransactionEntry](https://docs.stripe.com/api/treasury/transaction_entries/retrieve)\n\nRetrieves a TransactionEntry object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a TransactionEntry object.\n\nGET /v1/treasury/transaction\\_entries/:id\n\n```\ncurl https://api.stripe.com/v1/treasury/transaction_entries/trxne_1MtkgV2eZvKYlo2CmofEnIwJ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"trxne_1MtkgV2eZvKYlo2CmofEnIwJ\",  \"object\": \"treasury.transaction_entry\",  \"balance_impact\": {    \"cash\": 0,    \"inbound_pending\": 0,    \"outbound_pending\": -1000  },  \"created\": 1680756271,  \"currency\": \"usd\",  \"effective_at\": 1680756271,  \"financial_account\": \"fa_1MtkgV2eZvKYlo2CdxyvnHeQ\",  \"flow\": \"obt_1MtkgV2eZvKYlo2CCxhXVFLB\",  \"flow_type\": \"outbound_transfer\",  \"livemode\": false,  \"transaction\": \"trxn_1MtkgV2eZvKYlo2CRYxD7KLh\",  \"type\": \"outbound_transfer\"}\n```\n\n## [List all TransactionEntries](https://docs.stripe.com/api/treasury/transaction_entries/list)\n\nRetrieves a list of TransactionEntry objects.\n\n### Parameters\n\n*   #### \n    \n    financial\\_accountstringRequired\n    \n    Returns objects associated with this FinancialAccount.\n    \n*   Only return TransactionEntries that were created during the given date interval.\n    \n*   The results are in reverse chronological order by `created` or `effective_at`. The default is `created`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `created`<br><br>Timestamp describing when the TransactionEntry was created. |\n    | `effective_at`<br><br>Timestamp describing when the TransactionEntry was effective. |\n    \n*   Only return TransactionEntries associated with this Transaction.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` TransactionEntries, starting after TransactionEntry `starting_after`. Each entry in the array is a separate TransactionEntry object. If no more TransactionEntries are available, the resulting array is empty.\n\nGET /v1/treasury/transaction\\_entries\n\n```\ncurl -G https://api.stripe.com/v1/treasury/transaction_entries \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d financial_account=fa_1MtkgV2eZvKYlo2CdxyvnHeQ \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/treasury/transaction_entries\",  \"has_more\": false,  \"data\": [    {      \"id\": \"trxne_1MtkgV2eZvKYlo2CmofEnIwJ\",      \"object\": \"treasury.transaction_entry\",      \"balance_impact\": {        \"cash\": 0,        \"inbound_pending\": 0,        \"outbound_pending\": -1000      },      \"created\": 1680756271,      \"currency\": \"usd\",      \"effective_at\": 1680756271,      \"financial_account\": \"fa_1MtkgV2eZvKYlo2CdxyvnHeQ\",      \"flow\": \"obt_1MtkgV2eZvKYlo2CCxhXVFLB\",      \"flow_type\": \"outbound_transfer\",      \"livemode\": false,      \"transaction\": \"trxn_1MtkgV2eZvKYlo2CRYxD7KLh\",      \"type\": \"outbound_transfer\"    }    {...}    {...}  ],}\n```\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The TransactionEntry object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/get-started/checklist/website",
  "markdown": "# Website checklist | Stripe DocumentationThe Stripe Docs logo\n\n## Make sure your website aligns with card network standards and e-commerce best practices.\n\nThis page contains a list of the common elements—such as accurate product descriptions, clear policies, and proper security features—that each business on Stripe should address on its website. Adhering to these recommendations reduces the risk of customer confusion and disputes. It also helps you meet Stripe’s standards and the standards set by the credit card networks.\n\nOur [Stripe Shop Terms of Use](https://stripe.com/stripe-shop/legal) are available under the [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/). To ensure compliance with card network rules, feel free to use the Stripe Shop Terms as a starting point as you build your site.\n\n*   A description of what you are selling\n    \n    Besides only listing the name of the product or service, you can help customers with their purchasing decision by providing detailed text descriptions of what you’re selling. For physical goods, include multiple pictures and information about material, colors, and other details. This is also an important measure to protect against potential disputes: setting the right expectations up front gives your customers a clear idea of what they get for their money.\n    \n    If we review your website and find that it isn’t clear what you’re selling, we may contact you with recommendations for improving the description.\n    \n*   To support international purchasers, clearly display the currency associated with the prices on your site. Listing only the currency symbol may not be enough, so be as explicit as possible when showing prices.\n    \n*   Customer service contact information\n    \n    Make sure your customers can find multiple contact methods on your site, including direct communication channels, such as email addresses, phone numbers, and live chat (something besides contact forms). Low-friction communication is key to providing a good customer experience and heading off misunderstandings early on, helping to avoid disputes.\n    \n    ​​If we review your website and can’t find a clear way to contact you, we may ask that you add some contact options to the site.\n    \n*   Your fulfillment policies\n    \n    Your customers should be able to determine how you fulfill orders. Some examples of policies that may be relevant for your business include:\n    \n    *   Refund policy — Describe under what conditions customers can receive a refund.\n    *   Delivery policy — Describe how and where goods are shipped, and on what timeline.\n    *   Return policy – Describe under what conditions customers can return purchased goods.\n    *   Cancellation policy — Describe under what conditions customers can cancel subscriptions or reservations.\n    \n    Being clear and fair in these policies goes a long way toward building customer trust, and it can also provide you with protection against disputes. If we review your website and can’t find information on your fulfillment policies, we may request that you add some additional content about order fulfillment.\n    \n*   Legal or export restrictions applicable to your business\n    \n    Certain products and services are subject to restrictions. Properly disclosing any applicable restrictions and how they may impact your customers helps build trust with them.\n    \n*   Your website's privacy policy\n    \n    Consumer data privacy is now a priority for legislation and governments around the world. Clearly explaining your website’s privacy policy helps you both comply with privacy laws and helps your customers understand how their data is protected, used, or disclosed.\n    \n*   If you have a physical address, listing it on your website adds credibility for your business.\n    \n*   The terms of any promotions you are offering\n    \n    Clearly disclose the conditions of any promotion, discount, or trial that you offer to customers. Display a link or disclaimer text so that it’s visible when customers agree to participate. Transparency around these conditions can help avoid confusion and disputes.\n    \n*   The security of your website and customer payment information\n    \n    Make sure that your customers know that you comply with the PCI standards. You can learn more about what [PCI compliance](https://docs.stripe.com/security/guide#validating-pci-compliance \"PCI compliance\") means for Stripe by reading about [integration security](https://docs.stripe.com/security). Ensure that your website (especially your payment form) uses HTTPS and other security best practices and is not susceptible to [card testing](https://docs.stripe.com/disputes/prevention/card-testing). You must also explain that your customer’s payment information is handled safely when doing business with you.\n    \n*   The logos of the credit cards you accept\n    \n    You can reduce friction in the checkout process by displaying the brand logos of the credit cards that you accept, making it clear to customers that you accept their preferred card.\n    \n\n## Card network policies ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThese guidelines are based on the rules published by the card networks. As an online merchant, it’s your responsibility to ensure that you’re compliant with these rules, including the [Visa Rules and Regulations](https://usa.visa.com/dam/VCOM/download/about-visa/visa-rules-public.pdf), the [Mastercard Rules](https://www.mastercard.us/en-us/business/overview/support/rules.html), the [American Express Merchant Operating Guide](http://www.americanexpress.com/merchantopguide), and the Discover Network Rules (please [contact Discover](https://www.discover.com/contact-us/) for a copy).",
  "title": "Website checklist | Stripe Documentation",
  "description": "Make sure your website aligns with card network standards and e-commerce best practices.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/dashboard/review-actionable-accounts",
  "markdown": "# Review actionable accounts | Stripe DocumentationThe Stripe Docs logo\n\nThe [Accounts to review tab](https://dashboard.stripe.com/connect/accounts_to_review) in your Connect Dashboard helps you monitor the risk and onboarding status of all of your connected accounts. From there, you can:\n\n*   **Proactively monitor your accounts**: Monitor the status of your accounts with any open risk, onboarding, or verification requirements. View any risk or onboarding restrictions that impact your accounts or that will impact them in the future.\n*   **Identify the exact requirements needed**: Understand an account status quickly, without needing to look through webhook logs. View clear instructions on how to resolve open requirements and take action.\n*   **Export a list of accounts**: Download a CSV list of accounts, including remediation links that your accounts with open requirements can use to submit information and resolve issues.\n\n## View all accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [Accounts to review tab](https://dashboard.stripe.com/connect/accounts_to_review) in your Connect Dashboard provides a list of all your connected accounts with open risk, verification, and onboarding requirements.\n\n![The Accounts to review page showing connected accounts that need action.](https://b.stripecdn.com/docs-statics-srv/assets/accounts-to-review-listview.56a3016b917811e060e006ab8216bcfe.png)\n\nTo view the accounts in a particular status, select the corresponding tab:\n\n| Tab | Description |\n| --- | --- |\n| Actions required | Active accounts with open risk, onboarding, or verification requirements from Stripe or from your platform. |\n| In review | Active accounts that Stripe is reviewing submitted information for or is conducting an account review of, regardless of whether any account capabilities are restricted. |\n| Rejected | All accounts that have been rejected by Stripe or by your platform. |\n\nIn the **Actions required** and **In review** tabs, you can toggle the **Restrictions** column between restrictions and information needed by clicking the gear in its heading.\n\n#### Note\n\nWithin each tab, you can customize the filters to narrow the list of connected accounts that are most relevant to you. You can filter by:\n\n*   Payments capability status\n*   Payouts capability status\n*   Issuing capability status\n*   Account status\n*   Verification requirement\n*   Volume\n*   Information needed\n*   Last payout date\n*   Connected date\n*   Last activity\n\nYou can see all accounts in the currently selected status by removing the default filters.\n\n![A tooltip showing additional filters on the Accounts to review page, including Payments capability status and Payouts capability status.](https://b.stripecdn.com/docs-statics-srv/assets/filters.2f75daf69b8b149699fcd5737e45c3f8.png)\n\nYou can sort the accounts list by total volume, due date, or information needed. In the **Rejected** tab, you can also sort by accounts with any ongoing appeals.\n\n#### Note\n\nThe **Total volume** column displays “Unavailable” for connected accounts with Stripe Dashboard access where you don’t have [platform controls](https://docs.stripe.com/connect/platform-controls-for-stripe-dashboard-accounts) enabled. Filtering by volume always excludes them. You can identify these accounts by filtering the list by platform controls.\n\nDepending on a connected account’s configuration, you can take action on it in the **Action required** list or **In review** list by clicking the account’s overflow menu . You can take the following actions:\n\n*   Open the **Actions required** tab on the account activity page.\n*   Reject the account.\n*   Pause or resume payouts for the account.\n*   Pause or resume payments for the account.\n*   Generate a [remediation link](https://docs.stripe.com/connect/dashboard/remediation-links) that the account can use to take required actions.\n\n![A dropdown menu showing the ability to reject the connected account, resume payouts, or resume payments](https://b.stripecdn.com/docs-statics-srv/assets/action-reject-account.27a99b4970cc2de5c2f4d0dcbcd05b71.png)\n\n## Export a list of accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can download a CSV list of all accounts in the current view by clicking **Export** in the top-right corner of the page. It opens a dialog that lets you select the fields to include:\n\n*   Account ID\n*   Business name\n*   Representative email\n*   Account status\n*   Earliest due date\n*   Payment status\n*   Payout status\n*   Issuing status\n*   Verification update\n*   Information needed\n*   Remediation link\n*   Total volume (USD) (in minor units)\n*   Last payout date\n*   Connected date\n*   Last activity\n\nYou can import the list into another system or use it to [send remediation links to your connected accounts](https://docs.stripe.com/connect/dashboard/remediation-links). A connected account can use a remediation link to submit information for open requirements.\n\n## Use Stripe Sigma to identify accounts with open requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you use [Stripe Sigma](https://docs.stripe.com/stripe-data), it can identify accounts that have open `requirements` or `future_requirements`. For information about querying for Connect information with Sigma, see [Query Connect data](https://docs.stripe.com/stripe-data/query-connect-data).\n\n## Review individual accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo investigate the open requirements for an account on the **Accounts to review** tab, click the account. That opens the [Actions required](https://docs.stripe.com/connect/dashboard/managing-individual-accounts#actions-required) tab on that account’s details page, where you can identify specific requirements and take action.",
  "title": "Review actionable accounts | Stripe Documentation",
  "description": "View connected accounts with open risk, onboarding, and compliance requirements.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/online-payments",
  "markdown": "# Online payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Stripe's integration choices for accepting online payments.\n\n[](#recommended-integrations)\n\n[](https://docs.stripe.com/payment-links \"Stripe Payment Links\")\n\n[No code](https://docs.stripe.com/payment-links \"Stripe Payment Links\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/link.f0b2a66175b477e86a89e39eba75fb6c.svg)](https://docs.stripe.com/payment-links \"Stripe Payment Links\")\n\nEmbed or share a link to a Stripe payment page to accept payments without a website.\n\n[](https://docs.stripe.com/checkout/quickstart \"Stripe Checkout\")\n\n[Recommended](https://docs.stripe.com/checkout/quickstart \"Stripe Checkout\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/checkout.4abfc4af6b46ecac81ce96bc8ff0213e.svg)](https://docs.stripe.com/checkout/quickstart \"Stripe Checkout\")\n\nSend your customers to a checkout page to pay. Embed it directly in your site or redirect to a Stripe-hosted payment page.\n\n[](https://docs.stripe.com/payments/quickstart \"Stripe Elements\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/elements.750bc8af6d17414b54dc09ae8acb8efb.svg)](https://docs.stripe.com/payments/quickstart \"Stripe Elements\")\n\nIntegrate customizable UI components into your website or mobile app to collect payment information from customers.\n\n#### Optimize your integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo optimize your integration and increase revenue, select the recommended integration that meets your business needs, add [payment methods](https://docs.stripe.com/payments/payment-methods/overview), and add [Link](https://docs.stripe.com/payments/link).\n\n[](#explore-no-code)\n\n[](https://docs.stripe.com/invoicing/dashboard \"Invoices\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/invoices.405bc8d8d7eece255bcf29d2cafeb6cd.svg)](https://docs.stripe.com/invoicing/dashboard \"Invoices\")\n\nIdeal for:Sending an invoice to a specific customerHow it works:Stripe emails your customer an invoice for one-time or recurring payments and a link they can use to pay the invoice online.\n\n[](https://support.stripe.com/questions/enter-customer-payment-information-manually-into-stripe-for-mail-or-telephone-orders \"Manual payments\")\n\n[![](https://b.stripecdn.com/docs-statics-srv/assets/manual-payments.48966b7c7d511bbc10af871cb4979db1.svg)](https://support.stripe.com/questions/enter-customer-payment-information-manually-into-stripe-for-mail-or-telephone-orders \"Manual payments\")\n\nIdeal for:Small payment volumeHow it works:Manually enter payment details in the Dashboard to charge a customer for one-time or recurring payments.\n\n[](#integrate-platform-plugin)\n\nStripe partners with thousands of popular platforms and supports plugins to bring Stripe payments into your website. See [all of our integration solutions](https://stripe.partners/) in our online directory.",
  "title": "Online payments | Stripe Documentation",
  "description": "Learn about Stripe's integration choices for accepting online payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=embedded-form",
  "markdown": "# Accept a payment | Stripe DocumentationThe Stripe Docs logo\n\n## Securely accept payments online.\n\nBuild a payment form or use a prebuilt checkout page to start accepting online payments.\n\nEmbed a prebuilt payment form on your site using [Stripe Checkout](https://docs.stripe.com/payments/checkout). See how this integration [compares to Stripe’s other integration types](https://docs.stripe.com/payments/accept-a-payment/web/compare-integrations).\n\n![Embedded Checkout preview](https://b.stripecdn.com/docs-statics-srv/assets/24497bda4950e0dbe2ce4ec7e86176b7.png)![Embedded Checkout preview](https://b.stripecdn.com/docs-statics-srv/assets/dd4994836fd7d37c5a3a0f54c00a1169.png)\n\n### Integration effort\n\n### Integration type\n\nEmbed prebuilt payment form on your site\n\n### UI customization\n\nUse the [branding settings](https://dashboard.stripe.com/settings/branding/checkout) in the Stripe Dashboard to match Checkout to your site design.\n\n[](#set-up-stripe)\n\nFirst, [register](https://dashboard.stripe.com/register) for a Stripe account.\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#create-checkout-session)\n\nFrom your server, create a [Checkout Session](https://docs.stripe.com/api/checkout/sessions \"checkout session\") and set the [ui\\_mode](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-ui_mode) to `embedded`. You can configure the [Checkout Session](https://docs.stripe.com/api/checkout/sessions/create) with [line items](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-line_items) to include and options such as [currency](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-currency).\n\nTo return customers to a custom page that you host on your website, specify that page’s URL in the [return\\_url](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-return_url) parameter. Include the `{CHECKOUT_SESSION_ID}` template variable in the URL to retrieve the session’s status on the return page. Checkout automatically substitutes the variable with the Checkout Session ID before redirecting.\n\nRead more about [configuring the return page](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=embedded-form#return-page) and other options for [customizing redirect behavior](https://docs.stripe.com/payments/checkout/custom-redirect-behavior).\n\nAfter you create the Checkout Session, use the `client_secret` returned in the response to [mount Checkout](#mount-checkout).\n\n`# This example sets up an endpoint using the Sinatra framework. # To learn more about Sinatra, watch this video: [https://youtu.be/8aA9Enb8NVc.](https://youtu.be/8aA9Enb8NVc) require 'json' require 'sinatra' require 'stripe'  # Set your secret key. Remember to switch to your live secret key in production. # See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`post '/create-checkout-session' do   session = Stripe::Checkout::Session.create({     line_items: [{       price_data: {         currency: 'usd',         product_data: {           name: 'T-shirt',         },         unit_amount: 2000,       },       quantity: 1,     }],     mode: 'payment',     ui_mode: 'embedded',     return_url: '[https://example.com/checkout/return?session_id={CHECKOUT_SESSION_ID}](https://example.com/checkout/return?session_id={CHECKOUT_SESSION_ID})'   })    {clientSecret: session.client_secret}.to_json end`\n\n[](#mount-checkout)\n\nCheckout is available as part of [Stripe.js](https://docs.stripe.com/js). Include the Stripe.js script on your page by adding it to the head of your HTML file. Next, create an empty DOM node (container) to use for mounting.\n\n`<head>   <script src=\"[https://js.stripe.com/v3/](https://js.stripe.com/v3/)\"></script> </head> <body>   <div id=\"checkout\">     <!-- Checkout will insert the payment form here -->   </div> </body>`\n\nInitialize Stripe.js with your publishable API key.\n\nCreate an asynchronous `fetchClientSecret` function that makes a request to your server to create the Checkout Session and retrieve the client secret. Pass this function into `options` when you create the Checkout instance:\n\n`// Initialize Stripe.js const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  initialize();  // Fetch Checkout Session and retrieve the client secret async function initialize() {   const fetchClientSecret = async () => {     const response = await fetch(\"/create-checkout-session\", {       method: \"POST\",     });     const { clientSecret } = await response.json();     return clientSecret;   };    // Initialize Checkout   const checkout = await stripe.initEmbeddedCheckout({     fetchClientSecret,   });    // Mount Checkout   checkout.mount('#checkout'); }`\n\nCheckout renders in an iframe that securely sends payment information to Stripe over an HTTPS connection.\n\n#### Common mistake\n\nAvoid placing Checkout within another iframe because some payment methods require redirecting to another page for payment confirmation.\n\n### Customize appearance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustomize Checkout to match the design of your site by setting the background color, button color, border radius, and fonts in your account’s [branding settings](https://dashboard.stripe.com/settings/branding).\n\nBy default, Checkout renders with no external padding or margin. We recommend using a container element such as a div to apply your desired margin (for example, 16px on all sides).\n\n[](#return-page)\n\nAfter your customer attempts payment, Stripe redirects them to a return page that you host on your site. When you created the Checkout Session, you specified the URL of the return page in the [return\\_url](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-return_url) parameter. Read more about other options for [customizing redirect behavior](https://docs.stripe.com/payments/checkout/custom-redirect-behavior).\n\nWhen rendering your return page, retrieve the Checkout Session status using the Checkout Session ID in the URL. Handle the result according to the session status as follows:\n\n*   `complete`: The payment succeeded. Use the information from the Checkout Session to render a success page.\n*   `open`: The payment failed or was canceled. Remount Checkout so that your customer can try again.\n\n`get '/session-status' do   session = Stripe::Checkout::Session.retrieve(params[:session_id])    {status: session.status, customer_email:  session.customer_details.email}.to_json end`\n\n``const session = await fetch(`/session_status?session_id=${session_id}`) if (session.status == 'open') {   // Remount embedded Checkout } else if (session.status == 'complete') {   // Show success page   // Optionally use session.payment_status or session.customer_email   // to customize the success page }``\n\n#### Redirect-based payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDuring payment, some payment methods redirect the customer to an intermediate page, such as a bank authorization page. When they complete that page, Stripe redirects them to your return page.\n\nLearn more about [redirect-based payment methods and redirect behavior](https://docs.stripe.com/payments/checkout/custom-redirect-behavior#redirect-based-payment-methods).\n\n[](#testing)\n\nTo test your embedded payment form integration:\n\n1.  Create an embedded Checkout Session and mount Checkout on your page.\n2.  Fill out the payment details with a method from the table below.\n    *   Enter any future date for card expiry.\n    *   Enter any 3-digit number for CVC.\n    *   Enter any billing postal code.\n3.  Click **Pay**. You’re redirected to your `return_url`.\n4.  Go to the Dashboard and look for the payment on the [payments page](https://dashboard.stripe.com/test/payments?status%5B0%5D=successful). If your payment succeeded, you’ll see it in that list.\n5.  Click your payment to see more details, like a Checkout summary with billing information and the list of purchased items. You can use this information to fulfill the order.\n\nLearn more about [testing your integration](https://docs.stripe.com/testing).\n\n| Card number | Scenario | How to test |\n| --- | --- | --- |\n|     | The card payment succeeds and doesn’t require authentication. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card payment requires [authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\"). | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card is declined with a decline code like `insufficient_funds`. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The UnionPay card has a variable length of 13-19 digits. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n\nSee [Testing](https://docs.stripe.com/testing) for additional information to test your integration.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Add discounts](https://docs.stripe.com/payments/checkout/discounts)\n*   [Collect taxes](https://docs.stripe.com/payments/checkout/taxes)\n*   [Collect tax IDs](https://docs.stripe.com/tax/checkout/tax-ids)\n*   [Add shipping](https://docs.stripe.com/payments/collect-addresses?payment-ui=checkout)\n*   [Customize your branding](https://docs.stripe.com/payments/checkout/customization)",
  "title": "Accept a payment | Stripe Documentation",
  "description": "Securely accept payments online.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/checkout/subscriptions/update-payment-details",
  "markdown": "# Update payment details | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to update the payment method used for future invoices.\n\nUse the following steps to create a Checkout page that collects your customer’s payment details and returns a Payment Method. Then use the Stripe REST APIs to update the payment method used for future [invoices](https://docs.stripe.com/api/invoices \"invoices\").\n\n#### Note\n\nThis guide uses Checkout to update subscription payment methods. You can instead implement the [Billing customer portal](https://docs.stripe.com/customer-management) to provide a Stripe-hosted dashboard for your customers to manage their subscriptions and billing details.\n\n[\n\n## Set up Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-setup)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[\n\n## Create a Checkout Session![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-checkout-session)\n\nTo create a setup mode Session, use the `mode` parameter with a value of `setup` when creating the Session. See the [Checkout Session API reference](https://docs.stripe.com/api/checkout/sessions/create) for a complete list of parameters that you can use for Session creation.\n\nAppend the `{CHECKOUT_SESSION_ID}` template variable to the `success_url` to get access to the Session ID after your customer successfully completes a Checkout Session.\n\nFinally, use the [`setup_intent_data.metadata`](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-setup_intent_data-metadata) dictionary to pass your customer’s existing Stripe `subscription_id` to the Checkout Session. Note that there other ways to pass this data to your server, but we’ll use metadata for this guide.\n\n[\n\n## Redirect to Checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#redirect-checkout)\n\nCheckout relies on [Stripe.js](https://docs.stripe.com/payments/elements), Stripe’s foundational JavaScript library for building payment flows.\n\nTo get started, include the following script tag on your website—always load it directly from **https://js.stripe.com**. You can’t include it in a bundle or host it yourself. See [Stripe samples](https://github.com/stripe-samples) for examples.\n\n`npm install @stripe/stripe-js`\n\nNext, create an instance of the [Stripe object](https://docs.stripe.com/js#stripe-function) by providing your publishable [API key](https://docs.stripe.com/keys) as the first parameter:\n\n`import {loadStripe} from '@stripe/stripe-js';  const stripe = await loadStripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\nTo use Checkout on your website, you must add a snippet of code that includes the Session `id` from the [previous step](#create-checkout-session). When your customer is ready to save or update their payment method, call [redirectToCheckout](https://docs.stripe.com/js#stripe-redirect-to-checkout) and provide the Session `id` as a parameter.\n\n``const checkoutButton = document.getElementById('checkout-button');  checkoutButton.addEventListener('click', () => {   stripe.redirectToCheckout({     // Make the id field from the Checkout Session creation API response     // available to this file, so you can provide it as argument here     // instead of the {{CHECKOUT_SESSION_ID}} placeholder.     sessionId: '{{CHECKOUT_SESSION_ID}}'   })   // If `redirectToCheckout` fails due to a browser or network   // error, display the localized error message to your customer   // using `error.message`. });``\n\nThis code is typically invoked from an event handler that triggers in response to an action taken by your customer, such as clicking on a payment button.\n\n[\n\n## Retrieve the Checkout Session![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#retrieve-checkout-session)\n\nAfter a customer successfully completes their Checkout Session, you need to retrieve the Session object. There are two ways to do this:\n\n*   **Asynchronously**: Handle `checkout.session.completed` [webhooks](https://docs.stripe.com/webhooks \"webhook\"), which contain a Session object. Learn more about [setting up webhooks](https://docs.stripe.com/webhooks).\n*   **Synchronously**: Obtain the Session ID from the `success_url` when a user redirects back to your site. Use the Session ID to [retrieve](https://docs.stripe.com/api/checkout/sessions/retrieve) the Session object.\n\n`curl https://api.stripe.com/v1/checkout/sessions/cs_test_MlZAaTXUMHjWZ7DcXjusJnDU4MxPalbtL5eYrmS2GKxqscDtpJq8QM0k \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nThe right choice depends on your tolerance for dropoff, as customers may not always reach the `success_url` after a successful payment. It’s possible for them close their browser tab before the redirect occurs. Handling webhooks prevents your integration from being susceptible to this form of dropoff.\n\nAfter you have retrieved the Session object, get the value of the `setup_intent` key, which is the ID for the SetupIntent created during the Checkout Session. A [SetupIntent](https://docs.stripe.com/payments/setup-intents) is an object used to set up the customer’s bank account information for future payments.\n\nExample `checkout.session.completed` payload:\n\n`{   \"id\": \"evt_1Ep24XHssDVaQm2PpwS19Yt0\",   \"object\": \"event\",   \"api_version\": \"2019-03-14\",   \"created\": 1561420781,   \"data\": {     \"object\": {       \"id\": \"cs_test_MlZAaTXUMHjWZ7DcXjusJnDU4MxPalbtL5eYrmS2GKxqscDtpJq8QM0k\",       \"object\": \"checkout.session\",       \"billing_address_collection\": null,       \"client_reference_id\": null,       \"customer\": \"cus_FOsk5sbh3ZQpAU\",       \"customer_email\": null,       \"display_items\": [],       \"mode\": \"setup\",       \"setup_intent\": \"seti_1EzVO3HssDVaQm2PJjXHmLlM\",       \"submit_type\": null,       \"subscription\": null,       \"success_url\": \"[https://example.com/success](https://example.com/success)\"     }   },   \"livemode\": false,   \"pending_webhooks\": 1,   \"request\": {     \"id\": null,     \"idempotency_key\": null   },   \"type\": \"checkout.session.completed\" }`\n\nNote the `setup_intent` ID for the next step.\n\n[\n\n## Retrieve the SetupIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#retrieve-setup-intent)\n\nUsing the `setup_intent` ID, retrieve the SetupIntent object using the [/v1/setup\\_intents/:id](https://docs.stripe.com/api/setup_intents/retrieve) endpoint.\n\n`curl https://api.stripe.com/v1/setup_intents/seti_1EzVO3HssDVaQm2PJjXHmLlM \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nExample response:\n\n`{   \"id\": \"seti_1EzVO3HssDVaQm2PJjXHmLlM\",   \"object\": \"setup_intent\",   \"application\": null,   \"cancellation_reason\": null,   \"client_secret\": null,   \"created\": 1561420781,   \"customer\": \"cus_FOsk5sbh3ZQpAU\",   \"description\": null,   \"last_setup_error\": null,   \"livemode\": false,   \"metadata\": {     \"subscription_id\": \"sub_8epEF0PuRhmltU\"   },   \"next_action\": null,   \"on_behalf_of\": null,   \"payment_method\": \"pm_1F0c9v2eZvKYlo2CJDeTrB4n\",   \"payment_method_types\": [     \"card\"   ],   \"status\": \"succeeded\",   \"usage\": \"off_session\" }`\n\nNote the `customer` ID, `subscription_id`, and `payment_method` ID for the next steps.\n\n#### Note\n\nIf you’re requesting this information synchronously from the Stripe API (as opposed to handling webhooks), you can combine the previous step with this step by [expanding](https://docs.stripe.com/api/expanding_objects) the SetupIntent object in the request to the /v1/checkout/session endpoint. Doing this prevents you from having to make two network requests to access the newly created PaymentMethod ID.\n\n[\n\n## Set a default payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#set-default-payment-method)\n\nThere are two ways to ensure that a payment method is used for future invoices:\n\n*   Set it as the Customer’s `invoice_settings.default_payment_method`\n*   Set it as the Subscription’s `default_payment_method`\n\nSetting `invoice_settings.default_payment_method` on the Customer will cause all future invoices for that customer to be paid with the specified payment method.\n\nSetting `default_payment_method` on the Subscription will cause all future invoices for that subscription to be paid with the specified payment method, overriding any `invoice_settings.default_payment_method` set on the associated Customer.\n\n### Set `invoice_settings.default_payment_method` on the Customer ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUsing the customer ID and the PaymentMethod ID you retrieved, set the `invoice_settings.default_payment_method` for the Customer using the [/v1/customers/:id](https://docs.stripe.com/api/customers/update) endpoint.\n\n`curl https://api.stripe.com/v1/customers/cus_FOsk5sbh3ZQpAU \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"invoice_settings[default_payment_method]\"=pm_1F0c9v2eZvKYlo2CJDeTrB4n`\n\nAll future invoices for this customer will now charge the new PaymentMethod created with the setup mode Checkout Session.\n\n### Set `default_payment_method` on the Subscription ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUsing the subscription ID and the PaymentMethod ID you retrieved, set the `default_payment_method` for the subscription using the [/v1/subscriptions/:id](https://docs.stripe.com/api/subscriptions/update) endpoint.\n\n`curl https://api.stripe.com/v1/subscriptions/sub_8epEF0PuRhmltU \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -X \"POST\" \\   -d \"default_payment_method\"=\"pm_1F0c9v2eZvKYlo2CJDeTrB4n\"`\n\nAll future invoices for this subscription will now charge the new PaymentMethod created with the setup mode Checkout Session, overriding any `invoice_settings.default_payment_method` set on the associated Customer.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCongrats! You can now set a default payment method for future invoices. When testing your integration with your test API key, you can use a [test card number](https://docs.stripe.com/testing#cards) to ensure that it works correctly.\n\n*   [Test Cards](https://docs.stripe.com/testing#cards)",
  "title": "Update payment details | Stripe Documentation",
  "description": "Learn how to update the payment method used for future invoices.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/deprecated/redirect_to_checkout",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/payments/amazon-pay/accept-a-payment",
  "markdown": "# Accept a payment with Amazon Pay\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nAmazon Pay is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. Customers are redirected from your website or app, authorize the payment with Amazon, then return to your website or app. You get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) of whether the payment succeeded or failed.\n\n[](#compatibility)\n\nTo support Amazon Pay payments, a Checkout Session must satisfy all of the following conditions:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency.\n    *   If you have line items in different currencies, create separate Checkout Sessions for each currency.\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nThis guide describes how to enable Amazon Pay and shows the differences between accepting a card payment and using Amazon Pay.\n\n### Enable Amazon Pay as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `amazon_pay` to the list of `payment_method_types`.\n2.  Make sure all `line_items` use the same currency.\n\n`Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'amazon_pay'],   line_items: [{     price_data: {       currency: 'usd',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })`\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select Amazon Pay as the payment method and click the **Pay** button.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/merchant_checkout_amazon_pay_visible.4ee046f5f5cb1d06c4661de229ca6fcd.png)",
  "title": "Accept a payment with Amazon Pay | Stripe Documentation",
  "description": "Learn how to set up your integration with Amazon Pay.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/amazon-pay/set-up-future-payments",
  "markdown": "# Set up future Amazon Pay payments\n\nThis guide describes how to save Amazon Pay payment details using [Checkout](https://docs.stripe.com/payments/checkout), our fully hosted checkout page.\n\nLearn how to [set up a subscription with Amazon Pay](https://docs.stripe.com/billing/subscriptions/amazon-pay) to create recurring payments after saving a payment method in Checkout.\n\n[](#web-set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-permissions)\n\nIf you save your customer’s payment method for future use, you need permission. Creating an agreement (sometimes called a mandate) up front allows you to save your customer’s payment details and charge them when they’re not actively using your website or app.\n\nAdd terms to your website or app that state how you plan to save your customer’s payment method details, and let them opt in. If you plan to charge your customer when they’re offline, make sure that your terms also include the following:\n\n*   The customer’s permission for you to initiate a payment or a series of payments on their behalf for specified transactions\n*   The anticipated frequency (that is, one-time or recurring) and timing of payments\n*   How you determine the payment amount\n*   Your cancellation policy, if you’re setting up the payment method for a subscription service\n\nMake sure that you keep a record of your customer’s written agreement to these terms.\n\n[](#web-create-customer)\n\nTo reuse an Amazon Pay payment method for future payments, attach it to a [Customer](https://docs.stripe.com/api/customers \"Customers\").\n\nCreate a [Customer object](https://docs.stripe.com/api/customers) when your customer creates an account with your business, and associate the ID of the Customer object with your own internal representation of that customer. Alternatively, you can create a new Customer before saving a payment method for future payments.\n\nCreate a new Customer or retrieve an existing Customer to associate with this payment. Include the following code on your server to create a new Customer:\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode description=\"My First Test Customer (created for API docs)\"`\n\n[](#web-create-checkout-session)\n\nYour customer must authorize you to use their Amazon account for future payments through Stripe Checkout. This allows you to accept Amazon payments. Add a checkout button to your website that calls a server-side endpoint to create a [Checkout Session](https://docs.stripe.com/api/checkout/sessions).\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nCreate a Checkout Session in `setup` mode to collect the required information. After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) that the response returns.\n\n[](#web-test-integration)\n\nSelect Amazon Pay as the payment method, then click **Continue to Amazon Pay**. You can test the successful setup case by authenticating the SetupIntent on the redirect page. The SetupIntent transitions from requires\\_action to succeeded.",
  "title": "Set up future Amazon Pay payments | Stripe Documentation",
  "description": "Learn how to save Amazon Pay details and charge your customers later.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/apple-pay/apple-pay-recurring",
  "markdown": "# Manage recurring payments on Apple Pay\n\n## Improve authorization rates for recurring Apple Pay transactions.\n\n## Checkout and Elements optimize automatically![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Checkout](https://docs.stripe.com/payments/checkout) and [Elements](https://docs.stripe.com/payments/elements) automatically optimize the best practices recommended in this guide.\n\n## How recurring Apple Pay payments work![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo make recurring payments, some businesses need to save the Apple Pay payment method on file when a user is on-session then make the recurring payments later when the user is off-session. The first on-session payment is often called a customer initiated transaction (CIT), and the later recurring payments are often called merchant initiated transactions (MIT). Two examples of recurring payments (or MIT) are:\n\n*   Subscriptions where users get billed on a fixed frequency.\n*   Recurring off-session payments where the billing frequency is inconsistent, or where customers can vary the frequency.\n\nWhen users interact with the Apple Pay payment sheet, to keep the PAN (the original card number) private, Apple Pay processes a card PAN and generates a Device Primary Account Number (DPAN) or [Merchant Token](https://developer.apple.com/apple-pay/merchant-tokens/) (MPAN) depending on the device OS version and integration. DPANs are tied to the specific Apple device, and can be unintentionally deactivated if a user switches to a new device (for example, an iPhone or an iPad) and adds the same card on it. MPAN is the newly introduced more reliable option for recurring payments. MPANs are not deactivated when users switch their devices, and comes with better visibility and lifecycle management features.\n\nBeyond these differences, MPAN and DPAN behave similarly.\n\nWhen a DPAN (or an MPAN) generates, it also comes with an expiring one-time use cryptogram. Stripe needs to conduct the CIT and send both the DPAN (or MPAN) and cryptogram to the authorization network as soon as possible before the cryptogram expires. This expiration mechanism adds a layer of security to Apple Pay Wallets, but failing to trigger the CIT in time is often the root cause of authorization failures.\n\nWhen the first CIT using the cryptogram fails, subsequent MITs using the same [Card](https://docs.stripe.com/api/cards/object) will likely also fail because they are internally linked to the CIT. These recurring payment failures lead to the low authorization success rate.\n\n## Improve authorization for your API integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo implement recurring Apple Pay transactions using the API:\n\n1.  Save the DPAN (or MPAN) and cryptogram in a `Card`.\n2.  Initiate a CIT to consume the cryptogram before its expiration. Send a 0 USD validation or a charge transaction to the authorization network, and keep a record of the returned network transaction.\n3.  Reuse the payment method for future off-session MITs. Stripe sends the DPAN (or MPAN) and the network transaction ID of the original CIT to the authorization network to improve authorization rate.\n\nConsume cryptograms as soon as they are created using the following recommendations.\n\n### Use subscriptions for free trials![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a customer signs up for a free trial, they’re not charged until the free trial period ends. To make sure you consume the DPAN (or MPAN) cryptogram before it expires, use [Stripe Subscriptions](https://docs.stripe.com/subscriptions). The Subscription creates a [SetupIntent](https://docs.stripe.com/api/setup_intents) that generates a 0 USD validation with the authorization network. This acts as the CIT, consuming the cryptogram immediately, rather than delaying the first transaction until after the free trial, when the cryptogram has expired.\n\nYou can also [create a SetupIntent](https://docs.stripe.com/api/setup_intents/create) directly to save the [Apple Pay PaymentMethod](https://docs.stripe.com/api/payment_methods/object#payment_method_object-card-wallet-apple_pay) for future usage. SetupIntent confirmation initiates the same CIT 0 USD validation to consume the cryptogram. Then you can use the authorized [Apple Pay PaymentMethod](https://docs.stripe.com/api/payment_methods/object#payment_method_object-card-wallet-apple_pay) to create a Subscription later.\n\n### Create a SetupIntent for Tokens API integrations Legacy![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe discourage using the legacy Tokens and Charges APIs for recurring Apple Pay payments. It causes the cryptogram expiration authorization failure described in this document. The Tokens API doesn’t trigger the authorization request in time to consume the cryptogram. Additionally, the Charges API doesn’t support the following features, many of which are required for credit card compliance:\n\n*   Merchants in India\n*   Bank requests for card authentication\n*   Strong Customer Authentication\n\n**For these reasons, we recommend migrating to the PaymentIntents and the SetupIntents APIs.**\n\nIf you’re using the legacy [Tokens](https://docs.stripe.com/api/tokens) to create an Apple Pay payment token and then calling [Charges](https://docs.stripe.com/api/charges) later to charge the user when the trial ends, you can improve your authorization rate following these steps.\n\n1.  Create a Payment Method immediately after you create the token.\n    \n    `curl https://api.stripe.com/v1/payment_method \\   -u` \n    \n    `sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n    \n    `: \\   -d \"type\"=\"card\" \\   -d \"card[token]\"=\"tok_123\"`\n    \n2.  Immediately create a [SetupIntent](https://docs.stripe.com/api/setup_intents) with the new PaymentMethod to perform a 0 USD validation transaction.\n\nCompleting these two steps performs the CIT and sends the cryptogram to the network for authorization before it expires. If you’re using Stripe.js, you can combine these steps by calling [stripe.confirmCardSetup with token](https://docs.stripe.com/js/setup_intents/confirm_card_setup#stripe_confirm_card_setup-token).\n\nYou can now make off-session MIT payments using the saved Apple Pay payment method. If you’re using PaymentIntents, set [off\\_session=true](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-off_session) to indicate that the customer isn’t in your checkout flow.\n\n### Set up off-session payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re setting up deferred off-session Apple Pay payments and aiming to collect payment information for future off-session uses, such as a hotel reservation, see Apple Pay’s [list of supported payment types](https://developer.apple.com/apple-pay/planning/).\n\nApple Pay supports [usage=off\\_session](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-usage) payments using DPANs (or MPANs) when the customer is outside of the checkout flow. However, they have a slightly higher risk because they don’t get a liability shift from the network and might get lower authorization rates than average.\n\nApple Pay terms forbid using a saved payment method for [usage=on\\_session](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-usage) payments. If the customer is in the flow, you’re required to have them authorize and generate a new cryptogram for that transaction.\n\nApple Pay supports incremental authorizations only when you increase the amount of an authorized charge before capturing it.\n\nYou can initiate a CIT for your Tokens API integration in either of the following ways:\n\n*   [Create a SetupIntent](https://docs.stripe.com/api/setup_intents/create) as described in the free trial scenario to initiate a 0 USD validation that creates a reusable DPAN (or MPAN) based payment method for off-session payments.\n*   Create a PaymentIntent with [setup\\_future\\_usage=off\\_session](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage).\n\nYou can now make off-session MIT payments using the saved payment method. If you’re using PaymentIntents, set [off\\_session=true](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-off_session) to indicate that the customer isn’t in your checkout flow.",
  "title": "Manage recurring payments on Apple Pay | Stripe Documentation",
  "description": "Improve authorization rates for recurring Apple Pay transactions.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/apple-pay/best-practices",
  "markdown": "# Apple Pay Best Practices | Stripe DocumentationThe Stripe Docs logo\n\n## Follow these best practices to make the most of your Apple Pay integration.\n\nIn a normal checkout flow, your customers usually need to enter their card information, billing and shipping address, email, or phone number. With Apple Pay, customers can provide this information by authorizing a payment with Touch ID, or by double-clicking the side button of their Apple Watch.\n\nApple Pay can help boost metrics like conversion rate, new user acquisition, and purchase frequency, while reducing risk and the overall cost of payment acceptance. Consider implementing the following best practices to further improve the checkout experience for your customers using Apple Pay.\n\n## Implement an express checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can provide your app users and website visitors with more opportunities to make a purchase by adding Apple Pay to product detail pages, product list views, or search results pages. As Apple Pay enables new and existing customers to make a purchase with a single tap you can convert more prospects into actual customers.\n\n*   For customers who have set up Apple Pay, display the **Apple Pay** button on product detail pages, product list view pages, or on search results pages.\n*   Ask the customer for all mandatory information about their order (for example, size, color, quantity, and so on) before showing the Apple Pay button.\n*   Never display the Apple Pay button in a disabled state. Instead, highlight incomplete product selections if the customer selects the Apple Pay button before completing them.\n*   If you already display an **Express Checkout** button in your checkout, consider replacing it with the Apple Pay button to help avoid user confusion.\n\n## Remove or move registration until after the purchase is complete![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nApple Pay enables customers to seamlessly create new accounts after making their first purchase. By postponing the option to create an account until after the transaction, customers are more likely to complete their purchase.\n\n*   For Apple Pay–ready customers, remove any mandatory sign-up from the beginning of the payment process.\n*   Don’t request any customer information that Apple Pay provides during the payment request (for example, customer name or address information).\n*   Only request the information you need as part of the transaction request. For example, don’t request a shipping address if you’re not shipping anything (for example, services, digital goods).\n*   Request any additional information needed to create an account (for example, password) on the payment confirmation page, after the payment is complete.\n\n## Default to Apple Pay![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your customer is on an Apple Pay-enabled device, consider offering Apple Pay as the default payment method. This can boost your checkout conversion for both new and existing users.\n\n*   For new customers that have Apple Pay set up on their device, skip the payment method selection page in the checkout flow so they can complete their purchase quickly.\n*   Pre-select Apple Pay in the payment method selector to reduce the number of steps a customer needs to perform.\n*   Show the Apple Pay button for a stronger call to action.\n\n## Offer to set up Apple Pay within your app or website![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Apple Pay API allows you to identify customers with an Apple Pay-capable device who haven’t added a card to Wallet yet. You can then offer these users the opportunity to set up Apple Pay from within your app.\n\nYou might consider displaying a **Set Up Apple Pay** button:\n\n*   Next to any other payment options on the payment method selection page during checkout for capable devices\n*   Next to any other payment options on the payment method management page in the customer’s account settings\n*   In any messages to your users that request they add or update their payment information (for example, emails prompting them to update expired card information)\n\nIf you already support other payment methods that give the option to set up an account during the checkout process, always display a **Set Up Apple Pay** button for capable devices.\n\n## Communicate Apple Pay acceptance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you’ve integrated Apple Pay as a supported payment method, let your Apple Pay-ready customers know. You may also want to consider setting it as the default payment method in your app or website.\n\n*   Add the Apple Pay mark next to other payment marks in your checkout.\n*   When you add support for Apple Pay to your app or website, use a banner or additional messaging before the checkout process to announce that you now accept Apple Pay.\n*   When you add support for Apple Pay to your app or website, announce it through your marketing channels (email, notification, social media, and so on).\n*   Make the banner or additional messaging actionable so that your customers can start using Apple Pay in your app or website with only a tap. If you don’t have this capability, let your customers know how they can start using Apple Pay.\n*   Update the screenshots and description of your Apple Pay-ready app within the App Store to reflect Apple Pay acceptance.\n\n## Apple Pay Certificate Renewal![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nApple sends notifications to the team agent of the Apple Developer Account at 30 days, 15 days, and 7 days prior to the upcoming expiration date of the certificate. The certificate is valid for 25 months from activation. You’ll need to generate a new certificate and activate it before your current one expires to avoid any disruptions.\n\nGo to the [iOS certificate settings](https://dashboard.stripe.com/settings/ios_certificates) in the Dashboard, click **Add new application**, and follow the guide there.\n\nDownload a new CSR from Stripe for creating the new certificate, and never use the older CSR that you downloaded from Stripe. Upload the new certificate to Stripe before activating it on the Apple Developer Account. Apple uses the new public key to encrypt the Apple Pay token approximately 5 minutes after you click **Activate** in the portal. Make sure you have both the old and new certificate in the Stripe Dashboard before activating the new certificate so that either of the certificates can be used during transition.\n\nYou don’t need to update your app after you’ve replaced the certificate. We recommend running an ApplePay transaction with test mode API keys to make sure the integration is working as expected.\n\n## Always test on updates to your Apple Pay integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore applying changes that update your integration or switch your Apple Merchant ID, verify that you’re able to create tokens and use them to complete payments successfully.\n\n## Best practice for Apple Pay recurring transaction![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you accept Apple Pay payments, we recommend configuring the Apple Pay interface to return a merchant token to enable merchant initiated transactions (MIT) such as recurring and deferred payments and automatic reloads. Merchant tokens (MPANs) connect your business with your customer’s Apple Wallet payment method, so they work across multiple devices and keep payment information active in a new device even when its removed from a lost or stolen device. See [ApplePay merchant tokens](https://docs.stripe.com/apple-pay/merchant-tokens?pay-element=ece) for integration details and [Apple Pay Recurring Transactions](https://docs.stripe.com/apple-pay/apple-pay-recurring) for direct API integration recommendations to prevent recurring authorization failures due to cryptogram expiration.",
  "title": "Apple Pay Best Practices | Stripe Documentation",
  "description": "Follow these best practices to make the most of your Apple Pay integration.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/apple-pay/cartes-bancaires",
  "markdown": "# Cartes Bancaires with Apple Pay\n\n[](#ios-add-cartes-bancaires-to-enabled-networks)\n\nWhen your app starts, configure the SDK with Cartes Bancaires as an enabled Apple Pay network.\n\n`StripeAPI.additionalEnabledApplePayNetworks = [.cartesBancaires]`\n\n[](#ios-test-apple-pay)\n\nWallet in iOS can’t save Stripe test cards information. Instead, Stripe recognizes when you’re using your test API keys and provides a successful test card token for you to use. This allows you to make test payments using a live card without any charges being applied. Make sure you test using a Cartes Bancaires card obtained from one of the [Apple Pay participating banks](https://support.apple.com/en-us/109516).\n\n#### Note\n\nOnly add Cartes Bancaires to the list of enabled networks if the transaction is on-session, in Euros and isn’t setting up future off-session transactions. If you pass Cartes Bancaires as an enabled network but the card provided isn’t a Cartes Bancaires card, Stripe processes the transaction with Visa or Mastercard as normal.",
  "title": "Cartes Bancaires with Apple Pay | Stripe Documentation",
  "description": "Learn more about Cartes Bancaires with Apple Pay and how to integrate it.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/apple-pay/disputes-refunds",
  "markdown": "# Apple Pay liability shift, disputes, and refunds\n\n## Learn how to manage disputed or refunded Apple Pay payments.\n\nPost payment activities can include disputes and refunds. When these use cases happen, learn how to address disputed payments, understand the nuances of liability shifts for Apple Pay charges, and manage refunds effectively.\n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUsers must authenticate payments with their Apple Pay accounts, helping to reduce the risk of fraud or unrecognized payments. However, users can still dispute transactions after they complete payment. You can submit evidence to contest a dispute directly. The dispute process is the same as that for card payments. Learn about how to [manage disputes](https://docs.stripe.com/disputes/responding).\n\n## Liability shift for Apple Pay charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nApple Pay supports [liability shift](https://docs.stripe.com/payments/3d-secure/authentication-flow#disputed-payments) globally for all the major networks with the following exceptions:\n\n*   For Visa, liability shift is supported globally for devices running iOS 16.2 and above.\n*   For Visa, liability shift support is only available for cards issued in Europe for devices running on versions below iOS 16.2.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can partially or fully refund any successful Apple Pay payment. The refund process is the same as that for card payments. See [Refund and cancel payments](https://docs.stripe.com/refunds) for instructions on initiating or managing refunds.",
  "title": "Apple Pay liability shift, disputes, and refunds | Stripe Documentation",
  "description": "Learn how to manage disputed or refunded Apple Pay payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/appendix/payment_item_object",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/js/payment_request/create",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/payments/payment-methods/pmd-registration?dashboard-or-api=api",
  "markdown": "# Register domains for payment methods\n\n## Register and verify domains to use payment methods (including Link, Apple Pay, and Google Pay) in Elements or Checkout's embeddable payment form.\n\nTo use certain payment methods with [Elements](https://docs.stripe.com/payments/elements \"Stripe Elements\") or [Checkout’s embeddable payment form](https://docs.stripe.com/payments/checkout/how-checkout-works?payment-ui=embedded-form), you must register every web domain that will show the payment method. This includes registering top-level domains and subdomains. For example, if you have the domain **yourdomain.com** and subdomains like **shop.yourdomain.com** and **www.yourdomain.com**, this guide explains how to register them.\n\nAfter you register a domain, that domain is ready for use with other payment methods that you might enable in the future.\n\nThe following payment methods require registration:\n\n*   Google Pay\n*   Link\n*   PayPal\n*   Apple Pay (additional verification step required)\n\n#### Apple Pay and merchant validation\n\nThe Apple Pay documentation describes their process of “merchant validation,\" which Stripe handles for you behind the scenes. You don’t need to create an Apple Merchant ID or CSR. Instead, follow the steps in this guide.\n\n## Testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou also need to register domains for testing. When testing locally, you can use a tool such as [ngrok](https://ngrok.com/) to get an HTTPS domain. You can either register in test mode, or register in live mode and the domain will also be registered in test mode automatically. Remember to register your domains in live mode before going live.\n\n## Register your domain![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo register a domain, do the following:\n\n`curl https://api.stripe.com/v1/payment_method_domains \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d domain_name=\"example.com\"`\n\nRepeat for all domains that you need to register.\n\n### Using an iframe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   When using an iframe, its origin must match the top-level origin, except in Safari 17+. Two pages have the same origin if the protocol, host (full domain name), and port (if specified) are the same for both pages.\n*   When using a cross-origin iframe in Safari 17+ you must specify the `allow=“payment”` attribute. To enable Apple Pay, you must also register the source domain that the iframe loads.\n\n## Verify ownership of your domain with Apple Pay![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDuring registration, Stripe automatically attempts to verify ownership of your domain with Apple. If the domain isn’t already verified, register your domain and then follow these steps to verify your registered domain with Apple Pay.\n\n1.  Download the [domain association file](https://stripe.com/files/apple-pay/apple-developer-merchantid-domain-association).\n2.  Host it at `/.well-known/apple-developer-merchantid-domain-association` on your site. For example, if you register `https://yourdomain.com`, make that file available at `https://yourdomain.com/.well-known/apple-developer-merchantid-domain-association`.\n\n`curl -X POST https://api.stripe.com/v1/payment_method_domains/{{PAYMENT_METHOD_DOMAIN_ID}}/validate \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\nStripe performs an initial domain verification, with requests originating from one of our [webhook IPs](https://docs.stripe.com/ips#webhook-notifications).\n\n## Manage your domain![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUsing the [PaymentMethodDomain API](https://docs.stripe.com/api/payment_method_domains/object) you can do the following:\n\n*   Retrieve a domain.\n*   See a list of all of your domains.\n*   Enable or disable a domain. If a domain is disabled, the payment methods no longer appear in Elements or Checkout’s embeddable payment form on that domain.\n\nThis sample shows how to disable a domain:\n\n`curl https://api.stripe.com/v1/payment_method_domains/{{PAYMENT_METHOD_DOMAIN_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d enabled=false`\n\n## Register your domain while using Connect![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnect platforms must register all domains where Elements or Checkout’s embeddable payment form displays the payment methods listed above. The domain where the charge is being run needs to be registered for the user running the charge.\n\nIf the platform creates [direct charges](https://docs.stripe.com/connect/direct-charges), use your platform’s secret key to authenticate the request and set the Stripe-Account header to your connected account’s Stripe ID.\n\nIf the platform creates [destination charges](https://docs.stripe.com/connect/destination-charges) or [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers), use your platform’s secret key to authenticate the request and omit the Stripe-Account header.\n\nLearn more about [Making API calls for connected accounts](https://docs.stripe.com/connect/authentication).\n\n`curl https://api.stripe.com/v1/payment_method_domains \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d domain_name=\"example.com\"`",
  "title": "Register domains for payment methods | Stripe Documentation",
  "description": "Register and verify domains to use payment methods (including Link, Apple Pay, and Google Pay) in Elements or Checkout's embeddable payment form.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/link/payment-request-button-link",
  "markdown": "# Link in the Payment Request Button\n\n## Let your customers check out faster with Link and the Payment Request Button.\n\n#### Caution\n\nStripe no longer recommends using the Payment Request Button as part of your Web Elements integration. To integrate Link, use one of our preferred Elements: the Link Authentication Element, Express Checkout Element, or Payment Element.\n\nWhen new customers come to your site, they can use [Link](https://docs.stripe.com/payments/link/what-is-link) in the [Payment Request Button](https://docs.stripe.com/stripe-js/elements/payment-request-button) to pay with their saved payment details. With Link, they don’t need to manually enter their payment information.\n\nAdditionally, Link is fully compatible with the other features you receive from card payments (for example, subscriptions), and there’re no additional fees. To turn Link off or on, go to your [payment method settings](https://dashboard.stripe.com/settings/payment_methods).\n\n![User paying for Link using the Payment Request Button](https://b.stripecdn.com/docs-statics-srv/assets/link-in-prb-pay.addb77c45640c8f3f3c872d40ade0aaa.png)\n\nCompleting payment using Link with the Payment Request Button\n\n## Returning Link customers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nReturning customers can authenticate by clicking the **Link** button and entering an SMS or email code. After they authenticate, Link loads their previously saved payment details, allowing them to make payments with a single click. If they previously authenticated their account in the last 90 days, either on your site or through a different Link-enabled business, they can pay instantly without re-authenticating. New Link customers are prompted to save their information in a Link account when they click the **Link** button.\n\n## Link and Connect platforms ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nLink is automatically available through the Payment Request Button to any connected accounts that access the Payment Request Button through a Connect platform integration.\n\n*   If you’re a Connect platform, you can manage Link for your connected accounts through [payment method settings](https://dashboard.stripe.com/settings/payment_methods).\n*   If you’re a connected account processing payments through a Connect platform, your platform manages Link for you when payments are processed through the platform. For payments processed without a platform, you can use the [payment method settings](https://dashboard.stripe.com/settings/payment_methods). in your Dashboard to manage Link for the Payment Request Button.",
  "title": "Link in the Payment Request Button | Stripe Documentation",
  "description": "Let your customers check out faster with Link and the Payment Request Button.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/link/checkout-link",
  "markdown": "# Link with Checkout | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nDon’t store real user data in [test mode](https://docs.stripe.com/test-mode \"test mode\") Link accounts. Treat them as if they’re publicly available, because these test accounts are associated with your publishable key.\n\nCurrently, Link only works with credit cards, debit cards, and qualified US bank account purchases. Link requires [domain registration](https://docs.stripe.com/payments/payment-methods/pmd-registration).\n\nYou can create test mode accounts for Link using any valid email address. The following table shows the fixed one-time passcode values that Stripe accepts for authenticating test mode accounts:\n\n| Value | Outcome |\n| --- | --- |\n| Any other 6 digits not listed below | Success |\n| 000001 | Error, code invalid |\n| 000002 | Error, code expired |\n| 000003 | Error, max attempts exceeded |\n\n### Multiple funding sources![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs Stripe adds additional funding source support, you don’t need to update your integration. Stripe automatically supports them with the same transaction settlement time and guarantees as card and bank account payments.",
  "title": "Link with Checkout | Stripe Documentation",
  "description": "Use Link with Stripe's prebuilt checkout page.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/google-pay/disputes-refunds",
  "markdown": "# Google Pay liability shift, disputes, and refunds\n\n## Learn how to manage disputed or refunded Google Pay payments.\n\nPost payment activities can include disputes and refunds. When these use cases happen, learn how to address disputed payments, understand the nuances of liability shifts for Google Pay charges, and manage refunds effectively.\n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUsers must authenticate payments with their Google Pay accounts, helping to reduce the risk of fraud or unrecognized payments. However, users can still dispute transactions after they complete payment. You can submit evidence to contest a dispute directly. The dispute process is the same as that for card payments. Learn how to [manage disputes](https://docs.stripe.com/disputes/responding).\n\n## Liability shift for Google Pay charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nGoogle Pay supports [liability shift](https://docs.stripe.com/payments/3d-secure/authentication-flow#disputed-payments) globally. This is true automatically for users on Stripe-hosted products and using Stripe.js. For Visa transactions outside of a Stripe-hosted product, you must enable liability shift in the Google Pay & Wallet Console. To do so, navigate to your _**Google Pay & Wallet Console**_, select _**Google Pay API**_ in the navigation bar on the left, and then enable _**Fraud Liability Protection for Visa Device Tokens**_ for liability shift protection.\n\nThere are three use cases of Google Pay transactions:\n\n1.  If the user adds a card to the Google Pay app using their mobile device, this card is saved as a Device Primary Account Number (DPAN), and it supports liability shift by default.\n2.  If the user adds a card to Chrome or a Google property (for example, YouTube or Play), this card is saved as a Funding Primary Account Number (FPAN). Liability shift is supported for all major networks, including Visa, globally when [3D Secure](https://docs.stripe.com/payments/3d-secure) is performed. You can customize [Stripe Radar rules](https://docs.stripe.com/radar/rules#request-3d-secure) to request activation of 3D Secure.\n3.  If the user selects Google Pay as the payment method on an e-commerce site or in an app that pays with Google Pay, the cards are saved as e-commerce tokens that represent the cards on file. Neither liability shift nor 3D Secure are supported for e-commerce tokens at this time.\n\nFor Sigma users, the `charges` table contains a `card_token_type` field that indicates the Google Pay transaction type. An FPAN transaction sets the `card_token_type` to `fpan`. DPAN and ecommerce token transactions set the `card_token_type` to `dpan_or_ecommerce_token`.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can partially or fully refund any successful Google Pay payment. The refund process is the same as that for card payments. See [Refund and cancel payments](https://docs.stripe.com/refunds) for instructions on initiating or managing refunds.",
  "title": "Google Pay liability shift, disputes, and refunds | Stripe Documentation",
  "description": "Learn how to manage disputed or refunded Google Pay payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/elements_object/express_checkout_element_confirm_event",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/api/promotion_codes/object",
  "markdown": "# The Promotion Code object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer.\n    \n*   Hash describing the coupon for this promotion code.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n\n### More attributes\n\n*   #### \n    \n    customernullable stringExpandable\n    \n*   #### \n    \n    expires\\_atnullable timestamp\n    \n\n*   #### \n    \n    max\\_redemptionsnullable integer\n    \n\nThe Promotion Code object\n\n```\n{  \"id\": \"promo_1MiM6KLkdIwHu7ixrIaX4wgn\",  \"object\": \"promotion_code\",  \"active\": true,  \"code\": \"A1H1Q1MG\",  \"coupon\": {    \"id\": \"nVJYDOag\",    \"object\": \"coupon\",    \"amount_off\": null,    \"created\": 1678040164,    \"currency\": null,    \"duration\": \"repeating\",    \"duration_in_months\": 3,    \"livemode\": false,    \"max_redemptions\": null,    \"metadata\": {},    \"name\": null,    \"percent_off\": 25.5,    \"redeem_by\": null,    \"times_redeemed\": 0,    \"valid\": true  },  \"created\": 1678040164,  \"customer\": null,  \"expires_at\": null,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {},  \"restrictions\": {    \"first_time_transaction\": false,    \"minimum_amount\": null,    \"minimum_amount_currency\": null  },  \"times_redeemed\": 0}\n```\n\n## [Create a promotion code](https://docs.stripe.com/api/promotion_codes/create)\n\nA promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.\n\n### Parameters\n\n*   The coupon for this promotion code.\n    \n*   The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for a specific customer. If left blank, we will generate one automatically.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns the promotion code object.\n\n```\ncurl https://api.stripe.com/v1/promotion_codes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d coupon=nVJYDOag\n```\n\n```\n{  \"id\": \"promo_1MiM6KLkdIwHu7ixrIaX4wgn\",  \"object\": \"promotion_code\",  \"active\": true,  \"code\": \"A1H1Q1MG\",  \"coupon\": {    \"id\": \"nVJYDOag\",    \"object\": \"coupon\",    \"amount_off\": null,    \"created\": 1678040164,    \"currency\": null,    \"duration\": \"repeating\",    \"duration_in_months\": 3,    \"livemode\": false,    \"max_redemptions\": null,    \"metadata\": {},    \"name\": null,    \"percent_off\": 25.5,    \"redeem_by\": null,    \"times_redeemed\": 0,    \"valid\": true  },  \"created\": 1678040164,  \"customer\": null,  \"expires_at\": null,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {},  \"restrictions\": {    \"first_time_transaction\": false,    \"minimum_amount\": null,    \"minimum_amount_currency\": null  },  \"times_redeemed\": 0}\n```\n\n## [Update a promotion code](https://docs.stripe.com/api/promotion_codes/update)\n\nUpdates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nThe updated promotion code object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/promotion\\_codes/:id\n\n```\ncurl https://api.stripe.com/v1/promotion_codes/promo_1MiM6KLkdIwHu7ixrIaX4wgn \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"promo_1MiM6KLkdIwHu7ixrIaX4wgn\",  \"object\": \"promotion_code\",  \"active\": true,  \"code\": \"A1H1Q1MG\",  \"coupon\": {    \"id\": \"nVJYDOag\",    \"object\": \"coupon\",    \"amount_off\": null,    \"created\": 1678040164,    \"currency\": null,    \"duration\": \"repeating\",    \"duration_in_months\": 3,    \"livemode\": false,    \"max_redemptions\": null,    \"metadata\": {},    \"name\": null,    \"percent_off\": 25.5,    \"redeem_by\": null,    \"times_redeemed\": 0,    \"valid\": true  },  \"created\": 1678040164,  \"customer\": null,  \"expires_at\": null,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {    \"order_id\": \"6735\"  },  \"restrictions\": {    \"first_time_transaction\": false,    \"minimum_amount\": null,    \"minimum_amount_currency\": null  },  \"times_redeemed\": 0}\n```\n\n## [Retrieve a promotion code](https://docs.stripe.com/api/promotion_codes/retrieve)\n\nRetrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing `code` use [list](https://docs.stripe.com/api/promotion_codes/list) with the desired `code`.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a promotion code if a valid promotion code ID was provided. Raises [an error](#errors) otherwise.\n\nGET /v1/promotion\\_codes/:id\n\n```\ncurl https://api.stripe.com/v1/promotion_codes/promo_1MiM6KLkdIwHu7ixrIaX4wgn \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"promo_1MiM6KLkdIwHu7ixrIaX4wgn\",  \"object\": \"promotion_code\",  \"active\": true,  \"code\": \"A1H1Q1MG\",  \"coupon\": {    \"id\": \"nVJYDOag\",    \"object\": \"coupon\",    \"amount_off\": null,    \"created\": 1678040164,    \"currency\": null,    \"duration\": \"repeating\",    \"duration_in_months\": 3,    \"livemode\": false,    \"max_redemptions\": null,    \"metadata\": {},    \"name\": null,    \"percent_off\": 25.5,    \"redeem_by\": null,    \"times_redeemed\": 0,    \"valid\": true  },  \"created\": 1678040164,  \"customer\": null,  \"expires_at\": null,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {},  \"restrictions\": {    \"first_time_transaction\": false,    \"minimum_amount\": null,    \"minimum_amount_currency\": null  },  \"times_redeemed\": 0}\n```\n\n## [List all promotion codes](https://docs.stripe.com/api/promotion_codes/list)\n\nReturns a list of your promotion codes.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` promotion codes, starting after promotion code `starting_after`. Each entry in the array is a separate promotion code object. If no more promotion codes are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/promotion_codes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/promotion_codes\",  \"has_more\": false,  \"data\": [    {      \"id\": \"promo_1MiM6KLkdIwHu7ixrIaX4wgn\",      \"object\": \"promotion_code\",      \"active\": true,      \"code\": \"A1H1Q1MG\",      \"coupon\": {        \"id\": \"nVJYDOag\",        \"object\": \"coupon\",        \"amount_off\": null,        \"created\": 1678040164,        \"currency\": null,        \"duration\": \"repeating\",        \"duration_in_months\": 3,        \"livemode\": false,        \"max_redemptions\": null,        \"metadata\": {},        \"name\": null,        \"percent_off\": 25.5,        \"redeem_by\": null,        \"times_redeemed\": 0,        \"valid\": true      },      \"created\": 1678040164,      \"customer\": null,      \"expires_at\": null,      \"livemode\": false,      \"max_redemptions\": null,      \"metadata\": {},      \"restrictions\": {        \"first_time_transaction\": false,        \"minimum_amount\": null,        \"minimum_amount_currency\": null      },      \"times_redeemed\": 0    }    {...}    {...}  ],}\n```",
  "title": "The Promotion Code object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/sources/multibanco",
  "markdown": "# Multibanco payments with Sources | Stripe DocumentationThe Stripe Docs logo\n\n## Multibanco payments with SourcesBeta\n\n## Use Sources to accept payments using Multibanco, the most popular payment method in Portugal.\n\n#### Warning\n\nWe deprecated the Sources API and plan to remove support for local payment methods. If you currently integrate with Multibanco using the Sources API, you must [migrate to the Payment Methods API](https://docs.stripe.com/payments/payment-methods/transitioning). We’ll send email communication with more information about this end of support.\n\nFor information about integrating Multibanco with the current APIs, see [Multibanco payments](https://docs.stripe.com/payments/multibanco).\n\nStripe users in Europe and the United States can accept Multibanco payments from customers in Portugal using [Sources](https://docs.stripe.com/sources)—a single integration path for creating payments using any supported method.\n\nDuring the payment process, a [Source](https://docs.stripe.com/api#sources) object is created and your customer is either redirected to the Multibanco website, your website, or a Multibanco ATM to send the funds. After completing this, your integration uses the source to make a charge request and complete the payment.\n\nMultibanco is a [push](https://docs.stripe.com/sources#pull-or-push-of-funds)\\-based, [single-use](https://docs.stripe.com/sources#single-use-or-reusable) and [synchronous](https://docs.stripe.com/sources#synchronous-or-asynchronous-confirmation) method of payment. This means your customer takes action to send the amount to you through a [receiver](https://docs.stripe.com/sources#flow-for-customer-action). The pushing of funds may take as little as a few minutes or at most seven days, since your customer must do this outside of your checkout flow. Once the funds have been received the amount is immediately available to be charged. Upon charge, there is immediate confirmation about the success or failure of a payment.\n\n[](#create-source)\n\nA `Source` object is either created client-side using [Stripe.js](https://docs.stripe.com/payments/elements) or server-side using the [Source creation endpoint](https://docs.stripe.com/api#create_source), with the following parameters:\n\n| Parameter | Value |\n| --- | --- |\n| `type` | **multibanco** |\n| `amount` | A positive integer in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) representing the amount to charge the customer (for example, **1099** for a 10.99 EUR payment). |\n| `currency` | **eur** (Multibanco must always use Euros) |\n| `redirect[return_url]` | The URL the customer should be redirected to after the authorization process. |\n| `owner[email]` | The full email address of the customer. |\n\nTo create a source with [Stripe.js](https://docs.stripe.com/payments/elements), first include the library within your website and set your [publishable API key](https://dashboard.stripe.com/apikeys). Once included, use the following `createSource` method to create a source client-side:\n\n`stripe.createSource({   type: 'multibanco',   amount: 1099,   currency: 'eur',   owner: {     name: 'Jenny Rosen',     email: 'jenny.rosen@example.com',   },   redirect: {     return_url: '__TOKEN_PLACEHOLDER_0__',   }, }).then(function(result) {   // handle result.error or result.source });`\n\nUsing either method, Stripe returns a `Source` object containing the relevant details for the method of payment used. Information specific to Multibanco is provided within the `multibanco` subhash.\n\n`{   \"id\": \"src_16xhynE8WzK49JbAs9M21jaR\",   \"object\": \"source\",   \"amount\": 1099,   \"client_secret\": \"src_client_secret_UfwvW2WHpZ0s3QEn9g5x7waU\",   \"created\": 1445277809,   \"currency\": \"eur\",   \"flow\": \"receiver\",   \"livemode\": true,   \"owner\": {`\n\n### Source creation in mobile applications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re building an iOS or Android app, you can implement sources using our mobile SDKs. Refer to our sources documentation for [iOS](https://docs.stripe.com/mobile/ios/sources) or [Android](https://docs.stripe.com/mobile/android/sources) to learn more.\n\n[](#customer-action)\n\nWhen creating a source, its status is initially set to `pending` and cannot yet be used to make a charge request. To pay with Multibanco, your customers will need to initiate a transfer of funds from their bank account using reference and entity numbers provided by you and either their computer, phone, or local ATM.\n\nPortuguese merchants will often display these details within their checkout flow after the customer has confirmed their purchase and by including them in an order confirmation email.\n\nYou may also redirect your customer to a Multibanco-hosted page that will display these details for you, by using the URL provided within the`redirect[url]` attribute of the `Source` object. Multibanco then redirects them back to the URL provided as a value of `redirect[return_url]`, regardless of whether funds have been sent or not.\n\nWhen the customer does send funds, the `Source` object’s status will transition to `chargeable`, allowing you to charge the source and complete the transaction. If you don’t do this, the status will transition to `canceled` after six hours.\n\nStripe populates the `redirect[return_url]` with the following GET parameters when returning your customer to your website:\n\n*   `source`: a string representing the original ID of the `Source` object\n*   `livemode`: indicates if this is a live payment, either `true` or `false`\n*   `client_secret`: used to confirm that the returning customer is the same one who triggered the creation of the source (source IDs are not considered secret)\n\nYou may include any other GET parameters you may need when specifying `redirect[return_url]`. Do not use the above as parameter names yourself as these would be overridden with the values we populate.\n\n### Mobile applications![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo integrate Multibanco within a mobile application, provide your application URI scheme as the `redirect[return_url]` value. By doing so, your customers are returned to your app after completing authorization. Refer to our Sources documentation for [iOS](https://docs.stripe.com/mobile/ios/sources) or [Android](https://docs.stripe.com/mobile/android/sources) to learn more.\n\n### Testing the redirect and payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a `Source` object using your test API keys, the test payment is fulfilled with a three second delay. Use one of the following test email addresses when you need to test Multibanco payments under different conditions.\n\n| Email | Description |\n| --- | --- |\n| `{any_prefix}+fill_never@{any_domain}` | Funds are never sent to the receiver address. |\n| `{any_prefix}+fill_now@{any_domain}` | The next time that the receiver is retrieved after creation, it has received the full amount. |\n\nThe URL returned in the `redirect[url]` field of takes you to a sample payment page. Returning from this page takes you to the URL specified in `redirect[return_url]`.\n\n[](#charge-request)\n\nOnce the customer has pushed the funds, the source’s `status` transitions to `chargeable` and it can be used to make a charge request. This transition happens asynchronously and may occur after the customer was redirected back to your website.\n\nIt may take minutes, hours, or days for a customer to send the funds after following and returning from the redirect.\n\nFor this reason it is essential that your integration rely on [webhooks](https://docs.stripe.com/webhooks \"webhook\") to determine when the source becomes chargeable in order to create a charge. Please refer to our [best practices](https://docs.stripe.com/sources/best-practices) for more details on how to best integrate payment methods using webhooks.\n\n### Webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following webhook events are sent to notify you about changes to the source’s status:\n\n| Event | Description |\n| --- | --- |\n| `source.chargeable` | A `Source` object becomes `chargeable` after a customer has authenticated and verified a payment. |\n| `source.failed` | A `Source` object failed to become chargeable as your customer declined to authenticate the payment. |\n| `source.canceled` | A `Source` object expired and cannot be used to create a charge. |\n\n### Make a charge request using the source![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOnce the source is chargeable, from your `source.chargeable` webhook handler, you can make a charge request using the source ID as the value for the `source` parameter to complete the payment.\n\n`curl https://api.stripe.com/v1/charges \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d amount=\"1099\" \\   -d currency=\"eur\" \\   -d source=src_18eYalAHEMiOZZp1l9ZTjSU0`\n\nMultibanco Sources are [single-use](https://docs.stripe.com/sources#single-use-or-reusable) and cannot be used for recurring or additional payments. Refer to our [Sources & Customers](https://docs.stripe.com/sources/customers) guide for more information on how single-use Sources interact with [Customers](https://docs.stripe.com/api/customers \"Customers\").\n\n[](#charge-confirmation)\n\nSince Multibanco is a [synchronous](https://docs.stripe.com/sources#synchronous-or-asynchronous-confirmation) payment method and the customer has already sent funds, unless there is an unexpected error, the [Charge](https://docs.stripe.com/api#charge_object) will immediately succeed.\n\nYou will also receive the following webhook event as the charge is created:\n\n| Event | Description |\n| --- | --- |\n| `charge.succeeded` | The charge succeeded and the payment is complete. |\n\nWe recommend that you rely on the `charge.succeeded` webhook event to notify your customer that the payment process has been completed and their order is confirmed. Please refer to our [best practices](https://docs.stripe.com/sources/best-practices) for more details on how to best integrate payment methods using webhooks.\n\n### Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe risk of fraud or unrecognized payments is extremely low with Multibanco as the customer has to push funds from their bank account. As such, there is no dispute process that can result in a chargeback and funds withdrawn from your Stripe account.\n\n### Mispayments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs a customer can make a payment at any time directly through the ATM, it is possible, although unlikely, for a customer to supply funds to a canceled or expired source. In these cases, Stripe automatically initiates the refund process for the mispaid amount as described above.\n\n### Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPayments made with Multibanco can only be submitted for refund within 180 days from the date of the original charge. After 180 days, it is no longer possible to refund the charge.\n\nMultibanco payments can be refunded through either the [Dashboard](https://dashboard.stripe.com/test/payments) or [API](https://docs.stripe.com/api#create_refund). Multibanco does not itself provide any facility for refunds, and so Stripe handles this by creating an IBAN credit transfer. We contact the customer at the email address provided during source creation, and a credit is sent to the customer once they’ve supplied their account information. No interaction from the merchant is required beyond the initial refund request.\n\nSome users may want to manage the collection of the refund IBAN details themselves. Multibanco refunds require the customer’s IBAN number, account holder name, and the full address including street, city, country, and postal code. Please [contact us](https://support.stripe.com/email) to learn more about this option.\n\n### Sources expiration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA `chargeable` Multibanco source must be charged within six hours of becoming `chargeable`. If it is not, its status is automatically transitioned to `canceled` and your integration receives a `source.canceled` webhook event. Once a chargeable source is canceled, the customer’s authenticated Multibanco payment is refunded automatically—no money is moved into your account. For this reason, make sure the order is canceled on your end and the customer is notified when you receive the `source.canceled` event.\n\nAdditionally, `pending` sources are canceled after seven days if they are not used to receive funds. This ensures that all sources eventually transition out of their `pending` state to the `canceled` state if they are not used.",
  "title": "Multibanco payments with Sources | Stripe Documentation",
  "description": "Use Sources to accept payments using Multibanco, the most popular payment method in Portugal.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/coupons/object",
  "markdown": "# The Coupon object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    amount\\_offnullable integer\n    \n    Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.\n    \n\n*   One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `forever`<br><br>Applies to all charges from a subscription with this coupon applied. |\n    | `once`<br><br>Applies to the first charge from a subscription with this coupon applied. |\n    | `repeating`<br><br>Applies to charges in the first `duration_in_months` months from a subscription with this coupon applied. |\n    \n*   #### \n    \n    duration\\_in\\_monthsnullable integer\n    \n    If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Name of the coupon displayed to customers on for instance invoices or receipts.\n    \n*   #### \n    \n    percent\\_offnullable float\n    \n    Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent\\_off of 50 will make a $100 invoice $50 instead.\n    \n\n### More attributes\n\n*   #### \n    \n    applies\\_tonullable objectExpandable\n    \n\n*   #### \n    \n    currency\\_optionsnullable objectExpandable\n    \n\n*   #### \n    \n    max\\_redemptionsnullable integer\n    \n*   #### \n    \n    redeem\\_bynullable timestamp\n    \n\n```\n{  \"id\": \"jMT0WJUD\",  \"object\": \"coupon\",  \"amount_off\": null,  \"created\": 1678037688,  \"currency\": null,  \"duration\": \"repeating\",  \"duration_in_months\": 3,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {},  \"name\": null,  \"percent_off\": 25.5,  \"redeem_by\": null,  \"times_redeemed\": 0,  \"valid\": true}\n```\n\n## [Create a coupon](https://docs.stripe.com/api/coupons/create)\n\nYou can create coupons easily via the [coupon management](https://dashboard.stripe.com/coupons) page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.\n\nA coupon has either a `percent_off` or an `amount_off` and `currency`. If you set an `amount_off`, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of 100 USD will have a final total of 0 USD if a coupon with an `amount_off` of 20000 is applied to it and an invoice with a subtotal of 300 USD will have a final total of 100 USD if a coupon with an `amount_off` of 20000 is applied to it.\n\n### Parameters\n\n*   A positive integer representing the amount to subtract from an invoice total (required if `percent_off` is not passed).\n    \n*   Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the `amount_off` parameter (required if `amount_off` is passed).\n    \n*   Specifies how long the discount will be in effect if used on a subscription. Defaults to `once`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `forever`<br><br>Applies to all charges from a subscription with this coupon applied. |\n    | `once`<br><br>Applies to the first charge from a subscription with this coupon applied. |\n    | `repeating`<br><br>Applies to charges in the first `duration_in_months` months from a subscription with this coupon applied. |\n    \n*   #### \n    \n    duration\\_in\\_monthsinteger\n    \n    Required only if `duration` is `repeating`, in which case it must be a positive integer that specifies the number of months the discount will be in effect.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set.\n    \n*   A positive float larger than 0, and smaller or equal to 100, that represents the discount the coupon will apply (required if `amount_off` is not passed).\n    \n\n### More parameters\n\n### Returns\n\nReturns the coupon object.\n\n```\ncurl https://api.stripe.com/v1/coupons \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d duration=repeating \\  -d duration_in_months=3 \\  -d percent_off=\"25.5\"\n```\n\n```\n{  \"id\": \"jMT0WJUD\",  \"object\": \"coupon\",  \"amount_off\": null,  \"created\": 1678037688,  \"currency\": null,  \"duration\": \"repeating\",  \"duration_in_months\": 3,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {},  \"name\": null,  \"percent_off\": 25.5,  \"redeem_by\": null,  \"times_redeemed\": 0,  \"valid\": true}\n```\n\n## [Update a coupon](https://docs.stripe.com/api/coupons/update)\n\nUpdates the metadata of a coupon. Other coupon details (currency, duration, amount\\_off) are, by design, not editable.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set.\n    \n\n### More parameters\n\n### Returns\n\nThe newly updated coupon object if the call succeeded. Otherwise, this call raises [an error](#errors), such as if the coupon has been deleted.\n\n```\ncurl https://api.stripe.com/v1/coupons/jMT0WJUD \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"jMT0WJUD\",  \"object\": \"coupon\",  \"amount_off\": null,  \"created\": 1678037688,  \"currency\": null,  \"duration\": \"repeating\",  \"duration_in_months\": 3,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": null,  \"percent_off\": 25.5,  \"redeem_by\": null,  \"times_redeemed\": 0,  \"valid\": true}\n```\n\n## [Retrieve a coupon](https://docs.stripe.com/api/coupons/retrieve)\n\nRetrieves the coupon with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a coupon if a valid coupon ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/coupons/jMT0WJUD \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"jMT0WJUD\",  \"object\": \"coupon\",  \"amount_off\": null,  \"created\": 1678037688,  \"currency\": null,  \"duration\": \"repeating\",  \"duration_in_months\": 3,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {},  \"name\": null,  \"percent_off\": 25.5,  \"redeem_by\": null,  \"times_redeemed\": 0,  \"valid\": true}\n```\n\n## [List all coupons](https://docs.stripe.com/api/coupons/list)\n\nReturns a list of your coupons.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` coupons, starting after coupon `starting_after`. Each entry in the array is a separate coupon object. If no more coupons are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/coupons \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/coupons\",  \"has_more\": false,  \"data\": [    {      \"id\": \"jMT0WJUD\",      \"object\": \"coupon\",      \"amount_off\": null,      \"created\": 1678037688,      \"currency\": null,      \"duration\": \"repeating\",      \"duration_in_months\": 3,      \"livemode\": false,      \"max_redemptions\": null,      \"metadata\": {},      \"name\": null,      \"percent_off\": 25.5,      \"redeem_by\": null,      \"times_redeemed\": 0,      \"valid\": true    }    {...}    {...}  ],}\n```",
  "title": "The Coupon object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/kr-card/accept-a-payment",
  "markdown": "# Accept a payment using local cards in Korea\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nIntegrating with Korean cards lets South Korea-based customers pay using all local issuer-branded cards issued by South Korean card issuers.\n\nWhen a customer makes a payment, they are redirected to the checkout page of our local processor partner to authenticate and authorize the payment. After the customer authorizes the payment, Stripe redirects them back to your site.\n\n[](#compatibility)\n\n[A Checkout Session](https://docs.stripe.com/payments/checkout/how-checkout-works) must satisfy all of the following conditions to support Korean payment methods:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be expressed in Korean won (currency code `krw`).\n*   The minimum amount accepted is 100 KRW.\n\n[](#accept-a-kr-card-payment)\n\nEnable Korean cards by making the following updates to your integration.\n\nWhen creating a [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you must do the following:\n\n*   Add `kr_card` to the list of `payment_method_types`.\n*   Make sure all `line_items` use the `krw` currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'kr_card'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `kr_card`, all line items must have currency: krw       currency: 'krw',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n[](#test-integration)\n\nWhile testing your Checkout integration, select **Local cards** and click **Pay**. This redirects you to a Stripe-hosted page where you have the choice to authorize or fail the payment. If you authorize the payment, the PaymentIntent switches from `requires_action` to `succeeded`. Failing the test payment makes the PaymentIntent switch from `requires_action` to `requires_payment_method`. Learn more about how to [test](https://docs.stripe.com/testing#redirects) redirect-based payment methods.",
  "title": "Accept a payment using local cards in Korea | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/cards/object",
  "markdown": "# The Card object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    address\\_citynullable string\n    \n    City/District/Suburb/Town/Village.\n    \n*   #### \n    \n    address\\_countrynullable string\n    \n    Billing address country, if provided when creating card.\n    \n*   #### \n    \n    address\\_line1nullable string\n    \n    Address line 1 (Street address/PO Box/Company name).\n    \n*   #### \n    \n    address\\_line2nullable string\n    \n    Address line 2 (Apartment/Suite/Unit/Building).\n    \n*   #### \n    \n    address\\_statenullable string\n    \n    State/County/Province/Region.\n    \n*   #### \n    \n    address\\_zipnullable string\n    \n    ZIP or postal code.\n    \n*   #### \n    \n    address\\_zip\\_checknullable string\n    \n    If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.\n    \n*   Card brand. Can be `American Express`, `Diners Club`, `Discover`, `Eftpos Australia`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.\n    \n*   Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you’ve collected.\n    \n*   #### \n    \n    customernullable stringExpandable\n    \n    The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead.\n    \n*   If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn’t been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge).\n    \n*   Two-digit number representing the card’s expiration month.\n    \n*   Four-digit number representing the card’s expiration year.\n    \n*   #### \n    \n    fingerprintnullable string\n    \n    Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.\n    \n    _As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card—one for India and one for the rest of the world._\n    \n*   Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.\n    \n*   The last four digits of the card.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Cardholder name.\n    \n\n### More attributes\n\n*   #### \n    \n    accountnullable stringExpandableAvailable conditionally\n    \n*   #### \n    \n    address\\_line1\\_checknullable string\n    \n*   #### \n    \n    available\\_payout\\_methodsnullable array of enums\n    \n*   #### \n    \n    currencynullable enumAvailable conditionally\n    \n*   #### \n    \n    dynamic\\_last4nullable string\n    \n*   #### \n    \n    tokenization\\_methodnullable string\n    \n*   #### \n    \n    walletnullable objectPreview feature\n    \n\n```\n{  \"id\": \"card_1MvoiELkdIwHu7ixOeFGbN9D\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"customer\": \"cus_NhD8HD2bY8dP3V\",  \"cvc_check\": null,  \"dynamic_last4\": null,  \"exp_month\": 4,  \"exp_year\": 2024,  \"fingerprint\": \"mToisGZ01V71BCos\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {},  \"name\": null,  \"tokenization_method\": null,  \"wallet\": null}\n```\n\n## [Create a card](https://docs.stripe.com/api/cards/create)\n\nWhen you create a new credit card, you must specify a customer or recipient on which to create it.\n\nIf the card’s owner has no default card, then the new card will become the default. However, if the owner already has a default, then it will not change. To change the default, you should [update the customer](https://docs.stripe.com/api#update_customer) to have a new `default_source`.\n\n### Parameters\n\n*   #### \n    \n    sourceobject | stringRequired\n    \n    A token, like the ones returned by [Stripe.js](https://docs.stripe.com/js) or a dictionary containing a user’s card details (with the options shown below). Stripe will automatically validate the card.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the `Card` object.\n\nPOST /v1/customers/:id/sources\n\n```\ncurl https://api.stripe.com/v1/customers/cus_9s6XGDTHzA66Po/sources \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d source=tok_visa\n```\n\n```\n{  \"id\": \"card_1NGTaT2eZvKYlo2CZWSctn5n\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"customer\": \"cus_9s6XGDTHzA66Po\",  \"cvc_check\": \"pass\",  \"dynamic_last4\": null,  \"exp_month\": 8,  \"exp_year\": 2024,  \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {},  \"name\": null,  \"redaction\": null,  \"tokenization_method\": null,  \"wallet\": null}\n```\n\n## [Update a card](https://docs.stripe.com/api/cards/update)\n\nUpdates a specified card for a given customer.\n\n### Parameters\n\n*   City/District/Suburb/Town/Village.\n    \n*   Billing address country, if provided when creating card.\n    \n*   Address line 1 (Street address/PO Box/Company name).\n    \n*   Address line 2 (Apartment/Suite/Unit/Building).\n    \n*   State/County/Province/Region.\n    \n*   ZIP or postal code.\n    \n*   Two digit number representing the card’s expiration month.\n    \n*   Four digit number representing the card’s expiration year.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Cardholder name.\n    \n\n### Returns\n\nPOST /v1/customers/:id/sources/:id\n\n```\ncurl https://api.stripe.com/v1/customers/acct_1032D82eZvKYlo2C/sources/card_1NBLeN2eZvKYlo2CIq1o7Pzs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"Jenny Rosen\"\n```\n\n```\n{  \"id\": \"card_1NBLeN2eZvKYlo2CIq1o7Pzs\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"cvc_check\": \"pass\",  \"dynamic_last4\": null,  \"exp_month\": 8,  \"exp_year\": 2024,  \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"redaction\": null,  \"tokenization_method\": null,  \"wallet\": null,  \"account\": \"acct_1032D82eZvKYlo2C\"}\n```\n\n## [Retrieve a card](https://docs.stripe.com/api/cards/retrieve)\n\nYou can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `Card` object.\n\nGET /v1/customers/:id/cards/:id\n\ncURL\n\n```\ncurl https://api.stripe.com/v1/customers/cus_NhD8HD2bY8dP3V/cards/card_1MvoiELkdIwHu7ixOeFGbN9D \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"card_1MvoiELkdIwHu7ixOeFGbN9D\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"customer\": \"cus_NhD8HD2bY8dP3V\",  \"cvc_check\": null,  \"dynamic_last4\": null,  \"exp_month\": 4,  \"exp_year\": 2024,  \"fingerprint\": \"mToisGZ01V71BCos\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {},  \"name\": null,  \"tokenization_method\": null,  \"wallet\": null}\n```\n\n## [List all cards](https://docs.stripe.com/api/cards/list)\n\nYou can see a list of the cards belonging to a customer. Note that the 10 most recent sources are always available on the `Customer` object. If you need more than those 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional cards.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of the cards stored on the customer.\n\nGET /v1/customers/:id/cards\n\ncURL\n\n```\ncurl -G https://api.stripe.com/v1/customers/cus_NhD8HD2bY8dP3V/cards \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers/cus_NhD8HD2bY8dP3V/cards\",  \"has_more\": false,  \"data\": [    {      \"id\": \"card_1MvoiELkdIwHu7ixOeFGbN9D\",      \"object\": \"card\",      \"address_city\": null,      \"address_country\": null,      \"address_line1\": null,      \"address_line1_check\": null,      \"address_line2\": null,      \"address_state\": null,      \"address_zip\": null,      \"address_zip_check\": null,      \"brand\": \"Visa\",      \"country\": \"US\",      \"customer\": \"cus_NhD8HD2bY8dP3V\",      \"cvc_check\": null,      \"dynamic_last4\": null,      \"exp_month\": 4,      \"exp_year\": 2024,      \"fingerprint\": \"mToisGZ01V71BCos\",      \"funding\": \"credit\",      \"last4\": \"4242\",      \"metadata\": {},      \"name\": null,      \"tokenization_method\": null,      \"wallet\": null    }    {...}    {...}  ],}\n```",
  "title": "The Card object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/kakao-pay/accept-a-payment",
  "markdown": "# Accept a payment using Kakao Pay in Korea\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nIntegrating with [Kakao Pay](https://www.kakaopay.com/) enables South Korea-based customers to pay using this popular local payment method.\n\nWhen a customer makes a payment, they are redirected to the checkout page of our local processor partner to authenticate and authorize the payment. After the customer authorizes the payment, Stripe redirects them back to your site.\n\n[](#compatibility)\n\n[A Checkout Session](https://docs.stripe.com/payments/checkout/how-checkout-works) must satisfy all of the following conditions to support Korean payment methods:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be expressed in Korean won (currency code `krw`).\n*   The minimum amount accepted is 100 KRW, and the maximum amount accepted is 2,000,000 KRW.\n\n[](#accept-a-kakao-pau-payment)\n\nEnable Kakao Pay by making the following updates to your integration.\n\nWhen creating a [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you must do the following:\n\n*   Add `kakao_pay` to the list of `payment_method_types`.\n*   Make sure all `line_items` use the `krw` currency.\n*   Provide the buyer’s email address.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'kakao_pay'],   payment_method_data: {     kakao_pay: {},     billing_details: {       email: \"jane.diaz@stripe.com\"     }   line_items: [{     price_data: {       currency: 'usd',       # To accept `kakao_pay`, all line items must have currency: krw       currency: 'krw',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n[](#test-integration)\n\nWhile testing your Checkout integration, select **Kakao Pay** and click **Pay**. This redirects you to a Stripe-hosted page where you have the choice to authorize or fail the payment. If you authorize the payment, the PaymentIntent switches from `requires_action` to `succeeded`. Failing the test payment makes the PaymentIntent switch from `requires_action` to `requires_payment_method`. Learn more about how to [test](https://docs.stripe.com/testing#redirects) redirect-based payment methods.",
  "title": "Accept a payment using Kakao Pay in Korea | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/naver-pay/accept-a-payment",
  "markdown": "# Accept a payment using Naver Pay in Korea\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nIntegrating with [Naver Pay](https://pay.naver.com/) enables South Korea-based customers to pay using this popular local payment method.\n\nWhen a customer makes a payment, we redirect them to our local processor partner’s checkout page to authenticate and authorize the payment. After the customer authorizes the payment, we redirect them back to your site.\n\nCustomers can optionally use their Naver Pay points to pay for their purchase.\n\n[](#compatibility)\n\n[A Checkout Session](https://docs.stripe.com/payments/checkout/how-checkout-works) must satisfy all of the following conditions to support Korean payment methods:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be expressed in Korean won (currency code `krw`).\n*   The minimum amount accepted is 100 KRW, and the maximum amount accepted is 2,000,000 KRW.\n\n[](#accept-a-naver-pay-payment)\n\nEnable Naver Pay by making the following updates to your integration.\n\nWhen creating a [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you must do the following:\n\n*   Add `naver_pay` to the list of `payment_method_types`.\n*   Make sure all `line_items` use the `krw` currency.\n*   Specify either `point` or `card` to use Naver Pay points or card, respectively.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'naver_pay'],   payment_method_data: {     naver_pay: {       funding: 'point' # or card   },   line_items: [{     price_data: {       currency: 'usd',       # To accept `naver_pay`, all line items must have currency: krw       currency: 'krw',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n[](#test-integration)\n\nWhile testing your Checkout integration, select **Naver Pay** and click **Pay**. This redirects you to a Stripe-hosted page where you have the choice to authorize or fail the payment. If you authorize the payment, the PaymentIntent switches from `requires_action` to `succeeded`. Failing the test payment makes the PaymentIntent switch from `requires_action` to `requires_payment_method`. Learn more about how to [test](https://docs.stripe.com/testing#redirects) redirect-based payment methods.",
  "title": "Accept a payment using Naver Pay in Korea | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/pay-by-bank",
  "markdown": "# Pay by Bank payments | Stripe DocumentationThe Stripe Docs logo\n\nYou can refund Pay by Bank payments for up to 730 days (2 years) after the original payment. You can refund part of the original payment or the entire amount of the original payment. Refunds are free of charge but the processing fees for the original payment are non-refundable.\n\nStripe sends the refund back to the same bank account that initiated the payment. Refunds usually happen the same day but happen the next day if the refund was initiated after the cutoff time (5pm London time). We’ll notify you of the final refund status using the `charge.refund.updated` [webhook](https://docs.stripe.com/webhooks \"webhook\") event. When a refund succeeds, the status of the [Refund](https://docs.stripe.com/api/refunds/object) object transitions to `succeeded`.\n\nA refund can fail if the customer’s bank can’t process it correctly (for example, the bank account is closed). In the rare instance that a refund fails, the status of the Refund object transitions to `failed`. We’ll return the amount of the refund to your Stripe balance. You’ll then need to arrange an alternative way of providing your customer with a refund.",
  "title": "Pay by Bank payments | Stripe Documentation",
  "description": "Learn about Pay by Bank, a new real-time payment method in the UK powered by Open Banking.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/payto",
  "markdown": "# PayTo payments | Stripe DocumentationThe Stripe Docs logo\n\n## PayTo paymentsInvite only\n\n## Learn about PayTo, a real-time payment method in Australia.\n\nPayTo is a real-time payment method in Australia for accepting one-time and recurring payments. When paying with PayTo, customers [authenticate and approve](https://docs.stripe.com/payments/payment-methods#customer-actions) agreements using their mobile banking app.\n\nYou get [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed. Stripe typically sends a notification of the final status of the payment within 30 seconds of the agreement authorization.\n\n*   **Customer locations**\n    \n    Australia\n    \n*   **Presentment currency**\n    \n    AUD\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Real-time payments\n    \n*   **Recurring payments**\n    \n    Yes\n    \n*   **Payout timing**\n    \n    [Standard payout timing](https://docs.stripe.com/payouts#payout-speed) applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds and partial refunds**\n    \n    Yes, yes\n    \n\n## Payment flows ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCustomers pay with PayTo by using one of the following methods:\n\n*   **PayID**: Customers can provide a PayID, a unique identifier linked to a customer’s bank account, to initiate agreement authorization.\n    \n*   **Account and BSB Numbers**: Customers can provide their bank account details to initiate agreement authorization.\n    \n\nIn both cases, customers receive a request from their bank to authorize the PayTo agreement. This request typically surfaces through a push notification or by email.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPayTo is only available [on the Payment Element](https://docs.stripe.com/payments/payto/accept-a-payment?ui=elements) or [through a direct API integration](https://docs.stripe.com/payments/payto/accept-a-payment?ui=direct-api). It isn’t available in any other Stripe-hosted UIs or through [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods).\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nRefund PayTo payments by calling the [Stripe Refunds API](https://docs.stripe.com/api/refunds) or using the Dashboard. You can refund a PayTo payment up to 2 years after the original payment. Customers typically receive refunds in their bank accounts within 2 days, but some banks might take up to 10 days to process a PayTo refund.\n\nPayTo supports full and partial refunds. You can also issue multiple partial refunds up to the amount of the original charge.\n\nFor PayTo payments made using PayID, Stripe sends an email to the customer to collect their bank account details before processing the refund.\n\n## PayTo with Connect ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use [Stripe Connect](https://docs.stripe.com/connect/overview) with PayTo to process payments on behalf of a connected account. Connect users can use PayTo with the following charge types:\n\n### Enable PayTo for connected accounts that use the Stripe Dashboard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nReach out to your Stripe representative to enable PayTo for connected accounts that use the Stripe Dashboard or [email us](mailto:payto-support@stripe.com). These connect accounts must onboard manually.\n\n### Enable PayTo for connected accounts that use the Express Dashboard or a dashboard that isn’t hosted by Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo onboard connected accounts that use the Express Dashboard or a dashboard that isn’t hosted by Stripe, request the `payto_payments` capability using the [Capabilities API](https://docs.stripe.com/api/capabilities). For more details, follow the instructions to [enable payment methods for your connected accounts](https://docs.stripe.com/connect/account-capabilities).\n\n## Transaction limits and other considerations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAcross the banks, PayTo performs best for recurring transactions, and transactions below 1,000 AUD. PayTo performance might vary depending on the buyer’s bank, their account type, and the frequency of payments. Each bank can enforce additional measures to manage risk and prevent fraud.\n\nSee the documentation linked below for more details on bank-specific considerations.",
  "title": "PayTo payments | Stripe Documentation",
  "description": "Learn about PayTo, a real-time payment method in Australia.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/payco/accept-a-payment",
  "markdown": "# Accept a payment using PayCo in Korea\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nIntegrating with [PayCo](https://www.payco.com/) enables South Korea-based customers to pay using this popular local payment method.\n\nWhen a customer makes a payment, we redirect them to our local processor partner’s checkout page to authenticate and authorize the payment. After the customer authorizes the payment, we redirect them back to your site.\n\n[](#compatibility)\n\n[A Checkout Session](https://docs.stripe.com/payments/checkout/how-checkout-works) must satisfy all of the following conditions to support Korean payment methods:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be expressed in Korean won (currency code `krw`).\n*   The minimum amount accepted is 100 KRW, and the maximum amount accepted is 2,000,000 KRW.\n\n[](#accept-a-payco-payment)\n\nEnable PayCo by making the following updates to your integration.\n\nWhen creating a [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you must do the following:\n\n*   Add `payco` to the list of `payment_method_types`.\n*   Make sure all `line_items` use the `krw` currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'payco'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `payco`, all line items must have currency: krw       currency: 'krw',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n[](#test-integration)\n\nWhile testing your Checkout integration, select **PayCo** and click **Pay**. This redirects you to a Stripe-hosted page where you have the choice to authorize or fail the payment. If you authorize the payment, the PaymentIntent switches from `requires_action` to `succeeded`. Failing the test payment makes the PaymentIntent switch from `requires_action` to `requires_payment_method`. Learn more about how to [test](https://docs.stripe.com/testing#redirects) redirect-based payment methods.",
  "title": "Accept a payment using PayCo in Korea | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/dashboard/customize-iban-country",
  "markdown": "# Customize the IBAN country | Stripe DocumentationThe Stripe Docs logo\n\n## Customize the country of the IBAN when using bank transfers.\n\nThere are multiple ways you can collect payment for your [invoice](https://docs.stripe.com/api/invoices \"invoices\"), one of which is [Bank Transfer](https://docs.stripe.com/invoicing/bank-transfer). With this payment method, customers pay the invoice by transferring funds to a bank account, at which point Stripe reconciles the funds. The invoice provides the bank account details, and an International Bank Account Number (IBAN).\n\nIn general, it’s the merchant’s location that governs the country of the IBAN. If the merchant is part of the Single Euro Payments Area (SEPA), however, you can configure the IBAN country to one of the following: `DE`, `ES`, `FR`, `IE` or `NL`.\n\n1.  Follow the steps in the [Create an invoice](https://docs.stripe.com/invoicing/dashboard#create-invoice) section. Choose **Bank transfer** as a payment method.\n    \n    #### Note\n    \n    Manage your default payment method preferences in [Settings](https://dashboard.stripe.com/settings/billing/invoice).\n    \n2.  Select the country of your choice from the **European IBAN country** drop-down menu (`DE`, `ES`, `FR`, `IE` or `NL`).",
  "title": "Customize the IBAN country | Stripe Documentation",
  "description": "Customize the country of the IBAN when using bank transfers.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/payment_intents/handle_next_action",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/payments/link/express-checkout-element-link",
  "markdown": "# Link in the Express Checkout Element\n\n`const appearance = { /* appearance */ } const options = { /* options */ } const elements = stripe.elements({   mode: 'payment',   amount: 1099,   currency: 'usd',   appearance, }) const expressCheckoutElement = elements.create('expressCheckout', options) expressCheckoutElement.mount('#express-checkout-element')`",
  "title": "Link in the Express Checkout Element | Stripe Documentation",
  "description": "Let customers check out faster with Link and the Express Checkout Element.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/grabpay/accept-a-payment",
  "markdown": "# Accept a GrabPay payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nGrabPay is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) payment method. Customers pay with GrabPay by redirecting from your website to GrabPay to authorize the payment. After that, they will automatically be redirected back to your website. You will get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed.\n\nAssets such as logos and payment buttons are provided in the [branding guidelines](https://docs.stripe.com/payments/grabpay#branding-guidelines) section.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support GrabPay payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency. If you have line items in different currencies, create separate Checkout Sessions for each currency.\n*   You can only use one-time line items (recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans are not supported).\n*   The `sgd` currency is supported for businesses based in Singapore.\n*   The `myr` currency is supported for businesses based in Malaysia.\n\n[](#accept-a-payment)\n\n#### Note\n\nThis guide builds on the foundational [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) Checkout integration.\n\nThis guides you through enabling GrabPay and shows the differences between accepting a card payment and using GrabPay.\n\n### Enable GrabPay as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `grabpay` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the same currency\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'grabpay'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `grabpay`, all line items must have currency: sgd, myr       currency: 'sgd',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select GrabPay as the payment method and click the **Pay** button.",
  "title": "Accept a GrabPay payment | Stripe Documentation",
  "description": "Learn how to accept GrabPay, a common payment method in Southeast Asia.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/wechat-pay/accept-a-payment",
  "markdown": "# Accept a WeChat Pay payment\n\n**Supported business locations**: AU, AT, BE, BG, CA, CY, CZ, DK, EE, FI, FR, DE, GR, HK, HU, IE, IT, JP, LV, LT, LU, MT, NL, NO, PL, PT, RO, SG, SK, SI, ES, SE, CH, GB, US\n\n**Supported currencies**: `aud, cad, cny, eur, gbp, hkd, jpy, sgd, usd, dkk, nok, sek, chf`\n\n**Presentment currencies**: `aud, cad, cny, eur, gbp, hkd, jpy, sgd, usd, dkk, nok, sek, chf`\n\n**Payment mode**: Yes\n\n**Setup mode**: Not yet\n\n**Subscription mode**: Not yet\n\nA Checkout Session must satisfy all of the following conditions to support WeChat Pay payments:",
  "title": "Accept a WeChat Pay payment | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/visa-checkout",
  "markdown": "# Stripe payments with Visa Checkout\n\n## Stripe payments with Visa CheckoutDeprecated\n\n## Accept payments via Visa Checkout in your existing Stripe integration.\n\n#### Warning\n\nVisa terminated support for [Visa Checkout](https://usa.visa.com/pay-with-visa/visa-checkout.html) in favor of [Secure Remote Commerce](https://docs.stripe.com/secure-remote-commerce), which delivers unified online checkout supporting multiple of card brands. Stripe doesn’t support new Visa Checkout integrations and existing Visa Checkout integrations must migrate to Secure Remote Commerce as soon as possible.\n\nVisa Checkout is a third-party service that stores payment and shipping information for its users in order to streamline the checkout process. Instead of entering payment information on your checkout page, users can click the Visa Checkout button instead. Your Stripe integration receives a unique ID that it can use to create a charge against the payment information stored in the user’s Visa Checkout account.\n\n## Integrating the Visa Checkout button ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo get started, generate your **Visa Checkout API key** in the [Dashboard](https://dashboard.stripe.com/account/payments/settings). There are two keys, a sandbox key that you can use in test mode, and a production key that works in live mode.\n\nTo use Visa Checkout on your website, add the following script tag to the end of your document’s body tag:\n\nTo display the Visa Checkout button, use the following image:\n\nTo initialize the button, add an `onVisaCheckoutReady` function that invokes `V.init`:\n\n`function onVisaCheckoutReady() {   V.init({     apikey: '{{VISA_CHECKOUT_ID}}',     paymentRequest:{       subtotal: '10.00',       currencyCode: 'USD'     },     settings: {       displayName: 'My Website'     }   }); }`\n\nThe Visa Checkout JavaScript SDK automatically invokes the `onVisaCheckoutReady` function when it finishes loading. The `paymentRequest` property accepted by `V.init` requires the following parameters:\n\n| Parameter | Description |\n| --- | --- |\n| `subtotal` | The amount of the transaction, expressed in decimal format |\n| `currencyCode` | The currency in which to perform the transaction |\n\nBy default, American Express, MasterCard, Visa, and Discover card brands are accepted, all shipping and billing countries are also enabled.\n\nFor more details about the `V.init` function and the parameters that it accepts, [refer](https://developer.visa.com/images2/products/visa_checkout/VisaCheckoutMerchantDocs.zip) to Visa’s documentation. There are optional `paymentRequest` properties that support a range of other features, including promotions, discounts, and taxes. There are also optional `settings` properties that allow you to control the shipping information options.\n\n## Completing the payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen the user clicks the Visa Checkout button on your checkout page, it opens a lightbox where they can select an existing payment method from their account or input a new one. When the user completes the process, the Visa Checkout JavaScript SDK in the browser emits a `payment.success` event with a unique ID that your application can use to complete the transaction.\n\nThe following code shows how to handle the `payment.success` event and [confirm](https://docs.stripe.com/api/payment_intents/confirm) the [PaymentIntent](https://docs.stripe.com/api/payment_intents) you created at the beginning of the checkout flow. See [accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web) to learn how to manage your checkout flow using Payment Intents.\n\n`// PaymentIntent client secret passed from server-side. // See: https://stripe.com/docs/payments/accept-a-payment?platform=web // for more information on how to do this. const clientSecret = '{{CLIENT_SECRET}}';  V.on('payment.success', async (payment) => {   const intent = await stripe.confirmCardPayment(clientSecret, {     payment_method: {       card: {         visa_checkout: {           callid: payment.callid,         },       },     },   });   // Perform logic for payment completion here });`\n\n## Testing Visa Checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo test your integration against Visa Checkout’s sandbox, create a new Visa Checkout user account during the checkout process on your website. Configure the account to use the test card number **4242 4242 4242 4242**, a random three-digit CVC number, and any expiration date in the future. Complete the checkout process as normal. If everything works correctly, Visa Checkout redirects you back to your application, which creates the charge as expected.",
  "title": "Stripe payments with Visa Checkout | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/masterpass",
  "markdown": "# Masterpass guide | Stripe DocumentationThe Stripe Docs logo\n\n## Masterpass guideDeprecated\n\n## Accept payments via Masterpass in your existing Stripe integration.\n\n#### Warning\n\nMastercard plans to deprecate Masterpass in favor of [Secure Remote Commerce](https://docs.stripe.com/secure-remote-commerce), which delivers unified online checkout supporting a number of card brands. Stripe doesn’t support new Masterpass integrations and existing integrations must migrate to Secure Remote Commerce as soon as possible.\n\nMasterpass is a third-party service that stores payment and shipping information for its users in order to streamline the checkout process. Instead of entering payment information on your checkout page, users can click the Masterpass button instead. Your Stripe integration receives a unique transaction ID that it can use to create a charge against the payment information stored in the user’s Masterpass account.\n\n## Integrating the Masterpass button ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo get started, generate your Masterpass **Checkout ID** in the [Dashboard](https://dashboard.stripe.com/account/payments/settings) and configure your sandbox and production callback URLs.\n\nTo use Masterpass on your website, add the following script tag to your HTML document:\n\nTo display the Masterpass button, use the following image:\n\nAttach a click handler to the image and use it to invoke the `masterpass.checkout` function with the desired parameters:\n\n`let button = document.getElementById(\"mpbutton\");  button.addEventListener(\"click\", ev =>   masterpass.checkout({     checkoutId: \"{MASTERPASS_CHECKOUT_ID}\",     allowedCardTypes: [\"master\", \"amex\", \"visa\"],     amount: \"10.00\",     currency: \"USD\",     cartId: \"{UNIQUE_ID}\",     callbackUrl: \"{CALLBACK_URL}\"   }));`\n\nThe `masterpass.checkout` function requires the following parameters:\n\n| Parameter | Description |\n| --- | --- |\n| `checkoutId` | The Checkout ID for your Masterpass project, copied from the [Dashboard](https://dashboard.stripe.com/account/payments/settings) |\n| `allowedCardTypes` | A list of the Masterpass-compatible payment providers that you want to support |\n| `amount` | The amount of the transaction, expressed in decimal format |\n| `currency` | The currency in which to perform the transaction |\n| `cartId` | A unique string that you generate to identify the purchase |\n| `callbackUrl` | (Optional) Overrides the default `callbackUrl` configured when activating Masterpass. |\n\nFor more details about the `masterpass.checkout` function and the parameters that it accepts, [refer](https://developer.mastercard.com/documentation/masterpass-merchant-integration-v7/7#standard-checkout1) to Mastercard’s documentation.\n\n## Completing the payment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen the user clicks the Masterpass button on your checkout page, it takes them to the Masterpass website where they can select an existing payment method from their account or input a new one. When the user completes the process, Masterpass redirects them to the callback URL that you configured when activating Masterpass, or the specified callback URL when invoking `masterpass.checkout` function. It appends an `oauth_verifier` URL query parameter that your application can use to complete the transaction.\n\nIn the route handler for the redirect destination, extract the URL query parameter and use it to [confirm](https://docs.stripe.com/api/payment_intents/confirm) the [PaymentIntent](https://docs.stripe.com/api/payment_intents) that you have created at the beginning of the checkout flow. See [accept a payment](https://docs.stripe.com/payments/accept-a-payment) to learn how to manage your checkout flow using Payment Intents.\n\nThe following code example demonstrates how to confirm a PaymentIntent with Masterpass in Node.js with the Express framework:\n\n`app.get('/callback', async (req, res) => {   // retrieve the PaymentIntent ID created at the beginning of the checkout flow.   const payment_intent_id = '{{PAYMENT_INTENT_ID}}';    const payment_intent = await stripe.paymentIntents.confirm(payment_intent_id, {     amount: 1000,     currency: 'usd',     payment_method_data: {       type: 'card',       card: {         masterpass: {           cart_id: '{{UNIQUE_ID}}',           transaction_id: req.query.oauth_verifier,         },       },     },   });    res.send('<h1>Charge succeeded</h1>'); });`\n\nUse the Masterpass sandbox environment in Stripe’s test mode, and the Masterpass production environment in Stripe’s live mode. When creating the source, be sure to use the same unique value for the `cart_id` property that you used on your checkout page.\n\n## Testing Masterpass ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo test your Masterpass integration against Mastercard’s sandbox, create a new Masterpass user account during the checkout process on your website. Configure the account to use one of the [test cards](https://developer.mastercard.com/page/masterpass-sandbox-testing-guidelines#new-web-experience) from the Masterpass documentation. Complete the checkout process as normal, selecting the test card as your Masterpass payment method. If everything works correctly, Masterpass redirects you back to your application, which creates the charge as expected.",
  "title": "Masterpass guide | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/revolut-pay/accept-a-payment",
  "markdown": "# Accept a payment with Revolut Pay\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nRevolut Pay is a [reusable](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. Customers pay by being redirected from your website or app, authorizing the payment with Revolut Pay, then returning to your website or app. You get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) of whether the payment succeeded or failed.\n\n[](#compatibility)\n\nTo support Revolut Pay payments, a Checkout Session must satisfy all of the following conditions:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency.\n    *   If you have line items in different currencies, create separate Checkout Sessions for each currency.\n\nRecurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans are supported.\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nThis guide describes how to enable Revolut Pay and shows the differences between accepting a card payment and using Revolut Pay.\n\n### Enable Revolut Pay as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `revolut_pay` to the list of `payment_method_types`.\n2.  Make sure all `line_items` use the same currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'revolut_pay'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `revolut_pay`, all line items must have currency: eur, gbp       currency: 'gbp',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select Revolut Pay as the payment method and click the **Pay** button.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/merchant_checkout_revolut_pay_visible.de0ad2427b3548dda777da6fc9b421dc.png)",
  "title": "Accept a payment with Revolut Pay | Stripe Documentation",
  "description": "Learn about Revolut Pay, a digital wallet payment method used in the United Kingdom and the European Union.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/revolut-pay/set-up-future-payments",
  "markdown": "# Set up future Revolut Pay payments\n\nThis guide covers how to save a Revolut Pay payment details using [Checkout](https://docs.stripe.com/payments/checkout), our fully hosted checkout page.\n\nLearn how to [set up a subscription with Revolut Pay](https://docs.stripe.com/billing/subscriptions/revolut-pay) to create recurring payments after saving a payment method in Checkout.\n\n[](#web-set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-permissions)\n\nIf you save your customer’s payment method for future use, you need permission. Creating an agreement (sometimes called a mandate) up front allows you to save your customer’s payment details, and potentially charge your customer when they’re not actively using your website or app.\n\nAdd terms to your website or app that state how you plan to save your customer’s payment method details, and let your customer opt in. If you plan to charge your customer when they’re offline, make sure that your terms also cover the following:\n\n*   The customer’s permission to your initiating a payment or a series of payments on their behalf for specified transactions\n*   The anticipated frequency (that is, one-time or recurring) and timing of payments\n*   How you determine the payment amount\n*   Your cancellation policy, if you’re setting the payment method up for a subscription service\n\nMake sure that you keep a record of your customer’s written agreement to these terms.\n\n[](#web-create-customer)\n\nTo reuse a Revolut Pay payment method for future payments, attach it to a [Customer](https://docs.stripe.com/api/customers \"Customers\").\n\nCreate a [Customer object](https://docs.stripe.com/api/customers) when your customer creates an account with your business, and associate the ID of the Customer object with your own internal representation of a customer. Alternatively, you can create a new Customer before saving a payment method for future payments.\n\nCreate a new Customer or retrieve an existing Customer to associate with this payment. Include the following code on your server to create a new Customer:\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode description=\"My First Test Customer (created for API docs)\"`\n\n[](#web-create-checkout-session)\n\nYour customer must authorize you to use their Revolut account for future payments through Stripe Checkout. This allows you to accept Revolut payments. Add a checkout button to your website that calls a server-side endpoint to create a [Checkout Session](https://docs.stripe.com/api/checkout/sessions).\n\n`<html>   <head>     <title>Checkout</title>   </head>   <body>     <form action=\"/create-checkout-session\" method=\"POST\">       <button type=\"submit\">Checkout</button>     </form>   </body> </html>`\n\nCreate a Checkout Session in `setup` mode to collect the required information. After creating the Checkout Session, redirect your customer to the [URL](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-url) that the response returns.\n\n[](#web-test-integration)\n\nSelect Revolut Pay as the payment method, then click **Continue to Revolut Pay**. You can test the successful setup case by authenticating the SetupIntent on the redirect page. The SetupIntent transitions from requires\\_action to succeeded.",
  "title": "Set up future Revolut Pay payments | Stripe Documentation",
  "description": "Learn how to save Revolut Pay details and charge your customers later.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/payment-method-available-countries",
  "markdown": "# Country availability for payment methods\n\n## Review countries supported by each payment method.\n\nSome payment methods are only available in certain countries. You can review country availability below, or use the [capabilities API](https://docs.stripe.com/connect/required-verification-information) to query if an account is eligible to use a payment method.\n\n### ACH Direct Debit![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Affirm![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Afterpay Clearpay![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Apple Pay![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Bacs Direct Debit![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Bancontact![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Bank Transfers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### BECS Debit![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Boleto![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### BLIK![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Canadian pre-authorized debit![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Cartes Bancaires![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Cash App Pay![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### EPS![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### FPX![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Giropay![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Google Pay![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### GrabPay![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### iDEAL![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### JCB Japan![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Klarna![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Konbini![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Link![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### MobilePay![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Multibanco![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### OXXO![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### P24![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Pay by Bank![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### PayNow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Pix![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### PromptPay![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### SEPA Debit![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Sofort![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Swish![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWas this page helpful?\n\nYesNo\n\nNeed help? [Contact Support](https://support.stripe.com/).\n\nJoin our [early access program](https://insiders.stripe.dev/).\n\nCheck out our [product changelog](https://stripe.com/blog/changelog).\n\nQuestions? [Contact Sales](https://stripe.com/contact/sales).\n\nPowered by [Markdoc](https://markdoc.dev/)\n\nSign up for developer updates:\n\nYou can unsubscribe at any time. Read our [privacy policy](https://stripe.com/privacy).",
  "title": "Country availability for payment methods | Stripe Documentation",
  "description": "Review countries supported by each payment method.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/acss-debit/custom-pad-agreement",
  "markdown": "# Custom Canadian pre-authorized debit mandate agreements\n\n#### Caution\n\nIt is unlikely your business needs to create a custom mandate agreement. By default, the Stripe.js library provides an all-in-one solution for your customers to provide and verify their bank account and accept a valid mandate.\n\n## Do you need a custom mandate agreement?![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHere are some reasons _not to_ create a custom mandate agreement:\n\n*   You want to send customized emails\n*   You want to specify custom payment schedule terms\n\nIt is possible to send customized emails using the same mandate agreement text provided in the customer payment details collection solution. Simply match the same text provided by Stripe in your own emails.\n\nIf you want to specify a custom payment schedule, this can be done using the Stripe API. The mandate agreement automatically displayed to your customers will use the payment schedule terms you provide.\n\nHere are some reasons you might want to create a custom mandate agreement:\n\n*   You want to obtain authorization from your customer to not send debit notification emails\n*   You want to provide different or additional cancellation or recourse terms that satisfy [Payments Canada rules](https://www.payments.ca/sites/default/files/h1eng.pdf)\n\nThe mandate agreement provided by default is specifically written to serve the needs of almost all businesses on Stripe. It uses the most flexible timelines for confirmation and cancellation allowed by Canadian banks and satisfies all requirements given by the [Payments Canada Rules for pre-authorized debits](https://www.payments.ca/sites/default/files/h1eng.pdf). Though there are very few reasons to create a custom agreement, not all businesses are the same. This page will help your business create a valid mandate agreement that will protect both you and your customers.\n\n## Background![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to collecting a customer’s name and bank account information, you must collect specific debit mandate (often called a pre-authorized debit agreement). This mandate gives your business authorization to debit the customer’s bank account on a specified schedule. Your business must present and collect a mandate agreement with clear and specific terms for one-time or recurring debits that meets the requirements given by the [Payments Canada rules](https://www.payments.ca/sites/default/files/h1eng.pdf).\n\nParts of the agreement will be pre-defined based on the mandate you create [with the Stripe API](https://docs.stripe.com/payments/acss-debit/accept-a-payment#web-create-payment-intent) (for example the `interval_description` defining your payment timeline or triggers) and existing information about your customers. This page will guide you through the remaining required parts of a mandate agreement, but your business will ultimately be responsible for any disputes arising from its contents.\n\nAfter your customer accepts the mandate agreement, you can immediately debit the first payment due from your customer’s account. You must send your customer confirmation of the accepted mandate agreement, including collected payment details. The mandate agreement must include terms that allow you to immediately debit the bank account and send the confirmation within 5 days after your customer has accepted the mandate agreement. By default, Stripe sends a [customizable agreement confirmation email](https://docs.stripe.com/payments/acss-debit#mandate-and-debit-notification-emails) matching the [sample below](#sample-pre-authorized-debit-agreement).\n\nPre-debit notification emails informing your customer that a charge is being made and the amount of the charge is a requirement, as well. However, the time limit for these can be modified or they can be waived entirely in the agreement.\n\n## Mandate agreement requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA properly formatted PAD mandate agreement must include the following information in order to meet regulatory requirements:\n\n| Requirement | Description | Example Text |\n| --- | --- | --- |\n| Business Contact Information | The mandate agreement must contain accurate contact information that the customer can use to contact your business by a method of communication your customer uses. | Rocket Rides<br><br>Attn: Billing Department<br><br>123 First Avenue<br><br>Toronto, ON<br><br>M2J 3R7<br><br>Email: billing@rocket-rides.com |\n| Date of Agreement Acceptance | Somewhere in the agreement presented to customer, the date of the agreement acceptance must be shown. | Accepted on: April 8, 2024 |\n| Pre-authorized debit Type | This value is determined by the type of transaction for which you are collecting this mandate agreement. It must be based on the mandate object `transaction_type` value. | *   Personal<br>*   Business |\n| Authority to Debit Account with Variable Amounts | A clear statement outlining your customer’s agreement that your business is authorized to debit the account given. | By clicking \\[“submit application”, “submit” or “I accept”\\], you accept this agreement and authorize _Rocket Rides_ to debit the specified bank account for any amount owed for charges resulting from the use of services or purchase of products. |\n| Payment Schedule or Triggers | Required only if [Mandate](https://docs.stripe.com/api/mandates) `payment_schedule` is `interval` or `combined`.<br><br>The mandate agreement must display the [Mandate](https://docs.stripe.com/api/mandates) `interval_description` value, which should contain an explicit schedule of payments or triggering events for debits. | *   On the 5th of every month or the next business day.<br>*   On April 30, 2020.<br>*   When issued invoices become due.<br>*   When your RocketBucks balance goes below $20. |\n| Sporadic Authorization | Required only if [Mandate](https://docs.stripe.com/api/mandates) `payment_schedule` is `sporadic` or `combined`.<br><br>The mandate agreement must state that your business will obtain authorization (such as providing a username and password) from your customer for each sporadic payment you process. | _Rocket Rides_ may debit the specified account for sporadic payments only after obtaining your authorization. |\n| Modification of PAD Confirmation Period | In order to improve the speed with which you can do business, Stripe performs verification on customer bank accounts that allows your business to begin debiting after a PAD is accepted so long as the Customer has agreed to this in the mandate agreement. | You agree that any payment due will be debited from your account immediately upon acceptance of this PAD agreement and that confirmation of this PAD agreement will be sent within five calendar days after acceptance. |\n| Modification of Pre-Notification Period | Stripe supports the ability to send required pre-debit notification emails to your customer (or provide webhooks that notify you to send them) when debits are initiated. Your customer must agree to waive the pre-notification period. This text must be bolded, highlighted or underlined in the mandate agreement text.<br><br>Pre-notifications are required if not expressly waived. If you opt out of sending these emails, the text for waiving the pre-notification must be included instead, also bolded, highlighted or underlined. | *   **You waive the right to receive pre-notification and prior confirmation of the amount or timing of any PAD.**<br>*   **You additionally agree that you don’t require advance notice of the amount or timing of any PAD before Rocket Rides processes the debit.** |\n| Recourse / Reimbursement Statement | The mandate agreement must contain this exact text in its entirety. | You have certain recourse rights if any debit doesn’t comply with this PAD agreement. For example, you have the right to receive reimbursement for any debit that isn’t authorized or isn’t consistent with this PAD Agreement. To obtain more information on your recourse rights, contact your financial institution or visit [www.payments.ca](https://www.payments.ca/). |\n| Cancellation of Agreement | A statement outlining a customer’s ability to revoke their authorization at any time, specifying an amount of notice required by your business. | You can amend or cancel this authorization at any time by providing the business with thirty days’ prior notice at _billing@rocket-rides.com_. To obtain a sample cancellation form, or further information on canceling a PAD agreement, contact your financial institution or visit [www.payments.ca](https://www.payments.ca/). |\n| Notice of Use of a Payment Service Provider | The mandate agreement must disclose Stripe as the payment service provider. | _Rocket Rides_ partners with [Stripe](http://stripe.com/) to provide payment processing. |\n\nThis sample document illustrates what a complete mandate agreement might look like, both in your payment flow and in the confirmation email sent to your customers.\n\n123 First Avenue  \nToronto, ON  \nM2J 3R7  \nEmail: billing@rocket-rides.com\n\nPre-authorized debit agreement\n\n  \n\n|     |     |     |     |\n| --- | --- | --- | --- |\n| Date | April 30, 2020 | Type | Business |\n| Account Holder |     | Email |     |\n| Institution |     | Transit |     |\n| Account # |     |     |     |\n\nBy clicking submit, you accept this agreement and authorize _Rocket Rides_ to debit the specified bank account for any amount owed for charges resulting from the use of services or purchase of products.\n\n  \n\nPayments will be debited from the specified account according to the following schedule:  \n`On the 5th of every month`\n\nDisplaying payment schedules or triggers is only required if `payment_schedule` is `interval` or `combined`\n\n_Rocket Rides_ may debit the specified account for sporadic payments only after obtaining your authorization\n\nDisplaying terms for sporadic payments is only required if `payment_schedule` is `sporadic` or `combined`\n\nWhere a scheduled debit date is not a business day, _Rocket Rides_ will debit on the next business day.\n\nYou agree that any payment due will be debited from your account immediately upon acceptance of this PAD agreement and that confirmation of this PAD agreement will be sent within five calendar days after acceptance. You waive the right to receive pre-notification and prior confirmation of the amount or timing of any PAD. You further agree that you don't require advance notice of the amount or timing of any PAD before Rocket Rides processes the debit.\n\nYou have certain recourse rights if any debit doesn't comply with this PAD agreement. For example, you have the right to receive reimbursement for any debit that isn't authorized or isn't consistent with this PAD Agreement. To obtain more information on your recourse rights, contact your financial institution or visit [www.payments.ca](https://www.payments.ca/).\n\nYou can amend or cancel this authorization at any time by providing the business with thirty days' prior notice at billing@rocket-rides.com. To obtain a sample cancellation form, or further information on cancelling a PAD agreement, please contact your financial institution or visit [www.payments.ca](https://www.payments.ca/).\n\n_Rocket Rides_ partners with [Stripe](https://stripe.com/) to provide payment processing.",
  "title": "Custom Canadian pre-authorized debit mandate agreements | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/acss-debit/set-up-payment",
  "markdown": "# Save details for future payments with pre-authorized debit in Canada\n\n## Learn how to save payment method details for future Canadian pre-authorized debit payments.\n\nYou can use the [Setup Intents API](https://docs.stripe.com/payments/setup-intents) to collect payment method details in advance, with the final amount or payment date determined later. This is useful for:\n\n*   Saving payment methods to a wallet to streamline future purchases\n*   Collecting surcharges after fulfilling a service\n*   Starting a free trial for a [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\")\n\n### Presentment currency![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMost bank accounts in Canada hold Canadian dollars (CAD), with a small number of accounts in other currencies, including US dollars (USD). It is possible to accept PAD payments in either CAD or USD, but choosing the correct currency for your customer is important to avoid payment failures.\n\nUnlike many card-based payment methods, you might not be able to successfully debit a CAD account in USD or debit a USD account in CAD. Most often, attempting to do so results in a delayed payment failure that takes up to five business days.\n\nTo avoid these failures, it is safest to set up PAD bank accounts in CAD unless you are confident your customer’s account accepts USD debits.\n\n[](#web-set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-create-customer)\n\nTo reuse a bank account for future payments, it must be attached to a [Customer](https://docs.stripe.com/api/customers \"Customers\").\n\nYou should create a Customer object when your customer creates an account with your business. Associating the ID of the Customer object with your own internal representation of a customer enables you to retrieve and use the stored payment method details later. If your customer hasn’t created an account, you can still create a Customer object now and associate it with your internal representation of the customer’s account later.\n\nCreate a new Customer or retrieve an existing Customer to associate with these payment details. Include the following code on your server to create a new Customer.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#web-create-setup-intent)\n\nA [SetupIntent](https://docs.stripe.com/api/setup_intents) is an object that represents your intent to set up a customer’s payment method for future payments. The `SetupIntent` tracks the steps of this set-up process.\n\nIn order to use Canadian pre-authorized debits, you must obtain authorization from your customer for one-time and recurring debits using a pre-authorized debit agreement (see [PAD Mandates](https://docs.stripe.com/payments/acss-debit#mandates)). The [Mandate](https://docs.stripe.com/api/mandates) object records this agreement and authorization.\n\nCreate a SetupIntent on your server with [payment\\_method\\_types](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-payment_method_types) set to `acss_debit` and specify the Customer’s [id](https://docs.stripe.com/api/customers/object#customer_object-id). In order to define a payment schedule on the [Mandate](https://docs.stripe.com/api/mandates) for this SetupIntent, also include the following parameters:\n\n| Parameter | Value | Required? |\n| --- | --- | --- |\n| `payment_method_options[acss_debit][currency]` | Currency to use for future payments with this payment method. Must match the customer’s bank account currency. Accepted values are `cad` or `usd`. | Yes |\n| `payment_method_options[acss_debit][mandate_options][payment_schedule]` | The mandate payment schedule. Accepted values are `interval`, `sporadic`, or `combined`. See the [PAD Mandates](https://docs.stripe.com/payments/acss-debit#mandates) overview to help you select the right schedule for your business. | Yes |\n| `payment_method_options[acss_debit][mandate_options][interval_description]` | Text description of the interval of payment schedule. See the [PAD Mandates](https://docs.stripe.com/payments/acss-debit#mandates) overview to help you construct the right interval description for your business. | If `payment_schedule` specified as `interval` or `combined` |\n| `payment_method_options[acss_debit][mandate_options][transaction_type]` | The type of the mandate you are creating, either `personal` (if your customer is an individual) or `business` (if your customer is a business). | Yes |\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"payment_method_types[]\"=acss_debit \\  -d customer={{CUSTOMER_ID}} \\   -d \"payment_method_options[acss_debit][currency]\"=cad \\  -d \"payment_method_options[acss_debit][mandate_options][payment_schedule]\"=interval \\  -d \"payment_method_options[acss_debit][mandate_options][interval_description]\"=\"First day of every month\" \\  -d \"payment_method_options[acss_debit][mandate_options][transaction_type]\"=personal`\n\n### Retrieve the client secret![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe SetupIntent includes a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") that the client side uses to securely complete the payment process. You can use different approaches to pass the client secret to the client side.\n\nRetrieve the client secret from an endpoint on your server, using the browser’s `fetch` function. This approach is best if your client side is a single-page application, particularly one built with a modern frontend framework like React. Create the server endpoint that serves the client secret:\n\n`get '/secret' do   intent = # ... Create or retrieve the SetupIntent   {client_secret: intent.client_secret}.to_json end`\n\nAnd then fetch the client secret with JavaScript on the client side:\n\n`(async () => {   const response = await fetch('/secret');   const {client_secret: clientSecret} = await response.json();   // Render the form using the clientSecret })();`\n\n[\n\n## Collect payment method details and mandate acknowledgement![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-collect-mandate-and-submit)\n\nWhen a customer clicks to pay with Canadian pre-authorized debit, we recommend you use Stripe.js to submit the payment to Stripe. [Stripe.js](https://docs.stripe.com/payments/elements) is our foundational JavaScript library for building payment flows. It will automatically handle integration complexities, and enables you to easily extend your integration to other payment methods in the future.\n\nInclude the Stripe.js script on your checkout page by adding it to the `head` of your HTML file.\n\nCreate an instance of Stripe.js with the following JavaScript on your checkout page.\n\n`// Set your publishable key. Remember to change this to your live publishable key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\nRather than sending the entire PaymentIntent object to the client, use its [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") from the previous step. This is different from your API keys that authenticate Stripe API requests.\n\nThe client secret should still be handled carefully because it can complete the charge. Do not log it, embed it in URLs, or expose it to anyone but the customer.\n\nUse [stripe.confirmAcssDebitSetup](https://docs.stripe.com/js/setup_intents/confirm_acss_debit_setup) to collect bank account details and verification, confirm the mandate, and complete the setup when the user submits the form. Including the customer’s email address and the account holder’s name in the `billing_details` property of the `payment_method` parameter is required to create a PAD payment method.\n\n`const form = document.getElementById('payment-form'); const accountholderName = document.getElementById('accountholder-name'); const email = document.getElementById('email'); const submitButton = document.getElementById('submit-button'); const clientSecret = submitButton.dataset.secret;  form.addEventListener('submit', async (event) => {   event.preventDefault();    const {setupIntent, error} = await stripe.confirmAcssDebitSetup(     clientSecret,     {       payment_method: {         billing_details: {           name: accountholderName.value,           email: email.value,         },       },     }   );    if (error) {     // Inform the customer that there was an error.     console.log(error.message);   } else {       // Handle next step based on SetupIntent's status.       console.log(\"SetupIntent ID: \" + setupIntent.id);       console.log(\"SetupIntent status: \" + setupIntent.status);   } });`\n\nStripe.js then loads an on-page modal UI that handles bank account details collection and verification, presents a hosted mandate agreement and collects authorization.\n\n#### Note\n\n`stripe.confirmAcssDebitSetup` may take several seconds to complete. During that time, disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error, show it to the customer, re-enable the form, and hide the waiting indicator.\n\nIf successful, Stripe returns a [SetupIntent](https://docs.stripe.com/api/setup_intents/object) object, with one of the following possible statuses:\n\n| Status | Description | Next step |\n| --- | --- | --- |\n| `succeeded` | The bank account has been instantly verified or verification was not necessary. | No action needed |\n| `requires_action` | Further action needed to complete bank account verification. | Step 5: [Verifying bank accounts with micro-deposits](#web-verify-with-microdeposits) |\n\nAfter successfully confirming the SetupIntent, an email confirmation of the mandate and collected bank account details must be sent to your customer. Stripe handles these by default, but you can choose to [send custom notifications](https://docs.stripe.com/payments/acss-debit#mandate-and-debit-notification-emails) if you prefer.\n\n#### Note\n\nMandate confirmation emails will not be sent to the customer’s email address when testing the integration.\n\nIf the customer chooses to close the modal without completing the verification flow, Stripe.js returns the following error:\n\n`{   \"error\": {     \"type\": \"validation_error\",     \"code\": \"incomplete_payment_details\",     \"message\": \"Please provide complete payment details.\"   } }`\n\n[](#web-verify-with-microdeposits)\n\nNot all customers can verify the bank account instantly. This step only applies if your customer has elected to opt out of the instant verification flow in the previous step.\n\nIn this case, Stripe automatically sends two micro-deposits to the customer’s bank account. These deposits take one to two business days to appear on the customer’s online statement and have statement descriptors that include `ACCTVERIFY`.\n\nThe result of the `stripe.confirmAcssDebitSetup` method call is a SetupIntent in the `requires_action` state. The SetupIntent contains a `next_action` field that contains some useful information for completing the verification.\n\nStripe notifies your customer at the [billing email](https://docs.stripe.com/api/payment_methods/object#payment_method_object-billing_details-email) when the deposits are expected to arrive. The email includes a link to a Stripe-hosted verification page where they can confirm the amounts of the deposits and complete verification.\n\nThere is a limit of three failed verification attempts. If this limit is exceeded, the bank account can no longer be verified. In addition, there is a timeout for micro-deposit verifications of 10 days. If micro-deposits are not verified in that time, the PaymentIntent reverts to requiring new payment method details. Clear messaging about what these micro-deposits are and how you use them can help your customers avoid verification issues.\n\n### Optional: Custom email and verification page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you choose to send [custom email notifications](https://docs.stripe.com/payments/acss-debit#mandate-and-debit-notification-emails), you have to email your customer instead. To do this, you can use the `verify_with_microdeposits[hosted_verification_url]` URL in the `next_action` object to direct your customer to complete the verification process.\n\nIf you are sending custom emails and don’t want to use the Stripe hosted verification page, you can create a form on your site for your customers to relay these amounts to you and verify the bank account using [Stripe.js](https://docs.stripe.com/js/payment_intents/verify_microdeposits_for_payment).\n\n`stripe.verifyMicrodepositsForSetup(clientSecret, {   amounts: [32, 45], });`\n\nWhen the bank account is successfully verified, Stripe returns the [SetupIntent object](https://docs.stripe.com/api/setup_intents/object), with a `status` of `succeeded`, and sends a `setup_intent.succeeded` webhook event.\n\nVerification can fail for several reasons. The failure may happen synchronously as a direct error response, or asynchronously through a `setup_intent.payment_failed` webhook event (shown in the following examples).\n\n`{   \"error\": {     \"code\": \"payment_method_microdeposit_verification_amounts_mismatch\",     \"message\": \"The amounts provided do not match the amounts that were sent to the bank account. You have {attempts_remaining} verification attempts remaining.\",     \"type\": \"invalid_request_error\"   } }`\n\n| Error Code | Synchronous or asynchronous | Message | Status Change |\n| --- | --- | --- | --- |\n| `payment_method_microdeposit_failed` | Synchronously, or asynchronously through webhook event | Microdeposits failed. Please check the account, institution and transit numbers provided | `status` is `requires_payment_method`, and `last_setup_error` is set. |\n| `payment_method_microdeposit_verification_amounts_mismatch` | Synchronously | The amounts provided do not match the amounts that were sent to the bank account. You have {attempts\\_remaining} verification attempts remaining. | Unchanged |\n| `payment_method_microdeposit_verification_attempts_exceeded` | Synchronously, and asynchronously through webhook event | Exceeded number of allowed verification attempts | `status` is `requires_payment_method`, and `last_setup_error` is set. |\n| `payment_method_microdeposit_verification_timeout` | Asynchronously through webhook event | Microdeposit timeout. Customer hasn’t verified their bank account within the required 10 day period. | `status` is `requires_payment_method`, and `last_setup_error` is set. |\n\n[](#web-test-integration)\n\n### Receive micro-deposit verification email![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn order to receive the micro-deposit verification email in test mode after collecting the bank account details and accepting a mandate, provide an email in the `payment_method[billing_details][email]` field in the form of `{any_prefix}+test_email@{any_domain}` when confirming the payment method details.\n\n### Test account numbers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe provides several test account numbers you can use to make sure your integration for manually-entered bank accounts is ready for production. All test accounts that automatically succeed or fail the payment must be verified using the test micro-deposit amounts below before they can be completed.\n\n| Institution Number | Transit Number | Account Number | Scenario |\n| --- | --- | --- | --- |\n| `000` | `11000` | `000123456789` | Succeeds the payment immediately after micro-deposits are verified. |\n| `000` | `11000` | `900123456789` | Succeeds the payment with a three-minute delay after micro-deposits are verified. |\n| `000` | `11000` | `000222222227` | Fails the payment immediately after micro-deposits are verified. |\n| `000` | `11000` | `900222222227` | Fails the payment with a three-minute delay after micro-deposits are verified. |\n| `000` | `11000` | `000666666661` | Fails to send verification micro-deposits. |\n\nTo mimic successful or failed bank account verifications in test mode, use these meaningful amounts for micro-deposits:\n\n| Micro-deposit Values | Scenario |\n| --- | --- |\n| `32` and `45` | Successfully verifies the account. |\n| Any other number combinations | Fails account verification. |",
  "title": "Save details for future payments with pre-authorized debit in Canada | Stripe Documentation",
  "description": "Learn how to save payment method details for future Canadian pre-authorized debit payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/fpx/accept-a-payment",
  "markdown": "# Accept an FPX payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nFPX is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) payment method. Customers pay with FPX by redirecting from your website, sending you payment, then returning to your website where you get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support FPX payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency. If you have line items in different currencies, create separate Checkout Sessions for each currency.\n*   You can only use one-time line items (recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans are not supported).\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nUse this guide to learn how to enable FPX—it shows the differences between accepting a card payment and using FPX.\n\n### Enable FPX as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `fpx` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the `myr` currency\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'fpx'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `fpx`, all line items must have currency: myr       currency: 'myr',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n### Confirmation page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFPX requires showing your customer their transaction information after they’ve completed their payment. Follow the [custom success page](https://docs.stripe.com/payments/checkout/custom-success-page) guide to learn how to customize your success page.\n\nWhen customizing, you’ll need to retrieve the Charge object directly from the [PaymentIntent](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-latest_charge) object using the PaymentIntent ID from your Checkout Session and display the following information on your `success_url` page.\n\n| Information | Source of information |\n| --- | --- |\n| Transaction Date & Time | `created` from the `Charge` object. |\n| Amount | `amount` from the `Charge` object. |\n| Seller Order No. | `statement_descriptor` from the `Charge` object. |\n| FPX Transaction ID | `payment_method_details[fpx][transaction_id]` from the `Charge` object. |\n| Buyer Bank Name | `payment_method_details[fpx][bank]` from the `Charge` object |\n| Transaction Status | `status` from the `Charge` object |\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select FPX as the payment method and click the **Pay** button.\n\n[\n\n## Handle refunds and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#refunds-and-disputes)\n\nThe refund period for FPX is up to 60 days after the original payment.\n\nThere is no dispute process—customers authenticate with their bank.",
  "title": "Accept an FPX payment | Stripe Documentation",
  "description": "Learn how to accept FPX, a common payment method in Malaysia.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/bancontact/accept-a-payment",
  "markdown": "# Accept a Bancontact payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nBancontact is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. [Customers](https://docs.stripe.com/api/customers \"Customers\") pay with Bancontact by redirecting from your website, authorizing the payment, then returning to your website where you get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed.\n\n#### Note\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support Bancontact payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be expressed in Euro (currency code `eur`).\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nUse this guide to learn how to enable Bancontact—shows the differences between accepting a card payment and using Bancontact.\n\n### Enable Bancontact as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `bancontact` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the `eur` currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'bancontact'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `bancontact`, all line items must have currency: eur       currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nThere are no special test numbers required for Bancontact.\n\nWhen testing your Checkout integration, select Bancontact as the payment method and click the **Pay** button.\n\n[\n\n## Handle refunds and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#refunds-and-disputes)\n\nThe refund period for Bancontact is up to 180 days after the original payment.\n\nThere is no dispute process—customers authenticate with their bank.",
  "title": "Accept a Bancontact payment | Stripe Documentation",
  "description": "Learn how to accept Bancontact, a common payment method in Belgium.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/bancontact/set-up-payment",
  "markdown": "# Use Bancontact to set up future SEPA Direct Debit payments\n\nBancontact is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) each payment. With this integration, Stripe charges your customer 0.02 EUR through Bancontact to collect their bank details. After your customer authenticates the payment, Stripe refunds the payment and stores your customer’s [IBAN](https://en.wikipedia.org/wiki/International_Bank_Account_Number) in a [SEPA Direct Debit](https://docs.stripe.com/payments/sepa-debit) payment method. You can then use the SEPA Direct Debit [PaymentMethod](https://docs.stripe.com/api/payment_methods) to [accept payments](https://docs.stripe.com/payments/sepa-debit/accept-a-payment) or [set up a subscription](https://docs.stripe.com/billing/subscriptions/sepa-debit).\n\nYou can use [Checkout in setup mode](https://docs.stripe.com/payments/save-and-reuse?platform=checkout) to collect payment details and set up future SEPA Direct Debit payments using Bancontact.\n\n[](#create-retrieve-customer)\n\nTo set up future SEPA Direct Debit payments using Bancontact, you must attach the SEPA Direct Debit payment method to a [Customer](https://docs.stripe.com/api/customers \"Customers\").\n\nCreate a `Customer` object when your customer creates an account with your business. You can retrieve and use a customer’s stored payment method details later if you associate the ID of the `Customer` object with your own internal representation of the customer.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#setup-a-payment)\n\nThis guide builds on the foundational [set up future payments](https://docs.stripe.com/payments/save-and-reuse?platform=checkout) Checkout integration and describes how to enable Bancontact—it shows the differences between setting up future payments for cards and using Bancontact.\n\n### Enable Bancontact as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to add `bancontact` to the list of `payment_method_types`.\n\n[](#charge-sepa-pm)\n\nWhen you need to charge your customer again, create a new PaymentIntent. Find the ID of the SEPA Direct Debit payment method by [retrieving](https://docs.stripe.com/api/setup_intents/retrieve) the SetupIntent and [expanding](https://docs.stripe.com/api/expanding_objects) the `latest_attempt` field where you will find the `generated_sepa_debit` ID inside of `payment_method_details`.\n\n`curl -G https://api.stripe.com/v1/setup_intents/{{SETUP_INTENT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"expand[]\"=latest_attempt`\n\nCreate a PaymentIntent with the SEPA Direct Debit and Customer IDs.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"payment_method_types[]\"=sepa_debit \\  -d amount=1099 \\  -d currency=eur \\  -d customer=  {{CUSTOMER_ID}}   \\  -d payment_method={{SEPA_DEBIT_PAYMENT_METHOD_ID}} \\   -d confirm=true`\n\n[](#testing)\n\nWhen testing your Checkout integration, select Bancontact as the payment method and click the **Pay** button.",
  "title": "Use Bancontact to set up future SEPA Direct Debit payments | Stripe Documentation",
  "description": "Learn how to save bank details from a Bancontact payment and charge your customers later with SEPA Direct Debit.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/bancontact/save-during-payment",
  "markdown": "# Save bank details during a Bancontact payment\n\n## Learn how to save your customer's IBAN bank details from a Bancontact payment.\n\n#### Caution\n\nBancontact is a popular [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method in Belgium where customers are required to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. [Customers](https://docs.stripe.com/api/customers \"Customers\") pay with Bancontact by redirecting from your website, authorizing the payment, then returning to your website where you get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed.\n\nYou can use Bancontact to save your customer’s [IBAN](https://en.wikipedia.org/wiki/International_Bank_Account_Number) bank details into a [SEPA Direct Debit](https://docs.stripe.com/payments/sepa-debit) [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\"). You can then use the SEPA Direct Debit PaymentMethod to [accept payments](https://docs.stripe.com/payments/sepa-debit/accept-a-payment) or [set up a subscription](https://docs.stripe.com/billing/subscriptions/sepa-debit). This reduces friction for your customer as they don’t have to enter their IBAN again. You also receive their verified name and validated IBAN.\n\n#### Caution\n\nAccepting Bancontact payments consists of creating a [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) object to track a payment, collecting payment method details and mandate acknowledgement, and submitting the payment to Stripe for processing. Stripe uses the PaymentIntent to track and handle all the states of the payment until the payment completes. Use the ID of the SEPA Direct Debit [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") collected from your initial Bancontact PaymentIntent to create future payments.\n\n[](#web-set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-create-customer)\n\nCreate a [Customer](https://docs.stripe.com/api/customers \"Customers\") when they create an account with your business and associate it with your internal representation of their account. This enables you to retrieve and use their saved payment method details later.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#web-create-payment-intent)\n\nCreate a `PaymentIntent` on your server and specify the `amount` to collect, the `eur` currency, the customer ID, and off\\_session as an argument for [setup future usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage). If you have an existing [Payment Intents](https://docs.stripe.com/payments/payment-intents) integration, add `bancontact` to the list of [payment method types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types).\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=eur \\  -d \"payment_method_types[]\"=bancontact \\  -d customer={{CUSTOMER_ID}} \\   -d setup_future_usage=off_session`\n\n### Retrieve the client secret![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe PaymentIntent includes a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") that the client side uses to securely complete the payment process. You can use different approaches to pass the client secret to the client side.\n\nRetrieve the client secret from an endpoint on your server, using the browser’s `fetch` function. This approach is best if your client side is a single-page application, particularly one built with a modern frontend framework like React. Create the server endpoint that serves the client secret:\n\n`get '/secret' do   intent = # ... Create or retrieve the PaymentIntent   {client_secret: intent.client_secret}.to_json end`\n\nAnd then fetch the client secret with JavaScript on the client side:\n\n`(async () => {   const response = await fetch('/secret');   const {client_secret: clientSecret} = await response.json();   // Render the form using the clientSecret })();`\n\n[](#web-collect-payment-method-details)\n\nCreate a payment form on your client to collect the required billing details from the customer.\n\n​​To process SEPA Direct Debit payments, you must collect a mandate agreement from your customer. Display the following standard authorization text for your customer to implicitly sign the mandate.\n\nReplace _Rocket Rides_ with your company name.\n\nAuthorization text template\n\nBy providing your payment information and confirming this payment, you authorise (A)\n\nRocket Rides\n\nReplace this with your company name\n\nand Stripe, our payment service provider, to send instructions to your bank to debit your account and (B) your bank to debit your account in accordance with those instructions. As part of your rights, you are entitled to a refund from your bank under the terms and conditions of your agreement with your bank. A refund must be claimed within 8 weeks starting from the date on which your account was debited. Your rights are explained in a statement that you can obtain from your bank. You agree to receive notifications for future debits up to 2 days before they occur.\n\n​​Setting up a payment method or confirming a PaymentIntent creates the accepted mandate. As the customer has implicitly signed the mandate, you must communicate these terms in your form or through email.\n\n| Field | Value |\n| --- | --- |\n| `name` | The full name (first and last) of the customer. |\n| `email` | The customer’s email. |\n\n`<form id=\"payment-form\">   <div class=\"form-row\">     <label for=\"name\">       Name     </label>     <input id=\"name\" name=\"name\" required>   </div>    <div class=\"form-row\">     <label for=\"email\">       Email     </label>     <input id=\"email\" name=\"email\" required>   </div>    <button id=\"submit-button\">Pay with Bancontact</button>    <!-- Display mandate acceptance text. -->   <div id=\"mandate-acceptance\">     By providing your payment information and confirming this payment, you     authorise (A) Rocket Rides and Stripe, our payment service provider, to     send instructions to your bank to debit your account and (B) your bank to     debit your account in accordance with those instructions. As part of your     rights, you are entitled to a refund from your bank under the terms and     conditions of your agreement with your bank. A refund must be claimed     within 8 weeks starting from the date on which your account was debited.     Your rights are explained in a statement that you can obtain from your     bank. You agree to receive notifications for future debits up to 2 days     before they occur.   </div>   <!-- Used to display form errors. -->   <div id=\"error-message\" role=\"alert\"></div> </form>`\n\n[](#web-submit-payment)\n\nCreate a payment on the client side with the [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret) of the PaymentIntent. The client secret is different from your API keys that authenticate Stripe API requests. It should be handled carefully because it can complete the charge. Do not log it, embed it in URLs, or expose it to anyone but the customer.\n\nCall [stripe.confirmBancontactPayment](https://docs.stripe.com/js/payment_intents/confirm_bancontact_payment) to redirect your customer to Bancontact’s website or app to complete the payment. Include a [return\\_url](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-return_url) to redirect your customer after they complete the payment. You must also provide the customer’s full name and email in `billing_details`.\n\n`var stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`); var accountholderName = document.getElementById('name'); var accountholderEmail = document.getElementById('email');  // Redirects away from the client const {error} = await stripe.confirmBancontactPayment(   '{{PAYMENT_INTENT_CLIENT_SECRET}}',   {     payment_method: {       billing_details: {         name: accountholderName.value,         email: accountholderEmail.value,       },     },     return_url: 'https://example.com/checkout/complete',   } );  if (error) {   // Inform the customer that there was an error. }`\n\nWhen your customer submits a payment, Stripe redirects them to the `return_url` and includes the following URL query parameters. The return page can use them to get the status of the PaymentIntent so it can display the payment status to the customer.\n\nWhen you specify the `return_url`, you can also append your own query parameters for use on the return page.\n\n| Parameter | Description |\n| --- | --- |\n| `payment_intent` | The unique identifier for the `PaymentIntent`. |\n| `payment_intent_client_secret` | The [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent` object. |\n\nWhen the customer is redirected back to your site, you can use the `payment_intent_client_secret` to query for the PaymentIntent and display the transaction status to your customer.\n\n[](#web-charge-sepa-pm)\n\nWhen you need to charge your customer again, create a new PaymentIntent. Find the ID of the SEPA Direct Debit payment method by [retrieving](https://docs.stripe.com/api/payment_intents/retrieve) the previous PaymentIntent and [expanding](https://docs.stripe.com/api/expanding_objects) the `latest_charge` field where you will find the `generated_sepa_debit` ID inside of `payment_method_details`.\n\n`curl -G https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"expand[]\"=latest_charge`\n\nThe SEPA Direct Debit payment method ID is the `generated_sepa_debit` ID under [payment\\_method\\_details](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-ideal) in the response.\n\n`{   \"latest_charge\": {     \"payment_method_details\": {       \"bancontact\": {         \"bank_code\": \"VAPE\",         \"bank_name\": \"VAN DE PUT & CO\",         \"bics\": \"VAPEBE22\",         \"iban_last4\": \"7061\",         \"generated_sepa_debit\": \"pm_1GrddXGf98efjktuBIi3ag7aJQ\",         \"preferred_language\": \"en\",         \"verified_name\": \"Jenny Rosen\"       },       \"type\": \"bancontact\"     },   },   \"payment_method_options\": {     \"bancontact\": {}`\n\nCreate a PaymentIntent with the SEPA Direct Debit and Customer IDs.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"payment_method_types[]\"=sepa_debit \\  -d amount=1099 \\  -d currency=eur \\  -d customer=  {{CUSTOMER_ID}}   \\  -d payment_method={{SEPA_DEBIT_PAYMENT_METHOD_ID}} \\   -d confirm=true`\n\n[](#test-your-integration)\n\nSet `payment_method.billing_details.email` to one of the following values to test the PaymentIntent status transitions. You can include your own custom text at the beginning of the email address followed by an underscore. For example, `test_1_generatedSepaDebitIntentsFail@example.com` results in a SEPA Direct Debit PaymentMethod that always fails when used with a PaymentIntent.\n\n| Email Address | Description |\n| --- | --- |\n| `generatedSepaDebitIntentsSucceed@example.com` | The PaymentIntent status transitions from `processing` to `succeeded`. |\n| `generatedSepaDebitIntentsSucceedDelayed@example.com` | The PaymentIntent status transitions from `processing` to `succeeded` after three minutes. |\n| `generatedSepaDebitIntentsFail@example.com` | The PaymentIntent status transitions from `processing` to `requires_payment_method`. |\n| `generatedSepaDebitIntentsFailDelayed@example.com` | The PaymentIntent status transitions from `processing` to `requires_payment_method` after three minutes. |\n| `generatedSepaDebitIntentsSucceedDisputed@example.com` | The PaymentIntent status transitions from `processing` to `succeeded`, but a dispute is created immediately. |\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Accept a SEPA Direct Debit payment](https://docs.stripe.com/payments/sepa-debit/accept-a-payment)\n*   [Set up a subscription with SEPA Direct Debit in the EU](https://docs.stripe.com/billing/subscriptions/sepa-debit)",
  "title": "Save bank details during a Bancontact payment | Stripe Documentation",
  "description": "Learn how to save your customer's IBAN bank details from a Bancontact payment.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/paynow/accept-a-payment",
  "markdown": "# Accept a PayNow payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nPayNow is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) payment method. Customers pay with PayNow by scanning the QR code that they see during Checkout. Completing the payment redirects customers back to your website.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support PayNow payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency, and must be in `sgd`.\n*   You can only use one-time line items (PayNow Checkout Sessions don’t support recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans).\n\n[](#accept-a-payment)\n\n#### Note\n\nThis guide builds on the foundational [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) Checkout integration.\n\nThis guides you through enabling PayNow and shows the differences between accepting a card payment and using PayNow.\n\n### Enable PayNow as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `paynow` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the same currency\n\n`Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['paynow'],   # or you can take multiple payment methods with   # payment_method_types: ['card', 'paynow', ...]   line_items: [{     price_data: {       currency: 'sgd',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })`\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select PayNow as the payment method and click the **Generate QR code** button, which creates and renders a QR code.\n\nIn test mode, scan the QR code with a QR code scanning application on your mobile device. The QR code payload contains a URL which brings you to a Stripe-hosted PayNow test payment page where you can either authorize or fail the test payment.\n\nIn live mode, you will be able to scan the QR code using a preferred banking app or payment app that supports PayNow.",
  "title": "Accept a PayNow payment | Stripe Documentation",
  "description": "Learn how to accept payments with PayNow, a funds transfer service popular in Singapore.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/eps/accept-a-payment",
  "markdown": "# Accept an EPS payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nEPS is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. [Customers](https://docs.stripe.com/api/customers \"Customers\") pay with EPS by redirecting from your website, authorizing the payment, then returning to your website where you get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed.\n\n#### Note\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support EPS payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency. If you have line items in different currencies, create separate Checkout Sessions for each currency.\n*   You can only use one-time line items (recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans are not supported).\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nUse this guide to enable EPS—it shows the differences between accepting a card payment and using EPS.\n\n### Enable EPS as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `eps` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the `eur` currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'eps'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `eps`, all line items must have currency: eur       currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select EPS as the payment method and click the **Pay** button.\n\n[\n\n## Handle refunds and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#refunds-and-disputes)\n\nThe refund period for EPS is up to 180 days after the original payment.\n\nThere is no dispute process—customers authenticate with their bank.",
  "title": "Accept an EPS payment | Stripe Documentation",
  "description": "Learn how to accept EPS, a common payment method in Austria.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/twint/accept-a-payment",
  "markdown": "# TWINT payments | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nTWINT is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) payment method used in Switzerland. It allows customers to [authenticate and approve](https://docs.stripe.com/payments/payment-methods#customer-actions) payments using an approved TWINT mobile app.\n\nYou get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support TWINT:\n\n*   You must express [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items in Swiss Franc (currency code `chf`).\n\n[](#accept-a-twint-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nEnable TWINT by making the following updates to your card payment integration.\n\nWhen creating a [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you must:\n\n*   Add `twint` to the list of `payment_method_types`.\n*   Make sure all `line_items` use the `chf` currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'twint'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `twint`, all line items must have currency: chf       currency: 'chf',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select ‘TWINT’ as the payment method and click **Pay**.",
  "title": "TWINT payments | Stripe Documentation",
  "description": "Learn how to accept TWINT, a popular payment method in Switzerland.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/giropay/accept-a-payment",
  "markdown": "# Accept a giropay payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\ngiropay is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. [Customers](https://docs.stripe.com/api/customers \"Customers\") pay with giropay by redirecting from your website, authorizing the payment, then returning to your website where you get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed. Because giropay is a single use payment method, it isn’t compatible with [SetupIntents](https://docs.stripe.com/api/setup_intents).\n\n#### Note\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support giropay payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency. If you have line items in different currencies, create separate Checkout Sessions for each currency.\n*   You can only use one-time line items (recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans are not supported).\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nUse this guide to learn how to enable giropay—it shows the differences between accepting a card payment and using giropay.\n\n### Enable giropay as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `giropay` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the `eur` currency\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'giropay'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `giropay`, all line items must have currency: eur       currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select giropay as the payment method and click the **Pay** button.\n\n[\n\n## Handle refunds and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#refunds-and-disputes)\n\nThe refund period for giropay is up to 180 days after the original payment.\n\nThere is no dispute process—customers authenticate with their bank.",
  "title": "Accept a giropay payment | Stripe Documentation",
  "description": "Learn how to accept giropay, a common payment method in Germany.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/p24/accept-a-payment",
  "markdown": "# Accept a Przelewy24 payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\n[Przelewy24](https://www.przelewy24.pl/) is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. [Customers](https://docs.stripe.com/api/customers \"Customers\") pay with Przelewy24 by redirecting from your website, authorizing the payment, then returning to your website where you get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support Przelewy24 payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency. If you have line items in different currencies, create separate Checkout Sessions for each currency.\n*   You can only use one-time line items (recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans are not supported).\n\n[](#accept-a-payment)\n\n#### Note\n\nThis guide builds on the foundational [accept a payment](https://docs.stripe.com/payments/accept-a-payment?ui=stripe-hosted) Checkout integration.\n\nUse this guide to learn how to enable Przelewy24—it shows the differences between accepting a card payment and using Przelewy24.\n\n### Enable Przelewy24 as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `p24` to the list of `payment_method_types`.\n2.  Make sure all your `line_items` use the same currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'p24'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `p24`, all line items must have currency: eur, pln       currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select Przelewy24 as the payment method and click the **Pay** button.\n\n[\n\n## Handle refunds and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#refunds-and-disputes)\n\nThe refund period for Przelewy24 is up to 180 days after the original payment.\n\nThere is no dispute process—customers authenticate with their bank.",
  "title": "Accept a Przelewy24 payment | Stripe Documentation",
  "description": "Learn how to accept Przelewy24 (P24), the most popular payment method in Poland.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/afterpay-clearpay/accept-a-payment",
  "markdown": "# Accept an Afterpay or Clearpay payment\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nAfterpay is a [single use](https://docs.stripe.com/payments/payment-methods#usage), [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method that requires customers to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. Customers are redirected to the Afterpay site, where they agree to the terms of an installment plan. When the customer accepts the terms, Afterpay guarantees that the funds are available to the customer and transfers the funds to your Stripe account. The customer repays Afterpay directly over time.\n\n#### Note\n\nBefore you start the integration, make sure your account is eligible for Afterpay by navigating to your [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods).\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support Afterpay payments:\n\n*   You can only use one-time line items (recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans are not supported).\n*   You must express [Prices](https://docs.stripe.com/api/prices \"Prices\") in your domestic currency.\n*   Shipping addresses must be provided.\n\n[](#accept-a-payment)\n\n#### Note\n\nThis guide builds on the foundational [accept a payment](https://docs.stripe.com/payments/accept-a-payment?ui=stripe-hosted) Checkout integration.\n\nUse this guide to learn how to enable Afterpay—it shows the differences between accepting a card payment and using Afterpay.\n\n### Enable Afterpay as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `afterpay_clearpay` to the list of `payment_method_types`.\n2.  Make sure all your `line_items` use your domestic currency.\n3.  Collect shipping addresses by adding your country to `shipping_address_collection[allowed_countries]`. If you don’t collect shipping addresses with Checkout, provide the shipping address using `payment_intent_data[shipping]`.\n\n`Stripe::Checkout::Session.create({       mode: 'payment',       payment_method_types: ['card'],       payment_method_types: ['card', 'afterpay_clearpay'],       line_items: [{         price_data: {           currency: 'usd',           product_data: {             name: 'T-shirt',           },           # Make sure the total amount fits within Afterpay transaction amount limits:           # [https://stripe.com/docs/payments/afterpay-clearpay#collection-schedule](https://stripe.com/docs/payments/afterpay-clearpay#collection-schedule)           unit_amount: 2000,         },         quantity: 1,       }],       shipping_address_collection: {         # Specify which shipping countries Checkout should provide as options for shipping locations         allowed_countries: ['AU', 'CA', 'GB', 'NZ', 'US'],       },       # If you already have the shipping address, provide it in payment_intent_data:       # payment_intent_data: {       #   shipping: {       #     name: 'Jenny Rosen',       #     address: {       #       line1: '1234 Main Street',       #       city: 'San Francisco',       #       state: 'CA',       #       country: 'US',       #       postal_code: '94111',       #     },       #   },       # },       success_url: '[https://example.com/success](https://example.com/success)',       cancel_url: '[https://example.com/cancel](https://example.com/cancel)',     })`\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Use a method such as webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks) to handle order fulfillment, instead of relying on your customer to return to the payment status page.\n\nThe following events are sent when the payment status changes:\n\n| Event Name | Description | Next steps |\n| --- | --- | --- |\n| [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) | The customer successfully authorized the payment by submitting the Checkout form. | Wait for the payment to succeed or fail. |\n| [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded) | The customer’s payment succeeded. The `PaymentIntent` transitions to `succeeded`. | Fulfill the goods or services that the customer purchased. |\n| [payment\\_intent.payment\\_failed](https://docs.stripe.com/api/events/types#event_types-payment_intent.payment_failed) | The customer’s payment was declined, or failed for some other reason. The `PaymentIntent` returns to the `requires_payment_method` status. | Email the customer to request that they place a new order. |\n\nLearn more about [fulfilling orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select Afterpay as the payment method and click the **Pay** button.\n\nTest your Afterpay integration with your test API keys by viewing the redirect page. You can test the successful payment case by authenticating the payment on the redirect page. The PaymentIntent will transition from `requires_action` to `succeeded`.\n\nTo test the case where the user fails to authenticate, use your test API keys and view the redirect page. On the redirect page, click **Fail test payment**. The PaymentIntent will transition from `requires_action` to `requires_payment_method`.\n\nFor [manual capture](#manual-capture) PaymentIntents in testmode, the uncaptured PaymentIntent will auto-expire 10 minutes after successful authorization.\n\n[](#failed-payments)\n\nAfterpay takes into account multiple factors when deciding to accept or decline a transaction (for example, length of time buyer has been using Afterpay, outstanding amount customer has to repay, value of the current order).\n\nYou should always present additional payment options such as `card` in your checkout flow, as Afterpay payments have a higher rate of decline than many payment methods. In these cases, the [PaymentMethod](https://docs.stripe.com/api/payment_methods/object) is detached and the [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) object’s status automatically transitions to `requires_payment_method`.\n\nFor an Afterpay [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) with a status of `requires_action`, customers need to complete the payment within 3 hours after you redirect them to the Afterpay site (this doesn’t apply to declined payments). If they take no action within 3 hours, the [PaymentMethod](https://docs.stripe.com/api/payment_methods/object) detaches and the object status for the [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) automatically transitions to `requires_payment_method`.\n\nIn these cases, inform your customer to try again with a different payment option presented in your checkout flow.\n\n[](#error-codes)\n\nThese are the common error codes and corresponding recommended actions:\n\n| Error Code | Recommended Action |\n| --- | --- |\n| `invalid_amount_too_small` | Enter an amount within Afterpay’s [default transactions limits](https://docs.stripe.com/payments/afterpay-clearpay#collection-schedule) for the country. |\n| `invalid_amount_too_large` | Enter an amount within Afterpay’s [default transactions limits](https://docs.stripe.com/payments/afterpay-clearpay#collection-schedule) for the country. |\n| `payment_intent_invalid_currency` | Enter the appropriate currency. Afterpay only supports [domestic transactions](https://docs.stripe.com/payments/afterpay-clearpay#collection-schedule). |\n| `missing_required_parameter` | Check the error message for more information about the required parameter. |\n| `nonexistent_country` | Enter a valid [two-letter ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) for the `country` property in the shipping and billing details. |\n| `payment_intent_redirect_confirmation_without_return_url` | Provide a `return_url` when confirming a PaymentIntent with Afterpay. |",
  "title": "Accept an Afterpay or Clearpay payment | Stripe Documentation",
  "description": "Learn how to accept Afterpay (also known as Clearpay in the UK), a payment method in the US, CA, UK, AU, and NZ.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/affirm/accept-a-payment",
  "markdown": "# Accept an Affirm payment | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to accept Affirm, a buy now and pay later payment method.\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nAffirm is a [single use](https://docs.stripe.com/payments/payment-methods#usage), [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method that requires customers to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. Customers are redirected to the Affirm site, where they agree to the terms of an installment plan. When the customer accepts the terms, funds are guaranteed and transferred to your Stripe account. The customer repays Affirm directly over time.\n\n#### Note\n\nBefore you start the integration, make sure your account is eligible for Affirm by navigating to your [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods).\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support Affirm payments:\n\n*   You can only use one-time line items. Affirm doesn’t support recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans.\n*   Express all [Prices](https://docs.stripe.com/api/prices \"Prices\") in your domestic currency.\n\n[](#accept-a-payment)\n\n#### Note\n\nThis guide builds on the foundational [accept a payment](https://docs.stripe.com/payments/accept-a-payment?ui=stripe-hosted) Checkout integration.\n\nUse this guide to learn how to enable Affirm—it shows the differences between accepting a card payment and using Affirm.\n\n### Enable Affirm as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `affirm` to the list of `payment_method_types`.\n2.  Make sure all your `line_items` use your domestic currency.\n3.  We recommend collecting shipping addresses by adding your country to `shipping_address_collection[allowed_countries]`. If you don’t want to collect shipping addresses with Checkout, you can also provide the shipping address using `payment_intent_data[shipping]`. Doing so helps with loan acceptance rates.\n\n`Stripe::Checkout::Session.create({       mode: 'payment',       payment_method_types: ['card'],       payment_method_types: ['card', 'affirm'],       line_items: [{         price_data: {           currency: 'usd',           product_data: {             name: 'T-shirt',           },           # Make sure the total amount fits within Affirm's transaction amount limits           unit_amount: 5000,         },         quantity: 1,       }],       shipping_address_collection: {         # Shipping address is optional but recommended to pass in         # Specify which shipping countries Checkout should provide as options for shipping locations         allowed_countries: ['CA', 'US'],       },       # If you already have the shipping address, provide it in payment_intent_data:       # payment_intent_data: {       #   shipping: {       #     name: 'Jenny Rosen',       #     address: {       #       line1: '1234 Main Street',       #       city: 'San Francisco',       #       state: 'CA',       #       country: 'US',       #       postal_code: '94111',       #     },       #   },       # },       success_url: '[https://example.com/success](https://example.com/success)',       cancel_url: '[https://example.com/cancel](https://example.com/cancel)',     })`\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Use a method such as webhooks](https://docs.stripe.com/payments/payment-intents/verifying-status#webhooks) to handle order fulfillment, instead of relying on your customer to return to the payment status page.\n\nThe following events are sent when the payment status changes:\n\n| Event Name | Description | Next steps |\n| --- | --- | --- |\n| [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) | The customer successfully authorized the payment by submitting the Checkout form. | Wait for the payment to succeed or fail. |\n| [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded) | The customer’s payment succeeded. The `PaymentIntent` transitions to `succeeded`. | Fulfill the goods or services that the customer purchased. |\n| [payment\\_intent.payment\\_failed](https://docs.stripe.com/api/events/types#event_types-payment_intent.payment_failed) | The customer’s payment was declined, or failed for some other reason. The `PaymentIntent` returns to the `requires_payment_method` status. | Email the customer to request that they place a new order. |\n\nLearn more about [fulfilling orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select Affirm as the payment method and click the **Pay** button.\n\nTest your Affirm integration with your test API keys by viewing the redirect page. You can test the successful payment case by authenticating the payment on the redirect page. The PaymentIntent transitions from `requires_action` to `succeeded`.\n\nTo test the case where the user fails to authenticate, use your test API keys and view the redirect page. On the redirect page, close the Affirm modal window and verify that payment failed. The PaymentIntent transitions from `requires_action` to `requires_payment_method`.\n\nFor [manual capture](#manual-capture) PaymentIntents in testmode, the uncaptured PaymentIntent auto-expires 10 minutes after successful authorization.\n\n[](#failed-payments)\n\nAffirm takes into account multiple factors when deciding to accept or decline a transaction (for example, the length of time buyer has used Affirm, the outstanding amount the customer has to repay, and the value of the current order).\n\nAlways present additional payment options such as `card` in your checkout flow, as Affirm payments have a higher rate of decline than many payment methods. In these cases, the [PaymentMethod](https://docs.stripe.com/api/payment_methods/object) is detached and the [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) object’s status automatically transitions to `requires_payment_method`.\n\nOther than a payment being declined, for an Affirm [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) with a status of `requires_action`, customers need to complete the payment within 12 hours after you redirect them to the Affirm site. If the customer takes no action within 12 hours, the [PaymentMethod](https://docs.stripe.com/api/payment_methods/object) is detached and the [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) object’s status automatically transitions to `requires_payment_method`.\n\nIn these cases, inform your customer to try again with a different payment option presented in your checkout flow.\n\n[](#error-codes)\n\nThese are the common error codes and corresponding recommended actions:\n\n| Error code | Recommended action |\n| --- | --- |\n| `invalid_amount_too_small` | Enter an amount within Affirm’s [default transaction limits](https://docs.stripe.com/payments/affirm), for the country. |\n| `invalid_amount_too_large` | Enter an amount within Affirm’s [default transaction limits](https://docs.stripe.com/payments/affirm), for the country. |\n| `missing_required_parameter` | Check the error message for more information on the required parameter. |\n| `nonexistent_country` | Enter a valid [two-letter ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) for the `country` property in the shipping and billing details. |\n| `payment_intent_invalid_currency` | Enter the appropriate currency. Affirm only supports payments in your local currency. |\n| `payment_intent_redirect_confirmation_without_return_url` | Provide a `return_url` when confirming a PaymentIntent with Affirm. |\n| `payment_method_invalid_parameter` | Check the error message for more information on the parameter. |",
  "title": "Accept an Affirm payment | Stripe Documentation",
  "description": "Learn how to accept Affirm, a buy now and pay later payment method.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/afterpay-clearpay/site-messaging",
  "markdown": "# Display Afterpay or Clearpay messaging\n\n## Display Afterpay or Clearpay messagingDeprecated\n\n## Inform customers that you accept payments with Afterpay (also known as Clearpay in the UK).\n\n#### Caution\n\nThe content in this topic refers to a Legacy feature. We recommend that you use the [Payment Method Messaging Element](https://docs.stripe.com/payments/payment-method-messaging) to dynamically show your customers relevant buy now, pay later payment options for a given purchase. Stripe continues to maintain continuity for the `afterpayClearpayMessage` Element, but has halted new feature development.\n\nLet your customers know you accept payments with Afterpay by including the Afterpay messaging Element on your site. We suggest adding the messaging Element to your product, cart, and payment pages. The [afterpayClearpayMessage](https://docs.stripe.com/js/elements_object/create_element?type=afterpayClearpayMessage) Element takes care of:\n\n*   Calculating and displaying the installments amount\n*   Displaying the Afterpay information modal\n*   Localizing text and currencies\n\nThe Making of Prince of Persia: Journals 1985-1993\n\nJordan Mechner\n\n## Include the Element![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse Stripe Elements to include the [afterpayClearpayMessage](https://docs.stripe.com/js/elements_object/create_element?type=afterpayClearpayMessage) Element on your site.\n\nIf you haven’t already, include the Stripe.js script on your page by adding it to the `head` of your HTML file:\n\nCreate a placeholder element on your page where you want to mount the messaging Element:\n\n`<div id=\"afterpay-clearpay-message\"></div>`\n\nOn your product, cart, and payment pages, include the following code to create an instance of Stripe.js and mount the messaging Element:\n\n`// Set your publishable key. Remember to change this to your live publishable key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const elements = stripe.elements();  const options = {   amount: 1000, // $10.00 USD   currency: 'USD' };  const afterpayClearpayMessageElement =   elements.create('afterpayClearpayMessage', options);  afterpayClearpayMessageElement.mount('#afterpay-clearpay-message');`\n\n## Customize the message![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are many options available to customize the appearance and contents of the messaging Element. See the [API reference](https://docs.stripe.com/js/elements_object/create_element?type=afterpayClearpayMessage) for the full list of options.\n\n#### Badge logo![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSet `logoType` to `'badge'` and use the `badgeTheme` option to choose between the following styles:\n\n| black-on-mint | black-on-white | mint-on-black | white-on-black |\n| --- | --- | --- | --- |\n|     |     |     |     |\n\n#### Lockup logo![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSet `logoType` to `'lockup'` and use the `lockupTheme` option to choose between the following styles:\n\n#### Note\n\nClearpay branding is displayed automatically based on the `locale` option. See [Locale and currency](#locale-and-currency) for details.\n\n### Style with CSS![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn addition to the configuration options, use CSS to style the messaging to better fit the look and feel of your site. You can customize the `font-family`, `font-size`, and `color` of the messaging:\n\nCSS\n\n`.AfterpayMessage {   font-family: monospace;   font-size: 14px;   color: blue; }`\n\nYou can also control the size of the logo by setting its `width` and `height`:\n\nCSS\n\n`.AfterpayMessage-logoSvg {   width: 80px;   height: auto; }`\n\n## Handle ineligible items![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can’t use Afterpay for certain [prohibited business categories](https://docs.stripe.com/payments/afterpay-clearpay#prohibited-business-categories). If you sell items in these categories, you can still display the messaging Element to clearly indicate Afterpay isn’t available.\n\nUse the `isEligible` or `isCartEligible` options to indicate that the current product or cart isn’t eligible:\n\n|     |     |\n| --- | --- |\n| isEligible: false |     |\n| isCartEligible: false |     |\n\nAfterpay also has [default transactions limits](https://docs.stripe.com/payments/afterpay-clearpay#collection-schedule) for each country. When the provided `amount` exceeds these limits, the Element automatically displays ineligible price range messaging. You can customize this message by hiding the lower or upper limit with `showLowerLimit` and `showUpperLimit`.\n\n|     |     |\n| --- | --- |\n| (default) |     |\n| showLowerLimit: false |     |\n| showUpperLimit: false |     |\n\n## Locale and currency![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfterpay and clearpay support the following locales and currencies:\n\nSupported locales: `en-US`, `en-CA`, `en-AU`, `en-NZ`, `en-GB`\n\nSupported currencies: `USD`, `CAD`, `AUD`, `NZD`, `GBP`\n\nAfterpay’s messaging always the appropriate number of installments a user can pay based on their locale and country. For more information, see [payment collection](https://docs.stripe.com/payments/afterpay-clearpay#collection-schedule).\n\nSet the locale of your message by passing the `locale` option into the `options` parameter of the [elements group](https://docs.stripe.com/js/elements_object/create) used to create the `afterpayClearpayMessage` Element. You can then define your `currency` by passing it to the [element.create](https://docs.stripe.com/js/elements_object/create_element?type=afterpayClearpayMessage) options directly.\n\nJavaScript\n\n`const elements = stripe.elements({   locale: 'en-GB' });  const options = {   amount: 1000, // £10.00   currency: 'GBP' };  const afterpayClearpayMessageElement =   elements.create('afterpayClearpayMessage', options);  afterpayClearpayMessageElement.mount('#afterpay-clearpay-message');`",
  "title": "Display Afterpay or Clearpay messaging | Stripe Documentation",
  "description": "Inform customers that you accept payments with Afterpay (also known as Clearpay in the UK).",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/affirm/site-messaging",
  "markdown": "# Display Affirm messaging | Stripe DocumentationThe Stripe Docs logo\n\n## Display Affirm messagingDeprecated\n\n## Increase conversion by informing customers that you offer Affirm ahead of checkout.\n\n#### Caution\n\nThe content in this topic refers to a Legacy feature. We recommend that you use the [Payment Method Messaging Element](https://docs.stripe.com/payments/payment-method-messaging) to dynamically show your customers relevant buy now, pay later payment options for a given purchase. Stripe continues to maintain continuity for the `affirmMessage` Element, but has halted new feature development.\n\nLet your customers know you accept payments with Affirm by including the Affirm messaging Element on your site. We suggest adding the messaging Element to your product, cart, and payment pages. The Affirm messaging Element takes care of:\n\n*   Calculating and displaying the installments amount\n*   Displaying the Affirm information modal\n\nThe Making of Prince of Persia: Journals 1985-1993\n\nJordan Mechner\n\n## Include the Element![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Caution\n\nAffirm’s minimum transaction amount is 50 USD or 50 CAD. The promotional message isn’t rendered if the amount parameter is set to a number less than 50 USD or 50 CAD.\n\nUse Stripe Elements to include the [affirmMessage](https://docs.stripe.com/js/elements_object/create_element?type=affirmMessage) Element on your site.\n\nIf you haven’t already, include the Stripe.js script on your page by adding it to the `head` of your HTML file:\n\nCreate a placeholder element on your page where you want to mount the messaging Element:\n\n`<div id=\"affirm-message\"></div>`\n\nOn your product, cart, and payment pages, include the following code to create an instance of Stripe.js and mount the messaging Element:\n\n`// Set your publishable key. Remember to change this to your live publishable key in production! // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const elements = stripe.elements();  const options = {   amount: 5000, // $50.00 USD   currency: 'USD' };  const affirmMessageElement =   elements.create('affirmMessage', options);  affirmMessageElement.mount('#affirm-message');`\n\n## Customize the message![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are many options available to customize the appearance and contents of the messaging Element. See the [API reference](https://docs.stripe.com/js/elements_object/create_element?type=affirmMessage) for the full list of options.\n\n### Logo color![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the `logoColor` option to choose between the following styles:\n\n### Style with CSS![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAdditional configuration options allow you to use CSS to style the messaging to better fit the look and feel of your site. You can customize the `fontColor`, `fontSize`, and `textAlign` of the messaging:\n\nCode Example\n\n`const options = {   amount: 5000,   currency: 'USD',   fontColor: '#5B63FF',   logoColor: 'black',   fontSize: '16px',   textAlign: 'center', };  const affirmMessageElement = elements.create('affirmMessage', options);`",
  "title": "Display Affirm messaging | Stripe Documentation",
  "description": "Increase conversion by informing customers that you offer Affirm ahead of checkout.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/klarna/accept-a-payment",
  "markdown": "# Accept a Klarna payment | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to accept Klarna, a global buy now, pay later payment method.\n\n#### Beta\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nKlarna is a [single use](https://docs.stripe.com/payments/payment-methods#usage), [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method that requires customers to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. Customers are redirected to a Klarna page, where they select among multiple payment options (immediate full payment, payment in installments, or deferred payment). When the customer accepts the terms, Klarna guarantees that the funds are available to the customer and transfers the funds to your Stripe account. The customer repays Klarna according to their selected payment option.\n\n#### Note\n\nBefore you start the integration, make sure your account is eligible for Klarna by navigating to your [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods).\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support Klarna payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency. If you have line items in different currencies, create separate Checkout Sessions for each currency.\n*   You can only use one-time line items (recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans are not supported).\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nUse this guide to learn how to enable Klarna—it shows the differences between accepting a card payment and using Klarna.\n\n### Enable Klarna as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `klarna` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the same currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'klarna'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `klarna`, all line items must have currency: eur, dkk, gbp, nok, sek, usd, czk, ron, aud, nzd, cad, pln, chf       currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select Klarna as the payment method and click the **Pay** button. In test mode, you can then simulate different outcomes within Klarna’s redirect.\n\nBelow, we have specially selected test data for the currently supported customer countries. In test mode, Klarna approves or denies a transaction based on the supplied email address.\n\n|     | Approved | Denied |\n| --- | --- | --- |\n| Date of Birth | 10-07-1970 | 03-05-1994 |\n| First Name | Test | John |\n| Last Name | Person-au | snow |\n| Street | Wharf St | Silverwater Rd |\n| House number | 4   | 1-5 |\n| Postal Code | 4877 | 2128 |\n| City | Port Douglas | Silverwater |\n| Region | QLD | NSW |\n| Phone | +61473752244 | +61473763254 |\n| Email | customer@email.au | customer+denied@email.au |\n\nFor production testing, you can use an amount of `3500` in your local currency to test all Klarna payment options besides Financing. For example, if you want to test “Pay in 3” in Italy, you can use a transaction of 35.00 EUR.\n\n### Two-step authentication![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAny six digit number is a valid two-step authentication code. Use `999999` for authentication to fail.\n\n### Repayment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInside the Klarna flow, you can use the following test values to try various repayment types:\n\n| Type | Value |\n| --- | --- |\n| Direct Debit | DE11520513735120710131 |\n| Bank transfer | Demo Bank |\n| Credit Card | *   Number: 4111 1111 1111 1111<br>*   CVV: 123<br>*   Expiration: any valid date in the future |",
  "title": "Accept a Klarna payment | Stripe Documentation",
  "description": "Learn how to accept Klarna, a global buy now, pay later payment method.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/klarna/disputes",
  "markdown": "# Respond to disputes | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to respond to Klarna disputes using the Dashboard or API.\n\nYou can counter wrongful chargeback disputes in the Stripe Dashboard or with the API. You must [submit evidence](https://docs.stripe.com/payments/klarna/disputes#evidence-submission) to counter chargeback disputes.\n\n### Dispute types![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAlmost all disputes begin as inquiry disputes, except for fraudulent transaction disputes, which escalate immediately to chargeback disputes. You must contact your customer directly and attempt to resolve the inquiry dispute within 21 days. During this period, you can’t submit evidence to Klarna in the Stripe Dashboard or with the API. You can close the inquiry, accepting the customer’s dispute, by issuing a refund equal to the amount the customer is disputing. Confirm this amount is correct with the customer before issuing the refund. You aren’t charged a dispute fee for transactions refunded during the inquiry stage.\n\nIf you fail to resolve the dispute within this 21 day time frame, the inquiry dispute automatically becomes a chargeback dispute. Stripe withholds the disputed funds and the associated [dispute fee](https://stripe.com/pricing/local-payment-methods#klarna) from your account for chargeback disputes.\n\nFor chargeback disputes, you can counter the dispute by submitting one single round of evidence in the Stripe Dashboard or with the API. You have 12 days to submit this evidence from the creation date of the chargeback dispute. If you counter the dispute, Klarna evaluates your evidence and decides the final outcome. If you win the dispute, Stripe releases the withheld funds to your account. If you lose the dispute, Stripe debits the withheld funds, including the [dispute fee](https://stripe.com/pricing/local-payment-methods#klarna). Klarna then returns the disputed amount to the customer.\n\n### Funds flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n**You resolve the inquiry dispute without chargeback escalation**\n\nStripe doesn’t withhold funds for resolved inquiry disputes, and we don’t apply any dispute fees.\n\n**You win the chargeback dispute after escalation:**\n\nWhen a chargeback dispute is created, Stripe withholds the disputed funds, including the dispute fee, until Klarna informs us about the dispute outcome. If you win the dispute, we immediately release the funds to your account, and don’t charge a dispute fee.\n\n**You lose the chargeback dispute after escalation:**\n\nWhen a chargeback dispute is created, Stripe withholds the funds, including the dispute fee, until Klarna informs us about the dispute outcome. If you lose the dispute, we release the funds to Klarna and charge the [dispute fee](https://stripe.com/pricing/local-payment-methods#klarna).\n\n### Email-based disputes versus Dashboard and API disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPrior to November 15 2023, Stripe only supported disputes for Klarna through emails directly from Klarna to you. Now, Klarna disputes are managed in the Stripe Dashboard and with the API. This table highlights key differences between the old email-based disputes process and the new Dashboard and API process:\n\n| Email disputes | Dashboard and API disputes |\n| --- | --- |\n| You don’t receive notifications from Klarna and Stripe for inquiry disputes. | Stripe notifies you in the Dashboard, API, and by email when an inquiry is opened. |\n| You can submit multiple rounds of evidence for a chargeback dispute. | You can only submit a single round of structured evidence for a chargeback dispute. |\n| You have 14 days to submit counter evidence from the creation date of the chargeback dispute. | You have 12 days to submit counter evidence from the creation date of the chargeback dispute. |\n| Dispute lifecycle management must be built by you on top of the emails you receive from Klarna. | You can manage the entire dispute life cycle and track the status in a single place using the Dashboard or API. |\n| Stripe doesn’t withhold funds when Klarna creates a chargeback dispute. | Stripe withholds the disputed funds when Klarna creates a chargeback dispute. |\n\nWhen an inquiry dispute starts off as an email dispute, it persists as an email dispute, even after onboarding to use the Dashboard or API for new disputes. If you lose an email dispute, it displays as lost in the Dashboard, you receive a webhook, and Stripe applies the [dispute fee](https://stripe.com/pricing/local-payment-methods#klarna).\n\n## Evidence submission![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo submit evidence against a chargeback dispute, use either the Dashboard or API:\n\n## Submit evidence![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Navigate to the [Disputes Dashboard](https://dashboard.stripe.com/disputes), and click the **Needs Response** tab.\n2.  Click the disputed payment. If you want to counter the dispute, click **Counter dispute**.\n3.  Select the reason why you should win the dispute, and click **Next**.\n4.  Enter and attach all the applicable supporting evidence. The `recommended` label indicates the best documents for the type of dispute.\n5.  After entering all the evidence, verify the information is correct by selecting the checkbox.\n6.  Click **Submit Evidence**.\n\nFor additional guidance on how to submit evidence, see [Responding to disputes](https://docs.stripe.com/disputes/responding).\n\nIf you fail to submit evidence, Klarna will rule the dispute in favor of the customer.\n\n## Guidelines![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFollow these guidelines to submit the most relevant evidence for both Dashboard and API disputes.\n\n| Stripe dispute reason | Guidelines |\n| --- | --- |\n| Product not received | *   Attach all the shipping details, such as the tracking number, carrier, shipped date, and customer communication. |\n| Credit not processed | *   If you receive the returned product, attach the date when the customer initiated the return and any other information related to the return.<br>*   If the customer confirms that the dispute is for a partial order, share the customer communication and the return order amount.<br>*   If the return hasn’t been received, share when the customer initiated the return and note that the return hasn’t yet been received.<br>*   If the customer didn’t communicate or failed to reply to your request, document in the evidence when your team attempted to contact the customer, the number of attempts made, and the lack of response received.<br>*   If you fully or partially refunded the payment prior to it becoming a chargeback dispute, attach the refund details. |\n| Fraudulent | *   Share the shipping policy as an attachment or link to your shipping policy. |\n| General | *   If the customer confirms that the price is incorrect, attach all the supporting documents against the claim, such as order details.<br>*   If you fully or partially refunded the payment prior to it becoming a chargeback dispute, attach the refund details. |\n\n[](#create-test-disputes)\n\nYou can simulate dispute creation in test mode by creating a transaction in test mode using the following email addresses and phone numbers in the given Klarna checkout region. A dispute automatically opens on the transaction. You can submit evidence on the dispute, but you can’t simulate the final dispute outcome in test mode.\n\nBelow, we have specially selected test data for the currently supported customer countries.\n\n| Stripe dispute reason | Klarna dispute reason | Email | Phone number |\n| --- | --- | --- | --- |\n| Credit not processed | Return | `customer+disputed-return@email.au` | `+61491574118` |\n| Product not received | Goods not received | `customer+disputed-goods_not_received@email.au` | `+61491574632` |\n| Duplicate | Already paid | `customer+disputed-already_paid@email.au` | `+61491575254` |\n| Product unacceptable | Faulty goods | `customer+disputed-faulty_goods@email.au` | `+61491575789` |\n| General | Incorrect invoice | `customer+disputed-incorrect_invoice@email.au` | `+61491575789` |\n| General | High risk order | `customer+disputed-high_risk_order@email.au` | `+61491576801` |\n| Fraudulent | Unauthorized purchase | `customer+disputed-unauthorized_purchase@email.au` | `+61491577426` |\n\n## Dispute API![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA [Dispute object](https://docs.stripe.com/api/issuing/disputes/object) contains a dispute type and Klarna dispute reason. These parameters are useful for countering a dispute.\n\n### Type![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [Status](https://docs.stripe.com/api/disputes/object#dispute_object-status) parameter indicates the dispute type. The following table explains the dispute status and the state of the dispute.\n\n| Status | Dispute type | Description |\n| --- | --- | --- |\n| `warning_needs_response` | Inquiry | The inquiry is open and the business can issue a refund. |\n| `warning_closed` | Inquiry | The inquiry is closed. |\n| `needs_response` | Chargeback | The chargeback is open and the business can submit evidence. |\n| `under_review` | Chargeback | The chargeback is open and the evidence is submitted to Klarna. |\n| `lost` | Chargeback | The chargeback is closed and the business lost the dispute. |\n| `won` | Chargeback | The Chargeback is closed and the business won the dispute. |\n\n### Klarna reason![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Klarna reason is mapped to [Stripe dispute reason](https://docs.stripe.com/disputes/categories?card-network=klarna) and displayed in the Dashboard as `Network Reason Code`.\n\nThe Stripe reason is available in the Dispute object as [reason](https://docs.stripe.com/api/disputes/object#dispute_object-reason) and the Klarna reason is available in [payment\\_method\\_details.klarna.reason\\_code](https://docs.stripe.com/api/disputes/object#dispute_object-payment_method_details-klarna-reason_code). The data is available in the API and webhook.",
  "title": "Respond to disputes | Stripe Documentation",
  "description": "Learn how to respond to Klarna disputes using the Dashboard or API.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/zip/accept-a-payment",
  "markdown": "# Accept a Zip payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nZip is an Australia-based BNPL payment method that allows customers to split purchases over a series of payments.\n\nCustomers authenticate a payment on Zip website and there is immediate notification about the success or failure of a payment.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support Zip payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be expressed in Australian Dollar (currency code `aud`).\n\n[](#accept-a-Zip-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nMake the following updates to your card payment integration to enable Zip.\n\n### Enable Zip as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `zip` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the `aud` currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'zip'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `zip`, all line items must have currency: aud       currency: 'aud',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select Zip as the payment method and click **Pay**.",
  "title": "Accept a Zip payment | Stripe Documentation",
  "description": "Learn how to accept Zip, the popular buy now, pay later payment method in Australia.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/swish/accept-a-payment",
  "markdown": "# Swish payments | Stripe DocumentationThe Stripe Docs logo\n\nSwish is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) payment method used in Sweden. It allows customers to [authenticate and approve](https://docs.stripe.com/payments/payment-methods#customer-actions) payments using the Swish mobile app and the Swedish BankID mobile app.\n\nYou get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) on whether the payment succeeded or failed.\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nUse this guide to enable Swish on [Checkout](https://docs.stripe.com/payments/checkout), our hosted checkout form, and learn the differences between accepting a card payment and a Swish payment.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support Swish payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be expressed in SEK.\n\n[](#web-set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#accept-a-payment)\n\n#### Note\n\nThis guide builds on the foundational [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) Checkout integration.\n\n### Enable Swish as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `swish` to the list of `payment_method_types`.\n2.  Make sure all your `line_items` use the `sek` currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'swish'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `swish`, all line items must have currency: sek       currency: 'sek',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#failed-payments)\n\nSwish uses multiple data points to decide when to decline a transaction (for example, there aren’t enough funds in the customer’s bank account, or the customer has clicked **Cancel** in the app).\n\nIn these cases, the [PaymentMethod](https://docs.stripe.com/api/payment_methods/object) is detached and the [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) object’s status automatically transitions to `requires_payment_method`.\n\nOther than a payment being declined, for a Swish [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) with a status of `requires_action`, customers must complete the payment within 3 minutes. If no action is taken after 3 minutes, the [PaymentMethod](https://docs.stripe.com/api/payment_methods/object) is detached and the [PaymentIntent](https://docs.stripe.com/api/payment_intents/object) object’s status automatically transitions to `requires_payment_method`.",
  "title": "Swish payments | Stripe Documentation",
  "description": "Learn how to accept Swish, a popular payment method in Sweden.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/promptpay/accept-a-payment",
  "markdown": "# Accept a PromptPay payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nPromptPay is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers pay with PromptPay by scanning the QR code that they see during checkout. Completing the payment redirects customers back to your website.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support PromptPay payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency. If you have line items in different currencies, create separate Checkout Sessions for each currency.\n*   You can only use one-time line items (PromptPay Checkout Sessions don’t support recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans).\n\n[](#accept-a-payment)\n\n#### Note\n\nThis guide builds on the foundational [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) Checkout integration.\n\nThis guides you through enabling PromptPay and shows the differences between accepting a card payment and using PromptPay.\n\n### Enable PromptPay as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `promptpay` to the list of `payment_method_types`\n2.  Make sure all your `line_items` use the same currency\n\n`Stripe.api_key =` \n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['promptpay'],    # or you can take multiple payment methods with   # payment_method_types: ['card', 'promptpay', ...]   line_items: [{     price_data: {       currency: 'thb',       product_data: {         name: 'เสื้อยืด',       },       unit_amount: 1000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })`\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select PromptPay as the payment method and click the **Generate QR code** button, which creates and renders a QR code.\n\nIn test mode, scan the QR code with a QR code scanning application on your mobile device. The QR code payload contains a URL which brings you to a Stripe-hosted PromptPay test payment page where you can either authorize or fail the test payment.\n\nIn live mode, you will be able to scan the QR code using a preferred banking app or payment app that supports PromptPay.",
  "title": "Accept a PromptPay payment | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/currencies/settlement-fees",
  "markdown": "# Settling in additional currencies | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how paying out funds in currencies other than your primary currency affects your processing fees.\n\nInternational businesses might need to settle and pay out funds in different currencies. The processing fees you pay depend on how you settle funds internationally.\n\n## Settling in a different currency![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen you settle funds to your Stripe account in a currency other than the primary currency of your Stripe account country, Stripe applies processing fees in that currency. Use the table below to see the acquiring fees for card usage in each currency.\n\nLoading a table of settlement fees\n\n## Payouts in a different currency![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAny payouts from your Stripe account in a currency other than the primary currency of the country of the recipient bank account incur a fee. Certain payouts to non-domestic bank accounts also incur a fee. For more information on payout fees, see our [payout docs](https://docs.stripe.com/payouts).",
  "title": "Settling in additional currencies | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/multibanco/accept-a-payment",
  "markdown": "# Accept a Multibanco payment | Stripe DocumentationThe Stripe Docs logo\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, [migrate to the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nMultibanco is a voucher-based payment method in Portugal. If your business is based in Europe or the United States, you can accept Multibanco payments from customers in Portugal using the [Payment Intents API](https://docs.stripe.com/payments/payment-intents).\n\nTo complete a transaction, customers receive a voucher that includes Multibanco entity and reference numbers. Customers use these voucher details to make a payment outside your checkout flow through online banking or from an ATM.\n\nPayment confirmation might be delayed by several days due to the initiation of a bank transfer when a customer pays for a Multibanco voucher. Bank transfers can encounter delays, particularly over weekends, contributing to the delay in payment confirmation.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support Multibanco:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency (EUR).\n*   You can only use one-time line items (recurring [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") plans are not supported).\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nEnable Multibanco by making the following updates to your card payment integration.\n\n### Enable Multibanco as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `multibanco` to the list of `payment_method_types`.\n2.  Make sure all your `line_items` use the `eur` currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'multibanco'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `multibanco`, all line items must have currency: eur       currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Redirect to Stripe-hosted voucher page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n#### Note\n\nUnlike card payments, the customer won’t be redirected to the [success\\_url](https://docs.stripe.com/api/checkout/sessions/object#checkout_session_object-success_url) with a Multibanco payment.\n\nAfter submitting the Checkout form successfully, the customer is redirected to the `hosted_voucher_url`. The customer can reference the hosted page’s payment instructions for details on how to complete their payment. You can view the page on both desktop and mobile platforms, and it’s also printable.\n\nStripe sends a [payment\\_intent.requires\\_action](https://docs.stripe.com/api/events/types#event_types-payment_intent.requires_action) event when a Multibanco voucher is created successfully. If you need to send an email with the voucher’s payment instructions link, locate the PaymentIntent at `data.object` on the `requires_action` event, and extract the `hosted_voucher_url` at [next\\_action.multibanco\\_display\\_details.hosted\\_voucher\\_url](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-multibanco_display_details-hosted_voucher_url) on the PaymentIntent.\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBecause Multibanco is a [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method, you need to use a method such as [webhooks](https://docs.stripe.com/webhooks \"webhook\") to monitor the payment status and handle order fulfillment. Learn more about [setting up webhooks and fulfilling orders](https://docs.stripe.com/checkout/fulfillment).\n\nThe following events are sent when the payment status changes:\n\n| Event name | Description | Next steps |\n| --- | --- | --- |\n| [checkout.session.completed](https://docs.stripe.com/api/events/types#event_types-checkout.session.completed) | The customer has successfully submitted the Checkout form. Stripe has generated a Multibanco voucher. | Wait for the customer to pay the Multibanco voucher. |\n| [checkout.session.async\\_payment\\_succeeded](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_succeeded) | The customer has successfully paid the Multibanco voucher. The `PaymentIntent` transitions to `succeeded`. | Fulfill the goods or services that the customer purchased. |\n| [checkout.session.async\\_payment\\_failed](https://docs.stripe.com/api/events/types#event_types-checkout.session.async_payment_failed) | The Multibanco voucher has expired, or the payment has failed for some other reason. The `PaymentIntent` returns to a status of `requires_payment_method`. | Contact the customer by email and request that they place a new order. |\n\n[](#test-the-integration)\n\nWhen testing your Checkout integration, select Multibanco as the payment method, then click **Pay**. Provide the following email patterns in the Checkout form to test different scenarios:\n\n| Email | Description |\n| --- | --- |\n| `{any_prefix}@{any_domain}` | Simulates a Multibanco voucher that a customer pays. The `payment_intent.succeeded` webhook arrives after about 3 minutes.<br><br>Example: jenny@example.com |\n| `{any_prefix}succeed_immediately@{any_domain}` | Simulates a Multibanco voucher that a customer pays immediately. The `payment_intent.succeeded` webhook arrives within several seconds.<br><br>Example: succeed\\_immediately@example.com |\n| `{any_prefix}expire_immediately@{any_domain}` | Simulates a Multibanco voucher that expires immediately. The `payment_intent.payment_failed` webhook arrives within several seconds.<br><br>Example: expire\\_immediately@example.com |\n| `{any_prefix}expire_with_delay@{any_domain}` | Simulates a Multibanco voucher that expires before a customer pays. The `payment_intent.payment_failed` webhook arrives after about 3 minutes.<br><br>Example: expire\\_with\\_delay@example.com |\n| `{any_prefix}fill_never@{any_domain}` | Simulates a Multibanco voucher that never succeeds. The `payment_intent.payment_failed` webhook arrives after 11 days, which mimics behavior in live mode. Learn about Multibanco [expiration](https://docs.stripe.com/payments/multibanco/accept-a-payment#expiration).<br><br>Example: fill\\_never@example.com |\n\n[](#expiration)\n\nMultibanco vouchers expire at the `expires_at` UNIX timestamp in [next\\_action.multibanco\\_display\\_details.expires\\_at](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action-multibanco_display_details-expires_at), which is 7 days after you create the voucher. Customers can’t pay a Multibanco voucher after it expires. After expiration, the PaymentIntent’s status transitions from `requires_action` to `processing`, and Stripe sends a [payment\\_intent.processing](https://docs.stripe.com/api/events/types#event_types-payment_intent.processing) event.\n\nThe PaymentIntent remains in the `processing` status for a maximum buffer period of 4 days to allow for potential completed payment notification delays caused by bank-transfer delays. If the Multibanco payment doesn’t complete within the buffer period, the PaymentIntent’s status transitions to `requires_payment_method` and Stripe sends a [payment\\_intent.payment\\_failed](https://docs.stripe.com/api/events/types#event_types-payment_intent.payment_failed) event. If you receive the customer’s funds after the buffer period, Stripe automatically initiates a refund process for the mispaid amount.\n\n[](#cancelation)\n\nYou can cancel Multibanco vouchers using [Cancel a PaymentIntent](https://docs.stripe.com/api/payment_intents/cancel). After cancelation, Stripe sends a [payment\\_intent.canceled](https://docs.stripe.com/api/events/types#event_types-payment_intent.canceled) event.\n\nIf a customer’s funds are received for a canceled Multibanco voucher, Stripe automatically initiates a refund process for the mispaid amount.\n\n#### Note\n\nCanceling a pending payment invalidates the original voucher instructions. When you cancel a pending Multibanco payment, inform your customer.\n\nWhen you successfully reconfirm a PaymentIntent in status `requires_action`, Stripe creates new voucher instructions and a new `hosted_voucher_url`. You must provide them to your customer.",
  "title": "Accept a Multibanco payment | Stripe Documentation",
  "description": "Learn how to accept the Multibanco payment method.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/multicapture",
  "markdown": "# Capture a payment multiple times\n\n## Capture a PaymentIntent multiple times, up to the authorized amount.\n\nMulticapture allows you to [capture a PaymentIntent](https://docs.stripe.com/api/payment_intents/capture) multiple times for a single authorization, up to the full [amount of the PaymentIntent](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-amount). You can use it when you have orders with multiple shipments, and want to capture funds as you fulfill parts of the order.\n\n#### IC+ feature\n\nMulticapture is part of the functionality we offer to users on [IC+ pricing](https://support.stripe.com/questions/understanding-blended-interchange-pricing \"IC+\"). If you’re on blended Stripe pricing and want access to this feature, contact [Stripe Support](https://support.stripe.com/).\n\n## Availability ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen using multicapture, be aware of the following restrictions:\n\n*   Multicapture is only supported for online card payments\n*   Only available with Amex, Visa, Discover, and Mastercard\n*   [Separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers) fund flows using [source\\_transaction](https://docs.stripe.com/api/transfers/create#create_transfer-source_transaction) aren’t supported\n*   Stripe allows you to capture up to 50 times for a single [PaymentIntent](https://docs.stripe.com/api/payment_intents)\n\n#### Beta\n\nAccess to multicapture for Cartes Bancaires is a new feature, and currently limited to beta users. Reach out [here](#) to gain access.\n\n## Best practices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhere sending separate shipments for one order, proactively notify your end customer with the details of each shipment to avoid inquiries and chargebacks from customers because of confusion with seeing multiple transactions on their bank statement. Here are some best practices for doing so:\n\n*   Inform the customer of the estimated delivery date and transaction amount for each shipment at the time of checkout, before purchase.\n*   Notify your customer upon each shipment, along with the transaction amount.\n*   Disclose your full refund and cancellation policy.\n\nThese best practices might be required under applicable network rules, depending on the network.\n\n#### Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations, and network rules when using multicapture. Consult the rules for the card networks that you want to use this feature with to make sure your sales comply with all applicable rules, which vary by network. For example, most card networks restrict multicapture usage to card-not-present transactions for the sale of goods that ship separately. Certain card networks permit multicapture for businesses based on their industry (for example, travel), while some don’t permit multicapture for installment or deposit workflows.\n\nThe information provided on this page relating to your compliance with these requirements is for your general guidance, and isn’t legal, tax, accounting, or other professional advice. Consult with a professional if you’re unsure about your obligations.\n\n[\n\n## Create and confirm an uncaptured PaymentIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-and-confirm)\n\nTo indicate that you want separate authorization and capture, specify the [capture\\_method](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-capture_method) as `manual` when creating the PaymentIntent. To learn more about separate authorization and capture, see [how to place a hold on a payment method](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method).\n\nUse the `if_available` or `never` parameters to request multicapture for this payment.\n\n*   `if_available`: The created PaymentIntent will allow multiple captures, if the payment method supports it.\n    \n*   `never`: The created PaymentIntent won’t allow for multiple captures\n    \n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d payment_method=pm_card_visa \\  -d confirm=true \\  -d capture_method=manual \\  -d \"expand[]\"=latest_charge \\  -d \"payment_method_options[card][request_multicapture]\"=if_available`\n\nIn the response, the `payment_method_details.card.multicapture.status` field on the [latest\\_charge](https://docs.stripe.com/api/charges/object) contains `available` or `unavailable` based on the customer’s payment method.\n\n`// PaymentIntent Response {   \"id\": \"pi_xxx\",   \"object\": \"payment_intent\",   \"amount\": 1000,   \"amount_capturable\": 1000,   \"amount_received\": 0,   ...   // if latest_charge is expanded   \"latest_charge\": {       \"id\": \"ch_xxx\",       \"object\": \"charge\",       \"amount\": 1000,       \"amount_captured\": 0,       \"amount_refunded\": 0,       \"payment_method_details\": {         \"card\": {           \"multicapture\": {               \"status\": \"available\" // or \"unavailable\"           }         }       }       ...     }   ... }`\n\n[](#capture-payment-intent)\n\nFor a PaymentIntent in a [requires\\_capture state](https://docs.stripe.com/payments/paymentintents/lifecycle) where multicapture is `available`, specifying the optional `final_capture` parameter to be `false` tells Stripe not to release the remaining uncaptured funds when calling the capture API. For example, if you confirm a 10 USD payment intent, capturing 7 USD with `final_capture=false` keeps the remaining 3 USD authorized.\n\n`curl https://api.stripe.com/v1/payment_intents/pi_xxx/capture \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount_to_capture=700 \\  -d final_capture=false \\  -d \"expand[]\"=latest_charge`\n\nIn the PI capture response, the [amount\\_capturable](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount_capturable) and [amount\\_received](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount_received) fields update accordingly.\n\n`// PaymentIntent Response {   \"id\": \"pi_ANipwO3zNfjeWODtRPIg\",   \"object\": \"payment_intent\",   \"amount\": 1000,   \"amount_capturable\": 300, // 1000 - 700 = 300   \"amount_received\": 700,   // if latest_charge is expanded   \"latest_charge\": {       \"id\": \"ch_xxx\",       \"object\": \"charge\",       \"amount\": 1000,       \"amount_captured\": 700,       \"amount_refunded\": 0,       ...     }   ... }`\n\n[](#final-capture)\n\nThe PaymentIntent remains in a `requires_capture` state until you do one of the following:\n\n*   Set `final_capture` to `true`\n*   Make a capture without the `final_capture` parameter (because `final_capture` defaults to `true`)\n*   The authorization window expires.\n\nAt this point, Stripe releases any remaining funds and transitions the PaymentIntent to a `succeeded` state.\n\n`curl https://api.stripe.com/v1/payment_intents/pi_xxx/capture \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount_to_capture=200 \\  -d final_capture=true \\  -d \"expand[]\"=latest_charge`\n\nIn the PI capture response, the [amount\\_capturable](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount_capturable) and [amount\\_received](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount_received) fields will be updated accordingly.\n\n`// PaymentIntent Response {   \"id\": \"pi_ANipwO3zNfjeWODtRPIg\",   \"object\": \"payment_intent\",   \"amount\": 1000,   \"amount_capturable\": 0, // not 100 due to final_capture=true   \"amount_received\": 900, // 700 + 200 = 900   // if latest_charge is expanded   \"latest_charge\": {       \"id\": \"ch_xxx\",       \"object\": \"charge\",       \"amount\": 1000,       \"amount_captured\": 900,       \"amount_refunded\": 0,       ...     }   ... }`\n\nUncaptured PaymentIntents transition to `canceled`, while partially captured PaymentIntents transition to `succeeded`.\n\n[](#test-your-integration)\n\nUse a Stripe test card with any CVC, postal code, and future expiration date to test multicapture payments.\n\n| Number | Payment Method | Description |\n| --- | --- | --- |\n|     | `pm_card_visa` | This test card support multicapture. |\n\n[](#refunds)\n\nFor a PaymentIntent in `requires_capture` state, you can [refund](https://docs.stripe.com/api/refunds) any number of times up to the total captured amount minus the total refunded amount, which is the [amount\\_received](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount_received) - [amount\\_refunded](https://docs.stripe.com/api/charges/object#charge_object-amount_refunded). The [charge.refunded](https://docs.stripe.com/api/charges/object#charge_object-refunded) field transitions to true only when the final capture has been performed and the entire [amount\\_received](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount_received) is refunded.\n\nStripe doesn’t support partial refunds with [refund\\_application\\_fee=true](https://docs.stripe.com/api/refunds/create#create_refund-refund_application_fee) or [reverse\\_transfer=true](https://docs.stripe.com/api/refunds/create#create_refund-reverse_transfer). Instead, you can perform partial fee refunds by manually performing partial fee refunds and transfer reversals using the [application fee refund](https://docs.stripe.com/api/fee_refunds) and [transfer reversal](https://docs.stripe.com/api/transfer_reversals) endpoints. After using the application fee refund or transfer reversal endpoints, Stripe doesn’t support any further refunds with refund\\_application\\_fee=true or reverse\\_transfer=true respectively.\n\n[](#connect)\n\nMulticapture supports all Connect use cases, with the exception of [Separate Charges and Transfers](https://docs.stripe.com/connect/separate-charges-and-transfers) with the [source\\_transaction](https://docs.stripe.com/api/transfers/create#create_transfer-source_transaction) parameter. The [application\\_fee\\_amount](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-application_fee_amount) and [transfer\\_data\\[amount\\]](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-transfer_data-amount) parameters have some additional validations. Consider the following validations when implementing multicapture with Connect:\n\n*   Setting `application_fee_amount` or `transfer_data[amount]` on the first capture makes it required for all subsequent captures. Each `application_fee_amount` and `transfer_data[amount]` passed at capture time overrides the values passed in on PaymentIntent creation, confirmation, and update.\n*   Stripe doesn’t support partial refunds on multicapture payments with refund\\_application\\_fee=true or reverse\\_transfer=true. You can perform partial fee refunds or transfer reversals using the [application fee refund](https://docs.stripe.com/api/fee_refunds) and [transfer reversal](https://docs.stripe.com/api/transfer_reversals) endpoints.\n\n[](#multicapture-webhooks)\n\n### Charge updated webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe send a [charge.updated](https://docs.stripe.com/api/events/types#event_types-charge.updated) webhook each time you capture a payment.\n\nFor example, on the first capture of a destination charge multicapture payment with an `application_fee_amount`, we update these fields from empty to non-empty values.\n\n`// charge.updated {   \"data\": {     \"id\": \"ch_xxx\",     \"object\": \"charge\",     \"amount\": 1000,     \"balance_transaction\": \"txn_xxx\", // applicable to all charges     \"transfer\": \"tr_xxx\",             // applicable to destination charges only     \"application_fee\": \"fee_xxx\",     // applicable to Connect only     ...   },   \"previous_attributes\": {     \"balance_transaction\": null, // applicable to all charges     \"transfer\": null,            // applicable to destination charges only     \"application_fee\": null,     // applicable to Connect only   } }`\n\n### payment\\_intent.amount\\_capturable\\_updated![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe send [payment\\_intent.amount\\_capturable\\_updated](https://docs.stripe.com/api/events/types#event_types-payment_intent.amount_capturable_updated) on every capture, regardless of amount\\_to\\_capture and final\\_capture values.\n\nFor example, if we capture 1 USD from a PaymentIntent with an amount of 10 USD, the PaymentIntent’s amount\\_capturable field updates to 9 USD.\n\n`// payment_intent.amount_capturable_updated {   \"data\": {     \"id\": \"pi_xxx\",     \"object\": \"payment_intent\",     \"amount\": 1000,     \"amount_capturable\": 900 // 1000 - 100 = 900      ...   },   \"previous_attributes\": {     \"amount_capturable\": 1000   } }`\n\n### Charge captured events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe send a [charge.captured](https://docs.stripe.com/api/events/types#event_types-charge.captured) event for final captures or at the end of the authorization window to reverse the authorization of the uncaptured amount. The [captured](https://docs.stripe.com/api/charges/object#charge_object-captured) field for a charge only becomes `true` after a final capture or authorization reversal.\n\nFor example, if we do a capture with `amount=0` and `final_capture=true`, the [captured](https://docs.stripe.com/api/charges/object#charge_object-captured) attribute on the charge changes from false to true.\n\n`// charge.captured {   \"data\": {     \"id\": \"ch_xxx\",     \"object\": \"charge\",     \"captured\": true         ...   },   \"previous_attributes\": {     \"captured\": false   } }`\n\n### Refund webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMulticapture refund webhooks are no different than non-multicapture refund webhooks.\n\nDuring each partial refund, we’ll send a [charge.refunded](https://docs.stripe.com/api/events/types#event_types-charge.refunded) event. For connected accounts, we’ll additionally send [application\\_fee.refunded](https://docs.stripe.com/api/events/types#event_types-application_fee.refunded) events when we refund application fees and [transfer.reversed](https://docs.stripe.com/api/events/types#event_types-transfer.reversed) events when we reverse transfers.",
  "title": "Capture a payment multiple times | Stripe Documentation",
  "description": "Capture a PaymentIntent multiple times, up to the authorized amount.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/overcapture",
  "markdown": "# Capture more than the authorized amount on a payment\n\n## Use overcapture to capture more than the authorized amount for a PaymentIntent.\n\nOvercapture allows you to capture with an amount that’s higher than the authorized amount for a card payment. Unlike [incremental authorizations](https://docs.stripe.com/payments/incremental-authorization), overcapture doesn’t result in additional authorizations with the card networks. When you overcapture a PaymentIntent, your customer won’t see any immediate updates on their credit card statement. After the captured amount settles, the initial pending authorization gets updated with the final captured amount.\n\n## Availability ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen using overcapture, be aware of the following restrictions:\n\n*   Only available with Visa, Mastercard, American Express, or Discover.\n*   Only eligible for online card payments. For in-person card payments see how to [collect tips](https://docs.stripe.com/terminal/features/collecting-tips/overview).\n*   Card brands limit the amount that you can overcapture (generally calculated as a percentage of the authorized amount), and impose additional constraints, including country, card type, and merchant category restrictions (see below).\n\n#### IC+ feature\n\nWe offer overcapture to users on [IC+ pricing](https://support.stripe.com/questions/understanding-blended-interchange-pricing \"IC+\"). If you’re on standard Stripe pricing and want access to this feature, learn more at [support.stripe.com](https://support.stripe.com/).\n\n### Availability by card network, merchant country, and merchant category ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Card brand | Merchant country | Merchant category | Percent limit |\n| --- | --- | --- | --- |\n| **Visa**\\* | Global | Taxicabs and limousines; eating places and restaurants; drinking places (alcoholic beverages); fast food restaurants; beauty and barber shops; health and beauty spas | +20% |\n|     | Global | Car rentals | Greater of +15% or +75 USD (or local currency equivalent) |\n|     | Global | Lodging; cruise lines | +15% |\n|     | Global\\*\\* | All other merchant categories | +15% |\n| **Mastercard** | US\\*\\*\\* | Eating places and restaurants; fast food restaurants | +30% |\n| **American Express** | Global\\*\\*\\*\\* | Eating places and restaurants; drinking places (alcoholic beverages); fast food restaurants | +30% |\n|     | Global | Taxicabs and limousines; beauty and barber shops; health and beauty spas | +20% |\n|     | Global | Lodging; car rentals; truck and utility trailer rentals; motor home and recreational vehicle rentals; grocery stores; retail stores | +15% |\n| **Discover** | Global | Taxicabs and limousines; eating places and restaurants; drinking places (alcoholic beverages); fast food restaurants; beauty and barber shops; health and beauty spas | +20% |\n|     | Global | Lodging; car rentals | +15% |\n\n### Networks with limited support (beta)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Overcapture with Strong Customer Authentication (SCA)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you and the cardholder are in a country that has Strong Customer Authentication (SCA) requirements, keep in mind the limitations of overcapture availability.\n\n*   Under SCA requirements, you generally need to authenticate an amount that’s greater than or equal to the amount that you eventually capture. For this reason, you need to authenticate and authorize for the highest estimated amount that you plan to capture, rather than using overcapture as outlined elsewhere on this page. Subsequently, you can capture up to the full amount authenticated, depending on the total amount for the goods or services provided. If you find it necessary to capture an amount beyond the originally authorized and authenticated amount, you must cancel the original payment and create a new one with the correct amount. However, there are some exceptions to this requirement (see below).\n*   There are a number of [transaction exemptions](https://support.stripe.com/questions/transaction-exemptions-for-strong-customer-authentication-%28sca%29) for SCA where overcapture might be permissible. For example, merchant-initiated transactions (MIT) where the customer isn’t physically present during the checkout flow are potentially exempt. See [when to categorize a transaction as MIT](https://support.stripe.com/questions/merchant-initiated-transactions-(mits)-when-to-categorize-a-transaction-as-mit).\n\nYou need to familiarize yourself with the complete documentation to gain a comprehensive understanding of overcapture and SCA requirements. See our [SCA guide](https://stripe.com/guides/strong-customer-authentication) for more information.\n\n#### Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations, and network rules when using overcapture. Make sure to review the rules for the card networks that you plan to use this feature with to make sure your sales comply with the applicable rules, which vary by network. For example, some card networks don’t allow overcapture for transactions where the final transaction amount should be known at the time of authorization.\n\nThe information provided on this page relating to your compliance with these requirements is for your general guidance, and isn’t legal, tax, accounting, or other professional advice. Consult with a professional if you’re unsure about your obligations.\n\n[](#confirm-payment-intent)\n\nYou can only perform overcapture on uncaptured payments after [PaymentIntent confirmation](https://docs.stripe.com/api/payment_intents/confirm). To indicate you want to separate the authorization and capture, specify the [capture\\_method](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-capture_method) as `manual` when creating the PaymentIntent. To learn more about separate authorization and capture, see [how to place a hold on a payment method](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method).\n\nYou must specify the PaymentIntents you plan to overcapture by using `if_available` with the [request\\_overcapture](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-payment_method_options-card-request_overcapture) parameter.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d payment_method=pm_card_visa \\  -d confirm=true \\  -d capture_method=manual \\  -d \"expand[]\"=latest_charge \\  -d \"payment_method_options[card][request_overcapture]\"=if_available`\n\nLook at the [overcapture.status](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-overcapture) field on the [latest\\_charge](https://docs.stripe.com/api/charges/object) in the PaymentIntent confirmation response to determine if overcapture is available for the payment based on [availability](#availability). If `available`, the [maximum\\_amount\\_capturable](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-overcapture-maximum_amount_capturable) field indicates the maximum amount capturable for the PaymentIntent. If `unavailable`, the maximum\\_amount\\_capturable is the amount authorized.\n\n`// PaymentIntent response {   \"id\": \"pi_xxx\",   \"object\": \"payment_intent\",   \"amount\": 1000,   \"amount_capturable\": 1000,   \"amount_received\": 0,   \"status\": \"requires_capture\",   ...   // if latest_charge is expanded   \"latest_charge\": {       \"id\": \"ch_xxx\",       \"object\": \"charge\",       \"payment_method_details\": {         \"card\": {           \"amount_authorized\": 1000           \"overcapture\": {               \"status\": \"available\", // or \"unavailable\"               \"maximum_amount_capturable\": 1200           }         }       }       ...     }   ... }`\n\n[](#capture-payment-intent)\n\nTo capture more than the currently authorized amount on a PaymentIntent, use the [capture](https://docs.stripe.com/api/payment_intents/capture) endpoint and provide an [amount\\_to\\_capture](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-amount_to_capture) up to the [maximum\\_amount\\_capturable](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-overcapture).\n\nIf you need to capture an amount larger than the `maximum_amount_capturable`, perform an [incremental authorization](https://docs.stripe.com/payments/incremental-authorization) to increase the authorized amount, where available.\n\n`curl https://api.stripe.com/v1/payment_intents/pi_xxx/capture \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount_to_capture=1200 \\  -d \"expand[]\"=latest_charge`\n\nThe [amount\\_capturable](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount_capturable) and [amount\\_received](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount_received) fields update accordingly in the PaymentIntent capture response for a successful overcapture. The captured PaymentIntent that returns has an updated [amount](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount) to reflect the total monetary amount moved for this payment. Use the [amount\\_authorized](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-amount_authorized) field on the associated Charge to reference the initial amount authorized for a successfully overcaptured payment.\n\n`// PaymentIntent response {   \"id\": \"pi_xxx\",   \"object\": \"payment_intent\",   \"amount\": 1200,   \"amount_capturable\": 0,   \"amount_received\": 1200,   \"status\": \"succeeded\",   ...   // if latest_charge is expanded   \"latest_charge\": {       \"id\": \"ch_xxx\",       \"object\": \"charge\",       \"payment_method_details\": {         \"card\": {           \"amount_authorized\": 1000,           \"overcapture\": {               \"maximum_amount_capturable\": 1200,               \"status\": \"available\" // or \"unavailable\"           }         }       }       ...     }   ... }`\n\n## Test your integration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse any of the below Stripe test cards with any CVC and future expiration date to request and perform overcaptures while in test mode. If overcapture is available on payments for a given network in test mode, it is also available in live mode.\n\n| Card brand | Number | Payment method |\n| --- | --- | --- |\n| Visa |     | `pm_card_visa` |\n| Mastercard |     | `pm_card_mastercard` |\n| Amex |     | `pm_card_amex` |\n| Discover |     | `pm_card_discover` |",
  "title": "Capture more than the authorized amount on a payment | Stripe Documentation",
  "description": "Use overcapture to capture more than the authorized amount for a PaymentIntent.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/extended-authorization",
  "markdown": "# Place an extended hold on an online card payment\n\n## Learn how to use extended authorizations to capture online card payments up to 30 days after authorization.\n\nExtended authorizations have a longer authorization validity period, which allows you to hold customer funds for longer than standard authorization validity windows. For most card networks, the default authorization validity period is 7 days for online payments and 2 days for in-person [Terminal](https://docs.stripe.com/terminal) payments, whereas extended validity periods can go up to 30 days depending on the card network. For more information about authorization validity windows, see [place a hold on a payment method](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method).\n\n## Availability ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen using extended authorizations, be aware of the following restrictions:\n\n*   They’re only available with Visa, Mastercard, American Express, and Discover.\n*   Certain card brands have merchant category restrictions. Refer to the network availability table below.\n*   This page describes extended authorizations for online card payments. For in-person card payments using extended authorizations, refer to the [Terminal documentation](https://docs.stripe.com/terminal/features/extended-authorizations).\n*   Checkout doesn’t support extended authorizations.\n\n#### IC+ Feature\n\nWe offer extended authorizations to users on [IC+](https://support.stripe.com/questions/understanding-blended-interchange-pricing \"IC+\") pricing. If you’re on blended Stripe pricing and want access to this feature, you learn more at [support.stripe.com](https://support.stripe.com/).\n\n### Availability by card network and merchant category![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEvery card network has different rules that determine which payments have extended authorizations available, and how long they’re valid. The following table shows the validity windows and transaction types that extended authorization is available for using Visa, Mastercard, American Express, and Discover. However, we recommend that you rely on the [capture\\_before field](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-capture_before) to confirm the validity window for any given payment because these rules can change without prior notice.\n\n| Card brand | Merchant category | Extended authorization validity window |\n| --- | --- | --- |\n| **Visa** | Hotel, lodging, vehicle rental, and cruise line | 30 days\\* |\n| **Mastercard** (not including Maestro and Cirrus cards) | All merchant categories | 30 days |\n| **American Express** | Lodging and vehicle rental | 30 days\\*\\* |\n| **Discover** | Airline, bus charter/tour, car rental, cruise line, local/suburban commuter, passenger transportation including ferries, hotel, lodging, and passenger railway | 30 days |\n\n\\* The exact extended authorization window for Visa is 29 days and 18 hours, to allow time for clearing processes.  \n\\*\\* While your validity window is extended to 30 days, you must capture the authorized funds no later than the end of the duration of your customer’s stay or rental.\n\n### Networks with limited support (beta)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Recent changes to availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Best Practices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustomers see their funds held longer when you use extended authorizations. Use clear [statement descriptors](https://docs.stripe.com/get-started/account/statement-descriptors) to avoid increased disputes from unrecognized payments.\n\n#### Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations, and network rules when using extended authorization. Consult the network specifications for the card networks that you plan to accept using this feature with to make sure your sales are compliant with the applicable rules, which vary by network. For instance, for many networks extended validity windows are only for cases where you don’t know the final amount that you’ll capture at the time of authorization.\n\nThe information provided on this page relating to your compliance with these requirements is for your general guidance, and is not legal, tax, accounting, or other professional advice. Consult with a professional if you’re unsure about your obligations.\n\nBy default, an authorization for an online card payment is valid for 7 days for most card networks. To increase the validity period, you can request an extended authorization by using `if_available` with the [request\\_extended\\_authorization](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-payment_method_options-card-request_extended_authorization) parameter.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d payment_method=pm_card_visa \\  -d confirm=true \\  -d capture_method=manual \\  -d \"expand[]\"=latest_charge \\  -d \"payment_method_options[card][request_extended_authorization]\"=if_available`\n\nRely on the [capture\\_before field](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-capture_before) to confirm the validity window for a given payment. The validity window won’t change after the PaymentIntent is confirmed. To determine if the authorization is extended after confirming the PaymentIntent, look at the [extended\\_authorization.status field](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-extended_authorization-status) on the associated Charge.\n\n`// PaymentIntent response {   \"id\": \"pi_xxx\",   \"object\": \"payment_intent\",   \"amount\": 1000,   \"amount_capturable\": 1000,   \"amount_received\": 0,   \"status\": \"requires_capture\",   ...   // if latest_charge is expanded   \"latest_charge\": {       \"id\": \"ch_xxx\",       \"object\": \"charge\",       \"payment_method_details\": {         \"card\": {           \"amount_authorized\": 1000,           \"capture_before\": 1696524701,           \"extended_authorization\": {               \"status\": \"enabled\", // or \"disabled\"           }         }       }       ...     }   ... }`\n\n## Test your integration ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse any of the below Stripe test cards with any CVC and future expiration date to request extended authorizations while in test mode. If extended authorizations are available on payments for a given network in test mode, they’re also available in live mode.\n\n| Card brand | Number | Payment method |\n| --- | --- | --- |\n| Visa |     | `pm_card_visa` |\n| Mastercard |     | `pm_card_mastercard` |\n| Amex |     | `pm_card_amex` |\n| Discover |     | `pm_card_discover` |",
  "title": "Place an extended hold on an online card payment | Stripe Documentation",
  "description": "Learn how to use extended authorizations to capture online card payments up to 30 days after authorization.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/incremental-authorization",
  "markdown": "# Increment an authorization | Stripe DocumentationThe Stripe Docs logo\n\n## Increase an existing authorization on a confirmed PaymentIntent before you capture it.\n\nIncremental authorization allows you to increase the authorized amount on a confirmed PaymentIntent before you capture it. Before capture, each incremental authorization appears on the credit card statement as an additional pending entry (for example, a 10 USD authorization incremented to 15 USD appears as separate 10 USD and 5 USD pending entries). After capture, the pending authorizations are removed, and the total captured amount appears as one final entry.\n\n## Availability ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen using incremental authorizations, be aware of the following restrictions:\n\n*   Not currently available if you and the cardholder are in a country with [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication#impacted-businesses) requirements or similar authentication requirements.\n*   Only available with Visa, Mastercard, or Discover.\n*   Certain card brands have merchant category restrictions (see below).\n\nFor learning more about incremental authorization and in-person payments made using Terminal, see [Incremental Authorizations](https://docs.stripe.com/terminal/features/incremental-authorizations).\n\n#### IC+ feature\n\nWe offer incremental authorizations to users on [IC+](https://support.stripe.com/questions/understanding-blended-interchange-pricing \"IC+\") pricing. If you’re on standard Stripe pricing and want access to this feature, learn more at [support.stripe.com](https://support.stripe.com/).\n\n#### Availability by card network and merchant category![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse incremental authorizations on payments that fulfill the criteria below. You can find your user category in the [Dashboard](https://dashboard.stripe.com/settings/update/company/update).\n\nAttempting to perform an incremental authorization on a payment that doesn’t fulfill the below criteria results in an error.\n\n| Card brand | Merchant country | Payment type | Merchant category |\n| --- | --- | --- | --- |\n| **Visa** | Global | All card payment types | All user categories |\n| **Mastercard** | Global\\* | All card payment types | All user categories |\n| **Discover** | Global | All card payment types | Car rental, hotels, local/suburban commuter, passenger transportation, including ferries, passenger railways, bus lines-charter, tour, steamship/cruise lines, boat rentals & lease, grocery stores and supermarkets, electric vehicle charging, eating places and restaurants, drinking places (alcoholic beverages), hotels, motels, resorts, trailer parks & campgrounds, equip/tool/furn/appl rental & leasing, automobile rental agency, truck and utility trailer rentals, motor home and rec vehicle rentals, parking lots, parking meters, and garages, amusement parks, circuses, fortune tell, recreation services (not classified) |\n| **Discover** | Global | Card not present | Taxicabs and limousines |\n\n\\* Excludes MX users and JPY transactions for JP users\n\n### Networks with limited support (beta)![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Best practices ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen using incremental authorization, proactively notify your end customer with the details of any authorizations for estimated amounts, which might be followed by incremental authorizations that increase those amounts. Here are some best practices for doing so:\n\n*   Disclose that an authorization is for an estimated amount and that subsequent authorization requests might follow at the time of checkout, before purchase.\n*   Base estimated amounts on a genuine estimate of what the total transaction amount will be.\n\nThese best practices might be required under applicable network rules, depending on the network.\n\n#### Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations, and network rules when using incremental authorization. Consult the network rules for the card networks that you plan to use this feature with to make sure your sales comply with applicable rules, which vary by network. For example, most card networks restrict how you can calculate estimated amounts included in the initial authorization, and prohibit the use of incremental authorizations for transactions where the transaction amount should be known at the time of authorization (for example, charges for recurring subscriptions).\n\nThe information provided on this page relating to your compliance with these requirements is for your general guidance, and isn’t legal, tax, accounting, or other professional advice. Consult with a professional if you’re unsure about your obligations.\n\n[](#confirm-payment-intent)\n\nYou can use the `request_incremental_authorization` parameter to specify the PaymentIntents you plan to increment.\n\nAll PaymentIntents are incrementable by default. Use the `if_available` or `never` parameters to determine when to start incrementing a PaymentIntent:\n\n*   `if_available`: The created PaymentIntent allows for future increments based on [incremental authorization support availability](#availability).\n    \n*   `never`: The created PaymentIntent doesn’t allow for future increments.\n    \n\nYou can only perform incremental authorizations on uncaptured payments after [PaymentIntent confirmation](https://docs.stripe.com/api/payment_intents/confirm). To adjust the amount of a payment before confirmation, use [update method](https://docs.stripe.com/api/payment_intents/update) instead.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d payment_method=pm_card_debit_incrementalAuthAuthorized \\  -d confirm=true \\  -d capture_method=manual \\  -d \"expand[]\"=latest_charge \\  -d \"payment_method_options[card][request_incremental_authorization]\"=if_available`\n\nIn the PaymentIntent confirmation response, the [payment\\_method\\_details](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details) field on the [latest\\_charge](https://docs.stripe.com/api/charges/object) contains `available` or `unavailable` based on the customer’s payment method and [the availability criteria mentioned above](#availability), which determines whether a PaymentIntent is eligible for incremental authorization or not. (If you didn’t request incremental authorization in your PaymentIntent confirmation request, it will be `unavailable`.)\n\n`// PaymentIntent Response {   \"id\": \"pi_ANipwO3zNfjeWODtRPIg\",   \"object\": \"payment_intent\",   \"amount\": 1000,   \"amount_capturable\": 1000,   \"amount_received\": 0,   ...   // if latest_charge is expanded   {     \"latest_charge\": {         \"amount\": 1000,         \"payment_method_details\": {           \"card\": {             \"incremental_authorization\": {                 \"status\": \"available\" // or \"unavailable\"             }           }         }         ...       }   }  }`\n\n[](#increment-authorization)\n\nTo increase the authorized amount on a PaymentIntent, use the [increment\\_authorization](https://docs.stripe.com/api/payment_intents/increment_authorization) endpoint and provide the updated total [authorization amount](https://docs.stripe.com/api/payment_intents/increment_authorization#increment_authorization-amount) to increment to, which must be greater than the original authorized amount. This attempts to authorize for a higher amount on your customer’s card. A single PaymentIntent can call this endpoint multiple times to further increase the authorized amount.\n\nYou have a maximum of 10 incremental authorization attempts per PaymentIntent.\n\n`curl https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}}/increment_authorization \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=1500`\n\nIf the incremental authorization succeeds, it returns the PaymentIntent object with the updated amount. If the authorization fails, it returns a [card\\_declined](https://docs.stripe.com/error-codes#card-declined) error instead. The PaymentIntent object remains capturable for the previously authorized amount. Any potential updates to other PaymentIntent fields (for example, [application\\_fee\\_amount](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-application_fee_amount), [transfer\\_data](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-transfer_data), [metadata](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-metadata), [description](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-description), and [statement\\_descriptor](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-statement_descriptor)) aren’t saved if the incremental authorization fails.\n\nThe underlying Charge object for the PaymentIntent contains an [amount\\_updates](https://docs.stripe.com/api/charges/object#charge_object-amount_updates) array field that’s appended with the results of the incremental authorization. It shows whether the authorization succeeded or failed, and any details associated with the result.\n\nIncremental authorization has a maximum cap of either +500 USD (or local equivalent) or +500% of the previously authorized amount (whichever is higher) for each individual increment.\n\n[](#capture-payment-intent)\n\nWhether you increase the authorized amount on a PaymentIntent with an incremental authorization or not, you need to capture the funds before the initial authorization expires–incremental authorizations don’t extend [the validity period](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method). To capture the authorized amount on a PaymentIntent with prior incremental authorizations, use the [capture endpoint](https://docs.stripe.com/api/payment_intents/capture) as usual.\n\n`curl https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}}/capture \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:`\n\nIf the incremental authorization succeeds, it returns the captured PaymentIntent object with the updated amount. If the authorization fails, it returns a [card\\_declined error](https://docs.stripe.com/error-codes#card-declined) instead. The PaymentIntent isn’t captured, but it remains capturable for the previously authorized amount. Any potential updates to other PaymentIntent fields (for example, [application\\_fee\\_amount](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-application_fee_amount), [transfer\\_data](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-transfer_data), [metadata](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-metadata), [description](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-description) and [statement\\_descriptor](https://docs.stripe.com/api/payment_intents/capture#capture_payment_intent-statement_descriptor)) aren’t saved if the incremental authorization fails.\n\n[](#test-your-integration)\n\nUse the incremental authorization Stripe test card with any CVC, postal code, and future expiration to trigger incremental authorization while in test mode:\n\n1.  First create the PaymentIntent using the test card in the [create and confirm PaymentIntent step](#confirm-payment-intent) above.\n    \n2.  Perform the incremental authorization with the parameters specified in the [perform an incremental authorization step](#increment-authorization) above, and use the test card to trigger an incremental authorization.\n    \n\n| Number | Payment Method | Description |\n| --- | --- | --- |\n|     | `pm_card_debit_incrementalAuthAuthorized` | This increases the authorization amount to the amount provided in the request. |",
  "title": "Increment an authorization | Stripe Documentation",
  "description": "Increase an existing authorization on a confirmed PaymentIntent before you capture it.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/sofort/save-during-payment",
  "markdown": "# Save bank details during a Sofort payment\n\n## Learn how to save your customer's IBAN bank details from a Sofort payment.\n\n#### Warning\n\nOur financial partners are in the process of deprecating Sofort. New businesses can’t accept Sofort payments. For more information read our [support page](https://support.stripe.com/questions/sofort-is-being-deprecated-as-a-standalone-payment-method).\n\n#### Caution\n\nSofort is a [single use](https://docs.stripe.com/payments/payment-methods#usage), [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method that requires customers to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. [Customers](https://docs.stripe.com/api/customers \"Customers\") pay with Sofort by redirecting from your website to their bank’s portal to authenticate the payment. It typically takes 2 to 14 days to receive notification of success or failure.\n\nYou can use Sofort to save your customer’s [IBAN](https://en.wikipedia.org/wiki/International_Bank_Account_Number) bank details into a [SEPA Direct Debit](https://docs.stripe.com/payments/sepa-debit) [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\"). You can then use the SEPA Direct Debit PaymentMethod to [accept payments](https://docs.stripe.com/payments/sepa-debit/accept-a-payment) or [set up a subscription](https://docs.stripe.com/billing/subscriptions/sepa-debit). This reduces friction for your customer as they don’t have to enter their IBAN again. You also receive their verified name and validated IBAN.\n\n#### Caution\n\nAccepting Sofort payments consists of creating a [PaymentIntent](https://docs.stripe.com/api/payment_intents) object to track a payment, collecting payment method information and mandate acknowledgement, and submitting the payment to Stripe for processing. Stripe uses the PaymentIntent to track and handle all the states of the payment until the payment completes. Use the ID of the SEPA Direct Debit [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") collected from your initial Sofort PaymentIntent to create PaymentIntents for future payments.\n\n[](#set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#create-customer)\n\nCreate a [Customer](https://docs.stripe.com/api/customers \"Customers\") when they create an account with your business and associate it with your internal representation of their account. This enables you to retrieve and use their saved payment method details later.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#create-payment-intent)\n\nCreate a `PaymentIntent` on your server and specify the `amount` to collect, the `eur` currency, the customer ID, and off\\_session as an argument for [setup future usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage). If you have an existing [Payment Intents](https://docs.stripe.com/payments/payment-intents) integration, add `sofort` to the list of [payment method types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types).\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=eur \\  -d \"payment_method_types[]\"=sofort \\  -d customer={{CUSTOMER_ID}} \\   -d setup_future_usage=off_session`\n\nThe PaymentIntent includes the payment method ID and a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\"), which is used on the client side to securely complete the payment process instead of passing the entire PaymentIntent object.\n\n[](#collect-payment-method-details)\n\nCreate a payment form on your client to collect the required billing details from the customer.\n\n​​To process SEPA Direct Debit payments, you must collect a mandate agreement from your customer. Display the following standard authorization text for your customer to implicitly sign the mandate.\n\nReplace _Rocket Rides_ with your company name.\n\nAuthorization text template\n\nBy providing your payment information and confirming this payment, you authorise (A)\n\nRocket Rides\n\nReplace this with your company name\n\nand Stripe, our payment service provider, to send instructions to your bank to debit your account and (B) your bank to debit your account in accordance with those instructions. As part of your rights, you are entitled to a refund from your bank under the terms and conditions of your agreement with your bank. A refund must be claimed within 8 weeks starting from the date on which your account was debited. Your rights are explained in a statement that you can obtain from your bank. You agree to receive notifications for future debits up to 2 days before they occur.\n\n​​Setting up a payment method or confirming a PaymentIntent creates the accepted mandate. As the customer has implicitly signed the mandate, you must communicate these terms in your form or through email.\n\n| Field | Value |\n| --- | --- |\n| `name` | The full name (first and last) of the customer. |\n| `email` | The customer’s email. |\n\n`<form id=\"payment-form\">   <div class=\"form-row\">     <label for=\"name\">       Name     </label>     <input id=\"name\" name=\"name\" required>   </div>    <div class=\"form-row\">     <label for=\"email\">       Email     </label>     <input id=\"email\" name=\"email\" required>   </div>    <button id=\"submit-button\">Pay with Sofort</button>    <!-- Display mandate acceptance text. -->   <div id=\"mandate-acceptance\">     By providing your payment information and confirming this payment, you     authorise (A) Rocket Rides and Stripe, our payment service provider, to     send instructions to your bank to debit your account and (B) your bank to     debit your account in accordance with those instructions. As part of your     rights, you are entitled to a refund from your bank under the terms and     conditions of your agreement with your bank. A refund must be claimed     within 8 weeks starting from the date on which your account was debited.     Your rights are explained in a statement that you can obtain from your     bank. You agree to receive notifications for future debits up to 2 days     before they occur.   </div>   <!-- Used to display form errors. -->   <div id=\"error-message\" role=\"alert\"></div> </form>`\n\n[](#submit-payment)\n\nRather than sending the entire PaymentIntent object to the client, use its [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret) from [step 3](#web-create-payment-intent). This is different from your API keys that authenticate Stripe API requests.\n\nThe client secret should still be handled carefully because it can complete the charge. Do not log it, embed it in URLs, or expose it to anyone but the customer.\n\nUse [stripe.confirmSofortPayment](https://docs.stripe.com/js/payment_intents/confirm_sofort_payment) to handle the redirect away from your page and to complete the payment. Add a [return\\_url](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-return_url) to this function to indicate where Stripe should redirect the user after they complete the payment on their bank’s website or mobile application.\n\nInclude your customer’s name and email address in `payment_method[billing_details]`. They will be used when generating the SEPA Direct Debit PaymentMethod.\n\n`var stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`); var accountholderName = document.getElementById('name'); var accountholderEmail = document.getElementById('email');  // Redirects away from the client const {error} = await stripe.confirmSofortPayment(   '{{PAYMENT_INTENT_CLIENT_SECRET}}',   {     payment_method: {       sofort: {         country: \"DE\"       },       billing_details: {         name: accountholderName.value,         email: accountholderEmail.value,       },     },     return_url: 'https://example.com/checkout/complete',   } );  if (error) {   // Inform the customer that there was an error. }`\n\nWhen your customer submits a payment, Stripe redirects them to the `return_url` and includes the following URL query parameters. The return page can use them to get the status of the PaymentIntent so it can display the payment status to the customer.\n\nWhen you specify the `return_url`, you can also append your own query parameters for use on the return page.\n\n| Parameter | Description |\n| --- | --- |\n| `payment_intent` | The unique identifier for the `PaymentIntent`. |\n| `payment_intent_client_secret` | The [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret) of the `PaymentIntent` object. |\n\nWhen the customer is redirected back to your site, you can use the `payment_intent_client_secret` to query for the PaymentIntent and display the transaction status to your customer.\n\n[](#charge-sepa-pm)\n\nWhen you need to charge your customer again, create a new PaymentIntent. Find the ID of the SEPA Direct Debit payment method by [retrieving](https://docs.stripe.com/api/payment_intents/retrieve) the previous PaymentIntent and [expanding](https://docs.stripe.com/api/expanding_objects) the `latest_charge` field where you will find the `generated_sepa_debit` ID inside of `payment_method_details`.\n\n`curl -G https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"expand[]\"=latest_charge`\n\nThe SEPA Direct Debit payment method ID is the `generated_sepa_debit` ID under [payment\\_method\\_details](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-sofort) in the response.\n\n`{   \"latest_charge\": {     \"payment_method_details\": {       \"sofort\": {         \"bank_code\": \"VAPE\",         \"bank_name\": \"VAN DE PUT & CO\",         \"bics\": \"VAPEBE22\",         \"iban_last4\": \"7061\",         \"generated_sepa_debit\": \"pm_1GrddXGf98efjktuBIi3ag7aJQ\",         \"preferred_language\": \"en\",         \"verified_name\": \"Jenny Rosen\"       },       \"type\": \"sofort\"     },   },   \"payment_method_options\": {     \"sofort\": {}`\n\nCreate a PaymentIntent with the SEPA Direct Debit and Customer IDs.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"payment_method_types[]\"=sepa_debit \\  -d amount=1099 \\  -d currency=eur \\  -d customer=  {{CUSTOMER_ID}}   \\  -d payment_method={{SEPA_DEBIT_PAYMENT_METHOD_ID}} \\   -d confirm=true`\n\n[](#test-your-integration)\n\nSet `payment_method.billing_details.email` to one of the following values to test the PaymentIntent status transitions. You can include your own custom text at the beginning of the email address followed by an underscore. For example, `test_1_generatedSepaDebitIntentsFail@example.com` results in a SEPA Direct Debit PaymentMethod that will always fail when used with a PaymentIntent.\n\n| Email Address | Description |\n| --- | --- |\n| generatedSepaDebitIntentsSucceedAustria@example.com | The SEPA Direct Debit PaymentIntent status transitions from `processing` to `succeeded`. |\n| generatedSepaDebitIntentsSucceedDelayedAustria@example.com | The SEPA Direct Debit PaymentIntent status transitions from `processing` to `succeeded` after three minutes. |\n| generatedSepaDebitIntentsFailAustria@example.com | The SEPA Direct Debit PaymentIntent status transitions from `processing` to `requires_payment_method`. |\n| generatedSepaDebitIntentsFailDelayedAustria@example.com | The SEPA Direct Debit PaymentIntent status transitions from `processing` to `requires_payment_method` after three minutes. |\n| generatedSepaDebitIntentsSucceedDisputedAustria@example.com | The SEPA Direct Debit PaymentIntent status transitions from `processing` to `succeeded`, but a dispute is created immediately. |\n\n[](#fulfillment)\n\nAs Sofort is a [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method, the PaymentIntent’s status remains in a [payment\\_intent.processing](https://docs.stripe.com/api/events/types#event_types-payment_intent.processing) state for up to 14 days from its creation (also known as the cutoff date). In test mode, the PaymentIntent’s status remains in the processing state for three minutes to simulate this.\n\n*   Stripe recommends fulfilling purchases during the processing state. On average, you can expect approximately 0.2% of Sofort payment attempts to fail after entering the processing state. This only applies to Sofort payments due to its low payment failure rate and doesn’t apply to other [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment methods.\n*   You may prefer to fulfill orders only after receiving the [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded) event. Stripe sends this event after the payment attempt is confirmed and the funds are guaranteed.\n*   If a customer doesn’t pay, Stripe sends the [payment\\_intent.failed](https://docs.stripe.com/api/events/types#event_types-payment_intent.failed) event and the PaymentIntent returns to a status of `requires_payment_method`.\n\nUse the Dashboard, a custom [webhook](https://docs.stripe.com/webhooks \"webhook\"), or a partner solution to receive these events and run actions, like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\n### Manually![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the Stripe Dashboard to view all your Stripe payments, send email receipts, handle payouts, or retry failed payments.\n\n*   [View your test payments in the Dashboard](https://dashboard.stripe.com/test/payments)\n\n### Custom code![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBuild a webhook handler to listen for events and build custom asynchronous payment flows. Test and debug your webhook integration locally with the Stripe CLI.\n\n*   [Build a custom webhook](https://docs.stripe.com/payments/handling-payment-events#build-your-own-webhook)\n\n### Prebuilt apps![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nHandle common business events, like [automation](https://stripe.partners/?f_category=automation) or [marketing and sales](https://stripe.partners/?f_category=marketing-and-sales), by integrating a partner application.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Accept a SEPA Direct Debit payment](https://docs.stripe.com/payments/sepa-debit/accept-a-payment)\n*   [Set up a subscription with SEPA Direct Debit in the EU](https://docs.stripe.com/billing/subscriptions/sepa-debit)",
  "title": "Save bank details during a Sofort payment | Stripe Documentation",
  "description": "Learn how to save your customer's IBAN bank details from a Sofort payment.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/sofort/set-up-payment",
  "markdown": "# Use Sofort to set up future SEPA Direct Debit payments\n\nSofort is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) each payment. With this integration, Stripe charges your customer 1 EUR through Sofort in order to collect their bank details. After your customer authenticates the payment, Stripe refunds the payment and store your customer’s [IBAN](https://en.wikipedia.org/wiki/International_Bank_Account_Number) in a [SEPA Direct Debit](https://docs.stripe.com/payments/sepa-debit) payment method. You can then use the SEPA Direct Debit [PaymentMethod](https://docs.stripe.com/api/payment_methods) to [accept payments](https://docs.stripe.com/payments/sepa-debit/accept-a-payment) or [set up a subscription](https://docs.stripe.com/billing/subscriptions/sepa-debit).\n\nYou can use [Checkout in setup mode](https://docs.stripe.com/payments/save-and-reuse?platform=checkout) to collect payment details and set up future SEPA Direct Debit payments using Sofort.\n\n[](#create-retrieve-customer)\n\nTo set up future SEPA Direct Debit payments using Sofort, you must attach the SEPA Direct Debit payment method to a [Customer](https://docs.stripe.com/api/customers \"Customers\").\n\nCreate a `Customer` object when your customer creates an account with your business. You can retrieve and use a customer’s stored payment method details later, if you associate the ID of the `Customer` object with your own internal representation of the customer.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#setup-a-payment)\n\nThis guide builds on the foundational [set up future payments](https://docs.stripe.com/payments/save-and-reuse?platform=checkout) Checkout integration and describes how to enable Sofort—it shows the differences between setting up future payments for cards and using Sofort.\n\n### Enable Sofort as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to add `sofort` to the list of `payment_method_types`.\n\n[](#charge-sepa-pm)\n\nWhen you need to charge your customer again, create a new PaymentIntent. Find the ID of the SEPA Direct Debit payment method by [retrieving](https://docs.stripe.com/api/setup_intents/retrieve) the SetupIntent and [expanding](https://docs.stripe.com/api/expanding_objects) the `latest_attempt` field where you will find the `generated_sepa_debit` ID inside of `payment_method_details`.\n\n`curl -G https://api.stripe.com/v1/setup_intents/{{SETUP_INTENT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"expand[]\"=latest_attempt`\n\nCreate a PaymentIntent with the SEPA Direct Debit and Customer IDs.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"payment_method_types[]\"=sepa_debit \\  -d amount=1099 \\  -d currency=eur \\  -d customer=  {{CUSTOMER_ID}}   \\  -d payment_method={{SEPA_DEBIT_PAYMENT_METHOD_ID}} \\   -d confirm=true`\n\n[](#testing)\n\nWhen testing your Checkout integration, select Sofort as the payment method and click the **Pay** button.",
  "title": "Use Sofort to set up future SEPA Direct Debit payments | Stripe Documentation",
  "description": "Learn how to save bank details from a Sofort payment and charge your customers later with SEPA Direct Debit.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/blik/accept-a-payment",
  "markdown": "# BLIK payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to accept BLIK, a common payment method in Poland.\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nBLIK is a [single use](https://docs.stripe.com/payments/payment-methods#usage) payment method that requires customers to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payments. When customers want to pay online using BLIK, they request a six-digit code from their banking application and enter it into the payment collection form.\n\nThe bank sends a push notification to your customer’s mobile phone asking to authorize the payment inside their banking application. The BLIK code is valid for 2 minutes; customers have 60 seconds to authorize the payment after starting a payment. After 60 seconds, it times out and they must request a new BLIK code. Customers typically approve BLIK payments in less than 10 seconds.\n\n[](#compatibility)\n\nA Checkout Session must satisfy all of the following conditions to support BLIK payments:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be expressed in Złoty (currency code `pln`).\n\n[](#accept-a-payment)\n\n#### Note\n\nThis guide builds on the foundational [accept a payment](https://docs.stripe.com/payments/accept-a-payment?ui=stripe-hosted) Checkout integration.\n\nUse this guide to learn how to enable BLIK—it shows the differences between accepting a card payment and using BLIK.\n\n### Enable BLIK as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `blik` to the list of `payment_method_types`.\n2.  Make sure all your `line_items` use the `pln` currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'blik'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `blik`, all line items must have currency: pln       currency: 'pln',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### What customers see![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInside their Banking app, customers see four lines related to each BLIK transaction:\n\n*   If you provided a value for `description` when creating the PaymentIntent, the first two lines display it (max 70 characters).\n*   If you provided a value for `statement_descriptor` (typically, an order ID), line 3 displays it (max 22 characters).\n*   The fourth line automatically populates with the URL of your website.\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select BLIK as the payment method and click the **Pay** button.\n\nUse test mode to test a successful payment by entering any 6-digit code (such as `123456`) in the payment form.\n\n[\n\n## Handle refunds and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#refunds-and-disputes)\n\nThe refund period for BLIK is up to 13 months after the original payment.\n\n[Customers](https://docs.stripe.com/api/customers \"Customers\") can dispute a payment through their bank up to 13 months after the original payment and there’s no appeal process.\n\nLearn more about [BLIK disputes](https://docs.stripe.com/payments/blik#disputed-payments).",
  "title": "BLIK payments | Stripe Documentation",
  "description": "Learn how to accept BLIK, a common payment method in Poland.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/cash_balance_transactions/object",
  "markdown": "# The Cash Balance Transaction object\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   #### \n    \n    adjusted\\_for\\_overdraftnullable object\n    \n    If this is a `type=adjusted_for_overdraft` transaction, contains information about what caused the overdraft, which triggered this transaction.\n    \n*   #### \n    \n    applied\\_to\\_paymentnullable object\n    \n    If this is a `type=applied_to_payment` transaction, contains information about how funds were applied.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n\n*   The customer whose available cash balance changed as a result of this transaction.\n    \n*   The total available cash balance for the specified currency after this transaction was applied. Represented in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal).\n    \n*   If this is a `type=funded` transaction, contains information about the funding.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The amount by which the cash balance changed, represented in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal). A positive value represents funds being added to the cash balance, a negative value represents funds being removed from the cash balance.\n    \n*   #### \n    \n    refunded\\_from\\_paymentnullable object\n    \n    If this is a `type=refunded_from_payment` transaction, contains information about the source of the refund.\n    \n*   #### \n    \n    transferred\\_to\\_balancenullable object\n    \n    If this is a `type=transferred_to_balance` transaction, contains the balance transaction linked to the transfer.\n    \n*   The type of the cash balance transaction. New types may be added in future. See [Customer Balance](https://docs.stripe.com/payments/customer-balance#types) to learn more about these types.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `adjusted_for_overdraft`<br><br>A cash balance transaction type: `adjusted_for_overdraft` |\n    | `applied_to_payment`<br><br>A cash balance transaction type: `applied_to_payment` |\n    | `funded`<br><br>A cash balance transaction type: `funded` |\n    | `funding_reversed`<br><br>A cash balance transaction type: `funding_reversed` |\n    | `refunded_from_payment`<br><br>A cash balance transaction type: `refunded_from_payment` |\n    | `return_canceled`<br><br>A cash balance transaction type: `return_canceled` |\n    | `return_initiated`<br><br>A cash balance transaction type: `return_initiated` |\n    | `transferred_to_balance`<br><br>A cash balance transaction type: `transferred_to_balance` |\n    | `unapplied_from_payment`<br><br>A cash balance transaction type: `unapplied_from_payment` |\n    \n*   #### \n    \n    unapplied\\_from\\_paymentnullable object\n    \n    If this is a `type=unapplied_from_payment` transaction, contains information about how funds were unapplied.\n    \n\nThe Cash Balance Transaction object\n\n```\n{  \"id\": \"ccsbtxn_1Na16B2eZvKYlo2CUhyw3dsF\",  \"object\": \"customer_cash_balance_transaction\",  \"created\": 1690829143,  \"currency\": \"eur\",  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"ending_balance\": 10000,  \"funded\": {    \"bank_transfer\": {      \"eu_bank_transfer\": {        \"bic\": \"BANKDEAAXXX\",        \"iban_last4\": \"7089\",        \"sender_name\": \"Sample Business GmbH\"      },      \"reference\": \"Payment for Invoice 28278FC-155\",      \"type\": \"eu_bank_transfer\"    }  },  \"livemode\": false,  \"net_amount\": 5000,  \"type\": \"funded\"}\n```\n\n## [Retrieve a cash balance transaction](https://docs.stripe.com/api/cash_balance_transactions/retrieve)\n\nRetrieves a specific cash balance transaction, which updated the customer’s [cash balance](https://docs.stripe.com/payments/customer-balance).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a cash balance transaction object if a valid identifier was provided.\n\nGET /v1/customers/:id/cash\\_balance\\_transactions/:id\n\n```\ncurl https://api.stripe.com/v1/customers/cus_9s6XKzkNRiz8i3/cash_balance_transactions/ccsbtxn_1Na16B2eZvKYlo2CUhyw3dsF \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ccsbtxn_1Na16B2eZvKYlo2CUhyw3dsF\",  \"object\": \"customer_cash_balance_transaction\",  \"created\": 1690829143,  \"currency\": \"eur\",  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"ending_balance\": 10000,  \"funded\": {    \"bank_transfer\": {      \"eu_bank_transfer\": {        \"bic\": \"BANKDEAAXXX\",        \"iban_last4\": \"7089\",        \"sender_name\": \"Sample Business GmbH\"      },      \"reference\": \"Payment for Invoice 28278FC-155\",      \"type\": \"eu_bank_transfer\"    }  },  \"livemode\": false,  \"net_amount\": 5000,  \"type\": \"funded\"}\n```\n\n## [List cash balance transactions](https://docs.stripe.com/api/cash_balance_transactions/list)\n\nReturns a list of transactions that modified the customer’s [cash balance](https://docs.stripe.com/payments/customer-balance).\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` cash balance transactions, starting after item `starting_after`. Each entry in the array is a separate cash balance transaction object. If no more items are available, the resulting array will be empty.\n\nGET /v1/customers/:id/cash\\_balance\\_transactions\n\n```\ncurl -G https://api.stripe.com/v1/customers/cus_9s6XKzkNRiz8i3/cash_balance_transactions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/customers/cus_9s6XKzkNRiz8i3/cash_balance_transactions\",  \"has_more\": false,  \"data\": [    {      \"id\": \"ccsbtxn_1Na16B2eZvKYlo2CUhyw3dsF\",      \"object\": \"customer_cash_balance_transaction\",      \"created\": 1690829143,      \"currency\": \"eur\",      \"customer\": \"cus_9s6XKzkNRiz8i3\",      \"ending_balance\": 10000,      \"funded\": {        \"bank_transfer\": {          \"eu_bank_transfer\": {            \"bic\": \"BANKDEAAXXX\",            \"iban_last4\": \"7089\",            \"sender_name\": \"Sample Business GmbH\"          },          \"reference\": \"Payment for Invoice 28278FC-155\",          \"type\": \"eu_bank_transfer\"        }      },      \"livemode\": false,      \"net_amount\": 5000,      \"type\": \"funded\"    }    {...}    {...}  ],}\n```\n\n## [Fund a test mode cash balance](https://docs.stripe.com/api/cash_balance_transactions/fund_cash_balance)Test helper\n\nCreate an incoming testmode bank transfer\n\n### Parameters\n\n*   Amount to be used for this test cash balance transaction. A positive integer representing how much to fund in the [smallest currency unit](https://docs.stripe.com/currencies#zero-decimal) (e.g., 100 cents to fund $1.00 or 100 to fund ¥100, a zero-decimal currency).\n    \n\n### More parameters\n\n### Returns\n\nReturns a specific cash balance transaction, which funded the customer’s [cash balance](https://docs.stripe.com/payments/customer-balance).\n\nPOST /v1/test\\_helpers/customers/:id/fund\\_cash\\_balance\n\n```\ncurl https://api.stripe.com/v1/test_helpers/customers/cus_9s6XKzkNRiz8i3/fund_cash_balance \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=5000 \\  -d currency=eur\n```\n\n```\n{  \"id\": \"ccsbtxn_1NlhIV2eZvKYlo2CKwRcXkii\",  \"object\": \"customer_cash_balance_transaction\",  \"created\": 1693612963,  \"currency\": \"eur\",  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"ending_balance\": 10000,  \"funded\": {    \"bank_transfer\": {      \"eu_bank_transfer\": {        \"bic\": \"BANKDEAAXXX\",        \"iban_last4\": \"7089\",        \"sender_name\": \"Sample Business GmbH\"      },      \"reference\": \"Payment for Invoice 28278FC-155\",      \"type\": \"eu_bank_transfer\"    }  },  \"livemode\": false,  \"net_amount\": 5000,  \"type\": \"funded\"}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The Cash Balance Transaction object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/payment-methods/bank-transfers/reversals-us",
  "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
  "title": "Page not found | Stripe Documentation",
  "description": "Sorry, but the page you were looking for couldn't be found.",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/payments/alma/accept-a-payment",
  "markdown": "# Accept a payment with Alma\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nAlma is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers choose to pay between 2, 3, or 4 installments. Customers are redirected from your website or app, authorize the payment with Alma, then return to your website or app. You get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) of whether the payment succeeded or failed.\n\n[](#compatibility)\n\nTo support Alma payments, a Checkout Session must satisfy all of the following conditions:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency.\n    *   If you have line items in different currencies, create separate Checkout Sessions for each currency.\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nThis guide describes how to enable Alma and shows the differences between accepting a card payment and using Alma.\n\n### Enable Alma as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `alma` to the list of `payment_method_types`.\n2.  Make sure all `line_items` use the same currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'alma'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `alma`, all line items must have currency: eur       currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select Alma as the payment method and click the **Pay** button.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/merchant_checkout_alma_visible.267e88e1e3ef1ac2708a9f5d39292f78.png)",
  "title": "Accept a payment with Alma | Stripe Documentation",
  "description": "Learn how to setup your integration with Alma.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/billie/accept-a-payment",
  "markdown": "# Accept a payment with Billie\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nBillie is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) payment method that offers businesses Pay by Invoice where they offer payment terms ranging from 7-120 days. Customers are redirected from your website or app, authorize the payment with Billie, then return to your website or app. You get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) of whether the payment succeeded or failed.\n\n[](#compatibility)\n\nTo support Billie payments, a Checkout Session must satisfy all of the following conditions:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency.\n    *   If you have line items in different currencies, create separate Checkout Sessions for each currency.\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nThis guide describes how to enable Billie and shows the differences between accepting a card payment and using Billie.\n\n### Enable Billie as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `billie` to the list of `payment_method_types`.\n2.  Make sure all `line_items` use the same currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'billie'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `billie`, all line items must have currency: eur       currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select Billie as the payment method and click the **Pay** button.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/merchant_checkout_billie_visible.47ad1871cd235bf8664ff95e77d01ee9.png)",
  "title": "Accept a payment with Billie | Stripe Documentation",
  "description": "Learn how to setup your integration with Billie.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/confirmation_tokens/create_confirmation_token",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/payments/flexible-features-migration",
  "markdown": "# Migrate to latest flexible payment scenarios\n\n## Adapt your beta advanced payment scenarios to the general release.\n\nStripe now supports several flexible payment scenarios for non-card-present transactions. If you’ve already integrated the private beta version of any of these features, this guide provides details to upgrade to the general release. For new integrations, use see the following guides for the features that interest you:\n\n*   [Increment an Authorization](https://docs.stripe.com/payments/incremental-authorization)\n*   [Capture more than the Authorized Amount](https://docs.stripe.com/payments/overcapture)\n*   [Place an Extended Hold on an Online Card Payment](https://docs.stripe.com/payments/extended-authorization)\n*   [Capture a Payment Multiple Times](https://docs.stripe.com/payments/multicapture)\n\nWe’ve incorporated the following feedback-driven improvements to these features:\n\n*   Detailed control over the features at the [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"PaymentIntent\") level.\n*   Clearer expectations regarding feature availability and usage after a [confirmation](https://docs.stripe.com/api/payment_intents/confirm \"confirm\") phase.\n\nEach of the flexible payment features has different requirements from its private beta integration. Choose the feature you need to upgrade and refer to the note at the top for changes and requirements specific to that feature.\n\n#### Changes from beta\n\nThe first step of this integration is now mandatory.\n\n[](#request-incremental-auth)\n\nYour [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"PaymentIntent\") must include a request for incremental authorization before confirmation.\n\n#### Warning\n\nThis formerly optional step is now mandatory.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d payment_method=pm_card_debit_incrementalAuthAuthorized \\  -d confirm=true \\  -d capture_method=manual \\  -d \"expand[]\"=latest_charge \\  -d \"payment_method_options[card][request_incremental_authorization_support]\"=true`\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d payment_method=pm_card_debit_incrementalAuthAuthorized \\  -d confirm=true \\  -d capture_method=manual \\  -d \"expand[]\"=latest_charge \\  -d \"payment_method_options[card][request_incremental_authorization]\"=if_available`\n\nThe response now returns the status of the incremental authorization request in the `payment_method_details.card.incremental_authorization.status` property of the [latest\\_charge](https://docs.stripe.com/api/charges/object). The status values is `available` or `unavailable` depending on the customer’s payment method.\n\n`// PaymentIntent Response {   \"id\": \"pi_ANipwO3zNfjeWODtRPIg\",   \"object\": \"payment_intent\",   \"amount\": 1000,   \"amount_capturable\": 1000,   \"amount_received\": 0,   ...   // if latest_charge is expanded   {     \"latest_charge\": {         \"amount\": 1000,         \"payment_method_details\": {           \"card\": {             \"incremental_authorization_supported\": true // or false           }         }         ...       }   } }`\n\n`// PaymentIntent Response {   \"id\": \"pi_ANipwO3zNfjeWODtRPIg\",   \"object\": \"payment_intent\",   \"amount\": 1000,   \"amount_capturable\": 1000,   \"amount_received\": 0,   ...   // if latest_charge is expanded   {     \"latest_charge\": {         \"amount\": 1000,         \"payment_method_details\": {           \"card\": {             \"incremental_authorization\": {                 \"status\": \"available\" // or \"unavailable\"             }           }         }         ...       }   } }`\n\n[](#use-incremental-auth)\n\n**No changes have been made to this step in comparison to the beta version.**\n\n`curl https://api.stripe.com/v1/payment_intents/pi_ANipwO3zNfjeWODtRPIg/increment_authorization \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1500`\n\n## Choose how to capture more than initially authorized amount![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTwo of the flexible payment features allow you to capture an amount larger than initially authorized:\n\n*   Over capture up to a certain limit ([Capture more than the authorized amount on a payment](https://docs.stripe.com/payments/overcapture))\n*   Increment the existing authorization and then capture the newly authorized amount ([Increment an authorization](https://docs.stripe.com/payments/incremental-authorization))\n\nThe example below showcases how these features can complement each other in the generally available version.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1000 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d payment_method=pm_card_visa \\  -d confirm=true \\  -d capture_method=manual \\  -d \"expand[]\"=latest_charge \\  -d \"payment_method_options[card][request_incremental_authorization]\"=if_available \\  -d \"payment_method_options[card][request_overcapture]\"=if_available`\n\n`// PaymentIntent Response {   \"object\": \"payment_intent\",   \"amount\": 1000,   ...   // if latest_charge is expanded   {     \"latest_charge\": {       \"payment_method_details\": {         \"card\": {           \"incremental_authorization\": {               \"status\": \"available\" // or \"unavailable\"           },           \"overcapture\": {               \"status\": \"available\", // or \"unavailable\"               \"maximum_capturable_amount\": 1200           }         }       }       ...     }   } }`\n\nUpon [confirmation](https://docs.stripe.com/api/payment_intents/confirm \"confirm\") of the PaymentIntent, if both features are available, you have options on the next steps to capture a larger amount than initially authorized:\n\n1.  Overcapture if the desired amount is equal or below the `maximum_capturable_amount`.\n2.  Perform an incremental authorization to the desired amount, then capture.",
  "title": "Migrate to latest flexible payment scenarios | Stripe Documentation",
  "description": "Adapt your beta advanced payment scenarios to the general release.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/satispay/accept-a-payment",
  "markdown": "# Accept a payment with Satispay\n\n#### Caution\n\nStripe automatically presents your customers payment method options by evaluating their currency, payment method restrictions, and other parameters. We recommend that you configure your payment methods from the Stripe Dashboard using the instructions in [Accept a payment](https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=stripe-hosted).\n\nIf you want to continue manually configuring the payment methods you present to your customers with Checkout, use this guide. Otherwise, update your integration to [configure payment methods in the Dashboard](https://docs.stripe.com/payments/dashboard-payment-methods).\n\nSatispay is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) payment method where customers are required to [authenticate](https://docs.stripe.com/payments/payment-methods#customer-actions) their payment. Customers pay by being redirected from your website or app, authorizing the payment with Satispay, then returning to your website or app. You get [immediate notification](https://docs.stripe.com/payments/payment-methods#payment-notification) of whether the payment succeeded or failed.\n\n[](#compatibility)\n\nTo support Satispay payments, a Checkout Session must satisfy all of the following conditions:\n\n*   [Prices](https://docs.stripe.com/api/prices \"Prices\") for all line items must be in the same currency.\n    *   If you have line items in different currencies, create separate Checkout Sessions for each currency.\n\n[](#accept-a-payment)\n\n#### Note\n\nBuild an integration to [accept a payment](https://docs.stripe.com/payments/accept-a-payment?integration=checkout) with Checkout before using this guide.\n\nThis guide describes how to enable Satispay and shows the differences between accepting a card payment and using Satispay.\n\n### Enable Satispay as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to:\n\n1.  Add `satispay` to the list of `payment_method_types`.\n2.  Make sure all `line_items` use the same currency.\n\n``Stripe::Checkout::Session.create({   mode: 'payment',   payment_method_types: ['card'],   payment_method_types: ['card', 'satispay'],   line_items: [{     price_data: {       currency: 'usd',       # To accept `satispay`, all line items must have currency: eur       currency: 'eur',       product_data: {         name: 'T-shirt',       },       unit_amount: 2000,     },     quantity: 1,   }],   success_url: '[https://example.com/success](https://example.com/success)',   cancel_url: '[https://example.com/cancel](https://example.com/cancel)', })``\n\n### Fulfill your orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter accepting a payment, learn how to [fulfill orders](https://docs.stripe.com/checkout/fulfillment).\n\n[](#test-integration)\n\nWhen testing your Checkout integration, select Satispay as the payment method and click the **Pay** button.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/merchant_checkout_satispay_visible.46054947bd1f4e146118175beb32d470.png)",
  "title": "Accept a payment with Satispay | Stripe Documentation",
  "description": "Learn how to setup your integration with Satispay.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/build-a-two-step-confirmation-legacy",
  "markdown": "# Build two-step confirmation | Stripe DocumentationThe Stripe Docs logo\n\n## Collect payment details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou’re ready to collect payment details on the client with the Payment Element. The Payment Element is a prebuilt UI component that simplifies collecting payment details for a variety of payment methods.\n\nThe Payment Element contains an iframe that securely sends payment information to Stripe over an HTTPS connection. Avoid placing the Payment Element within another iframe because some payment methods require redirecting to another page for payment confirmation.\n\nThe checkout page address must start with `https://` rather than `http://` for your integration to work. You can test your integration without using HTTPS, but remember to [enable it](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\n### Set up Stripe.js![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element is automatically available as a feature of Stripe.js. Include the Stripe.js script on your checkout page by adding it to the `head` of your HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI compliant. Don’t include the script in a bundle or host a copy of it yourself.\n\nCreate an instance of Stripe with the following JavaScript on your checkout page:\n\n`// Set your publishable key: remember to change this to your live publishable key in production // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\n### Add the Payment Element to your checkout page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element needs a place to live on your checkout page. Create an empty DOM node (container) with a unique ID in your payment form:\n\n`<form id=\"payment-form\">   <div id=\"payment-element\">     <!-- Elements will create form elements here -->   </div>   <button id=\"submit\">Submit</button>   <div id=\"error-message\">     <!-- Display error message to your customers here -->   </div> </form>`\n\nWhen the form above has loaded, create an Elements instance with the mode, amount, and currency. These values determine which payment methods are shown to your customer.\n\nThen, create an instance of the Payment Element and mount it to the container DOM node.\n\n`const options = {   mode: 'payment',   amount: 1099,   currency: 'usd',   paymentMethodCreation: 'manual',   // Fully customizable with appearance API.   appearance: {/*...*/}, };  // Set up Stripe.js and Elements to use in checkout form const elements = stripe.elements(options);  // Create and mount the Payment Element const paymentElement = elements.create('payment'); paymentElement.mount('#payment-element');`\n\nThe Payment Element renders a dynamic form that allows your customer to pick a payment method. The form automatically collects all necessary payments details for the payment method selected by the customer.\n\nYou can customize the Payment Element to match the design of your site by passing the [appearance object](https://docs.stripe.com/elements/appearance-api) into `options` when creating the `Elements` provider.\n\n### Collect addresses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, the Payment Element only collects the necessary billing address details. To collect a customer’s full billing address (to calculate the tax for digital goods and services, for example) or shipping address, use the [Address Element](https://docs.stripe.com/elements/address-element).",
  "title": "Build two-step confirmation | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/save-card-without-authentication",
  "markdown": "# Save a card without bank authentication\n\n​​Stripe allows you to collect card details and charge your customer at a later time. ​​In some regions, banks require a second form of authentication such as entering a code sent to a phone. ​​The extra step decreases conversion if your customer isn’t actively using your website or application because they aren’t available to authenticate the purchase.\n\n​​If you primarily do business in the US and Canada, banks don’t require authentication, so you can follow this simpler integration. This integration will be non-compliant in countries that require authentication for saving cards (for example, India) so building this integration means that expanding to other countries or adding other payment methods will require significant changes. Learn how to [save cards that require authentication](https://docs.stripe.com/payments/save-and-reuse).\n\n#### Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations, and network rules when saving a customer’s payment details. For instance, if you want to save their payment method for future use, such as charging them when they’re not actively using your website or app. Add terms to your website or app that state how you plan to save payment method details and allow customers to opt in. If you want to charge them when they’re offline, make sure your terms include the following:\n\n*   The customer’s agreement to your initiating a payment or a series of payments on their behalf for specified transactions.\n*   The anticipated timing and frequency of payments (for example, if the charges are for scheduled installments, subscription payments, or unscheduled top-ups).\n*   How you determine the payment amount.\n*   Your cancellation policy, if the payment method is for a subscription service.\n\nMake sure you keep a record of your customer’s written agreement to these terms.\n\n[](#web-collect-card-details)\n\nBefore starting this guide, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nBuild a checkout page to collect your customer’s card details. Use [Stripe Elements](https://docs.stripe.com/payments/elements), a UI library that helps you build custom payment forms. To get started with Elements, include the Stripe.js library with the following script on your checkout page.\n\nAlways load Stripe.js directly from js.stripe.com to remain PCI compliant. Don’t include the script in a bundle or host a copy of it yourself.\n\nTo best leverage Stripe’s [advanced fraud functionality](https://docs.stripe.com/radar), include this script on every page on your site, not just the checkout page. Including the script on every page [allows Stripe to detect suspicious behavior](https://docs.stripe.com/disputes/prevention/advanced-fraud-detection) that might indicate fraud when users browse your website.\n\n### Add Elements to your page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo securely collect card details from your customers, Elements creates UI components for you hosted by Stripe. They’re then placed into your payment form, rather than you creating them directly. To determine where to insert these components, create empty DOM elements (containers) with unique IDs within your payment form.\n\n`<input id=\"cardholder-name\" type=\"text\"> <!-- placeholder for Elements --> <div id=\"card-element\"></div> <div id=\"card-result\"></div> <button id=\"card-button\">Save Card</button>`\n\nNext, create an instance of the [Stripe object](https://docs.stripe.com/js#stripe-function), providing your publishable [API key](https://docs.stripe.com/keys) as the first parameter. After, create an instance of the [Elements object](https://docs.stripe.com/js#stripe-elements) and use it to mount a `card` element in the DOM.\n\nThe `card` Element simplifies the payment form and minimizes the number of required fields by inserting a single, flexible input field that securely collects all necessary card details.\n\nOtherwise, combine `cardNumber`, `cardExpiry`, and `cardCvc` Elements for a flexible, multi-input card form.\n\n#### Note\n\nAlways collect a postal code to increase card acceptance rates and reduce fraud.\n\nThe [single line Card Element](https://docs.stripe.com/js/element/other_element?type=card) automatically collects and sends the customer’s postal code to Stripe. If you build your payment form with split Elements ([Card Number](https://docs.stripe.com/js/element/other_element?type=cardNumber), [Expiry](https://docs.stripe.com/js/element/other_element?type=cardExpiry), [CVC](https://docs.stripe.com/js/element/other_element?type=cardCvc)), add a separate input field for the customer’s postal code.\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const elements = stripe.elements(); const cardElement = elements.create('card'); cardElement.mount('#card-element');`\n\nA Stripe Element contains an iframe that securely sends the payment information to Stripe over an HTTPS connection. The checkout page address must also start with `https://` rather than `http://` for your integration to work.\n\nYou can test your integration without using HTTPS. [Enable it](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\n`const cardholderName = document.getElementById('cardholder-name'); const cardButton = document.getElementById('card-button'); const resultContainer = document.getElementById('card-result');  cardButton.addEventListener('click', async (ev) => {   const {paymentMethod, error} = await stripe.createPaymentMethod({       type: 'card',       card: cardElement,       billing_details: {         name: cardholderName.value,       },     }   );    if (error) {     // Display error.message in your UI.     resultContainer.textContent = error.message;   } else {     // You have successfully created a new PaymentMethod     resultContainer.textContent = \"Created payment method: \" + paymentMethod.id;   } });`\n\nSend the resulting [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") ID to your server.\n\n[](#web-setup)\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-save-card)\n\nSave the card by attaching the PaymentMethod to a [Customer](https://docs.stripe.com/api/customers \"Customers\"). You can use the Customer object to store other information about your customer, such as shipping details and email address.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d payment_method={{PAYMENT_METHOD_ID}}`\n\nIf you have an existing Customer, you can attach the PaymentMethod to that object instead.\n\n`curl https://api.stripe.com/v1/payment_methods/{{PAYMENT_METHOD_ID}}/attach \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}    `\n\nAt this point, associate the Customer ID and the PaymentMethod ID with your own internal representation of a customer, if you have one.\n\n[](#web-charge-card)\n\nWhen you’re ready, fetch the PaymentMethod and Customer IDs to charge. You can do this by either storing the IDs of both in your database, or by using the Customer ID to look up all the Customer’s available PaymentMethods.\n\n`curl -G https://api.stripe.com/v1/payment_methods \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d type=card`\n\nUse the PaymentMethod ID and the Customer ID to create a new PaymentIntent. Set [error\\_on\\_requires\\_action](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-error_on_requires_action) to true to decline payments that require any actions from your customer, such as two-factor authentication.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d customer=  {{CUSTOMER_ID}}   \\  -d payment_method={{PAYMENT_METHOD_ID}} \\   -d error_on_requires_action=true \\  -d confirm=true`\n\nWhen a payment attempt fails, the request also fails with a 402 HTTP status code and Stripe throws an error. You need to notify your customer to return to your application (for example, by sending an email) to complete the payment. Check the code of the [Error](https://docs.stripe.com/api/errors/handling) raised by the Stripe API library or check the [last\\_payment\\_error.decline\\_code](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-last_payment_error-decline_code) on the PaymentIntent to inspect why the card issuer declined the payment.\n\n[\n\n## Handle any card errors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-handle-errors)\n\nNotify your customer that the payment failed and direct them to the payment form you made in Step 1 where they can enter new card details. Send that new PaymentMethod ID to your server to [attach](https://docs.stripe.com/api/payment_methods/attach) to the Customer object and make the payment again.\n\nAlternatively, you can create a PaymentIntent and save a card all in one API call if you have already created a Customer.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1099 \\  -d currency=usd \\  -d \"payment_method_types[]\"=card \\  -d customer=  {{CUSTOMER_ID}}   \\  -d payment_method={{PAYMENT_METHOD_ID}} \\   -d error_on_requires_action=true \\  -d confirm=true \\  -d setup_future_usage=on_session`\n\nSetting [setup\\_future\\_usage](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-setup_future_usage) to `on_session` indicates to Stripe that you wish to save the card for later, without triggering unnecessary authentication.\n\n[](#web-test-integration)\n\nStripe provides [test cards](https://docs.stripe.com/testing) you can use in test mode to simulate different cards’ behavior. Use these cards with any CVC, postal code, and expiry date in the future.\n\n| Number | Description |\n| --- | --- |\n|     | Succeeds and immediately processes the payment. |\n|     | Always fails with a decline code of `insufficient_funds`. |\n|     | Requires authentication, which in this integration will decline with a code of `authentication_required`. |\n\n## Upgrade your integration to handle card authentication ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis integration **declines cards that require authentication during payment**. If you start seeing many payments in the Dashboard listed as `Failed`, then it’s time to [upgrade your integration](https://docs.stripe.com/payments/payment-intents/upgrade-to-handle-actions). Stripe’s global integration handles these payments instead of automatically declining.",
  "title": "Save a card without bank authentication | Stripe Documentation",
  "description": "Collect card details and charge your customer at a later time.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/payment_methods/create_payment_method",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/payments/finalize-payments-on-the-server-legacy",
  "markdown": "# Finalize payments on the server\n\n## Finalize payments on the serverLegacy\n\n## Build an integration where you render the Payment Element before you create a PaymentIntent or SetupIntent, then confirm the Intent from your server.\n\n#### Warning\n\nThe Payment Element allows you to accept multiple payment methods using a single integration. In this integration, you’ll build a custom payment flow where you render the Payment Element, create the [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\"), and confirm the payment from your server.\n\n[\n\n## Set up Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#set-up-stripe)\n\nFirst, [create a Stripe account](https://dashboard.stripe.com/register) or [sign in](https://dashboard.stripe.com/login).\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[\n\n## Enable payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#enable-payment-methods)\n\n#### Caution\n\nThis integration path doesn’t support BLIK or pre-authorized debits that use the Automated Clearing Settlement System (ACSS).\n\nView your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) and enable the payment methods you want to support. You need at least one payment method enabled to create a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\").\n\nBy default, Stripe enables cards and other prevalent payment methods that can help you reach more customers, but we recommend turning on additional payment methods that are relevant for your business and customers. See [Payment method integration options](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) for product and payment method support, and our [pricing page](https://stripe.com/pricing/local-payment-methods) for fees.\n\n[\n\n## Collect payment details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-collect-payment-details)\n\nYou’re ready to collect payment details on the client with the Payment Element. The Payment Element is a prebuilt UI component that simplifies collecting payment details for a variety of payment methods.\n\nThe Payment Element contains an iframe that securely sends payment information to Stripe over an HTTPS connection. Avoid placing the Payment Element within another iframe because some payment methods require redirecting to another page for payment confirmation.\n\nThe checkout page address must start with `https://` rather than `http://` for your integration to work. You can test your integration without using HTTPS, but remember to [enable it](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\n### Set up Stripe.js![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element is automatically available as a feature of Stripe.js. Include the Stripe.js script on your checkout page by adding it to the `head` of your HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI compliant. Don’t include the script in a bundle or host a copy of it yourself.\n\nCreate an instance of Stripe with the following JavaScript on your checkout page:\n\n`// Set your publishable key: remember to change this to your live publishable key in production // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\n### Add the Payment Element to your checkout page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element needs a place to live on your checkout page. Create an empty DOM node (container) with a unique ID in your payment form:\n\n`<form id=\"payment-form\">   <div id=\"payment-element\">     <!-- Elements will create form elements here -->   </div>   <button id=\"submit\">Submit</button>   <div id=\"error-message\">     <!-- Display error message to your customers here -->   </div> </form>`\n\nWhen the form above has loaded, create an Elements instance with the mode, amount, and currency. These values determine which payment methods are shown to your customer.\n\nThen, create an instance of the Payment Element and mount it to the container DOM node.\n\n`const options = {   mode: 'payment',   amount: 1099,   currency: 'usd',   paymentMethodCreation: 'manual',   // Fully customizable with appearance API.   appearance: {/*...*/}, };  // Set up Stripe.js and Elements to use in checkout form const elements = stripe.elements(options);  // Create and mount the Payment Element const paymentElement = elements.create('payment'); paymentElement.mount('#payment-element');`\n\nThe Payment Element renders a dynamic form that allows your customer to pick a payment method. The form automatically collects all necessary payments details for the payment method selected by the customer.\n\nYou can customize the Payment Element to match the design of your site by passing the [appearance object](https://docs.stripe.com/elements/appearance-api) into `options` when creating the `Elements` provider.\n\n### Collect addresses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, the Payment Element only collects the necessary billing address details. To collect a customer’s full billing address (to calculate the tax for digital goods and services, for example) or shipping address, use the [Address Element](https://docs.stripe.com/elements/address-element).\n\n[\n\n## Create the PaymentMethod![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-pm)\n\nWhen the customer submits your payment form, you can create a [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") to send to your server for additional validation or business logic prior to confirmation.\n\n#### Caution\n\nYou must immediately use a created PaymentMethod to confirm a PaymentIntent and attach it to a [Customer](https://docs.stripe.com/api/customers \"Customers\") if you intend to use it in the future.\n\n`const form = document.getElementById('payment-form'); const submitBtn = document.getElementById('submit');  const handleError = (error) => {   const messageContainer = document.querySelector('#error-message');   messageContainer.textContent = error.message;   submitBtn.disabled = false; }  form.addEventListener('submit', async (event) => {   // We don't want to let default form submission happen here,   // which would refresh the page.   event.preventDefault();    // Prevent multiple form submissions   if (submitBtn.disabled) {     return;   }    // Disable form submission while loading   submitBtn.disabled = true;    // Trigger form validation and wallet collection   const {error: submitError} = await elements.submit();   if (submitError) {     handleError(submitError);     return;   }    // Create the PaymentMethod using the details collected by the Payment Element   const {error, paymentMethod} = await stripe.createPaymentMethod({     elements,     params: {       billing_details: {         name: 'Jenny Rosen',       }     }   });    if (error) {     // This point is only reached if there's an immediate error when     // creating the PaymentMethod. Show the error to your customer (for example, payment details incomplete)     handleError(error);     return;   }    // Create the PaymentIntent   const res = await fetch(\"/create-confirm-intent\", {     method: \"POST\",     headers: {\"Content-Type\": \"application/json\"},     body: JSON.stringify({       paymentMethodId: paymentMethod.id,     }),   });    const data = await res.json();    // Handle any next actions or errors. See the Handle any next actions step for implementation.   handleServerResponse(data); });`\n\n[\n\n## Create and submit the payment to Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#submit-payment)\n\nWhen the customer submits your payment form, use a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") to facilitate the confirmation and payment process. Create a PaymentIntent on your server with an `amount` and `currency` specified. In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default. You can manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow. To prevent malicious customers from choosing their own prices, always decide how much to charge on the server-side (a trusted environment) and not the client.\n\nYou can use the PaymentMethod sent by your client to create and confirm the PaymentIntent in a single request.\n\n#### Note\n\nWhen confirming an Intent from the server, pass `mandate_data` to acknowledge that you’ve shown the customer the proper [terms](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-terms) for collecting their payment details. To make sure you display the proper terms, all [Elements](https://docs.stripe.com/js/elements_object/create) options should match your Intent options (for example,`setup_future_usage`, `amount`, and `currency`).\n\n`const stripe = require(\"stripe\")(`\n\n`\"sk_test_4eC39HqLyjWDarjtT1zdp7dc\"`\n\n``); const express = require('express'); const app = express();  app.set('trust proxy', true); app.use(express.json()); app.use(express.static(\".\"));  app.post('/create-confirm-intent', async (req, res) => {   try {     const intent = await stripe.paymentIntents.create({       confirm: true,       amount: 1099,       currency: 'usd',       // In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default.       automatic_payment_methods: {enabled: true},       payment_method: req.body.paymentMethodId, // the PaymentMethod ID sent by your client       use_stripe_sdk: true,       return_url: '[https://example.com/order/123/complete](https://example.com/order/123/complete)',       mandate_data: {         customer_acceptance: {           type: \"online\",           online: {             ip_address: req.ip,             user_agent: req.get(\"user-agent\"),           },         },       },     });     res.json({       client_secret: intent.client_secret,       status: intent.status     });   } catch (err) {     res.json({       error: err     })   } });  app.listen(3000, () => {   console.log('Running on port 3000'); });``\n\n[\n\n## Handle any next actions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#next-actions)\n\nWhen the PaymentIntent requires additional action from the customer, such as authenticating with 3D Secure or redirecting to a different site, you need to trigger those actions. Use `stripe.handleNextAction` to trigger the UI for handling customer action and completing the payment.\n\n`const handleServerResponse = async (response) => {   if (response.error) {     // Show error from server on payment form   } else if (response.status === \"requires_action\") {     // Use Stripe.js to handle the required next action     const {       error,       paymentIntent     } = await stripe.handleNextAction({       clientSecret: response.clientSecret     });      if (error) {       // Show error from Stripe.js in payment form     } else {       // Actions handled, show success message     }   } else {     // No actions needed, show success message   } }`\n\n[\n\n## Disclose Stripe to your customers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#disclose-cookies)\n\nStripe collects information on customer interactions with Elements to provide services to you, prevent fraud, and improve its services. This includes using cookies and IP addresses to identify which Elements a customer saw during a single checkout session. You’re responsible for disclosing and obtaining all rights and consents necessary for Stripe to use data in these ways. For more information, visit our [privacy center](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe).",
  "title": "Finalize payments on the server | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/forwarding-third-party-processors",
  "markdown": "# Use Payment Element across multiple processors\n\n## Learn how to collect card details with Payment Element and use them with a third-party processor.\n\nUse [Payment Element](https://docs.stripe.com/payments/payment-element) to build a custom payment flow that allows you to collect card details, create a [PaymentMethod](https://docs.stripe.com/api/payment_methods), and [forward](https://docs.stripe.com/api/forwarding/request) the payment method to a third-party processor.\n\n#### Request access\n\nTo gain access to use Stripe’s forwarding service, contact [Stripe support](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fsupport.stripe.com%2Fcontact%2Femail%3Fquestion%3Dother%26topic%3Dpayment_apis%26subject%3DHow%2520can%2520I%2520access%2520the%2520Vault%2520and%2520Forward%2520API%3F%26body%3DWhat%2520endpoint%28s%29%2520would%2520you%2520like%2520to%2520forward%2520card%2520details%2520to%3F).\n\n[](#create-payment-method)\n\nUse a Payment Element to collect payment details. If you’re not integrated with the Payment Element, learn how to [get started](https://docs.stripe.com/payments/accept-a-payment). After the customer submits your payment form, call [stripe.createPaymentMethod](https://docs.stripe.com/js/payment_methods/create_payment_method) to create a [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\"). Pass the PaymentMethod ID to the ForwardingRequest endpoint on your server.\n\n`// Set your publishable key: remember to change this to your live publishable key in production // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);  const options = {     mode: 'payment',     amount: 1099,     currency: 'usd',     paymentMethodCreation: 'manual',     // Fully customizable with appearance API.     appearance: {         theme: 'stripe'     } };  // Set up Stripe.js and Elements to use in checkout form const elements = stripe.elements(options);  // Create and mount the Payment Element const paymentElement = elements.create('payment'); paymentElement.mount('#payment-element');  const form = document.getElementById('payment-form'); const submitBtn = document.getElementById('submit');  const handleError = (error) => {     const messageContainer = document.querySelector('#error-message');     messageContainer.textContent = error.message;     submitBtn.disabled = false; }  form.addEventListener('submit', async (event) => {     // We don't want to let default form submission happen here,     // which would refresh the page.     event.preventDefault();      // Prevent multiple form submissions     if (submitBtn.disabled) {         return;     }      // Disable form submission while loading     submitBtn.disabled = true;      // Trigger form validation and wallet collection     const { error: submitError } = await elements.submit();     if (submitError) {         handleError(submitError);         return;     }      // Create the PaymentMethod using the details collected by the Payment Element     const { error, paymentMethod } = await stripe.createPaymentMethod({         elements,         params: {             billing_details: {                 name: 'John Doe',             }         }     });      if (error) {         // This point is only reached if there's an immediate error when         // creating the PaymentMethod. Show the error to your customer (for example, payment details incomplete)         handleError(error);         return;     }      // Call the ForwardingRequest endpoint on your server     const res = await fetch(\"/create-forwarding-request\", {         method: \"POST\",         headers: { \"Content-Type\": \"application/json\" },         body: JSON.stringify({             paymentMethodId: paymentMethod.id,         }),     });     const data = await res.json();      // Handle the response or errors     handleServerResponse(data); });`\n\n[](#create-forwarding-request)\n\nContact Stripe support to [configure](https://docs.stripe.com/payments/vault-and-forward#configuring) your destination endpoint and begin forwarding transactions. Send the card details to this test endpoint before you connect your integration with your third-party processor.\n\n`const stripe = require(\"stripe\")(`\n\n`\"sk_test_4eC39HqLyjWDarjtT1zdp7dc\"`\n\n`); const express = require('express'); const app = express();  app.set('trust proxy', true); app.use(express.json()); app.use(express.static(\".\"));  app.post('/create-forwarding-request', async (req, res) => {     try {         const forwardedReq = await stripe.forwarding.requests.create(             {                 payment_method: req.body.paymentMethodId,                 url: '{{DESTINATION_ENDPOINT}}',                 request: {                     headers: [{                         name: 'Destination-API-Key',                         value: '{{DESTINATION_API_KEY}}'                     },{                         name: 'Destination-Idempotency-Key',                         value: '{{DESTINATION_IDEMPOTENCY_KEY}}'                     }],                     body: JSON.stringify({                         \"amount\": {                             \"currency\": \"USD\",                             \"value\": 1099                         },                         \"reference\": \"Your order number\",                         \"card\": {                             \"number\": \"\",                             \"exp_month\": \"\",                             \"exp_year\": \"\",                             \"cvc\": \"\",                             \"name\": \"\",                         }                     })                 },                 replacements: ['card_number', 'card_expiry', 'card_cvc', 'cardholder_name'],             }         );          if (forwardedReq.response_details.status != 200) {             // Return error based on third-party API response code         } else {             // Parse and handle the third-party API response             const forwardedResult = JSON.parse(forwardedReq.response_details.body);             res.json({                 status: forwardedReq.response_details.status             });         }     } catch (err) {         res.json({             error: err         });     } });  app.listen(3000, () => {     console.log('Running on port 3000'); });`\n\n[\n\n## Handle the Response![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-response)\n\nAfter you send the request, you must handle the response.\n\n`const handleServerResponse = async (response) => {   if (response.error) {     // Show error on payment form   } else if (response.status != 200) {     // Show error based on response code   } else {      // Parse the response body to render your payment form   } }`",
  "title": "Use Payment Element across multiple processors | Stripe Documentation",
  "description": "Learn how to collect card details with Payment Element and use them with a third-party processor.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/forwarding-token-vault",
  "markdown": "# Forward card details to your own token vault\n\nTo receive Primary Account Numbers (PANs) from the Vault and Forward API, your token vault must comply with the following specifications.\n\n### PCI compliance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMake sure that your vault is PCI compliant and provide a valid PCI Attestation of Compliance Stripe support. You must refresh this Attestation annually.\n\n### API Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour vault must contain HTTPS-based APIs that accept JSON and return JSON responses; other formats, such as XML or ISO 8583, aren’t supported.\n\nMake sure that the API contains a single, static URL. Configure this in the Vault and Forward API for security measures. Don’t change it between requests.\n\n### Authentication![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the Vault and Forward API to authenticate with your vault using HTTP header based authentication schemes, including bearer tokens.\n\nMake sure that every forwarded API call includes the authentication header to authenticate with your vault.\n\nWe don’t support client certificate authentication.\n\nYou can include additional headers in the forwarded request to your vault. However, you must verify that the configuration for your vault explicitly supports these headers. Reach out to Stripe support before you begin your integration to verify that the required additional headers are properly configured. Additionally, make sure that the headers don’t include any sensitive information, except for the bearer token.\n\n### Request body![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMake sure that your vault receives a JSON object with the following shape.\n\n`{   \"card\": {     \"number\": \"4242424242424242\",     \"exp_month\": \"12\",     \"exp_year\": \"2023\",     \"name\": \"John Doe\",     \"cvc\": \"123\"   },   \"metadata\": {     // Put your additional fields here   } }`\n\nYou can include additional fields as needed under the metadata key in this request. We pass them through without any additional processing.\n\nThe Vault and Forward API places the decrypted data into the following fields:\n\n| Field name | Type | Description |\n| --- | --- | --- |\n| `number` | String | The 15- or 16- digit PAN of the card |\n| `exp_month` | String | The month of the card expiry |\n| `exp_year` | String | The four-digit year of the card expiry |\n| `name` | String | The cardholder name |\n| `cvc` | String | The card verification value. This only becomes available for the first API request to Stripe after tokenization. We remove this information from our system after a short time period. Don’t store this value. |\n\nYou don’t need to support all of these fields in your vault. The Vault and Forward API places values into the request only if they’re present in the request body that you send to the Vault and Forward API. Additionally, you can include additional fields in the request body, which the Vault and Forward API passes to the receiving endpoint.\n\n### Response body![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Vault and Forward API doesn’t require any response body from your vault. If you provide a body, we return it to the caller of the Vault and Forward API. Don’t include any sensitive fields in your response.\n\n### Response codes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Vault and Forward API treats any response as a “success” and returns the same response code sent by the token vault endpoint back to the caller through Stripe. For example, when the upstream returns a status code of `400` to Stripe, the Vault and Forward API responds with a status code of `200`. The response body includes the upstream’s `400` response and error message.",
  "title": "Forward card details to your own token vault | Stripe Documentation",
  "description": "Learn how to update your in-house vault with card details stored on Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/transfers/object",
  "markdown": "# The Transfer object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Amount in cents to be transferred.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    destinationnullable stringExpandable\n    \n    ID of the Stripe account the transfer was sent to.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n\n### More attributes\n\n*   #### \n    \n    balance\\_transactionnullable stringExpandable\n    \n\n*   #### \n    \n    destination\\_paymentnullable stringExpandable\n    \n\n*   #### \n    \n    source\\_transactionnullable stringExpandable\n    \n*   #### \n    \n    source\\_typenullable string\n    \n*   #### \n    \n    transfer\\_groupnullable string\n    \n\n```\n{  \"id\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",  \"object\": \"transfer\",  \"amount\": 400,  \"amount_reversed\": 0,  \"balance_transaction\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",  \"created\": 1678043844,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"acct_1MTfjCQ9PRzxEwkZ\",  \"destination_payment\": \"py_1MiN3gQ9PRzxEwkZWTPGNq9o\",  \"livemode\": false,  \"metadata\": {},  \"reversals\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA/reversals\"  },  \"reversed\": false,  \"source_transaction\": null,  \"source_type\": \"card\",  \"transfer_group\": \"ORDER_95\"}\n```\n\n## [Create a transfer](https://docs.stripe.com/api/transfers/create)\n\nTo send funds from your Stripe account to a connected account, you create a new transfer object. Your [Stripe balance](#balance) must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.\n\n### Parameters\n\n*   #### \n    \n    destinationstringRequired\n    \n*   A positive integer in cents representing how much to transfer.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns a transfer object if there were no initial errors with the transfer creation (e.g., insufficient funds).\n\n```\ncurl https://api.stripe.com/v1/transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=400 \\  -d currency=usd \\  -d destination=acct_1MTfjCQ9PRzxEwkZ \\  -d transfer_group=ORDER_95\n```\n\n```\n{  \"id\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",  \"object\": \"transfer\",  \"amount\": 400,  \"amount_reversed\": 0,  \"balance_transaction\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",  \"created\": 1678043844,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"acct_1MTfjCQ9PRzxEwkZ\",  \"destination_payment\": \"py_1MiN3gQ9PRzxEwkZWTPGNq9o\",  \"livemode\": false,  \"metadata\": {},  \"reversals\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA/reversals\"  },  \"reversed\": false,  \"source_transaction\": null,  \"source_type\": \"card\",  \"transfer_group\": \"ORDER_95\"}\n```\n\n## [Update a transfer](https://docs.stripe.com/api/transfers/update)\n\nUpdates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\nThis request accepts only metadata as an argument.\n\n### Parameters\n\n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the transfer object if the update succeeded. This call will raise [an error](#errors) if update parameters are invalid.\n\n```\ncurl https://api.stripe.com/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",  \"object\": \"transfer\",  \"amount\": 400,  \"amount_reversed\": 0,  \"balance_transaction\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",  \"created\": 1678043844,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"acct_1MTfjCQ9PRzxEwkZ\",  \"destination_payment\": \"py_1MiN3gQ9PRzxEwkZWTPGNq9o\",  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"reversals\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA/reversals\"  },  \"reversed\": false,  \"source_transaction\": null,  \"source_type\": \"card\",  \"transfer_group\": \"ORDER_95\"}\n```\n\n## [Retrieve a transfer](https://docs.stripe.com/api/transfers/retrieve)\n\nRetrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a transfer object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",  \"object\": \"transfer\",  \"amount\": 400,  \"amount_reversed\": 0,  \"balance_transaction\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",  \"created\": 1678043844,  \"currency\": \"usd\",  \"description\": null,  \"destination\": \"acct_1MTfjCQ9PRzxEwkZ\",  \"destination_payment\": \"py_1MiN3gQ9PRzxEwkZWTPGNq9o\",  \"livemode\": false,  \"metadata\": {},  \"reversals\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA/reversals\"  },  \"reversed\": false,  \"source_transaction\": null,  \"source_type\": \"card\",  \"transfer_group\": \"ORDER_95\"}\n```\n\n## [List all transfers](https://docs.stripe.com/api/transfers/list)\n\nReturns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.\n\n### Parameters\n\n*   Only return transfers for the destination specified by this account ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` transfers, starting after transfer `starting_after`. Each entry in the array is a separate transfer object. If no more transfers are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/transfers \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/transfers\",  \"has_more\": false,  \"data\": [    {      \"id\": \"tr_1MiN3gLkdIwHu7ixNCZvFdgA\",      \"object\": \"transfer\",      \"amount\": 400,      \"amount_reversed\": 0,      \"balance_transaction\": \"txn_1MiN3gLkdIwHu7ixxapQrznl\",      \"created\": 1678043844,      \"currency\": \"usd\",      \"description\": null,      \"destination\": \"acct_1MTfjCQ9PRzxEwkZ\",      \"destination_payment\": \"py_1MiN3gQ9PRzxEwkZWTPGNq9o\",      \"livemode\": false,      \"metadata\": {},      \"reversals\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/transfers/tr_1MiN3gLkdIwHu7ixNCZvFdgA/reversals\"      },      \"reversed\": false,      \"source_transaction\": null,      \"source_type\": \"card\",      \"transfer_group\": \"ORDER_95\"    }    {...}    {...}  ],}\n```",
  "title": "The Transfer object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/elements_object/create_address_element",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/js/elements_object/create_express_checkout_element",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/api/forwarding/request/object",
  "markdown": "# The ForwardingRequest object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The PaymentMethod to insert into the forwarded request. Forwarding previously consumed PaymentMethods is allowed.\n    \n*   #### \n    \n    replacementsarray of enums\n    \n    The field kinds to be replaced in the forwarded request.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `card_cvc`<br><br>Replace the card cvc field |\n    | `card_expiry`<br><br>Replace the card expiry fields like month and year |\n    | `card_number`<br><br>Replace the card number field |\n    | `cardholder_name`<br><br>Replace the cardholder name field |\n    \n*   #### \n    \n    request\\_contextnullable object\n    \n    Context about the request from Stripe’s servers to the destination endpoint.\n    \n*   #### \n    \n    request\\_detailsnullable object\n    \n    The request that was sent to the destination endpoint. We redact any sensitive fields.\n    \n*   #### \n    \n    response\\_detailsnullable object\n    \n    The response that the destination endpoint returned to us. We redact any sensitive fields.\n    \n*   The destination URL for the forwarded request. Must be supported by the config.\n    \n\nThe ForwardingRequest object\n\n```\n{  \"id\": \"fwdreq_123\",  \"object\": \"forwarding.request\",  \"created\": 1234567890,  \"livemode\": false,  \"payment_method\": \"pm_456\",  \"request_details\": {    \"body\": \"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"424242******4242\\\",\\\"expiryMonth\\\":\\\"03\\\",\\\"expiryYear\\\":\\\"2030\\\",\\\"cvc\\\":\\\"***\\\",\\\"holderName\\\":\\\"First Last\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\",    \"headers\": [      {        \"name\": \"Destination-API-Key\",        \"value\": \"{{DESTINATION_API_KEY}}\"      },      {        \"name\": \"Destination-Idempotency-Key\",        \"value\": \"{{DESTINATION_IDEMPOTENCY_KEY}}\"      },      {        \"name\": \"Content-Type\",        \"value\": \"application/json\"      }    ],    \"http_method\": \"POST\"  },  \"request_context\": {    \"destination_ip_address\": \"35.190.113.80\",    \"destination_duration\": 234  },  \"response_details\": {    \"body\": \"{\\\"transactionId\\\":\\\"example1234\\\"}\",    \"headers\": [      {        \"name\": \"Content-Type\",        \"value\": \"application/json;charset=UTF-8\"      }    ],    \"status\": 200  },  \"url\": \"https://endpoint-url/v1/payments\",  \"replacements\": [    \"card_number\",    \"card_expiry\",    \"card_cvc\",    \"cardholder_name\"  ]}\n```\n\n## [Create a ForwardingRequest](https://docs.stripe.com/api/forwarding/forwarding_requests/create)\n\nCreates a ForwardingRequest object.\n\n### Parameters\n\n*   #### \n    \n    payment\\_methodstringRequired\n    \n    The PaymentMethod to insert into the forwarded request. Forwarding previously consumed PaymentMethods is allowed.\n    \n*   #### \n    \n    replacementsarray of enumsRequired\n    \n    The field kinds to be replaced in the forwarded request.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `card_cvc`<br><br>Replace the card cvc field |\n    | `card_expiry`<br><br>Replace the card expiry fields like month and year |\n    | `card_number`<br><br>Replace the card number field |\n    | `cardholder_name`<br><br>Replace the cardholder name field |\n    \n*   The request body and headers to be sent to the destination endpoint.\n    \n*   The destination URL for the forwarded request. Must be supported by the config.\n    \n\n### Returns\n\nReturns a ForwardingRequest object.\n\nPOST /v1/forwarding/requests\n\n```\ncurl https://api.stripe.com/v1/forwarding/requests \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  --data-urlencode url=\"https://endpoint-url/v1/payments\" \\  -d payment_method=pm_card_visa \\  -d \"replacements[0]\"=card_number \\  -d \"replacements[1]\"=card_expiry \\  -d \"replacements[2]\"=card_cvc \\  -d \"replacements[3]\"=cardholder_name \\  --data-urlencode \"request[body]\"=\"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"\\\",\\\"expiryMonth\\\":\\\"\\\",\\\"expiryYear\\\":\\\"\\\",\\\"cvc\\\":\\\"\\\",\\\"holderName\\\":\\\"\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\" \\  -d \"request[headers][0][name]\"=Destination-API-Key \\  -d \"request[headers][0][value]\"={{DESTINATION_API_KEY}} \\  -d \"request[headers][1][name]\"=Destination-Idempotency-Key \\  -d \"request[headers][1][value]\"={{DESTINATION_IDEMPOTENCY_KEY}}\n```\n\n```\n{  \"id\": \"fwdreq_123\",  \"object\": \"forwarding.request\",  \"created\": 1234567890,  \"livemode\": false,  \"payment_method\": \"pm_456\",  \"request_details\": {    \"body\": \"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"424242******4242\\\",\\\"expiryMonth\\\":\\\"03\\\",\\\"expiryYear\\\":\\\"2030\\\",\\\"cvc\\\":\\\"***\\\",\\\"holderName\\\":\\\"First Last\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\",    \"headers\": [      {        \"name\": \"Destination-API-Key\",        \"value\": \"{{DESTINATION_API_KEY}}\"      },      {        \"name\": \"Destination-Idempotency-Key\",        \"value\": \"{{DESTINATION_IDEMPOTENCY_KEY}}\"      },      {        \"name\": \"Content-Type\",        \"value\": \"application/json\"      }    ],    \"http_method\": \"POST\"  },  \"request_context\": {    \"destination_ip_address\": \"35.190.113.80\",    \"destination_duration\": 234  },  \"response_details\": {    \"body\": \"{\\\"transactionId\\\":\\\"example1234\\\"}\",    \"headers\": [      {        \"name\": \"Content-Type\",        \"value\": \"application/json;charset=UTF-8\"      }    ],    \"status\": 200  },  \"url\": \"https://endpoint-url/v1/payments\",  \"replacements\": [    \"card_number\",    \"card_expiry\",    \"card_cvc\",    \"cardholder_name\"  ]}\n```\n\n## [Retrieve a ForwardingRequest](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)\n\nRetrieves a ForwardingRequest object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a ForwardingRequest object.\n\nGET /v1/forwarding/requests/:id\n\n```\ncurl https://api.stripe.com/v1/forwarding/requests/fwdreq_123 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fwdreq_123\",  \"object\": \"forwarding.request\",  \"created\": 1234567890,  \"livemode\": false,  \"payment_method\": \"pm_456\",  \"request_details\": {    \"body\": \"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"424242******4242\\\",\\\"expiryMonth\\\":\\\"03\\\",\\\"expiryYear\\\":\\\"2030\\\",\\\"cvc\\\":\\\"***\\\",\\\"holderName\\\":\\\"First Last\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\",    \"headers\": [      {        \"name\": \"Destination-API-Key\",        \"value\": \"{{DESTINATION_API_KEY}}\"      },      {        \"name\": \"Destination-Idempotency-Key\",        \"value\": \"{{DESTINATION_IDEMPOTENCY_KEY}}\"      },      {        \"name\": \"Content-Type\",        \"value\": \"application/json\"      }    ],    \"http_method\": \"POST\"  },  \"request_context\": {    \"destination_ip_address\": \"35.190.113.80\",    \"destination_duration\": 234  },  \"response_details\": {    \"body\": \"{\\\"transactionId\\\":\\\"example1234\\\"}\",    \"headers\": [      {        \"name\": \"Content-Type\",        \"value\": \"application/json;charset=UTF-8\"      }    ],    \"status\": 200  },  \"url\": \"https://endpoint-url/v1/payments\",  \"replacements\": [    \"card_number\",    \"card_expiry\",    \"card_cvc\",    \"cardholder_name\"  ]}\n```\n\n## [List all ForwardingRequests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)\n\nLists all ForwardingRequest objects.\n\n### Parameters\n\n*   Similar to other List endpoints, filters results based on created timestamp. You can pass gt, gte, lt, and lte timestamp values.\n    \n*   A pagination cursor to fetch the previous page of the list. The value must be a ForwardingRequest ID.\n    \n*   A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.\n    \n*   A pagination cursor to fetch the next page of the list. The value must be a ForwardingRequest ID.\n    \n\n### Returns\n\nReturns a list of ForwardingRequest objects.\n\nGET /v1/forwarding/requests\n\n```\ncurl -G https://api.stripe.com/v1/forwarding/requests \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/forwarding/requests\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fwdreq_123\",      \"object\": \"forwarding.request\",      \"created\": 1234567890,      \"livemode\": false,      \"payment_method\": \"pm_456\",      \"request_details\": {        \"body\": \"{\\\"amount\\\":{\\\"value\\\":1000,\\\"currency\\\":\\\"usd\\\"},\\\"paymentMethod\\\":{\\\"number\\\":\\\"424242******4242\\\",\\\"expiryMonth\\\":\\\"03\\\",\\\"expiryYear\\\":\\\"2030\\\",\\\"cvc\\\":\\\"***\\\",\\\"holderName\\\":\\\"First Last\\\"},\\\"reference\\\":\\\"{{REFERENCE_ID}}\\\"}\",        \"headers\": [          {            \"name\": \"Destination-API-Key\",            \"value\": \"{{DESTINATION_API_KEY}}\"          },          {            \"name\": \"Destination-Idempotency-Key\",            \"value\": \"{{DESTINATION_IDEMPOTENCY_KEY}}\"          },          {            \"name\": \"Content-Type\",            \"value\": \"application/json\"          }        ],        \"http_method\": \"POST\"      },      \"request_context\": {        \"destination_ip_address\": \"35.190.113.80\",        \"destination_duration\": 234      },      \"response_details\": {        \"body\": \"{\\\"transactionId\\\":\\\"example1234\\\"}\",        \"headers\": [          {            \"name\": \"Content-Type\",            \"value\": \"application/json;charset=UTF-8\"          }        ],        \"status\": 200      },      \"url\": \"https://endpoint-url/v1/payments\",      \"replacements\": [        \"card_number\",        \"card_expiry\",        \"card_cvc\",        \"cardholder_name\"      ]    }    {...}    {...}  ],}\n```",
  "title": "The ForwardingRequest object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/finalize-payments-on-the-server-legacy?type=payment",
  "markdown": "# Finalize payments on the server\n\n## Finalize payments on the serverLegacy\n\n## Build an integration where you render the Payment Element before you create a PaymentIntent or SetupIntent, then confirm the Intent from your server.\n\n#### Warning\n\nThe Payment Element allows you to accept multiple payment methods using a single integration. In this integration, you’ll build a custom payment flow where you render the Payment Element, create the [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\"), and confirm the payment from your server.\n\n[\n\n## Set up Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#set-up-stripe)\n\nFirst, [create a Stripe account](https://dashboard.stripe.com/register) or [sign in](https://dashboard.stripe.com/login).\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[\n\n## Enable payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#enable-payment-methods)\n\n#### Caution\n\nThis integration path doesn’t support BLIK or pre-authorized debits that use the Automated Clearing Settlement System (ACSS).\n\nView your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) and enable the payment methods you want to support. You need at least one payment method enabled to create a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\").\n\nBy default, Stripe enables cards and other prevalent payment methods that can help you reach more customers, but we recommend turning on additional payment methods that are relevant for your business and customers. See [Payment method integration options](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) for product and payment method support, and our [pricing page](https://stripe.com/pricing/local-payment-methods) for fees.\n\n[\n\n## Collect payment details![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#web-collect-payment-details)\n\nYou’re ready to collect payment details on the client with the Payment Element. The Payment Element is a prebuilt UI component that simplifies collecting payment details for a variety of payment methods.\n\nThe Payment Element contains an iframe that securely sends payment information to Stripe over an HTTPS connection. Avoid placing the Payment Element within another iframe because some payment methods require redirecting to another page for payment confirmation.\n\nThe checkout page address must start with `https://` rather than `http://` for your integration to work. You can test your integration without using HTTPS, but remember to [enable it](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\n### Set up Stripe.js![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element is automatically available as a feature of Stripe.js. Include the Stripe.js script on your checkout page by adding it to the `head` of your HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI compliant. Don’t include the script in a bundle or host a copy of it yourself.\n\nCreate an instance of Stripe with the following JavaScript on your checkout page:\n\n`// Set your publishable key: remember to change this to your live publishable key in production // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\n### Add the Payment Element to your checkout page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element needs a place to live on your checkout page. Create an empty DOM node (container) with a unique ID in your payment form:\n\n`<form id=\"payment-form\">   <div id=\"payment-element\">     <!-- Elements will create form elements here -->   </div>   <button id=\"submit\">Submit</button>   <div id=\"error-message\">     <!-- Display error message to your customers here -->   </div> </form>`\n\nWhen the form above has loaded, create an Elements instance with the mode, amount, and currency. These values determine which payment methods are shown to your customer.\n\nThen, create an instance of the Payment Element and mount it to the container DOM node.\n\n`const options = {   mode: 'payment',   amount: 1099,   currency: 'usd',   paymentMethodCreation: 'manual',   // Fully customizable with appearance API.   appearance: {/*...*/}, };  // Set up Stripe.js and Elements to use in checkout form const elements = stripe.elements(options);  // Create and mount the Payment Element const paymentElement = elements.create('payment'); paymentElement.mount('#payment-element');`\n\nThe Payment Element renders a dynamic form that allows your customer to pick a payment method. The form automatically collects all necessary payments details for the payment method selected by the customer.\n\nYou can customize the Payment Element to match the design of your site by passing the [appearance object](https://docs.stripe.com/elements/appearance-api) into `options` when creating the `Elements` provider.\n\n### Collect addresses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, the Payment Element only collects the necessary billing address details. To collect a customer’s full billing address (to calculate the tax for digital goods and services, for example) or shipping address, use the [Address Element](https://docs.stripe.com/elements/address-element).\n\n[\n\n## Create the PaymentMethod![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#create-pm)\n\nWhen the customer submits your payment form, you can create a [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") to send to your server for additional validation or business logic prior to confirmation.\n\n#### Caution\n\nYou must immediately use a created PaymentMethod to confirm a PaymentIntent and attach it to a [Customer](https://docs.stripe.com/api/customers \"Customers\") if you intend to use it in the future.\n\n`const form = document.getElementById('payment-form'); const submitBtn = document.getElementById('submit');  const handleError = (error) => {   const messageContainer = document.querySelector('#error-message');   messageContainer.textContent = error.message;   submitBtn.disabled = false; }  form.addEventListener('submit', async (event) => {   // We don't want to let default form submission happen here,   // which would refresh the page.   event.preventDefault();    // Prevent multiple form submissions   if (submitBtn.disabled) {     return;   }    // Disable form submission while loading   submitBtn.disabled = true;    // Trigger form validation and wallet collection   const {error: submitError} = await elements.submit();   if (submitError) {     handleError(submitError);     return;   }    // Create the PaymentMethod using the details collected by the Payment Element   const {error, paymentMethod} = await stripe.createPaymentMethod({     elements,     params: {       billing_details: {         name: 'Jenny Rosen',       }     }   });    if (error) {     // This point is only reached if there's an immediate error when     // creating the PaymentMethod. Show the error to your customer (for example, payment details incomplete)     handleError(error);     return;   }    // Create the PaymentIntent   const res = await fetch(\"/create-confirm-intent\", {     method: \"POST\",     headers: {\"Content-Type\": \"application/json\"},     body: JSON.stringify({       paymentMethodId: paymentMethod.id,     }),   });    const data = await res.json();    // Handle any next actions or errors. See the Handle any next actions step for implementation.   handleServerResponse(data); });`\n\n[\n\n## Create and submit the payment to Stripe![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#submit-payment)\n\nWhen the customer submits your payment form, use a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") to facilitate the confirmation and payment process. Create a PaymentIntent on your server with an `amount` and `currency` specified. In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default. You can manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow. To prevent malicious customers from choosing their own prices, always decide how much to charge on the server-side (a trusted environment) and not the client.\n\nYou can use the PaymentMethod sent by your client to create and confirm the PaymentIntent in a single request.\n\n#### Note\n\nWhen confirming an Intent from the server, pass `mandate_data` to acknowledge that you’ve shown the customer the proper [terms](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-terms) for collecting their payment details. To make sure you display the proper terms, all [Elements](https://docs.stripe.com/js/elements_object/create) options should match your Intent options (for example,`setup_future_usage`, `amount`, and `currency`).\n\n`const stripe = require(\"stripe\")(`\n\n`\"sk_test_4eC39HqLyjWDarjtT1zdp7dc\"`\n\n``); const express = require('express'); const app = express();  app.set('trust proxy', true); app.use(express.json()); app.use(express.static(\".\"));  app.post('/create-confirm-intent', async (req, res) => {   try {     const intent = await stripe.paymentIntents.create({       confirm: true,       amount: 1099,       currency: 'usd',       // In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default.       automatic_payment_methods: {enabled: true},       payment_method: req.body.paymentMethodId, // the PaymentMethod ID sent by your client       use_stripe_sdk: true,       return_url: '[https://example.com/order/123/complete](https://example.com/order/123/complete)',       mandate_data: {         customer_acceptance: {           type: \"online\",           online: {             ip_address: req.ip,             user_agent: req.get(\"user-agent\"),           },         },       },     });     res.json({       client_secret: intent.client_secret,       status: intent.status     });   } catch (err) {     res.json({       error: err     })   } });  app.listen(3000, () => {   console.log('Running on port 3000'); });``\n\n[\n\n## Handle any next actions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#next-actions)\n\nWhen the PaymentIntent requires additional action from the customer, such as authenticating with 3D Secure or redirecting to a different site, you need to trigger those actions. Use `stripe.handleNextAction` to trigger the UI for handling customer action and completing the payment.\n\n`const handleServerResponse = async (response) => {   if (response.error) {     // Show error from server on payment form   } else if (response.status === \"requires_action\") {     // Use Stripe.js to handle the required next action     const {       error,       paymentIntent     } = await stripe.handleNextAction({       clientSecret: response.clientSecret     });      if (error) {       // Show error from Stripe.js in payment form     } else {       // Actions handled, show success message     }   } else {     // No actions needed, show success message   } }`\n\n[\n\n## Disclose Stripe to your customers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#disclose-cookies)\n\nStripe collects information on customer interactions with Elements to provide services to you, prevent fraud, and improve its services. This includes using cookies and IP addresses to identify which Elements a customer saw during a single checkout session. You’re responsible for disclosing and obtaining all rights and consents necessary for Stripe to use data in these ways. For more information, visit our [privacy center](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe).",
  "title": "Finalize payments on the server | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/elements_object/create",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/js/element/other_element?type=cardCvc",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/js/elements_object/create_link_authentication_element",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/get-started/data-migrations/pan-export",
  "markdown": "# Request a payment data export\n\n## Securely export sensitive payment data.\n\nWe believe our customers own the sensitive data they entrust to Stripe. We make sure that you have access to this data—even if you’re moving elsewhere. If you decide to leave Stripe for another payment processor, we’ll work with your new processor’s team to securely transfer your credit card data.\n\nTo meet [PCI compliance](https://docs.stripe.com/security/guide#validating-pci-compliance \"PCI compliance\") obligations, we can only transfer your card data to another PCI DSS Level 1-compliant payment processor. Stripe requires the following information about the processor receiving the data:\n\n*   The processor’s current PCI Attestation of Compliance (AOC), or their listing on [Visa’s Global Registry of Service Providers](https://usa.visa.com/splisting/splistingindex.html).\n    \n*   The processor’s PGP public encryption key, which must be 4096 bits or greater in length. This key must be hosted over HTTPS on one of the processor’s domain names referenced in their AOC or Visa Registry listing.\n    \n\nAfter you [let us know](https://support.stripe.com/contact?email=true&subject=Migration+away+from+Stripe) who your new payment processor is, we can usually confirm if they meet these requirements.\n\n## Migratable data ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe can help you migrate your customer card information to a new payment processor. To do this securely, Stripe prepares an encrypted JSON export file containing your data, including the card details of your customers, email addresses, and any attached [metadata](https://docs.stripe.com/api#metadata). We then arrange a secure transfer with your new processor, who uses this file to import the data into their system. You can start the migration process by [contacting us](https://support.stripe.com/contact?email=true&subject=Migration+away+from+Stripe) with the name of your new payment processor.\n\n`{   \"customers\": [     {       \"id\": \"cus_abc123def456\",       \"email\": \"jenny.rosen@example.com\",       \"description\": \"Jenny Rosen\",       \"default_source\": \"card_edf214abc789\",       \"metadata\": {         \"color_preference\": \"turquoise\",         ...       },       \"cards\": [         {           \"id\": \"card_edf214abc789\",           \"number\":\"4242424242424242\",           \"name\": \"Jenny Rosen\",           \"exp_month\": 1,           \"exp_year\": 2020,           \"address_line1\": \"123 Main St.\",           \"address_line2\": null,           \"address_city\": \"Springfield\",           \"address_state\": \"MA\",           \"address_zip\": \"01101\",           \"address_country\": \"US\"         },         ...       ]     },     ...   ] }`\n\nStripe doesn’t export your account’s payment history, subscriptions, or other objects. Instead, use the API or Dashboard to retrieve this information. You can continue to access your data through the Dashboard and API after you stop processing payments with us, as long as you don’t close or delete your account.",
  "title": "Request a payment data export | Stripe Documentation",
  "description": "Securely export sensitive payment data.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/mx-installments",
  "markdown": "# Accept installment card payments in Mexico\n\n## Learn about credit card payments using an installment plan.\n\nInstallments (meses sin intereses) are a type of credit card payment in Mexico that allows customers to split purchases over multiple billing statements. You receive the full amount (minus a fee) as if it were a normal charge, and the customer’s bank handles collecting the money over time.\n\nStripe supports installment payments for Stripe Mexico accounts using the Payment Intents and Payment Methods APIs, Checkout, Invoicing, Payment Element, and Payment Links.\n\nGet started with accepting [installments](https://docs.stripe.com/payments/meses-sin-intereses/accept-a-payment).\n\n## Connect compatibility ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use [Stripe Connect](https://docs.stripe.com/connect/overview) with installments to process payments on behalf of connected accounts. As a platform, you can set the default installment configuration for your connected accounts in Mexico. Standard connected accounts can override these settings in the Dashboard.\n\n## Connectors and plugins ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA variety of connectors and plugins that integrate with Stripe also support installments. These connectors provide no-code and low-code solutions for accepting a wide range of local payment methods using Stripe, including installments.\n\nFor example, the [latest version of the Stripe Connector for Adobe Commerce](https://docs.stripe.com/connectors/adobe-commerce/install#upgrade) has built-in support for accepting payments with installments. For information regarding setup instructions and features for specific plugins, contact the plugin developers directly.\n\nIf you use a plugin that doesn’t yet support installments, you can [contact our support team](https://support.stripe.com/) to let us know, and we’ll do our best to see if we can enable installments for that plugin.\n\n## Fees ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you accept a payment with installments, an additional fee is added to the standard credit card transaction fee. The fee varies according to the number of installments, or months, applied to the transaction.\n\n| **Installment Plan Duration** | **Default Minimum Transaction Amount** | **Additional Fee %** |\n| --- | --- | --- |\n| 3 months | 300.00 MXN | 5%  |\n| 6 months | 600.00 MXN | 7.5% |\n| 9 months | 900.00 MXN | 10% |\n| 12 months | 1,200.00 MXN | 12.5% |\n| 18 months | 1,800.00 MXN | 17.5% |\n| 24 months | 2,400.00 MXN | 22.5% |\n\n## Requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThere are restrictions on which transactions and cards can use meses sin intereses. You don’t need to implement these rules yourself. Stripe automatically determines meses sin intereses eligibility after you set up the payment method.\n\n*   Stripe only supports installments for Stripe Mexico accounts.\n*   The payment method must be a credit card issued in Mexico.\n*   The card must be a consumer card–installments don’t support corporate cards.\n*   The card must be issued by one of our [supported issuers](https://docs.stripe.com/payments/mx-installments#supported-cards).\n*   The currency value must be MXN (pesos).\n*   The total payment amount must be above a [minimum transaction amount](https://docs.stripe.com/payments/mx-installments#fees). Stripe provides a minimum transaction amount based on the number of months in the plan selected. You can specify which installment plans you want to enable and define your own custom minimum and maximum transaction amounts by [configuring custom installment settings](https://docs.stripe.com/payments/meses-sin-intereses/accept-a-payment#custom-settings) in the Dashboard.\n\n## Supported cards ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can accept payments in Installments on cards from the following issuers:\n\n*   Afirme\n*   American Express\n*   BanBajío\n*   Banjercito\n*   BBVA\n*   Banca Mifel\n*   Banco Azteca\n*   Banco Famsa\n*   Banco Invex\n*   Banco Multiva\n*   Banorte\n*   Banregio\n*   Citibanamex (3-, 6-, 9-, and 12-month plans only)\n*   Falabella\n*   Hey Banco\n*   HSBC\n*   Inbursa\n*   Konfio\n*   Liverpool\n*   NanoPay\n*   Nubank\n*   RappiCard\n*   Santander\n*   Scotiabank",
  "title": "Accept installment card payments in Mexico | Stripe Documentation",
  "description": "Learn about credit card payments using an installment plan.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/element/other_element?type=cardExpiry",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/js/element/link_authentication_element",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/payments/card-element",
  "markdown": "# Card Element quickstart | Stripe DocumentationThe Stripe Docs logo\n\nSearch the docs or ask a question",
  "title": "Card Element quickstart | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/customize-payment-methods",
  "markdown": "# Customize payment methods | Stripe DocumentationThe Stripe Docs logo\n\n## Choose how the Payment Element displays payment methods.\n\nThe Payment Element supports many payment methods. It displays the payment methods you have enabled, hides any that won’t work for the current transaction, and sorts them dynamically for the best conversion rates.\n\nYou can customize its behavior in these ways:\n\n*   [Enable different payment methods](#enable-different-payment-methods).\n*   [Sort payment methods](#sort-payment-methods) differently than the default.\n\n## Enable different payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can specify [Dynamic payment methods](https://docs.stripe.com/payments/payment-methods/dynamic-payment-methods) to enable different payment methods by selecting them [in the Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe enables this functionality by default in the latest version of the API. This allows Stripe to pull your payment method preferences from the Dashboard to dynamically show the most relevant payment methods to your customers. Alternatively, you can [list payment methods manually using payment method types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types).\n\nThere’s one situation where the Payment Element overrides your choice. It hides payment methods that don’t support the current payment. For instance, in a recurring payment for 10 JPY, the Payment Element hides methods that don’t support JPY or recurring payments.\n\n## Sort payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, the Payment Element uses dynamic ordering to optimize which payment methods appear for each user. With the [paymentMethodOrder](https://docs.stripe.com/js/elements_object/create_payment_element#payment_element_create-options-paymentMethodOrder) parameter, you can override the default order for payment methods in the Payment Element, including Apple Pay and Google Pay.\n\nPayment methods that you specify in `paymentMethodOrder` are shown first, followed by any additional payment methods. If you specify payment method types that Stripe wouldn’t show, they’re ignored.\n\n`elements.create('payment', {   paymentMethodOrder: ['apple_pay', 'google_pay', 'card', 'klarna'] });`\n\nYou can include Apple Pay (`apple_pay`) and Google Pay (`google_pay`) when setting the order for payment methods in addition to a full list of [payment method types](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type).\n\nRegulations in [Finland](https://support.stripe.com/questions/payment-method-legislation-in-finland) and [Sweden](https://support.stripe.com/questions/payment-method-legislation-in-sweden) require that debit payment methods must be presented before credit payment methods at checkout in those countries.\n\n## Filter card brands![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen your customers pay with a card through the Payment Element, you can control which card brands you accept and which ones you don’t. This applies to both the card input field and Apple Pay or Google Pay.\n\n#### Note",
  "title": "Customize payment methods | Stripe Documentation",
  "description": "Choose how the Payment Element displays payment methods.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/payment-element/migration-ct",
  "markdown": "# Migrate to Confirmation Tokens | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to migrate your existing \"create payment method\" integration to a \"create confirmation token\" integration.\n\nUse this guide to learn how to finalize payments on the server by using a [ConfirmationToken](https://docs.stripe.com/api/confirmation_tokens/object) instead of a [PaymentMethod](https://docs.stripe.com/api/payment_methods) to send data collected from your client to your server.\n\nA `ConfirmationToken` holds a superset of the data found on a `PaymentMethod`, such as shipping information, and enables new features as we build them.\n\n[](#client-side)\n\nInstead of calling [stripe.createPaymentMethod](https://docs.stripe.com/js/payment_methods/create_payment_method_elements), call [stripe.createConfirmationToken](https://docs.stripe.com/js/confirmation_tokens/create_confirmation_token) to create a `ConfirmationToken` object. Pass this ConfirmationToken to the server to confirm the PaymentIntent.\n\nThe `stripe.createConfirmationToken` method accepts the same parameters as `stripe.createPaymentMethod` (through [params.payment\\_method\\_data](https://docs.stripe.com/js/confirmation_tokens/create_confirmation_token#create_confirmation_token-options-params-payment_method_data)), plus additional [shipping](https://docs.stripe.com/js/confirmation_tokens/create_confirmation_token#create_confirmation_token-options-params-shipping) and [return\\_url](https://docs.stripe.com/js/confirmation_tokens/create_confirmation_token#create_confirmation_token-options-params-return_url) parameters.\n\n`// Create the PaymentMethod using the details collected by the Payment Element. const {error, paymentMethod} = await stripe.createPaymentMethod({   elements,   params: {     billing_details: {       name: 'Jenny Rosen',     }   } });  if (error) {   // This point is only reached if there's an immediate error when creating the PaymentMethod.   // Show the error to your customer (for example, payment details incomplete)   handleError(error);   return; }  // Create the PaymentIntent const res = await fetch(\"/create-confirm-intent\", {   method: \"POST\",   headers: {\"Content-Type\": \"application/json\"},   body: JSON.stringify({     paymentMethodId: paymentMethod.id,   }), });`\n\n`// Create the ConfirmationToken using the details collected by the Payment Element and additional shipping information. Provide shipping and return_url if you don't want to provide it when confirming the intent on the server const {error, confirmationToken} = await stripe.createConfirmationToken({   elements,   params: {     payment_method_data: {        billing_details: {          name: 'Jenny Rosen',        }     },     // Remove shipping if you're collecting it using Address Element or don't require it     shipping: {       name: 'Jenny Rosen',       address: {         line1: '1234 Main Street',         city: 'San Francisco',         state: 'CA',         country: 'US',         postal_code: '94111',       },     },     return_url: '[https://example.com/order/123/complete](https://example.com/order/123/complete)',   } });  if (error) {   // This point is only reached if there's an immediate error when creating the ConfirmationToken.   // Show the error to your customer (for example, payment details incomplete)   handleError(error);   return; }  // Create the PaymentIntent const res = await fetch(\"/create-confirm-intent\", {   method: \"POST\",   headers: {\"Content-Type\": \"application/json\"},   body: JSON.stringify({     confirmationTokenId: confirmationToken.id,   }), });`\n\n[](#server-side)\n\nYou pass the ConfirmationToken to the server to confirm the [PaymentIntent](https://docs.stripe.com/api/payment_intents), rather than passing a [PaymentMethod](https://docs.stripe.com/api/payment_methods) as you did before. The properties stored on the `ConfirmationToken` are applied to the Intent when its ID is provided to the [confirmation\\_token](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-confirmation_token) parameter at confirmation time.\n\n#### Note\n\nIf you already provide [shipping](https://docs.stripe.com/js/confirmation_tokens/create_confirmation_token#create_confirmation_token-options-params-shipping) and [return\\_url](https://docs.stripe.com/js/confirmation_tokens/create_confirmation_token#create_confirmation_token-options-params-return_url) on the ConfirmationToken, you don’t need to provide those fields again when confirming the PaymentIntent.\n\n``app.post('/create-confirm-intent', async (req, res) => {   try {     const intent = await stripe.paymentIntents.create({       confirm: true,       amount: 1099,       currency: 'usd',       // In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default.       automatic_payment_methods: {enabled: true},       use_stripe_sdk: true,       // the PaymentMethod ID sent by your client       payment_method: req.body.paymentMethodId,       return_url: '[https://example.com/order/123/complete](https://example.com/order/123/complete)',       mandate_data: {         customer_acceptance: {           type: \"online\",           online: {             ip_address: req.ip,             user_agent: req.get(\"user-agent\"),           },         },       },       shipping: {         name: 'Jenny Rosen',         address: {           line1: '1234 Main Street',           city: 'San Francisco',           state: 'CA',           country: 'US',           postal_code: '94111',         },       }     });     res.json({       client_secret: intent.client_secret,       status: intent.status     });   } catch (err) {     res.json({       error: err     })   } });``\n\n``app.post('/create-confirm-intent', async (req, res) => {   try {     const intent = await stripe.paymentIntents.create({       confirm: true,       amount: 1099,       currency: 'usd',       // In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default.       automatic_payment_methods: {enabled: true},       use_stripe_sdk: true,       // the ConfirmationToken ID sent by your client that already has the shipping, mandate_data, and return_url data       confirmation_token: req.body.confirmationTokenId,     });     res.json({       client_secret: intent.client_secret,       status: intent.status     });   } catch (err) {     res.json({       error: err     })   } });``\n\nAny parameters provided directly to the PaymentIntent or SetupIntent at confirmation time, such as `shipping` override corresponding properties on the ConfirmationToken.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Design an integration](https://docs.stripe.com/payments/payment-element/design-an-integration)",
  "title": "Migrate to Confirmation Tokens | Stripe Documentation",
  "description": "Learn how to migrate your existing \"create payment method\" integration to a \"create confirmation token\" integration.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/review-changelog",
  "markdown": "# App review requirements changelog | Stripe DocumentationThe Stripe Docs logo\n\n## Track updates to the requirements for the app review process.\n\nUse the following changelog to track changes to the requirements needed to publish your app.\n\n## October 31, 2022 ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nNew requirements:\n\n*   Use the same app name for both the [app listing](https://docs.stripe.com/stripe-apps/listing-guidelines) and [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest).\n*   Include any obvious app limitations in the app description (for example, the app doesn’t work in specific countries).\n*   Always submit new app versions from the same account. If this isn’t possible, you must contact [Stripe Support](https://support.stripe.com/?contact=true) to find alternatives.\n*   Create a clear path for users to unauthenticate the app from within the Stripe Dashboard UI.\n*   All links and buttons that redirect to an external URL must use the [external icon](https://docs.stripe.com/stripe-apps/components/icon).\n\nRemoved requirement:\n\n*   Apps need to have a cancel catch in the settings page.",
  "title": "App review requirements changelog | Stripe Documentation",
  "description": "Track updates to the requirements for the app review process.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/listing-guidelines",
  "markdown": "# App listing guidelines | Stripe DocumentationThe Stripe Docs logo\n\nName35 characters max. Must not contain any of the following words or names: `Stripe`, `app`, `free`, `paid`.Appears alongside your app logo throughout the Marketplace and on your app listing page.EmailWorldIcon logoImage must be high-resolution, at least 300x300 pixels, 1:1 aspect ratio (square), .PNG or .JPG format, and under 10MB.Appears alongside your app name throughout the App Marketplace and on your app listing page.Built by80 characters max.Name of the individual or organization that built and maintains the app.EmailWorld, IncCategorySelect the category that best describes your app.If another category is more appropriate, Stripe adjusts it and notifies you during app review.\n\n*   Support\n*   Sales\n\nSubtitle80 characters max.Appears alongside your app name throughout the Marketplace and on your app listing page. This is a concise phrase summarizing the value of app.See and edit a customer’s support history from the Stripe DashboardAbout1000 characters max.Briefly describe what your company does, who your products are for, and the value they deliver for people. An ideal description is one to two sentences, overviewing your main product or overall company, followed by a brief description of your Stripe app. Avoid hyperbole, marketing jargon, keyword stuffing or unprovable claims (for example, “The world’s best support product”).EmailWorld is an email delivery service for growing e-commerce businesses. The EmailWorld app brings our advanced messaging capabilities into Stripe so you can reach your audience in just a few clicks.Works with_Automatically populated_Your app manifest automatically populates this, which lets users know what parts of the Stripe Dashboard your [app drawer](https://docs.stripe.com/stripe-apps/design#available-surfaces) works with.\n\n*   Payments\n*   Customers\n\nFeaturesAdd up to three key app features that highlight specific use cases of your app.Each feature should explain how the app interacts with and enhances Stripe, and not describe your company overall.﹂Title80 characters max.Appears alongside your key feature visual and description. This is a concise phrase summarizing the use case a user can achieve with your app, in plain language.Get email insights on Stripe customers﹂Description300 characters max.A concise description of the feature. A good description touches on two things: both a clear **description** of how the feature actually works, and also the **benefit** someone experiences as a result of using it.View email activity, such as opens and clicks, as it relates to your Stripe customers. Now you can assess how well your campaigns lead to sales without having to toggle between tabs.﹂ImageMust be high-resolution, a minimum of 1600 pixels wide (no height minimum), PNG or JPG format, and 10MB or less.Use the [Figma UI toolkit](https://docs.stripe.com/stripe-apps/design#figma-ui-toolkit) to design and export a high quality feature image. Show your app in the context of the Stripe Dashboard. Don’t use screenshots showing real customer data or screenshots of your app in test mode.PricingCommunicate whether your app is free or requires a paid subscription.\n\n*   Free\n*   Free trial available\n*   Paid subscription required\n\nPricing pageRequired if your app requires a paid subscription.Provide a link to a pricing page that explains your pricing model to a prospective user.Support channelAt least one support channel is required.Provide up to two support channels. This way, users can quickly identify the best support channel for their needs and contact you to troubleshoot any issues.\n\n*   `help@helptable.com`\n*   `helptable.com/support`\n\nBased inSelect each location where your company has headquarters.United StatesSupported languagesEnglish is pre-selected and required. Stripe can only support English at this time. If you’d like to support additional languages, reach out to Stripe.EnglishPrivacy policyProvide a link to your privacy policy. This is a URL where users can read the privacy policy for both your company and your app.`emailworld.com/privacy-policy`Terms of service_Optional_Provide a link to your Terms of Service. This needs to be a URL where users can read the terms of service for both your company and your and app.Company website_Optional_Provide a link to your company’s website.FAQ page_Optional_Provide a link to your app’s FAQ page.Technical documentation_Optional_Provide a link to your app’s technical documentation page. The documentation should explain everything from installing your Stripe app to how to get the most out of its features.Permissions_Automatically populated_Your app manifest automatically populates this. This lets users know which permissions the app requires.",
  "title": "App listing guidelines | Stripe Documentation",
  "description": "Follow the specifications and guidelines to define the contents of your app listing page before publishing to the App Marketplace.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/how-ui-extensions-work",
  "markdown": "# How UI extensions work | Stripe DocumentationThe Stripe Docs logo\n\n## Learn the UI extensions system and its parts, and get a high-level understanding of how you can extend the Stripe Dashboard.\n\nStripe Apps UI extensions let you render your own UI into Stripe’s products using [TypeScript](https://www.typescriptlang.org/) and [React](https://reactjs.org/). These tools should be familiar if you’ve developed in React. But because they run within a secure sandbox embedded on another web page, they differ from standard browser-based React applications in several ways.\n\n## Overview![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUI extensions are written in TypeScript and use React to create UI using [Stripe’s UI toolkit](https://docs.stripe.com/stripe-apps/components). Unlike other React environments, UI extensions don’t support arbitrary HTML. Instead, they exclusively use UI components provided by Stripe. The structure of a UI extension involves some key directories and files:\n\n*   `stripe-app.json`: The [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest \"app manifest\"). It describes how apps interact with Stripe, including what permissions they need, whether they have a UI extension, and—if so—where that extension appears in Stripe’s UI.\n*   `package.json`: NPM package metadata. The UI extensions are regular [NPM packages](https://docs.npmjs.com/about-packages-and-modules). You can manage dependencies using [npm](https://docs.npmjs.com/cli) or [yarn](https://yarnpkg.com/).\n*   `src`: The actual TypeScript source code for the UI extension. By default, the CLI places a generic view in `src/views` with a corresponding entry in `stripe-app.json`.\n\nDeveloping a UI extension relies on the Stripe CLI app plugin. The CLI takes care of initializing apps with the correct structure, configuring the app manifest, running a development server, and bundling the app appropriately for submission to Stripe.\n\n### Developing a UI extension![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   As the app developer, you write views, which are React components registered to appear whenever a specific [viewport](https://docs.stripe.com/stripe-apps/reference/viewports) appears on the screen. For example, to make a view appear whenever a user is viewing an invoice details page, register it to the viewport `stripe.dashboard.invoice.detail`.\n*   When you’re ready to upload your app, CLI commands help you bundle up your code, upload it to Stripe, and host your app on Stripe’s CDN.\n*   When your app’s UI extension gets initialized, Stripe downloads the app’s code into a sandboxed iframe.\n*   When a user goes to a page that has a particular viewport (for example, `/invoices/inv_1283`):\n    *   Stripe defines the UI extension’s view inside the sandbox with the context provided by the viewport.\n    *   Stripe passes the view to the Dashboard to be displayed to users.\n    *   When users interact with the UI extension (for example, by clicking a button), event handlers in the UI extension sandbox receive the event and can update the view.\n\n![System diagram of Stripe App UI extension](https://b.stripecdn.com/docs-statics-srv/assets/extensions-structure.d6d4d0512ef2194eda5c7ffd214e894e.jpg)\n\n## Views and viewports![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo display UI to users of an app, create a React view and register it with a viewport.\n\nViews are React components that the app exports. Viewports are identifiers that indicate where the view displays. When you upload an app, all views exported by the app register with the associated viewport.\n\nViews automatically register with viewports when you run `stripe apps add view`. Behind the scenes, this adds an entry to the [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest \"app manifest\").\n\n`{   //... other manifest properties   \"ui_extension\": {     \"views\": [       {           \"viewport\": \"stripe.dashboard.invoice.detail\", // See all valid values at stripe.com/docs/stripe-apps/reference/viewports           \"component\": \"NameOfComponent\" // This is provided by you       }       // ... additional views     ]   } }`\n\n## Lifecycle of a UI extension![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUI extensions run in an invisible, sandboxed iframe that asynchronously sends UI updates to the Stripe Dashboard, which then displays the UI updates. A single sandbox can accommodate multiple views at the same time.\n\nThe lifecycle of the sandbox and the views it powers works like this:\n\n*   The Dashboard loads the UI extension sandbox, which happens between when the Dashboard loads and when the user opens the app.\n*   When a view needs to be displayed, the Dashboard waits for the sandbox to be initialized, and then directs the sandbox to mount the correct view and passes in the [appropriate context](https://docs.stripe.com/stripe-apps/reference/extensions-sdk-api#props).\n*   When the user dismisses the view (for example, when they close the app drawer), the view unmounts. Unmounting the view removes it from the DOM and from the sandboxed React tree.\n*   The sandbox might stay running or shut down depending on resource usage. The only guarantee is that the Dashboard makes a best-effort attempt to allow [useEffect](https://reactjs.org/docs/hooks-effect.html) and other cleanup handlers to run before terminating the sandbox.\n\n![Lifecyle of a Stripe Apps UI extension](https://b.stripecdn.com/docs-statics-srv/assets/extensions-lifecycle.0fef55cf88daa063de38151596ad17e5.jpg)\n\nLifecyle of a Stripe Apps UI extension\n\n## Sandbox limitations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBecause of the unique sandbox environment where UI extension code runs, a Stripe Apps UI extension can’t do everything that a regular React app running in a full browser context can do.\n\n### Main differences between Stripe Apps and regular React apps![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Stripe Apps don’t have direct access to the DOM. They run in an iframe with a separate DOM that’s invisible from the Dashboard.\n2.  The Dashboard proxies and serializes all data to the app. UI toolkit components only accept serializable data.\n3.  The Dashboard also proxies and serializes all _props_ to the app, so functions passed to or triggered by UI toolkit components are asynchronous.\n\n### React and JavaScript limitations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe restrictions below affect what you can do with React and JavaScript when developing your app. The React tree doesn’t render to the DOM until the Stripe Dashboard host environment deserializes and evaluates it. The DOM for the app updates, and the instance of React in the Dashboard manages data input.\n\n#### Global document and window objects are limited![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe DOM environment that the UI extension code is running in is locked down by the [sandboxed iframe](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox). This means that top-level APIs like [localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage), [indexedDB](https://developer.mozilla.org/en-US/docs/web/api/indexeddb), and [BroadcastChannel](https://developer.mozilla.org/en-US/docs/web/api/broadcastchannel) are unavailable. Any DOM API that relies on the [same-origin policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy) doesn’t work as expected because sandboxed iframes have a `null` origin.\n\n#### React ref props are unsupported![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUI components don’t support React `ref` props because the React tree is serialized and passed to the Stripe Dashboard to be rendered. The DOM that the components are eventually rendered into is inaccessible from the sandboxed App code.\n\n#### Apps can’t control the React version![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe default `package.json` file generated with each Stripe app has a `dependency` entry for `react`, but changing this version has no effect on the version of React that renders your app. The Stripe Dashboard uses its version of React (currently version 17) to render all apps. The `react` dependency in the local `package.json` only performs type checking and unit testing and you shouldn’t change it (unless instructed by Stripe) to ensure compatibility.\n\n#### Use uncontrolled components for interactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Dashboard serializes and proxies all data input to the app, which results in input lag while using React [controlled components](https://reactjs.org/docs/forms.html#controlled-components). This lag is perceptible by the user and can potentially overwrite characters that they typed in the meantime. It also results in the cursor skipping to the end of a text input if they try to edit text at the beginning.\n\nTo reduce lag in your app, use user inputs in an uncontrolled manner:\n\n`import {useState} from 'react'; import {TextArea} from '@stripe/ui-extension-sdk/ui';  const App = () => {   const defaultValue = 'Initial TextArea value';   const [text, setText] = useState(defaultValue);   return (     <>       <TextArea         label=\"Message\"         // This doesn't work ❌         // Attempting to edit text at the beginning skips the cursor to the end         value={text}         onChange={e => setText(e.target.value)}       />       <TextArea         label=\"Message\"         // This will work ✅         defaultValue={defaultValue}         onChange={e => setText(e.target.value)}       />     </>   ); };`\n\n### UI component restrictions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe restrictions below apply to [UI components](https://docs.stripe.com/stripe-apps/components). While your extension runs in an isolated environment, UI components render directly in the Dashboard. The SDK informs the Dashboard to render UI toolkit components, which results in the following limitations.\n\n#### Components can’t stop event propagation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBecause event handlers are called asynchronously, the event has already propagated by the time the app’s event handler is called. As a result, the app can’t stop event propagation or bubbling.\n\n#### Components only accept serializable data types as props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUI components only accept serializable data types. Passing unserializable data types like `Map` or `Set` as a prop to a UI Toolkit component throws an error.\n\nUse only simple types, functions, or React events as props. Supported types are:\n\n*   Strings, numbers, `true`, `false`, `null`, and `undefined`\n*   Objects whose keys and values are all simple types\n*   Arrays whose values are all simple types\n*   Functions, but they become asynchronous when proxied. Any functions passed as arguments or returned are also subject to the type limitations\n*   React events\n\n#### Components don’t support render functions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nReact renders synchronously, but functions passed to UI components become asynchronous after the Dashboard proxies them to the app. Functions that generate markup passed to a UI component don’t finish rendering in time for React to use their results. As a result, no UI components accept render functions.\n\nThis means that the following patterns don’t work:\n\n`// This doesn't work ❌ <ItemProvider>   {(data) => (     <Item data={data} />   )} </ItemProvider>`\n\n`// This doesn't work ❌ <Item renderFooter={() => <div>footer</div>} />`\n\n#### JSX can only be passed to non-children props as a single node![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUI components support props that take a single React element:\n\n`// This will work ✅ <Item footer={<div>footer</div>} />`\n\nMore complex JSX data structures are unsupported, however:\n\n`// This doesn't work ❌ <Item footer={[<div>one</div>, <div>two</div>]} />`\n\n`// This doesn't work ❌ <Item footer={{   one: <div>one</div>,   two: <div>two</div> }} />`\n\nIf you need to pass multiple React elements to a UI component, wrap them in a fragment:\n\n`// This works ✅ <Item footer={   <>     <div>one</div>     <div>two</div>   </> }/>`\n\nA similar constraint applies to `children`. Arrays and objects containing JSX are unsupported, but multiple React elements are allowed:\n\n`// This works ✅ <Item>   <div>one</div>   <div>two</div> </Item>`\n\n## Installing NPM Packages![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere aren’t any restrictions on adding third-party NPM packages to Stripe Apps; feel free to install packages as you see fit. However, not all packages work as expected given the [sandbox limitations](https://docs.stripe.com/stripe-apps/how-ui-extensions-work#sandbox-limitations) of UI extensions.\n\nUsing a utility library like `lodash` is fine, because `lodash` doesn’t require DOM access:\n\n`import { Box, Button } from \"@stripe/ui-extension-sdk/ui\"; import { useState } from \"react\"; import kebabCase from \"lodash/kebabCase\";  const text = \"A note to the user\";  const App = () => {   const [isKebabCase, setIsKebabCase] = useState(false);   return (     <>       {/* This will work ✅ */}       <Box>{isKebabCase ? kebabCase(text) : text}</Box>       <Button         onPress={() => {           setIsKebabCase(!isKebabCase);         }}       >         Toggle kebab-case       </Button>     </>   ); };`\n\nUsing a form library like `react-hook-form` won’t work because `react-hook-form` uses Refs to manage form state:\n\n`import { TextField } from \"@stripe/ui-extension-sdk/ui\"; import { useForm } from \"react-hook-form\";  const App = () => {   const { register } = useForm();   const { onChange, name, ref } = register(\"firstName\");   return (     <TextField       label=\"First name\"       placeholder=\"Enter your name\"       name={name}       onChange={onChange}       // This doesn't work ❌       ref={ref}     />   ); };`",
  "title": "How UI extensions work | Stripe Documentation",
  "description": "Learn the UI extensions system and its parts, and get a high-level understanding of how you can extend the Stripe Dashboard.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/components/icon",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nTo add the `Icon` component to your app:\n\n`import {Icon} from '@stripe/ui-extension-sdk/ui';`\n\nThis is a preview of an `Icon` component:\n\n`<Icon name=\"addCircle\" />`\n\n### Icon props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `name` | Required<br><br>`string` |\n| `css` | Optional<br><br>`Object`<br><br>Related types: [CSS](#css). |\n| `size` | Optional<br><br>`(\"xsmall\" \\| \"small\" \\| \"medium\" \\| \"large\" \\| \"xlarge\") \\| undefined` |\n\n### CSS![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `fill` | Optional<br><br>[text and icon color token](https://docs.stripe.com/stripe-apps/style#text-&-icons)<br><br>Contrasting color. See [Color](https://docs.stripe.com/stripe-apps/style#color) for details.<br><br>If you don’t specify a fill value, the icon gets its color from its parent. |\n\n## Size![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIcons use the `size` prop for sizing. They can have one of five sizes:\n\n*   `xsmall`: `12px`\n*   `small`: `16px`\n*   `medium`: `20px` (default)\n*   `large`: `32px`\n*   `xlarge`: `64px`\n\n`<Icon name=\"konbini\" size=\"xsmall\" /> <Icon name=\"konbini\" size=\"small\" /> <Icon name=\"konbini\" size=\"medium\" /> <Icon name=\"konbini\" size=\"large\" /> <Icon name=\"konbini\" size=\"xlarge\" />`\n\n## Color and fill![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can give the `Icon` component color with the `fill` property of the `css` prop.\n\n`<Icon name=\"cancelCircle\" css={{fill: 'critical'}} />`\n\n### Default color behavior![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, icons are the same color as the text around them.\n\n`<Inline css={{color: 'attention'}}>   <Icon name=\"mobile\" /> new messages </Inline>`\n\n## Accessibility![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, there is an `aria-hidden` attribute on icons ([read more about ARIA](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA)). In the rare situations the icon has semantic value to screen-reader users, you can manually set `aria-hidden={false}`. In these situations it’s often a good idea to add an `aria-label` as well. In general, it’s better to have text labels rather than making visual-only icons important for a workflow.\n\n`<Icon icon={addCircle} aria-hidden={false} aria-label=\"Add another item\" />`\n\n## Icons in Button and Badge components![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can place an `Icon` component inside of a `Button` or `Badge` component.\n\n`<Button>   <Icon name=\"mobile\" size=\"xsmall\" />   <Inline>New messages</Inline> </Button> <Badge type=\"positive\">   <Icon name=\"mobile\" size=\"xsmall\" />   New messages </Badge>`\n\n## Icon reference![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
  "title": "Icon | Stripe Documentation",
  "description": "Display an icon graphic in a compatible format.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/card-element?platform=ios",
  "markdown": "# Card Element quickstart | Stripe DocumentationThe Stripe Docs logo\n\nSearch the docs or ask a question",
  "title": "Card Element quickstart | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/elements/appearance-api?platform=ios",
  "markdown": "# Elements Appearance API | Stripe DocumentationThe Stripe Docs logo\n\nThe [mobile Payment Element](https://docs.stripe.com/payments/accept-a-payment?platform=ios&mobile-ui=payment-element) supports visual customization, which allows you to match the design of your app. The layout stays consistent, but you can modify colors, fonts, and more by using the [`appearance`](https://stripe.dev/stripe-ios/stripe-paymentsheet/Classes/PaymentSheet/Configuration.html#/s:6Stripe12PaymentSheetC13ConfigurationV10appearanceAC10AppearanceVvp) property on your [`PaymentSheet.Configuration`](https://stripe.dev/stripe-ios/stripe-paymentsheet/Classes/PaymentSheet/Configuration.html) object.\n\n1.  Start by customizing the [font](#fonts-ios)\n2.  Customize [colors](#colors-ios) to match your app\n3.  Customize [shapes](#shapes-ios) like corner radius\n4.  Fine-tune [specific components](#specific-ui-components-ios)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/ios-appearance-before-after-example.ad6a9aad238be9b198e9ebbc77ebe1d4.png)\n\n`var configuration = PaymentSheet.Configuration() // The following code creates the appearance shown in the screenshot above var appearance = PaymentSheet.Appearance() appearance.font.base = UIFont(name: \"AvenirNext-Regular\", size: UIFont.systemFontSize)! appearance.cornerRadius = 12 appearance.shadow = .disabled appearance.borderWidth = 0.5 appearance.colors.background = .white appearance.colors.primary = UIColor(red: 36/255, green: 36/255, blue: 47/255, alpha: 1) appearance.colors.textSecondary = .black appearance.colors.componentPlaceholderText = UIColor(red: 115/255, green: 117/255, blue: 123/255, alpha: 1) appearance.colors.componentText = .black appearance.colors.componentBorder = .clear appearance.colors.componentDivider = UIColor(red: 195/255, green: 213/255, blue: 200/255, alpha: 1) appearance.colors.componentBackground = UIColor(red: 243/255, green: 248/255, blue: 250/247, alpha: 1) appearance.primaryButton.cornerRadius = 20 configuration.appearance = appearance let paymentSheet = PaymentSheet(/* ... */, configuration: configuration)`\n\n[](#fonts-ios)\n\nCustomize the font by setting [`font.base`](https://stripe.dev/stripe-ios/stripe-paymentsheet/Classes/PaymentSheet/Appearance/Font.html#/s:6Stripe12PaymentSheetC10AppearanceV4FontV4baseSo6UIFontCvp) to any variant of your custom font at any size and weight. The mobile Payment Element uses the font family of your custom font, but determines sizes and weights itself.\n\nTo increase or decrease the size of all text, set [`font.sizeScaleFactor`](https://stripe.dev/stripe-ios/stripe-paymentsheet/Classes/PaymentSheet/Appearance/Font.html#/s:6Stripe12PaymentSheetC10AppearanceV4FontV15sizeScaleFactor12CoreGraphics7CGFloatVvp). We multiply font sizes by this value before displaying them. This is useful if your custom font is slightly larger or smaller than the system font.\n\n`var configuration = PaymentSheet.Configuration() configuration.appearance.font.base = UIFont(name: \"CustomFont-Regular\", size: UIFont.systemFontSize) configuration.appearance.font.sizeScaleFactor = 1.15 // Increase the size of all text by 1.15x`\n\n[](#colors-ios)\n\nCustomize the colors in the mobile Payment Element by modifying the color categories defined in [`Appearance.Colors`](https://stripe.dev/stripe-ios/stripe-paymentsheet/Classes/PaymentSheet/Appearance.html#/s:6Stripe12PaymentSheetC10AppearanceV6ColorsV). Each color category determines the color of one or more components in the UI. For example, [`primary`](https://stripe.dev/stripe-ios/stripe-paymentsheet/Classes/PaymentSheet/Appearance/Colors.html#/s:6Stripe12PaymentSheetC10AppearanceV6ColorsV7primarySo7UIColorCvp) defines the color of the **Pay** button and selected items like the **Save this card** checkbox. Refer to the diagram below to see some of the UI elements associated with each color category.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/ios-appearance-colors.acdcb7842be30e1c913a823edcf91707.png)\n\n#### Note\n\n[](#specific-ui-components-ios)\n\nThe sections above describe customization options that affect the mobile Payment Element broadly, across multiple UI components. We also provide customization options specifically for the primary button (for example, the **Pay** button). Refer to [Appearance.PrimaryButton](https://stripe.dev/stripe-ios/stripe-paymentsheet/Classes/PaymentSheet/Appearance/PrimaryButton.html) for the full list of customization options.\n\nCustomization options for specific UI components take precedence over other values. For example, `appearance.primaryButton.cornerRadius` overrides the value of `appearance.cornerRadius`.\n\n#### Note\n\n[Let us know](https://github.com/stripe/stripe-ios/issues/new/choose) if you think we need to add more customization options.",
  "title": "Elements Appearance API | Stripe Documentation",
  "description": "Customize the look and feel of Elements to match the design of your site.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/elements/customer-sheet?platform=ios",
  "markdown": "# Integrate the Customer Sheet | Stripe DocumentationThe Stripe Docs logo\n\n## Offer a prebuilt UI for your customers to manage their saved payment methods.\n\nThe Customer Sheet is a prebuilt UI component that lets your customers manage their saved payment methods. You can use the Customer Sheet UI outside of a checkout flow, and the appearance and styling is customizable to match the appearance and aesthetic of your app. Customers can add and remove payment methods, which get saved to the customer object, and set their default payment method stored locally on the device. Use both the Mobile Payment Element and the Customer Sheet to provide customers a consistent end-to-end solution for saved payment methods.\n\n![Screenshot of Customer Sheet presenting multiple saved payment methods in an iOS app.](https://b.stripecdn.com/docs-statics-srv/assets/ios-landing.6c4969968fd6efe3d39fe673628f8284.png)\n\nCustomerAdapter uses Customer Ephemeral Keys and serves as a bridge to help users of legacy products (such as the Basic Integration) adopt CustomerSheet more quickly. If you’re starting a new integration, we recommend adopting CustomerSession over Customer Ephemeral Keys.\n\n[](#ios-setup)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nThe [Stripe iOS SDK](https://github.com/stripe/stripe-ios) is open source, [fully documented](https://stripe.dev/stripe-ios/index.html), and compatible with apps supporting iOS 13 or above.\n\nTo install the SDK, follow these steps:\n\n1.  In Xcode, select **File** > **Add Packages…** and enter `https://github.com/stripe/stripe-ios-spm` as the repository URL.\n2.  Select the latest version number from our [releases page](https://github.com/stripe/stripe-ios/releases).\n3.  Add the **StripePaymentSheet** product to the [target of your app](https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app).\n\nConfigure the SDK with your Stripe [publishable key](https://dashboard.stripe.com/test/apikeys) on app start. This enables your app to make requests to the Stripe API.\n\n`import UIKit import StripePaymentSheet  @main class AppDelegate: UIResponder, UIApplicationDelegate {      func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {         StripeAPI.defaultPublishableKey =` \n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n        `// do any other necessary launch configuration         return true     } }`\n\n#### Note\n\nUse your [test mode](https://docs.stripe.com/keys#obtain-api-keys) keys while you test and develop, and your [live mode](https://docs.stripe.com/keys#test-live-modes) keys when you publish your app.\n\n[](#ios-enable-payment-methods)\n\nView your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) and enable the payment methods you want to support. You need at least one payment method enabled to create a [SetupIntent](https://docs.stripe.com/api/setup_intents \"Setup Intents API\").\n\nBy default, Stripe enables cards and other prevalent payment methods that can help you reach more customers, but we recommend turning on additional payment methods that are relevant for your business and customers. See [Payment method integration options](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) for product and payment method support, and our [pricing page](https://stripe.com/pricing/local-payment-methods) for fees.\n\n#### Note\n\nAt this time, CustomerSheet only supports cards and US bank accounts.\n\n[](#ios-add-endpoints)\n\nCreate two endpoints on your server: one for fetching a Customer’s ephemeral key, and one to create a [SetupIntent](https://docs.stripe.com/api/setup_intents) for saving a new payment method to the [Customer](https://docs.stripe.com/api/customers).\n\n1.  Create an endpoint to return a [Customer](https://docs.stripe.com/api/customers) ID and an associated ephemeral key. You can view the API version used by the SDK [here](https://github.com/stripe/stripe-ios/blob/master/StripeCore/StripeCore/Source/API%20Bindings/STPAPIClient.swift#L233).\n\n`# Create a Customer (skip this and get the existing Customer ID if this is a returning customer) curl https://api.stripe.com/v1/customers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -X \"POST\" curl https://api.stripe.com/v1/ephemeral_keys \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -X \"POST\" \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\`\n\n1.  Create an endpoint to return a [SetupIntent](https://docs.stripe.com/api/setup_intents) configured with the [Customer](https://docs.stripe.com/api/customers) ID.\n\n`# Create a Customer (skip this and get the existing Customer ID if this is a returning customer) curl https://api.stripe.com/v1/customers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -X \"POST\" curl https://api.stripe.com/v1/setup_intents \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\`\n\nIf you only plan to use the payment method for future payments when your customer is present during the checkout flow, set the [usage](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-usage) parameter to on\\_session to improve authorization rates.\n\n[](#ios-customer-adapter)\n\nA `StripeCustomerAdapter` enables a `CustomerSheet` to communicate with Stripe. On the client, configure a `StripeCustomerAdapter` with providers that make requests to these endpoints on your server.\n\n`import StripePaymentSheet  let customerAdapter = StripeCustomerAdapter(customerEphemeralKeyProvider: {     let json = await myBackend.getCustomerEphemeralKey()     return CustomerEphemeralKey(customerId: json[\"customerId\"]!, ephemeralKeySecret: json[\"ephemeralKeySecret\"]!) }, setupIntentClientSecretProvider: {     let json = await myBackend.getSetupIntentForCustomer()     return json[\"setupIntentClientSecret\"]! })`\n\n[](#ios-configure-wallet-element)\n\nNext, configure the Customer Sheet with your `StripeCustomerAdapter` and a [`CustomerSheet.Configuration`](https://stripe.dev/stripe-ios/stripepaymentsheet/documentation/stripepaymentsheet/customersheet/configuration/).\n\n`var configuration = CustomerSheet.Configuration()  // Configure settings for the CustomerSheet here. For example: configuration.headerTextForSelectionScreen = \"Manage your payment method\"  let customerSheet = CustomerSheet(configuration: configuration, customer: customerAdapter)`\n\n[](#ios-present-wallet-element)\n\nPresent the Customer Sheet. When the customer dismisses the sheet, the Customer Sheet calls the completion block with a `CustomerSheet.SheetResult`.\n\n`import StripePaymentSheet  customerSheet.present(from: self, completion: { result in   switch result {   case .canceled(let paymentOption), .selected(let paymentOption):     // Configure your UI based on the payment option     self.paymentLabel.text = paymentOption?.displayData().label ?? \"None\"      // Optional: Send the selected payment method ID to your backend for advanced use cases     // like charging a customer when not present in your app     if let paymentOption = paymentOption {       switch paymentOption {       case .paymentMethod(let paymentMethod, let paymentOptionDisplayData):         MyBackend.setDefaultPaymentMethod(paymentMethod.stripeId)       case .applePay(paymentOptionDisplayData: let paymentOptionDisplayData):         MyBackend.setDefaultPaymentMethodIsApplePay()       }     }   case .error(let error):     // Show the error in your UI   } })`\n\n*   If the customer selects a payment method, the result is `.selected(PaymentOptionSelection?)`. The associated value is the selected [`PaymentOptionSelection`](https://stripe.dev/stripe-ios/stripepaymentsheet/documentation/stripepaymentsheet/customersheet/paymentoptionselection), or `nil` if the user deleted the previously-selected payment method. You can find the full payment method details in the PaymentOptionSelection’s `paymentMethod` associated value.\n*   If the user cancels the sheet, the result is `.canceled`. The associated value is the original payment method selected prior to opening the customer sheet, as long as that payment method is still available.\n*   If an error occurs, the result is `.error(Error)`.\n\nLearn more about how to [enable Apple Pay](https://docs.stripe.com/payments/accept-a-payment?platform=ios&mobile-ui=payment-element#ios-apple-pay).",
  "title": "Integrate the Customer Sheet | Stripe Documentation",
  "description": "Offer a prebuilt UI for your customers to manage their saved payment methods.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/card-element?platform=react-native",
  "markdown": "# Card Element quickstart | Stripe DocumentationThe Stripe Docs logo\n\nSearch the docs or ask a question",
  "title": "Card Element quickstart | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/elements/address-element?platform=react-native",
  "markdown": "# Address Element | Stripe DocumentationThe Stripe Docs logo\n\n## Use the Address Element to collect complete billing and shipping addresses.\n\n## Overview![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Address Element is an embeddable UI component for accepting complete addresses. Use it to collect shipping addresses, or when you need a complete billing address, such as for tax purposes.\n\nFeatures include:\n\n*   **Global support**: Support 236 regional address formats, including right-to-left address formats\n*   **Autocomplete**: Decrease checkout time, reduce validation errors, and increase checkout conversion with built-in address autocomplete\n*   **Prefill saved addresses**: Prefill addresses at page load when you already have an address saved for your customer\n*   **Customized appearance**: Customize the Address Element to match your page design with the [Appearance API](https://docs.stripe.com/elements/appearance-api)\n*   **Seamless Elements integration**: Reuse an existing Elements instance to save time, and pass data automatically with the Payment Element and Link\n*   **Support for any device**: Available for web, iOS, Android, and React Native mobile SDKs\n\n![Examples of a checkout process where a user selects the Add Shipping Address option. Then they're taken to a new screen to add their shipping address into a form. As they type in their address, auto-complete suggestions are presented for them to choose from.](https://b.stripecdn.com/docs-statics-srv/assets/android-overview.6061212dc737aa700b79242cb5f77782.png)\n\n## Start with a guide![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
  "title": "Address Element | Stripe Documentation",
  "description": "Use the Address Element to collect complete billing and shipping addresses.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/elements/appearance-api?platform=react-native",
  "markdown": "# Elements Appearance API | Stripe DocumentationThe Stripe Docs logo\n\nThe [mobile Payment Element](https://docs.stripe.com/payments/accept-a-payment?platform=react-native&mobile-ui=payment-element) supports visual customization, which allows you to match the design of your app. The layout stays consistent, but you can modify colors, fonts, and more by using the [`appearance`](http://todo.com/) parameter when you call [`initPaymentSheet()`](https://stripe.dev/stripe-react-native/api-reference/index.html#initPaymentSheet).\n\n1.  Start by customizing the [font](#fonts-react-native)\n2.  Customize [colors](#colors-react-native) to match your app\n3.  Customize [shapes](#shapes-react-native) like the border radius\n4.  Fine-tune [specific components](#specific-ui-components-react-native)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/ios-appearance-before-after-example.ad6a9aad238be9b198e9ebbc77ebe1d4.png)\n\n`// The following code creates the appearance shown in the screenshot above const customAppearance = {  font: {    family:      Platform.OS === 'android' ? 'avenirnextregular' : 'AvenirNext-Regular',  },  shapes: {    borderRadius: 12,    borderWidth: 0.5,  },  primaryButton: {    shapes: {     borderRadius: 20,    },  },  colors: {    primary: '#fcfdff',    background: '#ffffff',    componentBackground: '#f3f8fa',    componentBorder: '#f3f8fa',    componentDivider: '#000000',    primaryText: '#000000',    secondaryText: '#000000',    componentText: '#000000',    placeholderText: '#73757b',  }, };  const { error } = await initPaymentSheet({  ...  appearance: customAppearance, });`\n\n[](#fonts-react-native)\n\nCustomize the font by passing a [`FontConfig`](https://stripe.dev/stripe-react-native/api-reference/modules/PaymentSheet.html#FontConfig) to `font` and setting `family`. On iOS, the value of `family` should be the “PostScript name” found in Font Book. On Android, copy the `.ttf` or `.otf` file from `android/app/src/main/assets/font/<your-font>` to `android/app/src/main/res/font/<your-font>` and use the name of the font file (containing only lowercase, alphanumeric characters). The mobile Payment Element uses the font family of your custom font, but determines sizes and weights itself.\n\nTo increase or decrease the size of text, set `scale`. We multiply font sizes by this value before displaying them. This is useful if your custom font is slightly larger or smaller than the system font.\n\n`const { error } = await initPaymentSheet({  ...  appearance: {    font: {      family: Platform.OS === 'android' ? 'avenirnextregular' : 'AvenirNext-Regular',      scale: 1.15,    },  }, });`\n\n[](#colors-react-native)\n\nCustomize the colors in the mobile Payment Element by modifying the color categories defined in [`GlobalColorConfig`](https://stripe.dev/stripe-react-native/api-reference/modules/PaymentSheet.html#GlobalColorConfig). Each color category determines the color of one or more components in the UI. For example, `primary` defines the color of the **Pay** button and selected items like the **Save this card** checkbox. Refer to the diagram below to see some of the UI elements associated with each color category.\n\n#### Note\n\nTo support dark mode, pass maps for both `light` and `dark` colors to [`colors`](https://stripe.dev/stripe-react-native/api-reference/modules/PaymentSheet.html#AppearanceParams).\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/react-native-appearance-colors.2e9b577269f6771c61c7a6e068eb8980.png)\n\n[](#specific-ui-components-react-native)\n\nThe sections above describe customization options that affect the mobile Payment Element broadly, across multiple UI components. We also provide customization options specifically for the primary button (for example, the **Pay** button). Refer to the [`PrimaryButtonConfig`](https://stripe.dev/stripe-react-native/api-reference/modules/PaymentSheet.html#PrimaryButtonConfig) for the full list of customization options.\n\nCustomization options for specific UI components take precedence over other values. For example, `primaryButton.shapes.borderRadius` overrides the value of `shapes.borderRadius`.\n\n#### Note\n\n[Let us know](https://github.com/stripe/stripe-react-native/issues/new/choose) if you think we need to add more customization options.",
  "title": "Elements Appearance API | Stripe Documentation",
  "description": "Customize the look and feel of Elements to match the design of your site.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/apple-pay?platform=react-native",
  "markdown": "# Apple Pay | Stripe DocumentationThe Stripe Docs logo\n\n## Allow customers to securely make payments using Apple Pay on their iPhone, iPad, or Apple Watch.\n\nApple Pay is compatible with most Stripe products and features. Stripe users can accept [Apple Pay](https://stripe.com/apple-pay) in iOS applications in iOS 9 and above, and on the web in Safari starting with iOS 10 or macOS Sierra. There are no additional fees to process Apple Pay payments, and [pricing](https://stripe.com/pricing) is the same as for other card transactions.\n\nApple Pay is available to cardholders at participating banks in supported countries. For more information, refer to Apple’s [participating banks](https://support.apple.com/en-us/ht204916) documentation.\n\n![Apple pay payment flow animation showing the Stripe checkout page, the Apple Pay button, and the confirmation dialog in test mode.](https://b.stripecdn.com/docs-statics-srv/assets/apple-pay.3447ce2deeaab40d6d231eed4dc34644.gif)\n\n## Using Stripe and Apple Pay versus in-app purchases![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor sales of physical goods, services, and certain other things, your app can accept Apple Pay or any other Stripe-supported payment method. Those payments are processed through Stripe, and you only need to pay Stripe’s [processing fees](https://stripe.com/pricing). However, sales of digital products, content, and certain other things must use Apple’s [in-app purchases](https://developer.apple.com/in-app-purchase). Those payments are processed by Apple and are subject to their transaction fees.\n\nFor more information about which sales must use in-app purchases, see the Apple [App Store Review Guidelines](https://developer.apple.com/app-store/review/guidelines/#payments).\n\n## Accept Apple Pay ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe offers a variety of methods to add Apple Pay as a payment method. For integration details, select the method you prefer:\n\nYou can use the Stripe [React Native SDK](https://github.com/stripe/stripe-react-native), to accept both Apple Pay and traditional credit card payments. Before starting, you need to enroll in the [Apple Developer Program](https://developer.apple.com/programs/) and [set up Stripe on your server and in your app](https://docs.stripe.com/payments/accept-a-payment?platform=react-native&mobile-ui=payment-element#react-native-setup). Next, follow these steps:\n\n1.  [Register for an Apple Merchant ID](#merchantid)\n2.  [Create a new Apple Pay certificate](#csr)\n3.  [Integrate with Xcode](#xcode-pay)\n4.  [Set your Apple Merchant ID in StripeProvider](#set-merchantid)\n5.  [Check if Apple Pay is supported](#check-if-apple-pay-supported)\n6.  [Present the payment sheet](#present-payment-sheet)\n7.  [Submit the payment to Stripe](#handle-payment)\n\n[](#merchantid)\n\nObtain an Apple Merchant ID by [registering for a new identifier](https://developer.apple.com/account/resources/identifiers/add/merchant) on the Apple Developer website.\n\nFill out the form with a description and identifier. Your description is for your own records and you can modify it in the future. Stripe recommends using the name of your app as the identifier (for example, `merchant.com.{{YOUR_APP_NAME}}`).\n\n[](#csr)\n\nCreate a certificate for your app to encrypt payment data.\n\nGo to the [iOS Certificate Settings](https://dashboard.stripe.com/settings/ios_certificates) in the Dashboard, click **Add new application**, and follow the guide.\n\nDownload a Certificate Signing Request (CSR) file to get a secure certificate from Apple that allows you to use Apple Pay.\n\nOne CSR file must be used to issue exactly one certificate. If you switch your Apple Merchant ID, you must go to the [iOS Certificate Settings](https://dashboard.stripe.com/settings/ios_certificates) in the Dashboard to obtain a new CSR and certificate.\n\n[](#xcode-pay)\n\nAdd the Apple Pay capability to your app. In Xcode, open your project settings, click the **Signing & Capabilities** tab, and add the **Apple Pay** capability. You might be prompted to log in to your developer account at this point. Select the merchant ID you created earlier, and your app is ready to accept Apple Pay.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/xcode.a701d4c1922d19985e9c614a6f105bf1.png)\n\nEnable the Apple Pay capability in Xcode\n\n[](#set-merchantid)\n\nIn the `StripeProvider` component, specify the Apple Merchant ID that you successfully registered for:\n\n`import { StripeProvider } from '@stripe/stripe-react-native';  function App() {   return (     <StripeProvider       publishableKey=\"`\n\n`pk_test_TYooMQauvdEDq54NiTphI7jx`\n\n`\"       merchantIdentifier=\"merchant.com.{{YOUR_APP_NAME}}\"     >       // Your app code here     </StripeProvider>   ); }`\n\n[](#check-if-apple-pay-supported)\n\nBefore displaying Apple Pay as a payment option in your app, determine if the user’s device supports Apple Pay and that they have a card added to their wallet:\n\n`import { PlatformPayButton, isPlatformPaySupported } from '@stripe/stripe-react-native';  function PaymentScreen() {   const [isApplePaySupported, setIsApplePaySupported] = useState(false);    useEffect(() => {     (async function () {       setIsApplePaySupported(await isPlatformPaySupported());     })();   }, [isPlatformPaySupported]);    // ...    const pay = async () => {     // ...   };    // ...    return (     <View>       {isApplePaySupported && (         <PlatformPayButton           onPress={pay}           type={PlatformPay.ButtonType.Order}           appearance={PlatformPay.ButtonStyle.Black}           borderRadius={4}           style={{             width: '100%',             height: 50,           }}         />       )}     </View>   ); }`\n\n[\n\n## Create the Payment Intent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-payment)\n\n### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nMake an endpoint that creates a PaymentIntent with an [amount](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-amount) and [currency](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-currency). Always decide how much to charge on the server side, a trusted environment, as opposed to the client side. This prevents malicious customers from choosing their own prices.\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"amount\"=1099 \\   -d \"currency\"=\"usd\"`\n\n### Client-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCreate a method that requests a PaymentIntent from your server:\n\n``function PaymentScreen() {   // ...   const fetchPaymentIntentClientSecret = async () => {     const response = await fetch(`${API_URL}/create-payment-intent`, {       method: 'POST',       headers: {         'Content-Type': 'application/json',       },       body: JSON.stringify({         some: 'value',       }),     });     const { clientSecret } = await response.json();      return clientSecret;   };   // ... }``\n\n### Troubleshooting ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you’re seeing errors from the Stripe API when attempting to create tokens, you most likely have a problem with your Apple Pay Certificate. You’ll need to generate a new certificate and upload it to Stripe, as described on this page. Make sure you use a CSR obtained from your Dashboard and not one you generated yourself. Xcode often incorrectly caches old certificates, so in addition to generating a new certificate, Stripe recommends creating a new Apple Merchant ID as well.\n\nIf you receive the error:\n\n> You haven’t added your Apple merchant account to Stripe\n\nit’s likely your app is sending data encrypted with a previous (non-Stripe) CSR/Certificate. Make sure any certificates generated by non-Stripe CSRs are revoked under your Apple Merchant ID. If this doesn’t resolve the issue, delete the merchant ID in your Apple account and re-create it. Then, create a new certificate based on the same (Stripe-provided) CSR that was previously used. You don’t need to upload this new certificate to Stripe. When finished, toggle the Apple Pay Credentials off and on in your app to ensure they refresh properly.\n\n[](#present-payment-sheet)\n\nIn your [`PlatformPayButton`’s](https://stripe.dev/stripe-react-native/api-reference/index.html#PlatformPayButton) `onPress` prop, call `confirmPlatformPayPayment` to open an Apple Pay sheet. To display the customer’s cart items on the payment sheet, pass the items as an argument:\n\n`import { confirmPlatformPayPayment } from '@stripe/stripe-react-native';  function PaymentScreen() {   // ... see above    const pay = async () => {     const clientSecret = await fetchPaymentIntentClientSecret()     const { error } = await confirmPlatformPayPayment(       clientSecret,       {         applePay: {           cartItems: [             {               label: 'Example item name',               amount: '14.00',               paymentType: PlatformPay.PaymentType.Immediate,             },             {               label: 'Total',               amount: '12.75',               paymentType: PlatformPay.PaymentType.Immediate,             },           ],           merchantCountryCode: 'US',           currencyCode: 'USD',           requiredShippingAddressFields: [             PlatformPay.ContactField.PostalAddress,           ],           requiredBillingContactFields: [PlatformPay.ContactField.PhoneNumber],         },       }     );     if (error) {       // handle error     } else {       Alert.alert('Success', 'Check the logs for payment intent details.');       console.log(JSON.stringify(paymentIntent, null, 2));     }   };    // ... see above }`\n\n## Testing Apple Pay![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe test card information can’t be saved to Wallet in iOS. Instead, Stripe recognizes when you’re using your test [API keys](https://docs.stripe.com/keys) and returns a successful test card token for you to use. This allows you to make test payments using a live card without it being charged.",
  "title": "Apple Pay | Stripe Documentation",
  "description": "Allow customers to securely make payments using Apple Pay on their iPhone, iPad, or Apple Watch.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/elements/customer-sheet?platform=react-native",
  "markdown": "# Integrate the Customer Sheet | Stripe DocumentationThe Stripe Docs logo\n\n## Offer a prebuilt UI for your customers to manage their saved payment methods.\n\n#### Beta\n\nThis feature is currently in beta for React Native.\n\nThe Customer Sheet is a prebuilt UI component that lets your customers manage their saved payment methods. You can use the Customer Sheet UI outside of a checkout flow, and the appearance and styling is customizable to match the appearance and aesthetic of your app. Customers can add and remove payment methods, which get saved to the customer object, and set their default payment method stored locally on the device. Use both the Mobile Payment Element and the Customer Sheet to provide customers a consistent end-to-end solution for saved payment methods.\n\n![Screenshot of Customer Sheet presenting multiple saved payment methods in an iOS app.](https://b.stripecdn.com/docs-statics-srv/assets/ios-landing.6c4969968fd6efe3d39fe673628f8284.png)",
  "title": "Integrate the Customer Sheet | Stripe Documentation",
  "description": "Offer a prebuilt UI for your customers to manage their saved payment methods.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/accept-a-payment?platform=react-native&ui=payment-sheet",
  "markdown": "# Accept a payment | Stripe DocumentationThe Stripe Docs logo\n\n## Securely accept payments online.\n\nBuild a payment form or use a prebuilt checkout page to start accepting online payments.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/ios-overview.83089c5582bf1fdc7b61fac7e8602497.png)\n\nThis integration combines all of the steps required to pay—collecting payment details and confirming the payment—into a single sheet that displays on top of your app.\n\n#### Interested in displaying payment methods directly in your checkout screen?\n\nWe’re exploring an integration that lets you embed a prebuilt view directly in your checkout to display payment methods. [Sign up for early access.](#)\n\n[](#react-native-setup)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\n### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis integration requires endpoints on your server that talk to the Stripe API. Use the official libraries for access to the Stripe API from your server:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [React Native SDK](https://github.com/stripe/stripe-react-native) is open source and fully documented. Internally, it uses the [native iOS](https://github.com/stripe/stripe-ios) and [Android](https://github.com/stripe/stripe-android) SDKs. To install Stripe’s React Native SDK, run one of the following commands in your project’s directory (depending on which package manager you use):\n\n`yarn add @stripe/stripe-react-native`\n\nNext, install some other necessary dependencies:\n\n*   For iOS, navigate to the **ios** directory and run `pod install` to ensure that you also install the required native dependencies.\n*   For Android, there are no more dependencies to install.\n\n### Stripe initialization![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo initialize Stripe in your React Native app, either wrap your payment screen with the `StripeProvider` component, or use the `initStripe` initialization method. Only the API [publishable key](https://docs.stripe.com/keys#obtain-api-keys) in `publishableKey` is required. The following example shows how to initialize Stripe using the `StripeProvider` component.\n\n`import { StripeProvider } from '@stripe/stripe-react-native';  function App() {   return (     <StripeProvider       publishableKey=`\n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n      `urlScheme=\"your-url-scheme\" // required for 3D Secure and bank redirects       merchantIdentifier=\"merchant.com.{{YOUR_APP_NAME}}\" // required for Apple Pay     >       // Your app code here     </StripeProvider>   ); }`\n\n#### Note\n\nUse your API keys for [test mode](https://docs.stripe.com/keys#obtain-api-keys) while you test and develop, and your [live mode](https://docs.stripe.com/keys#test-live-modes) keys when you publish your app.\n\n[](#react-native-enable-payment-methods)\n\nView your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) and enable the payment methods you want to support. You need at least one payment method enabled to create a [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\").\n\nBy default, Stripe enables cards and other prevalent payment methods that can help you reach more customers, but we recommend turning on additional payment methods that are relevant for your business and customers. See [Payment method integration options](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) for product and payment method support, and our [pricing page](https://stripe.com/pricing/local-payment-methods) for fees.\n\n[](#react-native-add-server-endpoint)\n\n#### Note\n\nThis integration uses three Stripe API objects:\n\n1.  [PaymentIntent](https://docs.stripe.com/api/payment_intents): Stripe uses this to represent your intent to collect payment from a customer, tracking your charge attempts and payment state changes throughout the process.\n    \n2.  (Optional) [Customer](https://docs.stripe.com/api/customers): To set up a payment method for future payments, you must attach it to a [Customer](https://docs.stripe.com/api/customers \"Customers\"). Create a Customer object when your customer creates an account with your business. If your customer is making a payment as a guest, you can create a Customer object before payment and associate it with your own internal representation of the customer’s account later.\n    \n3.  (Optional) Customer Ephemeral Key: Information on the Customer object is sensitive, and can’t be retrieved directly from an app. An Ephemeral Key grants the SDK temporary access to the Customer.\n    \n\n#### Note\n\nIf you never save cards to a Customer and don’t allow returning Customers to reuse saved cards, you can omit the Customer and Customer Ephemeral Key objects from your integration.\n\nFor security reasons, your app can’t create these objects. Instead, add an endpoint on your server that:\n\n1.  Retrieves the Customer, or creates a new one.\n2.  Creates an Ephemeral Key for the Customer.\n3.  Creates a PaymentIntent with the [amount](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-amount), [currency](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-currency), and [customer](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-customer). You can also optionally include the `automatic_payment_methods` parameter. Stripe enables its functionality by default in the latest version of the API.\n4.  Returns the Payment Intent’s [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\"), the Ephemeral Key’s `secret`, the Customer’s [id](https://docs.stripe.com/api/customers/object#customer_object-id), and your [publishable key](https://dashboard.stripe.com/apikeys) to your app.\n\nThe payment methods shown to customers during the checkout process are also included on the PaymentIntent. You can let Stripe pull payment methods from your Dashboard settings or you can list them manually. Regardless of the option you choose, know that the currency passed in the PaymentIntent filters the payment methods shown to the customer. For example, if you pass `eur` on the PaymentIntent and have OXXO enabled in the Dashboard, OXXO won’t be shown to the customer because OXXO doesn’t support `eur` payments.\n\nUnless your integration requires a code-based option for offering payment methods, Stripe recommends the automated option. This is because Stripe evaluates the currency, payment method restrictions, and other parameters to determine the list of supported payment methods. Payment methods that increase conversion and that are most relevant to the currency and customer’s location are prioritized.\n\n#### Note\n\nTest a running implementation of this endpoint on [Glitch](https://glitch.com/edit/#!/remix/stripe-mobile-payment-sheet-automatic).\n\nYou can manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow. The PaymentIntent is created using the payment methods you configured in the Dashboard. If you don’t want to use the Dashboard or if you want to specify payment methods manually, you can list them using the `payment_method_types` attribute.\n\n`# Create a Customer (use an existing Customer ID if this is a returning customer) curl https://api.stripe.com/v1/customers \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n``: \\   -X \"POST\"  # Create an Ephemeral Key for the Customer curl https://api.stripe.com/v1/ephemeral_keys \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -H \"Stripe-Version: 2024-06-20\" \\   -X \"POST\" \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\  # Create a PaymentIntent curl https://api.stripe.com/v1/payment_intents \\   -u sk_test_4eC39HqLyjWDarjtT1zdp7dc  : \\   -X \"POST\" \\   -d \"customer\"=\"{{CUSTOMER_ID}}\" \\   -d \"amount\"=1099 \\   -d \"currency\"=\"eur\" \\   # In the latest version of the API, specifying the `automatic_payment_methods` parameter   # is optional because Stripe enables its functionality by default.   -d \"automatic_payment_methods[enabled]\"=true \\``\n\n[](#react-native-collect-payment-details)\n\nBefore displaying the mobile Payment Element, your checkout page should:\n\n*   Show the products being purchased and the total amount\n*   Collect any required shipping information\n*   Include a checkout button to present Stripe’s UI\n\nIn the checkout of your app, make a network request to the backend endpoint you created in the previous step and call `initPaymentSheet` from the `useStripe` hook.\n\n``export default function CheckoutScreen() {   const { initPaymentSheet, presentPaymentSheet } = useStripe();   const [loading, setLoading] = useState(false);    const fetchPaymentSheetParams = async () => {     const response = await fetch(`${API_URL}/payment-sheet`, {       method: 'POST',       headers: {         'Content-Type': 'application/json',       },     });     const { paymentIntent, ephemeralKey, customer} = await response.json();      return {       paymentIntent,       ephemeralKey,       customer,     };   };    const initializePaymentSheet = async () => {     const {       paymentIntent,       ephemeralKey,       customer,       publishableKey,     } = await fetchPaymentSheetParams();      const { error } = await initPaymentSheet({       merchantDisplayName: \"Example, Inc.\",       customerId: customer,       customerEphemeralKeySecret: ephemeralKey,       paymentIntentClientSecret: paymentIntent,       // Set `allowsDelayedPaymentMethods` to true if your business can handle payment       //methods that complete payment after a delay, like SEPA Debit and Sofort.       allowsDelayedPaymentMethods: true,       defaultBillingDetails: {         name: 'Jane Doe',       }     });     if (!error) {       setLoading(true);     }   };    const openPaymentSheet = async () => {     // see below   };    useEffect(() => {     initializePaymentSheet();   }, []);    return (     <Screen>       <Button         variant=\"primary\"         disabled={!loading}         title=\"Checkout\"         onPress={openPaymentSheet}       />     </Screen>   ); }``\n\nWhen your customer taps the **Checkout** button, call `presentPaymentSheet()` to open the sheet. After the customer completes the payment, the sheet is dismissed and the promise resolves with an optional `StripeError<PaymentSheetError>`.\n\n``export default function CheckoutScreen() {   // continued from above    const openPaymentSheet = async () => {     const { error } = await presentPaymentSheet();      if (error) {       Alert.alert(`Error code: ${error.code}`, error.message);     } else {       Alert.alert('Success', 'Your order is confirmed!');     }   };    return (     <Screen>       <Button         variant=\"primary\"         disabled={!loading}         title=\"Checkout\"         onPress={openPaymentSheet}       />     </Screen>   ); }``\n\nIf there is no error, inform the user they’re done (for example, by displaying an order confirmation screen).\n\nSetting `allowsDelayedPaymentMethods` to true allows [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment methods like US bank accounts. For these payment methods, the final payment status isn’t known when the `PaymentSheet` completes, and instead succeeds or fails later. If you support these types of payment methods, inform the customer their order is confirmed and only fulfill their order (for example, ship their product) when the payment is successful.\n\n[](#react-native-set-up-return-url)\n\nWhen a customer exits your app, for example to authenticate in Safari or their banking app, provide a way for them to automatically return to your app afterward. Many payment method types **require** a return URL, so if you fail to provide it, we can’t present those payment methods to your user, even if you’ve enabled them.\n\nTo provide a return URL, [configure a custom URL scheme or universal link](https://reactnative.dev/docs/linking) and set up your root component to forward the URL to the Stripe SDK.\n\n#### Note\n\n`import React, { useEffect, useCallback } from 'react'; import { Linking } from 'react-native'; import { useStripe } from '@stripe/stripe-react-native';  export default function MyApp() {   const { handleURLCallback } = useStripe();    const handleDeepLink = useCallback(     async (url: string | null) => {       if (url) {         const stripeHandled = await handleURLCallback(url);         if (stripeHandled) {           // This was a Stripe URL - you can return or add extra handling here as you see fit         } else {           // This was NOT a Stripe URL – handle as you normally would         }       }     },     [handleURLCallback]   );    useEffect(() => {     const getUrlAsync = async () => {       const initialUrl = await Linking.getInitialURL();       handleDeepLink(initialUrl);     };      getUrlAsync();      const deepLinkListener = Linking.addEventListener(       'url',       (event: { url: string }) => {         handleDeepLink(event.url);       }     );      return () => deepLinkListener.remove();   }, [handleDeepLink]);    return (     <View>       <AwesomeAppComponent />     </View>   ); }`\n\nAdditionally, set the `returnURL` when you call the `initPaymentSheet` method:\n\n`await initPaymentSheet({   ...   returnURL: 'your-app://stripe-redirect',   ... });`\n\nFor more information on native URL schemes, refer to the [Android](https://developer.android.com/training/app-links/deep-linking) and [iOS](https://developer.apple.com/documentation/xcode/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app) docs.\n\n[](#react-native-fulfillment)\n\nStripe sends a [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types#event_types-payment_intent.succeeded) event when the payment completes. Use the [Dashboard webhook tool](https://dashboard.stripe.com/webhooks) or follow the [webhook guide](https://docs.stripe.com/webhooks/quickstart) to receive these events and run actions, such as sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.\n\nListen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes, and malicious clients could manipulate the response. Setting up your integration to listen for asynchronous events is what enables you to accept [different types of payment methods](https://stripe.com/payments/payment-methods-guide) with a single integration.\n\nIn addition to handling the `payment_intent.succeeded` event, we recommend handling these other events when collecting payments with the Payment Element:\n\n| Event | Description | Action |\n| --- | --- | --- |\n| [payment\\_intent.succeeded](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.succeeded) | Sent when a customer successfully completes a payment. | Send the customer an order confirmation and fulfill their order. |\n| [payment\\_intent.processing](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.processing) | Sent when a customer successfully initiates a payment, but the payment has yet to complete. This event is most commonly sent when the customer initiates a bank debit. It’s followed by either a `payment_intent.succeeded` or `payment_intent.payment_failed` event in the future. | Send the customer an order confirmation that indicates their payment is pending. For digital goods, you might want to fulfill the order before waiting for payment to complete. |\n| [payment\\_intent.payment\\_failed](https://docs.stripe.com/api/events/types?lang=php#event_types-payment_intent.payment_failed) | Sent when a customer attempts a payment, but the payment fails. | If a payment transitions from `processing` to `payment_failed`, offer the customer another attempt to pay. |\n\n[](#react-native-test)\n\n| Card number | Scenario | How to test |\n| --- | --- | --- |\n|     | The card payment succeeds and doesn’t require authentication. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card payment requires [authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\"). | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The card is declined with a decline code like `insufficient_funds`. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n|     | The UnionPay card has a variable length of 13-19 digits. | Fill out the credit card form using the credit card number with any expiration, CVC, and postal code. |\n\nSee [Testing](https://docs.stripe.com/testing) for additional information to test your integration.",
  "title": "Accept a payment | Stripe Documentation",
  "description": "Securely accept payments online.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/google-pay?platform=react-native",
  "markdown": "# Google Pay | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to accept payments using Google Pay.\n\nGoogle Pay allows customers to make payments in your app or website using any credit or debit card saved to their Google Account, including those from Google Play, YouTube, Chrome, or an Android device. Use the Google Pay API to request any credit or debit card stored in your customer’s Google account.\n\nGoogle Pay is fully compatible with Stripe’s products and features (for example, recurring payments), allowing you to use it in place of a traditional payment form whenever possible. Use it to accept payments for physical goods, donations, [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"), and so on.\n\n## Using Stripe and Google Pay versus the Google Play billing system![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor sales of physical goods and services, your app can accept Google Pay or any other Stripe-supported payment method. Those payments are processed through Stripe, and you only need to pay Stripe’s [processing fees](https://stripe.com/pricing). However, in-app purchases of digital products and content must use the [Google Play billing system](https://developer.android.com/google/play/billing). Those payments are processed by Google and are subject to their transaction fees.\n\nFor more information about which purchases must use the Google Play billing system, see Google Play’s [developer terms](https://support.google.com/googleplay/android-developer/answer/10281818).\n\nStripe’s React Native SDK is the fastest and easiest way to start accepting Google Pay in your React Native apps. The [`PlatformPayButton`](https://stripe.dev/stripe-react-native/api-reference/index.html#PlatformPayButton) component wraps Google’s required UI, and you can use the `confirmPlatformPayPayment` and `createPlatformPayPaymentMethod` methods to seamlessly collect or create payments in your app with minimal setup.\n\n[](#react-native-setup)\n\n### Server-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis integration requires endpoints on your server that talk to the Stripe API. Use our official libraries for access to the Stripe API from your server:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n### Client-side ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [React Native SDK](https://github.com/stripe/stripe-react-native) is open source and fully documented. Internally, it uses the [native iOS](https://github.com/stripe/stripe-ios) and [Android](https://github.com/stripe/stripe-android) SDKs. To install Stripe’s React Native SDK, run one of the following commands in your project’s directory (depending on which package manager you use):\n\n`yarn add @stripe/stripe-react-native`\n\nNext, install some other necessary dependencies:\n\n*   For iOS, navigate to the **ios** directory and run `pod install` to ensure that you also install the required native dependencies.\n*   For Android, there are no more dependencies to install.\n\n### Stripe initialization![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo initialize Stripe in your React Native app, either wrap your payment screen with the `StripeProvider` component, or use the `initStripe` initialization method. Only the API [publishable key](https://docs.stripe.com/keys#obtain-api-keys) in `publishableKey` is required. The following example shows how to initialize Stripe using the `StripeProvider` component.\n\n`import { StripeProvider } from '@stripe/stripe-react-native';  function App() {   return (     <StripeProvider       publishableKey=`\n\n`\"pk_test_TYooMQauvdEDq54NiTphI7jx\"`\n\n      `urlScheme=\"your-url-scheme\" // required for 3D Secure and bank redirects       merchantIdentifier=\"merchant.com.{{YOUR_APP_NAME}}\" // required for Apple Pay     >       // Your app code here     </StripeProvider>   ); }`\n\n#### Note\n\nUse your API keys for [test mode](https://docs.stripe.com/keys#obtain-api-keys) while you test and develop, and your [live mode](https://docs.stripe.com/keys#test-live-modes) keys when you publish your app.\n\n[](#react-native-create-enable-google-pay)\n\nTo use Google Pay, first enable the Google Pay API by adding the following to the `<application>` tag of your **AndroidManifest.xml**:\n\n`<application>   ...   <meta-data     android:name=\"com.google.android.gms.wallet.api.enabled\"     android:value=\"true\" /> </application>`\n\nFor more details, see Google Pay’s [Set up Google Pay API](https://developers.google.com/pay/api/android/guides/setup) for Android.\n\n[](#react-native-create-payment-intent)\n\nFirst, create a `PaymentIntent` on your server and specify the amount to collect and the currency. If you already have an integration using the [Payment Intents API](https://docs.stripe.com/payments/payment-intents), add `card` to the list of [payment method types](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types) for your `PaymentIntent` (this is also the default payment method if none are provided):\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"payment_method_types[]\"=card \\  -d amount=1099 \\  -d currency=usd`\n\nA PaymentIntent includes a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\"). You can use the client secret in your React Native app to securely complete the payment process instead of passing back the entire PaymentIntent object. In your app, request a PaymentIntent from your server and store its client secret.\n\n[](#react-native-init)\n\nFirst, check whether or not the device supports Google Pay by calling `isPlatformPaySupported`.\n\n`import { usePlatformPay } from '@stripe/stripe-react-native';  function PaymentScreen() {   const { isPlatformPaySupported } = usePlatformPay();    React.useEffect(() => {     (async function () {       if (!(await isPlatformPaySupported({ googlePay: {testEnv: true} }))) {         Alert.alert('Google Pay is not supported.');         return;       }     })();   }, []);    ...    return (     <View >       ...     </View>   ); }`\n\n[](#react-native-present)\n\nAfter you know Google Pay is available and your app has obtained a `PaymentIntent` or `SetupIntent` client secret, call `confirmPlatformPayPayment`. When confirming a `SetupIntent`, use `confirmPlatformPaySetupIntent` instead.\n\n``import {PlatformPayButton, usePlatformPay} from '@stripe/stripe-react-native';  function PaymentScreen() {   const {     isPlatformPaySupported,     confirmPlatformPayPayment,   } = usePlatformPay();    React.useEffect(() => {     ... // see above   }, []);    const fetchPaymentIntentClientSecret = async () => {     // Fetch payment intent created on the server, see above     const response = await fetch(`${API_URL}/create-payment-intent`, {       method: 'POST',       headers: {         'Content-Type': 'application/json',       },       body: JSON.stringify({         currency: 'usd',       }),     });     const { clientSecret } = await response.json();      return clientSecret;   };    const pay = async () => {     const clientSecret = await fetchPaymentIntentClientSecret();      const { error } = await confirmPlatformPayPayment(       clientSecret,       {         googlePay: {           testEnv: true,           merchantName: 'My merchant name',           merchantCountryCode: 'US',           currencyCode: 'USD',           billingAddressConfig: {             format: PlatformPay.BillingAddressFormat.Full,             isPhoneNumberRequired: true,             isRequired: true,           },         },       }     );      if (error) {       Alert.alert(error.code, error.message);       // Update UI to prompt user to retry payment (and possibly another payment method)       return;     }     Alert.alert('Success', 'The payment was confirmed successfully.');   };    return (     <View >       <PlatformPayButton         type={PlatformPay.ButtonType.Pay}         onPress={pay}         style={{           width: '100%',           height: 50,         }}       />     </View>   ); }``\n\n[](#going-live-react-native)\n\nFollow [Google’s instructions](https://developers.google.com/pay/api/android/guides/test-and-deploy/request-prod-access) to request production access for your app. Choose the integration type **Gateway** when prompted, and provide screenshots of your app for review.\n\nAfter your app has been approved, test your integration in production by using `testEnv: false`, and launching Google Pay from a signed, release build of your app. Remember to use your live mode [API keys](https://docs.stripe.com/keys). You can use a `PaymentIntent` with [`capture_method` = `manual`](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-capture_method) to process a transaction without capturing the payment.",
  "title": "Google Pay | Stripe Documentation",
  "description": "Learn how to accept payments using Google Pay.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/card-element?platform=android",
  "markdown": "# Card Element quickstart | Stripe DocumentationThe Stripe Docs logo\n\nSearch the docs or ask a question",
  "title": "Card Element quickstart | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/elements/appearance-api?platform=android",
  "markdown": "# Elements Appearance API | Stripe DocumentationThe Stripe Docs logo\n\nThe [mobile Payment Element](https://docs.stripe.com/payments/accept-a-payment?platform=android&mobile-ui=payment-element) supports visual customization, which allows you to match the design of your app. The layout stays consistent, but you can modify colors, fonts, and more by creating your [`PaymentSheet.Configuration`](https://stripe.dev/stripe-android/paymentsheet/com.stripe.android.paymentsheet/-payment-sheet/-configuration/index.html) object with an [`appearance`](https://stripe.dev/stripe-android/paymentsheet/com.stripe.android.paymentsheet/-payment-sheet/-configuration/index.html#-431946322%2FProperties%2F2002900378) object.\n\n1.  Start by customizing the [font](#fonts-android)\n2.  Customize [colors](#colors-android) to match your app\n3.  Customize [shapes](#shapes-android) like corner radius\n4.  Fine-tune [specific components](#specific-ui-components-android)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/android-appearance-before-after-example.acf584a69eb99f47fe0b5ffab24818b8.png)\n\n`// The following code creates the appearance shown in the screenshot above val appearance = PaymentSheet.Appearance(    colorsLight = PaymentSheet.Colors(        primary = Color(red = 36, green = 36, blue = 47),        surface = Color.White,        component = Color(red = 243, green = 248, blue = 245),        componentBorder = Color.Transparent,        componentDivider = Color.Black,        onComponent = Color.Black,        subtitle = Color.Black,        placeholderText = Color(red = 115, green = 117, blue = 123),        onSurface = Color.Black,        appBarIcon = Color.Black,        error = Color.Red,    ),    shapes = PaymentSheet.Shapes(        cornerRadiusDp = 12.0f,        borderStrokeWidthDp = 0.5f    ),    typography = PaymentSheet.Typography.default.copy(        fontResId = R.font.avenir_next    ),    primaryButton = PaymentSheet.PrimaryButton(    shape = PaymentSheet.PrimaryButtonShape(        cornerRadiusDp = 20f    ), )  // ...  paymentSheet.presentWithPaymentIntent(    clientSecret,    PaymentSheet.Configuration(        merchantDisplayName = merchantName,        appearance = appearance    ) )`\n\n[\n\n## Fonts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#fonts-android)\n\nCustomize the font by setting [`typography.fontResId`](https://stripe.dev/stripe-android/paymentsheet/com.stripe.android.paymentsheet/-payment-sheet/-typography/index.html#-786783041%2FProperties%2F2002900378) to your custom font’s resource ID. The mobile Payment Element uses the font family of your custom font, but determines sizes and weights itself.\n\nTo increase or decrease the size of text, set [`typography.sizeScaleFactor`](https://stripe.dev/stripe-android/paymentsheet/com.stripe.android.paymentsheet/-payment-sheet/-typography/index.html#1477076499%2FProperties%2F2002900378). We multiply font sizes by this value before displaying them. This is useful if your custom font is slightly larger or smaller than the system font.\n\n`val appearance = PaymentSheet.Appearance(   // …   typography = PaymentSheet.Typography.default.copy(     sizeScaleFactor = 1.15f, // Increase the size of all text by 1.15x     fontResId = R.font.myFont ) val configuration = PaymentSheet.Configuration(   // …   appearance = appearance )`\n\n[\n\n## Colors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#colors-android)\n\nCustomize the colors in the mobile Payment Element by modifying the color categories defined in [`PaymentSheet.Colors`](https://stripe.dev/stripe-android/paymentsheet/com.stripe.android.paymentsheet/-payment-sheet/-colors/index.html). Each color category determines the color of one or more components in the UI. For example, [`primary`](https://stripe.dev/stripe-android/paymentsheet/com.stripe.android.paymentsheet/-payment-sheet/-colors/index.html#1242160296%2FProperties%2F2002900378) defines the color of the **Pay** button and selected items like the **Save this card** checkbox. Refer to the diagram below to see some of the UI elements associated with each color category.\n\n#### Note\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/android-appearance-colors.bf8f8a6f253d483a4ed77dc359b7ac87.png)\n\n[\n\n## Specific UI components![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#specific-ui-components-android)\n\nThe sections above describe customization options that affect the mobile Payment Element broadly, across multiple UI components. We also provide customization options specifically for the primary button (for example, the **Pay** button). Refer to [Appearance.PrimaryButton](https://stripe.dev/stripe-android/paymentsheet/com.stripe.android.paymentsheet/-payment-sheet/-primary-button/index.html) for the full list of customization options.\n\nCustomization options for specific UI components take precedence over other values. For example, `appearance.primaryButton.shapes.cornerRadius` overrides the value of `appearance.shapes.cornerRadius`.\n\n#### Note\n\n[Let us know](https://github.com/stripe/stripe-android/issues/new/choose) if you think we need to add more customization options.",
  "title": "Elements Appearance API | Stripe Documentation",
  "description": "Customize the look and feel of Elements to match the design of your site.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/elements/customer-sheet?platform=android",
  "markdown": "# Integrate the Customer Sheet | Stripe DocumentationThe Stripe Docs logo\n\n## Offer a prebuilt UI for your customers to manage their saved payment methods.\n\n#### Beta\n\nThis feature is currently in beta for Android.\n\nThe Customer Sheet is a prebuilt UI component that lets your customers manage their saved payment methods. You can use the Customer Sheet UI outside of a checkout flow, and the appearance and styling is customizable to match the appearance and aesthetic of your app. Customers can add and remove payment methods, which get saved to the customer object, and set their default payment method stored locally on the device. Use both the Mobile Payment Element and the Customer Sheet to provide customers a consistent end-to-end solution for saved payment methods.\n\n![Screenshot of Customer Sheet presenting multiple saved payment methods in an iOS app.](https://b.stripecdn.com/docs-statics-srv/assets/ios-landing.6c4969968fd6efe3d39fe673628f8284.png)",
  "title": "Integrate the Customer Sheet | Stripe Documentation",
  "description": "Offer a prebuilt UI for your customers to manage their saved payment methods.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/initializing",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/google-pay?platform=android",
  "markdown": "# Google Pay | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to accept payments using Google Pay.\n\nGoogle Pay allows customers to make payments in your app or website using any credit or debit card saved to their Google Account, including those from Google Play, YouTube, Chrome, or an Android device. Use the Google Pay API to request any credit or debit card stored in your customer’s Google account.\n\nGoogle Pay is fully compatible with Stripe’s products and features (for example, recurring payments), allowing you to use it in place of a traditional payment form whenever possible. Use it to accept payments for physical goods, donations, [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"), and so on.\n\n## Using Stripe and Google Pay versus the Google Play billing system![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor sales of physical goods and services, your app can accept Google Pay or any other Stripe-supported payment method. Those payments are processed through Stripe, and you only need to pay Stripe’s [processing fees](https://stripe.com/pricing). However, in-app purchases of digital products and content must use the [Google Play billing system](https://developer.android.com/google/play/billing). Those payments are processed by Google and are subject to their transaction fees.\n\nFor more information about which purchases must use the Google Play billing system, see Google Play’s [developer terms](https://support.google.com/googleplay/android-developer/answer/10281818).\n\n## Accept a payment using Google Pay in your Android app ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n`GooglePayLauncher`, part of the Stripe Android SDK, is the fastest and easiest way to start accepting Google Pay in your Android apps.\n\n[](#html-js-prerequisites)\n\nTo support Google Pay in Android, you need the following:\n\n*   A `minSdkVersion` of `19` or higher.\n*   A `compileSdkVersion` of `28` or higher.\n\nAdditionally, if you wish to test with your own device, you need to [add a payment method to your Google Account](https://support.google.com/wallet/answer/12058983?visit_id=637947092743186187-653786796&rd=1).\n\n[](#setup)\n\nTo use Google Pay, first enable the Google Pay API by adding the following to the `<application>` tag of your **AndroidManifest.xml**:\n\n`<application>   ...   <meta-data     android:name=\"com.google.android.gms.wallet.api.enabled\"     android:value=\"true\" /> </application>`\n\nThis guide assumes you’re using the latest version of the Stripe Android SDK.\n\n`dependencies {     implementation 'com.stripe:stripe-android:20.48.0' }`\n\nFor more details, see Google Pay’s [Set up Google Pay API](https://developers.google.com/pay/api/android/guides/setup) for Android.\n\n[](#button)\n\nAdd the Google Pay button to your app by following [Google’s tutorial](https://developers.google.com/pay/api/android/guides/tutorial#add-button). This ensures you’re using the correct assets.\n\n[](#instantiate)\n\nNext, create an instance of [GooglePayLauncher](https://github.com/stripe/stripe-android/blob/master/payments-core/src/main/java/com/stripe/android/googlepaylauncher/GooglePayLauncher.kt) in your `Activity` or `Fragment`. This must be done in `Activity#onCreate()`.\n\n`GooglePayLauncher.Config` exposes both required and optional properties that configure `GooglePayLauncher`. See `GooglePayLauncher.Config` for more details on the configuration options.\n\n``import com.google.android.gms.wallet.button.PayButton  class CheckoutActivity : AppCompatActivity() {     // fetch client_secret from backend     private lateinit var clientSecret: String      private lateinit var googlePayButton: PayButton      override fun onCreate(savedInstanceState: Bundle?) {         super.onCreate(savedInstanceState)         setContentView(R.layout.checkout_activity)          PaymentConfiguration.init(this, PUBLISHABLE_KEY)          googlePayButton = /* TODO: Initialize button by following Google's guide. */          val googlePayLauncher = GooglePayLauncher(             activity = this,             config = GooglePayLauncher.Config(                 environment = GooglePayEnvironment.Test,                 merchantCountryCode = \"US\",                 merchantName = \"Widget Store\"             ),             readyCallback = ::onGooglePayReady,             resultCallback = ::onGooglePayResult         )          googlePayButton.setOnClickListener {             // launch `GooglePayLauncher` to confirm a Payment Intent             googlePayLauncher.presentForPaymentIntent(clientSecret)         }     }      private fun onGooglePayReady(isReady: Boolean) {         // implemented below     }      private fun onGooglePayResult(result: GooglePayLauncher.Result) {         // implemented below     } }``\n\nAfter instantiating `GooglePayLauncher`, the `GooglePayLauncher.ReadyCallback` instance is called with a flag indicating whether Google Pay is available and ready to use. This flag can be used to update your UI to indicate to your customer that Google Pay is ready to be used.\n\n`import com.google.android.gms.wallet.button.PayButton  class CheckoutActivity : AppCompatActivity() {     // continued from above      private lateinit var googlePayButton: PayButton      private fun onGooglePayReady(isReady: Boolean) {         googlePayButton.isEnabled = isReady     } }`\n\n[](#launch-google-pay)\n\nAfter Google Pay is available and your app has obtained a `PaymentIntent` or `SetupIntent` client secret, launch `GooglePayLauncher` using the appropriate method. When confirming a `PaymentIntent`, use `GooglePayLauncher#presentForPaymentIntent(clientSecret)`. When confirming a `SetupIntent`, use `GooglePayLauncher#presentForSetupIntent(clientSecret)`.\n\n``import com.google.android.gms.wallet.button.PayButton  class CheckoutActivity : AppCompatActivity() {     // fetch client_secret from backend     private lateinit var clientSecret: String      private lateinit var googlePayButton: PayButton      override fun onCreate(savedInstanceState: Bundle?) {         super.onCreate(savedInstanceState)          // instantiate `googlePayLauncher`          googlePayButton.setOnClickListener {             // launch `GooglePayLauncher` to confirm a Payment Intent             googlePayLauncher.presentForPaymentIntent(clientSecret)         }     } }``\n\n[\n\n## Handle the result![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-result)\n\nFinally, implement `GooglePayLauncher.ResultCallback` to handle the result of the `GooglePayLauncher` operation.\n\nThe result can be `GooglePayLauncher.Result.Completed`, `GooglePayLauncher.Result.Canceled`, or `GooglePayLauncher.Result.Failed`.\n\n``class CheckoutActivity : AppCompatActivity() {     // continued from above      private fun onGooglePayResult(result: GooglePayLauncher.Result) {         when (result) {             GooglePayLauncher.Result.Completed -> {                 // Payment succeeded, show a receipt view             }             GooglePayLauncher.Result.Canceled -> {                 // User canceled the operation             }             is GooglePayLauncher.Result.Failed -> {                 // Operation failed; inspect `result.error` for the exception             }         }     } }``\n\n[](#going-live)\n\nFollow [Google’s instructions](https://developers.google.com/pay/api/android/guides/test-and-deploy/request-prod-access) to request production access for your app. Choose the integration type **Gateway** when prompted, and provide screenshots of your app for review.\n\nAfter your app has been approved, test your integration in production by setting the environment to `GooglePayEnvironment.Production`, and launching Google Pay from a signed, release build of your app. Remember to use your live mode [API keys](https://docs.stripe.com/keys). You can use a `PaymentIntent` with [`capture_method` = `manual`](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-capture_method) to process a transaction without capturing the payment.\n\n## Creating a PaymentMethod![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you confirm your payment on your server, you can use `GooglePayPaymentMethodLauncher` to only collect a `PaymentMethod` instead of confirm payment.\n\n``import com.google.android.gms.wallet.button.PayButton  class CheckoutActivity : AppCompatActivity() {     private lateinit var googlePayButton: PayButton      override fun onCreate(savedInstanceState: Bundle?) {         super.onCreate(savedInstanceState)         setContentView(R.layout.checkout_activity)          PaymentConfiguration.init(this, PUBLISHABLE_KEY)          googlePayButton = /* TODO: Initialize button by following Google's guide. */          val googlePayLauncher = GooglePayPaymentMethodLauncher(             activity = this,             config = GooglePayPaymentMethodLauncher.Config(                 environment = GooglePayEnvironment.Test,                 merchantCountryCode = \"FR\",                 merchantName = \"Widget Store\"             ),             readyCallback = ::onGooglePayReady,             resultCallback = ::onGooglePayResult         )          googlePayButton.setOnClickListener {             googlePayLauncher.present(                 currencyCode = \"EUR\",                 amount = 2500             )         }     }      private fun onGooglePayReady(isReady: Boolean) {         googlePayButton.isEnabled = isReady     }      private fun onGooglePayResult(         result: GooglePayPaymentMethodLauncher.Result     ) {         when (result) {             is GooglePayPaymentMethodLauncher.Result.Completed -> {                 // Payment details successfully captured.                 // Send the paymentMethodId to your server to finalize payment.                 val paymentMethodId = result.paymentMethod.id             }             GooglePayPaymentMethodLauncher.Result.Canceled -> {                 // User canceled the operation             }             is GooglePayPaymentMethodLauncher.Result.Failed -> {                 // Operation failed; inspect `result.error` for the exception             }         }     } }``",
  "title": "Google Pay | Stripe Documentation",
  "description": "Learn how to accept payments using Google Pay.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/elements_object/update",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/js/element/the_element_container",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/js/element/events/on_loaderstart",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/js/element/events/on_escape",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/js/element/events/on_change?type=paymentElement",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/js/elements_object/create_element?type=card",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/js/element/events/on_loaderror",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/elements/address-element/collect-addresses?platform=web&client=react",
  "markdown": "# Listen for address input | Stripe DocumentationThe Stripe Docs logo\n\nYou can configure the Address Element to suit your needs.\n\n### Autocomplete![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Address Element has a built in address autocomplete feature that uses the [Google Maps API Places Library](https://developers.google.com/maps/documentation/javascript/places). By default, the autocomplete is enabled with a Stripe provided Google Maps API key if any of the following conditions are met:\n\n*   In a single page checkout flow where the [Payment Element](https://docs.stripe.com/payments/payment-element) is mounted in the same elements group as the Address Element.\n*   In a checkout flow that uses the Address Element in an active [Link](https://docs.stripe.com/payments/link) session.\n\nTo enable autocomplete in the Address Element for all other scenarios, you can use the [`autocomplete`](https://docs.stripe.com/js/elements_object/create_address_element#address_element_create-options-autocomplete) option with `mode` set to `google_maps_api`. Set the `apiKey` to be your own [Google Maps API key](https://developers.google.com/maps/documentation/javascript/get-api-key#create-api-keys) that’s configured to allow the [Places API](https://developers.google.com/maps/documentation/javascript/places#add-places-api-to-the-api-keys-api-restrictions-list) usage. Your Google Maps API key is only used when the Stripe provided Google Maps API key isn’t available.\n\n#### Note\n\nIf you’ve deployed a [CSP](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) and want to enable autocomplete with your own Google Maps API key, include `https://maps.googleapis.com` as a `connect-src` and `script-src` directive. Refer to the [Google Maps API official guide](https://developers.google.com/maps/documentation/javascript/content-security-policy) for the most updated CSP requirement.\n\n`<AddressElement options={{   mode: \"shipping\",   autocomplete: {     mode: \"google_maps_api\",     apiKey: \"{YOUR_GOOGLE_MAPS_API_KEY}\",   }, }} />`\n\n### Prefill address form![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Address Element accepts a [`defaultValues`](https://docs.stripe.com/js/elements_object/create_address_element#address_element_create-options-defaultValues) which lets you prefill the address form when the page loads. An Address Element with all values prefilled looks similar to:\n\n`<AddressElement options={{   mode: \"shipping\",   defaultValues: {     name: 'Jane Doe',     address: {       line1: '354 Oyster Point Blvd',       line2: '',       city: 'South San Francisco',       state: 'CA',       postal_code: '94080',       country: 'US',     },   }, }} />`\n\n### Other options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRefer to [Stripe.js](https://docs.stripe.com/js/elements_object/create_address_element#address_element_create-options) for the complete list of options in detail.\n\n`// Sample of a options object <AddressElement options={{   mode: 'shipping',   allowedCountries: ['US'],   blockPoBox: true,   fields: {     phone: 'always',   },   validation: {     phone: {       required: 'never',     },   }, }} />`",
  "title": "Listen for address input | Stripe Documentation",
  "description": "Collect addresses to use in custom ways using an event listener",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/element/events",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/payments/alipay",
  "markdown": "# Alipay payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about Alipay, a digital wallet popular with customers from China.\n\nAlipay is a digital wallet in China that has more than a billion active users worldwide. Alipay users can pay on the web or on a mobile device using login credentials or their Alipay app. Alipay has a low dispute rate and reduces fraud by authenticating payments using the customer’s login credentials.\n\n*   **Customer locations**\n    \n    Chinese consumers, overseas Chinese, and Chinese travelers\n    \n*   **Presentment currency**\n    \n    CNY, AUD, CAD, EUR, GBP, HKD, JPY, SGD, MYR, NZD, USD (depending on business locations)\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Wallets\n    \n*   **Recurring payments**\n    \n    [Requires approval](https://support.stripe.com/contact)\n    \n*   **Payout timing**\n    \n    Standard payout timing applies\n    \n*   **Connect support**\n    \n    Partial (request an invite to create charges [on behalf of](https://docs.stripe.com/connect/charges#on_behalf_of) other accounts)\n    \n*   **Dispute support**\n    \n    No\n    \n*   **Manual capture support**\n    \n    No\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Prohibited business categories![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBoth Stripe and Alipay maintain a list of prohibited businesses that aren’t allowed to use their services. To use Alipay on Stripe, your business can’t be [restricted from using Stripe](https://stripe.com/restricted-businesses) or appear on Alipay’s [prohibited business list](https://stripe.com/legal/alipay). If you’re not sure if your business is a prohibited business, or have questions about how these requirements apply to you, please [contact support](https://support.stripe.com/contact/login).\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate Alipay and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable Alipay. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n[Payment Links](https://docs.stripe.com/payment-links) also supports adding Alipay from the Dashboard.\n\nIf you prefer to manually list payment methods, learn how to [manually configure Alipay as a payment](https://docs.stripe.com/payments/alipay/accept-a-payment).\n\n## Disputed payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAlipay payments have a low risk of fraud or unrecognized payments because the customer must authenticate the payment, so no dispute process exists that could create chargebacks and withdraw funds from your Stripe account. If an Alipay user contacts them about a problem with a transaction, they might direct that user to you for a resolution.\n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can refund Alipay payments up to 90 days after the original payment. Refunds for Alipay payments are asynchronous and take up to 5 minutes to complete. Stripe notifies you of the final refund status using the `charge.refund.updated` [webhook](https://docs.stripe.com/webhooks \"webhook\") event. When a refund succeeds, the status of the [Refund](https://docs.stripe.com/api/refunds/object) object transitions to `succeeded`. If a refund fails, the status of the Refund object transitions to `failed` and Stripe returns the amount to your Stripe balance. At this point, you need to arrange an alternative way of providing your customer with a refund.\n\n## Supported currencies![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can create Alipay payments in the currencies that map to your country. The default local currency for Alipay is `cny` and customers also see their purchase amount in `cny`.\n\n| Currency | Country |\n| --- | --- |\n| `cny` | Any country |\n| `aud` | Australia |\n| `cad` | Canada |\n| `eur` | Austria, Belgium, Bulgaria, Cyprus, Czech Republic, Denmark, Estonia, Finland, France, Germany, Greece, Ireland, Italy, Latvia, Lithuania, Luxembourg, Malta, Netherlands, Norway, Portugal, Romania, Slovakia, Slovenia, Spain, Sweden, Switzerland |\n| `gbp` | United Kingdom |\n| `hkd` | Hong Kong |\n| `jpy` | Japan |\n| `myr` | Malaysia |\n| `nzd` | New Zealand |\n| `sgd` | Singapore |\n| `usd` | United States |\n\nIf you have a bank account in another currency and would like to create an Alipay payment in that currency, you can [contact support](https://support.stripe.com/email). Support for additional currencies is provided on a case-by-case basis.",
  "title": "Alipay payments | Stripe Documentation",
  "description": "Learn about Alipay, a digital wallet popular with customers from China.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/mobilepay",
  "markdown": "# MobilePay payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about MobilePay, a popular payment method in Denmark and Finland.\n\nMobilePay is a [single-use](https://docs.stripe.com/payments/payment-methods#usage) card wallet payment method used in Denmark and Finland. It allows your customer to [authenticate and approve](https://docs.stripe.com/payments/payment-methods#customer-actions) payments using the MobilePay app.\n\nWhen your customer pays with MobilePay, Stripe performs a card transaction using the card data we receive from MobilePay. The processing of the card transaction is invisible to your integration, and Stripe [immediately notifies you](https://docs.stripe.com/payments/payment-methods#payment-notification) whether the payment succeeded or failed.\n\n*   **Customer locations**\n    \n    Denmark and Finland\n    \n*   **Presentment currency**\n    \n    DKK, EUR, NOK, SEK\n    \n*   **Payment confirmation**\n    \n    Customer-initiated\n    \n*   **Payment method family**\n    \n    Digital wallet\n    \n*   **Recurring payments**\n    \n    No\n    \n*   **Payout timing**\n    \n    [Standard payout timing](https://docs.stripe.com/payouts#payout-speed) applies\n    \n*   **Connect support**\n    \n    Yes\n    \n*   **Dispute support**\n    \n    Yes\n    \n*   **Manual capture support**\n    \n    Yes\n    \n*   **Refunds / Partial refunds**\n    \n    Yes / yes\n    \n\n## Payment flows ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCustomers pay with MobilePay by using one of the following methods:\n\nCustomers follow a mobile redirect from your website or mobile app to the MobilePay app where they authorize the payment, then return to your website or mobile app.\n\n## Get started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou don’t have to integrate MobilePay and other payment methods individually. If you use our front-end products, Stripe automatically determines the most relevant payment methods to display. Go to the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) and enable MobilePay. To get started with one of our hosted UIs, follow a quickstart:\n\n*   [Checkout](https://docs.stripe.com/checkout/quickstart): Our prebuilt, hosted checkout page.\n*   [Elements](https://docs.stripe.com/payments/quickstart): Our drop-in UI components.\n\n### Other payment products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following Stripe products also let you add MobilePay from the Dashboard:\n\n*   [Payment Links](https://docs.stripe.com/payment-links)\n\nYou can also [manually configure MobilePay as a payment method](https://docs.stripe.com/payments/mobilepay/accept-a-payment).\n\n## MobilePay with Connect ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can use [Stripe Connect](https://docs.stripe.com/connect/overview) with MobilePay to process payments. Connect users can use MobilePay with the following charge types:\n\n*   [Direct](https://docs.stripe.com/connect/direct-charges)\n*   [Destination](https://docs.stripe.com/connect/destination-charges)\n*   [Separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n### Enable MobilePay for connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConnected accounts with access to the full Stripe Dashboard can enable MobilePay in their [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods). To check which accounts have enabled MobilePay, use the `capabilities` hash in our [accounts webhooks or APIs](https://docs.stripe.com/api/accounts/object#account_object-capabilities-mobilepay_payments) to see if the `mobilepay_payments` capability is set to `active`.\n\nFor connected accounts that don’t have access to the full Stripe Dashboard, see [enable payment methods for your connected accounts](https://docs.stripe.com/connect/account-capabilities). The name of the connected account is the name customers see during checkout and in the MobilePay app.\n\n## Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMobilePay supports full and partial refunds. You can also issue multiple partial refunds up to the amount of the original charge.\n\n## Disputed payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMobilePay allows transaction disputes. Customers can open disputes directly with their cards issuer for cases of suspected fraud, double payments, or a difference between an order and a transaction amount. You can submit evidence to contest a dispute directly. The dispute process is the same as that for card payments. Learn how to [manage disputes](https://docs.stripe.com/disputes/responding).\n\n## Card transaction retries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMobilePay allows customers to retry payments in-app before marking a payment as failed and redirecting to your website. When a card transaction fails, the customer can retry a payment using a different card, which might result in a successful payment.\n\n## 3D Secure authentication![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCertain cards or banks might require an additional card authentication step to process the MobilePay transaction.\n\nWhen this occurs, the customer is presented with a WebView dialog in the MobilePay application, prompting them to authorize the payment. The need to perform a [3D Secure challenge](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") is invisible to your integration and there are no extra integration steps for you to handle.\n\nThe expected impact varies, depending on customer country and card network:\n\n| Country | Card brand | Payments requiring 3DS step-up |\n| --- | --- | --- |\n| Denmark | Visa | ~1% |\n| Denmark | Mastercard | ~1.5% |\n| Finland | Visa | ~5% |\n| Finland | Mastercard | ~7% |\n\n### Liability shift![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Liability shift](https://docs.stripe.com/payments/3d-secure/authentication-flow#disputed-payments) doesn’t apply to MobilePay payments unless [3D Secure authentication](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") has taken place. MobilePay doesn’t allow you the option to enforce 3D Secure authentication on the underlying card payment.\n\n## Prohibited business categories ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn addition to the categories of [businesses restricted from using Stripe](https://stripe.com/restricted-businesses), the following categories are specifically prohibited from using MobilePay:\n\n*   Cryptocurrencies\n*   Stock trade\n*   Gambling\n*   Betting\n*   Bonds\n*   Money transfers\n*   Debt collection\n*   Multi-level marketing and pyramid schemes\n\nFor more information about MobilePay eligibility for your account, review your [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods) in the Dashboard.\n\n## Current limitations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Account icons![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe MobilePay transaction confirmation page displays the default Stripe account icon instead of a configurable custom logo. Stripe will notify you when feature improvements become available so you can update your account configuration as needed.\n\n![A screenshot of a successful MobilePay payment.](https://b.stripecdn.com/docs-statics-srv/assets/mobilepay-no-merchant-logo.f6f41b7fecbbd48cfabcbff85521ec6d.png)\n\nAn example confirmation page for a successful MobilePay payment.\n\n### Manual captures![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAt this time, MobilePay only supports automatic captures and [manual captures of the full amount](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method). Stripe will notify you as feature improvements become available for manual captures of partial amounts.\n\n### Dankort support![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe currently doesn’t have support for the Dankort card network. If a customer chooses to pay with a Dankort-branded card, Stripe processes the payment on the Visa and Mastercard networks instead.\n\n## Fees![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe receives card data from MobilePay to process card transactions using Stripe’s Visa and Mastercard integrations. Because MobilePay payments are card transactions, you incur the following fees for each successful transaction:\n\n*   Stripe processing fees associated with the card transaction\n*   Applicable taxes\n*   MobilePay transaction processing fee\n*   An additional monthly membership fee (applicable only to businesses registered in Denmark)\n\nThe MobilePay transaction fee isn’t subtracted immediately from the transaction. Instead, Stripe bills them once a day.\n\n### Stripe processing fees and taxes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter a successful transaction, Stripe automatically deducts the Stripe transaction fees and applicable taxes from the original transaction amount and provides the remaining amount on your Stripe balance. These fees are identical to a standard card transaction.\n\nMobilePay is subject to the [standard payout schedule applicable to your country](https://docs.stripe.com/payouts).\n\n### MobilePay processing fee![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe MobilePay processing fee isn’t presented within the net amount of a successful transaction. Instead, Stripe bills the MobilePay processing fee once a day, at which point we automatically deduct the sum that you owe from your [Stripe balance](https://dashboard.stripe.com/balance).\n\n### MobilePay monthly processing fee![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMobilePay charges a fixed 35 DKK monthly membership fee to all businesses registered in Denmark that use its services. Stripe bills this fee once a month (if applicable), at which point we automatically deduct the sum that you owe from your [Stripe balance](https://dashboard.stripe.com/balance).\n\nThe incurred MobilePay fees are listed as a separate entry on your monthly tax invoice. You can find your monthly invoices in the [Dashboard](https://dashboard.stripe.com/settings/documents).",
  "title": "MobilePay payments | Stripe Documentation",
  "description": "Learn about MobilePay, a popular payment method in Denmark and Finland.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/quickstart",
  "markdown": "# Prebuilt subscription page with Stripe Checkout\n\nSearch the docs or ask a question",
  "title": "Prebuilt subscription page with Stripe Checkout | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/express-accounts",
  "markdown": "# Using Connect with Express connected accounts\n\n## Express connected accounts enable your platform to manage payout schedules, customize the flow of funds, and control branding. Stripe handles onboarding, account management, and identity verification.\n\n## Express demo![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo see the complete Express onboarding flow in action, try the [sample end-to-end Express integration](https://rocketrides.io/) before you start building your own. This demo includes an example of a connected account onboarding experience and account management for Rocket Rides, an on-demand marketplace.\n\nYou can find the demo’s [complete source code](https://github.com/stripe/stripe-connect-rocketrides) on GitHub.\n\n![Rocket Rides, a demo of Stripe Connect with Express connected accounts](https://b.stripecdn.com/docs-statics-srv/assets/rocket-rides-new.e01ced22698d7f5d3d1c915f26175dcd.png)\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo create Express connected accounts, you must meet all of these requirements:\n\n*   **Minimum API version**: Express connected accounts require API version 2017-05-25 or later. [Capabilities](https://docs.stripe.com/connect/account-capabilities) require API version 2019-02-19 or later.\n*   **Platform in a supported country**: Platforms in Australia, Austria, Belgium, Brazil, Bulgaria, Canada, Croatia, Cyprus, the Czech Republic, Denmark, Estonia, Finland, France, Germany, Greece, Hong Kong, Hungary, Ireland, Italy, Japan, Latvia, Lithuania, Luxembourg, Malta, Mexico, the Netherlands, New Zealand, Norway, Poland, Portugal, Romania, Singapore, Slovakia, Slovenia, Spain, Sweden, Switzerland, Thailand, the United Kingdom, and the United States can create Express accounts for most countries [Stripe supports](https://stripe.com/global). For information about country-specific restrictions, or to request notification when Express accounts become available in your country, [contact us](mailto:connect@stripe.com).\n*   **Countries that don’t support self-serve**: Due to restrictions that apply when using Connect in the [United Arab Emirates](https://support.stripe.com/questions/connect-availability-in-the-uae) and [Thailand](https://support.stripe.com/questions/stripe-thailand-support-for-marketplace), platform users in these countries can’t self-serve Express connected accounts. To begin onboarding for Express connected accounts in these countries, [contact us](https://stripe.com/contact/sales).\n*   **Platforms in the UAE**: Platforms in the UAE can only use Express connected accounts based in the UAE with the following charge types: [destination\\_charges](https://docs.stripe.com/connect/destination-charges) and [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers). Destination charges using the [on\\_behalf\\_of](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-on_behalf_of) attribute are not yet supported for UAE platforms.\n*   **Vetting for fraud**: Because your platform is responsible for losses incurred by Express connected accounts, you must closely examine all accounts that sign up through your platform for potential fraud. Refer to our [risk management best practices guide](https://docs.stripe.com/connect/risk-management/best-practices#fraud) for more information.\n*   **Platform profile**: You need to complete your [platform’s profile](https://dashboard.stripe.com/connect/registration).\n\n## Onboarding Express connected accounts outside of your platform’s country ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can enable onboarding on a per-country basis in the [Connect Settings](https://dashboard.stripe.com/account/applications/settings) section of your Dashboard.\n\nThe Express account onboarding flow is currently localized in English, French, Spanish, Bulgarian, Simplified Chinese, Traditional Chinese, Czech, Danish, Dutch, Estonian, Finnish, German, Greek, Hungarian, Indonesian, Italian, Japanese, Latvian, Lithuanian, Norwegian, Polish, Portuguese, Romanian, Slovak, Slovenian, Swedish, and Thai.\n\nKeep the following in mind when onboarding accounts globally:\n\n*   **International business:** Your platform is responsible for understanding the implications of doing business internationally, such as tax and financial reporting.\n*   **Charge flows:** Be sure to review your options for [creating charges](https://docs.stripe.com/connect/charges) based on the countries you intend to operate in.\n*   **Service agreement type:** Your platform can create connected accounts under the [recipient service agreement](https://docs.stripe.com/connect/service-agreement-types#recipient) to enable [cross-border transfers](https://docs.stripe.com/connect/account-capabilities#transfers-cross-border). Such accounts have restricted access to capabilities.\n\n[](#configure-onboarding)\n\nBefore onboarding your first account, go to the [Connect settings page](https://dashboard.stripe.com/account/applications/settings) to customize the visual appearance of the form with your brand’s name, color, and icon. Connect Onboarding requires this information.\n\n[](#create-account)\n\nUse the [Create Account](https://docs.stripe.com/api/accounts/create) API to create a connected account with `type` set to `express`. You can prefill any information, but at a minimum, you must specify the `type`. The country of the account defaults to the same country as your platform, and the account confirms the selection during onboarding.\n\n#### Note\n\nThis example includes only some of the fields you can set when creating an account. For a full list of the fields you can set, such as `address` and `website_url`, see the [Create Account API reference](https://docs.stripe.com/api/accounts/create).\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d type=express`\n\nIf you know the country and [capabilities](https://docs.stripe.com/connect/account-capabilities) for your connected account, you can provide that information when you create the account. Connect Onboarding then collects the requirements for those capabilities. To reduce onboarding effort, request only the capabilities you need.\n\n`curl https://api.stripe.com/v1/accounts \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d country=US \\  -d type=express \\  -d \"capabilities[card_payments][requested]\"=true \\  -d \"capabilities[transfers][requested]\"=true \\  -d business_type=individual \\   --data-urlencode \"business_profile[url]\"=\"[https://example.com](https://example.com/)\"`\n\nIf you’ve already collected information for your connected accounts, you can prefill that information on the account object. You can prefill any account information, including personal and business information, external account information, and so on.\n\nConnect Onboarding doesn’t ask for the prefilled information. However, it does ask the account holder to confirm the prefilled information before accepting the [Connect service agreement](https://docs.stripe.com/connect/service-agreement-types).\n\nWhen you onboard an account without its own website and your platform provides it with a personal URL, prefill its `business_profile.url`. If the account doesn’t have a URL, you can prefill its `business_profile.product_description` instead.\n\nWhen testing your integration, prefill account information using [test data](https://docs.stripe.com/connect/testing).\n\nIf you omit `capabilities`, Connect Onboarding uses the settings in the [Configuration settings](https://dashboard.stripe.com/account/applications/settings/express) section of the Stripe Dashboard to automatically request capabilities based on the account’s country.\n\n[](#create-link)\n\n[Create an Account Link](https://docs.stripe.com/api/account_links/create) with the following parameters:\n\n*   `account` - use the account ID returned by the API from the previous step\n*   `refresh_url`\n*   `return_url`\n*   `type` = `account_onboarding`\n\n`curl https://api.stripe.com/v1/account_links \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d account=  {{CONNECTED_ACCOUNT_ID}}   \\   --data-urlencode refresh_url=\"[https://example.com/reauth](https://example.com/reauth)\" \\   --data-urlencode return_url=\"[https://example.com/return](https://example.com/return)\" \\  -d type=account_onboarding`\n\n[](#redirect-link)\n\nAn [Account Link](https://docs.stripe.com/api/account_links/object) contains a `url`. Redirect the account to this link to send your account into the onboarding flow. Each [Account Link](https://docs.stripe.com/api/account_links) URL can only be used once because it grants access to the account holder’s personal information. Authenticate the account in your application before redirecting them to this URL.\n\nBefore creating the first account link for an Express connected account, prefill any [Know Your Customer](https://support.stripe.com/questions/know-your-customer) (KYC) information. After you create an account link for an Express connected account, you can’t read or update its KYC information.\n\n#### Security tip\n\nDon’t email, text, or otherwise send account link URLs outside of your platform application. Instead, provide them to the authenticated account holder within your application.\n\n[](#return-user)\n\nConnect Onboarding requires you to pass both a `return_url` and `refresh_url` to handle all cases where the connected account is redirected to your platform. It’s important that you implement these correctly to provide the best experience for your connected account.\n\n#### Note\n\nYou can use HTTP for your `return_url` and `refresh_url` while in test mode (for example, to test with localhost), but live mode only accepts HTTPS. Be sure to swap testing URLs for HTTPS URLs before going live.\n\n#### return\\_url![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe issues a redirect to this URL when the connected account completes the Connect Onboarding flow. This doesn’t mean that all information has been collected or that there are no outstanding requirements on the account. This only means the flow was entered and exited properly.\n\nNo state is passed through this URL. After a connected account is redirected to your `return_url`, check the state of the `details_submitted` parameter on their account by doing either of the following:\n\n*   Listen to `account.updated` events with a [Connect webhook](https://docs.stripe.com/connect/webhooks).\n*   [Retrieve](https://docs.stripe.com/api/accounts/retrieve) the account with the API.\n\n#### refresh\\_url![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour connected account is redirected to the `refresh_url` in these cases:\n\n*   The link is expired (a few minutes passed after the link was created).\n*   They already visited the URL (they refreshed the page or clicked back or forward in the browser).\n*   Your platform can no longer access the account.\n*   The account has been rejected.\n\nSet up your `refresh_url` to trigger a method on your server to call [Account Links](https://docs.stripe.com/api/account_links) again with the same parameters, and redirect the connected account to the Connect Onboarding flow to create a seamless experience.\n\n[\n\n## Handle connected accounts that have not completed onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n\n\n](#handle-users-not-completed-onboarding)\n\nA connected account that’s redirected to your `return_url` might not have completed the onboarding process. [Retrieve](https://docs.stripe.com/api/accounts/retrieve) their account and check for `charges_enabled`. If the account isn’t fully onboarded, provide UI prompts to allow them to continue onboarding later. They can complete their account activation through a new account link (generated by your integration). You can check the state of the `details_submitted` parameter on their account to see if they’ve completed the onboarding process.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Express Dashboard](https://docs.stripe.com/connect/express-dashboard)\n*   [Integrate the Express Dashboard](https://docs.stripe.com/connect/integrate-express-dashboard)\n*   [Customize the Express Dashboard](https://docs.stripe.com/connect/customize-express-dashboard)",
  "title": "Using Connect with Express connected accounts | Stripe Documentation",
  "description": "Express connected accounts enable your platform to manage payout schedules, customize the flow of funds, and control branding. Stripe handles onboarding, account management, and identity verification.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/designing-integration",
  "markdown": "# Designing an integration | Stripe DocumentationThe Stripe Docs logo\n\n## Learn what choices you need to make to integrate subscriptions into your business.\n\nBefore you start building your [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") integration, you need to choose the right integration path, especially if you’re not writing the code yourself and need to collaborate with others. Use this guide to help you decide on the best way to build your integration, and follow the links to in-depth, step-by-step guides.\n\nThis guide is for users who aren’t necessarily writing code, but want to learn about the high-level subscription integration process so that they can create plans and organize resources.\n\nIf you already know how you’re going to build your integration, or if you want to start coding right away, see our [integration builder](https://docs.stripe.com/billing/quickstart).\n\n[](#subscription-models)\n\nYou need to understand the available subscription models to help you make later choices, such as which pricing model and payment form to use. First, consider your business model:\n\n*   If you want customers to pay, then provision access to your service, click the **pay up front** tab below to learn more.\n*   If you want to collect payment details, then offer customers a free trial period before billing them, click the **free trial** tab below to learn more.\n*   If you want to provide users access to your service without asking them for any payment information (a _freemium_ model), click the **freemium** tab below to learn more.\n\n![Pay-up-front subscription model](https://b.stripecdn.com/docs-statics-srv/assets/sub_model_pay_up_front.6b48054ef005d5ea359d56a3a07b6085.svg)\n\nPay-up-front model\n\nIn the pay-up-front model, you collect payment details and charge customers before provisioning access to your service. After the initial charge, you continue to charge customers the same fixed price for the same service at regular intervals. In this model, you use the Dashboard or [Subscriptions API](https://docs.stripe.com/api/subscriptions) manage customer subscriptions. If you want to allow customers to modify their subscriptions directly, you need to integrate the [customer portal](https://docs.stripe.com/customer-management).\n\nFor example, a photo hosting company that offers basic and premium service levels and charges customers on a monthly basis might have this setup:\n\n*   One product for the basic option\n*   One product for the premium option\n*   One price for the basic option (15 USD per month)\n*   One price for the premium option (25 USD per month)\n\nA typical flow for this model would look like the following:\n\n1.  The customer chooses their plan (basic or premium).\n2.  You collect payment information.\n3.  You provision access to your service. You know when to do this by monitoring [webhook events](https://docs.stripe.com/webhooks).\n4.  You continue to provision access for customers throughout the lifecycle of the subscription. Check regularly to make sure you’re not providing access if a customer’s payment has failed.\n\nSee the [integration guide](https://docs.stripe.com/billing/subscriptions/build-subscriptions) to learn how to build an integration with a low-code approach that uses a prebuilt and hosted page from [Stripe Checkout](https://docs.stripe.com/payments/checkout) or a custom version with [Stripe Elements](https://docs.stripe.com/payments/elements).\n\n[](#collect-payment-info)\n\nIf you don’t want to write a lot of code, use [Checkout](https://docs.stripe.com/payments/checkout), Stripe’s prebuilt, hosted payment page. See the [subscriptions with Checkout](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=stripe-hosted) integration guide to get started.\n\nIf you want a more customized payment form that you can embed into your existing website, use [Elements](https://docs.stripe.com/payments/elements), a set of prebuilt UI elements that’s part of [Stripe.js](https://docs.stripe.com/payments/elements).\n\n[](#pricing-table)\n\nEmbed a [pricing table](https://docs.stripe.com/payments/checkout/pricing-table) on your website to show customers pricing information for subscriptions. When customers choose a subscription option, they’re taken directly to checkout. Configure, customize, and update directly in the [Dashboard](https://dashboard.stripe.com/test/pricing-tables) without writing any code.\n\n[](#modify-subs)\n\nIf you’re collecting payment information with Checkout, you can use the [customer portal](https://docs.stripe.com/customer-management) to allow customers to directly update their subscription details, like payment method and frequency. See the [integration guide](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=stripe-hosted) for detailed instructions on setting this up. (Before integrating, you should also be aware of the [limitations](https://docs.stripe.com/customer-management) of the portal.)\n\nIf you’re integrating with Elements, you can add a form on the frontend to collect details about the plan they want to change (such as the price ID and their customer information) and send that to an endpoint on the backend. For more details and sample code, see the section about [letting customers change their plans](https://docs.stripe.com/billing/subscriptions/build-subscriptions?ui=elements#change-price) in the Elements quickstart.\n\n[](#pricing-models)\n\nIf you’re providing the same good every month and don’t expect that to change, use a simple fixed-price model. If the price varies depending on the number of users or units, you can use volume-based or tier-based prices. For a complete list of available models and a detailed description of each one, see [examples of pricing models](https://docs.stripe.com/products-prices/pricing-models).",
  "title": "Designing an integration | Stripe Documentation",
  "description": "Learn what choices you need to make to integrate subscriptions into your business.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connect/account-debits",
  "markdown": "# Debit connected accounts | Stripe DocumentationThe Stripe Docs logo\n\n## Collect funds from a connected account by debiting its Stripe balance.\n\nAt times, your platform might need to collect funds from your connected accounts:\n\n*   To charge the connected account directly for products or services\n*   To recover funds for a previous refund\n*   To make other adjustments to connected [account balances](https://docs.stripe.com/connect/account-balances) (for example, to correct an error)\n\nWhen creating and managing connected accounts where your platform is responsible for negative balances, including [Express](https://docs.stripe.com/connect/express-accounts) or [Custom](https://docs.stripe.com/connect/custom-accounts) accounts, you can debit a connected account’s Stripe balance, transferring funds to your platform balance.\n\n#### Note\n\nStripe supports two approaches for doing so:\n\n*   [Charging a connected account](#charging-a-connected-account) for your platform’s products or services\n*   [Transferring from a connected account](#transferring-from-a-connected-account) to recover funds or make other adjustments\n\nBoth approaches create the same flow of funds: a `Transfer` is created on the connected account and a `Payment` is created on the platform account.\n\n#### Caution\n\nUsing Account Debits requires getting legally binding consent from your connected accounts. This feature is available in Australia, Canada, Europe, Hong Kong, Japan, New Zealand, and the US. Stripe supports Account Debits only when both your platform and the connected account are in the same region (for example, both are in Japan). If you have interest in other regions, contact the [sales team](https://stripe.com/contact/sales). Using Account Debits incurs an [additional cost](https://stripe.com/connect/pricing).\n\n## Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis functionality is only supported for connected accounts where your platform is responsible for negative balances, including [Express](https://docs.stripe.com/connect/express-accounts) and [Custom](https://docs.stripe.com/connect/custom-accounts) accounts. Additionally:\n\n*   The connected account and the platform must be in the same region (that is, both must be in Europe or in the US).\n*   The `currency` value must match the default currency of the connected account.\n*   Debiting an account can’t make the connected account balance become negative unless you have [reserves enabled](https://docs.stripe.com/connect/account-balances#understanding-connected-reserve-balances) (on by default for all new platforms created after January 31, 2017) and have a bank account in the same currency as the debit.\n*   If a connected account has a [negative balance](https://docs.stripe.com/connect/account-balances#accounting-for-negative-balances), Stripe might auto-debit the external account on file, depending on what country the connected account is in. If the external account [hasn’t been verified](https://stripe.com/resources/more/bank-account-verification-101), the debit can fail.\n\n## Charging a connected account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [create a charge](https://docs.stripe.com/api#create_charge) API call supports providing a connected account ID as the `source` value:\n\n`curl https://api.stripe.com/v1/charges \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=1500 \\  -d currency=usd \\  -d source=  {{CONNECTED_ACCOUNT_ID}}    `\n\nThe API call returns the `Payment` created on the platform account (note: it does not return a `Charge`).\n\nThis approach is appropriate for platforms that charge their connected accounts for goods and services (that is, for using the platform). For example, a platform can charge its connected accounts for additional fees or services through their Stripe balance, minimizing any need to collect an additional payment method and allowing for nearly instant availability of the funds.\n\n## Transferring from a connected account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe second method for debiting a connected account is to make a transfer from the connected account to your platform account. Use the `Stripe-Account` header to authenticate as the connected account and provide your platform’s Stripe account ID as the `destination`:\n\n`curl https://api.stripe.com/v1/transfers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -H \"Stripe-Account:   {{CONNECTED_ACCOUNT_ID}}  \" \\  -d amount=1500 \\  -d currency=usd \\  -d destination={{PLATFORM_STRIPE_ACCOUNT_ID}}`\n\nThis API call returns the `Transfer` created on the connected account.\n\nThis approach is best for making adjustments within a platform (for example, correcting a payment mistake or recovering any fees you paid to Stripe).\n\n#### Note\n\nWhen you make this request, pass your platform’s Stripe account ID. You can find it on the [Business settings](https://dashboard.stripe.com/settings/account) page in your Dashboard. Its format is similar to `acct_1Nv0FGQ9RKHgCVdK`.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Creating Direct Charges](https://docs.stripe.com/connect/direct-charges)\n*   [Creating Destination Charges on Your Platform](https://docs.stripe.com/connect/destination-charges)\n*   [Creating Separate Charges and Transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)",
  "title": "Debit connected accounts | Stripe Documentation",
  "description": "Collect funds from a connected account by debiting its Stripe balance.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage",
  "markdown": "# Record usage for billing | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to record and report usage for your customers.\n\n#### Note\n\n## Configuring Meter![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMake sure that you have properly configured your [Meter](https://docs.stripe.com/api/billing/meter/object) before recording usage. Meters are immutable, with the exception of the display name.\n\n#### Event name![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis is the name of the meter event that you plan to record usage for with this meter. Use this name on the `event_name` field of the [Meter Event](https://docs.stripe.com/api/billing/meter-event/create) when you send usage to Stripe. This makes sure that the usage is ingested and aggregated by the correct meter. You can only use an event name with a single meter.\n\n#### Event ingestion![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSpecify how you want to send events to Stripe. There are two options:\n\n*   **Raw**: Treat all meter events as standalone events. Multiple events sent for the same timestamp don’t overwrite each other and are included in the aggregation. This is the default option if nothing is specified.\n*   **Pre-aggregated (hourly or daily)**: If you’re sending events pre-aggregated over a specific time interval, either hourly or daily, Stripe only uses the most recent meter event within the hourly or daily window for aggregation. A newer event sent within the same hourly or daily window overwrites the previous one.\n\n#### Aggregation formula![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSpecify how to aggregate the usage over the billing period. Options for that parameter include:\n\n*   **Sum**: Bill based on the sum of all usage values for the billing period.\n*   **Count**: Bill based on the count of all usage for the billing period.\n*   **Last (coming soon)**: Bill based on the most recent usage record for the billing period. If no usage is reported, the bill is based on a usage quantity of 0.\n*   **Max (coming soon)**: Bill based on the biggest value in the specified bucket of time (second, hour, day) within the billing period. For example, the max number of users who logged in during any day of the billing period, often referred to as “high watermark billing”\n\n#### Payload key overrides![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSpecify which keys in the event payload refer to the customer and numerical usage values.\n\n*   **value\\_settings**: Define the key that refers to the numerical usage value in the payload of the meter event with this parameter. While the default key is `value`, you can specify a different key, such as tokens.\n*   **customer\\_mapping**: Define the key in the event payload that refers to the [Stripe Customer ID](https://docs.stripe.com/api/customers/object#customer_object-id) with this parameter. Although the default key is `stripe_customer_id`, you can specify a different one, such as `customer_id`.\n\n### Event filtering Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEvent filtering allows you to define specific conditions under which meter events are included or discarded in the billing process. For example, you can filter out events where the API status code equals 500 so that these events aren’t billable. [Click here](#) if you’re interested in joining the beta.\n\n## Recording usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can share usage information with Stripe by creating meter events with a `customer_id`, a numerical value, and optionally a timestamp. How often you report usage is up to you. For example, you can send usage as it occurs or in batches (for example, every day). At the end of the billing period, Stripe automatically calculates the total price and invoices for all usage during the billing period.\n\nTo create [Meter Events](https://docs.stripe.com/api/billing/meter-event/create):\n\n`curl https://api.stripe.com/v1/billing/meter_events \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d event_name=alpaca_ai_tokens \\  -d \"payload[value]\"=25 \\  -d \"payload[stripe_customer_id]\"={{CUSTOMER_ID}}`\n\n### Idempotency![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse [idempotency keys](https://docs.stripe.com/api/idempotent_requests) to prevent reporting usage more than one time due to latency or other issues. Every meter event corresponds to an [identifier](https://docs.stripe.com/api/billing/meter-event/create#create_billing_meter_event-identifier) that you can specify in your request (if you don’t specify it, we autogenerate one).\n\n### Event timestamps![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMake sure that the timestamp falls within the past 35 calendar days and isn’t more than 5 minutes in the future (the 5-minute window accounts for clock drift between your server and Stripe’s systems).\n\n### Usage values![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe numerical usage value in the payload only accepts positive whole number values.\n\n#### Interested in using decimal or negative values?\n\n### Rate limits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBe mindful of the rate limit. The [Meter Events endpoint](https://docs.stripe.com/api/billing/meter-event/create) only allows 1000 calls per second per non-connect Stripe account in livemode, and one concurrent call per customer per meter. If your service might exceed this limit, you can “bundle” your product into amounts. For example, if you charge per 1000 requests, base your product on “per 1k transactions” and send 1 usage record every 1000 times.\n\nMonitor for `429` status codes and implement a retry mechanism with an exponential backoff schedule to manage request volume.\n\nAlso, consider incorporating some randomness into the backoff schedule to avoid a [thundering herd effect](https://en.wikipedia.org/wiki/Thundering_herd_problem).\n\n#### Note\n\nIf you’re a connect platform that is making requests on behalf of a connected account using the `Stripe-Account` header, you’re subject to [regular stripe rate limits](https://docs.stripe.com/rate-limits), which is 100 operations per second.\n\n#### Interested in higher rate limits?\n\n### Best practices![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUsage data is crucial for accurate user billing. Make your system resilient to network failures. For example, use a reliable queue like Amazon SQS to push data to Stripe so you can retry if necessary.\n\n## Fix incorrect usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can cancel incorrectly reported events using the [Meter Event Adjustments](https://docs.stripe.com/api/billing/meter-event_adjustment/create). You need an [identifier](https://docs.stripe.com/api/billing/meter-event/object#billing_meter_event_object-identifier) of the meter event to cancel it.\n\n`curl https://api.stripe.com/v1/billing/meter_event_adjustments \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d type=cancel \\  -d event_name=alpaca_ai_tokens \\  -d \"cancel[identifier]\"={{METER_EVENT_IDENTIFIER}}`\n\nCanceling meter events has the following limitations:\n\n*   You can only cancel events that have been sent to Stripe within the last 24 hours.\n*   We don’t support billing adjustments for canceled usage that we’ve already invoiced a customer for.\n*   If you cancel usage already included on a finalized invoice, we won’t update that invoice. Additionally, we won’t issue a new correction invoice for the canceled usage.",
  "title": "Record usage for billing | Stripe Documentation",
  "description": "Learn how to record and report usage for your customers.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/subscriptions/usage-based/implementation-guide",
  "markdown": "# Set up usage-based billing | Stripe DocumentationThe Stripe Docs logo\n\n## Understand the major pieces of a usage-based billing integration.\n\n#### Note\n\nThis guide explains the core concepts of a usage-based billing model through the perspective of a fictional Gen AI company called Alpaca AI. Alpaca AI charges their users 0.04 USD per 1,000 tokens of consumption, billing at the end of the month in arrears.\n\n*   **Meter events**: You send customer-specific information, represented by meter events, to Stripe. These events represent the raw action a customer took in your system, forming the basis of their bill. In our example, this refers to the number of tokens a customer used in a query.\n*   **Meter**: Meters, as configuration objects for meter events, provide guidelines on how you want the meter events aggregated over the billing period. In this case, this refers to the sum of tokens over a month. Meters attach to prices, mapping the customer usage to customer subscriptions.\n*   **Meter event summary**: The event summary for a customer and meter returns aggregated usage for a period (the meter defines the aggregation formula). In our example, the meter event summary returns the sum() of tokens for a specific customer, meter, and time window. Meter events don’t become available on the read path and are asynchronously aggregated into Meter event summary results.\n*   **Prices**: Prices define the unit cost, currency, and billing cycle. In our example, you define a package price of 0.04 USD for 1000 tokens, billed at a monthly interval. Learn more about [Prices](https://docs.stripe.com/api/prices).\n*   **Subscription**: Subscriptions allow you to charge recurring charges by associating a user with a specific price. Learn more about [Subscriptions](https://docs.stripe.com/api/subscriptions).\n\nThis diagram demonstrates the core concepts:\n\n## What you will build![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis guide shows you how to:\n\n*   Model your business by building a [Billing Meter](https://docs.stripe.com/api/billing/meter) and product catalog\n*   Add payment collection session to your site\n*   Monitor subscription events\n\n[](#install-setup)\n\nInstall the Stripe client of your choice:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\nNext, install the Stripe CLI. The CLI provides webhook testing, which you can run to make API calls to Stripe. This guide demonstrates how to use the CLI to set up a pricing model in a later section.\n\n`# Install Homebrew to run this command: [https://brew.sh/](https://brew.sh/) brew install stripe/stripe-cli/stripe  # Connect the CLI to your dashboard stripe login`\n\nFor additional install options, see [Get started with the Stripe CLI](https://docs.stripe.com/stripe-cli).\n\n[](#create-meter)\n\nCreate the meter in the Dashboard or with the API. You can create the meter from the products and prices page in the next step.\n\n1.  Navigate to the [Meters tab](https://dashboard.stripe.com/test/meters) in your product catalog.\n2.  Click **\\+ Create meter**.\n3.  Enter the name of the meter (in this case, “Alpaca AI tokens”) for display and organization purposes.\n4.  Enter the event name (in this case, `alpaca_ai_tokens`). You use this name in [Meter Events](https://docs.stripe.com/api/billing/meter-event) to report usage to Stripe.\n5.  Select **sum** as the aggregation formula.\n\nLearn more about [configuring meters](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage#configuring-meter).\n\n[](#create-pricing-model)\n\nCreate your products and their pricing options in the Dashboard or with the Stripe API.\n\nTo create a metered usage pricing model in the Dashboard:\n\n1.  Navigate to the [Products tab](https://dashboard.stripe.com/test/products).\n2.  Click **\\+ Add product**.\n3.  Enter the name of the product (in this case, “Alpaca AI”).\n4.  _(Optional)_ Add a description. The description appears at checkout in the [customer portal](https://docs.stripe.com/customer-management) and in [quotes](https://docs.stripe.com/quotes).\n\nNext, add a recurring price to the Alpaca AI product:\n\n1.  Select **Usage-based** and **Per package pricing** for the pricing model.\n2.  Set the amount to 0.04 USD per 1000 units, and the billing period to monthly.\n3.  Add the meter `alpaca_ai_tokens`. Optionally, create the meter if you haven’t already.\n\nUse the `id` of this price when you create subscriptions.\n\nLearn more about different [pricing models](https://docs.stripe.com/products-prices/pricing-models).\n\n[](#create-a-customer)\n\nYou must create a [customer](https://docs.stripe.com/api/customers \"Customers\") for each subscription. In your application frontend, collect any necessary information from your users and pass it to the backend.\n\nOn the server, create the Stripe customer object.\n\n`curl https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d name=\"John Doe\"`\n\n[](#subscribe-customer-to-usage-based-price)\n\nOn the backend, subscribe the customer to the usage-based price.\n\n`curl https://api.stripe.com/v1/subscriptions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer={{CUSTOMER_ID}} \\   -d \"items[0][price]\"={{PRICE_ID}} \\   -d \"expand[0]\"=pending_setup_intent`\n\nThis returns a subscription object with a [SetupIntent](https://docs.stripe.com/api/setup_intents) you need to collect payment information.\n\n[](#report-usage)\n\nYou can start recording usage against the meter for the customer using [Meter Events](https://docs.stripe.com/api/billing/meter-event). Specify the customer reference and the value in the payload. Stripe bills the reported usage to the customer at the end of the billing period.\n\n`curl https://api.stripe.com/v1/billing/meter_events \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d event_name=alpaca_ai_tokens \\  -d \"payload[value]\"=25 \\  -d \"payload[stripe_customer_id]\"={{CUSTOMER_ID}}`\n\nLearn more about [recording usage](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage#recording-usage).",
  "title": "Set up usage-based billing | Stripe Documentation",
  "description": "Understand the major pieces of a usage-based billing integration.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/disputes/match",
  "markdown": "# High risk merchant lists | Stripe DocumentationThe Stripe Docs logo\n\n## Learn the criteria for inclusion in Mastercard's Alert to Control High-Risk Merchants (MATCH) list.\n\nCard networks, such as Visa and Mastercard, operate databases known as Terminated Merchant Files (TMFs) that contain information about accounts that have been closed by credit card processors around the world for high chargebacks or violations of card brand rules.\n\nAll payment processors must check these databases when accepting a new user, and must also add merchants to the database if they close the account and it meets TMF criteria.\n\nBeing placed on a TMF can have serious effects. While they’re only supposed to be informational tools during the account application process, many entities refuse to accept businesses or individuals listed on a TMF. For this reason, it’s important to be aware of TMF criteria and make sure you avoid becoming eligible.\n\nThe most common list—and the only one with global reach—is Mastercard’s MATCH, or the Mastercard Alert to Control High-Risk Merchants. In the following sections, we describe how MATCH qualification works and what happens to MATCH entries.\n\n## Criteria for MATCH Qualification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen a relationship ends between a business and a credit card processor, the processor must determine whether the business meets criteria to be placed on MATCH.\n\nIf any MATCH criteria are satisfied, the processor must add information about the business to MATCH within one business day of termination or within one business day of the account becoming eligible for MATCH after termination.\n\n### Qualitative criteria![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe majority of MATCH criteria, or “reason codes,” involve breaches of card network rules, including illegal activity and collusion. These 11 reason codes, and the exact Mastercard definition, are listed below.\n\nThe Identity Theft reason code should be used when a fraudulent account is opened with stolen information, and the listing of this information on MATCH should not hamper the legitimate identity holder from opening a processing account. It instead serves as a warning to the credit card processor that the application may contain stolen identity information.\n\n| Code | Reason | Description |\n| --- | --- | --- |\n| #1  | Account Data Compromise | An occurrence that results, directly or indirectly, in the unauthorized access to or disclosure of Account data. |\n| #2  | Common Point of Purchase | Account data is stolen at the Merchant and then used for fraudulent purchases at other Merchant locations. |\n| #3  | Laundering | The Merchant was engaged in laundering activity. Laundering means that a Merchant presented to its Acquirer Transaction records that were not valid Transactions for sales of goods or services between that Merchant and a bona fide Cardholder. |\n| #7  | Fraud Conviction | There was a criminal fraud conviction of a principal owner or partner of the Merchant. |\n| #8  | Mastercard Questionable Merchant Audit Program | The Merchant was determined to be a Questionable Merchant as per the criteria set forth in the Mastercard Questionable Merchant Audit Program. |\n| #9  | Bankruptcy/Liquidation/Insolvency | The Merchant was unable or is likely to become unable to discharge its financial obligations. |\n| #10 | Violation of Standards | With respect to a Merchant reported by a Mastercard Acquirer, the Merchant was in violation of one or more Standards that describe procedures to be employed by the Merchant in Transactions in which Cards are used, including, by way of example and not limitation, the Standards for honoring all Cards, displaying the Marks, charges to Cardholders, minimum/ maximum Transaction amount restrictions, and prohibited Transactions set forth in Chapter 5 of the Mastercard Rules manual. |\n| #11 | Merchant Collusion | The Merchant participated in fraudulent collusive activity. |\n| #12 | PCIDSS Non-Compliance | The Merchant failed to comply with Payment Card Industry (PCI) Data Security Standard (DSS) requirements. |\n| #13 | Illegal Transactions | The Merchant was engaged in illegal Transactions. |\n| #14 | Identity Theft | The Acquirer has reason to believe that the identity of the listed Merchant or its principal owner(s) was unlawfully assumed for the purpose of unlawfully entering into a Merchant Agreement. |\n\n### Quantitative criteria![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTwo MATCH reason codes have specific numeric thresholds defined by Mastercard for when processors must add accounts to MATCH.\n\nThese reason codes, which involve chargeback and fraud activity on an account, are the most common reasons for being added to MATCH, and can affect businesses that are not engaged in illegal or rule-violating activity. These reason codes are as follows:\n\n| Code | Reason | Description |\n| --- | --- | --- |\n| #4  | Excessive Chargebacks | With respect to a Merchant reported by a Mastercard Acquirer, the number of Mastercard chargebacks in any single month exceeded 1% of the number of Mastercard sales Transactions in that month, and those chargebacks totaled USD 5,000 or more. |\n| #5  | Excessive Fraud | The Merchant effected fraudulent Transactions of any type (counterfeit or otherwise) meeting or exceeding the following minimum reporting Standard: the Merchant’s fraud-to-sales dollar volume ratio was 8% or greater in a calendar month, and the Merchant effected 10 or more fraudulent Transactions totaling USD 5,000 or more in that calendar month. |\n\n## Additional information on excessive chargebacks and fraud![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThese MATCH reason codes are separate from card brand chargeback and fraud monitoring programs operated by Visa and Mastercard. However, as defined, the excessive chargebacks criteria only applies to activity on Mastercard cards, even though MATCH is required by all major card networks. If dispute activity does not take place on a Mastercard card, it would not qualify toward MATCH counts. Other card networks may ask for businesses to be listed on MATCH if those businesses hit the “excessive” stages of their card brand monitoring programs or are fined as part of those programs.\n\nA month is defined as a calendar month. For example, if a processor were evaluating MATCH eligibility from the month of January, they would look at the number of transactions in January and the number of chargebacks in January—not the number of chargebacks from transactions made in January.\n\nOnce a business meets the excessive chargebacks or fraud MATCH criteria in a calendar month, the merchant must be added to MATCH if the processing relationship is terminated, even if the processing relationship is not ended in that calendar month. For example, if a business only meets MATCH criteria in February, and the processing relationship is not ended until September, the processor is still required to add information to MATCH even though the qualifying activity took place in February. Additionally, even if a business does not meet MATCH criteria when the relationship is initially terminated, it can still qualify for MATCH if the criteria are met afterward—for example, if chargebacks are initiated after termination.\n\n### Example qualification data![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTake the following sample data from a calendar month:\n\n*   Number of Mastercard transactions: 125\n*   Number of Mastercard chargebacks: 6\n*   Ratio of chargebacks to transactions: (6/125) = 4.8%\n*   Volume of Mastercard chargebacks: $6250\n\nIn this case, the business would qualify for MATCH for excessive chargebacks if the processing relationship later terminates. It does not matter if chargebacks are later reversed or won by the merchant.\n\nThere is no minimum number of chargebacks for MATCH qualification for excessive chargebacks.\n\n## Information added to MATCH![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe card networks require that the following information be added to MATCH if available:\n\n*   Business Legal Name and DBA\n*   Business Address\n*   Business Phone Number\n*   Business Tax ID\n*   Business URL\n*   Principal Owner Name\n*   Principal Owner Address\n*   Principal Owner Phone Number\n*   Principal Owner Tax ID\n*   Account Opening Date and Termination Date\n*   MATCH Reason Code\n\nMastercard does not assess the accuracy of MATCH listings.\n\n## Removal from MATCH![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUnfortunately, Stripe—or any other processor—usually cannot remove an account’s information from MATCH upon request. A processor can only remove a MATCH entry if:\n\n*   The processor added the business to MATCH in error.\n*   The listing is for MATCH reason code 12 (Payment Card Industry Data Security Standard Noncompliance) and the processor has confirmed that the business has become compliant with the Payment Card Industry Data Security Standard.\n\nIf you believe either of those two situations exist, you’ll need to reach out to the processor that listed your information on MATCH to be removed. Records remain on the MATCH system for five years before being automatically purged by Mastercard.\n\n## Next steps if you are listed on MATCH![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re listed on MATCH, you’re likely to find out when you attempt to sign up for a new processor. MATCH is only supposed to be used as an informational tool by processors during the application process; however, the presence of a MATCH listing often means that an application is declined.\n\nYou’ll need to reach out to your previous processor to find out why your information was added to MATCH. Note, however, that MATCH criteria are determined by Mastercard and processors are required to follow this criteria. Stripe cannot remove a merchant that met the “excessive chargebacks” criteria even if the business has remediated the issues leading to chargebacks, for example.\n\nDue to banking partner restrictions, Stripe generally cannot process for businesses listed on MATCH unless extenuating circumstances apply, such as the case of a legitimate merchant who previously had their identity information stolen.\n\nIf you require assistance with a dispute, [contact Stripe support](https://support.stripe.com/contact).",
  "title": "High risk merchant lists | Stripe Documentation",
  "description": "Learn the criteria for inclusion in Mastercard's Alert to Control High-Risk Merchants (MATCH) list.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/rechnung",
  "markdown": "# Payment on invoice | Stripe DocumentationThe Stripe Docs logo\n\n## Payment on invoiceInvite only\n\n## Offer a buy now, pay later payment option in Germany using white-label invoicing.\n\nPayment on invoice is a popular way for customers to buy now and pay later in Germany. When you accept payments on invoice with Stripe, as soon as a payment is approved we add the full payment amount, minus fees, to your Stripe balance. We then send [an invoice](https://stripe.com/guides/invoicing-best-practices-for-germany) reflecting your branding to the customer. They must pay the invoice within 14 days.",
  "title": "Payment on invoice | Stripe Documentation",
  "description": "Offer a buy now, pay later payment option in Germany using white-label invoicing.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/setupintents/lifecycle",
  "markdown": "# How SetupIntents work | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how SetupIntents work within the payment flow.\n\nAsynchronous payment flows can be complex to manage because they depend on customer interactions that happen outside of your application. [PaymentIntents](https://docs.stripe.com/api/payment_intents) and [SetupIntents](https://docs.stripe.com/api/setup_intents) simplify management by tracking the status of the flow.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/1ab45e9a3dd360cdbbe998626aaa5ca1.svg)\n\nrequires\\_payment\\_method\n\nWhen the SetupIntent is created, it has a status of `requires_payment_method`1 until a payment method is attached.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/requires-payment-method.9a42d8ffd0c94023aa88ba0365a9a648.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/d93e2a08ffc6bbfe4683e3f7d0fffe32.svg)\n\nrequires\\_confirmation\n\nOptional\n\nAfter the customer provides their payment method information, the SetupIntent is ready to be confirmed.\n\nIn most integrations, this state is skipped because payment method information is submitted at the same time that the SetupIntent is confirmed.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/requires-confirmation.d8f1cc949e78a3b65f8a9406977eb77e.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/94646c1d7332e58bd1d56e6cebd1a40e.svg)\n\nrequires\\_action\n\nIf the setup requires additional actions, such as authenticating with 3D Secure , the SetupIntent has a status of `requires_action`1.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/requires-action.a062dfa0d428b32132566ba7ef1d7243.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/8ccc7708adc370d6365aa5558ee39a62.svg)\n\nprocessing\n\nAfter required actions are handled, the SetupIntent moves to `processing`. Although some payment methods (for example, cards) can process quickly, other payment methods can take up to several days to process.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/processing.ca1dd4ab95c0abdb79c0505ff702e7e5.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/6423ea22ac10bfa6996c6f9db9b0ad1d.svg)\n\nsucceeded\n\nA SetupIntent with a status of `succeeded` means that the setup is successful.\n\nYou can now attach this payment method to a Customer object and use this payment method for future payments.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/succeeded.0f804b44822542e961f31fa590b8461c.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/34cbc85e7b2159474edf46422b7762f7.svg)\n\nrequires\\_payment\\_method\n\nIf the setup fails, SetupIntent’s status returns to `requires_payment_method`.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/failed.1e456c37d02886f2a966cb540a9507e8.svg)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/3eb46c024752a66b38516e0f282b95af.svg)\n\ncanceled\n\nYou can cancel a SetupIntent at any point before it is `processing` or `succeeded`.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/canceled.51a5426d7a6f048a8b2686fcfe91b554.svg)\n\n1 Versions of the API before [2019-02-11](https://docs.stripe.com/upgrades#2019-02-11) show `requires_source` instead of `requires_payment_method` and `requires_source_action` instead of `requires_action`.",
  "title": "How SetupIntents work | Stripe Documentation",
  "description": "Learn how SetupIntents work within the payment flow.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/disputes/connect",
  "markdown": "# Disputes on Connect platforms | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the dispute responsibilities on Connect platforms.\n\nFor connected accounts that use [direct charges](https://docs.stripe.com/connect/direct-charges) and where your platform isn’t liable for negative balances (including Standard accounts), those accounts handle their own disputes. The disputed funds are taken from their balance, not the platform’s.\n\nFor connected accounts where your platform is [liable for negative balances](https://docs.stripe.com/connect/risk-management \"negative balance liability\") (including Custom and Express accounts), you’re ultimately responsible for any disputes involving those accounts.\n\nFor direct payments on connected accounts where your platform is liable for negative balances, Stripe debits disputed amounts and fees from that account’s balance. However, your platform account is ultimately liable. If Stripe can’t debit the disputed amount and fee from the connected account, Stripe debits it from the platform account.\n\nFor [destination charges](https://docs.stripe.com/connect/destination-charges) and [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers), with or without `on_behalf_of`, Stripe debits dispute amounts and fees from the platform account. When that happens, the platform can attempt to recover funds from the connected account by reversing the transfer through the [Dashboard](https://dashboard.stripe.com/test/transfers) or by [creating a transfer reversal](https://docs.stripe.com/api#create_transfer_reversal).\n\nIf there is a negative balance on the connected account, Stripe attempts to debit its card issuer account only if `debit_negative_balances` is set to `true`.\n\nIn case of a won dispute, your platform might want to transfer the funds back to the connected account because the transfer was reversed earlier. If your platform has an insufficient balance, the transfer fails. To prevent an insufficient balance error, you can [add funds to your Stripe balance](https://docs.stripe.com/get-started/account/add-funds).\n\nTo automate dispute management and handle chargebacks, browse [Fraud Stripe Apps](https://marketplace.stripe.com/categories/fraud) on the App Marketplace.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Responding to disputes](https://docs.stripe.com/disputes/responding)\n*   [Dispute categories](https://docs.stripe.com/disputes/categories)\n*   [Preventing disputes and fraud](https://docs.stripe.com/disputes/prevention)\n*   [Using Radar with Connect](https://docs.stripe.com/connect/radar)",
  "title": "Disputes on Connect platforms | Stripe Documentation",
  "description": "Learn about the dispute responsibilities on Connect platforms.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/disputes/monitoring-programs",
  "markdown": "# Dispute and fraud card monitoring programs\n\n## Learn about the monitoring programs operated by the card networks, and what you should do if you're placed into one.\n\nAs part of your financial obligations to the card networks, you must keep [disputes](https://docs.stripe.com/disputes) (also called chargebacks) and fraud at acceptable levels. If they exceed the thresholds dictated by a network (for example, [Visa](#visa-programs) or [Mastercard](#mastercard-programs)), the network places you into one of their monitoring programs. As part of a program, you can incur monthly fines and additional fees until you reduce your dispute or fraud levels in a sustained way.\n\nStripe can work with you on a remediation plan to reduce the levels of disputes or fraud related to your account. We also communicate directly with the networks and relay information on a monthly basis. Download our [remediation template](https://stripe.com/files/compliance/monitoring_program_remediation_template.pdf) to get started.\n\nWhile monitoring programs are comparatively rare, take them seriously. If you’re identified into one, you must take immediate action to address the situation. Failure to comply with the requirements of a program within the specified time period, or timeline, can result in the network refusing to process further payments to you. That can put your ability to accept any credit card payments [at risk](https://docs.stripe.com/disputes/match#quantitative-criteria).\n\n#### Note\n\nThis page is a general guide for Stripe users, not a comprehensive reference for card network monitoring programs. For complete and up to date information about monitoring programs, see the documentation provided by the networks.\n\n## Understanding disputes and chargebacks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor the purposes of monitoring programs, a dispute or chargeback occurs when funds move out of an account due to a disputed payment, regardless of the reason. The terms “dispute” and “chargeback” are interchangeable. The Visa monitoring program refers to disputes, while the Mastercard and AusPayNet monitoring programs refer to chargebacks.\n\nMonitoring programs don’t consider refunds when identifying disputes. In some cases, if you issued a full refund at least 10 days before a dispute, we can ask to have the dispute removed from the account. The issuer might have missed the refund and raised the dispute by mistake, but that rarely happens.\n\nSimilarly, monitoring programs don’t consider dispute outcomes. If they did, they’d have to wait for the outcome of every dispute, which can take months, before including it in their calculations. They’re also more interested in how successfully you prevent disputes than in whether you win them.\n\nSome disputes where you have no liability don’t appear in your Dashboard or API responses because Stripe handles them on your behalf. They don’t count toward your Stripe dispute or fraud rates, and we don’t charge you for them. However, monitoring programs still include them in their calculations. That can create a discrepancy between your data and the dispute rates that the networks calculate for you, especially if you issue a lot of refunds. For example:\n\n*   You refunded the payment before the customer submitted the dispute.\n*   The dispute duplicates a previously resolved dispute.\n*   The card network created or processed the dispute in error.\n\nIn some cases, the data reported to Stripe by the card networks doesn’t match the data visible in your Dashboard. It can happen because of discrepancies or formatting issues in your statement descriptors, having multiple Merchant IDs (MIDs), or double-counted charges. If Stripe updates your MID during a month, it can affect your Mastercard data. If you think a card network made a calculation error, contact [Stripe support](https://support.stripe.com/).\n\nThe following scenarios don’t count as disputes:\n\n*   Unescalated [inquiries](https://docs.stripe.com/disputes/how-disputes-work#inquiries), where a card issuer begins an investigation but never returns the disputed payment.\n*   [Early fraud warnings](https://docs.stripe.com/disputes/how-disputes-work#early-fraud-warnings) (EFWs), which are informational messages from card network reports about suspected fraud. Although they don’t count as disputes, they do count as fraud, regardless of their outcome, and Visa’s [VFMP](https://docs.stripe.com/disputes/monitoring-programs#vfmp) program includes them in its calculations.\n*   Non-disputed funds that move through a card network’s dispute system. Such movement can occur as part of Visa’s [Rapid Dispute Resolution](https://docs.stripe.com/disputes/how-disputes-work#responding-to-a-dispute) program.\n\n## Monitoring program calendars![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nVisa and Mastercard monitoring programs track activity by month, while the AusPayNet monitoring program tracks activity by quarter.\n\nVisa and Mastercard programs calculate monthly rates differently. Visa calculates the ratio of disputes or fraud to the total number of payments in the same calendar month. Mastercard calculates the ratio of disputes or fraud to the total number of payments in the previous month. Both networks assign a dispute or fraud report to the month in which they received it, regardless of when the original payment occurred.\n\nVisa and Mastercard monitoring programs use specific nomenclature to refer to their monthly rate calculations:\n\nA “data month” is the month in which a network receives a dispute or fraud report. Mastercard refers to two different data months, one for disputes and the other for sales.\n\nA “report month,” “reporting month,” or “identification month” is the month in which a program identifies a business based on its data meeting a threshold. It’s usually the month after the data month containing that data.\n\n## Estimate your dispute or fraud rate![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you have [Stripe Sigma](https://stripe.com/sigma) or [Data Pipeline](https://stripe.com/data-pipeline), you can use it to [track your estimated dispute or fraud rate for a given monitoring program](https://docs.stripe.com/stripe-data/query-disputes-and-fraud-data#tracking-monitoring-programs). We offer [a guide to help you implement a continuous fraud management process](https://stripe.com/guides/improve-fraud-management-with-radar-for-fraud-teams-and-stripe-data) using those tools.\n\nIf you don’t have either of those products, you can manually estimate your dispute rate. Export your Visa or Mastercard disputes from the **Payments** tab in your Dashboard and compare them to your payments according to a program’s formula. For accounts outside the US, count payments and disputes for a calendar month. For accounts in the US, there’s a delay between receiving disputes from our financial partner and reporting them to the card network. To account for that delay, count payments for a calendar month, and count disputes from the 5th of that month to the 5th of the following month.\n\nYou can also track EFWs using the [Early Fraud Warnings](https://docs.stripe.com/api/radar/early_fraud_warnings) API. In addition, when we receive a fraud report for a payment that hasn’t already been disputed or refunded, we send a notification to the primary email on your account.\n\n## Visa monitoring programs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Visa Fraud Monitoring Program](#vfmp) (VFMP) and [Visa Dispute Monitoring Program](#vdmp) (VDMP) apply to businesses in all of our supported countries. The VFMP 3DS (for [3D-Secure transactions](https://docs.stripe.com/payments/3d-secure)) and VFMP Digital Goods (for merchants selling digital goods) programs are additional fraud programs enforced by Visa. Like VFMP and VDMP, VFMP Digital Goods is a global program, while VFMP 3DS only applies to businesses based in the US.\n\nAt the beginning of each month, Visa reviews your previous month’s activity to see if it has exceeded any of their established thresholds. If so, Stripe contacts you. When Visa identifies you into a program, it triggers a 12-month timeline. If you don’t exit the program before the timeline ends, you can lose your ability to accept Visa payments.\n\nFor users in the US, Europe, Canada, Australia, and Brazil, both domestic and cross-border activity count toward monthly totals. For users outside of those regions, only cross-border activity is counted.\n\nVisa identifies an account by the static component of its [statement descriptor](https://docs.stripe.com/get-started/account/statement-descriptors) and its acquiring bank, which usually varies by country. For this purpose, Visa treats the EU as a single country. For example, consider an account that uses one statement descriptor in Canada and a second statement descriptor in both Canada and the US. If the individual dispute rates for all three combinations exceed a program’s threshold, a Visa program can identify that account three times, one time for each descriptor in each country. However, for an account that uses the same statement descriptor in Ireland, France, and Germany, a Visa program can only identify that account one time because Visa aggregates its EU volume.\n\nIf you use multiple statement descriptors and want Visa to aggregate their dispute and fraud rates, give each descriptor the same static prefix. If you change your descriptors to use matching prefixes, ask Stripe to contact Visa and request that they aggregate your transactions. Make the change at the end of a month so it doesn’t affect the rate calculations for that month.\n\n### Early warning notifications ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nVisa operates an early warning system through Stripe that warns users who are at risk of being placed into a monitoring program. Users who meet the early warning threshold aren’t immediately placed into the program. Instead, they’re given the opportunity to avoid the program by reducing the level of fraud on their account.\n\nIf you receive an early warning from Visa, try to reduce your fraud rate. If your rate continues to rise, Visa eventually places you in a monitoring program.\n\n#### Note\n\nEarly warning notifications might not occur for accounts that reach a program’s standard or excessive threshold immediately after meeting its early warning threshold.\n\n### Remediation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nVisa removes you from a program when your level of disputes or fraud drops below the standard threshold for 3 consecutive months, even if you’re at the excessive level. If you reach a program’s excessive threshold, excessive penalties apply until you exit the program entirely. Dropping below the excessive threshold doesn’t reduce your penalties to the standard level.\n\n#### Note\n\nDropping below the threshold doesn’t reset your timeline. If you remain below the threshold for 1 or 2 months, then reach it again, your original timeline resumes. That means that if 10 months pass without exiting a program, exceeding the threshold in any month prevents you from exiting before the end of the timeline.\n\nMonitoring your dispute and fraud levels accurately is important. For example, Visa counts disputes regardless of whether the dispute was hidden due to a refund, regardless of liability shift, and regardless of whether you won the dispute.\n\nAs part of the remediation process, Stripe can require you to provide details on the steps you’re taking and your timeline for implementing them.\n\n### VDMP: Visa Dispute Monitoring Program ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nVDMP applies to users with an unusually high level of disputed payments on their account. Users are placed into this program if they meet or exceed the monthly thresholds for both of the following criteria:\n\n*   The total number of payment disputes (dispute count)\n*   The ratio of disputed payments to all captured payments ([dispute rate](https://docs.stripe.com/disputes/measuring#dispute-rate-usage))\n\nA payment dispute belongs to the month in which it’s raised, not the month when the original payment was captured. For example, calculations for February include payments captured in February and disputes raised in February, even if the payments being disputed were captured in January. The February calculations don’t consider any payments captured in January.\n\n| Dispute Count | Dispute Rate | Fines |\n| --- | --- | --- |\n| 75  | 0.65% | None. You have the opportunity to take action that reduces your dispute level before it exceeds a threshold where fines are incurred. |\n\nYou might not receive an early warning notification if you reach the standard or excessive threshold immediately after reaching the early warning threshold.\n\n### VFMP: Visa Fraud Monitoring Program ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nVFMP applies to users with an excessive level of fraud on their account, which Visa calculates using [early fraud warning (EFW)](https://docs.stripe.com/disputes/how-disputes-work#early-fraud-warnings) data sourced from their TC40 reporting. Users are placed into this program if they meet or exceed the monthly thresholds for both of the following criteria:\n\n*   The total USD volume of EFWs (Fraud Volume)\n*   The ratio of the USD volume of EFWs to the USD volume of all captured payments (Fraud Rate)\n\nAn EFW belongs to the month in which the TC40 was reported, not the month when the reported payment was captured. For example, calculations for February include payments captured in February and EFWs reported in February, even if the potentially fraudulent payments were captured in January. The February calculations don’t consider any payments captured in January.\n\n| Fraud Volume | Fraud Rate | Fines |\n| --- | --- | --- |\n| 50,000 USD | 0.65% | None. You can take action that reduces your fraud level before it incurs penalties. |\n\nYou might not receive an early warning notification if you reach the standard or excessive threshold immediately after reaching the early warning threshold.\n\n### VFMP: Visa Fraud Monitoring Program-3DS (US-only) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nVFMP-3DS applies only to US-based users with US-based custom accounts and an excessive level of fraud on domestic Visa 3D-Secure-authenticated (3DS) transactions on US-issued cards.\n\n#### Note\n\nBy default, Stripe allows all authenticated 3DS payments to go through. You can adjust your rules to block 3DS payments that are flagged as high risk. You can also consider other signals that usually apply to normal charges, such as velocity, transaction size, and CVC/AVS checks.\n\nVisa calculates the fraud level using [early fraud warning (EFW)](https://docs.stripe.com/disputes/how-disputes-work#early-fraud-warnings) data sourced from their TC40 reporting. Users are placed into this program if they meet or exceed the monthly thresholds for both of the following criteria:\n\n*   The total USD volume of EFWs for Visa 3DS-authenticated payments (Fraud Volume)\n*   The ratio of the USD volume of EFWs for Visa 3DS-authenticated payments to the USD volume of all captured Visa 3DS-authenticated payments (Fraud Rate)\n\nAn EFW belongs to the month in which the TC40 was reported, not the month when the reported payment was captured. For example, calculations for February include 3DS-authenticated payments captured in February and EFWs reported in February for 3DS-authenticated payments, even if the potentially fraudulent payments were captured in January. The February calculations don’t consider any payments captured in January.\n\n| Fraud Volume | Fraud Rate | Fines |\n| --- | --- | --- |\n| 50,000 USD | 0.50% | None. You have the opportunity to take action that reduces your fraud level before it exceeds a threshold where penalties are incurred. |\n\nYou might not receive an early warning notification if you reach the standard threshold immediately after reaching the early warning threshold.\n\n### VFMP: Visa Fraud Monitoring Program (digital goods merchants) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe VFMP for digital goods merchants applies to small ticket and digital goods merchants with excessive levels of fraud on their account. Visa calculates the fraud level using [early fraud warning (EFW)](https://docs.stripe.com/disputes/how-disputes-work#early-fraud-warnings) data sourced from their TC40 reporting. The VFMP for digital goods merchants applies to businesses with the following MCCs:\n\n*   5735 — Record Stores\n*   5815 — Digital Goods Media — Books, Movies, Digital artwork/images, Music\n*   5816 — Digital Goods — Games\n*   5817 — Digital Goods — Applications (Excludes Games)\n*   5818 — Digital Goods — Large Digital Goods Merchant\n\nUsers are placed into this program if they meet or exceed the monthly thresholds for all of the following criteria:\n\n*   The total USD volume of EFWs for relevant payments (Fraud volume)\n*   The total count of EFWs for relevant payments (Fraud count)\n*   The ratio of the USD volume of EFWs for relevant payments to the USD volume of all captured relevant payments (Fraud Rate)\n\nAn EFW belongs to the month in which the TC40 was reported, not the month when the reported payment was captured. For example, calculations for February include relevant payments captured in February and EFWs reported in February for relevant payments, even if the potentially fraudulent payments were captured in January. The February calculations don’t consider any payments captured in January.\n\n| Fraud volume | Fraud count | Fraud rate | Fines |\n| --- | --- | --- | --- |\n| 15,000 USD | 150 | 0.45% | None. You have the opportunity to take action that reduces your fraud level before it exceeds a threshold where penalties are incurred. |\n\n## Mastercard monitoring programs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nMastercard’s Excessive Chargeback Program (ECP) consists of two levels: [Excessive Chargeback Merchant (ECM)](#ecm) and [High Excessive Chargeback Merchant (HECM)](#hecm), and it applies to users in all supported countries. The [Excessive Fraud Merchant (EFM) Compliance Program](#efm) is a separate program that applies to users in all supported countries besides Germany, India, and Switzerland.\n\nIf your account exceeds program thresholds, Mastercard places you into that program and Stripe notifies you. If you exceed both EFM and ECP thresholds, you’re placed in EFM but not ECP. However, Mastercard tracks both thresholds. For example, you exceed EFM and ECP thresholds in March and April, but exceed only ECP thresholds in May. In April, you’re placed in month 2 of EFM and fined accordingly. In May, you’re placed in month 3 of ECP despite the EFM identifications taking precedence in prior months.\n\n### Remediation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nMastercard removes you from a program when your chargebacks drop below the program threshold for 3 consecutive months. If you’re in HECM, and your chargebacks drop below the HECM threshold but still meet the ECM threshold, you move to the ECM level.\n\nMonitoring your chargeback and fraud levels accurately is important. For example, Mastercard counts a chargeback regardless of whether it was hidden due to a refund, regardless of liability shift, and regardless of its outcome.\n\nAs part of the remediation process, Stripe can require you to provide details on the steps you’re taking and your timeline for implementing them.\n\n### ECP: Mastercard Excessive Chargeback Program ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUsers are placed into ECP if they meet or exceed the monthly thresholds for both of the following criteria:\n\n*   The total number of payment chargebacks (chargeback count)\n*   The ratio of the chargeback count for the current month to the total number of captured payments from the preceding month ([chargeback rate](https://docs.stripe.com/disputes/measuring#dispute-rate-usage))\n\nA payment chargeback belongs to the month in which it’s raised, not the month when the original payment was captured. For example, calculations for February use payments captured in January and chargebacks raised in February, including chargebacks for payments captured in February.\n\n### ECM: Mastercard Excessive Chargeback Merchant ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Dispute Count | Chargeback Rate | Fines |\n| --- | --- | --- |\n| 100-299 | 1.5-2.99% | Fines begin in month two and continue at increasing rates in subsequent months. See the timeline below for details. |\n\n| Number of months above ECM thresholds | Fine | Issuer recovery assessment |\n| --- | --- | --- |\n| 1   | 0 USD | No  |\n| 2   | 1,000 USD | No  |\n| 3   | 2,000 USD | No  |\n| 4-6 | 5,000 USD | Yes |\n| 7-11 | 25,000 USD | Yes |\n| 12-18 | 50,000 USD | Yes |\n| 19+ | 100,000 USD | Yes |\n\nIssuer recovery assessment applies an additional 5 USD per chargeback fee for each chargeback over 300 chargebacks. For example, a merchant identified in month 4 of ECM with 400 disputes is assessed a 5,500 USD fine (5,000 USD + (400-300) x 5 USD).\n\n### HECM: Mastercard High Excessive Chargeback Merchant ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Dispute Count | Chargeback Rate | Fines |\n| --- | --- | --- |\n| 300+ | 3%  | Fines begin in month two and continue at increasing rates in subsequent months. See the timeline below for details. |\n\n| Number of months above ECM thresholds | Fine | Issuer recovery assessment |\n| --- | --- | --- |\n| 1   | 0 USD | No  |\n| 2   | 1,000 USD | No  |\n| 3   | 2,000 USD | No  |\n| 4-6 | 10,000 USD | Yes |\n| 7-11 | 50,000 USD | Yes |\n| 12-18 | 100,000 USD | Yes |\n| 19+ | 200,000 USD | Yes |\n\nMastercard communicates total fine amounts to merchants through Stripe.\n\n### EFM: Mastercard Excessive Fraud Merchant Compliance Program ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUsers are placed into EFM if they meet or exceed the monthly thresholds for all of the following criteria:\n\n*   Number of e-commerce Mastercard payments\n*   The total USD volume of fraud-related chargebacks (net fraud volume) with dispute reason code 4837 or 4863\n*   The ratio of the number of fraud-related chargebacks in the current month to the number of e-commerce transactions in the preceding month (fraud chargeback rate)\n*   The percentage of Mastercard payments that use 3-D Secure (3DS)\n\nThe fraud chargeback rate uses a similar calculation to the chargeback rate for ECP, but it considers only fraud-related chargebacks.\n\nEFM applies to users who meet all of the following conditions:\n\n*   Minimum of 1,000 e-commerce Mastercard payments\n*   Net fraud volume is greater than 50,000 USD (15,000 USD for Australia)\n*   Fraud chargeback rate is greater than 0.50% (0.20% for Australia)\n*   Total 3DS Mastercard payment count is less than or equal to:\n    *   10% of total Mastercard payment count (non-regulated countries)\n    *   50% of total Mastercard payment count (regulated countries)\n\n| Number of months above ECM thresholds | Fine |\n| --- | --- |\n| 1   | 0 USD |\n| 2   | 500 USD |\n| 3   | 1,000 USD |\n| 4-6 | 5,000 USD |\n| 7-11 | 25,000 USD |\n| 12-18 | 50,000 USD |\n| 19+ | 100,000 USD |\n\nYou can request that Mastercard suspend an assessed fine one time during an open case. However, only do so if you’re confident that you’ll be below the threshold to exit the program for the next 3 months. If you request a suspension of fines and fall below the threshold for 2 months, but exceed it in the following month, fine assessments continue until you exit the program.\n\n## AusPayNet monitoring programs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe AusPayNet (APN) Card-Not-Present (CNP) fraud mitigation program is designed to reduce CNP payments fraud within the Australian payment industry (AU-based users and cardholders only). Where user fraud rates exceed certain defined thresholds for two consecutive quarters, the APN reserves the option to mandate [Strong Customer Authentication (SCA)](#sca) for all transactions. Stripe notifies you if your account exceeds program thresholds for the preceding quarter.\n\n### FMP: APN Fraud Monitoring Program ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUsers who meet or exceed both the following criteria thresholds are placed into FMP:\n\n*   **Fraud chargeback amount**: Total value (in AUD) of fraudulent chargebacks received in the quarter is greater than 50,000 AUD.\n*   **Fraud-to-sales ratio**: The ratio of fraud chargeback amount to sales value in the quarter is greater than or equal to 0.20%\n\n#### Note\n\nAPN excludes card-present and 3DS authenticated payment transactions in these threshold computations.\n\n| Number of quarters above FMP thresholds | Remediation measures |\n| --- | --- |\n| 1   | You must implement fraud controls to reduce fraudulent chargebacks. We recommend performing [SCA](#sca) on a subset of CNP transactions that you define as high risk. |\n| 2   | You must do one or more of the following:<br><br>*   Perform risk based SCA (as above)<br>*   Use SCA on all CNP transaction (excluding [SCA exempted transactions](#sca-exemptions))<br>*   Introduce more sensitive or effective fraud controls |\n| 3   | You must pass all CNP transactions through to the cardholder’s issuing bank for SCA. Failure to do so might result in off-boarding. |\n| 4+  | You might be off-boarded. |\n\nWhen your CNP transactions fall below the threshold criteria for FMP for one quarter, APN releases you from the FMP and SCA obligations.\n\n### SCA: Strong Customer Authentication ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSCA is an authentication method in which you verify cardholder’s identity using at least two of the following factors:\n\n*   Knowledge factor: something only the cardholder knows, for example a password\n*   Possession factor: something only the cardholder possess, for example a mobile phone\n*   Inherence factor: something the cardholder is, for example fingerprint or facial recognition\n\n### SCA exemptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAPN exempts the following types of transactions from the SCA requirement:\n\n*   Recurring transactions: Series of repeated transactions with SCA applied on the first charge of the recurring series\n*   Trusted customer transactions: Transactions where you have previously identified/authenticated the cardholder and the cardholder uses the same card on file with matching identifiers\n*   Wallet transactions: Digital or mobile wallet transactions where the cardholder identity has been verified and each subsequent transaction is authorized by the cardholder using biometrics or a passcode\n\n## Best practices for preventing fraud and disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFollowing these guidelines can help you avoid being placed into card network monitoring programs.\n\n### Prevent identifiable fraud![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConsider using separate authorization and capture in combination with review rules. Issuers are required to report possible fraud for a captured payment, even if it gets refunded, but aren’t required to report it for a payment authorization. If you identify and reverse a fraudulent or suspicious payment authorization before it’s captured, it isn’t reported.\n\n### Prevent disputes for canceled subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Offer a quick and easy way to cancel. An in-app cancellation button is often the best solution, because it doesn’t require the cardholder to wait to confirm their refund.\n*   Clearly communicate billing terms up front prior to accepting cardholder information.\n*   Require the cardholder to click a button that confirms their agreement to the billing terms.\n*   If offering a free or discounted trial, send a reminder before it expires allowing the cardholder an opportunity to cancel.\n*   Implement a flexible refund or return policy. For example, if a user cancels the day after being billed, offer a full or prorated refund.\n*   Send billing reminders, especially if on a yearly [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"). Typically 7 days before a yearly renewal and 2 to 3 days before a monthly renewal.\n*   Third party solutions, such as Ethoca and Verifi. These companies work with certain issuers so that an alert is raised when a chargeback is about to be initiated, allowing the user an opportunity to refund.\n\n### Prevent disputes for unreceived products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Clearly communicate shipping times prior to checkout.\n*   Clearly and quickly communicate any shipping delays and offer an option for the cardholder to receive a refund if they don’t want to wait.\n*   Ship items quickly and provide the cardholder with a tracking number when the item has been shipped.\n*   For higher value goods, require a signature upon delivery to prevent missing packages or potential “friendly fraud.”\n*   Make sure items are well stocked and either indicate when an item is backordered or remove it from the site.\n\n### Prevent disputes for unacceptable products![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Implement a flexible refund policy and issue them under reasonable circumstances.\n*   Clearly describe the items being sold and display accurate images when possible.\n*   Reevaluate any products which tend to see higher dispute rates for these reasons. It’s possible the items could be defective.\n*   Clearly display the full price of the item, including any taxes, and make sure to present it to the cardholder before accepting their payment information.\n\n### Prevent “friendly fraud” disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA [friendly fraud](https://stripe.com/resources/more/what-is-friendly-fraud) dispute occurs when a customer disputes a legitimate charge that they believe to be fraudulent. The best way to prevent such disputes is to collect as much information as possible when capturing a payment. For example, clearly communicate billing terms and shipping times, require the cardholder to agree to the terms of service, ship only to verified addresses, or require a signature upon delivery.\n\n### Prevent other types of disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLess common disputes, such as `general` or `duplicate`, can indicate things like an unrecognized statement descriptor or a confusing billing statement. Normally, such disputes make up a small percentage of the total. However, if you find any of them to be very common, it could indicate some other issue at the root of the problem. For example, a large number of `general` disputes can result from poorly designed receipts that make customers question the amounts they were charged.",
  "title": "Dispute and fraud card monitoring programs | Stripe Documentation",
  "description": "Learn about the monitoring programs operated by the card networks, and what you should do if you're placed into one.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/au-becs-debit/set-up-payment",
  "markdown": "# Save BECS Direct Debit details for future payments\n\n## Use the Setup Intents API to save payment method details for future BECS Direct Debit payments.\n\nUse [Stripe Elements](https://docs.stripe.com/payments/elements), our prebuilt UI components, to create a payment form that lets you securely collect bank details without handling the sensitive data. You can use the [Setup Intents API](https://docs.stripe.com/payments/setup-intents) to collect BECS Direct Debit payment method details in advance, and determine the final amount or payment date later. Use it to:\n\n*   Save payment methods to a wallet to streamline future purchases\n*   Collect surcharges after fulfilling a service\n*   [Start a free trial for a subscription](https://docs.stripe.com/billing/subscriptions/trials)\n\n[](#web-set-up-stripe)\n\nFirst, you need a Stripe account. [Register now](https://dashboard.stripe.com/register).\n\nUse our official libraries for access to the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#web-create-customer)\n\nTo reuse a BECS Direct Debit account for future payments, you must attach it to a [Customer](https://docs.stripe.com/api/customers \"Customers\").\n\nCreate a Customer object when your customer creates an account with your business. Associating the ID of the Customer object with your own internal representation of them enables you to retrieve and use the stored payment method details later.\n\nCreate a new Customer or retrieve an existing Customer to associate with this payment. Include the following code on your server to create a new Customer.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#web-create-setup-intent)\n\nA [SetupIntent](https://docs.stripe.com/api/setup_intents) is an object that represents your intent to set up a customer’s payment method for future payments. The `SetupIntent` will track the steps of this set-up process. For BECS Direct Debit, this includes collecting a mandate from the customer and tracking its validity throughout its lifecycle.\n\nCreate a [SetupIntent](https://docs.stripe.com/api/setup_intents) on your server with [payment\\_method\\_types](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-payment_method_types) set to `au_becs_debit` and specify the [Customer](https://docs.stripe.com/api/customers \"Customers\")’s [id](https://docs.stripe.com/api/customers/object#customer_object-id):\n\n`curl https://api.stripe.com/v1/setup_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"payment_method_types[]\"=\"au_becs_debit\" \\   -d \"customer\"=\"{{CUSTOMER_ID}}\"`\n\nAfter creating a `SetupIntent` on your server, you can associate the `SetupIntent` ID with the current session’s customer in your application’s data model. Doing so allows you to retrieve the information after you have successfully collected a payment method.\n\nThe returned `SetupIntent` object contains a `client_secret` property. Pass the client secret to the client-side application to continue with the setup process.\n\n[](#web-collect-payment-method-details)\n\nYou’re ready to collect payment information on the client with [Stripe Elements](https://docs.stripe.com/payments/elements). Elements is a set of prebuilt UI components for collecting payment details.\n\nA Stripe Element contains an iframe that securely sends the payment information to Stripe over an HTTPS connection. The checkout page address must also start with https:// rather than http:// for your integration to work.\n\nYou can test your integration without using HTTPS. [Enable it](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\n### Set up Stripe Elements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe Elements is automatically available as a feature of Stripe.js. Include the Stripe.js script on your payment page by adding it to the `head` of your HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI compliant. Don’t include the script in a bundle or host a copy of it yourself.\n\nCreate an instance of [Elements](https://docs.stripe.com/js#stripe-elements) with the following JavaScript on your payment page:\n\n`const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`); const elements = stripe.elements();`\n\n### Direct Debit Requests![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore you can create a BECS Direct Debit payment, your customer must agree with the Direct Debit Request Service Agreement. They do so by submitting a completed Direct Debit Request (DDR). The approval gives you a mandate to debit their account. The `Mandate` is a record of the permission to debit a payment method.\n\nFor online mandate acceptance, you can create a form to collect the necessary information. Serve the form over [HTTPS](https://docs.stripe.com/security/guide#tls) and capture the following information:\n\n| Information | Description |\n| --- | --- |\n| **Account name** | The full name of the account holder |\n| **BSB number** | The Bank-State-Branch number of the bank account (for example, `123-456`) |\n| **Account number** | The bank account number (for example, `87654321`) |\n\nWhen collecting a Direct Debit Request, follow our [BECS Direct Debit Terms](https://stripe.com/au-becs/legal) and as part of your checkout form:\n\n*   Display the exact terms of [Stripe’s DDR service agreement](https://stripe.com/au-becs-dd-service-agreement/legal) either inline on the form, or on a page linked from the form, and identifying it as the “DDR service agreement.”\n*   Make sure the accepted DDR and its accompanying [DDR service agreement](https://stripe.com/au-becs-dd-service-agreement/legal) can be shared with your customer at all times, either as a printed or non-changeable electronic copy (such as email). Stripe hosts this for you.\n*   Display the following standard authorization text for your customer to accept the BECS DDR, where you replace _Rocketship Inc_ with your company name. Their acceptance authorizes you to initiate BECS Direct Debit payments from their bank account.\n\n#### Note\n\nBy providing your bank account details, you agree to this Direct Debit Request and the [Direct Debit Request service agreement](https://stripe.com/au-becs-dd-service-agreement/legal), and authorize Stripe Payments Australia Pty Ltd ACN 160 180 343 Direct Debit User ID number 507156 (“Stripe”) to debit your account through the Bulk Electronic Clearing System (BECS) on behalf of _Rocketship Inc_ (the “Merchant”) for any amounts separately communicated to you by the Merchant. You certify that you’re either an account holder or an authorized signatory on the account listed above.\n\nThe details of the accepted mandate are generated when setting up a [PaymentMethod](https://docs.stripe.com/payments/payment-methods) or confirming a `PaymentIntent`. At all times, you should be able to share this mandate—the accepted DDR and its accompanying DDR service agreement—with your customer, either in print or as a non-changeable electronic copy (such as email). Stripe hosts this for you under the `url` property of the `Mandate` object linked to the `PaymentMethod`.\n\n### Add and configure an Australia Bank Account Element![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Australia Bank Account Element will help you collect and validate both the BSB number and the account number. It needs a place to live in your payment form. Create empty DOM nodes (containers) with unique IDs in your payment form. Additionally, your customer must read and accept the [Direct Debit Request service agreement](https://stripe.com/au-becs-dd-service-agreement/legal).\n\n`<form action=\"/setup\" method=\"post\" id=\"setup-form\">   <div class=\"form-row inline\">     <div class=\"col\">       <label for=\"accountholder-name\">         Name       </label>       <input         id=\"accountholder-name\"         name=\"accountholder-name\"         placeholder=\"John Smith\"         required       />     </div>     <div class=\"col\">       <label for=\"email\">         Email Address       </label>       <input         id=\"email\"         name=\"email\"         type=\"email\"         placeholder=\"john.smith@example.com\"         required       />     </div>   </div>    <div class=\"form-row\">     <!--     Using a label with a for attribute that matches the ID of the     Element container enables the Element to automatically gain focus     when the customer clicks on the label.     -->     <label for=\"au-bank-account-element\">       Bank Account     </label>     <div id=\"au-bank-account-element\">       <!-- A Stripe Element will be inserted here. -->     </div>   </div>    <!-- Used to display bank (branch) name associated with the entered BSB -->   <div id=\"bank-name\"></div>    <!-- Used to display form errors. -->   <div id=\"error-message\" role=\"alert\"></div>    <!-- Display mandate acceptance text. -->   <div class=\"col\" id=\"mandate-acceptance\">     By providing your bank account details, you agree to this Direct Debit Request     and the <a href=\"stripe.com/au-becs-dd-service-agreement/legal\">Direct Debit Request service agreement</a>,     and authorise Stripe Payments Australia Pty Ltd ACN 160 180 343     Direct Debit User ID number 507156 (“Stripe”) to debit your account     through the Bulk Electronic Clearing System (BECS) on behalf of     Rocket Rides (the \"Merchant\") for any amounts separately     communicated to you by the Merchant. You certify that you are either     an account holder or an authorised signatory on the account listed above.   </div>      <!-- Add the client_secret from the SetupIntent as a data attribute -->   <button id=\"submit-button\" data-secret=\"{{CLIENT_SECRET}}\">Set up BECS Direct Debit</button>  </form>`\n\nWhen the form loads, you can [create an instance](https://docs.stripe.com/js/elements_object/create_element?type=au_bank_account) of the Australia Bank Account Element and mount it to the Element container:\n\n``// Custom styling can be passed to options when creating an Element const style = {   base: {     color: '#32325d',     fontSize: '16px',     '::placeholder': {       color: '#aab7c4'     },     ':-webkit-autofill': {       color: '#32325d',     },   },   invalid: {     color: '#fa755a',     iconColor: '#fa755a',     ':-webkit-autofill': {       color: '#fa755a',     },   } };  const options = {     style: style,     disabled: false,     hideIcon: false,     iconStyle: \"default\", // or \"solid\" }  // Create an instance of the auBankAccount Element. const auBankAccount = elements.create('auBankAccount', options);  // Add an instance of the auBankAccount Element into // the `au-bank-account-element` <div>. auBankAccount.mount('#au-bank-account-element');``\n\n[](#web-submit-payment-method)\n\nRather than sending the entire `SetupIntent` object to the client, use its [client secret](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-client_secret) from [step 2](#web-create-setup-intent). This is different from your API keys that authenticate Stripe API requests.\n\nThe client secret should be handled carefully because it can complete the setup. Do not log it, embed it in URLs, or expose it to anyone but the customer.\n\nUse [stripe.confirmAuBecsDebitSetup](https://docs.stripe.com/js/setup_intents/confirm_au_becs_debit_setup) to complete the setup when the user submits the form. A successful setup returns a `succeeded` value for the SetupIntent’s `status` property. If the setup isn’t successful, inspect the returned `error` to determine the cause.\n\nAs [customer](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-customer) was set, the [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") is attached to the provided `Customer` object after a successful setup. At this point, you can associate the ID of the `Customer` object with your internal representation of a customer. This allows you to use the stored `PaymentMethod` to collect future payments without prompting for your customer’s payment method details.\n\n`const form = document.getElementById('setup-form'); const accountholderName = document.getElementById('accountholder-name'); const email = document.getElementById('email'); const submitButton = document.getElementById('submit-button'); const clientSecret = submitButton.dataset.secret;  form.addEventListener('submit', async (event) => {   event.preventDefault();   stripe.confirmAuBecsDebitSetup(     clientSecret,     {       payment_method: {         au_becs_debit: auBankAccount,         billing_details: {           name: accountholderName.value,           email: email.value         }       }     }   ); });`\n\nAfter successfully confirming the `SetupIntent`, you should share the [mandate URL](https://docs.stripe.com/api/mandates/object#mandate_object-payment_method_details-au_becs_debit-url) from the [Mandate object](https://docs.stripe.com/api/mandates) with your customer. We also recommend including the following details to your customer when you confirm their mandate has been established:\n\n*   an explicit confirmation message that indicates a Direct Debit arrangement has been set up\n*   the [business name](#statement-descriptors) that will appear on the customer’s bank statement whenever their account gets debited\n*   the payment amount and schedule (if applicable)\n*   a link to the generated DDR mandate URL\n\nThe `Mandate` object’s ID is accessible from the `mandate` on the SetupIntent object, which is sent as part of the `setup_intent.succeeded` event sent after confirmation, but can also be [retrieved through the API](https://docs.stripe.com/api/setup_intents/retrieve).\n\n`curl https://api.stripe.com/v1/setup_intents/{{SETUP_INTENT_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"expand[]\"=mandate`\n\n[](#web-test-integration)\n\nYou can test your form using the test BSB number `000-000` and one of the test account numbers below with your [confirmAuBecsDebitSetup](https://docs.stripe.com/js/setup_intents/confirm_au_becs_debit_setup) request.\n\n| BSB Number | Account Number | Description |\n| --- | --- | --- |\n| `000-000` | `000123456` | The PaymentIntent created with the resulting PaymentMethod transitions from `processing` to `succeeded`. The mandate status remains `active`. |\n| `000-000` | `900123456` | The PaymentIntent created with the resulting PaymentMethod transitions from `processing` to `succeeded` (with a three-minute delay). The mandate status remains `active`. |\n| `000-000` | `111111113` | The PaymentIntent created with the resulting PaymentMethod transitions from `processing` to `requires_payment_method` with an `account_closed` failure code. The mandate status becomes `inactive` at that point. |\n| `000-000` | `111111116` | The PaymentIntent created with the resulting PaymentMethod transitions from `processing` to `requires_payment_method` with a `no_account` failure code. The mandate status becomes `inactive` at that point. |\n| `000-000` | `222222227` | The PaymentIntent created with the resulting PaymentMethod transitions from `processing` to `requires_payment_method` with a `refer_to_customer` failure code. The mandate status remains `active`. |\n| `000-000` | `922222227` | The PaymentIntent created with the resulting PaymentMethod transitions from `processing` to `requires_payment_method` with a `refer_to_customer` failure code (with a three-minute delay). The mandate status remains `active`. |\n| `000-000` | `333333335` | The PaymentIntent created with the resulting PaymentMethod transitions from `processing` to `requires_payment_method` with a `debit_not_authorized` failure code. The mandate status becomes `inactive` at that point. |\n| `000-000` | `666666660` | The PaymentIntent created with the resulting PaymentMethod transitions from `processing` to `succeeded`, but a dispute is immediately created. |\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Accept a BECS Debit payment](https://docs.stripe.com/payments/au-becs-debit/accept-a-payment)\n*   [Connect platforms using the Payment Methods API](https://docs.stripe.com/payments/payment-methods/connect)",
  "title": "Save BECS Direct Debit details for future payments | Stripe Documentation",
  "description": "Use the Setup Intents API to save payment method details for future BECS Direct Debit payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/sources",
  "markdown": "# The Sources API | Stripe DocumentationThe Stripe Docs logo\n\n## The Sources APIDeprecated\n\n## Learn about the different payment methods and mechanisms available through the Sources API.\n\n#### Warning\n\nWe deprecated the Sources API and plan to remove support for local payment methods. If you currently handle any local payment methods using the Sources API, you must [migrate them to the Payment Methods API](https://docs.stripe.com/payments/payment-methods/transitioning). We’ll send email communication with more information about this end of support.\n\nWhile we don’t plan to remove support for card payments, we recommend replacing any use of the Sources API with the [PaymentMethods API](https://docs.stripe.com/api/payment_methods), which provides access to our latest features and payment method types.\n\n[Source](https://docs.stripe.com/api#sources) objects allow you to accept a variety of payment methods with a single API. A source represents a customer’s payment instrument, and can be used with the Stripe API to create payments. Sources can be charged directly, or attached to customers for later reuse.\n\nEach [payment method supported](#supported-payment-methods) by the Sources API is defined by four key characteristics. The combination of these characteristics determines how a source is made chargeable, and how it is used in a charge request to complete a payment.\n\n*   [Pull or push](#pull-or-push-of-funds): How the funds for the method of payment are transferred from your customer\n*   [Flow](#flow-for-customer-action): The type of action your customer must take to authenticate the payment\n*   [Usage](#single-use-or-reusable): Whether the `Source` is reusable or not\n*   [Synchronous or asynchronous](#synchronous-or-asynchronous-confirmation): Whether the resulting charge can be confirmed immediately, or only after a delay\n\nFor a complete example illustrating how to accept any payment method using the Sources API, check out this [sample e-commerce store](https://stripe-payments-demo.appspot.com/), and browse its [source code on GitHub](https://github.com/stripe/stripe-payments-demo).\n\n## Supported payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can enable any payment method available to you within the [Dashboard](https://dashboard.stripe.com/account/payments/settings). Activation is generally instantaneous, and does not require additional contracts nor include a lengthy process. For a detailed listing, take a look at the available payment methods and their [supported geographical regions](https://stripe.com/payments/payment-methods-guide#payment-methods-fact-sheets).\n\nThe following table maps the aforementioned key characteristics to the supported payment methods:\n\n| Transfer | Confirmation | None | Redirect | Code verification | Receiver |\n| --- | --- | --- | --- | --- | --- |\n| Pull | Synchronous | [Cards](https://docs.stripe.com/sources/cards) | —   | —   | —   |\n| Asynchronous | SEPA Direct Debit (Deprecated) | [ACH debits with authentication](https://docs.stripe.com/ach-deprecated) | [ACH debits with microdeposits](https://docs.stripe.com/ach-deprecated) | —   |\n| Push | Synchronous | *   Alipay (Deprecated)<br>*   Bancontact (Deprecated)<br>*   giropay (Deprecated)<br>*   iDEAL (Deprecated)<br>*   Przelewy24 (Deprecated)<br>*   WeChat Pay (Deprecated) | —   | —   | Multibanco (Deprecated) |\n| Asynchronous | —   | Sofort with Sources (Deprecated) | —   | —   |\n\n## Pull or push of funds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEach method of payment is categorized as either pull or push, depending on how funds are transferred from the customer’s payment method.\n\n*   Using a _pull_ method, you debit the funds from the customer’s account after the customer has provided consent. [Card payments](https://docs.stripe.com/sources/cards) are an example of a pull method: your customer’s card is debited when a payment is made, and no customer interaction is required for subsequent debits.\n*   Using a _push_ method, the customer sends the funds to you. ACH Credit Transfers are an example of a push method: Your customer is provided with bank routing and account numbers to which they should send (push) the correct amount. After confirmation that your customer has sent the funds to you, the source becomes chargeable, and is ready to be used in a charge request. Other push payment methods, such as iDEAL or Sofort, rely on a redirect for your customer to push the money to you directly from their online bank account. Generally, push methods require a customer interaction for each payment.\n\n## Flow for customer action![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCertain payment methods require your customer to complete a particular action (flow) before the source is chargeable. The type of flow that applies to a payment method is stated within the `Source` object’s `flow` parameter. Each method is categorized into one of the following flow types.\n\nNo action is required from your customer. Some payment methods (generally _pull_ methods), such as cards (excluding 3D Secure), require no additional authentication beyond collecting the payment information from customers. Sources representing this payment method can be used immediately when making charge requests.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/02-none.7bd4a29f0be27cbb0c94a6c891af9d70.png)\n\nOnce the required flow has been completed and a source becomes chargeable, the source must be used to make a charge request for the payment to be completed. If not, the source is canceled and the customer’s authenticated payment is refunded automatically—no money is moved into your account.\n\n## Single-use or reusable![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCertain payment methods allow for the creation of sources that can be reused for additional payments without your customer needing to complete the payment process again. Sources that can be reused have their `usage` parameter set to `reusable`.\n\nConversely, if a source can only be used once, this parameter is set to `single_use`, and a source must be created each time a customer makes a payment. Such sources should not be attached to customers—instead, they should be charged directly. They can be charged only once, and their status will change to `consumed` when charged.\n\nReusable sources must be attached to a [Customer](https://docs.stripe.com/api#customers) in order to be reused. (If charged directly, their status will change to `consumed`.) To learn how to attach Sources to [Customers](https://docs.stripe.com/api/customers \"Customers\"), and to manage a Customer’s sources list, refer to the [Sources and Customers](https://docs.stripe.com/sources/customers) guide.\n\n## Synchronous or asynchronous confirmation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOnce you use a payment method to create a [Charge](https://docs.stripe.com/api#charges) object, that charge’s status can be confirmed either immediately (synchronously), or after a certain amount of time (asynchronously).\n\n*   With a synchronous payment method, the charge request’s status can be immediately confirmed as either `succeeded` or `failed`. If the charge request is successful, the payment is completed—it’s considered guaranteed that the customer has been charged, and that you’ll receive the funds. Card payments are an example of a synchronous payment method: there is real-time confirmation of the payment’s success or failure.\n    \n*   For asynchronous payment methods, it can take up to several days to confirm whether the payment has been successful. During this time, the payment cannot be guaranteed. The status of the payment’s `Charge` object is initially set to `pending`, until the payment has been confirmed as successful or failed. ACH debits are an example of an asynchronous method: with these debits, it takes a few days to confirm that the payment has succeeded.\n    \n\nStripe sends a [webhook](https://docs.stripe.com/webhooks \"webhook\") event once a charge’s status has changed. When accepting any payment method that is asynchronous, your integration must be able to receive webhooks, so that it can receive this notification and confirm whether the customer’s payment was successful or has failed.",
  "title": "The Sources API | Stripe Documentation",
  "description": "Learn about the different payment methods and mechanisms available through the Sources API.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/payment-intents/standalone-three-d-secure",
  "markdown": "# Standalone 3D Secure | Stripe DocumentationThe Stripe Docs logo\n\n## Standalone 3D Secure API allows you to run EMV 3D Secure (3DS) authentication on Stripe while authorizing a subsequent payment on Stripe or elsewhere.\n\nStandalone 3D Secure is an advanced payment flow for multiprocessors that allows you to request authentication for online transactions with the EMV 3D Secure (3DS) protocol.\n\nAfter successfully completing authentication with Standalone 3D Secure, you can submit the payment for authorization using any of the following methods:\n\n*   [Import 3D Secure results with Stripe](https://docs.stripe.com/payments/payment-intents/three-d-secure-import)\n    \n*   Process the subsequent payment on a different third-party payment processor\n    \n\nStandalone 3D Secure provides support on Visa, Mastercard, and American Express card payments.\n\n### Availability Beta![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStandalone 3D Secure is available in all countries where Stripe supports card payments, with the exception of the countries listed below.\n\nStandalone 3D Secure isn’t available in the following countries:\n\n#### Note\n\nStandalone 3D Secure doesn’t support non-payment authentication.",
  "title": "Standalone 3D Secure | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/setup_intents/object",
  "markdown": "# The SetupIntent object | Stripe API Reference\n\n### Attributes\n\n*   #### \n    \n    idstringretrievable with publishable key\n    \n    Unique identifier for the object.\n    \n*   #### \n    \n    automatic\\_payment\\_methodsnullable object\n    \n    Settings for dynamic payment methods compatible with this Setup Intent\n    \n*   #### \n    \n    client\\_secretnullable stringretrievable with publishable key\n    \n    The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.\n    \n    The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.\n    \n*   #### \n    \n    customernullable stringExpandable\n    \n    ID of the Customer this SetupIntent belongs to, if one exists.\n    \n    If present, the SetupIntent’s payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.\n    \n*   #### \n    \n    descriptionnullable stringretrievable with publishable key\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   #### \n    \n    last\\_setup\\_errornullable objectretrievable with publishable key\n    \n    The error encountered in the previous SetupIntent confirmation.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   #### \n    \n    next\\_actionnullable objectretrievable with publishable key\n    \n    If present, this property tells you what actions you need to take in order for your customer to continue payment setup.\n    \n*   #### \n    \n    payment\\_methodnullable stringExpandableretrievable with publishable key\n    \n    ID of the payment method used with this SetupIntent.\n    \n*   #### \n    \n    statusenumretrievable with publishable key\n    \n    [Status](https://docs.stripe.com/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `canceled` |\n    | `processing` |\n    | `requires_action` |\n    | `requires_confirmation` |\n    | `requires_payment_method` |\n    | `succeeded` |\n    \n*   #### \n    \n    usagestringretrievable with publishable key\n    \n    Indicates how the payment method is intended to be used in the future.\n    \n    Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`.\n    \n\n### More attributes\n\n*   #### \n    \n    objectstringretrievable with publishable key\n    \n*   #### \n    \n    applicationnullable stringExpandableConnect only\n    \n*   #### \n    \n    attach\\_to\\_selfnullable boolean\n    \n*   #### \n    \n    cancellation\\_reasonnullable enumretrievable with publishable key\n    \n*   #### \n    \n    createdtimestampretrievable with publishable key\n    \n*   #### \n    \n    flow\\_directionsnullable array of enums\n    \n*   #### \n    \n    latest\\_attemptnullable stringExpandable\n    \n*   #### \n    \n    livemodebooleanretrievable with publishable key\n    \n*   #### \n    \n    mandatenullable stringExpandable\n    \n*   #### \n    \n    on\\_behalf\\_ofnullable stringExpandableConnect only\n    \n*   #### \n    \n    payment\\_method\\_configuration\\_detailsnullable object\n    \n*   #### \n    \n    payment\\_method\\_optionsnullable object\n    \n*   #### \n    \n    payment\\_method\\_typesarray of stringsretrievable with publishable key\n    \n*   #### \n    \n    single\\_use\\_mandatenullable stringExpandable\n    \n\n```\n{  \"id\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG\",  \"object\": \"setup_intent\",  \"application\": null,  \"cancellation_reason\": null,  \"client_secret\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG_secret_NXDICkPqPeiBTAFqWmkbff09lRmSVXe\",  \"created\": 1678942624,  \"customer\": null,  \"description\": null,  \"flow_directions\": null,  \"last_setup_error\": null,  \"latest_attempt\": null,  \"livemode\": false,  \"mandate\": null,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"single_use_mandate\": null,  \"status\": \"requires_payment_method\",  \"usage\": \"off_session\"}\n```\n\n## [Create a SetupIntent](https://docs.stripe.com/api/setup_intents/create)\n\nCreates a SetupIntent object.\n\nAfter you create the SetupIntent, attach a payment method and [confirm](https://docs.stripe.com/api/setup_intents/confirm) it to collect any required permissions to charge the payment method later.\n\n### Parameters\n\n*   #### \n    \n    automatic\\_payment\\_methodsobject\n    \n    When you enable this parameter, this SetupIntent accepts payment methods that you enable in the Dashboard and that are compatible with its other parameters.\n    \n*   Set to `true` to attempt to confirm this SetupIntent immediately. This parameter defaults to `false`. If a card is the attached payment method, you can provide a `return_url` in case further authentication is necessary.\n    \n*   ID of the Customer this SetupIntent belongs to, if one exists.\n    \n    If present, the SetupIntent’s payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.\n    \n*   Indicates how the payment method is intended to be used in the future. If not provided, this value defaults to `off_session`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `off_session`<br><br>Use `off_session` if your customer may or may not be in your checkout flow. |\n    | `on_session`<br><br>Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. |\n    \n\n### More parameters\n\n*   #### \n    \n    confirmation\\_tokenstringonly when confirm=true\n    \n*   #### \n    \n    flow\\_directionsarray of enums\n    \n*   #### \n    \n    mandate\\_dataobjectonly when confirm=true\n    \n*   #### \n    \n    on\\_behalf\\_ofstringConnect only\n    \n*   #### \n    \n    payment\\_method\\_configurationstring\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_optionsobject\n    \n*   #### \n    \n    payment\\_method\\_typesarray of strings\n    \n*   #### \n    \n    return\\_urlstringonly when confirm=true\n    \n\n### Returns\n\nReturns a SetupIntent object.\n\n```\ncurl https://api.stripe.com/v1/setup_intents \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"payment_method_types[]\"=card\n```\n\n```\n{  \"id\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG\",  \"object\": \"setup_intent\",  \"application\": null,  \"cancellation_reason\": null,  \"client_secret\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG_secret_NXDICkPqPeiBTAFqWmkbff09lRmSVXe\",  \"created\": 1678942624,  \"customer\": null,  \"description\": null,  \"flow_directions\": null,  \"last_setup_error\": null,  \"latest_attempt\": null,  \"livemode\": false,  \"mandate\": null,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"single_use_mandate\": null,  \"status\": \"requires_payment_method\",  \"usage\": \"off_session\"}\n```\n\n## [Update a SetupIntent](https://docs.stripe.com/api/setup_intents/update)\n\nUpdates a SetupIntent object.\n\n### Parameters\n\n*   ID of the Customer this SetupIntent belongs to, if one exists.\n    \n    If present, the SetupIntent’s payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.\n    \n*   An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.\n    \n\n### More parameters\n\n*   #### \n    \n    flow\\_directionsarray of enums\n    \n*   #### \n    \n    payment\\_method\\_configurationstring\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n*   #### \n    \n    payment\\_method\\_optionsobject\n    \n*   #### \n    \n    payment\\_method\\_typesarray of strings\n    \n\n### Returns\n\nReturns a SetupIntent object.\n\nPOST /v1/setup\\_intents/:id\n\n```\ncurl https://api.stripe.com/v1/setup_intents/seti_1Mm8s8LkdIwHu7ix0OXBfTRG \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG\",  \"object\": \"setup_intent\",  \"application\": null,  \"cancellation_reason\": null,  \"client_secret\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG_secret_NXDICkPqPeiBTAFqWmkbff09lRmSVXe\",  \"created\": 1678942624,  \"customer\": null,  \"description\": null,  \"flow_directions\": null,  \"last_setup_error\": null,  \"latest_attempt\": null,  \"livemode\": false,  \"mandate\": null,  \"metadata\": {    \"order_id\": \"6735\"  },  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"single_use_mandate\": null,  \"status\": \"requires_payment_method\",  \"usage\": \"off_session\"}\n```\n\n## [Retrieve a SetupIntent](https://docs.stripe.com/api/setup_intents/retrieve)\n\nRetrieves the details of a SetupIntent that has previously been created.\n\nClient-side retrieval using a publishable key is allowed when the `client_secret` is provided in the query string.\n\nWhen retrieved with a publishable key, only a subset of properties will be returned. Please refer to the [SetupIntent](#setup_intent_object) object reference for more details.\n\n### Parameters\n\n*   #### \n    \n    client\\_secretstringRequired if using publishable key\n    \n    The client secret of the SetupIntent. We require this string if you use a publishable key to retrieve the SetupIntent.\n    \n\n### Returns\n\nReturns a SetupIntent if a valid identifier was provided.\n\nGET /v1/setup\\_intents/:id\n\n```\ncurl https://api.stripe.com/v1/setup_intents/seti_1Mm8s8LkdIwHu7ix0OXBfTRG \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG\",  \"object\": \"setup_intent\",  \"application\": null,  \"cancellation_reason\": null,  \"client_secret\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG_secret_NXDICkPqPeiBTAFqWmkbff09lRmSVXe\",  \"created\": 1678942624,  \"customer\": null,  \"description\": null,  \"flow_directions\": null,  \"last_setup_error\": null,  \"latest_attempt\": null,  \"livemode\": false,  \"mandate\": null,  \"metadata\": {},  \"next_action\": null,  \"on_behalf_of\": null,  \"payment_method\": null,  \"payment_method_options\": {    \"card\": {      \"mandate_options\": null,      \"network\": null,      \"request_three_d_secure\": \"automatic\"    }  },  \"payment_method_types\": [    \"card\"  ],  \"single_use_mandate\": null,  \"status\": \"requires_payment_method\",  \"usage\": \"off_session\"}\n```\n\n## [List all SetupIntents](https://docs.stripe.com/api/setup_intents/list)\n\nReturns a list of SetupIntents.\n\n### Parameters\n\n*   Only return SetupIntents for the customer specified by this customer ID.\n    \n*   Only return SetupIntents that associate with the specified payment method.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` SetupIntents, starting after SetupIntent `starting_after`. Each entry in the array is a separate SetupIntent object. If no more SetupIntents are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/setup_intents \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/setup_intents\",  \"has_more\": false,  \"data\": [    {      \"id\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG\",      \"object\": \"setup_intent\",      \"application\": null,      \"cancellation_reason\": null,      \"client_secret\": \"seti_1Mm8s8LkdIwHu7ix0OXBfTRG_secret_NXDICkPqPeiBTAFqWmkbff09lRmSVXe\",      \"created\": 1678942624,      \"customer\": null,      \"description\": null,      \"flow_directions\": null,      \"last_setup_error\": null,      \"latest_attempt\": null,      \"livemode\": false,      \"mandate\": null,      \"metadata\": {},      \"next_action\": null,      \"on_behalf_of\": null,      \"payment_method\": null,      \"payment_method_options\": {        \"card\": {          \"mandate_options\": null,          \"network\": null,          \"request_three_d_secure\": \"automatic\"        }      },      \"payment_method_types\": [        \"card\"      ],      \"single_use_mandate\": null,      \"status\": \"requires_payment_method\",      \"usage\": \"off_session\"    }    {...}    {...}  ],}\n```",
  "title": "The SetupIntent object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/disputes/measuring",
  "markdown": "# Measuring disputes | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the potential issues that occur from excessive disputes, and how to avoid them.\n\nThe Stripe Dashboard displays two different calculations to measure your disputes: dispute activity and dispute rate.\n\n*   **Dispute activity** represents the percentage of disputes on successful payments by _dispute_ date.\n    \n*   **Dispute rate** represents the percentage of disputes on successful payments by _charge_ date.\n    \n\nThe two calculations are best understood with an example. Let’s say you processed 1,000 payments in a given week. In that same week, you also received 10 disputes.\n\nOnly 3 of those disputes were from the 1,000 payments processed that week. The other 7 disputes were from payments that were processed at an earlier date. (Because disputes take a while to come in, this delay is very common.)\n\nThe dispute activity for this week would be 1% (10 disputes on 1,000 payments). The dispute rate for this week would be 0.3% (3 disputes on 1,000 payments).\n\n## Dispute activity ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDispute activity and dispute rate serve different purposes. The card networks’ [dispute and card fraud monitoring programs](https://docs.stripe.com/disputes/monitoring-programs) use the dispute _activity_ calculation. If the dispute activity for your business exceeds the thresholds set by the networks for a prolonged period of time (usually multiple months), you might be subject to fines. You can find the dispute activity for your account in the [Dashboard](https://dashboard.stripe.com/)’s **Analytics** section.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/dispute-activity.046c3a284d88711a779563ddfdf1d694.png)\n\n## Dispute rate ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe dispute _rate_ is a more accurate representation of fraud and disputes for your business, because it shows which actual payments were disputed. For example, you could use the dispute rate to see a particular sale that resulted in more disputes than usual, or to pick out fraud attack patterns.\n\nBecause cardholders can dispute a charge up to 120 days after a payment was made ([and sometimes even later](https://docs.stripe.com/disputes/how-disputes-work#timing)), the dispute rate might change for dates more recent than 120 days old. We show this calculation on the [Radar for Fraud Teams](https://dashboard.stripe.com/radar) page in the Dashboard.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/dispute-rate.66d11e172aa7ab72dc50ad8fbb1d939d.png)\n\n## Excessive dispute activity ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nEach card network maintains a series of [dispute and card fraud monitoring programs](https://docs.stripe.com/disputes/monitoring-programs) that apply to businesses operating with high dispute activity. Excessive dispute activity not only affects your ability to process with Stripe, but with other processors as well—and can even result in fines from the card networks. All disputes, whether they’re won or lost, count towards your dispute rate, so the best strategy to avoid monitoring programs is [dispute prevention](https://docs.stripe.com/disputes/prevention).\n\nThe credit card processing industry standard recognizes dispute activity above 0.75% as excessive, but other factors, such as a sudden spike or steep upward trend can trigger placement in a monitoring program before dispute activity reaches the 0.75% threshold. For this reason, if we ever see higher dispute activity or a significant increase in potentially fraudulent activity on your account, we’ll proactively reach out to see how we can help.\n\n## Predicted dispute activity ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn some cases, our machine learning models can predict if your account might be in danger of excessive dispute activity at a point in the future. If that happens, we’ll alert you so that you can take proactive steps to [identify and prevent disputes and fraud](https://docs.stripe.com/disputes/prevention).\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/dispute-fraud.07e969ae8b005b82469897fb166764f0.png)\n\nThough we can predict dispute trends with some confidence, we cannot predict which particular payments will be disputed. Keep in mind that we cannot be certain of the predicted rate—your actual dispute activity depends upon any further disputes received.\n\n## Early fraud warnings ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n[Early fraud warnings](https://docs.stripe.com/disputes/how-disputes-work#early-fraud-warnings) (EFWs) are messages from Visa and Mastercard that card issuers on these two networks generate to flag payments they suspect might be fraudulent.\n\nThese aren’t informational notes from the card networks. EFWs do sometimes provide the opportunity for you to refund a fraudulent payment before it becomes a fraud dispute, but they’re equally as important when used as a metric by the networks to measure a business’s propensity for fraudulent transactions. Visa in particular counts these fraud warnings toward identification in their [VFMP monitoring program](https://docs.stripe.com/disputes/monitoring-programs#vfmp).",
  "title": "Measuring disputes | Stripe Documentation",
  "description": "Learn about the potential issues that occur from excessive disputes, and how to avoid them.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payment-authentication",
  "markdown": "# Payment authentication report | Stripe DocumentationThe Stripe Docs logo\n\n## Learn which metrics Stripe tracks to understand how authentication impacts your payments.\n\nUsing the [payment authentication report](https://dashboard.stripe.com/authentication) in the Dashboard, understand how [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") authentication impacts your payment conversion. Use SQL queries to create custom reports from your Stripe data with [Stripe Sigma](https://stripe.com/sigma).\n\n#### Note\n\n## Get started![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Read more about authentication![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
  "title": "Payment authentication report | Stripe Documentation",
  "description": "Learn which metrics Stripe tracks to understand how authentication impacts your payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/save-and-reuse?platform=web&ui=elements",
  "markdown": "# Set up future payments | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to save payment details and charge your customers later.\n\nThe [Setup Intents API](https://docs.stripe.com/api/setup_intents) lets you save a customer’s payment details without an initial payment. This is helpful if you want to onboard customers now, set them up for payments, and charge them in the future—when they’re offline.\n\nUse this integration to set up recurring payments or to create one-time payments with a final amount determined later, often after the customer receives your service.\n\n#### Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations, and network rules when saving a customer’s payment details. These requirements generally apply if you want to save your customer’s payment method for future use, such as displaying a customer’s payment method to them in the checkout flow for a future purchase or charging them when they’re not actively using your website or app. Add terms to your website or app that state how you plan to save payment method details and allow customers to opt in.\n\nWhen you save a payment method, you can only use it for the specific usage you have included in your terms. To charge a payment method when a customer is offline and save it as an option for future purchases, make sure that you explicitly collect consent from the customer for this specific use. For example, include a “Save my payment method for future use” checkbox to collect consent.\n\nTo charge them when they’re offline, make sure your terms include the following:\n\n*   The customer’s agreement to your initiating a payment or a series of payments on their behalf for specified transactions.\n*   The anticipated timing and frequency of payments (for example, if the charges are for scheduled installments, subscription payments, or unscheduled top-ups).\n*   How you determine the payment amount.\n*   Your cancellation policy, if the payment method is for a subscription service.\n\nMake sure you keep a record of your customer’s written agreement to these terms.\n\n#### Note\n\nIf you need to use manual server-side confirmation or your integration requires presenting payment methods separately, see our [alternative guide](https://docs.stripe.com/payments/save-and-reuse-cards-only).\n\n[](#set-up-stripe)\n\nFirst, [create a Stripe account](https://dashboard.stripe.com/register) or [sign in](https://dashboard.stripe.com/login).\n\nUse our official libraries to access the Stripe API from your application:\n\n`# Available as a gem sudo gem install stripe`\n\n`# If you use bundler, you can add this line to your Gemfile gem 'stripe'`\n\n[](#enable-payment-methods)\n\nView your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods) and enable the payment methods you want to support. You need at least one payment method enabled to create a [SetupIntent](https://docs.stripe.com/api/setup_intents \"Setup Intents API\").\n\nBy default, Stripe enables cards and other prevalent payment methods that can help you reach more customers, but we recommend turning on additional payment methods that are relevant for your business and customers. See [Payment method integration options](https://docs.stripe.com/payments/payment-methods/integration-options#payment-method-product-support) for product and payment method support, and our [pricing page](https://stripe.com/pricing/local-payment-methods) for fees.\n\n[](#create-customer)\n\nTo set up a payment method for future payments, you must attach it to a [Customer](https://docs.stripe.com/api/customers \"Customers\"). Create a `Customer` object when your customer creates an account with your business. `Customer` objects allow for reusing payment methods and tracking across multiple payments.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#create-intent)\n\n#### Note\n\nA SetupIntent is an object that represents your intent to set up a customer’s payment method for future payments. The payment methods shown to customers during the checkout process are also included on the SetupIntent. You can let Stripe automatically pull payment methods from your Dashboard settings or you can list them manually.\n\nUnless your integration requires a code-based option for offering payment methods, Stripe recommends the automated option. This is because Stripe evaluates the currency, payment method restrictions, and other parameters to determine the list of supported payment methods. Payment methods that increase conversion and that are most relevant to the currency and customer’s location are prioritized. Lower priority payment methods are hidden beneath an overflow menu.\n\nSome payment methods can’t be used to set up future payments. You can still enable these payment methods for other use cases, they just won’t be displayed to customers as an option when setting up future payments. See [Payment method integration options](https://docs.stripe.com/payments/payment-methods/integration-options) for more details about what’s supported.\n\nYou can optionally create a SetupIntent with `automatic_payment_methods` enabled, and the SetupIntent is created using the payment methods you configured in the Dashboard. Specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default in the latest version of the API.\n\nYou can manage payment methods from the [Dashboard](https://dashboard.stripe.com/settings/payment_methods). Stripe handles the return of eligible payment methods based on factors such as the transaction’s amount, currency, and payment flow.\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d \"automatic_payment_methods[enabled]\"=true`\n\n### Retrieve the client secret![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe SetupIntent includes a [client secret](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-client_secret \"PaymentIntent client secret\") that the client side uses to securely complete the payment process. You can use different approaches to pass the client secret to the client side.\n\nRetrieve the client secret from an endpoint on your server, using the browser’s `fetch` function. This approach is best if your client side is a single-page application, particularly one built with a modern frontend framework like React. Create the server endpoint that serves the client secret:\n\n`get '/secret' do   intent = # ... Create or retrieve the SetupIntent   {client_secret: intent.client_secret}.to_json end`\n\nAnd then fetch the client secret with JavaScript on the client side:\n\n`(async () => {   const response = await fetch('/secret');   const {client_secret: clientSecret} = await response.json();   // Render the form using the clientSecret })();`\n\n#### Using Radar\n\nWhen saving a customer’s payment method without an initial payment, [Radar](https://docs.stripe.com/radar) doesn’t act on the SetupIntent by default. If you want to activate this as the default, go to the [Radar settings](https://dashboard.stripe.com/settings/radar) and enable **Use Radar on payment methods saved for future use**.\n\n[](#collect-payment-details)\n\nYou’re ready to collect payment details on the client with the [Payment Element](https://docs.stripe.com/payments/payment-element). The Payment Element is a prebuilt UI component that simplifies collecting payment details for a variety of payment methods.\n\nThe Payment Element contains an iframe that securely sends payment information to Stripe over an HTTPS connection. The checkout page address must start with `https://` rather than `http://` for your integration to work. You can test your integration without doing so, but remember to [enable HTTPS](https://docs.stripe.com/security/guide#tls) when you’re ready to accept live payments.\n\n### Set up Stripe.js![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element is automatically available as a feature of Stripe.js. Include the Stripe.js script on your checkout page by adding it to the `head` of your HTML file. Always load Stripe.js directly from js.stripe.com to remain PCI compliant. Don’t include the script in a bundle or host a copy of it yourself.\n\nCreate an instance of Stripe with the following JavaScript on your checkout page:\n\n`// Set your publishable key: remember to change this to your live publishable key in production // See your keys here: [https://dashboard.stripe.com/apikeys](https://dashboard.stripe.com/apikeys) const stripe = Stripe(`\n\n`'pk_test_TYooMQauvdEDq54NiTphI7jx'`\n\n`);`\n\n### Add the Payment Element to your payment setup page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Payment Element needs a place to live on your payment setup page. Create an empty DOM node (container) with a unique ID in your payment form:\n\n`<form id=\"payment-form\">   <div id=\"payment-element\">     <!-- Elements will create form elements here -->   </div>   <button id=\"submit\">Submit</button>   <div id=\"error-message\">     <!-- Display error message to your customers here -->   </div> </form>`\n\nWhen the previous form loads, create an instance of the Payment Element and mount it to the container DOM node. Pass the [client secret](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-client_secret) from the previous step into `options` when you create the [Elements](https://docs.stripe.com/js/elements_object/create) instance:\n\n`const options = {   clientSecret: '{{CLIENT_SECRET}}',   // Fully customizable with appearance API.   appearance: {/*...*/}, };  // Set up Stripe.js and Elements using the SetupIntent's client secret const elements = stripe.elements(options);  // Create and mount the Payment Element const paymentElement = elements.create('payment'); paymentElement.mount('#payment-element');`\n\nThe Payment Element renders a dynamic form that allows your customer to pick a payment method. For each payment method, the form automatically asks the customer to fill in all necessary payment details.\n\n### Customize appearance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustomize the Payment Element to match the design of your site by passing the [appearance object](https://docs.stripe.com/js/elements_object/create#stripe_elements-options-appearance) into `options` when creating the `Elements` provider.\n\n### Request Apple Pay merchant token![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you accept Apple Pay payments, we recommend configuring the Apple Pay interface to return a [merchant token](https://docs.stripe.com/apple-pay/merchant-tokens?pay-element=web-pe) to enable merchant initiated transactions (MIT). [Request the relevant merchant token type](https://docs.stripe.com/apple-pay/merchant-tokens?pay-element=web-pe) in the Payment Element. The following example shows a request for the deferred payments merchant token.\n\n`const paymentElement = elements.create('payment', {   applePay: {     deferredPaymentRequest: {       paymentDescription: 'My deferred payment',       managementURL: '[https://example.com/billing](https://example.com/billing)',       deferredBilling: {         amount: 2500,         label: 'Deferred Fee',         deferredPaymentDate: new Date('2024-01-05')       },     }   },   // Other options });`\n\n### Configure currency![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen using SetupIntents with [automatic\\_payment\\_methods](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-automatic_payment_methods), passing [currency](https://docs.stripe.com/js/elements_object/create#stripe_elements-options-currency) into `options` when creating the `Elements` provider, influences which payment methods are rendered by the Payment Element. Payment Element renders the payment methods enabled in the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) that support the provided currency. See [Payment method integration options](https://docs.stripe.com/payments/payment-methods/integration-options) for more details about what’s supported.\n\n### Collect addresses![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, the Payment Element only collects the necessary billing address details. To collect a customer’s full billing address (to calculate the tax for digital goods and services, for example) or shipping address, use the [Address Element](https://docs.stripe.com/elements/address-element).\n\n[](#submit-payment-details)\n\nUse [stripe.confirmSetup](https://docs.stripe.com/js/setup_intents/confirm_setup) to complete the setup using details collected by the Payment Element. Provide a [return\\_url](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-return_url) to this function so that Stripe can redirect the user after they complete setup. We may first redirect them to an intermediate site, like a bank authorization page, before redirecting them to the `return_url`.\n\nIf your customer saves their card details, we immediately redirect them to the `return_url` when setup is successful. If you don’t want to redirect for card payments, you can set [redirect](https://docs.stripe.com/js/setup_intents/confirm_setup#confirm_setup_intent-options-redirect) to `if_required`. This only redirects customers that check out with redirect-based payment methods.\n\n``const form = document.getElementById('payment-form');  form.addEventListener('submit', async (event) => {   event.preventDefault();    const {error} = await stripe.confirmSetup({     //`Elements` instance that was used to create the Payment Element     elements,     confirmParams: {       return_url: '[https://example.com/account/payments/setup-complete](https://example.com/account/payments/setup-complete)',     }   });    if (error) {     // This point will only be reached if there is an immediate error when     // confirming the payment. Show error to your customer (for example, payment     // details incomplete)     const messageContainer = document.querySelector('#error-message');     messageContainer.textContent = error.message;   } else {     // Your customer will be redirected to your `return_url`. For some payment     // methods like iDEAL, your customer will be redirected to an intermediate     // site first to authorize the payment, then redirected to the `return_url`.   } });``\n\nMake sure the `return_url` corresponds to a page on your website that [provides the status](https://docs.stripe.com/payments/payment-intents/verifying-status) of the `SetupIntent`. Stripe provides the following URL query parameters to verify the status when we redirect the customer to the `return_url`. You can also append your own query parameters when providing the `return_url`, and they persist through the redirect process.\n\n| Parameter | Description |\n| --- | --- |\n| `setup_intent` | The unique identifier for the `SetupIntent`. |\n| `setup_intent_client_secret` | The [client secret](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-client_secret) of the `SetupIntent` object. |\n\nYou can use [stripe.retrieveSetupIntent](https://docs.stripe.com/js/setup_intents/retrieve_setup_intent) to retrieve the SetupIntent using the `setup_intent_client_secret` query parameter. Successful confirmation of the SetupIntent saves the resulting `PaymentMethod` ID (in `result.setupIntent.payment_method`) to the provided `Customer`.\n\n``// Initialize Stripe.js using your publishable key const stripe = Stripe('{PUBLISHABLE_KEY}');  // Retrieve the \"setup_intent_client_secret\" query parameter appended to // your return_url by Stripe.js const clientSecret = new URLSearchParams(window.location.search).get(   'setup_intent_client_secret' );  // Retrieve the SetupIntent stripe.retrieveSetupIntent(clientSecret).then(({setupIntent}) => {   const message = document.querySelector('#message')    // Inspect the SetupIntent `status` to indicate the status of the payment   // to your customer.   //   // Some payment methods will [immediately succeed or fail][0] upon   // confirmation, while others will first enter a `processing` state.   //   // [0]: [https://stripe.com/docs/payments/payment-methods#payment-notification](https://stripe.com/docs/payments/payment-methods#payment-notification)   switch (setupIntent.status) {     case 'succeeded': {       message.innerText = 'Success! Your payment method has been saved.';       break;     }      case 'processing': {       message.innerText = \"Processing payment details. We'll update you when processing is complete.\";       break;     }      case 'requires_payment_method': {       message.innerText = 'Failed to process payment details. Please try another payment method.';        // Redirect your user back to your payment page to attempt collecting       // payment again        break;     }   } });``\n\n#### Caution\n\nIf you have tooling that tracks the customer’s browser session, you might need to add the `stripe.com` domain to the referrer exclude list. Redirects cause some tools to create new sessions which prevents you from tracking the complete session.\n\n[](#charge-saved-payment-method)\n\n#### Compliance\n\nYou’re responsible for your compliance with all applicable laws, regulations, and network rules when saving a customer’s payment details. When rendering past payment methods to your end customer for future purchases, make sure you’re listing payment methods where you’ve collected consent from the customer to save the payment method details for this specific future use. To differentiate between payment methods attached to customers that can and can’t be presented to your end customer as a saved payment method for future purchases, use the [allow\\_redisplay](https://docs.stripe.com/api/payment_methods/object#payment_method_object-allow_redisplay) parameter.\n\nWhen you’re ready to charge your customer off-session, use the Customer and PaymentMethod IDs to create a PaymentIntent. To find a payment method to charge, list the payment methods associated with your customer. This example lists cards but you can list any supported [type](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type).\n\n`curl -G https://api.stripe.com/v1/payment_methods \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d customer=  {{CUSTOMER_ID}}   \\  -d type=card`\n\nWhen you have the Customer and PaymentMethod IDs, create a PaymentIntent with the amount and currency of the payment. Set a few other parameters to make the off-session payment:\n\n*   Set [off\\_session](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-off_session) to `true` to indicate that the customer isn’t in your checkout flow during a payment attempt and can’t fulfill an authentication request made by a partner, such as a card issuer, bank, or other payment institution. If, during your checkout flow, a partner requests authentication, Stripe requests exemptions using customer information from a previous on-session transaction. If the conditions for exemption aren’t met, the PaymentIntent might throw an error.\n*   Set the value of the PaymentIntent’s [confirm](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-confirm) property to `true`, which causes confirmation to occur immediately when the PaymentIntent is created.\n*   Set [payment\\_method](https://docs.stripe.com/api#create_payment_intent-payment_method) to the ID of the PaymentMethod and [customer](https://docs.stripe.com/api#create_payment_intent-customer) to the ID of the Customer.\n\n`curl https://api.stripe.com/v1/payment_intents \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n``: \\   -d amount=1099 \\   -d currency=usd \\   # In the latest version of the API, specifying the `automatic_payment_methods` parameter is optional because Stripe enables its functionality by default.   -d \"automatic_payment_methods[enabled]\"=true \\   -d customer=\"{{CUSTOMER_ID}}\" \\   -d payment_method=\"{{PAYMENT_METHOD_ID}}\" \\   -d return_url=\"https://example.com/order/123/complete\" \\   -d off_session=true \\   -d confirm=true``\n\nWhen a payment attempt fails, the request also fails with a 402 HTTP status code and the status of the PaymentIntent is [requires\\_payment\\_method](https://docs.stripe.com/upgrades#2019-02-11 \"requires_payment_method\"). You must notify your customer to return to your application to complete the payment (for example, by sending an email or in-app notification).\n\nCheck the code of the [error](https://docs.stripe.com/api/errors/handling) raised by the Stripe API library. If the payment failed due to an [authentication\\_required](https://docs.stripe.com/declines/codes) decline code, use the declined PaymentIntent’s client secret with confirmPayment to allow the customer to authenticate the payment.\n\n``const form = document.getElementById('payment-form');  form.addEventListener('submit', async (event) => {   event.preventDefault();    const {error} = await stripe.confirmPayment({     // The client secret of the PaymentIntent     clientSecret,     confirmParams: {       return_url: '[https://example.com/order/123/complete](https://example.com/order/123/complete)',     },   });    if (error) {     // This point will only be reached if there is an immediate error when     // confirming the payment. Show error to your customer (for example, payment     // details incomplete)     const messageContainer = document.querySelector('#error-message');     messageContainer.textContent = error.message;   } else {     // Your customer will be redirected to your `return_url`. For some payment     // methods like iDEAL, your customer will be redirected to an intermediate     // site first to authorize the payment, then redirected to the `return_url`.   } });``\n\n#### Note\n\n`stripe.confirmPayment` can take several seconds to complete. During that time, disable your form from being resubmitted and show a waiting indicator like a spinner. If you receive an error, show it to the customer, re-enable the form, and hide the waiting indicator. If the customer must perform additional steps to complete the payment, such as authentication, Stripe.js walks them through that process.\n\nIf the payment failed for other reasons, such as insufficient funds, send your customer to a payment page to enter a new payment method. You can reuse the existing PaymentIntent to attempt the payment again with the new payment details.\n\n[](#test-the-integration)\n\nUse test payment details and the test redirect page to verify your integration. Click the tabs below to view details for each payment method.\n\n| Payment method | Scenario | How to test |\n| --- | --- | --- |\n| Credit card | The card setup succeeds and doesn’t require [authentication](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\"). | Fill out the credit card form using the credit card number `4242 4242 4242 4242` with any expiration, CVC, and postal code. |\n| Credit card | The card requires authentication for the initial setup, then succeeds for subsequent payments. | Fill out the credit card form using the credit card number `4000 0025 0000 3155` with any expiration, CVC, and postal code. |\n| Credit card | The card requires authentication for the initial setup and also requires authentication for subsequent payments. | Fill out the credit card form using the credit card number `4000 0027 6000 3184` with any expiration, CVC, and postal code. |\n| Credit card | The card is declined during setup. | Fill out the credit card form using the credit card number `4000 0000 0000 9995` with any expiration, CVC, and postal code. |\n\n### Test charging a saved SEPA Debit PaymentMethod![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConfirming the SetupIntent using iDEAL, Bancontact, or Sofort, generates a [SEPA Direct Debit](https://docs.stripe.com/payments/sepa-debit) [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\"). SEPA Direct Debit is a [delayed notification](https://docs.stripe.com/payments/payment-methods#payment-notification) payment method that transitions to an intermediate `processing` state before transitioning several days later to a `succeeded` or `requires_payment_method` state.\n\nSet `payment_method.billing_details.email` to one of the following values to test the PaymentIntent status transitions. You can include your own custom text at the beginning of the email address followed by an underscore. For example, `test_1_generatedSepaDebitIntentsFail@example.com` results in a SEPA Direct Debit PaymentMethod that always fails when used with a PaymentIntent.\n\n| Email Address | Description |\n| --- | --- |\n| `generatedSepaDebitIntentsSucceed@example.com` | The PaymentIntent status transitions from `processing` to `succeeded`. |\n| `generatedSepaDebitIntentsSucceedDelayed@example.com` | The PaymentIntent status transitions from `processing` to `succeeded` after three minutes. |\n| `generatedSepaDebitIntentsFail@example.com` | The PaymentIntent status transitions from `processing` to `requires_payment_method`. |\n| `generatedSepaDebitIntentsFailDelayed@example.com` | The PaymentIntent status transitions from `processing` to `requires_payment_method` after three minutes. |\n| `generatedSepaDebitIntentsSucceedDisputed@example.com` | The PaymentIntent status transitions from `processing` to `succeeded`, but a dispute is created immediately. |\n\n[](#disclose-cookies)\n\nStripe collects information on customer interactions with Elements to provide services to you, prevent fraud, and improve its services. This includes using cookies and IP addresses to identify which Elements a customer saw during a single checkout session. You’re responsible for disclosing and obtaining all rights and consents necessary for Stripe to use data in these ways. For more information, visit our [privacy center](https://stripe.com/legal/privacy-center#as-a-business-user-what-notice-do-i-provide-to-my-end-customers-about-stripe).\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Accept a payment](https://docs.stripe.com/payments/accept-a-payment)\n*   [Save payment details during payment](https://docs.stripe.com/payments/save-during-payment)\n*   [The Elements Appearance API](https://docs.stripe.com/elements/appearance-api)\n*   [Optimizing your Radar Integration](https://docs.stripe.com/radar/integration)",
  "title": "Set up future payments | Stripe Documentation",
  "description": "Learn how to save payment details and charge your customers later.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/payment-methods/transitioning",
  "markdown": "# Transition to the Payment Intents and Payment Methods APIs\n\n## Learn how to transition from the Sources and Tokens APIs to the Payment Methods API.\n\nThe [Payment Methods API](https://docs.stripe.com/api/payment_methods) replaces the existing [Tokens](https://docs.stripe.com/api/tokens) and [Sources](https://docs.stripe.com/api/sources) APIs as the recommended way for integrations to collect and store payment information. It works with the [Payment Intents API](https://docs.stripe.com/payments/payment-intents) to create payments for a wide range of payment methods.\n\nWe plan to turn off Sources API support for local payment methods. If you currently handle any local payment methods using the Sources API, you must [migrate them to the Payment Methods API](#migrate-local-payment-methods). We’ll send email communication with more information about the end of support for the Sources and Tokens APIs.\n\nWhile we don’t plan to turn off support for card payment methods, we still recommend that you migrate them to the Payment Methods and Payment Intents APIs. For more information about migrating card payment methods, see [Migrating to the Payment Intents API](https://docs.stripe.com/payments/payment-intents/migration).\n\n## Migrate local payment methods from the Sources API to the Payment Intents API ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo migrate your integration for local payment methods, update your server and front end to use the [PaymentIntents API](https://docs.stripe.com/api/payment_intents). There are three typical integration options:\n\n*   Redirect to [Stripe Checkout](https://docs.stripe.com/payments/checkout) for your payment flow.\n*   Use the Stripe [Payment Element](https://docs.stripe.com/payments/payment-element) on your own payment page.\n*   Build your own form and use the Stripe JS SDK to complete the payment.\n\nIf you use Stripe Checkout or the Payment Element, you can add and manage most payment methods from the Stripe Dashboard without making code changes.\n\nFor specific information about integrating a local payment method using the Payment Methods API, see the instructions for that payment method in [the payment methods documentation](https://docs.stripe.com/payments/payment-methods/overview). The following table provides a high-level comparison of the different payment types.\n\n| Old integration | Stripe Checkout | Payment Element | Own form |\n| --- | --- | --- | --- |\n|     | Low complexity | Medium complexity | High complexity |\n| Create a Source on the front end or on the server | Create a Checkout Session on the server | Create a PaymentIntent on the server | Create a PaymentIntent on the server |\n| Authorize payment by loading a widget or redirecting to a third party | Not needed | Pass the client secret to the front end and use the Stripe JS SDK to render a Payment Element to complete the payment | Pass the client secret to the front end, use your own form to collect details from your customer, and complete the payment according to the payment method |\n| Confirm the source is chargeable and charge the Source | Not needed | Not needed | Not needed |\n| Confirm the Charge succeeded asynchronously with the `charge.succeeded` webhook | Confirm the Checkout session succeeded with the `payment_intent.succeeded` webhook | Confirm the PaymentIntent succeeded with the `payment_intent.succeeded` webhook | Confirm the PaymentIntent succeeded with the `payment_intent.succeeded` webhook |\n\n#### Caution\n\nA PaymentIntent object represents a payment in the new integration, and it creates a Charge when you confirm the payment on the front end. If you previously stored references to the Charge, you can continue to do so by fetching the Charge ID from the PaymentIntent after the customer completes the payment. However, we also recommend that you store the PaymentIntent ID.\n\n### Checking payment status![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPreviously, your integration should have checked both the status of the Source and the status of the Charge after each API call. You no longer need to check two statuses—you only need to check the status of the PaymentIntent or the Checkout Session after you confirm it on the front end.\n\n| payment\\_intent.status | Meaning | Special instructions |\n| --- | --- | --- |\n| `succeeded` | The payment succeeded. | Not applicable |\n| `requires_payment_method` | The payment failed. | Not applicable |\n| `requires_action` | The customer hasn’t completed authorizing the payment. | If the customer doesn’t complete the payment within 48 hours, then the PaymentIntent transitions to `requires_payment_method` and you can retry the confirmation. |\n\nAlways confirm the status of the PaymentIntent by fetching it on your server or listening for the webhooks on your server. Don’t rely solely on the user returning to the `return_url` that’s provided when you confirm the PaymentIntent.\n\n### Refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can continue to call the Refunds API with a Charge that the PaymentIntent creates. The ID of the Charge is accessible on the `latest_charge` parameter.\n\nAlternatively, you can provide the PaymentIntent ID to the Refunds API instead of the Charge.\n\n### Error handling![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPreviously, you had to handle errors on the Sources. With PaymentIntents, instead of checking for errors on a Source, you check for errors on the PaymentIntent when it’s created and after the customer has authorized the payment. Most errors on the PaymentIntent are of `invalid_request_error` type, returned in an invalid request.\n\nWhen you migrate your integration, keep in mind that PaymentIntent error codes can differ from the corresponding error codes for Sources.\n\n### Webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you previously listened to Source events, you might need to update your integration to listen to new event types. The following table shows some examples.\n\n| Old webhook | New webhook on Checkout | New webhook on PaymentIntents | Special instructions |\n| --- | --- | --- | --- |\n| `source.chargeable` | Not applicable | Not applicable |     |\n| `source.failed` | Not applicable | Not applicable |     |\n| `source.canceled` | Not applicable | Not applicable |     |\n| `charge.succeeded` | `checkout.session.completed` | `payment_intent.succeeded` | The `charge.succeeded` webhook is also sent, so you don’t have to update your integration to listen to the new webhook. |\n| `charge.failed` | Not applicable - The customer can re-attempt the payment on the same Checkout Session until it [expires](https://docs.stripe.com/api/checkout/sessions/create#create_checkout_session-expires_at), at which point you receive a `checkout.session.expired` event. | `payment_intent.payment_failed` | The `charge.failed` webhook is also sent, so you don’t have to update your integration to listen to the new webhook. |\n| `charge.dispute.created` | `charge.dispute.created` | `charge.dispute.created` |     |\n\n## Transitioning to the Payment Methods API ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe main difference between the Payment Methods and Sources APIs is that Sources describes the transaction state through the [status](https://docs.stripe.com/api/sources/object#source_object-status) property. That means that each `Source` object must transition to a chargeable state before you can use it for a payment. By contrast, a `PaymentMethod` is stateless, relying on the [PaymentIntent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") object to represent payment state.\n\n#### Note\n\nThe following table isn’t a comprehensive list of payment methods. If you integrate other payment methods with the Sources API, migrate them to the Payment Methods API as well.\n\nAfter you choose the API to integrate with, use the [guide to payment methods](https://stripe.com/payments/payment-methods-guide) to help you determine the right payment method types you need to support.\n\nThis guide includes detailed descriptions of each payment method and describes the differences in the customer-facing flows, along with the [geographic regions](https://stripe.com/payments/payment-methods-guide#payment-methods-fact-sheets) where they’re most relevant. You can enable any payment method available to you within the [Dashboard](https://dashboard.stripe.com/account/payments/settings). Activation is generally instantaneous and doesn’t require additional contracts.\n\n## Compatibility with legacy reusable payment methods ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you previously processed any of the following reusable payment methods using [Sources](https://docs.stripe.com/sources), the existing saved sources don’t migrate automatically:\n\n*   Alipay\n*   Bacs Direct Debit\n*   SEPA Direct Debit\n\nTo preserve your existing customers’ saved payment methods, you must convert those sources to payment methods using a data migration tool in the Stripe Dashboard. For instructions on how to convert them, see [the support page](https://support.stripe.com/questions/reusable-object-migration).\n\n## Compatibility with legacy card objects ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you previously collected card customer payment details with Stripe using [cards](https://docs.stripe.com/saving-cards) or [Sources](https://docs.stripe.com/sources), you can start using the Payment Methods API immediately without migrating any payment information.\n\nCompatible payment instruments that have been saved to a [Customer](https://docs.stripe.com/api/customers \"Customers\") are usable in any API that accepts a [PaymentMethod](https://docs.stripe.com/api/payment_methods \"PaymentMethods\") object. For example, you can use a saved card as a PaymentMethod when creating a PaymentIntent:\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"payment_method_types[]\"=card \\  -d amount=1099 \\  -d currency=usd \\  -d customer=  {{CUSTOMER_ID}}   \\  -d payment_method=  {{CARD_ID}}    `\n\nRemember to provide the customer ID that your compatible payment instrument is saved to when attaching the object to a PaymentIntent.\n\nYou can [retrieve](https://docs.stripe.com/api/payment_methods/retrieve) all saved compatible payment instruments through the Payment Methods API.\n\n`{   \"id\": \"card_1EBXBSDuWL9wT9brGOaALeD2\",   \"object\": \"card\",   \"address_city\": \"San Francisco\",   \"address_country\": \"US\",   \"address_line1\": \"1234 Fake Street\",   \"address_line1_check\": null,   \"address_line2\": null,   \"address_state\": null,   \"address_zip\": null,`\n\n`{   \"id\": \"card_1EBXBSDuWL9wT9brGOaALeD2\",   \"object\": \"payment_method\",   \"billing_details\": {     \"address\": {       \"city\": \"San Francisco\",       \"country\": \"US\",       \"line1\": \"1234 Fake Street\",       \"line2\": null,       \"postal_code\": null,`\n\nWith this compatibility, no new objects are created; the Payment Methods API provides a different view of the same underlying object. For example, updates to a compatible payment instrument through the Payment Methods API is visible through the Sources API, and vice versa.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Guide to payment methods](https://stripe.com/payments/payment-methods-guide)\n*   [Connect platforms using the Payment Methods API](https://docs.stripe.com/payments/payment-methods/connect)\n*   [Payment Methods API reference](https://docs.stripe.com/api/payment_methods)",
  "title": "Transition to the Payment Intents and Payment Methods APIs | Stripe Documentation",
  "description": "Learn how to transition from the Sources and Tokens APIs to the Payment Methods API.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/3d-secure/strong-customer-authentication-exemptions",
  "markdown": "# Strong Customer Authentication (SCA) exemptions\n\n## Use SCA exemptions and Data Only to reduce cardholder friction on eligible transactions.\n\n**Applicability:** EEA, Switzerland, and UK\n\nStripe’s Authentication Engine requests applicable [SCA exemptions](https://stripe.com/guides/strong-customer-authentication#exemptions-to-strong-customer-authentication) on your behalf to reduce cardholder friction, while meeting [SCA requirements](https://docs.stripe.com/strong-customer-authentication). Users of [Adaptive Acceptance](https://stripe.com/in/payments/authorization) get access to a premium Authentication Engine that further enhances performance using machine learning, which includes Transaction Risk Analysis (TRA) exemptions up to 440 GBP (beta for select users) and Data Only flows.\n\n#### Note\n\nWhen the customer’s bank approves an exemption request, liability shift for fraudulent transactions doesn’t apply.\n\nStripe’s Authentication Engine currently supports the following SCA exemptions:\n\n| SCA Exemption | Description |\n| --- | --- |\n| Low Value | Applies to transaction amounts less than 30 EUR (25 GBP). However, SCA might still be required by the issuer for low value transactions when either of the following scenarios are met:<br><br>*   The cumulative amount for transactions initiated by the cardholder since SCA was last performed exceeds 100 EUR (85 GBP).<br>*   The cardholder has initiated five transactions since SCA was last performed. |\n| Transaction Risk Analysis (TRA) or Low Risk Exemption | A payment provider (such as Stripe) can perform real-time risk analysis to determine whether a transaction warrants SCA. This permission is subject to the payment provider’s overall fraud rates for card payments in relevant markets staying below the following thresholds:<br><br>*   0.13% to exempt transactions up to 100 EUR (85 GBP)<br>*   0.06% to exempt transactions up to 250 EUR (220 GBP)<br>*   0.01% to exempt transactions up to 500 EUR (440 GBP)<br><br>Local equivalent amounts for these thresholds apply where relevant. See [Stripe’s current threshold limits for TRA](#stripe-tra-limits) for more on Stripe’s current TRA exemption availability. |\n| Merchant-initiated transactions (including variable subscriptions) | Payments made with saved cards when the customer isn’t present in the checkout flow (sometimes called “off-session”) might qualify as merchant-initiated transactions (MITs). These payments technically fall outside the scope of SCA. In practice, marking a payment as MIT is similar to requesting an exemption; neither a customer challenge nor a liability shift occurs. To use merchant-initiated transactions, you authenticate the card when it’s being saved. You must also secure agreement from the customer (through a mandate) to charge their card at a later point. The [Stripe API](https://docs.stripe.com/payments/more-payment-scenarios) lets you authenticate a card when it’s being saved for later use and mark subsequent payments as MITs. |\n\n## Stripe’s Transaction Risk Analysis (TRA) limits ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe’s Authentication Engine uses comprehensive, real-time risk assessment that allows us to support this exemption for our users. The exemption limit available for you depends on Stripe’s overall fraud rates and your access to Stripe’s authentication offerings, including [Adaptive Acceptance](https://stripe.com/in/payments/authorization). Currently:\n\n*   UK and Swiss merchants have access to TRA exemptions for qualifying low risk transactions up to 220 GBP.\n*   EEA merchants have access to TRA exemptions for qualifying low risk transactions up to 250 EUR.\n*   Beta Certain eligible UK merchants that have access to [Adaptive Acceptance](https://stripe.com/in/payments/authorization) and meet Stripe’s fraud criteria can participate in our limited TRA exemptions beta program for qualifying low risk transactions up to 440 GBP. To determine your eligibility, [contact sales](https://stripe.com/contact/sales).\n\n## Data Only ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nData Only is a form of authentication supported by some card schemes that leverages 3D Secure (3DS) data. The Data Only flow sends the authentication request to the card network, who includes its own risk data in the authorization message, before sending it to the issuer. Successful Data Only requests offer a frictionless experience that improves approval rates for payments that aren’t subject to SCA.\n\n#### Note\n\nBecause we don’t send an authentication request to the issuer in a Data Only flow, no liability shift occurs for the business.\n\nThe standard Data Only flow requires 3DS version 2.2 or later. Mastercard has its own Data Only product, Mastercard Identity Check Insights, which Stripe currently offers to [Adaptive Acceptance](https://stripe.com/in/payments/authorization) users in EEA and UK only. Instead of sending a transaction straight to authorization, Stripe’s ML-based Authentication Engine uses the Data Only flow to improve conversion or optimize costs for certain transactions. Handling these requests requires no further action from businesses.",
  "title": "Strong Customer Authentication (SCA) exemptions | Stripe Documentation",
  "description": "Use SCA exemptions and Data Only to reduce cardholder friction on eligible transactions.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/payment-intents/three-d-secure-import",
  "markdown": "# Import 3D Secure results | Stripe DocumentationThe Stripe Docs logo\n\n## Process payments when 3D Secure runs outside of Stripe.\n\nImporting 3D Secure results is an advanced payment flow that allows you to incorporate your external 3D Secure authentication into your Stripe payment by importing the authentication result. You need to import 3D Secure results if you:\n\n*   Are in the travel industry and receive card numbers and cryptograms from a travel aggregator, such as Expedia or Sabre\n*   Use a third-party provider to perform 3D Secure\n\nIn these situations, you can pass the card details and cryptogram directly to the Payment Intents API instead of using Stripe Elements to collect payment details and run 3D Secure.\n\n### Available in:![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAustralia\n\nCanada\n\nEU\n\nHong Kong\n\nMexico\n\nNew Zealand\n\nSingapore\n\nSwitzerland\n\nUnited Kingdom\n\nUnited States\n\nBeta All other countries in which Stripe supports card payments.\n\n### Not Available in:![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Process a payment with card details ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you handle card details on your server:\n\n1.  Create and confirm a PaymentIntent with the card details and 3D Secure details in one API call.\n2.  When creating the PaymentIntent, set [confirm](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-confirm) to `true`.\n3.  Set [error\\_on\\_requires\\_action](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-error_on_requires_action) to `true` when you confirm the PaymentIntent to prevent Stripe from performing a 3DS request during a soft decline.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=2000 \\  -d currency=eur \\  -d \"payment_method_types[]\"=card \\  -d \"payment_method_data[type]\"=card \\  -d \"payment_method_data[card][number]\"=4000002760003184 \\  -d \"payment_method_data[card][exp_month]\"=12 \\  -d \"payment_method_data[card][exp_year]\"=23 \\  -d \"payment_method_data[card][cvc]\"=123 \\  -d \"payment_method_options[card][three_d_secure][version]\"=\"2.1.0\" \\  -d \"payment_method_options[card][three_d_secure][electronic_commerce_indicator]\"=05 \\   --data-urlencode \"payment_method_options[card][three_d_secure][cryptogram]\"=\"CJSJbzXT6TRQlvZDX+ZdOG4QriE=\" \\   -d \"payment_method_options[card][three_d_secure][transaction_id]\"=aaa65c7b-b0fc-4e71-bd6c-29c87acad489 \\  -d confirm=true \\  -d error_on_requires_action=true`\n\n## Process a payment with a PaymentMethod ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you tokenize card details with the [Payment Methods API](https://docs.stripe.com/api/payment_methods):\n\n1.  Create and confirm a PaymentIntent with the PaymentMethod ID and 3D Secure details in one API call.\n2.  When creating the PaymentIntent, set [confirm](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-confirm) to `true`.\n3.  Set [error\\_on\\_requires\\_action](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-error_on_requires_action) to `true` when you confirm the PaymentIntent to prevent Stripe from performing a 3DS request during a soft decline.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=2000 \\  -d currency=eur \\  -d \"payment_method_types[]\"=card \\  -d customer=  {{CUSTOMER_ID}}   \\  -d payment_method=  {{PAYMENT_METHOD_ID}}   \\  -d \"payment_method_options[card][three_d_secure][version]\"=\"2.2.0\" \\  -d \"payment_method_options[card][three_d_secure][electronic_commerce_indicator]\"=02 \\   --data-urlencode \"payment_method_options[card][three_d_secure][cryptogram]\"=\"M6+990I6FLD8Y6rZz9d5QbfrMNY=\" \\   -d \"payment_method_options[card][three_d_secure][transaction_id]\"=f879ea1c-aa2c-4441-806d-e30406466d79 \\  -d confirm=true \\  -d error_on_requires_action=true`\n\n#### Caution\n\nIf you intend to process a payment with a PaymentMethod shortly after tokenizing the card details, use raw card data instead.\n\n## Set up future payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe 3DS protocol supports two message categories:\n\n*   **Payment Authentication**: used for authenticating cardholders during transactions.\n*   **Non-Payment Authentication**: used for identity verification and account confirmation.\n\nIf you want to onboard customers for future payments, include the non-payment authentication cryptogram and either the card details or PaymentMethod ID when creating and confirming a [SetupIntent](https://docs.stripe.com/api/setup_intents).\n\n`curl https://api.stripe.com/v1/setup_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d \"payment_method_types[]\"=card \\  -d customer=  {{CUSTOMER_ID}}   \\  -d payment_method=  {{PAYMENT_METHOD_ID}}   \\  -d \"payment_method_options[card][three_d_secure][version]\"=\"2.2.0\" \\  -d \"payment_method_options[card][three_d_secure][electronic_commerce_indicator]\"=05 \\   --data-urlencode \"payment_method_options[card][three_d_secure][cryptogram]\"=4BQwsg4yuKt0S1LI1nDZTcO9vUM= \\  -d \"payment_method_options[card][three_d_secure][transaction_id]\"=f879ea1c-aa2c-4441-806d-e30406466d79 \\  -d confirm=true \\  -d \"expand[]\"=latest_attempt`\n\n## Import 3DS exempted outcomes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you obtain a 3D Secure result outside of Stripe that contains a ‘low-risk’ [SCA](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") exemption, you can flag the exemption-based nature of the 3D Secure result to Stripe by using the [exemption\\_indicator](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-card-three_d_secure-exemption_indicator) parameter.\n\nIf Stripe’s real-time transaction risk analysis determines that it’s appropriate, Stripe requests the [low-risk exemption](https://stripe.com/guides/strong-customer-authentication#low-risk-transactions) from the issuer and communicates this action to you by returning [exemption\\_indicator\\_applied](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-three_d_secure-exemption_indicator_applied) in to the authorization request response.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=2000 \\  -d currency=eur \\  -d \"payment_method_types[]\"=card \\  -d payment_method=  {{PAYMENT_METHOD_ID}}   \\  -d \"payment_method_options[card][three_d_secure][version]\"=\"2.2.0\" \\  -d \"payment_method_options[card][three_d_secure][electronic_commerce_indicator]\"=07 \\   --data-urlencode \"payment_method_options[card][three_d_secure][cryptogram]\"=\"CJSJbzXT6TRQlvZDX+ZdOG4QriE=\" \\   -d \"payment_method_options[card][three_d_secure][transaction_id]\"=aaa65c7b-b0fc-4e71-bd6c-29c87acad489 \\  -d \"payment_method_options[card][three_d_secure][exemption_indicator]\"=low_risk \\  -d confirm=true \\  -d error_on_requires_action=true \\  -d \"expand[]\"=latest_charge`\n\nTo see whether Stripe requested the low-risk exemption, [expand](https://docs.stripe.com/api/expanding_objects) the `latest_charge` and inspect the [three\\_d\\_secure](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-three_d_secure) attribute.\n\n`{     \"id\": \"pi_3aTnU0Aif3fLhNTb0le1BSXI\",     \"object\": \"payment_intent\",     // ...     \"latest_charge\": {         \"id\": \"ch_3aTnU1AifffLhNTb0tUoEZcd\",         \"object\": \"charge\",         // ...         \"payment_method_details\": {             \"card\": {`\n\n## Importing Cartes Bancaires outcomes ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo use 3DS import for transactions that process on the Cartes Bancaires network, you need to explicitly pass the authenticated network in your request using the [network](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-card-network) parameter.\n\nTo import Cartes Bancaires cryptograms, you also need additional data from your external 3DS server. The table below specifies the details of these additional required and recommended fields.\n\n| Field | Description | Optionality |\n| --- | --- | --- |\n| [electronic\\_commerce\\_indicator](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-card-three_d_secure-electronic_commerce_indicator) | The Electronic Commerce Indicator (ECI) is returned by your 3D Secure provider and indicates what degree of authentication was performed. | Optional. Include this if it’s available. |\n| [cb\\_avalgo](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-card-three_d_secure-network_options-cartes_bancaires-cb_avalgo) | The cryptogram calculation algorithm used by the card Issuer’s ACS to calculate the Authentication cryptogram. Also known as cavvAlgorithm.<br><br>ARes/RReq messageExtension: `CB-AVALGO` | Required. |\n| [cb\\_exemption](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-card-three_d_secure-network_options-cartes_bancaires-cb_exemption) | The exemption indicator returned from Cartes Bancaires in the ARes. This is a 3 byte bitmap (lowest significant byte first and most significant bit first) that has been Base64 encoded. String (4 characters).<br><br>ARes message extension: `CB-EXEMPTION` | Optional. Include this if it’s available. |\n| [cb\\_score](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-card-three_d_secure-network_options-cartes_bancaires-cb_score) | The risk score returned from Cartes Bancaires in the ARes. Numeric value 0-99.<br><br>ARes/RReq message extension: `CB-SCORE` | Optional. Include this if it’s available. |\n| [ares\\_trans\\_status](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-card-three_d_secure-ares_trans_status) | The `transStatus` returned from the card Issuer’s ACS in the ARes. | Optional. Include this if it’s available. |\n| [requestor\\_challenge\\_indicator](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-card-three_d_secure-requestor_challenge_indicator) | The challenge indicator (`threeDSRequestorChallengeInd`) which was requested in the AReq sent to the card Issuer’s ACS. A string containing 2 digits from 01-99. | Optional. Include this if it’s available. |\n\nProvide as many of these additional fields as possible to increase the chances of a successful authorization.\n\n`curl https://api.stripe.com/v1/payment_intents \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d amount=2000 \\  -d currency=eur \\  -d \"payment_method_types[]\"=card \\  -d payment_method=  {{PAYMENT_METHOD_ID}}   \\  -d \"payment_method_options[card][network]\"=cartes_bancaires \\  -d \"payment_method_options[card][three_d_secure][version]\"=\"2.2.0\" \\  -d \"payment_method_options[card][three_d_secure][electronic_commerce_indicator]\"=05 \\   --data-urlencode \"payment_method_options[card][three_d_secure][cryptogram]\"=\"CJSJbzXT6TRQlvZDX+ZdOG4QriE=\" \\   -d \"payment_method_options[card][three_d_secure][transaction_id]\"=aaa65c7b-b0fc-4e71-bd6c-29c87acad489 \\  -d \"payment_method_options[card][three_d_secure][requestor_challenge_indicator]\"=02 \\  -d \"payment_method_options[card][three_d_secure][ares_trans_status]\"=Y \\  -d \"payment_method_options[card][three_d_secure][network_options][cartes_bancaires][cb_avalgo]\"=1 \\  -d \"payment_method_options[card][three_d_secure][network_options][cartes_bancaires][cb_score]\"=9 \\  -d \"payment_method_options[card][three_d_secure][network_options][cartes_bancaires][cb_exemption]\"=BAAA \\  -d confirm=true \\  -d error_on_requires_action=true`\n\n### Exemptions with Cartes Bancaires![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you have been granted an [SCA](https://docs.stripe.com/strong-customer-authentication \"Strong Customer Authentication\") exemption over 3DS, you must submit either the `cb_exemption` parameter, the `exemption_indicator` parameter, or both. If either of these parameters indicates that the exemption is low risk due to acquirer transaction risk analysis, Stripe reassesses the transaction, as described in [Import 3DS exempted outcomes](#import-exempted-outcomes).\n\n*   If you have access to `cb_exemption`, pass that value and don’t populate `exemption_indicator`. Stripe infers the appropriate exemption indicator based on `cb_exemption`.\n*   If you pass both the `cb_exemption` parameter and `exemption_indicator` parameter, make sure that they both correctly indicate the exempted status.\n*   If there’s a mismatch where `exemption_indicator=none` and the bitmap in `cb_exemption` indicates that the applied exemption is a low risk exemption, Stripe rejects the request.\n\n## Testing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can validate your integration in test mode using either the authentication required test card: `4000 0027 6000 3184` or `pm_card_authenticationRequired`.\n\nThe simulation accepts any correctly-formatted 3D Secure result. For example:\n\n*   Version: `2.1.0`\n*   Electronic Commerce Indicator: `02`\n*   Cryptogram: `M6+990I6FLD8Y6rZz9d5QbfrMNY=`\n*   Transaction ID: `5f5d08f2-8c36-4f72-99d1-57b4fb70b7d5`\n\nOr:\n\n*   Version: `2.2.0`\n*   Electronic Commerce Indicator: `05`\n*   Cryptogram: `4BQwsg4yuKt0S1LI1nDZTcO9vUM=`\n*   Transaction ID: `f879ea1c-aa2c-4441-806d-e30406466d79`\n\n### Exemptions granted through 3DS![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn test mode, all cards that include `exemption_indicator` return `exemption_indicator_applied` as true. To test a PaymentIntent creation that doesn’t pass the internal TRA check, and that returns false, use card number `4000 0000 0001 6123` and set `exemption_indicator=low_risk`.\n\n### Cartes Bancaires![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use the following co-badged cards to test importing Cartes Bancaires outcomes:\n\n| Number | Brand | CVC | Date |\n| --- | --- | --- | --- |\n|     | Cartes Bancaires / Visa | Any 3 digits | Any future date |\n|     | Cartes Bancaires / Mastercard | Any 3 digits | Any future date |\n|     | Cartes Bancaires / Visa | Any 3 digits | Any future date |\n\nYou can use any valid `cb_exemption` value in your tests. For example:\n\n*   `AAAA` - No exemption granted\n*   `BAAA` - Low risk exemption granted\n\nLike [the standard exemptions flow](#exemptions-granted-through-3ds), when the value of `cb_exemption` corresponds to low risk, only the test card `4000 0000 0001 6123` returns false for [exemption\\_indicator\\_applied](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-three_d_secure-exemption_indicator_applied).\n\n## Raw PAN usage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe requires users to validate that cardholder data is handled securely and in compliance with the Payment Card Industry Data Security Standard (PCI DSS) before granting access to raw card data APIs.\n\nFor businesses that require this functionality, Stripe imposes stringent requirements, including:\n\n*   Validation of PCI DSS compliance\n*   Submission to Stripe’s rigorous review process\n*   Agreement to maintain additional controls on top of Stripe’s default security settings\n\nSee [Enabling access to raw card data APIs](https://support.stripe.com/questions/enabling-access-to-raw-card-data-apis) support article for enablement details.\n\n#### Note\n\nFor accounts with custom pricing, if you specify Stripe as your acquirer in the 3D Secure request, Stripe passes network costs applicable to 3D Secure through, per your agreement with Stripe.",
  "title": "Import 3D Secure results | Stripe Documentation",
  "description": "Process payments when 3D Secure runs outside of Stripe.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/disputes/withdrawing",
  "markdown": "# Dispute withdrawals | Stripe DocumentationThe Stripe Docs logo\n\n## Learn what to do when a cardholder withdraws their payment dispute.\n\nThe most effective dispute strategy for your business is to [reduce the number of disputes](https://docs.stripe.com/disputes/prevention) it receives in the first place.\n\nIf you do receive a dispute, the most effective way to proceed is to work directly with your customer to resolve the issue.\n\nEvery card network has some provision in its dispute system for the cardholder to retract a dispute after filing it. If you can settle the matter amicably with your customer, and convince them to withdraw the dispute, that’s the best way to win it.\n\n## What is a withdrawn dispute![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA withdrawn dispute is one that your customer has asked their card issuer to cancel. It isn’t _necessarily_ a won dispute, as the dispute might still resolve as a loss if you haven’t submitted evidence.\n\nA withdrawn dispute is otherwise no different from any other dispute.\n\n*   It doesn’t resolve as a win or loss more quickly than other disputes.\n*   It doesn’t show up differently from any other dispute in the Dashboard or API.\n*   It still counts against your [dispute rate](https://docs.stripe.com/disputes/measuring) with the network.\n\nCardholders can only withdraw fully financial disputes—that is, a chargeback, where your account balance has been debited. They can’t withdraw an [Early Fraud Warning](https://docs.stripe.com/disputes/how-disputes-work#early-fraud-warnings) or an [inquiry](https://docs.stripe.com/disputes/how-disputes-work#inquiries), which don’t have financial impact. The cardholder might decline to escalate these, but can’t undo them.\n\n## Assessing the value of pursuing a dispute withdrawal![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAlthough a dispute withdrawal is a good way to turn a dispute into a win, and a way to resolve a negative experience for your customer, it also requires some effort to initiate and complete an interaction with your customer. It might not be the most cost efficient approach for every dispute, and you’ll have to weigh the increased operational burden against the lift it gives your dispute win rate.\n\nFor disputes with a [high likelihood of winning](https://docs.stripe.com/disputes/best-practices#likelihood-of-winning-disputes), you might want to only submit evidence to fight it, without reaching out to your customer. For low value disputes you might want to go ahead and [accept the dispute](https://docs.stripe.com/disputes/responding#decide).\n\n## Talk to your customer![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nReach out to your customer to better understand their complaint, and try to work through the problem with them. If you’re able to satisfy the customer, ask them to reach out to their card issuer and withdraw the dispute. The process for this varies by issuer, but in general the customer should use whatever normal support channels they use to get help from their issuer.\n\nIf your customer does agree to withdraw the dispute, consider asking them whether they would provide confirmation of the withdrawal, such as a withdrawal-confirmation email from their bank or a screenshot of their mobile banking statement showing they were re-billed for the charge. This type of evidence isn’t required for your response to the issuer, but it could be helpful if your customer is willing to do it.\n\n#### Warning\n\nIf part of the resolution with your customer involves an agreement that you will issue a refund to them, be aware that it might be weeks or even months before you’re able to issue one. Your customer withdrawing the dispute doesn’t necessarily speed up their issuer’s dispute timeline. You [can’t issue a refund](https://docs.stripe.com/disputes/how-disputes-work#receiving-a-dispute) on a disputed charge until your customer’s card issuer returns a win on the dispute.\n\n## Submit evidence![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRegardless of what happens between you and your customer, you still need to [submit evidence](https://docs.stripe.com/disputes/responding#respond) if you want to win the dispute.\n\n#### Warning\n\nAlways provide evidence for every dispute you hope to have resolved in your favor, even if your customer told you they’re withdrawing the dispute. Many card issuers treat failure to submit evidence as an acceptance of liability on your part. This means that even if the customer did withdraw the dispute with their issuer, you can still lose the dispute if you don’t submit evidence.\n\nYou can submit evidence for a dispute just one time, so you want to wait long enough for your conversation with the customer to play out, but not so long that you miss the deadline. The card network rules don’t allow you to submit evidence after the deadline.\n\nIf you can’t convince the customer to withdraw the dispute before the evidence deadline, that’s okay. You should still file [appropriate evidence](https://docs.stripe.com/disputes/categories) to challenge the dispute reason.\n\n## Wait for the dispute resolution![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn general, disputes that have been withdrawn don’t resolve any faster than other kinds of dispute.\n\nAfter your customer withdraws a dispute, and you submit evidence, you can expect that the dispute will still follow the [normal dispute timeline](https://docs.stripe.com/disputes/how-disputes-work#timing) to come back with a win or loss from the network.\n\n## Late withdrawal of dispute![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIt’s technically possible on every card network for a cardholder to withdraw a dispute after the response deadline, and even long after a dispute itself is lost. However, some card issuers within that network might not support the late withdrawal of a dispute in every case. As with any other dispute, the cardholder needs to reach out to their issuer to request a late withdrawal and find out whether or not they allow it.\n\nKeep in mind that late withdrawals often happen _outside_ the networks’ dispute systems. Unlike with the regular dispute lifecycle, they aren’t governed by any network rules or regulations. Consequently when a customer withdraws an old, lost dispute, it’s hard to set a realistic expectation for how soon you can expect to see it reflected in your Stripe account. It’s possible it could take the cardholder’s issuer weeks or months to process this type of adjustment.",
  "title": "Dispute withdrawals | Stripe Documentation",
  "description": "Learn what to do when a cardholder withdraws their payment dispute.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/3d-secure/authentication-flow",
  "markdown": "# Authenticate with 3D Secure | Stripe DocumentationThe Stripe Docs logo\n\n## Integrate 3D Secure (3DS) into your checkout flow.\n\n#### Caution\n\nYou can integrate 3D Secure (3DS) authentication into your checkout flow on multiple platforms, including Web, iOS, Android, and React Native. This integration runs [3D Secure 2 (3DS2)](https://stripe.com/guides/3d-secure-2) when supported by the customer’s bank and falls back to 3D Secure 1 otherwise. To use Stripe’s 3DS service with other processors, [contact support](https://support.stripe.com/contact).\n\n![Checkout page](https://b.stripecdn.com/docs-statics-srv/assets/3ds-flow-1-checkout-page.039294e0dee3a6dede8ea8a32185aae5.png)\n\nThe customer enters their card details.\n\n![Loading symbol](https://b.stripecdn.com/docs-statics-srv/assets/3ds-flow-2-frictionless-flow.417618d0570c469cfb6bbc43630c7896.png)\n\nThe customer’s bank assesses the transaction and can complete 3D Secure at this step.\n\n![Authentication modal](https://b.stripecdn.com/docs-statics-srv/assets/3ds-flow-3-challenge-flow.9052a220f336bbdb75a51799622c6477.png)\n\nIf required by their bank, the customer completes an additional authentication step.\n\n## Control the 3DS flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe triggers 3DS automatically if required by a regulatory mandate such as [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) or requested by an issuer with the [soft decline](https://docs.stripe.com/declines/codes) code `authentication_required`.\n\nYou can also [use Radar rules](#three-ds-radar) or [the API](#manual-three-ds) to control when to prompt users to complete 3DS authentication, making a determination for each user based on the desired parameters. However, not all transactions support 3DS, for example wallets or off-session payments.\n\nWhen a payment triggers 3DS, Stripe requires the user to perform authentication to complete the payment if 3DS authentication is available for a card. Depending on what frontend you use, this might require you to [display the 3DS Flow](#when-to-use-3d-secure).\n\nIn a typical Payment Intent API flow that triggers 3DS:\n\n1.  The user enters their payment information, which confirms a PaymentIntent, SetupIntent, or attaches a PaymentMethod to a Customer.\n2.  Stripe assesses if the transaction supports and requires 3DS based on regulatory mandates, Radar rules, manual API requests, issuer soft declines, and other criteria.\n3.  If 3DS is:\n    *   **Not required**: For example, because of an [exemption](https://stripe.com/guides/strong-customer-authentication#exemptions-to-strong-customer-authentication \"SCA exemptions\"), Stripe attempts the charge. The PaymentIntent transitions to a status of `processing`. If requested by the issuer with a [soft decline](https://docs.stripe.com/declines/codes), we automatically reattempt and continue as if required.\n    *   **Not supported**: The PaymentIntent transitions to a status of `requires_payment_method`. Depending on the reason 3DS was triggered it might be permissible to continue to the authorization step for the charge. In that case, the PaymentIntent transitions to a status of `processing`.\n    *   **Required**: Stripe starts the 3DS authentication flow by contacting the card issuer’s 3D Secure Access Control Server (ACS) and starting the 3DS flow.\n4.  When Stripe receives 3DS flow information from the issuer, we attempt authentication. The PaymentIntent transitions to a status of `requires_action`:\n    *   See below for how to [display the required 3DS action](#when-to-use-3d-secure). Issuers might request different 3DS flow action types, which might not always result in visibly displaying a 3DS challenge (for example, a frictionless flow).\n    *   If the issuer doesn’t support 3DS at all or has an outage, Stripe might attempt to complete the payment without authentication if permissible.\n    *   If Stripe already has access to all the required 3DS data elements, our optimized 3DS server might attempt to complete the authentication request for you while confirming the PaymentIntent. This can result in the PaymentIntent directly transitioning to a status of `processing` if the 3DS flow succeeds, or to a status of `requires_action` if additional steps or data elements are required to complete the 3DS flow.\n5.  Depending on the 3DS authentication result:\n    *   **Authenticated**: Stripe attempts the charge and the PaymentIntent transitions to a status of `processing`.\n    *   **Failure**: The PaymentIntent transitions to a status of `requires_payment_method`, indicating that you need to try a different payment method, or you can retry 3DS by reconfirming.\n    *   **Other scenarios**: Depending on the reason the payment triggered 3DS, it might be permissible to continue authorization for the charge in [edge cases](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-three_d_secure-result). For example, a result of `attempt_acknowledged` leads to a charge and the PaymentIntent transitions to a status of `processing`.\n        *   An exception is when creating [Indian e-mandates for recurring payments](https://docs.stripe.com/india-recurring-payments). Anything but an `authenticated` result is treated as failure.\n6.  The PaymentIntent transitions to one of the following statuses, depending on the outcome of the payment: `succeeded`, `requires_capture`, or `requires_payment_method`.\n\nTo track whether 3DS was supported and attempted on a card payment, read the [three\\_d\\_secure](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-three_d_secure) property on the card information in the Charge’s `payment_method_details`. Stripe populates the `three_d_secure` property when the customer attempts to authenticate the card—`three_d_secure.result` indicates the authentication outcome.\n\n### Use Radar rules in the Dashboard ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe provides [default Radar](https://docs.stripe.com/radar/rules#request-3d-secure) rules to dynamically request 3DS when creating or confirming a [PaymentIntent](https://docs.stripe.com/api/payment_intents) or [SetupIntent](https://docs.stripe.com/api/setup_intents). You can configure these rules in your [Dashboard](https://dashboard.stripe.com/settings/radar/rules).\n\nIf you have [Radar for Fraud Teams](https://stripe.com/radar/fraud-teams), you can add [custom 3DS rules](https://docs.stripe.com/radar/rules#request-3d-secure).\n\n### Manually request 3DS with the API ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe default method to trigger 3DS is [using Radar to dynamically request 3D Secure](#three-ds-radar) based on risk level and other requirements. Triggering 3DS manually is for advanced users integrating Stripe with their own fraud engine.\n\nTo trigger 3DS manually, set `payment_method_options[card][request_three_d_secure]` to `any` or `challenge` depending on what you want to optimize for when creating or confirming a [PaymentIntent](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-card-request_three_d_secure) or [SetupIntent](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-payment_method_options-card-request_three_d_secure). This process is the same for one-time payments or when setting up a payment method for future payments. When you provide this parameter, Stripe attempts to perform 3DS and overrides any [dynamic 3D Secure Radar rules](https://docs.stripe.com/radar/rules) on the PaymentIntent or SetupIntent.\n\nWhen to provide this parameter depends on when your fraud engine detects risk. For example, if your fraud engine only inspects card details, you know whether to request 3DS before you create the PaymentIntent or SetupIntent. If your fraud engine inspects both card and transaction details, provide the parameter during confirmation—when you have more information. Then pass the resulting PaymentIntent or SetupIntent to your client to complete the process.\n\nExplore the `request_three_d_secure` parameter’s usage for each case in the API reference:\n\n*   [Create a PaymentIntent](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_options-card-request_three_d_secure)\n*   [Confirm a PaymentIntent](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-payment_method_options-card-request_three_d_secure)\n*   [Create a SetupIntent](https://docs.stripe.com/api/setup_intents/create#create_setup_intent-payment_method_options-card-request_three_d_secure)\n*   [Confirm a SetupIntent](https://docs.stripe.com/api/setup_intents/confirm#confirm_setup_intent-payment_method_options-card-request_three_d_secure)\n\nSet `request_three_d_secure` to `any` to manually request 3DS with a preference for a `frictionless` flow, increasing the likelihood of the authentication being completed without any additional input from the customer.\n\nSet `request_three_d_secure` to `challenge` to request 3DS with a preference for a `challenge` flow, where the customer must respond to a prompt for active authentication.\n\nStripe can’t guarantee your preference because the issuer determines the ultimate authentication flow. You can find out what the ultimate authentication flow was by inspecting the `authentication_flow` on the `three_d_secure` property of the [Charge](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-three_d_secure-authentication_flow) or [SetupAttempt](https://docs.stripe.com/api/setup_attempts/object#setup_attempt_object-payment_method_details-card-three_d_secure-authentication_flow). To learn more about 3DS flows, read our [guide](https://stripe.com/guides/3d-secure-2#frictionless-authentication).\n\n#### Caution\n\nStripe only requires your customer to perform authentication to complete the payment successfully if 3DS authentication is available for a card. If it’s not available for the given card or if an error occurred during the authentication process, the payment proceeds normally.\n\nStripe’s SCA rules run automatically, regardless of whether or not you manually request 3DS. Any 3DS prompts from you are additional and not required for SCA.\n\n## Display the 3DS flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe automatically displays the authentication UI in a pop-up modal when calling `confirmCardPayment` and `handleCardAction`. You can also redirect to the bank’s website or use an iframe.\n\nStripe.js collects [basic device information](https://support.stripe.com/questions/3d-secure-2-device-information) during 3DS2 authentication and sends it to the issuing bank for their risk analysis.\n\n### Redirect to the bank website ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo redirect your customer to the 3DS authentication page, pass a `return_url` to the PaymentIntent when confirming [on the server](https://docs.stripe.com/api/payment_intents/confirm#confirm_payment_intent-return_url) or on the [client](https://docs.stripe.com/js/payment_intents/confirm_card_payment).\n\nAfter confirmation, if a PaymentIntent has a [requires\\_action](https://docs.stripe.com/upgrades#2019-02-11 \"requires_action\") status, inspect the PaymentIntent’s `next_action`. If it contains `redirect_to_url`, that means 3DS is required.\n\nIn the browser, redirect the customer to the `url` in the redirect\\_to\\_url hash to complete authentication.\n\n`var action = intent.next_action;   if (action && action.type === 'redirect_to_url') {     window.location = action.redirect_to_url.url;   }`\n\nWhen the customer finishes the authentication process, the redirect sends them back to the `return_url` you specified when you created or confirmed the PaymentIntent. The redirect also adds `payment_intent` and `payment_intent_client_secret` URL query parameters that your application can use to identify the PaymentIntent associated with the purchase.\n\n### Display in an iframe ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can’t customize the authentication UI on the web to match your website’s design—the bank that issued the card controls the fonts and colors.\n\nHowever, you can choose _how_ and _where_ to show the 3D Secure UI. Most businesses show it in a modal dialog above their payment page. If you have your own modal component, you can place the 3DS frame inside of it. You can also show the authentication content inline with your payment form.\n\n#### Confirm the PaymentIntent Server-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen your customer is ready to complete their purchase, you [confirm](https://docs.stripe.com/api/payment_intents/confirm \"confirm\") the PaymentIntent to begin the process of collecting their payment.\n\nIf you want to control how to display 3DS, provide a `return_url`, which is where the 3DS `<iframe>` is redirected when authentication is complete. If your site uses a [content security policy](https://docs.stripe.com/security/guide#content-security-policy), check that it allows iframes from `https://js.stripe.com`, `https://hooks.stripe.com`, and the origin of the URL you passed to `return_url`.\n\nIf you’re confirming from the frontend, use the [`confirmCardPayment`](https://docs.stripe.com/js#stripe-confirm-card-payment) method in Stripe.js. For example, if you’re gathering card information using Stripe Elements:\n\n`stripe.confirmCardPayment(   '{{PAYMENT_INTENT_CLIENT_SECRET}}',   {     payment_method: {card: cardElement},     return_url: 'https://example.com/return_url'   },   // Disable the default next action handling.   {handleActions: false} ).then(function(result) {   // Handle result.error or result.paymentIntent   // More details in Step 2. });`\n\nIf you confirm from your server, provide a `return_url`. Depending on your integration, you might want to pass other information to [`confirm`](https://docs.stripe.com/api/payment_intents/confirm) as well.\n\n`curl https://api.stripe.com/v1/payment_intents/{{PAYMENT_INTENT_ID}}/confirm \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode return_url=\"[https://example.com/return_url](https://example.com/return_url)\"`\n\n#### Check the PaymentIntent status Server-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNext, inspect the [status property](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-status) property of the confirmed PaymentIntent to determine whether the payment completed successfully. The following list describes possible `status` values and their significance:\n\n| Status | Description |\n| --- | --- |\n| `requires_payment_method` | The request failed with a `402` HTTP status code, meaning that the payment was unsuccessful. Check the [last\\_payment\\_error](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-last_payment_error) property and try again, collecting new payment information from the customer if necessary. |\n| `requires_capture` | The request completed without authentication. You can continue to [capture the funds](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method#capture-funds). |\n| `requires_action` | An additional step such as 3DS is required to complete the payment. Ask the customer to return to your application to complete payment. |\n| `succeeded` | The payment completed, creating a Charge with the supplied payment method. No further steps are required. |\n\nOn versions of the API before [2019-02-11](https://docs.stripe.com/upgrades#2019-02-11), `requires_payment_method` appears as `requires_source` and `requires_action` appears as `requires_source_action`.\n\n#### Render the 3DS iframe Client-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen the value of the `status` property is `requires_action`, you need to complete an additional step before processing the payment. For a card payment that requires 3DS, the PaymentIntent’s `status` shows as `requires_action` and its [next\\_action](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-next_action) property appears as `redirect_to_url`. The `redirect_to_url` payload contains a URL that opens in an iframe to display 3DS:\n\n`var iframe = document.createElement('iframe');   iframe.src = paymentIntent.next_action.redirect_to_url.url;   iframe.width = 600;   iframe.height = 400;   yourContainer.appendChild(iframe);`\n\nFor 3DS2, card issuers are required to support showing the 3DS content at sizes of 250x400, 390x400, 500x600, 600x400, and full screen (dimensions are width by height). You might enhance the 3DS UI by opening the iframe at exactly one of those sizes.\n\n#### Caution\n\nYou can’t use the `sandbox` attribute on the 3DS iframe. In live mode, the card issuer controls some content inside this iframe. Some issuers’ implementations fail if they’re sandboxed, and the payment won’t succeed.\n\n#### Handle the redirect Client-side![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter the customer completes 3DS, the iframe redirects to the `return_url` you provided when confirming the PaymentIntent. That page needs to `postMessage` to your top-level page to inform it that 3DS authentication is complete. Your top-level page then needs to determine whether the payment succeeded or requires further action from your customer.\n\nFor example, you might have your `return_url` page execute:\n\n`window.top.postMessage('3DS-authentication-complete');`\n\nYour top payment page needs to listen for this postMessage to know when authentication has finished. You then need to retrieve the updated PaymentIntent and check on the status of the payment. If the authentication failed, the PaymentIntent’s status is `requires_payment_method`. If the payment completed successfully, the status is `succeeded`. If you use [separate authorize and capture](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method), the status is `requires_capture` instead.\n\n`function on3DSComplete() {     // Hide the 3DS UI     yourContainer.remove();      // Check the PaymentIntent     stripe.retrievePaymentIntent('{{PAYMENT_INTENT_CLIENT_SECRET}}')       .then(function(result) {         if (result.error) {           // PaymentIntent client secret was invalid         } else {           if (result.paymentIntent.status === 'succeeded') {             // Show your customer that the payment has succeeded           } else if (result.paymentIntent.status === 'requires_payment_method') {             // Authentication failed, prompt the customer to enter another payment method           }         }       });   }    window.addEventListener('message', function(ev) {     if (ev.data === '3DS-authentication-complete') {       on3DSComplete();     }   }, false);`\n\n## Test the 3DS flow ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse a Stripe test card with any CVC, postal code, and future expiration date to trigger 3DS authentication challenge flows while in test mode.\n\nWhen you build an integration with your test API keys, the authentication process displays a mock authentication page. On that page, you can either authorize or cancel the payment. Authorizing the payment simulates successful authentication and redirects you to the specified return URL. Clicking the **Failure** button simulates an unsuccessful attempt at authentication.\n\n| Number | 3DS usage | Description |\n| --- | --- | --- |\n|     | Required | The payment must always complete 3DS2 authentication to be successful. By default, your Radar rules request 3DS authentication for this card. |\n|     | Required | This card requires 3DS2 authentication for off-session payments unless you [set it up](https://docs.stripe.com/payments/save-and-reuse) for future payments. After you set it up, off-session payments no longer require authentication. |\n|     | Required | 3DS authentication is required, but payments will be declined with a `card_declined` failure code after authentication. By default, your Radar rules request 3DS authentication for this card. |\n|     | Supported | 3DS authentication can still be performed, but isn’t required. By default, your Radar rules won’t request 3DS authentication for this card. |\n|     | Supported | This card supports 3DS, but it isn’t enrolled in 3DS. This means that if your Radar rules request 3DS, the customer won’t go through additional authentication. By default, your Radar rules won’t request 3DS authentication for this card. |\n|     | Not supported | This card doesn’t support 3DS and you can’t invoke it. The PaymentIntent proceeds without performing authentication. |\n\nAll other Visa and Mastercard [test cards](https://docs.stripe.com/testing) don’t require authentication from the customer’s card issuer.\n\nYou can write [custom Radar rules in test mode](https://dashboard.stripe.com/settings/radar/rules) to trigger authentication on test cards. Learn more about [testing your Radar rules](https://docs.stripe.com/radar/testing).\n\n## Disputes and liability shift ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe liability shift rule applies to payments that are successfully authenticated using [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") or an equivalent cryptogram such as [Apple Pay](https://docs.stripe.com/apple-pay) or [Google Pay](https://docs.stripe.com/google-pay) in some cases. If a cardholder [disputes](https://docs.stripe.com/disputes) a 3DS payment as fraudulent, the liability shifts from you to the card issuer.\n\nIf a card doesn’t support 3DS or an error occurs during the authentication process, the payment proceeds normally. When this occurs, liability doesn’t generally shift to the issuer, because a successful 3DS authentication hasn’t taken place.\n\nIn practice, this means that you won’t receive disputes marked as fraudulent if the payment was covered by the liability shift rule, but you might still receive an [Early Fraud Warning](https://docs.stripe.com/disputes/how-disputes-work#early-fraud-warnings). You might still receive a low percentage of fraudulent disputes, and we list a few cases below where the liability shift rule might not apply.\n\nYou might receive a [dispute inquiry](https://docs.stripe.com/disputes/how-disputes-work#inquiries) on a successfully authenticated payment using 3DS. This type of dispute doesn’t precipitate a chargeback because it’s only a request for information.\n\nIf you receive an inquiry for a 3D-Secure-authenticated charge, you _must_ respond. If you don’t, the cardholder’s bank can initiate a financial chargeback known as a “no-reply” chargeback that could invalidate the liability shift. To prevent no-reply chargebacks on 3DS charges, submit sufficient information about the charge. Include information about what was ordered, how it was delivered, and who it was delivered to (whether it was physical or electronic goods, or services).\n\n#### Note\n\nIf a customer disputes a payment for any other reason (for example, [product not received](https://docs.stripe.com/disputes/categories)), then the standard dispute process applies. Make informed decisions about your business management, especially in handling and completely avoiding disputes.\n\nLiability shift might also occur when the card network requires 3DS, but it isn’t available for the card or issuer. This can happen if the issuer’s 3DS server is down or if the issuer doesn’t support it, despite the card network requiring support. During the payment process, the cardholder isn’t prompted to complete 3DS authentication, because the card isn’t enrolled. Although the cardholder didn’t complete 3DS authentication, liability can still shift to the issuer.\n\nStripe returns the requested Electronic Commerce Indicator (ECI) in the `electronic_commerce_indicator` of the [3DS authentication outcome](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-three_d_secure). This indicator can aid in determining whether a charge should adhere to the liability shift rule. As 3DS occurs subsequent to the initial payment intent response, you typically get this from a `charge.succeeded` [webhook](https://docs.stripe.com/webhooks). A requested ECI might be degraded in the issuer response, which we don’t reveal.\n\nSometimes payments that are successfully authenticated using 3DS don’t fall under liability shift. This is rare and can happen, for example, if you have an excessive level of fraud on your account and are enrolled in a [fraud monitoring program](https://docs.stripe.com/disputes/monitoring-programs#vfmp). Certain networks have also exempted some industries from liability shift. For example, Visa doesn’t support liability shift for businesses engaging in wire transfer or money orders, non-financial institutions offering foreign or non-fiat currency, or stored-value card purchase or load.\n\nIn rare cases, liability shift might get downgraded post-authorization, or the card networks’ dispute rejection system might fail to catch liability shift for a transaction. In these cases, if you counter the dispute, Stripe automatically adds the requested ECI and the [3DS authentication outcome](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card-three_d_secure-result) for the payment to your evidence details, but we encourage you to include additional details to improve your odds of winning the dispute.\n\n### Custom Radar rules for 3DS and liability shift ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you have [Radar for Fraud Teams](https://stripe.com/radar/fraud-teams), you can [customize your rules](https://docs.stripe.com/radar/rules#request-3d-secure) to control when to request 3DS and how to handle each specific authentication outcome and liability shift. Stripe’s [Strong Customer Authentication](https://stripe.com/guides/strong-customer-authentication) (SCA) rules run automatically and independently of custom Radar rules, and block unauthenticated payments unless exempted.",
  "title": "Authenticate with 3D Secure | Stripe Documentation",
  "description": "Integrate 3D Secure (3DS) into your checkout flow.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/disputes/prevention",
  "markdown": "# Understand fraud | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to identify fraud, and design a strategy to prevent it.\n\nStripe provides resources and tools to help you develop a strategy for detecting and preventing fraud and other types of disputed payments.",
  "title": "Understand fraud | Stripe Documentation",
  "description": "Learn how to identify fraud, and design a strategy to prevent it.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/sepa-debit/set-up-payment",
  "markdown": "# Save SEPA Direct Debit details for future payments\n\nYou can use [Checkout in setup mode](https://docs.stripe.com/payments/save-and-reuse?platform=checkout) to collect SEPA Direct Debit payment details in advance, and determine the final amount or payment date later. Use it to:\n\n*   Save payment methods to a wallet to streamline future purchases\n*   Collect surcharges after fulfilling a service\n*   [Start a free trial for a subscription](https://docs.stripe.com/billing/subscriptions/trials)\n*   Saving payment methods to a wallet to streamline future purchases\n*   Collecting surcharges after fulfilling a service\n*   [Starting a free trial for a subscription](https://docs.stripe.com/billing/subscriptions/trials)\n\n#### Note\n\nSEPA Direct Debit is a **delayed notification payment method**, which means that funds are not immediately available after payment. A payment typically takes **5 business days** to arrive in your account.\n\n[](#create-retrieve-customer)\n\nTo reuse a SEPA Direct Debit payment method for future payments, it must be attached to a [Customer](https://docs.stripe.com/api/customers \"Customers\").\n\nCreate a Customer object when your customer creates an account with your business. Associating the ID of the Customer object with your own internal representation of a customer enables you to retrieve and use the stored payment method details later.\n\nCreate a new customer or retrieve an existing customer to associate with this payment. Include the following code on your server to create a new customer.\n\n`curl -X POST https://api.stripe.com/v1/customers \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#setup-a-payment)\n\n#### Note\n\nUse this guide to learn how to enable SEPA Direct Debit—it shows the differences between setting up future payments for cards and using SEPA Direct Debit.\n\n### Enable SEPA Direct Debit as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new [Checkout Session](https://docs.stripe.com/api/checkout/sessions), you need to add `sepa_debit` to the list of `payment_method_types`.\n\n[](#testing)\n\nYou can test your integration using the IBANs below. The payment method details are successfully collected for each IBAN but exhibit different behavior when charged.\n\n##### Test IBANs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Account Number | Description |\n| --- | --- |\n| `AT611904300234573201` | The PaymentIntent status transitions from `processing` to `succeeded`. |\n| `AT321904300235473204` | The PaymentIntent status transitions from `processing` to `succeeded` after three minutes. |\n| `AT861904300235473202` | The PaymentIntent status transitions from `processing` to `requires_payment_method`. |\n| `AT051904300235473205` | The PaymentIntent status transitions from `processing` to `requires_payment_method` after three minutes. |\n| `AT591904300235473203` | The PaymentIntent status transitions from `processing` to `succeeded`, but a dispute is immediately created. |",
  "title": "Save SEPA Direct Debit details for future payments | Stripe Documentation",
  "description": "Learn how to save payment method details for future SEPA Direct Debit payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/disputes/prevention/best-practices",
  "markdown": "# Best practices for preventing fraud\n\n## Learn how to use best practices to protect against disputes and fraudulent payments.\n\nCreating an effective dispute and fraud prevention strategy that best suits your business can help prevent fraud from occurring. By employing some of these best practices as part of your overall strategy, you can avoid excessive chargebacks and reduce potential customer burden and losses.\n\nThese are tools that any Stripe user—whether or not they’re a developer, and whether or not they use any specialized Stripe tools like [Radar](https://docs.stripe.com/radar \"Radar\")—can leverage to reduce fraud and dispute incidents.\n\n### Be clear and transparent with your customers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nClear and frequent contact with your customers can help prevent many of the [reasons](https://docs.stripe.com/disputes/categories) for disputes. By responding to issues and processing refunds or replacement orders quickly, your customers are far less likely to take the time to dispute a payment. Make your customer service contact information easy to find, keep customers updated throughout their order process, and provide updates about deliveries.\n\n#### Caution\n\nInclude a clear description of your refund and cancellation policies in your terms of service. You can require your users to agree to your terms of service to increase the likelihood that card issuers respect your policies in the event of a dispute.\n\n*   In general, make your terms of service and policies easy to find on your website, and require customers to agree to them. Rather than only linking to them during checkout, provide a full version of them on the checkout page or as a pop-up with a requirement to agree to them prior to submitting the order.\n    \n*   Card issuers can be very specific about how you present your policies. If you have a checkbox your customer must accept that only contains a link, the issuer might reject it as unsatisfactory evidence that your customer was aware of your policies. There must be reasonable evidence that you presented your customer with a full copy of your policies prior to their purchase.\n    \n*   When shipping physical goods to customers, use carriers and services that provide online tracking and delivery confirmation whenever possible. Provide this information to your customers as soon as it’s available (if you need to submit tracking information as dispute evidence, be aware that card issuers don’t follow links so screenshots must be provided).\n    \n*   Use clear statement descriptors\n    \n    Set a recognizable name for your [statement descriptor](https://docs.stripe.com/get-started/account/activate#public-business-information) through your [account settings](https://dashboard.stripe.com/settings/account/?support_details=true). We recommend using your website domain or business name to make sure customers can easily identify their purchase when they look at their statement.\n    \n    Statement descriptors are limited to between 5 and 22 characters. They must contain at least 5 letters and can’t use the special characters `<`, `>`, `\\`, `'`, or `\"`.\n    \n*   Separate your business accounts\n    \n    Avoid using the same Stripe account for separate businesses. Each Stripe account should represent a single business, which allows for separate statement descriptors and contact information. If you need to process payments for multiple businesses, create [additional accounts](https://docs.stripe.com/get-started/account/multiple-accounts) for each.\n    \n\n### Consider proactively refunding suspicious payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou should immediately refund any payment you’re [sure is fraud](https://docs.stripe.com/disputes/prevention/identifying-fraud) (unless you’re covered by some form of liability shift, such as with [3D Secure](https://docs.stripe.com/payments/3d-secure/authentication-flow#disputed-payments)). If you know you’re going to receive a fraud dispute on it, you can save yourself the [dispute fee](https://docs.stripe.com/disputes/how-disputes-work#dispute-fees), the increase to your [dispute rate](https://docs.stripe.com/disputes/measuring#dispute-rate-usage), and the potential loss of product by fully refunding the fraudulent payment.\n\n#### Caution\n\nWhile customers can’t dispute fully refunded payments, they can still dispute partially refunded payments. Card network rules even allow for a payment that has been partially refunded to be disputed for the full payment amount.\n\nHowever, sometimes you might suspect a payment is fraud, but your suspicions fall short of absolute certainty. Sometimes it makes sense to aggressively refund every charge that falls into this gray area and sometimes it doesn’t.\n\nYou might want to pursue an aggressive refund strategy if any of the following apply:\n\n*   **Order not yet fulfilled**. The loss of your product could be prevented by a refund. That is, if you haven’t already committed your product or service in some irreversible way by the time you suspect fraud, you might want to be more aggressive in refunding. Whereas if your product or service was irretrievable—for example, the product already shipped, or the service has already been used—it might make more sense _not_ to refund, and to wait and see if it does turn out to be fraud.\n*   **Excessive disputes**. Your recent dispute activity has been [excessive](https://docs.stripe.com/disputes/measuring#excessive-dispute-activity) by card network definitions, which could put your account standing with Stripe at risk or put you at risk of being identified into a chargeback monitoring program.\n*   **Chargeback monitoring program**. You’re already in a [chargeback monitoring program](https://docs.stripe.com/disputes/monitoring-programs) and need to exit the program.\n*   **New or small business**. Your business has small enough payment volume (say, fewer than 100 payments per month) that one or two fraud disputes can have a very outsized impact on your [dispute rate](https://docs.stripe.com/disputes/measuring#dispute-rate-usage), even if you otherwise have little dispute activity.\n\nIf none of the above apply, you might want to be more conservative with how frequently you proactively refund charges you suspect are fraudulent.\n\n#### Refunding a payment as fraud\n\nTo refund a payment, in the [Dashboard](https://dashboard.stripe.com/), select the payment and click **Refund as fraud**. This refunds the payment and reports it as fraudulent to Stripe so that we can further improve our fraud detection.\n\n### Delay shipping orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you ship physical goods, consider delaying the shipment by 24-48 hours. This time gives cardholders a chance to spot and report any fraud on their accounts. You would still receive a fraud dispute in this scenario, but at least you wouldn’t also lose the merchandise. Not all cardholders check their statements on a daily basis, however, and their card issuer might not proactively notify them about the transaction.\n\n[Customers](https://docs.stripe.com/api/customers \"Customers\") that request overnight or expedited shipping should be considered higher risk, as the increased cost of such services is of no consequence to fraudsters. One tactic you can use to identify these types of payments is to offer same day or overnight shipping at a very high cost–many times more expensive than any other shipping option you provide.\n\nIt’s far less likely that any legitimate customer would pay such a high cost, but a fraudster would want the goods to be shipped as soon as possible and have no regard for the additional cost. You can then manually screen any customers that opt for the anomalously expensive shipping option and scrutinize the order to determine if it looks genuine. Using a [separate auth and capture process](#use-auth-and-capture-when-creating-payments) together with [Radar reviews](#manually-review-payments) is a good way to do so.\n\n### Ship to a verified address![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nShipping to a [verified billing address](https://docs.stripe.com/disputes/prevention/verification#avs-check) which has passed postal code and street address checks is the safest option. When using an address that hasn’t been verified, you can’t prove that the order was shipped to the legitimate cardholder if the payment is later disputed.\n\nThis doesn’t prevent you shipping to a different address, though you should do all you can to mitigate the risks involved. For instance, you may only want to ship orders to a different address for returning customers you already know to be legitimate, or who provide a fully verifiable billing address. In addition, any of the following could indicate the payment is suspicious:\n\n*   The order is much larger than normal, or is only for your most expensive products\n*   The customer changed the shipping address after placing the order\n*   The customer requested expedited shipping\n*   The products ordered have a high resale value\n*   The shipping destination is different from the billing address or the card’s country of origin (for example, the billing address is in Spain, but the shipping address is in France)\n\nReviewing the order and the shipping address information can help you determine whether or not the order presents an unacceptable risk to you.\n\n### Benchmarking your dispute rate![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYour account’s [dispute rate](https://docs.stripe.com/disputes/measuring#dispute-rate-usage) is an important metric to use when reviewing the efficacy of your disputes and fraud prevention methods. You can regularly review these metrics in your Stripe Dashboard to see the impact your dispute prevention strategies are having.\n\n[Radar](https://stripe.com/radar) is a suite of features and tools for fighting fraud that is built into Stripe and requires no additional integration work.\n\n### Manually review payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Radar for Fraud Teams](https://stripe.com/radar/fraud-teams) includes a [review](https://docs.stripe.com/radar/reviews) feature that allows you to place certain payments into review—though keep in mind that these payments are still processed and the credit card charged, unless you are using a separate auth and capture process. These payments are placed into the [review queue](https://dashboard.stripe.com/radar) for you to take a closer look at. If you suspect the payment is fraudulent, you can refund it.\n\nYou should review payments that Stripe has placed into your [review queue](https://dashboard.stripe.com/radar) as soon as possible. Payments with an [elevated risk](https://docs.stripe.com/radar/risk-evaluation#elevated-risk) of fraud are automatically marked for review. You can also create additional rules to customize the types of payments that should be placed in your review queue.\n\nHere are some considerations when reviewing a payment:\n\n*   Does the billing address match the shipping address?\n*   Has the billing address been verified by AVS? Does it also match the card’s country of origin?\n*   Does the customer’s email address match the cardholder’s name?\n*   Is this an order that the customer has asked to be expedited?\n*   Have multiple orders from different credit cards originated from this same IP address?\n*   Has this customer made many order attempts that have been declined?\n\nIf you’re unsure about a payment when you’re reviewing it, you should always contact the customer by phone or email. If a payment’s billing and shipping address don’t match, look into the shipping address using [Google Maps & Street View](https://www.google.com/maps/streetview) to find out more. A common tactic that fraudsters use is to have orders shipped to a freight or mail forwarding service or storage facility that forwards the goods to their actual location.\n\n### Use Radar rules to automatically block payments or place them in review![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Radar for Fraud Teams](https://stripe.com/radar/fraud-teams), is built directly into the payment flow and combines a customizable rules engine with powerful machine learning algorithms. It can detect patterns across payments from every business processing payments with Stripe, assessing the risk of each one.\n\nUsing [rules](https://docs.stripe.com/radar/rules), you can automatically evaluate payments based on your specific detection criteria and take the appropriate action on them. You can also create rules that use multiple criteria, allowing you to allow or block payments that meet multiple conditions. Each business has different risks.\n\n### Country and card type limiting![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you’re experiencing increased fraud coming from certain countries, you can set up rules to block payments from any country you do not want to accept payments from, using the `:ip_country:` and `:card_country:` rule attributes. For example, you can create the following rule to block all payments and cards originating from Canada: `Block if :ip_country: = ca and :card_country: = 'ca'`. Similarly, if your business only supports the country it operates in, you can create a rule that blocks any payments from all other countries. For example, a rule to block payments that don’t originate from Australia is: `Block if :ip_country: != au and :card_country: != 'au'`.\n\nYou can set limits on which type of cards to accept, either by brand, (for example, Mastercard), or by funding type (for example, pre-paid). This can be particularly helpful if you see excessive fraud from certain card types. To block payments from all Visa-issued debit cards, an example rule would be: `Block if :card_brand: = visa and :card_funding: = 'debit'`.\n\nThese are tools that require some development work to implement. If you rely on a [Stripe partner](https://stripe.com/partners) to provide your payments integration, you might not have the ability to directly implement these on your own.\n\n### Process your transactions on Stripe ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe [Visa Compelling Evidence 3.0](https://docs.stripe.com/disputes/categories#visa-ce-30) rules rely on transaction history to dispute friendly fraud by showing previous non-fraud transactions with the same cardholder within a specified period. When you get a Visa fraud dispute, Stripe can identify qualifying transactions in your history on our platform and pre-populate the dispute response with most of the required evidence you need. You can use this evidence to significantly increase your likelihood of overturning the dispute in your favor.\n\nStripe can’t determine eligibility or submit evidence for externally processed transactions, so we recommend:\n\n*   Using Stripe processing whenever possible\n*   Including the customer IP address, email address, shipping address, and product descriptions in your transactions with Stripe\n\n### Collect as much payment information as possible ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSome disputes are lost because only the minimum information was required during checkout. This makes it difficult (sometimes impossible) for Stripe or the card issuer to verify that the customer is legitimate. For instance, while a billing postal code isn’t always necessary to process a card payment, including it allows the payment to be verified by the card issuer. If verification fails, consider rejecting the payment because this might indicate fraud.\n\nUse [Checkout](https://docs.stripe.com/payments/checkout) or [Advanced fraud detection](https://docs.stripe.com/disputes/prevention/advanced-fraud-detection) to make sure your integration is best equipped to provide relevant payment information, such as:\n\n*   [Customer](https://docs.stripe.com/api/customers \"Customers\") name\n*   Customer email address\n*   CVC number\n*   Full billing address and postal code\n*   Shipping address (if different from billing address)\n*   Tracking information\n\n### Implement a cardholder authentication method such as 3D Secure![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\") is a way to add a verification step between the customer and the card issuer to your checkout flow. Payments that have been authenticated with 3D Secure might be protected from most fraudulent disputes through a rule known as [liability shift](https://docs.stripe.com/payments/3d-secure/authentication-flow#disputed-payments). You will, however, still receive [Early Fraud Warnings](https://docs.stripe.com/disputes/how-disputes-work#early-fraud-warnings) that can count against [card brand monitoring programs](https://docs.stripe.com/disputes/monitoring-programs).\n\nLearn more at [Card Authentication and 3D Secure](https://docs.stripe.com/payments/3d-secure).\n\n### Programmatically verify your customer’s identity![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor some, verifying the identity of customers can be beneficial. Consider using [Stripe Identity](https://docs.stripe.com/identity) to verify a government ID and match with a selfie of the document holder. Alternatively, you can ask customers to connect their [Facebook](https://developers.facebook.com/docs/facebook-login/overview/) or [LinkedIn](https://developer.linkedin.com/docs/oauth2) accounts as a further proof of identity. This is an extra step that a fraudulent actor might not take. Some legitimate customers might not want to go through this additional step either, and your conversion rate might suffer as a result.\n\n### Use auth and capture when creating payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCredit card charge attempts are processed in two parts. The charge is first _authorized_ by requesting authorization for the amount to charge from the card issuer. After a charge is approved, by default it’s then _captured_ immediately afterwards and the amount deducted from the card.\n\nA [capture later](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method) payment flow (sometimes called “auth and capture”) is the process of performing these two steps at separate times. The authorization can be made first, which holds the amount on the card and appears on a customer’s statement as a pending transaction, but does not actually move money out of their account. The charge can then be captured any time up to 7 days after the authorization. Capturing a charge completes the payment and the funds are deducted from the customer’s card. If a charge isn’t captured within the time limit, the authorization is automatically released.\n\nSimilar to delayed shipping, this method can allow enough time for potential fraud to come to light, giving you the option to carefully review—and potentially refund—the transaction. Cardholders cannot dispute uncaptured authorizations, only fully captured payments. With Radar for Fraud Teams you can manually capture these payments in the [review process](#manually-review-payments).\n\n### Set a custom statement descriptor for each payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe statement descriptor is the text that appears on customers’ card statements with information about the company that’s associated with a payment. One way to use a statement descriptor is to insert a short, random code that your customer then has to verify. When you suspect a transaction might be fraudulent, you can contact your customer and ask them to give you the code that is shown on their online statement, and if they do not, you would refund the payment.\n\nYou can either edit your [default statement descriptor](https://dashboard.stripe.com/settings/public) within the Dashboard or set a [dynamic statement descriptor](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) whenever a payment is created through the API.\n\nWhile this method can’t help against a fraudster who may have access to a cardholder’s online card issuer or credit account, this is rare. Using the statement descriptor in this manner can provide reassurance that the customer is likely to be genuine. As with some other prevention methods, the added customer friction of this method could lead to some legitimate payments being refunded.",
  "title": "Best practices for preventing fraud | Stripe Documentation",
  "description": "Learn how to use best practices to protect against disputes and fraudulent payments.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/disputes/verifi-beta",
  "markdown": "# Dispute prevention with Verifi | Stripe DocumentationThe Stripe Docs logo\n\n## Dispute prevention with VerifiBeta\n\n## Automatically prevent disputes and lower your dispute rate.\n\nRequest an invite\n\nStripe will be offering dispute prevention with Verifi. Prevent and manage disputes from the Stripe Dashboard.\n\n[](#request-an-invite)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/verifi-hero-image.a6c11089f775b3d5b6b954d6f1b5b8dc.png)\n\nDisputes, also called chargebacks, can result in significant costs. Verifi, a Visa solution, helps you save on dispute costs while lowering your dispute rates and automating part of your dispute management process.\n\nUse dispute prevention to:\n\n*   Set rules to automatically refund specific disputes with Rapid Dispute Resolution (RDR). Refunded disputes don’t count towards your dispute rate and don’t incur a dispute fee.\n*   Prevent disputes by sending extra transaction data with Order Insight (OI).\n*   Block disputes entirely if the extra transaction data provided with OI is Compelling Evidence (CE 3.0) eligible.\n\nYou can review and manage dispute prevention from the Dashboard. Learn more about [disputes and fraud](https://docs.stripe.com/disputes).\n\n## Benefits![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAutomatically refunding disputes can cost less than responding to certain disputes. If you’re part of the Visa Dispute Monitoring Program (VDMP), then automatically refunding disputes can help you exit the program.\n\n|     |     |     |\n| --- | --- | --- |\n| ![Rate reduction using automatic rules.](https://b.stripecdn.com/docs-statics-srv/assets/verifi-lower-disputes.ea031da338e5a6479b0966e593ed2615.png) | ![Turn on dispute prevention in your dashboard.](https://b.stripecdn.com/docs-statics-srv/assets/verifi-zero-integration.8e2e9287f3217f1acb7faca32f71c24b.png) | ![Increased revenue retention.](https://b.stripecdn.com/docs-statics-srv/assets/verifi-lower-costs.37f379911d16ca5a4001844c661b0d06.png) |\n| **Lower dispute rates**<br><br>Automatically refunded disputes don’t count towards your dispute rate. | **Zero integration required**<br><br>Stripe integrates directly with Verifi and provides your existing transaction data on your behalf at time of lookup. | **Lower costs**<br><br>Fewer disputes means fewer dispute fees and operational costs. |\n\n## How it works![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Order Insight![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOrder Insight uses your transaction data to help cardholders recognize the charge. When eligible, adding Compelling Evidence 3.0 can block disputes entirely.\n\n![The process of adding Order Insight and Compelling Evidence 3.0 to prevent disputes.](https://b.stripecdn.com/docs-statics-srv/assets/verifi-oi-diagram.6745cebcfdec760a76d7e2e4fd65a747.png)\n\n### Rapid Dispute Resolution![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRapid Dispute Resolution automatically refunds disputes based on your custom rules. These disputes don’t count towards your overall dispute rate.\n\n![How Rapid Dispute Resolution resolves disputes with no impact on your dispute rate.](https://b.stripecdn.com/docs-statics-srv/assets/verifi-rdr-diagram.897ca5e58e077fbb9b4c370c258a346b.png)\n\n## Pricing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPricing is based on your Merchant Category Code (MCC) tier. After you request an invite, support can confirm your tier.\n\n| Feature | Fee Structure | MCC Tier 1 | MCC Tier 2 | MCC Tier 3 |\n| --- | --- | --- | --- | --- |\n| RDR | Per screened dispute | 5 USD | 20 USD | 35 USD |\n| CE 3.0 | Per dispute blocked | 5 USD | 20 USD | 35 USD |\n| OI  | Per lookup | Free | Free | Free |\n\n## Request an invite![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)",
  "title": "Dispute prevention with Verifi | Stripe Documentation",
  "description": "Automatically prevent disputes and lower your dispute rate.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/disputes/api",
  "markdown": "# Use the API to respond to disputes\n\n## Learn how to manage disputes programmatically.\n\nYou can respond to disputes in the Stripe Dashboard, where we guide you through submitting the optimal evidence for each [dispute reason](https://docs.stripe.com/disputes/categories).\n\nYou can also programmatically manage disputes using the API. With the API, you can upload evidence, respond to disputes, and receive dispute events using webhooks.\n\n## Retrieve a dispute![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor details about a dispute, [retrieve](https://docs.stripe.com/api#retrieve_dispute) a `Dispute` object:\n\n`curl https://api.stripe.com/v1/disputes/{{DISPUTE_ID}} \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\nThe response contains information about the dispute and any response or evidence that’s already been provided.\n\n`{   object: \"dispute\"   id: \"{{DISPUTE_ID}}\",   charge: \"ch_5Q4BjL06oPWwho\",   evidence: {     customer_name: \"Jane Austen\",     customer_purchase_ip: \"127.0.0.1\",     product_description: \"Widget ABC, color: red\",     shipping_tracking_number: \"Z01234567890\",     uncategorized_text: \"Additional notes and comments\",   },   evidence_details: {     due_by: 1403047735,     submission_count: 1   }   ... }`\n\n## Update a dispute![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou [update](https://docs.stripe.com/api#update_dispute) the `Dispute` object and pass structured evidence with the `evidence` parameter.\n\n`curl https://api.stripe.com/v1/disputes/{{DISPUTE_ID}} \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n `\\   -d \"evidence[customer_email_address]\"=\"email@example.com\" \\   -d \"evidence[shipping_date]\"=6/12/2024 \\   -d \"evidence[shipping_documentation]\"=\"{{FILE_ID}}\"`\n\nTo view all available fields for the evidence parameter, see [Dispute evidence](https://docs.stripe.com/api#dispute_evidence_object). There are two types of evidence you can provide, depending on the field being updated:\n\n*   Text-based evidence, such as `customer_email` and `service_date`. These types of evidence take a string of text.\n*   File-based evidence, such as `service_documentation` and `customer_communication`. These take a [file\\_upload](https://docs.stripe.com/api#file_object) object ID.\n\n#### Note\n\nThe combined character count for all text-based evidence field submissions is limited to 150,000.\n\nYou can provide documents or images (for example, a contract or screenshot) as part of dispute evidence using the [File Upload API](https://docs.stripe.com/file-upload). You first upload a document with the purpose of `dispute_evidence`, which generates a `File_upload` object that you can use when submitting evidence. Make sure the file meets [Stripe’s recommendations](https://docs.stripe.com/disputes/best-practices#file-upload-recommendations) before uploading it for evidence submission.\n\nIf you’re only interested in submitting a single file or a large amount of plaintext as evidence, use `uncategorized_text` or `uncategorized_file`. However, fill in as many fields as possible so you have the best chance at overturning a dispute.\n\n#### Note\n\n## Multiple disputes on a single payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIt’s not typical, but it’s possible for a customer to dispute the same payment more than once. For example, a customer might partially dispute a payment for one of the items in an order if it was damaged in delivery, and then file a second dispute against a different item in the same order because the item didn’t work properly.\n\nStripe distinguishes all disputes by a unique identifier, regardless of whether they’re related to a single payment. When you [list disputes](https://docs.stripe.com/api#list_disputes), you can filter the results to show only disputes for a particular payment by specifying the `id` of the `PaymentIntent` or `Charge` object and including the [payment\\_intent filter](https://docs.stripe.com/api/disputes/list#list_disputes-charge) or [charge filter](https://docs.stripe.com/api/disputes/list#list_disputes-payment_intent).\n\n`curl -G https://api.stripe.com/v1/disputes \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\  -d payment_intent={{PAYMENT_INTENT_ID}}`\n\nWhen a payment has multiple disputes, use the `id` provided for each returned dispute in the list to make sure you’re responding to the correct dispute by specifying its `id` when you [retrieve](#retrieve-a-dispute) or [update the dispute](#update-a-dispute).",
  "title": "Use the API to respond to disputes | Stripe Documentation",
  "description": "Learn how to manage disputes programmatically.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/disputes/how-disputes-work",
  "markdown": "# How disputes work | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about the high level lifecycle of payment card disputes.\n\nA dispute occurs when an account owner contacts their bank to contest a payment to you for a number of possible [reasons](https://docs.stripe.com/disputes/categories). When someone files a dispute, the process varies slightly across different card networks, but typically follows a standard pattern shown here:\n\n![Disputes lifecycle diagram](https://b.stripecdn.com/docs-statics-srv/assets/lifecycle.b60ea78efb3b484b36c415a2b71887e3.png)\n\nWhen an account owner disputes a charge to their payment account, Stripe:\n\n*   Notifies you of the dispute through the Stripe Dashboard, email, [webhooks](https://docs.stripe.com/webhooks \"webhook\"), and the API\n*   Debits the disputed amount, plus a dispute fee, from your Stripe account\n*   Provides you with an explanation of the dispute and access to the account owner’s claim to their bank\n*   Steps you through the process of submitting convincing evidence to counter the dispute\n\nThroughout this process, Stripe facilitates your case, but doesn’t have influence over the outcome, which is at the sole discretion of the account owner’s bank.\n\n## Before the dispute![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSometimes, Stripe alerts you to pre-dispute notifications before an actual dispute is filed. Pay attention to these notifications because:\n\n*   You might avoid a dispute entirely with proactive customer service and transaction clarification\n*   Failure to respond in the pre-dispute phase can have negative implications in the formal dispute phase\n\n### Early fraud warnings ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nEarly fraud warnings (EFWs) are messages sourced from Visa TC40 reports and Mastercard SAFE (System to Avoid Fraud Effectively) reports that card issuers on these two networks generate to flag payments they suspect might be fraudulent. The networks require issuers to report fraud, but that requirement doesn’t affect an issuer’s decision whether to initiate a dispute.\n\nAs with any fraud signal, EFWs don’t require any action or response from you. You can proactively [refund the charge](https://docs.stripe.com/disputes/prevention/best-practices#consider-proactively-refunding-suspicious-payments) to prevent the cardholder from initiating a dispute, or you might wait and see if a fraud dispute happens. Unless the payment was covered by the [liability shift](https://docs.stripe.com/payments/3d-secure/authentication-flow#disputed-payments) rule, 80% of EFWs convert into a fraud dispute if you do nothing. If the payment was covered by liability shift, then you might still receive a dispute. In that case, Stripe automatically provides some evidence for you, such as data from [3D Secure](https://docs.stripe.com/payments/3d-secure \"3D Secure (3DS)\").\n\nAutomatically refunding all EFWs regardless of the likelihood of escalation isn’t a good strategy. If you’re too aggressive in issuing refunds for all EFWs, you’ll inevitably refund some transactions that would never have become disputes.\n\nAll other things being equal, our analysis suggests that the optimal point for issuing a refund on early fraud warnings is on charges that are roughly less than or equal to your [dispute fee](https://docs.stripe.com/disputes/how-disputes-work#dispute-fees). It’s probably not worthwhile to refund EFWs on charges more than 35 percent higher than your dispute fee.\n\nProactively refunding a flagged payment doesn’t affect the fraud warning. The only time a refund can prevent a fraud report is when it’s processed as a reversal, which usually happens within 2 hours of the payment capture.\n\n#### Cases where refunding makes more sense\n\nThe main exception to the optimal refund strategy above is if you have reason to worry about the effect of the dispute itself on your business or account.\n\nIf any of the conditions described under the [Best practices for preventing fraud](https://docs.stripe.com/disputes/prevention/best-practices#consider-proactively-refunding-suspicious-payments) apply to your situation, it makes sense to more aggressively refund EFWs.\n\nAlthough it’s called an early fraud warning, it’s possible to receive an EFW even after you receive a fraud dispute on a charge. This is generally because the systems the networks use to process EFWs are separate from the systems they use to process disputes, and the two aren’t necessarily in sync.\n\nYou can listen for EFW [webhooks](https://docs.stripe.com/webhooks \"webhook\") using our [API](https://docs.stripe.com/api/radar/early_fraud_warnings).\n\n### Inquiries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSome card networks initiate a preliminary phase before creating a formal dispute and [chargeback](https://docs.stripe.com/disputes \"chargeback\"). Stripe calls this preliminary phase an inquiry, though these are sometimes also called a “retrieval” or a “request for information”.\n\nAmerican Express and Discover are the networks that most often use this phase. Mastercard and Visa don’t use it anymore.\n\nMexico Domestic charges that are disputed across card brands use inquiries before creating a formal dispute. Some disputes might escalate to Unwinnable chargebacks if left unanswered.\n\nDuring the inquiry phase, the cardholder’s bank requests transaction clarification, often because the cardholder doesn’t recognize the transaction description. You can resolve the case without incurring a dispute fee by either providing satisfactory evidence that answers the [dispute type](https://docs.stripe.com/disputes/categories) for the inquiry, or by issuing a full refund. Inquiries on partially refunded charges can still escalate to a chargeback.\n\n#### Unwinnable chargebacks\n\nFailing to respond to an inquiry can signal to the issuer your implicit acceptance of the claim, resulting in an escalation to a formal, and **likely unwinnable**, chargeback. Unless you intend to accept financial liability, always respond to inquiries immediately, and make every effort to resolve issues amicably with your customer during this stage.\n\nThe Dashboard payment page describes inquiries as an “inquiry” or “dispute inquiry”, and as a “warning” or “dispute warning” in the API events summary, to mirror the language in the API.\n\nIf an inquiry has been open for 120 days without escalation to a chargeback, Stripe marks it as closed in the Dashboard and API. At this point, you can be confident the card network won’t escalate it—they don’t provide an explicit “win” message for inquiries.\n\n## During the dispute![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhether it’s because of an inquiry that escalated, or for some other reason, when an account owner files a formal dispute against a payment, the action initiates a chargeback where the card network pulls the funds for the dispute from your Stripe balance and holds it for the entire duration of the dispute. This might be for the full amount of the charge or a different amount. [Why the debited amount is different from the original payment](#disputed-amount)\n\n### Receiving a dispute![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe initiation of a dispute triggers several processes:\n\n*   The card network debits Stripe for your disputed payment and related dispute fees\n*   Stripe in turn debits your Stripe balance for the disputed amount plus a dispute fee\n*   You can’t issue a refund outside the dispute process while the dispute is open\n*   Your [dispute rate](https://docs.stripe.com/disputes/measuring) with that card network increases\n\n### Timing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCard networks typically allow cardholders to initiate disputes within 120 days of the original payment, but their rules allow more time in some situations. Certain industries, such as travel or event ticketing—where the payment might be made long before the event occurs—are prone to longer time intervals between the original purchase and a dispute. Generally speaking, when a customer makes a payment for something that will happen in the future (like a vacation reservation, a professional services appointment, or an event ticket), the clock starts on the date of the event, not the date of the payment.\n\nFollowing the creation of the chargeback, you have a limited amount of time (usually 7-21 days, depending on the card network) to respond to the card issuer.\n\nIf you submit evidence, the issuer also has a limited amount of time (usually 60–75 days, depending on the card network) to evaluate the evidence and decide the outcome.\n\nThe full lifecycle of a dispute, from initiation to the final decision from the issuer, can take as long as 2-3 months to complete. There are no actions a business can take to reliably accelerate this timeline, other than to decline to contest the dispute by accepting it in the Dashboard or API.\n\nAt the completion of the dispute process, the issuer either overturns the dispute in your favor or upholds the dispute in their cardholder’s favor.\n\nIf the issuer overturns the dispute, they return the debited chargeback amount to Stripe, and Stripe passes this amount back to you.\n\nIf the issuer upholds the dispute, nothing changes from your perspective and no money moves—Stripe credited the issuer when they initiated the chargeback. The issuer will return the funds to the cardholder at some point during—or even after—this process. The timing of the cardholder’s credit is entirely at the issuer’s discretion.\n\n### Dispute fees![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe dispute fee for your country can be found [on the Stripe Pricing page](https://www.stripe.com/pricing). This fee is deducted from your account balance when a cardholder initiates a dispute.\n\nFor businesses outside Mexico, the dispute fee is nonrefundable. For businesses in Mexico, the dispute fee for a won or withdrawn dispute might be returned.\n\nFor businesses in the [Single Euro Payments Area (SEPA)](https://en.wikipedia.org/wiki/Single_Euro_Payments_Area), cards processed on the [Cartes Bancaires network](https://docs.stripe.com/payments/cartes-bancaires) incur no dispute fee.\n\n### Responding to a dispute![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn most cases, you have the ability to challenge a disputed payment, as long as you submit strong evidence to the card issuer that invalidates the dispute claim before the deadline.\n\n**As soon as a dispute is active, the only way to overturn it is by submitting evidence in a response.** Even in cases where your customer claims to have [withdrawn the dispute](https://docs.stripe.com/disputes/withdrawing), you must respond with evidence for the dispute to be closed in your favor. Submitting evidence is what signals to the issuer that you don’t accept the dispute and want to have the funds returned to you.\n\nSee [Responding to disputes](https://docs.stripe.com/disputes/responding) for information on how to:\n\n*   Review the cardholder’s claim\n*   Evaluate whether to accept or challenge the dispute\n*   Gather appropriate evidence to respond to the dispute\n*   Use the Dashboard or API to submit your response\n\n### Unchallengeable disputes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can’t challenge some types of disputes under the rules of the card network they were processed on. In general, Stripe immediately closes them as lost as soon as we notify you about them, and you have no opportunity to present evidence to the issuer.\n\nThe Dashboard payment page and timeline describes these disputes as those where the card issuer doesn’t allow you to submit evidence.\n\n*   [Inquiries](#inquiries) for Discover cards can turn into unchallengeable disputes if you don’t submit evidence for the inquiry.\n*   The Cartes Bancaires network requires a higher standard of evidence from the cardholder before allowing them to initiate a dispute, but then prohibits you from challenging the dispute. This affects only businesses in the [Single Euro Payments Area (SEPA)](https://en.wikipedia.org/wiki/Single_Euro_Payments_Area) processing payments on the Cartes Bancaires network, and not businesses elsewhere charging cards _issued_ by Cartes Bancaires. Learn more at [Cartes Bancaires](https://docs.stripe.com/payments/cartes-bancaires).\n\n### Receiving multiple disputes per payment ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn extremely rare cases, you might receive more than one dispute per payment. This can happen when a customer files a new dispute with a different reason code, for a new line item in the original transaction, on multi-capture payments or simply because the issuer acquired new information about the payment allowing them to refile a dispute.\n\nHandle each dispute the same way as any other dispute; each dispute requires you to either accept or counter the dispute. Pay special attention to the outlined amount, currency, category, and claim details before managing the dispute. [Learn more here](https://support.stripe.com/questions/receiving-multiple-disputes-per-payment-faq).\n\n### Disputed amount![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA disputed amount might be lower or higher than the amount of the original charge. The following table outlines some of the most common reasons for this difference.\n\n| Scenario | Description | Example |\n| --- | --- | --- |\n| Currency conversion | If the currency of the payment requires conversion (for example, when the currency of the seller differs from that of the buyer), the conversion rate at the time of the purchase is likely different from the rate at dispute initiation, which causes the converted dispute amount to differ from the original transaction amount. | In January, a purchase from a business based in Ireland for 100 EUR by a customer in the United States converts to a payment on the customer’s USD account of 113.74 USD. In April, the customer disputes the 113.74 USD payment, but the exchange rate has changed, so the 113.74 USD chargeback is now 107.86 EUR to the business instead of the original 100 EUR. |\n| Recurring payments | Sometimes, when an account owner disputes multiple payments within a recurring subscription plan, their bank creates a single dispute for the total amount against one of the charges. This can also happen with non-recurring payments, but is rare. | An account owner disputes three 50 USD recurring charges, but the bank issues a dispute of 150 USD against one of the three payments. |\n| Partial disputes | An account owner disputes only a portion of the total transaction amount. | A purchase of multiple products contains a single damaged item, so the account owner files a dispute to be reimbursed for only that item. |\n| Partially refunded charges | A business partially refunded a payment, but the account owner disputes the entire payment. See our [Disputes on partially refunded payments best practice](https://docs.stripe.com/disputes/best-practices#partial-refund-bp) for more information about submitting evidence to counter this kind of dispute. | An account owner contacts a business directly and the business refunds a portion of the original purchase because one of several items in the purchase is damaged. The account owner then disputes the entire purchase amount. |\n\n## After the decision![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you submit your evidence, the next notification from the card issuer to both Stripe and you is the final decision. Stripe updates the status of the dispute to `won` or `lost` and notifies you through the Stripe Dashboard, email, and any other configured communication channels as soon as the issuer makes its decision clear.\n\nThis outcome is final for all parties. You can’t overturn a lost dispute, but your customer also can’t overturn a dispute decided in your favor. (It should still be possible, even after a loss, for a customer to change their mind and [withdraw the dispute](https://docs.stripe.com/disputes/withdrawing).)\n\n#### Arbitration\n\nSome card networks support an arbitration phase for lost disputes that carries a substantial fee of around 500 USD, but Stripe doesn’t support this dispute phase.\n\n* * *",
  "title": "How disputes work | Stripe Documentation",
  "description": "Learn about the high level lifecycle of payment card disputes.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/components/contextview",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nThe root view of your app must be a `ContextView`.\n\nThese in-context modules allow the app to meet users in their existing workflows and provide contextual information and actions.\n\nA user’s interaction with an app always begins with a view type called a `ContextView` view. Each app must have a single `ContextView` view (per [viewport](https://docs.stripe.com/stripe-apps/reference/viewports)), which acts as the default view when the page loads (similar to the `index.html` of a website).\n\n![ContextView in an application](https://b.stripecdn.com/docs-statics-srv/assets/contextview-2.b7a229ed709708c7e83e700396b82327.png)\n\nWhat ContextView looks like\n\n#### Note\n\nTo create a view within an existing `ContextView`, see [FocusView](https://docs.stripe.com/stripe-apps/components/focusview).\n\n### ContextView props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `children` | Required<br><br>`React.ReactNode`<br><br>The contents of the component. |\n| `title` | Required<br><br>`string`<br><br>The title of the ContextView. This will be displayed at the top of the drawer under that app’s name. |\n| `actions` | Optional<br><br>`React.ReactNode`<br><br>A React fragment containing up to three Buttons that will be displayed directly under the header and above the children of the ContextView. |\n| `banner` | Optional<br><br>`React.ReactElement \\| undefined`<br><br>A Banner component that will be displayed directly under the header and above the children of the ContextView. |\n| `brandColor` | Optional<br><br>`string \\| undefined`<br><br>A CSS color that contrasts well with `brandIcon`. |\n| `brandIcon` | Optional<br><br>`string \\| undefined`<br><br>A square, 1-color SVG that contrasts well with `brandColor`. |\n| `description` | Optional<br><br>`string \\| undefined`<br><br>A description of the view’s purpose, can also be used as a subtitle. |\n| `externalLink` | Optional<br><br>`ExternalLink \\| undefined`<br><br>A link to an external webpage. This should generally allow the user to view related information on another site with more context than what the app makes available in the app drawer.<br><br>Related types: [ExternalLink](#externallink). |\n| `footerContent` | Optional<br><br>`React.ReactNode`<br><br>React node adjacent to any actions in the footer. |\n| `primaryAction` | Optional<br><br>`React.ReactElement \\| undefined`<br><br>A primary call to action (“Save” or “Continue”) button placed in the footer. |\n| `secondaryAction` | Optional<br><br>`React.ReactElement \\| undefined`<br><br>A secondary call to action (“Cancel”) button placed in the footer. |\n\n### ExternalLink![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `href` | Required<br><br>`string`<br><br>URL of an external link. |\n| `label` | Required<br><br>`string`<br><br>Label of an external link. |\n\n## Example![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`import {   Box,   Button,   ContextView, } from '@stripe/ui-extension-sdk/ui';  import appIcon from './icon.svg';  const HappyView = () => (   <ContextView     title=\"Get started with Stripe Apps\"     actions={       <>         <Button>Action 1</Button>         <Button>Action 2</Button>       </>     }     brandColor=\"#635bff\"     brandIcon={appIcon}   >     <Box>       Example Content     </Box>   </ContextView> );`",
  "title": "ContextView | Stripe Documentation",
  "description": "ContextView allows apps to render next to Stripe content in a drawer so users can look at them side by side and share context.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/components/datefield",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nTo add the `DateField` component to your app:\n\n`import {DateField} from '@stripe/ui-extension-sdk/ui';`\n\nThe following shows a preview of a `DateField` component with a label and a description:\n\n`<DateField   label=\"Date of birth\"   description=\"Enter your birthday\" />`\n\n### DateField props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `defaultValue` | Optional<br><br>`string \\| undefined`<br><br>Specifies the initial value that a user can change. |\n| `description` | Optional<br><br>`string \\| undefined`<br><br>Descriptive text that will be rendered adjacent to the control’s label. |\n| `disabled` | Optional<br><br>`boolean \\| undefined`<br><br>Sets whether or not the element should be disabled. Prevents selection. |\n| `error` | Optional<br><br>`string \\| undefined`<br><br>Error text that will be rendered below the control. |\n| `hiddenElements` | Optional<br><br>`(\"label\" \\| \"description\" \\| \"error\")[] \\| undefined`<br><br>Visually hides the specified elements. The hidden elements will still be present and visible to screen readers. |\n| `invalid` | Optional<br><br>`boolean \\| undefined`<br><br>Sets whether or not the element is in an invalid state. This is a display-only prop, and will not prevent form submission. |\n| `label` | Optional<br><br>`React.ReactNode`<br><br>Text that describes the control. Will be both visible and clickable. |\n| `onChange` | Optional<br><br>`((event: { target: { value: string; }; }) => void) \\| undefined`<br><br>An onChange-alike event that fires only when the change results in a valid date. Identical behavior to `<input type=\"date\" />`. |\n| `size` | Optional<br><br>`(\"small\" \\| \"medium\" \\| \"large\") \\| undefined`<br><br>The size of the component. |\n| `value` | Optional<br><br>`string \\| undefined`<br><br>Controls the input’s text. When you pass this prop, you must also pass an `onChange` handler that updates the passed value. |\n\n## Size![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA `DateField` at each size will match a `TextField` at that same size. However, you can’t make a date input wider in the same way that you can `TextField`.\n\n`<DateField   label=\"Date of birth (small)\"   description=\"Enter your birthday\"   size=\"small\" /> <DateField   label=\"Date of birth (medium)\"   description=\"Enter your birthday\"   size=\"medium\" /> <DateField   label=\"Date of birth (large)\"   description=\"Enter your birthday\"   size=\"large\" />`\n\n## Error![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can provide an error message to indicate a problem with the date.\n\n`<DateField   label=\"Date of birth\"   description=\"Enter your birthday\"   defaultValue=\"2099-02-31\"   invalid   error=\"Invalid birthday\" />`\n\n## Disabled![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nDisable a `DateField` if the user shouldn’t modify it.\n\n`<DateField   label=\"Date of birth\"   description=\"Enter your birthday\"   defaultValue=\"2011-09-01\"   disabled />`\n\n## Hide elements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can visually hide elements of the `DateField` component, such as the label or description, while maintaining accessibility for screen readers.\n\n`<DateField   label=\"Date of birth\"   description=\"Enter your birthday\"   defaultValue=\"2011-09-01\"   hiddenElements={['description', 'label']} />`\n\n## Events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `onChange` prop works similarly to a native `<input type=\"date\" />` HTML element. It only returns a value when it’s a valid date. This means that the `onChange` handler won’t be called on every keystroke, and a `DateField` can’t be a [controlled input](https://reactjs.org/docs/forms.html#controlled-components).\n\n`<DateField   label=\"Date of birth\"   description=\"Enter your birthday\"   onChange={(e) => {     console.log(e.target.value);   }} />`\n\nEvent props (beginning with `on`) besides `onChange` fire independently for each of the three sections of the `DateField` component: year, month, and day.\n\n`<DateField   label=\"Date of birth\"   description=\"Enter your birthday\"   onFocus={(e) => {     console.log('focus', e);   }}   onBlur={(e) => {     console.log('blur', e);   }}   onKeyPress={(e) => {     console.log('keypress', e);   }}   onKeyDown={(e) => {     console.log('keydown', e);   }}   onKeyUp={(e) => {     console.log('keyup', e);   }} />`",
  "title": "DateField | Stripe Documentation",
  "description": "Use the DateField component to collect date information from users.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/components/divider",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nTo add the `Divider` component to your app:\n\n`import {Divider} from '@stripe/ui-extension-sdk/ui';`\n\nThis component has no props.",
  "title": "Divider | Stripe Documentation",
  "description": "Render a simple horizontal rule with the divider component.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/components/formfieldgroup",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nTo add the `FormFieldGroup` component to your app:\n\n`import {FormFieldGroup} from '@stripe/ui-extension-sdk/ui';`\n\n`<FormFieldGroup legend=\"Full name\" description=\"Enter your full name\">   <TextField label=\"First name\" placeholder=\"First name\" hiddenElements={['label']} />   <TextField label=\"Last name\" placeholder=\"Last name\" hiddenElements={['label']} /> </FormFieldGroup>`\n\n### FormFieldGroup props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `children` | Required<br><br>`React.ReactNode`<br><br>The contents of the component. |\n| `description` | Optional<br><br>`string \\| undefined`<br><br>Descriptive text that will be rendered adjacent to the group’s legend. |\n| `disabled` | Optional<br><br>`boolean \\| undefined`<br><br>Disables all fields in the group. Can be overriden on a per-field basis. |\n| `layout` | Optional<br><br>`(\"row\" \\| \"column\") \\| undefined`<br><br>The layout of the fields in the group. |\n| `legend` | Optional<br><br>`string \\| undefined`<br><br>The text of the group’s legend. This will be associated as a label with all fields inside the group. |\n| `invalid` | OptionalDeprecated<br><br>`boolean \\| undefined`<br><br>Marks the group as invalid. Note that this is a visual-only property, and won’t prevent submission. |\n\n## Layouts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA `FormFieldGroup` component can support different layouts:\n\n*   `row`\n*   `column`\n\nThis is a preview of a `FormFieldGroup` component with two text fields in a `row` layout:\n\n`<FormFieldGroup legend=\"Full name\" description=\"Enter your full name\">   <TextField label=\"First name\" placeholder=\"First name\" hiddenElements={['label']} />   <TextField label=\"Last name\" placeholder=\"Last name\" hiddenElements={['label']} /> </FormFieldGroup>`\n\nThis is a preview of a `FormFieldGroup` component with two text fields in a `column` layout:\n\n`<FormFieldGroup legend=\"Spiffy settings\" layout=\"column\">     <Switch label=\"Enable transmogrifier\" description=\"Scientific progress goes 'boink'\" />     <Switch label=\"Set zorcher on 'shake and bake'\" description=\"Note: blasters may be useless against slime\" />   </FormFieldGroup>`\n\n## States ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nA state is a way to display the usability and validity of the form to the user. A `FormFieldGroup` component can have different types of states:\n\n*   `invalid`\n*   `disabled`\n\n### Invalid state ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can mark a `FormFieldGroup` component as `invalid` to show a user that their input values are incorrect. If the `FormFieldGroup` component is `invalid`, the `invalid` state doesn’t also apply to dependent child controls. Consequently, you must add errors to these child components manually by adding an `invalid` property to them.\n\n`<FormFieldGroup legend=\"Full name\" description=\"Enter your full name\" invalid>   <TextField label=\"First name\" value=\"Tim\" placeholder=\"First name\" hiddenElements={['label']} />   <TextField label=\"Last name\" error=\"Last name missing\" placeholder=\"Last name\" hiddenElements={['label']} /> </FormFieldGroup>`\n\n### Disabled state ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can mark a `FormFieldGroup` component as `disabled`, which disables all the fields within it. You can override the `disabled` state on a per-field basis within the `FormFieldGroup` by adding a `disabled={false}` property to the field.\n\n`<FormFieldGroup legend=\"Disabling\" disabled>   <TextField label=\"Disabled\" placeholder=\"Disabled\" hiddenElements={['label']} />   <TextField label=\"Not disabled\" placeholder=\"Not disabled\" disabled={false} hiddenElements={['label']} /> </FormFieldGroup>`",
  "title": "FormFieldGroup | Stripe Documentation",
  "description": "Group form fields with the FormFieldGroup component.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/components/img",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nTo add an image to your app:\n\n1.  Import the `Img` component:\n\n`import {Img} from '@stripe/ui-extension-sdk/ui';`\n\n1.  Include the base URLs of any images you include in the `image-src` section of the `content_security_policy` in your [app manifest](https://docs.stripe.com/stripe-apps/reference/app-manifest \"app manifest\").\n\nThe following shows a preview of an image with the respective `Img` tag below:\n\n### Img props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `alt` | Optional<br><br>`string \\| undefined`<br><br>The alternative text of the image. |\n| `crossOrigin` | Optional<br><br>`\"anonymous\" \\| undefined`<br><br>Cross-origin support for the image. |\n| `height` | Optional<br><br>`(string \\| number) \\| undefined`<br><br>The height of the image. |\n| `sizes` | Optional<br><br>`string \\| undefined`<br><br>The sizes of the image (for use with srcSet). |\n| `src` | Optional<br><br>`string \\| undefined`<br><br>The source of the image. |\n| `srcSet` | Optional<br><br>`string \\| undefined`<br><br>The source set of the image. |\n| `width` | Optional<br><br>`(string \\| number) \\| undefined`<br><br>The width of the image. |\n\n## SrcSet![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use `srcSet` for [responsive images](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images).\n\nThe example below uses the `size` attribute to define the maximum width of the specified image:\n\n## Data URLs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can co-locate images with your UI extension code and load them directly into the `Img` component. Supported formats are GIF, JPEG, SVG, PNG, and WEBP.\n\nWe recommend using SVG for most common use-cases like icons and other way finding illustrations. You must include the suffix of the image in the `require` or `import` statement.\n\n`const CommunityIcon = require('./community-icon.svg') <Img   width=\"75\"   height=\"75\"   src={CommunityIcon}   alt=\"Community\" />`\n\n## Styling![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can achieve certain styling effects for `Img` components by wrapping them with a styled [Box](https://docs.stripe.com/stripe-apps/components/box) component.\n\n### Borders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo add a [border](https://docs.stripe.com/stripe-apps/style#borders) to an `Img`, use the CSS `keyline` property, along with `width` and `display` to contain the image:\n\n`<Box   css={{     keyline: \"critical\",     width: \"fit\",     stack: 'x',   }} >   <Img     src=\"https://images.example.com/margin.svg\"     width=\"484\"     height=\"207\"     alt=\"Gross margin\"   /> </Box>`\n\n### Rounded corners![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo add rounded corners to an `Img`, use the CSS `borderRadius` property, along with `overflow`, `width`, and `display` to contain the image:\n\n`<Box   css={{     borderRadius: 'rounded',     overflow: 'hidden',     width: 'fit',     stack: 'x',   }} >   <Img     src=\"https://images.example.com/margin.svg\"     width=\"484\"     height=\"207\"     alt=\"Gross margin\"   /> </Box>`",
  "title": "Img | Stripe Documentation",
  "description": "Display images with the Img UI component.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/components/inline",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n`alignSelfX`\n\nOptional\n\n`(\"start\" | \"center\" | \"end\" | \"stretch\") | undefined`\n\nHorizontal alignment. See [Layout properties](https://docs.stripe.com/stripe-apps/style#layout-properties) for details.\n\n`alignSelfY`\n\nOptional\n\n`(\"top\" | \"center\" | \"baseline\" | \"bottom\" | \"stretch\") | undefined`\n\nVertical alignment. See [Layout properties](https://docs.stripe.com/stripe-apps/style#layout-properties) for details.\n\n`alignX`\n\nOptional\n\n`(\"start\" | \"center\" | \"end\" | \"stretch\") | undefined`\n\nHorizontal alignment. See [Layout properties](https://docs.stripe.com/stripe-apps/style#layout-properties) for details.\n\n`alignY`\n\nOptional\n\n`(\"top\" | \"center\" | \"baseline\" | \"bottom\" | \"stretch\") | undefined`\n\nVertical alignment. See [Layout properties](https://docs.stripe.com/stripe-apps/style#layout-properties) for details.\n\n`backgroundColor`\n\nOptional\n\n`(\"container\" | \"surface\") | undefined`\n\n`bleed`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`bleedBottom`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`bleedLeft`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`bleedRight`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`bleedTop`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`bleedX`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`bleedY`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`borderBottomLeftRadius`\n\nOptional\n\n`(\"none\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"rounded\") | undefined`\n\n`borderBottomRightRadius`\n\nOptional\n\n`(\"none\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"rounded\") | undefined`\n\n`borderRadius`\n\nOptional\n\n`(\"none\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"rounded\") | undefined`\n\n`borderTopLeftRadius`\n\nOptional\n\n`(\"none\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"rounded\") | undefined`\n\n`borderTopRightRadius`\n\nOptional\n\n`(\"none\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"rounded\") | undefined`\n\n`bottom`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`boxShadow`\n\nOptional\n\n`(\"none\" | \"base\" | \"top\" | \"hover\" | \"focus\") | undefined`\n\n`color`\n\nOptional\n\n`(\"brand\" | \"primary\" | \"secondary\" | \"disabled\" | \"info\" | \"success\" | \"attention\" | \"critical\") | undefined`\n\n`columnGap`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`display`\n\nOptional\n\n`\"grid\" | undefined`\n\n`distribute`\n\nOptional\n\n`(\"packed\" | \"space-between\") | undefined`\n\n`fill`\n\nOptional\n\n`(\"brand\" | \"primary\" | \"secondary\" | \"disabled\" | \"info\" | \"success\" | \"attention\" | \"critical\") | undefined`\n\n`focusRing`\n\nOptional\n\n`(\"none\" | \"base\" | \"top\" | \"hover\" | \"focus\") | undefined`\n\n`font`\n\nOptional\n\n`(\"body\" | \"bodyEmphasized\" | \"caption\" | \"heading\" | \"kicker\" | \"lead\" | \"subheading\" | \"subtitle\" | \"title\") | undefined`\n\n`fontFamily`\n\nOptional\n\n`(\"monospace\" | \"ui\") | undefined`\n\n`fontWeight`\n\nOptional\n\n`(\"regular\" | \"semibold\" | \"bold\") | undefined`\n\n`gap`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`gapX`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`gapY`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`gridColumns`\n\nOptional\n\n`number | undefined`\n\n`height`\n\nOptional\n\n[fractional sizing token](https://docs.stripe.com/stripe-apps/style#sizing)\n\nThe height of the component. See [Sizing](https://docs.stripe.com/stripe-apps/style#sizing) for details.\n\n`inset`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`keyline`\n\nOptional\n\n`(\"neutral\" | \"critical\") | undefined`\n\n`left`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`margin`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`marginBottom`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`marginLeft`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`marginRight`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`marginTop`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`marginX`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`marginY`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`maxHeight`\n\nOptional\n\n[fractional sizing token](https://docs.stripe.com/stripe-apps/style#sizing)\n\nThe height of the component. See [Sizing](https://docs.stripe.com/stripe-apps/style#sizing) for details.\n\n`maxWidth`\n\nOptional\n\n[fractional sizing token](https://docs.stripe.com/stripe-apps/style#sizing)\n\nThe width of the component. See [Sizing](https://docs.stripe.com/stripe-apps/style#sizing) for details.\n\n`minHeight`\n\nOptional\n\n[fractional sizing token](https://docs.stripe.com/stripe-apps/style#sizing)\n\nThe height of the component. See [Sizing](https://docs.stripe.com/stripe-apps/style#sizing) for details.\n\n`minTileWidth`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`minWidth`\n\nOptional\n\n[fractional sizing token](https://docs.stripe.com/stripe-apps/style#sizing)\n\nThe width of the component. See [Sizing](https://docs.stripe.com/stripe-apps/style#sizing) for details.\n\n`overflow`\n\nOptional\n\n`(\"visible\" | \"hidden\" | \"clip\" | \"scroll\" | \"auto\") | undefined`\n\n`overflowWrap`\n\nOptional\n\n`(\"break-word\" | \"normal\") | undefined`\n\n`overflowX`\n\nOptional\n\n`(\"visible\" | \"hidden\" | \"clip\" | \"scroll\" | \"auto\") | undefined`\n\n`overflowY`\n\nOptional\n\n`(\"visible\" | \"hidden\" | \"clip\" | \"scroll\" | \"auto\") | undefined`\n\n`padding`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`paddingBottom`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`paddingLeft`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`paddingRight`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`paddingTop`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`paddingX`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`paddingY`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`rowGap`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`stack`\n\nOptional\n\n`(\"x\" | \"y\" | \"z\") | undefined`\n\n`textAlign`\n\nOptional\n\n`(\"center\" | \"end\" | \"justify\" | \"left\" | \"match-parent\" | \"right\" | \"start\") | undefined`\n\n`textOverflow`\n\nOptional\n\n`\"ellipsis\" | undefined`\n\n`textTransform`\n\nOptional\n\n`(\"capitalize\" | \"uppercase\" | \"lowercase\" | \"none\" | \"full-width\" | \"full-size-kana\") | undefined`\n\n`top`\n\nOptional\n\n`(number | \"xxsmall\" | \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"xxlarge\") | undefined`\n\n`topShadow`\n\nOptional\n\n`(\"none\" | \"base\" | \"top\" | \"hover\" | \"focus\") | undefined`\n\n`whiteSpace`\n\nOptional\n\n`(\"normal\" | \"nowrap\" | \"pre\" | \"pre-wrap\" | \"pre-line\" | \"break-spaces\") | undefined`\n\n`width`\n\nOptional\n\n[fractional sizing token](https://docs.stripe.com/stripe-apps/style#sizing)\n\nThe width of the component. See [Sizing](https://docs.stripe.com/stripe-apps/style#sizing) for details.\n\n`wordBreak`\n\nOptional\n\n`(\"normal\" | \"break-all\" | \"keep-all\" | \"break-word\") | undefined`\n\n`wordWrap`\n\nOptional\n\n`(\"break-word\" | \"normal\") | undefined`\n\n`wrap`\n\nOptional\n\n`(\"wrap\" | \"nowrap\" | \"wrap-reverse\") | undefined`\n\n`zIndex`\n\nOptional\n\n`(\"overlay\" | \"partial\") | undefined`\n\n`background`\n\nOptionalDeprecated\n\nUse the `backgroundColor` property instead.\n\n`(\"container\" | \"surface\") | undefined`\n\n`borderBottomColor`\n\nOptionalDeprecated\n\nUse the `keyline` property instead.\n\n`(\"neutral\" | \"critical\") | undefined`\n\n`borderColor`\n\nOptionalDeprecated\n\nUse the `keyline` property instead.\n\n`(\"neutral\" | \"critical\") | undefined`\n\n`borderLeftColor`\n\nOptionalDeprecated\n\nUse the `keyline` property instead.\n\n`(\"neutral\" | \"critical\") | undefined`\n\n`borderRightColor`\n\nOptionalDeprecated\n\nUse the `keyline` property instead.\n\n`(\"neutral\" | \"critical\") | undefined`\n\n`borderTopColor`\n\nOptionalDeprecated\n\nUse the `keyline` property instead.\n\n`(\"neutral\" | \"critical\") | undefined`\n\n`isolatedDependencies`\n\nOptionalDeprecated\n\n`string[] | undefined`\n\n`layout`\n\nOptionalDeprecated\n\nUse the `stack` property instead.\n\n`(\"column\" | \"inline\" | \"row\" | \"inline-column\" | \"inline-row\") | undefined`\n\n`when`\n\nOptionalDeprecated\n\nUse nested styles instead.\n\n`(string | { pointer: \"none\" | \"coarse\" | \"fine\"; colorScheme: \"dark\" | \"light\"; motion: \"supported\" | \"reduced\"; hover: \"none\" | \"hover\"; viewportWidth: \"small\" | \"medium\" | \"large\" | \"xlarge\"; contrast: \"more\" | \"less\"; }[] | { pointer: \"none\" | \"coarse\" | \"fine\"; colorScheme: \"dark\" | \"light\"; motion: \"supported\" | \"reduced\"; hover: \"none\" | \"hover\"; viewportWidth: \"small\" | \"medium\" | \"large\" | \"xlarge\"; contrast: \"more\" | \"less\"; }) | undefined`",
  "title": "Inline | Stripe Documentation",
  "description": "The inline component is used to style inline content such as text.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/components/linechart",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## LineChart\n\n## A line chart visualizes data as a series of data points connected into a line.\n\nTo add the `LineChart` component to your app:\n\n`import {LineChart} from '@stripe/ui-extension-sdk/ui';`\n\nThe following shows a preview of the `LineChart` UI component:\n\n`const sales = [   {     date: 'Jan',     sold: 1   },   {     date: 'Feb',     sold: 4   },   {     date: 'Mar',     sold: 2   },   {     date: 'Apr',     sold: 3   } ];  <LineChart data={sales} x=\"date\" y=\"sold\" />`\n\n### LineChart props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `data` | Required<br><br>`{ [x: string]: any; }[]`<br><br>The data used to generate the chart. |\n| `x` | Required<br><br>`string \\| number \\| Channel`<br><br>The property or accessor for the point on the x axis.<br><br>Related types: [Channel](#channel). |\n| `y` | Required<br><br>`string \\| number \\| Channel`<br><br>The property or accessor for the point on the y axis.<br><br>Related types: [Channel](#channel). |\n| `axis` | Optional<br><br>`(\"x\" \\| \"y\" \\| \"both\" \\| \"none\") \\| undefined`<br><br>Determines whether to render labels and ticks for each axis. |\n| `color` | Optional<br><br>`(string \\| number \\| ColorChannel) \\| undefined`<br><br>Groups data by color based on a property or accessor.<br><br>Related types: [ColorChannel](#colorchannel). |\n| `grid` | Optional<br><br>`(\"x\" \\| \"y\" \\| \"both\" \\| \"none\") \\| undefined`<br><br>Determines whether to render grid lines for each axis. |\n| `legend` | Optional<br><br>`boolean \\| undefined`<br><br>Determines whether to render the legend (when more than one item is present). |\n| `tooltip` | Optional<br><br>`boolean \\| undefined`<br><br>Determines whether to render a tooltip when hovering over the chart. |\n| `z` | Optional<br><br>`(string \\| number \\| Channel) \\| undefined`<br><br>Groups data based on a property or accessor.<br><br>Related types: [Channel](#channel). |\n\n### Channel![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `domain` | Optional<br><br>`any[] \\| undefined` |\n| `format` | Optional<br><br>`((Currency \\| UnitIdentifier) \\| (\"capitalize\" \\| { [x: string]: string; })) \\| undefined`<br><br>Related types: [Currency](#currency), [UnitIdentifier](#unitidentifier). |\n| `label` | Optional<br><br>`string \\| undefined` |\n| `range` | Optional<br><br>`any[] \\| undefined` |\n| `value` | Optional<br><br>`(string \\| number) \\| undefined` |\n\n### Currency![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `currency` | Required<br><br>`'AED' \\| 'AFN' \\| 'ALL' \\| 'AMD' \\| 'ANG' \\| 'AOA' \\| 'ARS' \\| 'AUD' \\| 'AWG' \\| 'AZN' \\| 'BAM' \\| 'BBD' \\| 'BDT' \\| 'BGN' \\| 'BHD' \\| 'BIF' \\| 'BMD' \\| 'BND' \\| 'BOB' \\| 'BRL' \\| 'BSD' \\| 'BTN' \\| 'BWP' \\| 'BYN' \\| 'BZD' \\| 'CAD' \\| 'CDF' \\| 'CHF' \\| 'CLP' \\| 'CNY' \\| 'COP' \\| 'CRC' \\| 'CUC' \\| 'CUP' \\| 'CVE' \\| 'CZK' \\| 'DJF' \\| 'DKK' \\| 'DOP' \\| 'DZD' \\| 'EGP' \\| 'ERN' \\| 'ETB' \\| 'EUR' \\| 'FJD' \\| 'FKP' \\| 'GBP' \\| 'GEL' \\| 'GHS' \\| 'GIP' \\| 'GMD' \\| 'GNF' \\| 'GTQ' \\| 'GYD' \\| 'HKD' \\| 'HNL' \\| 'HRK' \\| 'HTG' \\| 'HUF' \\| 'IDR' \\| 'ILS' \\| 'INR' \\| 'IQD' \\| 'IRR' \\| 'ISK' \\| 'JMD' \\| 'JOD' \\| 'JPY' \\| 'KES' \\| 'KGS' \\| 'KHR' \\| 'KMF' \\| 'KPW' \\| 'KRW' \\| 'KWD' \\| 'KYD' \\| 'KZT' \\| 'LAK' \\| 'LBP' \\| 'LKR' \\| 'LRD' \\| 'LSL' \\| 'LYD' \\| 'MAD' \\| 'MDL' \\| 'MGA' \\| 'MKD' \\| 'MMK' \\| 'MNT' \\| 'MOP' \\| 'MRU' \\| 'MUR' \\| 'MVR' \\| 'MWK' \\| 'MXN' \\| 'MYR' \\| 'MZN' \\| 'NAD' \\| 'NGN' \\| 'NIO' \\| 'NOK' \\| 'NPR' \\| 'NZD' \\| 'OMR' \\| 'PAB' \\| 'PEN' \\| 'PGK' \\| 'PHP' \\| 'PKR' \\| 'PLN' \\| 'PYG' \\| 'QAR' \\| 'RON' \\| 'RSD' \\| 'RUB' \\| 'RWF' \\| 'SAR' \\| 'SBD' \\| 'SCR' \\| 'SDG' \\| 'SEK' \\| 'SGD' \\| 'SHP' \\| 'SLL' \\| 'SOS' \\| 'SRD' \\| 'SSP' \\| 'STN' \\| 'SYP' \\| 'SZL' \\| 'THB' \\| 'TJS' \\| 'TMT' \\| 'TND' \\| 'TOP' \\| 'TRY' \\| 'TTD' \\| 'TWD' \\| 'TZS' \\| 'UAH' \\| 'UGX' \\| 'USD' \\| 'UYU' \\| 'UZS' \\| 'VES' \\| 'VND' \\| 'VUV' \\| 'WST' \\| 'XAF' \\| 'XCD' \\| 'XOF' \\| 'XPF' \\| 'YER' \\| 'ZAR' \\| 'ZMW'` |\n\n### UnitIdentifier![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `unit` | Required<br><br>`` 'acre' \\| 'bit' \\| 'byte' \\| 'celsius' \\| 'centimeter' \\| 'day' \\| 'degree' \\| 'fahrenheit' \\| 'fluid-ounce' \\| 'foot' \\| 'gallon' \\| 'gigabit' \\| 'gigabyte' \\| 'gram' \\| 'hectare' \\| 'hour' \\| 'inch' \\| 'kilobit' \\| 'kilobyte' \\| 'kilogram' \\| 'kilometer' \\| 'liter' \\| 'megabit' \\| 'megabyte' \\| 'meter' \\| 'mile' \\| 'mile-scandinavian' \\| 'milliliter' \\| 'millimeter' \\| 'millisecond' \\| 'minute' \\| 'month' \\| 'ounce' \\| 'percent' \\| 'petabyte' \\| 'pound' \\| 'second' \\| 'stone' \\| 'terabit' \\| 'terabyte' \\| 'week' \\| 'yard' \\| 'year' \\| `${'acre' \\| 'bit' \\| 'byte' \\| 'celsius' \\| 'centimeter' \\| 'day' \\| 'degree' \\| 'fahrenheit' \\| 'fluid-ounce' \\| 'foot' \\| 'gallon' \\| 'gigabit' \\| 'gigabyte' \\| 'gram' \\| 'hectare' \\| 'hour' \\| 'inch' \\| 'kilobit' \\| 'kilobyte' \\| 'kilogram' \\| 'kilometer' \\| 'liter' \\| 'megabit' \\| 'megabyte' \\| 'meter' \\| 'mile' \\| 'mile-scandinavian' \\| 'milliliter' \\| 'millimeter' \\| 'millisecond' \\| 'minute' \\| 'month' \\| 'ounce' \\| 'percent' \\| 'petabyte' \\| 'pound' \\| 'second' \\| 'stone' \\| 'terabit' \\| 'terabyte' \\| 'week' \\| 'yard' \\| 'year'}-per-${'acre' \\| 'bit' \\| 'byte' \\| 'celsius' \\| 'centimeter' \\| 'day' \\| 'degree' \\| 'fahrenheit' \\| 'fluid-ounce' \\| 'foot' \\| 'gallon' \\| 'gigabit' \\| 'gigabyte' \\| 'gram' \\| 'hectare' \\| 'hour' \\| 'inch' \\| 'kilobit' \\| 'kilobyte' \\| 'kilogram' \\| 'kilometer' \\| 'liter' \\| 'megabit' \\| 'megabyte' \\| 'meter' \\| 'mile' \\| 'mile-scandinavian' \\| 'milliliter' \\| 'millimeter' \\| 'millisecond' \\| 'minute' \\| 'month' \\| 'ounce' \\| 'percent' \\| 'petabyte' \\| 'pound' \\| 'second' \\| 'stone' \\| 'terabit' \\| 'terabyte' \\| 'week' \\| 'yard' \\| 'year'}` `` |\n\n### ColorChannel![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `domain` | Optional<br><br>`any[] \\| undefined` |\n| `format` | Optional<br><br>`((Currency \\| UnitIdentifier) \\| (\"capitalize\" \\| { [x: string]: string; })) \\| undefined`<br><br>Related types: [Currency](#currency), [UnitIdentifier](#unitidentifier). |\n| `label` | Optional<br><br>`string \\| undefined` |\n| `value` | Optional<br><br>`(string \\| number) \\| undefined` |\n\n## Using color![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `color` channel groups data:\n\n`const sales = [   {     date: 'Jan',     sold: 1,     product: 'tables'   },   {     date: 'Jan',     sold: 2,     product: 'chairs'   },   {     date: 'Feb',     sold: 4,     product: 'tables'   },   {     date: 'Feb',     sold: 6,     product: 'chairs'   },   {     date: 'Mar',     sold: 2,     product: 'tables'   },   {     date: 'Mar',     sold: 4,     product: 'chairs'   },   {     date: 'Apr',     sold: 7,     product: 'tables',   },   {     date: 'Apr',     sold: 9,     product: 'chairs',   }, ];  <LineChart data={sales} x=\"date\" y=\"sold\" color=\"product\" />`\n\n## Axis and value formatting![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInstead of passing a string for an axis value, you can add richer formatting by passing an object including the `value`, `label` and/or `format` properties.\n\n| Property | Type |\n| --- | --- |\n| `value` | `string \\| number`<br><br>The property name in the data set. Required. |\n| `label` | `string`<br><br>The display text for the axis. |\n| `format` | `object`<br><br>Format a number with one of the [supported currency codes](https://raw.githubusercontent.com/unicode-org/cldr/main/common/validity/currency.xml) for example `{currency: 'USD'}`, or a [supported unit](https://tc39.es/proposal-unified-intl-numberformat/section6/locales-currencies-tz_proposed_out.html#sec-issanctionedsimpleunitidentifier) such as `{unit: 'minute'}`. You can also create a compound unit with `-per-` in between, such as `{unit: 'megabyte-per-hour'}`. |\n\n`<LineChart   data={[     {       date: 'January',       sold: 10,     },     {       date: 'February',       sold: 41,     },     {       date: 'March',       sold: 22,     },     {       date: 'April',       sold: 38,     },   ]}   x=\"date\"   y={{value: 'sold', label: 'Price', format: {currency: 'USD'}}} />`\n\n## Domain![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo set the minimum and maximum values of an axis, use the `domain` prop. For example, if you always want the `y` axis to go from 0 to 10 (rather than automatically adjusting to the data provided), add the `domain` property to your configuration:\n\n`const sales = [   {     date: 'Jan',     sold: 1,   },   {     date: 'Feb',     sold: 4,   },   {     date: 'Mar',     sold: 2,   },   {     date: 'Apr',     sold: 3,   }, ];  <LineChart   data={sales}   x=\"date\"   y={{value: 'sold', label: 'Sold', domain: [0, 10]}} />`",
  "title": "LineChart | Stripe Documentation",
  "description": "A line chart visualizes data as a series of data points connected into a line.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/components/link",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nTo add the `Link` component to your app:\n\n`import {Link} from '@stripe/ui-extension-sdk/ui';`\n\nStripe products have two types of links available: primary and secondary.\n\n### Link props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `children` | Required<br><br>`React.ReactNode`<br><br>The contents of the component. |\n| `css` | Optional<br><br>`Object`<br><br>Related types: [CSS](#css). |\n| `disabled` | Optional<br><br>`boolean \\| undefined`<br><br>Whether the action is disabled. |\n| `external` | Optional<br><br>`boolean \\| undefined`<br><br>Whether linking out to an external resource. |\n| `href` | Optional<br><br>`string \\| undefined`<br><br>Native `href` attribute. |\n| `onPress` | Optional<br><br>`((event: PressEvent) => void) \\| undefined`<br><br>Handler that is called when the press is released over the target. |\n| `rel` | Optional<br><br>`string \\| undefined`<br><br>Native `rel` attribute. |\n| `tabIndex` | Optional<br><br>`number \\| undefined`<br><br>Overrides the default Tab button behavior. Avoid using values other than `-1` and `0`. |\n| `target` | Optional<br><br>`(\"_self\" \\| \"_blank\" \\| \"_top\" \\| \"_parent\") \\| undefined`<br><br>Where to display the linked URL, as the name for a browsing context. |\n| `type` | Optional<br><br>`(\"primary\" \\| \"secondary\") \\| undefined`<br><br>The type of the link. |\n| `className` | OptionalDeprecated<br><br>`string \\| undefined` |\n\n### CSS![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Primary link![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe primary style is the default for links. Use it whenever linking out to external resources or to other pages within the application.\n\n## Secondary link![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse secondary links in the following situations:\n\n*   When a link would otherwise clash with another nearby primary button or link\n*   When a page presents many items that are each a link. Because a page full of primary links could be overwhelming, we use secondary links in these cases.\n*   When linking to an object like a Customer, Payment, Product, and so on. Wherever the UI refers to these objects, link them. Use the secondary style to eliminate visual clutter, as one page might link many objects. .\n\n## Disabled links![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Opening links in new tabs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## Allowed href values![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe href attribute supports relative and http or https URLs. Other values are sanitized at runtime.",
  "title": "Link | Stripe Documentation",
  "description": "Links are used for navigating users from one page to another, and for actions that need more subtlety than a button provides.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/components/list",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nTo add the `List` component to your app:\n\n`import {List, ListItem} from '@stripe/ui-extension-sdk/ui';`\n\nYou can use the `onAction` handler to respond to `press` events on list items.\n\n``<List   onAction={(id: string | number) => console.log(`Pressed row #${id}`)}   aria-label=\"Example of a List\" >   <ListItem     value=\"$100.00\"     id=\"1\"     title={<Box>Payment #1862</Box>}     secondaryTitle={<Box>customer@test.com</Box>}   />   <ListItem     value=\"$63.00\"     id=\"2\"     title={<Box>Payment #9273</Box>}     secondaryTitle={<Box>frank@example.com</Box>}   />   <ListItem     value=\"$7,471.62\"     id=\"3\"     title={<Box>Payment #643</Box>}     secondaryTitle={<Box>robert@google.com</Box>}   />   <ListItem     value=\"$871.01\"     id=\"4\"     title={<Box>Payment #123</Box>}     secondaryTitle={<Box>example@gmail.com</Box>}   /> </List>``\n\n### List props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `children` | Required<br><br>`React.ReactNode`<br><br>One or more ListItem components. |\n| `onAction` | Optional<br><br>`((id: React.Key) => void) \\| undefined`<br><br>Press event handler which receives the corresponding key of the list item that was pressed. |\n\n## List items![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nEvery list is made up of a collection of `ListItem` components. Uniquely identify each list item using the `key` prop.\n\n`<List   onAction={(id: string | number) => console.log(id)}   aria-label=\"Example of a List\" >   <ListItem id=\"apple\" title={<Box>Apple</Box>} />   <ListItem id=\"orange\" title={<Box>Orange</Box>} />   <ListItem id=\"banana\" title={<Box>Banana</Box>} /> </List>`\n\n### ListItem props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `icon` | Optional<br><br>`React.ReactNode`<br><br>Icon that appears to the left of the content and description. Will be overridden by `image` if both are present. |\n| `id` | Optional<br><br>`string \\| undefined`<br><br>The id of the item. This will be passed into the `onAction` handler of `List`. |\n| `image` | Optional<br><br>`React.ReactNode`<br><br>Image that appears to the left of the content and description. Will override `icon` if both are present. |\n| `secondaryTitle` | Optional<br><br>`React.ReactNode`<br><br>Secondary content for the ListItem component. |\n| `size` | Optional<br><br>`(\"default\" \\| \"large\") \\| undefined`<br><br>Size of the ListItem component. |\n| `title` | Optional<br><br>`React.ReactNode`<br><br>Title content for the ListItem component. |\n| `value` | Optional<br><br>`React.ReactNode`<br><br>The value to display on the right-hand side of the item. |\n\n## Secondary title![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can add a secondary title to a list item using the `secondaryTitle` property.\n\n`<List   onAction={(id: string | number) => console.log(id)}   aria-label=\"Example of a List\" >   <ListItem     id=\"1\"     title={<Box>John Smith</Box>}     secondaryTitle={<Box>johnsmith@test.com</Box>}   />   <ListItem     id=\"2\"     title={<Box>Jane Doe</Box>}     secondaryTitle={<Box>janedoe@test.com</Box>}   />   <ListItem     id=\"3\"     title={<Box>Mark Foster</Box>}     secondaryTitle={<Box>markfoster@test.com</Box>}   /> </List>`\n\n## Values![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `ListItem` `value` prop can take arbitrary JSX.\n\n`<List onAction={(id) => console.log(id)} aria-label=\"Example of a List\">   <ListItem     value={       <Box css={{marginRight: 'xsmall'}}>         <Icon name=\"truck\" />}       </Box>     }     id=\"1\"     title={<Box>Payment #123</Box>}     secondaryTitle={<Box>example@gmail.com</Box>}   />   <ListItem     value={       <Button onPress={() => alert('delete')} type=\"destructive\">         <Box css={{marginRight: 'xsmall'}}>           <Icon name=\"trash\" />         </Box>         Delete       </Button>     }     id=\"2\"     title={<Box>Payment #456</Box>}     secondaryTitle={<Box>example@gmail.com</Box>}   />   <ListItem     value={       <Button onPress={() => alert('edit')} type=\"primary\">         Edit       </Button>     }     id=\"3\"     title={<Box>Payment #789</Box>}     secondaryTitle={<Box>example@gmail.com</Box>}   /> </List>`\n\n### Unsupported components![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNote that certain interactive components **won’t** work as `value` props in a `ListItem`:\n\n*   [Select](https://docs.stripe.com/stripe-apps/components/select)\n*   [TextArea](https://docs.stripe.com/stripe-apps/components/textarea)\n*   [TextField](https://docs.stripe.com/stripe-apps/components/textfield)",
  "title": "List | Stripe Documentation",
  "description": "Display a list of information in a variety of preconfigured formats.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/components/focusview",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nA `FocusView` component can be opened from other `View` components and allows the developer to open a dedicated space for the end user to complete a specific task. Examples include:\n\n*   Enter details to create a new entry in a database\n*   Go through a wizard to decide on next steps\n*   Confirm that the user wants to take the action they indicated\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/focusview.f2c4048d934cb15b3e9163c82d993624.png)\n\nWhat FocusView looks like\n\n`FocusView` must be a child of `ContextView`. Don’t wrap the `FocusView` in a conditional, instead use the `shown` property to control its visible state. For more information, see [ContextView](https://docs.stripe.com/stripe-apps/components/contextview).\n\nTo add the `FocusView` component to your app:\n\n`import {FocusView} from '@stripe/ui-extension-sdk/ui';`\n\n### FocusView props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `children` | Required<br><br>`React.ReactNode`<br><br>The contents of the component. |\n| `title` | Required<br><br>`string`<br><br>The title of the FocusView. This will be displayed at the top of the drawer under your app’s name. |\n| `confirmCloseMessages` | Optional<br><br>`ConfirmCloseMessages \\| undefined`<br><br>If provided, confirmCloseMessages will be displayed when the user closes the FocusView.<br><br>Related types: [ConfirmCloseMessages](#confirmclosemessages). |\n| `footerContent` | Optional<br><br>`React.ReactNode`<br><br>React node adjacent to any actions in the footer. |\n| `primaryAction` | Optional<br><br>`React.ReactElement \\| undefined`<br><br>A primary call to action (“Save” or “Continue”) button placed in the footer. |\n| `secondaryAction` | Optional<br><br>`React.ReactElement \\| undefined`<br><br>A secondary call to action (“Cancel”) button placed in the footer. |\n| `setShown` | Optional<br><br>`((shown: boolean) => void) \\| undefined`<br><br>Allows the FocusView to manage shown state if a user requests to close the window, or if it needs to stay open because of the close confirmation dialog. |\n| `shown` | Optional<br><br>`boolean \\| undefined`<br><br>Whether the FocusView should be shown or not. This property is maintained by a parent view. |\n| `onClose` | OptionalDeprecated<br><br>Use `setShown` instead. If the user clicks out of the FocusView or presses the escape button, this informs the extension that the user has closed the view.<br><br>`(() => void) \\| undefined` |\n\n### ConfirmCloseMessages![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `cancelAction` | Required<br><br>`string` |\n| `description` | Required<br><br>`string` |\n| `exitAction` | Required<br><br>`string` |\n| `title` | Required<br><br>`string` |\n\n## Close Confirmation Dialog![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen passing `confirmCloseMessages`, in order for the close confirmation dialog to work properly in every close scenario, pass the `setShown` prop so the `FocusView` can manage its `shown` state. To control when the close confirmation dialog displays, you can use state to conditionally pass `confirmCloseMessages` to the `FocusView`, like in the following example:\n\n## Example![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`import { useState } from 'react'; import {   Box,   Button,   ContextView,   FocusView,   Select, } from '@stripe/ui-extension-sdk/ui';  type Mood = 'Happy' | 'Sad';  const confirmCloseMessages = {   title: 'Your mood will not be saved',   description: 'Are you sure you want to exit?',   cancelAction: 'Cancel',   exitAction: 'Exit', };  const MoodView = () => {   const [mood, setMood] = useState<Mood>('Happy');   const [shown, setShown] = useState<boolean>(false);   const [confirmClose, setConfirmClose] = useState<boolean>(false);    const open = () => {     setConfirmClose(true);     setShown(true);   };    const closeWithoutConfirm = () => {     setConfirmClose(false);     setShown(false);   };    const closeWithConfirm = () => {     setShown(false);   };    const updateMood = (newMood: Mood) => {     setMood(newMood);     closeWithoutConfirm();   };    return (     <ContextView       title=\"Mood picker\"       description=\"This section communicates my extension's feelings\"     >       <FocusView         title=\"Pick your mood\"         shown={shown}         setShown={setShown}         confirmCloseMessages={confirmClose ? confirmCloseMessages : undefined}         secondaryAction={<Button onPress={closeWithConfirm}>Cancel</Button>}       >         <Select onChange={(e) => updateMood(e.target.value as Mood)}>           <option label=\"\">Select mood</option>           <option label=\"Happy\">Happy</option>           <option label=\"Sad\">Sad</option>         </Select>       </FocusView>       <Box css={{ stack: \"x\", gap: \"medium\" }}>         <Box           css={{             font: \"subheading\",             color: mood === \"Happy\" ? \"success\" : \"info\",           }}         >           {mood}         </Box>         <Button onPress={open}>Change mood</Button>       </Box>     </ContextView>   ); };  export default MoodView;`",
  "title": "FocusView | Stripe Documentation",
  "description": "Use FocusView to open a dedicated space for the end user to complete a specific task.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/components/menu",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nTo add the `Menu` component to your app:\n\n`import {Menu, MenuItem, MenuGroup} from '@stripe/ui-extension-sdk/ui';`\n\nA basic menu is made up of an element to trigger the menu, and a series of MenuItems.\n\n`<Menu trigger={<Button>Menu</Button>}>   <MenuItem>Edit</MenuItem>   <MenuItem>Copy</MenuItem>   <MenuItem>Paste</MenuItem> </Menu>`\n\n| Property | Type |\n| --- | --- |\n| `children` | Required<br><br>`React.ReactNode`<br><br>One or more MenuGroup or MenuItem components. |\n| `onAction` | Optional<br><br>`((key: React.Key) => void) \\| undefined`<br><br>Handler that is called when an item is selected. |\n| `trigger` | Optional<br><br>`React.ReactNode`<br><br>The trigger Element to show/hide the menu. Must be a component that supports press events, such as a Button or Link. |\n\n## Items![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nMenus contain multiple vertically arranged items.\n\n`<Menu aria-label=\"Menu\">   <MenuItem>Edit</MenuItem>   <MenuItem disabled>Copy</MenuItem>   <MenuItem>Paste</MenuItem> </Menu>`\n\n| Property | Type |\n| --- | --- |\n| `children` | Required<br><br>`React.ReactNode`<br><br>The contents of the component. |\n| `disabled` | Optional<br><br>`boolean \\| undefined`<br><br>Marks an item as disabled. Disabled items cannot be selected, focused, or otherwise interacted with. |\n| `id` | Optional<br><br>`string \\| undefined`<br><br>The id of the item. This will be passed into the `onAction` handler of `Menu`. |\n| `onAction` | Optional<br><br>`((key: React.Key) => void) \\| undefined`<br><br>Handler that is called when an item is selected. |\n\n## Groups![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can divide items in a menu into groups.\n\n`<Menu aria-label=\"Menu\">   <MenuGroup title=\"Actions\">     <MenuItem>Duplicate</MenuItem>     <MenuItem>Edit</MenuItem>     <MenuItem>Cancel</MenuItem>   </MenuGroup>   <MenuGroup title=\"Connections\">     <MenuItem>View customer</MenuItem>     <MenuItem>View subscription</MenuItem>   </MenuGroup> </Menu>`\n\n| Property | Type |\n| --- | --- |\n| `children` | Required<br><br>`React.ReactNode`<br><br>One or more MenuItem components. |\n| `title` | Optional<br><br>`React.ReactNode` |\n\n## Events![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the `onAction` prop as a callback to handle `press` events on items. You can provide the `onAction` prop to the `Menu` to handle item activation across all items, or to the `MenuItem` directly to handle activation for individual items.\n\n``<Menu   aria-label=\"Menu\"   onAction={(id) => console.log(`Item ${id} was pressed.`)} >   <MenuGroup title=\"Actions\">     <MenuItem id=\"duplicate\">Duplicate</MenuItem>     <MenuItem id=\"edit\">Edit</MenuItem>     <MenuItem id=\"cancel\">Cancel</MenuItem>   </MenuGroup>   <MenuGroup title=\"Connections\">     <MenuItem       id=\"View customer\"       onAction={() => console.log(`View customer was pressed.`)}     >       View customer     </MenuItem>     <MenuItem id=\"View subscription\">View subscription</MenuItem>   </MenuGroup> </Menu>``\n\n## Triggers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe menu `trigger` property works together with the menu to link the menu’s open state with a trigger’s pressed state.\n\n`<Menu trigger={<Button>Menu</Button>}>   <MenuGroup title=\"Actions\">     <MenuItem>Duplicate</MenuItem>     <MenuItem disabled>Edit</MenuItem>     <MenuItem>Cancel</MenuItem>   </MenuGroup>   <MenuGroup title=\"Connections\">     <MenuItem>View customer</MenuItem>     <MenuItem>View subscription</MenuItem>   </MenuGroup> </Menu>`",
  "title": "Menu | Stripe Documentation",
  "description": "A menu presents a group of actions that a user can choose from, often related to a particular object or context.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/components/settingsview",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nYou can define a specialized settings view to let users change specific details about how the app works with their account. For example, an app that uses a third-party API like Zendesk could use `SettingsView` to authorize a user with their Zendesk account. For more details, learn how to [add a settings page](https://docs.stripe.com/stripe-apps/app-settings) for your app.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/settingsview.ca0e43bcc311ea9819da61b2949e6ed1.png)\n\nWhat SettingsView looks like\n\n`SettingsView` is a view root component, just like `ContextView`, containing all other UI elements. It’s the only view that isn’t tied to a specific object, but tied instead to the `settings` viewport. The `settings` viewport maps to predefined locations in the Dashboard, outside of the app drawer.\n\n`SettingsView` renders on the app settings page in the Dashboard after you upload an app. While previewing your app locally, you can preview the `SettingsView` in the Dashboard at [https://dashboard.stripe.com/apps/settings-preview](https://dashboard.stripe.com/apps/settings-preview).\n\nTo use `SettingsView`, you must add a view with the `settings` viewport to your app manifest. An application with a settings view would have an app manifest with a `ui_extension` field that would look something like this:\n\n`{   ...,   \"ui_extension\": {     \"views\": [       ...,       {         \"viewport\": \"settings\",         \"component\": \"AppSettings\"       }     ],   } }`\n\n### SettingsView props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `children` | Required<br><br>`React.ReactNode`<br><br>The contents of the component. |\n| `onSave` | Optional<br><br>`((values: {[key: string]: string}) => void) \\| undefined`<br><br>If provided, a “Save” button will be rendered with the SettingsView. This callback will be called when the button is clicked. |\n| `statusMessage` | Optional<br><br>`string \\| undefined`<br><br>A string to display a status such as “Saved” or “Error” in the footer of the view. |\n\n## Example![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis example shows how to fetch settings from an external API, display them, and save changes.\n\n``import {useState, useEffect, useCallback} from 'react'; import type {ExtensionContextValue} from '@stripe/ui-extension-sdk/context'; import {   Box,   TextField,   SettingsView, } from '@stripe/ui-extension-sdk/ui';  type FormStatus = 'initial' | 'saving' | 'saved' | 'error';  const AppSettings = ({ userContext }: ExtensionContextValue) => {   const [storedValue, setStoredValue] = useState<string>('');   const [status, setStatus] = useState<FormStatus>('initial');    // use the current user id to retrieve the stored value from an external api   const key = userContext.id;    useEffect(() => {     const fetchSetting = async (key: number) => {       try {         const response = await fetch(`https://www.my-api.com/${key}`)         const storedSettingValue = await response.text()         if (storedSettingValue) {           setStoredValue(storedSettingValue)         }       } catch (error) {         console.log('Error fetching setting: ', error)       }     };     fetchSetting(key);   }, [key]);    const saveSettings = useCallback(async (values) => {     setStatus('saving');     try {       const { greeting } = values;       const result = await fetch(         'https://www.my-api.com/',         {           method: 'POST',           body: JSON.stringify(values)         }       );       await result.text();       setStatus('saved');       setStoredValue(greeting);     } catch (error) {       console.error(error);       setStatus('error');     }   }, []);    const getStatusLabel = useCallback(() => {     switch(status) {       case 'saving':         return 'Saving...';       case 'saved':         return 'Saved!';       case 'error':         return 'Error: There was an error saving your settings.';       case 'initial':       default:         return '';     }   }, [status])   const statusLabel = getStatusLabel();    return (     <SettingsView       onSave={saveSettings}       statusMessage={statusLabel}     >       <Box         css={{           padding:'medium',           backgroundColor: 'container',         }}       >         <Box           css={{               font: 'lead'           }}         >           Please enter a greeting         </Box>         <Box           css={{               marginBottom: 'medium',               font: 'caption'           }}         >           Saved value: {storedValue || 'None'}         </Box>         <TextField           id=\"greeting\"           name=\"greeting\"           type=\"text\"           label=\"Greeting:\"           size=\"medium\"         />       </Box>     </SettingsView>   ); };  export default AppSettings;``",
  "title": "SettingsView | Stripe Documentation",
  "description": "Let users change details about how the app works with their account.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/components/select",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nTo add the `Select` component to your app:\n\n`import {Select} from '@stripe/ui-extension-sdk/ui';`\n\n`<Select   name=\"demo-001\"   label=\"Choose a pet\"   onChange={(e) => {     console.log(e);   }} >   <option value=\"\">Choose an option</option>   <option value=\"dogs\">Dogs</option>   <option value=\"cats\">Cats</option> </Select>`\n\n### Select props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `children` | Required<br><br>`React.ReactNode`<br><br>The contents of the component. |\n| `autoComplete` | Optional<br><br>`string \\| undefined`<br><br>Specifies one of the possible autocomplete behaviors. |\n| `autoFocus` | Optional<br><br>`boolean \\| undefined`<br><br>If `true`, React will focus the element on mount. |\n| `css` | Optional<br><br>`Object`<br><br>Related types: [CSS](#css). |\n| `defaultValue` | Optional<br><br>`(string \\| string[]) \\| undefined`<br><br>A string (or an array of strings for `multiple={true}`). Specifies the initially selected option that a user can change. |\n| `description` | Optional<br><br>`string \\| undefined`<br><br>Descriptive text that will be rendered adjacent to the control’s label. |\n| `disabled` | Optional<br><br>`boolean \\| undefined`<br><br>Sets whether or not the element should be disabled. Prevents selection. |\n| `error` | Optional<br><br>`string \\| undefined`<br><br>Error text that will be rendered below the control. |\n| `form` | Optional<br><br>`string \\| undefined`<br><br>Specifies the `id` of the `<form>` this input belongs to. If omitted, it’s the closest parent form. |\n| `hiddenElements` | Optional<br><br>`(\"label\" \\| \"description\" \\| \"error\")[] \\| undefined`<br><br>Visually hides the specified elements. The hidden elements will still be present and visible to screen readers. |\n| `invalid` | Optional<br><br>`boolean \\| undefined`<br><br>Sets whether or not the element is in an invalid state. This is a display-only prop, and will not prevent form submission. |\n| `label` | Optional<br><br>`React.ReactNode`<br><br>Text that describes the control. Will be both visible and clickable. |\n| `multiple` | Optional<br><br>`boolean \\| undefined`<br><br>If `true`, the browser allows multiple selection. |\n| `name` | Optional<br><br>`string \\| undefined`<br><br>Specifies the name for this input that’s submitted with the form. |\n| `onChange` | Optional<br><br>`((event: React.ChangeEvent<HTMLSelectElement>) => void) \\| undefined`<br><br>Required for controlled inputs. Fires immediately when the input’s value is changed by the user (for example, it fires on every keystroke). Behaves like the browser input event. |\n| `required` | Optional<br><br>`boolean \\| undefined`<br><br>If `true`, the value must be provided for the form to submit. |\n| `size` | Optional<br><br>`(\"small\" \\| \"medium\" \\| \"large\") \\| undefined`<br><br>The size of the component. |\n| `value` | Optional<br><br>`(string \\| string[]) \\| undefined`<br><br>A string (or an array of strings for `multiple={true}`). Controls which option is selected. |\n\n### CSS![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n## State management![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the `Select` component as an [uncontrolled input](https://docs.stripe.com/stripe-apps/how-ui-extensions-work#use-uncontrolled-components-for-interactions):\n\n`<Select   name=\"demo-001\"   label=\"Choose a pet\"   onChange={(e) => {     console.log(e);   }} >   <option value=\"\">Choose an option</option>   <option value=\"dogs\">Dogs</option>   <option value=\"cats\">Cats</option> </Select>`\n\n## Disabled![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can disable a `Select` component, which prevents changes.\n\n`<Select name=\"demo-001\" disabled label=\"Choose a pet\">   <option value=\"\">Choose an option</option>   <option value=\"dogs\">Dogs</option>   <option value=\"cats\">Cats</option> </Select>`\n\n## Width![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSet the width of a `Select` component using [the available values](https://docs.stripe.com/stripe-apps/style#sizing) with the `css` prop:\n\n`<Select   css={{     width: 'fill',   }}   name=\"demo-001\"   label=\"Choose a pet\"   onChange={(e) => {     console.log(e);   }} >   <option value=\"\">Choose an option</option>   <option value=\"dogs\">Dogs</option>   <option value=\"cats\">Cats</option> </Select>`",
  "title": "Select | Stripe Documentation",
  "description": "Use Select to pick from a set of options in a dropdown.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/components/radio",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nTo add the `Radio` component to your app:\n\n`import {Radio} from '@stripe/ui-extension-sdk/ui';`\n\n`<Radio label=\"This is a Radio.\" />`\n\n### Radio props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `autoFocus` | Optional<br><br>`boolean \\| undefined`<br><br>If `true`, React will focus the element on mount. |\n| `checked` | Optional<br><br>`boolean \\| undefined`<br><br>Controls whether the input is selected. When you pass this prop, you must also pass an `onChange` handler that updates the passed value. |\n| `defaultChecked` | Optional<br><br>`boolean \\| undefined`<br><br>Specifies the initial value that a user can change. |\n| `description` | Optional<br><br>`string \\| undefined`<br><br>Descriptive text that will be rendered adjacent to the control’s label. |\n| `disabled` | Optional<br><br>`boolean \\| undefined`<br><br>Sets whether or not the element should be disabled. Prevents selection. |\n| `error` | Optional<br><br>`string \\| undefined`<br><br>Error text that will be rendered below the control. |\n| `form` | Optional<br><br>`string \\| undefined`<br><br>Specifies the `id` of the `<form>` this input belongs to. If omitted, it’s the closest parent form. |\n| `hiddenElements` | Optional<br><br>`(\"label\" \\| \"description\" \\| \"error\")[] \\| undefined`<br><br>Visually hides the specified elements. The hidden elements will still be present and visible to screen readers. |\n| `invalid` | Optional<br><br>`boolean \\| undefined`<br><br>Sets whether or not the element is in an invalid state. This is a display-only prop, and will not prevent form submission. |\n| `label` | Optional<br><br>`React.ReactNode`<br><br>Text that describes the control. Will be both visible and clickable. |\n| `name` | Optional<br><br>`string \\| undefined`<br><br>Used to collect multiple Radios into a single, mutually exclusive group, for uncontrolled use cases. |\n| `onChange` | Optional<br><br>`((event: React.ChangeEvent<HTMLInputElement>) => void) \\| undefined`<br><br>Required for controlled inputs. Fires immediately when the input’s value is changed by the user (for example, it fires on every keystroke). Behaves like the browser input event. |\n| `readOnly` | Optional<br><br>`boolean \\| undefined`<br><br>If `true`, the input is not editable by the user. |\n| `required` | Optional<br><br>`boolean \\| undefined`<br><br>If `true`, the value must be provided for the form to submit. |\n| `tabIndex` | Optional<br><br>`number \\| undefined`<br><br>Overrides the default Tab button behavior. Avoid using values other than `-1` and `0`. |\n| `value` | Optional<br><br>`string \\| undefined`<br><br>Controls the input’s text. When you pass this prop, you must also pass an `onChange` handler that updates the passed value. |\n\n## Disabled![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can disable a `Radio` component, which prevents changes.\n\n`<Radio name=\"group\" label=\"Ah ah ah\" disabled /> <Radio   name=\"group\"   disabled   defaultChecked   label=\"You didn't say the magic word\" />`\n\n## Invalid![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`Radio` can be invalid.\n\n`<Radio label=\"This is an invalid input\" invalid />`\n\n## State management![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the `Radio` component as an [uncontrolled input](https://docs.stripe.com/stripe-apps/how-ui-extensions-work#use-uncontrolled-components-for-interactions):\n\n`<Radio   name=\"group\"   label=\"Have some of Column A\"   onChange={(e) => {     console.log(e.target.checked);   }} /> <Radio   name=\"group\"   label=\"Try all of Column B\"   onChange={(e) => {     console.log(e.target.checked);   }} />`",
  "title": "Radio | Stripe Documentation",
  "description": "Use Radios to make a selection from a mutually exclusive set of options.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/components/signinview",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\nUse the `SignInView` component to display a graphic with your app’s icon next to Stripe’s, a short description of your sign in process, action buttons, and so on. If your app requires users to sign in, the `SignInView` component is required to make sure users clearly understand that they’re connecting to Stripe.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/sign-in-01.fea0b34449e5808d68c542be4a4301dc.png)\n\nA SignInView example displayed in the drawer.\n\n### SignInView props![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `brandColor` | Optional<br><br>`string \\| undefined`<br><br>A CSS color that contrasts well with `brandIcon`. |\n| `brandIcon` | Optional<br><br>`string \\| undefined`<br><br>A square, 1-color SVG that contrasts well with `brandColor`. |\n| `description` | Optional<br><br>`string \\| undefined`<br><br>A paragraph description of the app and its features. |\n| `descriptionActionContents` | Optional<br><br>`React.ReactNode`<br><br>Description action contents that open in a FocusView. |\n| `descriptionActionLabel` | Optional<br><br>`string \\| undefined`<br><br>An action label (“Learn more” or “View demo”, for example) below the description. |\n| `descriptionActionTitle` | Optional<br><br>`string \\| undefined`<br><br>The title in the FocusView for the description action. |\n| `footerContent` | Optional<br><br>`React.ReactNode`<br><br>React node below the primary action in the footer. |\n| `primaryAction` | Optional<br><br>`(SignInActionWithHref \\| SignInActionWithOnPress) \\| undefined`<br><br>Related types: [SignInActionWithHref](#signinactionwithhref), [SignInActionWithOnPress](#signinactionwithonpress). |\n| `secondaryAction` | Optional<br><br>`(SignInActionWithHref \\| SignInActionWithOnPress) \\| undefined`<br><br>Related types: [SignInActionWithHref](#signinactionwithhref), [SignInActionWithOnPress](#signinactionwithonpress). |\n\n### SignInActionWithHref![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `href` | Required<br><br>`string` |\n| `label` | Required<br><br>`string` |\n| `onPress` | Optional<br><br>`(() => void) \\| undefined` |\n| `target` | Optional<br><br>`string \\| undefined` |\n\n### SignInActionWithOnPress![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Property | Type |\n| --- | --- |\n| `label` | Required<br><br>`string` |\n| `onPress` | Required<br><br>`() => void` |\n| `href` | Optional<br><br>`string \\| undefined` |\n| `target` | Optional<br><br>`string \\| undefined` |\n\n## Example![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`import {   Link,   SignInView, } from '@stripe/ui-extension-sdk/ui'; import appIcon from './icon.svg';  <SignInView   description=\"Connect your SuperTodo account with Stripe.\"   primaryAction={{label: 'Sign in', href: 'https://example.com'}}   footerContent={     <>       Don't have an account? <Link href=\"https://example.com\">Sign up</Link>     </>   }   brandColor=\"#635bff\"   brandIcon={appIcon} />`\n\n## Additional context![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore a user signs in, you might want to display a demo, a detailed description of your app, or screenshots. Remember that at this point the user has already installed your app so they should be motivated to sign in, but if you want to show additional context, you can do it in a focused view using the `descriptionActionLabel`, `descriptionActionTitle`, and `descriptionActionContents` properties. For example:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/contextview-wide.05a45f6c9e0e4af6a0e47d783badb9f6.png)\n\n`import {Img, Link, SignInView} from '@stripe/ui-extension-sdk/ui'; import appIcon from './icon.svg';  const Onboarding = () => (   <SignInView     description=\"Connect your SuperTodo account with Stripe.\"     primaryAction={{label: 'Sign in', href: 'https://example.com'}}     footerContent={       <>         Don't have an account? <Link href=\"https://example.com\">Sign up</Link>       </>     }     brandColor=\"#635bff\"     brandIcon={appIcon}     descriptionActionLabel=\"Learn more\"     descriptionActionTitle=\"Learn more\"     descriptionActionContents={       <>         <Img href=\"https://example.com/screenshot.png\" />         To import existing data from SuperTodo, you will need to connect your SuperTodo account to Stripe.       </>     }   /> );`",
  "title": "SignInView | Stripe Documentation",
  "description": "SignInView allows apps to render a sign in screen.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/patterns/action-buttons",
  "markdown": "# Action buttons for Stripe Apps\n\n## Learn how to place action buttons.\n\nKeep action buttons in a consistent place.\n\n## Suggested use![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Place action buttons in the header to make sure they’re visible to users, even when content flows off-screen.\n*   When content areas don’t require a scroll bar, place buttons below the content. For example:\n\n![Action buttons in the header actions section](https://b.stripecdn.com/docs-statics-srv/assets/action-buttons.f204ac997c38fd5c2d63d6775da482a0.png)\n\nAction buttons in the header",
  "title": "Action buttons for Stripe Apps | Stripe Documentation",
  "description": "Learn how to place action buttons.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/patterns/additional-context",
  "markdown": "# Additional context for Stripe Apps\n\n## Learn about how additional contexts in onboarding can help users better understand your app.\n\nIf you need to share any additional context before users sign in, dedicate a space for it on a separate screen.\n\n## Suggested use![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Use a [FocusView](https://docs.stripe.com/stripe-apps/components/focusview) component to provide additional context, or to show a [demo](https://docs.stripe.com/stripe-apps/patterns/demo) screen of how your app works.\n*   Make sure the sign in screen is focused on onboarding tasks. Any additional context should be brief and contextualized. For example:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/contextview-wide.05a45f6c9e0e4af6a0e47d783badb9f6.png)\n\n## Example![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following sample shows additional content displayed within a `SignInView` component:\n\n`import {SignInView, Img, Link} from '@stripe/ui-extension-sdk/ui'; import appIcon from './icon.svg';  const Onboarding = () => (   <SignInView     description=\"Connect your SuperTodo account with Stripe.\"     primaryAction={{label: 'Sign in', href: 'https://example.com'}}     footerContent={       <>         Don't have an account? <Link href=\"https://example.com\">Sign up</Link>       </>     }     descriptionActionLabel=\"Learn more\"     descriptionActionTitle=\"Learn more\"     descriptionActionContents={       <>         <Img href=\"https://example.com/screenshot.png\" />         To import existing data from SuperTodo, you will need to connect your SuperTodo account to Stripe.       </>     }     brandColor=\"#635bff\"     brandIcon={appIcon}   /> );`",
  "title": "Additional context for Stripe Apps | Stripe Documentation",
  "description": "Learn about how additional contexts in onboarding can help users better understand your app.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/patterns/back-link",
  "markdown": "# Back link for Stripe Apps\n\n## Learn how to help your users navigate back to a previous page.\n\nAllow users to navigate to a previous page using back links.\n\n## Suggested use![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Use a [Link](https://docs.stripe.com/stripe-apps/components/link) component with an [Icon](https://docs.stripe.com/stripe-apps/components/icon) component to add a back link.\n*   Clearly label where the user is navigating to. For example:\n\n![A back link and arrow to return to previous screen](https://b.stripecdn.com/docs-statics-srv/assets/back-link.4d5f1d9ecc5ff5b94e9973a36115f05a.png)",
  "title": "Back link for Stripe Apps | Stripe Documentation",
  "description": "Learn how to help your users navigate back to a previous page.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/patterns/communicating-state",
  "markdown": "# Communicating state for Stripe Apps\n\n## Learn how to guide users to take actions in your app.\n\nKeep the user informed by showing them when they need to take a certain action.\n\n## Suggested use![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Use a [Toast](https://docs.stripe.com/stripe-apps/components/toast) component to provide temporary feedback after users take an action.\n*   Use a [Banner](https://docs.stripe.com/stripe-apps/components/banner) component to show users they need to take action on unexpected system-level requirements, changes, or issues. For example:\n\n![On the left, a green check Toast on download. On the right, a red Notice on error.](https://b.stripecdn.com/docs-statics-srv/assets/communicating-state.a613d037f8e0b3bd8a6aa7199e708c8d.png)\n\n## Examples![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nConsider the following attributes when choosing to deliver a message.\n\n|     | Toast | Banner |\n| --- | --- | --- |\n|     | ![Green check Toast example with text 'Changes saved'](https://b.stripecdn.com/docs-statics-srv/assets/Toast.e17b36572b25d60725b4bc24098b77b9.png) | ![ Banner example with text 'New updates'](https://b.stripecdn.com/docs-statics-srv/assets/Notice.0435a3a4999b7189e67fba5c18dae242.png) |\n| **Display** | **Temporary**<br><br>All toasts trigger on users’ actions. Toasts dismiss automatically after a short period or when the app closes. | **Persistent**<br><br>You can deliver banners at any time. Dismissing a banner requires an action. |\n| **Content** | **Limited text length**<br><br>Messages for toasts should be short, and fewer than four words on one line. The maximum character length for a toast is 30. | **Medium to long message**<br><br>Banners contain title and body text. Banners are suitable for providing information with additional details. |\n| **Action** | **Optional**<br><br>Provide an action as a shortcut for users to quickly enter the related event. | **Required**<br><br>Inform users to take the required action. |\n| **Position** | **Bottom of the app drawer** | **Under app drawer header** |",
  "title": "Communicating state for Stripe Apps | Stripe Documentation",
  "description": "Learn how to guide users to take actions in your app.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/patterns/empty-state",
  "markdown": "# Empty state for Stripe Apps\n\n## Let users know when no data is available to load.\n\nMake it clear to users when there isn’t any data available to load.\n\n## Suggested use![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   If the user needs to be in a specific place in the Dashboard, link directly to that page (for example, Customers or Payments). For example:\n\n![Empty state screens for new users of an app](https://b.stripecdn.com/docs-statics-srv/assets/empty-state.50226e2a26e5462dffee81c8b8cb19fb.png)",
  "title": "Empty state for Stripe Apps | Stripe Documentation",
  "description": "Let users know when no data is available to load.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/patterns/demo",
  "markdown": "# Demo content for Stripe Apps\n\n## Learn tips for displaying a demo of your app.\n\nWhen building a demo of your app, keep the content brief and only highlight the top functionality that your app offers.\n\n## Suggested use![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Add a dedicated page view that doesn’t interfere with the onboarding flow.\n*   Provide “just enough” information to communicate the main functionality of your app. For example:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/demo-content.019b1bd485c337fe7592b54ef729db53.png)\n\n## Example![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe following sample shows demo content displayed within a `SignInView` component:\n\n`import {SignInView, Banner, Button} from '@stripe/ui-extension-sdk/ui'; import appIcon from './icon.svg';  const Onboarding = () => (   <SignInView     description=\"Connect your SuperTodo account with Stripe.\"     primaryAction={{label: 'Sign in', href: 'https://example.com'}}     footerContent={       <>         Don't have an account? <Link href=\"https://example.com\">Sign up</Link>       </>     }     descriptionActionLabel=\"View demo\"     descriptionActionTitle=\"Todo lists\"     descriptionActionContents={       <>         <Box css={{marginBottom: 'small'}}>           <Button type=\"primary\" css={{width: 'fill', alignX: 'center'}}>             Create list           </Button>         </Box>         <Banner           type=\"caution\"           title=\"You're viewing demo content\"           description=\"Your data will be visible once you sign in.\"         />         ...continued app demo content.       </>     }     brandColor=\"#635bff\"     brandIcon={appIcon}   /> );`",
  "title": "Demo content for Stripe Apps | Stripe Documentation",
  "description": "Learn tips for displaying a demo of your app.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/patterns/loading",
  "markdown": "# Loading for Stripe Apps | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use the spinner component.\n\nWhen data is loading, use a [Spinner](https://docs.stripe.com/stripe-apps/components/spinner) component.\n\n## Suggested use![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Provide some additional context that shows users what kind of data is loading. For example:\n\n![Spinner on a loading screen](https://b.stripecdn.com/docs-statics-srv/assets/loading.5e1021867583f24419ac8df33b89cdb0.png)",
  "title": "Loading for Stripe Apps | Stripe Documentation",
  "description": "Learn how to use the spinner component.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/patterns/lists",
  "markdown": "# Lists for Stripe Apps | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use the list component when building Stripe apps.\n\nUse lists to display collections of information.\n\n## Suggested use![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   If you want the rows in your list to be clickable, use a [List](https://docs.stripe.com/stripe-apps/components/list) component. A `List` can contain an icon and an image in certain treatments.\n\n![Using the List component](https://b.stripecdn.com/docs-statics-srv/assets/listview.81a323e2c2191dc2551c503fa9d97cfa.png)\n\n*   For deeper control of the design, compose a custom list item. Rows in custom lists aren’t clickable. Add a link or button for the user to click.\n\n![Custom list](https://b.stripecdn.com/docs-statics-srv/assets/custom-lists-01.3e7fec90ee2c9da310e6eb35cf5fea7f.png)\n\n![Alternate custom list](https://b.stripecdn.com/docs-statics-srv/assets/custom-lists-02.c9ae81f00f993878c5008ab232bd9604.png)",
  "title": "Lists for Stripe Apps | Stripe Documentation",
  "description": "Learn how to use the list component when building Stripe apps.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/patterns/redirects",
  "markdown": "# Redirects for Stripe Apps | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to create redirects that are clear for your users.\n\nWhen you’re building the onboarding flow, make sure to add a step where you clearly indicate how users can return to Stripe.\n\n## Suggested use![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Use a call-to-action button to take users back to the Stripe Dashboard within the same tab.\n*   Make sure to set the correct context so users know exactly what’s next.\n*   Make sure your onboarding flow is always visually consistent with the Stripe app you’re building. For example:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/redirect.d98b915d3cb121f922105b992a85c5d1.png)",
  "title": "Redirects for Stripe Apps | Stripe Documentation",
  "description": "Learn how to create redirects that are clear for your users.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/patterns/settings-signin",
  "markdown": "# Settings sign in for Stripe Apps\n\n## Learn how to onboard users on a settings page.\n\nIf you’re building a connect extension or a back-end only app, onboard users with a settings page.\n\n## Suggested use![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Use a settings page to sign in users.\n*   Apply this design pattern the same way you would in a drawer. Avoid additional context that isn’t helpful when onboarding users. For example:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/settings-sign-in-01.b57a79fdec455f0d7fe7ab5c4446cd2c.png)\n\n*   When you need to add additional context to users, use a [FocusView](https://docs.stripe.com/stripe-apps/components/focusview) component to provide the information. For example:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/settings-sign-in-02.89b31ce0d8e7a8beea7594e323b6aec8.png)\n\n## Example![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo add the `SignInView` component to your settings view, display it conditionally with the `SettingsView` component based on the user’s sign in state:\n\n`import {SignInView, SettingsView} from '@stripe/ui-extension-sdk/ui'; import appIcon from './icon.svg';  const AppSettings = () => {   // Set this variable based on your app's concept of sign in state   const isUserSignedIn = ...;   return isUserSignedIn ? (     <SettingsView>       {/* Add your settings view content. */}     </SettingsView>   ) : (     <SignInView       description=\"Connect your SuperTodo account with Stripe.\"       primaryAction={{label: 'Sign in', href: 'https://example.com'}}       footerContent={         <>           Don't have an account? <Link href=\"https://example.com\">Sign up</Link>         </>       }       brandColor=\"#635bff\"       brandIcon={appIcon}     />   );`",
  "title": "Settings sign in for Stripe Apps | Stripe Documentation",
  "description": "Learn how to onboard users on a settings page.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/patterns/progress-stepping",
  "markdown": "# Progress stepping for Stripe Apps\n\n## Learn how to prevent users from abandoning a task.\n\nIf users need to complete multi-step tasks, use a [FocusView](https://docs.stripe.com/stripe-apps/components/focusview) component to prevent them from accidentally abandoning the task.\n\n## Suggested use![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Place progress stepping components in the footer.\n*   Make the final action a primary [Button](https://docs.stripe.com/stripe-apps/components/button). For example:\n\n![Step screens](https://b.stripecdn.com/docs-statics-srv/assets/progress-stepping.72f0528183f5d96d7bbf33ff00937f11.png)",
  "title": "Progress stepping for Stripe Apps | Stripe Documentation",
  "description": "Learn how to prevent users from abandoning a task.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/patterns/sign-in",
  "markdown": "# Sign in template for Stripe Apps\n\n## Learn how to use the SignInView component with your app.\n\nIf your app requires users to sign in, the `SignInView` component is required to ensure users clearly understand that they’re connecting to Stripe.\n\n## Suggested use![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   To avoid compromising users’ passwords, never ask users to share their full set of credentials with Stripe.\n*   Keep content lightweight and focused. Avoid any links that might take users away from the onboarding flow. For example:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/sign-in-01.fea0b34449e5808d68c542be4a4301dc.png)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/sign-in-02.65d673b4703531cf35dd1847941c7eff.png)\n\n*   Provide users the option to sign into an existing account or sign up for a new account.\n*   Use call-to-action labels that are consistent with your own onboarding flow outside of Stripe. For example:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/sign-in-03.b3bce56fcedbe430099ebe2155a86537.png)\n\n## Example![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo add the component to your app:\n\n`import {SignInView} from '@stripe/ui-extension-sdk/ui';`\n\nThe following sample shows a `SignInView` component:\n\n`<SignInView   description=\"Connect your SuperTodo account with Stripe.\"   primaryAction={{label: 'Sign in', href: 'https://example.com'}}   footerContent={     <>       Don't have an account? <Link href=\"https://example.com\">Sign up</Link>     </>   }   brandColor=\"#635bff\"   brandIcon={appIcon} />`",
  "title": "Sign in template for Stripe Apps | Stripe Documentation",
  "description": "Learn how to use the SignInView component with your app.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/patterns/waiting-screens",
  "markdown": "# Waiting screens for Stripe Apps\n\n`import {   Box,   Button,   ContextView,   Icon,   Inline,   Link, } from \"@stripe/ui-extension-sdk/ui\"; const WaitingScreen = () => {   return (     <ContextView       title=\"Finish onboarding\"       footerContent={         <Box>           <Button type=\"primary\" css={{ width: \"fill\" }}>             Finish onboarding           </Button>           <Box             css={{               marginTop: \"small\",               textAlign: \"center\",               stack: \"x\",               alignX: \"center\",               gap: \"small\",             }}           >             <Box>Want to go back?</Box>             <Link>Start over.</Link>           </Box>         </Box>       }     >       <Box css={{ marginBottom: \"xlarge\" }}>         <Inline           css={{             backgroundColor: \"container\",             keyline: \"neutral\",             borderRadius: \"small\",             paddingX: \"small\",             paddingTop: \"small\",             paddingBottom: \"xsmall\",           }}         >           <Icon name=\"clock\" css={{ fill: \"secondary\" }} />         </Inline>       </Box>       <Box>Please finish onboarding to SuperTodo.</Box>     </ContextView>   ); };`",
  "title": "Waiting screens for Stripe Apps | Stripe Documentation",
  "description": "Learn how to use the waiting screen.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/api-authentication/oauth",
  "markdown": "# OAuth 2.0 | Stripe DocumentationThe Stripe Docs logo\n\nAccess tokens expire in 1 hour, and refresh tokens expire after 1 year. Refresh tokens are also rolled on every exchange, so the expiration time for the new refresh tokens is always a year from the date that it was generated or rolled. If you exchange a refresh token for an access token within one year, you should never hit the refresh token expiration date.\n\nHere is the equivalent `curl` command to exchange the access token for a refresh token using your secret key:\n\n`curl -X POST https://api.stripe.com/v1/oauth/token \\   -u sk_live_***: \\   -d refresh\\_token={{ REFRESH_TOKEN }} \\   -d grant_type=refresh_token`\n\nHere’s an example response.\n\n`{   \"access_token\": \"{{ ACCESS_TOKEN }}”,   \"livemode\": true,   \"refresh\\_token\": \"{{ REFRESH_TOKEN }}”,   \"scope\": \"stripe_apps\",   \"stripe_publishable_key\": \"pk_live_***”,   \"stripe\\_user\\_id\": \"acct\\_***”,   \"token_type\": \"bearer\" }`\n\nYou’ll get a new refresh token and the previous refresh token expires. You must securely store the refresh token in your backend and use the refresh token to obtain a fresh access token anytime you want to access the Stripe API on behalf of the Stripe User.\n\n#### Common mistake\n\nWhen you refresh the access token you may see an error that says you do not have the required permissions. If you see this, confirm that you’re using the secret key for your account to authorize the API call and that you’re not accidentally using a refresh token, access token, or a restricted key.\n\nYou can verify the access token by making a request to the Stripe API. For example:\n\n`curl https://api.stripe.com/v1/customers \\  -u \"{{ ACCESS_TOKEN }}\"`",
  "title": "OAuth 2.0 | Stripe Documentation",
  "description": "Use the industry standard OAuth 2.0 to authenticate requests to the Stripe API on behalf of your users.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/patterns/activation-flow",
  "markdown": "# Activation flow for Stripe Apps\n\n## Learn how to build an clear activation flow for your Stripe app.\n\nFollow the recommended account activation guidelines on this page to make sign in and authentication secure and easy to follow.\n\n#### Warning\n\nMake sure users never share their full credential set with Stripe.\n\n## Flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe ideal sign in flow is:\n\n1.  **Effortless**—Users can onboard quickly and easily, while staying focused on the task in front of them, and providing only necessary information.\n2.  **Customizable**—The process can scale up and down according to the user needs—making onboarding versatile, yet focused.\n3.  **Relevant**—Users can bypass distractions by seeing short headlines and paragraphs, and only relevant images.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/activation-flow-02.7760bad10eb8d99537c06690907010fe.png)\n\n## Suggested use![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Your sign in flow must be secure and easy to follow.\n*   The sign in flow must be the path of least resistance. Avoid unnecessary steps. For example:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/activation-flow-01.03627e4cf7c6d6f62583c6814248114e.png)\n\n*   If users need to sign in to an external site, collect sensitive credentials on that site, not within the Stripe Dashboard to avoid compromising passwords.\n*   Stick to the recommended set of steps.\n*   Detect whether a user already has an account for your product and allow them enter a sign in flow. For example:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/activation-flow-03.4593e0c6fedebac58dce2828163a7b74.png)\n\n*   Keep the onboarding flow brief and include authorization to connect your users’ Stripe accounts to your product. For example:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/activation-flow-04.a680b38bbdfe4e1546ae93f64a37af90.png)\n\n*   Always redirect users back to Stripe when sign in is complete. For example:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/activation-flow-05.6f272ac74689bbaf260607e08119ecd1.png)",
  "title": "Activation flow for Stripe Apps | Stripe Documentation",
  "description": "Learn how to build an clear activation flow for your Stripe app.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/patterns/sign-out",
  "markdown": "# Sign out for Stripe Apps\n\n## Learn how to sign users out of your app.\n\nMake sure users can sign out of your app.\n\n## Suggested use![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   Place a sign out link below the content on every page. For example:\n\n![Sign out link](https://b.stripecdn.com/docs-statics-srv/assets/signout.0c59daf04a6ae959a63a674cb7853005.png)",
  "title": "Sign out for Stripe Apps | Stripe Documentation",
  "description": "Learn how to sign users out of your app.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/api-authentication/rak",
  "markdown": "# Restricted API key authentication | Stripe DocumentationThe Stripe Docs logo\n\n## Generate a permissioned restricted API key (RAK) when a user installs your app.\n\n![Installing an app to generate a RAK](https://b.stripecdn.com/docs-statics-srv/assets/rak-user-journey.14fda11d13eaeb5cdbebbea71f277126.png)\n\n### RAK user flow![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA user authenticating with the RAK follows these steps.\n\n1.  On your site, the user clicks a link that redirects them to Stripe.\n2.  On Stripe, the user selects the appropriate account and accepts permissions for installing the app.\n3.  After the app is installed, it generates a restricted API key provisioned with the proper permissions.\n4.  The user copies the generated keys and provides them to your site.\n\n[](#develop-app)\n\n1.  Create your app using our template.\n    \n    `stripe apps create <app-name> --template restricted-api-key-app`\n    \n    If you have an existing app, run this command in Stripe CLI:\n    \n    `stripe apps set api-access-type restricted_api_key`\n    \n2.  Add all the [permissions](https://docs.stripe.com/stripe-apps/reference/permissions) that your app requires.\n    \n3.  Edit your [app settings page](https://docs.stripe.com/stripe-apps/app-settings). If you use the template above, a settings view is automatically created. We recommend adding instructions or links to your own documentation on this page for users to reference when setting up your app.\n    \n    ![The install link page showing app permissions](https://b.stripecdn.com/docs-statics-srv/assets/settingsview.ca0e43bcc311ea9819da61b2949e6ed1.png)\n    \n    Example app settings page\n    \n4.  [Upload](https://docs.stripe.com/stripe-apps/upload-install-app) your app to Stripe.\n    \n    #### Note\n    \n\n[](#test-app)\n\nYou can test the RAK authentication on your own account.\n\n1.  [Install your app in test mode](https://docs.stripe.com/stripe-apps/versions-and-releases#changing-between-versions) on your account.\n2.  Go to your [installed apps page](https://dashboard.stripe.com/settings/apps) in settings and click your recently installed app.\n3.  From the app settings page, click **View API keys**. Copy this secret key to test your integration.\n\nTo test your app on a different Stripe account than the one used to develop your app, use [external testing](https://docs.stripe.com/stripe-apps/test-app).",
  "title": "Restricted API key authentication | Stripe Documentation",
  "description": "Generate a permissioned restricted API key (RAK) when a user installs your app.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/upgrade-stripes-ui-extension-sdk",
  "markdown": "# Upgrade Stripe's UI extension SDK\n\n## Upgrade your app to the latest version of @stripe/ui-extension-sdk.\n\nThis page provides a comprehensive guide to help you navigate the breaking changes introduced in each major version of the [@stripe/ui-extension-sdk](https://www.npmjs.com/package/@stripe/ui-extension-sdk) and outlines the necessary changes to upgrade your application.\n\n## @stripe/ui-extension-sdk v9 ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n### What’s new in v9![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nVersion 9 of `@stripe/ui-extension-sdk` introduces property validation for all of its components. This version is more secure, mitigates bugs, and promotes adherence to coding best practices. After you install it, pay attention to TypeScript errors arising from invalid property values, as they could throw validation errors causing the application to crash.\n\n### Component changes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWe made visual updates to several components. After you install the latest version, review your app to make sure that the components appear as they should.\n\n| Component | Breaking changes |\n| --- | --- |\n| Button | `className` prop has been removed |\n| DateField | `onChange` prop now directly receives the value instead of the change event. |\n| FormFieldGroup | `layout` prop values has changed from `row` and `column` to `horizontal` and `vertical`<br><br>`invalid` prop has been removed |\n| Link | `className` prop has been removed |\n| Tab | `tabKey` prop has been replaced by `id` |\n| TabPanel | `tabKey` prop has been replaced by `id` |\n| TextArea | `onKeyPress` prop has been removed |\n| TextField | `onChange` callback signature has changed |",
  "title": "Upgrade Stripe's UI extension SDK | Stripe Documentation",
  "description": "Upgrade your app to the latest version of @stripe/ui-extension-sdk.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-apps/ui-extension-developer-tools",
  "markdown": "# UI extension developer tools | Stripe DocumentationThe Stripe Docs logo\n\n## Typecheck, lint, and test your code using bundled developer tools.\n\nWhen you [create an app](https://docs.stripe.com/stripe-apps/create-app) using the Stripe CLI, the generated package includes development environment tooling with best practices built in to help you build a UI extension. This document details the tools that we include and how to modify them (if desired) to suit your app.\n\n## Type checking ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nApps come with [Typescript](https://www.typescriptlang.org/) support, and all of the supporting packages we ship have type definitions to aid development. Typescript warnings display in supported code editors automatically, but you can also check your code using the command line:\n\nYour app’s root directory has a `tsconfig.json` file that extends our recommended configuration in the `@stripe/ui-extension-tools` package. Most developers won’t need to modify this file, but advanced users can add their own properties or even remove the `extends` property and create their own Typescript configuration.\n\nTo enable image imports, we include a `ui-extensions.d.ts` type definition file that references type definitions from the `@stripe/ui-extension-tools` package. We don’t recommend removing this file because it’s a helpful indicator of what image types our CLI can process.\n\n## Linting ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nLinting (checking code for syntax and formatting errors) is an invaluable developer tool, and apps come with an [ESLint](https://eslint.org/) configuration. We include best-practice linter rules and also Stripe-specfic rules to prevent common mistakes. Linting warnings display in supported code editors automatically, but you can also check your code using the command line:\n\nThe ESLint configuration is in the `package.json` file in the `eslintConfig` property. It extends the configuration in the `@stripe/ui-extension-tools` package. Most developers won’t need to modify this configuration, but advanced users can add their own properties or even remove the `extends` property and create their own set of linting rules.\n\n## Testing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nApp developers can [write unit tests](https://docs.stripe.com/stripe-apps/ui-testing) for their React components and utility functions using the bundled test harness built with [Jest](https://jestjs.io/). Run your tests on the command line:\n\nYour app’s root directory has a `jest.config.js` file that extends our recommended configuration in the `@stripe/ui-extension-tools` package. Most developers won’t need to modify this file, but advanced users can add their own properties or even remove the import and create their own configuration.",
  "title": "UI extension developer tools | Stripe Documentation",
  "description": "Typecheck, lint, and test your code using bundled developer tools.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api?lang=node",
  "markdown": "# Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi)\n\nThe Stripe API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts [form-encoded](https://en.wikipedia.org/wiki/POST_(HTTP)#Use_for_submitting_web_forms) request bodies, returns [JSON-encoded](http://www.json.org/) responses, and uses standard HTTP response codes, authentication, and verbs.\n\nYou can use the Stripe API in test mode, which doesn’t affect your live data or interact with the banking networks. The API key you use to [authenticate](https://docs.stripe.com/api/authentication) the request determines whether the request is live mode or test mode.\n\nThe Stripe API doesn’t support bulk updates. You can work on only one object per request.\n\nThe Stripe API differs for every account as we release new [versions](https://docs.stripe.com/api/versioning) and tailor functionality. [Log in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi) to see docs with your test key and data.\n\n## Not a developer?\n\nUse Stripe’s [no-code options](https://docs.stripe.com/payments/no-code) or apps from [our partners](https://stripe.partners/) to get started with Stripe and to do more with your Stripe account—no code required.\n\nClient Libraries\n\n$`npm install --save stripe`\n\n## [Authentication](https://docs.stripe.com/api/authentication)\n\nThe Stripe API uses [API keys](https://docs.stripe.com/keys) to authenticate requests. You can view and manage your API keys in [the Stripe Dashboard](https://dashboard.stripe.com/login?redirect=/apikeys).\n\nTest mode secret keys have the prefix `sk_test_` and live mode secret keys have the prefix `sk_live_`. Alternatively, you can use [restricted API keys](https://docs.stripe.com/keys#limit-access) for granular permissions.\n\nYour API keys carry many privileges, so be sure to keep them secure! Do not share your secret API keys in publicly accessible areas such as GitHub, client-side code, and so forth.\n\nUse your API key by setting it in the initial configuration of `stripe`. The Node.js library will then automatically send this key in each request.\n\nYou can also set a per-request key with an option. This is often useful for Connect applications that use multiple API keys during the lifetime of a process. Methods on the returned object reuse the same API key.\n\nAll API requests must be made over [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure). Calls made over plain HTTP will fail. API requests without authentication will also fail.\n\n```\nconst Stripe = require('stripe');const stripe = Stripe('sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc');\n```\n\n```\nvar charge = await stripe.charges.retrieve(  'ch_3LiiC52eZvKYlo2C1da66ZSQ',  {    apiKey: 'sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc'  });\n```\n\nYour API Key\n\nA sample test API key is included in all the examples here, so you can test any example right away. Do not submit any personally identifiable information in requests made with this key.\n\nTo test requests using your account, replace the sample API key with your actual API key or [sign in](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi).\n\n## [Connected Accounts](https://docs.stripe.com/api/connected-accounts)\n\nTo act as connected accounts, clients can issue requests using the `Stripe-Account` special header. Make sure that this header contains a Stripe account ID, which usually starts with the `acct_` prefix.\n\nThe value is set per-request as shown in the adjacent code sample. Methods on the returned object reuse the same account ID.\n\n*   Related guide: [Making API calls for connected accounts](https://docs.stripe.com/connect/authentication)\n\n```\nstripe.charges.retrieve('ch_3LmjSR2eZvKYlo2C1cPZxlbL', {  stripeAccount: 'acct_1032D82eZvKYlo2C'});\n```\n\n## [Errors](https://docs.stripe.com/api/errors)\n\nStripe uses conventional HTTP response codes to indicate the success or failure of an API request. In general: Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate an error that failed given the information provided (e.g., a required parameter was omitted, a charge failed, etc.). Codes in the `5xx` range indicate an error with Stripe’s servers (these are rare).\n\nSome `4xx` errors that could be handled programmatically (e.g., a card is [declined](https://docs.stripe.com/declines)) include an [error code](https://docs.stripe.com/error-codes) that briefly explains the error reported.\n\n### Attributes\n\n*   The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `api_error` |\n    | `card_error` |\n    | `idempotency_error` |\n    | `invalid_request_error` |\n    \n*   For some errors that could be handled programmatically, a short string indicating the [error code](https://docs.stripe.com/error-codes) reported.\n    \n*   #### \n    \n    decline\\_codenullable string\n    \n*   A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.\n    \n*   If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.\n    \n*   #### \n    \n    payment\\_intentnullable object\n    \n\n### More\n\n*   #### \n    \n    payment\\_method\\_typenullable string\n    \n\n*   #### \n    \n    request\\_log\\_urlnullable string\n    \n*   #### \n    \n    setup\\_intentnullable object\n    \n\n*   #### \n    \n    payment\\_methodnullable object\n    \n\nHTTP Status Code Summary\n\n|     |     |     |\n| --- | --- | --- |\n| 200 | OK  | Everything worked as expected. |\n| 400 | Bad Request | The request was unacceptable, often due to missing a required parameter. |\n| 401 | Unauthorized | No valid API key provided. |\n| 402 | Request Failed | The parameters were valid but the request failed. |\n| 403 | Forbidden | The API key doesn’t have permissions to perform the request. |\n| 404 | Not Found | The requested resource doesn’t exist. |\n| 409 | Conflict | The request conflicts with another request (perhaps due to using the same idempotent key). |\n| 429 | Too Many Requests | Too many requests hit the API too quickly. We recommend an exponential backoff of your requests. |\n| 500, 502, 503, 504 | Server Errors | Something went wrong on Stripe’s end. (These are rare.) |\n\nError Types\n\n|     |     |\n| --- | --- |\n| `api_error` | API errors cover any other type of problem (e.g., a temporary problem with Stripe’s servers), and are extremely uncommon. |\n| `card_error` | Card errors are the most common type of error you should expect to handle. They result when the user enters a card that can’t be charged for some reason. |\n| `idempotency_error` | Idempotency errors occur when an `Idempotency-Key` is re-used on a request that does not match the first request’s API endpoint and parameters. |\n| `invalid_request_error` | Invalid request errors arise when your request has invalid parameters. |\n\n## [Handling errors](https://docs.stripe.com/api/errors/handling)\n\nOur Client libraries raise exceptions for many reasons, such as a failed charge, invalid parameters, authentication errors, and network unavailability. We recommend writing code that gracefully handles all possible API exceptions.\n\n*   Related guide: [Error Handling](https://docs.stripe.com/error-handling)\n\n```\n// Note: Node.js API does not throw exceptions, and instead prefers the// asynchronous style of error handling described below.//// An error from the Stripe API or an otherwise asynchronous error// will be available as the first argument of any Stripe method's callback:// E.g. stripe.customers.create({...}, function(err, result) {});//// Or in the form of a rejected promise.// E.g. stripe.customers.create({...}).then(//        function(result) {},//        function(err) {}//      );switch (err.type) {  case 'StripeCardError':    // A declined card error    err.message; // => e.g. \"Your card's expiration year is invalid.\"    break;  case 'StripeRateLimitError':    // Too many requests made to the API too quickly    break;  case 'StripeInvalidRequestError':    // Invalid parameters were supplied to Stripe's API    break;  case 'StripeAPIError':    // An error occurred internally with Stripe's API    break;  case 'StripeConnectionError':    // Some kind of error occurred during the HTTPS communication    break;  case 'StripeAuthenticationError':    // You probably used an incorrect API key    break;  default:    // Handle any other types of unexpected errors    break;}\n```",
  "title": "Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/apps/secret_store/secret_resource",
  "markdown": "# Secrets | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fapps%2Fsecret_store%2Fsecret_resource)\n\n## [The Secret object](https://docs.stripe.com/api/apps/secret_store/secret_resource)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   If true, indicates that this secret has been deleted\n    \n*   #### \n    \n    expires\\_atnullable timestamp\n    \n    The Unix timestamp for the expiry time of the secret, after which the secret deletes.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   A name for the secret that’s unique within the scope.\n    \n*   #### \n    \n    payloadnullable stringExpandable\n    \n    The plaintext secret value to be stored.\n    \n*   Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.\n    \n\n```\n{  \"id\": \"appsecret_5110hHS1707T6fjBnah1LkdIwHu7ix\",  \"object\": \"apps.secret\",  \"created\": 1680209063,  \"expires_at\": null,  \"livemode\": false,  \"name\": \"my-api-key\",  \"scope\": {    \"type\": \"account\"  }}\n```\n\n## [List secrets](https://docs.stripe.com/api/apps/secret_store/list)\n\nList all secrets stored on the given scope.\n\n### Parameters\n\n*   Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` Secrets, starting after Secret `starting_after`. Each entry in the array is a separate Secret object. If no more Secrets are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/apps/secrets \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"scope[type]\"=account\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/apps/secrets\",  \"has_more\": false,  \"data\": [    {      \"id\": \"appsecret_5110hHS1707T6fjBnah1LkdIwHu7ix\",      \"object\": \"apps.secret\",      \"created\": 1680209063,      \"expires_at\": null,      \"livemode\": false,      \"name\": \"my-api-key\",      \"scope\": {        \"type\": \"account\"      }    }    {...}    {...}  ],}\n```\n\n## [Delete a Secret](https://docs.stripe.com/api/apps/secret_store/delete)\n\nDeletes a secret from the secret store by name and scope.\n\n### Parameters\n\n*   A name for the secret that’s unique within the scope.\n    \n*   Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.\n    \n\n### Returns\n\nReturns the deleted secret object.\n\nPOST /v1/apps/secrets/delete\n\n```\ncurl https://api.stripe.com/v1/apps/secrets/delete \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=my-api-key \\  -d \"scope[type]\"=account\n```\n\n```\n{  \"id\": \"appsecret_5110hHS1707T6fjBnah1LkdIwHu7ix\",  \"object\": \"apps.secret\",  \"deleted\": true}\n```\n\n## [Find a Secret](https://docs.stripe.com/api/apps/secret_store/find)\n\nFinds a secret in the secret store by name and scope.\n\n### Parameters\n\n*   A name for the secret that’s unique within the scope.\n    \n*   Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.\n    \n\n### Returns\n\nReturns a secret object.\n\nGET /v1/apps/secrets/find\n\n```\ncurl -G https://api.stripe.com/v1/apps/secrets/find \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=my-api-key \\  -d \"scope[type]\"=account\n```\n\n```\n{  \"id\": \"appsecret_5110hHS1707T6fjBnah1LkdIwHu7ix\",  \"object\": \"apps.secret\",  \"created\": 1680209063,  \"expires_at\": null,  \"livemode\": false,  \"name\": \"my-api-key\",  \"scope\": {    \"type\": \"account\"  }}\n```\n\n## [Set a Secret](https://docs.stripe.com/api/apps/secret_store/set)\n\nCreate or replace a secret in the secret store.\n\n### Parameters\n\n*   A name for the secret that’s unique within the scope.\n    \n*   The plaintext secret value to be stored.\n    \n*   Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.\n    \n*   The Unix timestamp for the expiry time of the secret, after which the secret deletes.\n    \n\n### Returns\n\nReturns a secret object.\n\n```\ncurl https://api.stripe.com/v1/apps/secrets \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=my-api-key \\  -d payload=secret_key_xxxxxx \\  -d \"scope[type]\"=account\n```\n\n```\n{  \"id\": \"appsecret_5110hHS1707T6fjBnah1LkdIwHu7ix\",  \"object\": \"apps.secret\",  \"created\": 1680209063,  \"expires_at\": null,  \"livemode\": false,  \"name\": \"my-api-key\",  \"scope\": {    \"type\": \"account\"  }}\n```",
  "title": "Secrets | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/error-handling?lang=node",
  "markdown": "# Error handling | Stripe DocumentationThe Stripe Docs logo\n\n## Catch and respond to declines, invalid data, network problems, and more.\n\nStripe offers many kinds of errors. They can reflect external events, like declined payments and network interruptions, or code problems, like invalid API calls.\n\nTo handle errors, use some or all of the techniques in the table below. No matter what technique you use, you can follow up with our [recommended responses for each error type](#error-types).\n\n| Technique | Purpose | When needed |\n| --- | --- | --- |\n| [Catch exceptions](#catch-exceptions) | Recover when an API call can’t continue | Always |\n| [Monitor webhooks](#monitor-webhooks) | React to notifications from Stripe | Sometimes |\n| [Get stored information about failures](#use-stored-information) | Investigate past problems and support other techniques | Sometimes |\n\n## Catch exceptions ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf an immediate problem prevents an API call from continuing, the Stripe Node.js library can raise an exception. It’s a best practice to catch and handle exceptions. To enable exception raising and catch the exception, do the following: raising and catch the exception, you need to do several things:\n\n*   If you make the API call in a function, precede the function definition with the `async` keyword.\n*   Precede the API call itself with the `await` keyword.\n*   Wrap the API call in a `try`/`catch` block.\n\nWhen you catch an exception, you can [use its type attribute to choose a response](#error-types).\n\n`const stripe = require('stripe')(`\n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n``);  async function exampleFunction(args) {   try {     const paymentIntent = await stripe.paymentIntents.create(args);     console.log('No error.');   } catch (e) {     switch (e.type) {       case 'StripeCardError':         console.log(`A payment error occurred: ${e.message}`);         break;       case 'StripeInvalidRequestError':         console.log('An invalid request occurred.');         break;       default:         console.log('Another problem occurred, maybe unrelated to Stripe.');         break;     }   } }``\n\nAfter setting up exception handling, test it on a variety of data, including [test cards](https://docs.stripe.com/testing), to simulate different payment outcomes.\n\n`exampleFunction({   // The required parameter currency is missing   amount: 2000,   confirm: true,   payment_method:` \n\n`'pm_card_visa'`\n\n`, })`\n\n`An invalid request occurred.`\n\n## Monitor webhooks![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe notifies you about many kinds of problems using [webhooks](https://docs.stripe.com/webhooks \"webhook\"). This includes problems that don’t follow immediately after an API call. For example:\n\n*   You lose a dispute.\n*   A recurring payment fails after months of success.\n*   Your frontend [confirms](https://docs.stripe.com/api/payment_intents/confirm \"confirm\") a payment, but goes offline before finding out the payment fails. (The backend still receives webhook notification, even though it wasn’t the one to make the API call.)\n\nYou don’t need to handle every webhook event type. In fact, some integrations don’t handle any.\n\nIn your webhook handler, start with the basic steps from the [webhook builder](https://docs.stripe.com/webhooks/quickstart): get an event object and use the event type to find out what happened. Then, if the event type indicates an error, follow these extra steps:\n\n1.  Access [event.data.object](https://docs.stripe.com/api/events/object#event_object-data-object) to retrieve the affected object.\n2.  [Use stored information](#use-stored-information) on the affected object to gain context, including an error object.\n3.  [Use its type to choose a response](#error-types).\n\n`const stripe = require('stripe')(`\n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n``); const express = require('express'); const app = express();  app.post('/webhook', express.json({type: 'application/json'}), (request, response) => {    // Get an event object   const event = request.body;    // Use its type to find out what happened   if (event.type == 'payment_intent.payment_failed') {      // Get the object affected     const paymentIntent = event.data.object;      // Use stored information to get an error object     const error = paymentIntent.error;      // Use its type to choose a response     switch (error.type) {       case 'StripeCardError':         console.log(`A payment error occurred: ${error.message}`);         break;       case 'StripeInvalidRequestError':         console.log('An invalid request occurred.');         if (error.param) {           console.log(`The parameter ${error.param} is invalid or missing.`);         }         break;       default:         console.log('Another problem occurred, maybe unrelated to Stripe.');         break;     }   }   response.send(); });  app.listen(4242, () => console.log('Running on port 4242'));``\n\nTo test how your integration responds to webhook events, you can [trigger webhook events locally](https://docs.stripe.com/webhooks#test-webhook). After completing the setup steps at that link, trigger a failed payment to see the resulting error message.\n\n`stripe trigger payment_intent.payment_failed`\n\n`A payment error occurred: Your card was declined.`\n\n## Get stored information about failures ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nMany objects store information about failures. That means that if something already went wrong, you can retrieve the object and examine it to learn more. In many cases, stored information is in the form of an error object, and you can [use its type to choose a response](#error-types).\n\nFor instance:\n\n1.  Retrieve a specific payment intent.\n2.  Check if it experienced a payment error by determining if [last\\_payment\\_error](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-last_payment_error) is empty.\n3.  If it did, log the error, including its type and the affected object.\n\n`const stripe = require('stripe')(`\n\n`\"sk_test_4eC39HqLyjWDarjtT1zdp7dc\"`\n\n``);  const payment_intent = await stripe.paymentIntents.retrieve(  '{{PAYMENT_INTENT_ID}}'  )  const e = payment_intent.last_payment_error  if (e !== null) {   console.log(`PaymentIntent ${payment_intent.id} experienced a ${e.type} error.`) }``\n\nHere are common objects that store information about failures.\n\nTo test code that uses stored information about failures, you often need to simulate failed transactions. You can often do this using [test cards](https://docs.stripe.com/testing) or test bank numbers. For example:\n\n*   [Simulate a declined payment](https://docs.stripe.com/testing#declined-payments), for creating failed Charges, PaymentIntents, SetupIntents, and so on.\n*   [Simulate a failed payout](https://docs.stripe.com/connect/testing#account-numbers).\n*   [Simulate a failed refund](https://docs.stripe.com/testing#refunds).\n\n## Types of error and responses ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn the Stripe Node.js library, each error object has a `type` attribute. Use the documentation for each type for advice about how to respond.\n\n| Name | Type | Description |\n| --- | --- | --- |\n| Payment error | [StripeCardError](#payment-errors) | An error occurred during a payment, involving one of these situations:<br><br>*   [Payment blocked for suspected fraud](#payment-blocked)<br>*   [Payment declined by the issuer](#payment-declined).<br>*   [Other payment errors](#other-payment-errors). |\n| Invalid request error | [StripeInvalidRequestError](#invalid-request-errors) | You made an API call with the wrong parameters, in the wrong state, or in an invalid way. |\n| Connection error | [StripeConnectionError](#connection-errors) | There was a network problem between your server and Stripe. |\n| API error | [StripeAPIError](#api-errors) | Something went wrong on Stripe’s end. (These are rare.) |\n| Authentication error | [StripeAuthenticationError](#authentication-errors) | Stripe can’t authenticate you with the information provided. |\n| Idempotency error | [StripeIdempotencyError](#idempotency-errors) | You used an [idempotency key](https://docs.stripe.com/api/idempotent_requests) for something unexpected, like replaying a request but passing different parameters. |\n| Permission error | [StripePermissionError](#permission-errors) | The API key used for this request does not have the necessary permissions. |\n| Rate limit error | [StripeRateLimitError](#rate-limit-errors) | You made too many API calls in too short a time. |\n| Signature verification error | [StripeSignatureVerificationError](#signature-verification-errors) | You’re using [webhook](https://docs.stripe.com/webhooks \"webhook\") [signature verification](https://docs.stripe.com/webhooks#verify-events) and couldn’t verify that a webhook event is authentic. |\n\n## Payment errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPayment errors—sometimes called “card errors” for historical reasons—cover a wide range of common problems. They come in three categories:\n\n*   [Payment blocked for suspected fraud](#payment-blocked)\n*   [Payment declined by the issuer](#payment-declined)\n*   [Other payment errors](#other-payment-errors)\n\nTo distinguish these categories or get more information about how to respond, consult the [error code](https://docs.stripe.com/error-codes), [decline code](https://docs.stripe.com/declines/codes), and [charge outcome](https://docs.stripe.com/api/charges/object#charge_object-outcome).\n\n(To find the charge outcome from an error object, first get the [Payment Intent that’s involved](https://docs.stripe.com/api/errors#errors-payment_intent) and the [latest Charge it created](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-latest_charge). See the example below for a demonstration.)\n\n`const stripe = require('stripe')(`\n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`);  async function exampleFunction(args) {     try {       const paymentIntent = await stripe.paymentIntents.create(args);     } catch (e) {       console.log(e)       const charge = await stripe.charges.retrieve(e.payment_intent.latest_charge)       if (e.type === 'StripeCardError') {         if (charge.outcome.type === 'blocked') {           console.log('Payment blocked for suspected fraud.')         } else if (e.code === 'card_declined') {           console.log('Payment declined by the issuer.')         } else if (e.code === 'expired_card') {           console.log('Card expired.')         } else {           console.log('Other card error.')         }       }     }   }`\n\nUsers on API version [2022-08-01](https://docs.stripe.com/upgrades#2022-08-01) or older:\n\n(To find the charge outcome from an error object, first get the [Payment Intent that’s involved](https://docs.stripe.com/api/errors#errors-payment_intent) and the [latest Charge it created](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-charges-data). See the example below for a demonstration.)\n\n`const stripe = require('stripe')(`\n\n`'sk_test_4eC39HqLyjWDarjtT1zdp7dc'`\n\n`);  async function exampleFunction(args) {     try {       const paymentIntent = await stripe.paymentIntents.create(args);     } catch (e) {       console.log(e)       if (e.type === 'StripeCardError') {         if (e.payment_intent.charges.data[0].outcome.type === 'blocked') {           console.log('Payment blocked for suspected fraud.')         } else if (e.code === 'card_declined') {           console.log('Payment declined by the issuer.')         } else if (e.code === 'expired_card') {           console.log('Card expired.')         } else {           console.log('Other card error.')         }       }     }   }`\n\nYou can trigger some common kinds of payment error with test cards. Consult these lists for options:\n\n*   [Simulating payments blocked for fraud risk](https://docs.stripe.com/testing#fraud-prevention)\n*   [Simulating declined payments and other card errors](https://docs.stripe.com/testing#declined-payments)\n\nThe test code below demonstrates a few possibilities.\n\n`exampleFunction({   currency: 'usd',   amount: 2000,   confirm: true,   payment_method:` \n\n`'pm_card_radarBlock'`\n\n`, })`\n\n`Payment blocked for suspected fraud.`\n\n### Payment blocked for suspected fraud ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n|     |     |\n| --- | --- |\n| **Type** | `StripeCardError` |\n| **Codes** | `const charge = await stripe.charges.retrieve(e.payment_intent.latest_charge) charge.outcome.type === 'blocked'` |\n| **Codes** | `e.payment_intent.charges.data[0].outcome.type === 'blocked'` |\n| **Problem** | Stripe’s fraud prevention system, [Radar](https://docs.stripe.com/radar \"Radar for Fraud Teams\"), blocked the payment |\n| **Solutions** | This error can occur when your integration is working correctly. Catch it and prompt the customer for a different payment method.<br><br>To block fewer legitimate payments, try these:<br><br>*   [Optimize your Radar integration](https://docs.stripe.com/radar/integration) to collect more detailed information.<br>*   Use [Payment Links](https://docs.stripe.com/payment-links), [Checkout](https://docs.stripe.com/payments/checkout), or [Stripe Elements](https://docs.stripe.com/payments/elements) for prebuilt optimized form elements.<br><br>[Radar for Fraud Teams](https://docs.stripe.com/radar \"Radar for Fraud Teams\") customers have these additional options:<br><br>*   To exempt a specific payment, add it to your allowlist. Radar for Fraud Teams<br>*   To change your risk tolerance, adjust your [risk settings](https://docs.stripe.com/radar/risk-settings). Radar for Fraud Teams<br>*   To change the criteria for blocking a payment, use [custom rules](https://docs.stripe.com/radar/rules). Radar for Fraud Teams<br><br>You can test your integration’s settings with [test cards that simulate fraud](https://docs.stripe.com/radar/testing). If you have custom Radar rules, follow the testing advice in the [Radar documentation](https://docs.stripe.com/radar/testing). |\n\n### Payment declined by the issuer ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n### Other payment errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n|     |     |\n| --- | --- |\n| **Type** | `StripeCardError` |\n| **Problem** | Another payment error occurred. |\n| **Solutions** | This error can occur when your integration is working correctly. Use the error code to determine what next steps are appropriate. See the [documentation on error codes](https://docs.stripe.com/error-codes) for appropriate responses to each code. |\n\n## Invalid request errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n|     |     |\n| --- | --- |\n| **Type** | `StripeInvalidRequestError` |\n| **Problem** | You made an API call with the wrong parameters, in the wrong state, or in an invalid way. |\n| **Solutions** | In most cases, the problem is with the request itself. Either its parameters are invalid or it can’t be carried out in your integration’s current state.<br><br>*   Consult the [error code documentation](https://docs.stripe.com/error-codes) for details on the problem.<br>*   For convenience, you can follow the link at `e.doc_url` for documentation about the error code.<br>*   If the error involves a specific parameter, use `e.param` to determine which one. |\n\n## Connection errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n|     |     |\n| --- | --- |\n| **Type** | `StripeAPIConnectionError` |\n| **Problem** | There was a network problem between your server and Stripe. |\n| **Solutions** | Treat the result of the API call as indeterminate. That is, don’t assume that it succeeded or that if failed.<br><br>To find out if it succeeded, you can:<br><br>*   Retrieve the relevant object from Stripe and check its status.<br>*   Listen for webhook notification that the operation succeeded or failed.<br><br>To make it easier to recover from connection errors, you can:<br><br>*   When creating or updating an object, use an [idempotency key](https://docs.stripe.com/api/idempotent_requests). Then, if a connection error occurs, you can safely repeat the request without risk of creating a second object or performing the update twice. Repeat the request with the same idempotency key until you receive a clear success or failure. For advanced advice on this strategy, see [Low-level error handling](https://docs.stripe.com/error-low-level#idempotency).<br>*   Turn on [automatic retries.](#automatic-retries) Then, Stripe generates idempotency keys for you, and repeats requests for you when it is safe to do so.<br><br>This error can mask others. It’s possible that when the connection error resolves, some other error becomes apparent. Check for errors in all of these solutions just as you would in the original request. |\n\n## API errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n|     |     |\n| --- | --- |\n| **Type** | `StripeAPIError` |\n| **Problem** | Something went wrong on Stripe’s end. (These are rare.) |\n| **Solutions** | Treat the result of the API call as indeterminate. That is, don’t assume that it succeeded or that it failed.<br><br>Rely on [webhooks](https://docs.stripe.com/webhooks \"webhook\") for information about the outcome. Whenever possible, Stripe fires webhooks for any new objects we create as we solve a problem.<br><br>To set your integration up for maximum robustness in unusual situations, see [this advanced discussion of server errors.](https://docs.stripe.com/error-low-level#server-errors) |\n\n## Authentication errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n|     |     |\n| --- | --- |\n| **Type** | `StripeAutheticationError` |\n| **Problem** | Stripe can’t authenticate you with the information provided. |\n| **Solutions** | *   Use the correct [API key](https://docs.stripe.com/keys).<br>*   Make sure you aren’t using a key that you [“rolled” or revoked](https://docs.stripe.com/keys#rolling-keys). |\n\n## Idempotency errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n|     |     |\n| --- | --- |\n| **Type** | `StripeIdempotencyError` |\n| **Problem** | You used an [idempotency key](https://docs.stripe.com/api/idempotent_requests) for something unexpected, like replaying a request but passing different parameters. |\n| **Solutions** | *   After you use an idempotency key, only reuse it for identical API calls.<br>*   Use idempotency keys under the limit of 255 characters. |\n\n## Permission errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n|     |     |\n| --- | --- |\n| **Type** | `StripePermissionError` |\n| **Problem** | The API key used for this request does not have the necessary permissions. |\n| **Solutions** | *   Are you using a [restricted API key](https://docs.stripe.com/keys#limit-access) for a service it doesn’t have access to?<br>*   Are you performing an action in the Dashboard while logged in as a [user role](https://docs.stripe.com/get-started/account/teams/roles) that lacks permission? |\n\n## Rate limit errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n|     |     |\n| --- | --- |\n| **Type** | `StripeRateLimitError` |\n| **Problem** | You made too many API calls in too short a time. |\n| **Solutions** | *   If a single API call triggers this error, wait and try it again.<br>*   To handle rate-limiting automatically, retry the API call after a delay, and increase the delay exponentially if the error continues. See the documentation on [rate limits](https://docs.stripe.com/rate-limits) for further advice.<br>*   If you anticipate a large increase in traffic and want to request an increased rate limit, [contact support](https://support.stripe.com/) in advance. |\n\n## Signature verification errors ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n|     |     |\n| --- | --- |\n| **Type** | `StripeSignatureVerificationError` |\n| **Problem** | You’re using [webhook](https://docs.stripe.com/webhooks \"webhook\") [signature verification](https://docs.stripe.com/webhooks#verify-events) and couldn’t verify that a webhook event is authentic. |\n| **Solutions** | This error can occur when your integration is working correctly. If you use webhook signature verification and a third party attempts to send you a fake or malicious webhook, then verification fails and this error is the result. Catch it and respond with a `400 Bad Request` status code.<br><br>If you receive this error when you shouldn’t—for instance, with webhooks that you know originate with Stripe—then see the documentation on [checking webhook signatures](https://docs.stripe.com/webhooks#verify-events) for further advice. In particular, make sure you’re using the correct endpoint secret. This is different from your API key. |",
  "title": "Error handling | Stripe Documentation",
  "description": "Catch and respond to declines, invalid data, network problems, and more.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/customers?lang=node",
  "markdown": "# Customers | Stripe API Reference\n\n## [The Customer object](https://docs.stripe.com/api/customers/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n\n*   #### \n    \n    descriptionnullable string\n    \n    An arbitrary string attached to the object. Often useful for displaying to users.\n    \n*   The customer’s email address.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The customer’s full name or business name.\n    \n*   The customer’s phone number.\n    \n*   Mailing and shipping address for the customer. Appears on invoices emailed to this customer.\n    \n\n### More attributes\n\n*   #### \n    \n    cash\\_balancenullable objectExpandable\n    \n\n*   #### \n    \n    default\\_sourcenullable stringExpandable\n    \n*   #### \n    \n    delinquentnullable boolean\n    \n\n*   #### \n    \n    invoice\\_credit\\_balanceobjectExpandable\n    \n*   #### \n    \n    invoice\\_prefixnullable string\n    \n\n*   #### \n    \n    next\\_invoice\\_sequencenullable integer\n    \n*   #### \n    \n    preferred\\_localesnullable array of strings\n    \n*   #### \n    \n    sourcesnullable objectExpandable\n    \n*   #### \n    \n    subscriptionsnullable objectExpandable\n    \n\n*   #### \n    \n    tax\\_idsnullable objectExpandable\n    \n*   #### \n    \n    test\\_clocknullable stringExpandable\n    \n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"address\": null,  \"balance\": 0,  \"created\": 1680893993,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": \"jennyrosen@example.com\",  \"invoice_prefix\": \"0759376C\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\",  \"test_clock\": null}\n```\n\n## [Create a customer](https://docs.stripe.com/api/customers/create)\n\n### Parameters\n\n*   An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard.\n    \n*   Customer’s email address. It’s displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to _512 characters_.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The customer’s full name or business name.\n    \n*   The ID of the PaymentMethod to attach to the customer.\n    \n*   The customer’s phone number.\n    \n*   The customer’s shipping information. Appears on invoices emailed to this customer.\n    \n\n### More parameters\n\n*   #### \n    \n    next\\_invoice\\_sequenceinteger\n    \n*   #### \n    \n    preferred\\_localesarray of strings\n    \n\n*   #### \n    \n    tax\\_id\\_dataarray of objects\n    \n\n### Returns\n\nReturns the Customer object after successful customer creation. Throws [an error](#errors) if create parameters are invalid (for example, specifying an invalid coupon or an invalid source).\n\n```\n// Set your secret key. Remember to switch to your live secret key in production.// See your keys here: https://dashboard.stripe.com/apikeysconst stripe = require('stripe')('sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc');const customer = await stripe.customers.create({  name: 'Jenny Rosen',  email: 'jennyrosen@example.com',});\n```\n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"address\": null,  \"balance\": 0,  \"created\": 1680893993,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": \"jennyrosen@example.com\",  \"invoice_prefix\": \"0759376C\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\",  \"test_clock\": null}\n```\n\n## [Update a customer](https://docs.stripe.com/api/customers/update)\n\nUpdates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the **source** parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the **source** parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the `past_due` state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the **default\\_source** for a customer will not trigger this behavior.\n\nThis request accepts mostly the same arguments as the customer creation call.\n\n### Parameters\n\n*   An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard.\n    \n*   Customer’s email address. It’s displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to _512 characters_.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The customer’s full name or business name.\n    \n*   The customer’s phone number.\n    \n*   The customer’s shipping information. Appears on invoices emailed to this customer.\n    \n\n### More parameters\n\n*   #### \n    \n    next\\_invoice\\_sequenceinteger\n    \n*   #### \n    \n    preferred\\_localesarray of strings\n    \n\n### Returns\n\nReturns the customer object if the update succeeded. Throws [an error](#errors) if update parameters are invalid (e.g. specifying an invalid coupon or an invalid source).\n\n```\nconst stripe = require('stripe')('sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc');const customer = await stripe.customers.update(  'cus_NffrFeUfNV2Hib',  {    metadata: {      order_id: '6735',    },  });\n```\n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"address\": null,  \"balance\": 0,  \"created\": 1680893993,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": \"jennyrosen@example.com\",  \"invoice_prefix\": \"0759376C\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"Jenny Rosen\",  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\",  \"test_clock\": null}\n```\n\n## [Retrieve a customer](https://docs.stripe.com/api/customers/retrieve)\n\nRetrieves a Customer object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the Customer object for a valid identifier. If it’s for a deleted Customer, a subset of the customer’s information is returned, including a `deleted` property that’s set to true.\n\n```\nconst stripe = require('stripe')('sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc');const customer = await stripe.customers.retrieve('cus_NffrFeUfNV2Hib');\n```\n\n```\n{  \"id\": \"cus_NffrFeUfNV2Hib\",  \"object\": \"customer\",  \"address\": null,  \"balance\": 0,  \"created\": 1680893993,  \"currency\": null,  \"default_source\": null,  \"delinquent\": false,  \"description\": null,  \"discount\": null,  \"email\": \"jennyrosen@example.com\",  \"invoice_prefix\": \"0759376C\",  \"invoice_settings\": {    \"custom_fields\": null,    \"default_payment_method\": null,    \"footer\": null,    \"rendering_options\": null  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Jenny Rosen\",  \"next_invoice_sequence\": 1,  \"phone\": null,  \"preferred_locales\": [],  \"shipping\": null,  \"tax_exempt\": \"none\",  \"test_clock\": null}\n```",
  "title": "Customers | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/adobe-commerce/install",
  "markdown": "# Use the Stripe Connector for Adobe Commerce (Magento 2)\n\n## Learn how to install, upgrade, and uninstall the Stripe Connector for Adobe Commerce (Magento 2).\n\n#### Caution\n\nWe recommend that you test the module before installing it on your production environment. If you experience an installation issue, see the [Troubleshooting](https://docs.stripe.com/connectors/adobe-commerce/troubleshooting) documentation.\n\n## Install the module ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  Place an order for the module through the [Adobe Marketplace](https://marketplace.magento.com/stripe-stripe-payments.html).\n    \n2.  Open a terminal and run the following command in your Adobe Commerce directory:\n    \n    `composer require stripe/stripe-payments`\n    \n\nAt this stage, you might have to submit your username and password. Provide your [Adobe Commerce authentication keys](https://devdocs.magento.com/guides/v2.3/install-gde/prereq/connect-auth.html). You can accept to save your credentials when prompted by Composer. If you’ve saved your keys and see the error `Invalid Credentials`, update your keys in `~/.composer/auth.json` or delete this file and run the command again.\n\n1.  Set up the module by running the following commands:\n    \n    `php bin/magento setup:upgrade php bin/magento cache:flush php bin/magento cache:clean`\n    \n2.  If you run Adobe Commerce in production mode, you must also compile and deploy the module’s static files.\n    \n\n`php bin/magento setup:di:compile php bin/magento setup:static-content:deploy`\n\n## Upgrade the module ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBefore you upgrade:\n\n*   Back up your files and database.\n*   Start with your test environment.\n*   Keep a copy of any customization you made to the module’s original code.\n*   Check out the [CHANGELOG](https://github.com/stripe/stripe-magento2-releases/blob/master/CHANGELOG.md).\n\nPatch releases (x.x.Y) are backward compatible and require no extra development on your side after you upgrade. Minor and major releases might add new features or change code in a backwards incompatible way. If you customized the module’s code, you’ll need to port these customizations after upgrading and resolve any potential conflict.\n\nRun the following commands:\n\n`composer remove stripe/stripe-payments composer require stripe/stripe-payments php bin/magento setup:upgrade php bin/magento setup:di:compile php bin/magento setup:static-content:deploy php bin/magento cache:clean`\n\n## Uninstall the module ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBefore you uninstall:\n\n*   Backup your files and database.\n*   Keep a copy of any customization you made to the module’s original code in case you need to reinstall it later.\n\nRun the following commands:\n\n`composer remove stripe/stripe-payments php bin/magento setup:upgrade php bin/magento setup:di:compile php bin/magento setup:static-content:deploy php bin/magento cache:clean`\n\n## Lifecycle policy![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe latest version of the module supports the following versions of Adobe Commerce:\n\n| Release | Support |\n| --- | --- |\n| Adobe Commerce 2.0 - 2.3.6 | No longer supported, the last compatible version is `stripe/stripe-payments:2.9.5`. |\n| Adobe Commerce 2.3.7 - 2.4.x | Currently supported, see below for our own lifecycle policy. |\n\nFor `stripe/stripe-payments:3.5.*` and newer, we provide new features, bug fixes, and security patches. Older versions are deprecated. Stripe recommends you upgrade at the earliest opportunity. All releases are available in the Adobe Marketplace and in the [stripe-magento2-releases](https://github.com/stripe/stripe-magento2-releases) GitHub repository.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Configuring the Stripe Connector for Adobe Commerce](https://docs.stripe.com/connectors/adobe-commerce/configuration)\n*   [Using the Adobe Commerce admin panel](https://docs.stripe.com/connectors/adobe-commerce/admin)\n*   [Troubleshooting](https://docs.stripe.com/connectors/adobe-commerce/troubleshooting)",
  "title": "Use the Stripe Connector for Adobe Commerce (Magento 2) | Stripe Documentation",
  "description": "Learn how to install, upgrade, and uninstall the Stripe Connector for Adobe Commerce (Magento 2).",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/adobe-commerce/configuration",
  "markdown": "# Configure the Stripe Connector for Adobe Commerce\n\n## Set up payment methods and other options using the Stripe Connector for Adobe Commerce.\n\nTo configure the [Stripe Connector for Adobe Commerce](https://docs.stripe.com/connectors/adobe-commerce) navigate to the configuration section for it (**Stores > Configuration > Sales > Payment Methods**):\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/configure-module.7880c27bc870530c80a598e9b0cc4fe8.png)\n\nConfiguring the Stripe module\n\nStripe appears on your checkout page only after you configure your API keys. If you don’t have a Stripe account yet, [register](https://dashboard.stripe.com/register) online.\n\n## Install the Stripe Adobe Commerce app ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse Stripe Apps to bolster security and simplify the use of distinct restricted keys for each integration with your Stripe account. The process of installing the Stripe App and acquiring the newly generated secret and publishable [keys](https://docs.stripe.com/keys) is essential for your integration with the Adobe Commerce connector. This approach eliminates the need to manually create your own restricted key or use a secret key. To integrate the Adobe Commerce app and reinforce your account’s security infrastructure:\n\n1.  Navigate to the [Stripe App Marketplace](https://marketplace.stripe.com/), then click [Install the Adobe Commerce app](https://marketplace.stripe.com/apps/install/link/com.stripe.AdobeCommerce).\n2.  Select the Stripe account where you want to install the app.\n3.  Review and approve the app permissions, install the app in test mode or live mode, then click **Install**.\n4.  After you install the app, store the keys in a safe place where you won’t lose them. To help yourself remember where you stored it, you can [leave a note on the key in the Dashboard](https://docs.stripe.com/keys#reveal-an-api-secret-key-live-mode).\n5.  Use the newly generated publishable key and secret key to finish the Connector configuration.\n6.  To manage the app or generate new security keys after installation, navigate to the application settings page in [test mode](https://dashboard.stripe.com/test/settings/apps/com.stripe.AdobeCommerce) or [live mode](https://dashboard.stripe.com/settings/apps/com.stripe.AdobeCommerce).\n\n## General settings ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   **Mode:** We recommend that you start by testing the integration in [test mode](https://docs.stripe.com/test-mode \"test mode\"). Switch to live mode when you’re ready to accept live transactions. You can learn more about [testing payments](https://docs.stripe.com/testing) on Stripe.\n*   **API keys:** Fill in the test and live keys that Stripe provides to you in the [Adobe Commerce app](https://dashboard.stripe.com/test/settings/apps/com.stripe.AdobeCommerce).\n*   **Hold Elevated Risk Orders:** If Stripe [Radar](https://docs.stripe.com/radar \"Radar\") marks a payment with an `Elevated Risk` status, the module places the order `On Hold` until you review the payment. See the section [Enabling fraud prevention features with Stripe Radar](https://docs.stripe.com/connectors/adobe-commerce#radar) for additional details.\n*   **Receipt Emails:** When enabled, Stripe sends a payment receipt email to the customer after the payment succeeds. You can customize the styles and brand of emails from your Stripe account settings.\n\n## Payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n*   **Enabled:** Enable or disable Stripe as an available payment method for the standard checkout page, for the multi-shipping checkout page, and for the admin area.\n*   **Payment flow:** Select your preferred payment flow for the standard checkout page. With the embedded payment flow, we embed an iframe-based Payment Element directly in the checkout page. With the redirect payment flow, we redirect customers to Stripe Checkout to complete their payment.\n*   **Form layout:** Display the payment method selector in Horizontal layout (tabs), or Vertical layout (accordion). We recommend the Vertical layout for narrow sections, such as on mobile or 3-column checkout pages. You can test the two layouts in the PaymentElement’s interactive [UI component](https://docs.stripe.com/payments/payment-element).\n*   **Title:** The label you want to display to the customer on the checkout page.\n*   **Payment method configuration:** Stripe supports [multiple configurations](https://docs.stripe.com/payments/payment-method-configurations) of payment methods. After you [configure the payment methods](https://dashboard.stripe.com/settings/payment_methods), they immediately become available in the dropdown field. You can select a different configuration for each of your store views, based on business requirements.\n*   **Payment Action:** Select a payment mode:\n    *   **Authorize and Capture**: Charge customer cards immediately after a purchase.\n    *   **Authorize Only**: Authorize the payment amount and place a hold on the card. You can capture the amount later [by issuing an invoice](https://docs.stripe.com/connectors/adobe-commerce/admin#capturing-later).\n    *   **Order**: Save the customer’s payment method without attempting an authorization or capture. You can collect payment for an order processed in this mode by issuing an invoice from the administrative area.\n*   **Expired authorizations:** For card payments that you don’t capture immediately, you must do so within seven days. Any attempt to capture the amount after that returns an error. By enabling this option, the module attempts to recreate the original payment with the original card used for that order. The module saves cards automatically in **Authorize Only** mode and the customer can’t delete them from their account section until you either invoice or cancel the order.\n*   **Automatic Invoicing:** The Authorize Only option creates a new invoice with a Pending status on checkout. After capturing the charge, the invoice status transitions to Paid. This option is useful when Payment Action is set to Authorize Only: no invoice results from completing the checkout flow. If enabled, the module automatically generates an invoice on checkout completion so you can email it to a customer before charging them.\n*   **Save customer payment method** Enable this option to allow customers to save their last used payment method in the Stripe vault and reuse it later for quicker checkout.\n*   **Card Icons:** Display card icons based on the card brands your Stripe account supports.\n*   **Optional Statement Descriptor:** This is an optional short description for the source of the payment, shown in the customer’s bank statements. If left empty, the default descriptor configured from your Stripe Dashboard applies. This option isn’t available for Multibanco, SEPA Direct Debit, or Sofort.\n*   **Sort Order:** If you’ve enabled multiple payment methods, this setting determines the order of payment methods presented on the checkout page.\n\n## Express Checkout ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nExpress Checkout lets customers place orders using one-click wallet buttons like [Link](https://docs.stripe.com/payments/link/what-is-link), [Apple Pay](https://docs.stripe.com/apple-pay), and [Google Pay](https://docs.stripe.com/google-pay). If supported by the customer’s device, you can display multiple wallets in any order. Set your preferences in the dedicated configuration section of the Adobe Commerce admin panel.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/connector-express-checkout.c3e09ee826a5d1659bda4bba38492e75.png)\n\nConfiguration options for Apple Pay and Google Pay\n\n*   **Enabled:** Toggles the wallet button as an available payment method for chosen locations. You can turn it on even if regular payments are disabled.\n*   **Locations:** Specify the pages where you want the wallet buttons to appear.\n*   **Seller name:** Your business name, which is displayed in the payment modal.\n*   **Button height:** You can modify the button height to match the **Add to Cart** and **Proceed to Checkout** buttons in your theme.\n*   **Sort order:** By default, Stripe arranges wallets in an optimal order based on factors like device capabilities and usage patterns. You can assign a sort order to each wallet in its sub-configuration section by selecting **Use sort order field**.\n\nIf you enable Express Checkout and the wallet buttons don’t appear, refer to the [troubleshooting page](https://docs.stripe.com/connectors/adobe-commerce/troubleshooting#wallet-button).\n\n## Webhooks ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe uses webhooks to notify your application when an event happens in your account. Webhooks are particularly useful for updating Magento orders when a customer’s bank confirms or declines a payment, or when collecting subscription payments. These events allow the module to mark Magento orders as ready for fulfilment, record refunds against them, or add comments about payment failure reasons.\n\nStarting from version 3 of the module, you no longer need to manually configure webhooks. The module checks and potentially configures webhooks automatically in the following cases:\n\n*   When you install or upgrade the module and trigger the `setup:upgrade` command.\n*   Every time you update the API keys in the Magento admin.\n*   Every time you change the URL of a store in the Magento admin.\n*   When the module detects a change in the database during one of the hourly automated checks. This prevents webhooks from being broken due to a manual change to the database, a migration from a different server, or a backup restoration.\n\nWhen updating webhooks, the module creates a single webhook endpoint per Stripe account. For example, if you have five store views, four are using a Stripe account and the last one is using a different Stripe account, the module creates two webhook endpoints.\n\nThis also applies if you use different domain names for your store views. In this case, the module uses one of the store view domains and not your base URL. This is to prevent issues with base URLs often being behind a firewall for security reasons.\n\nThe module uses webhook signatures to verify that the events were sent by Stripe, not by a third party. You can disable this protection only when your Magento instance is using developer mode.",
  "title": "Configure the Stripe Connector for Adobe Commerce | Stripe Documentation",
  "description": "Set up payment methods and other options using the Stripe Connector for Adobe Commerce.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/adobe-commerce/admin",
  "markdown": "# Using the Adobe Commerce admin panel\n\n## Learn how to use the Adobe Commerce admin panel to configure the Stripe module for the Adobe Commerce platform.\n\n## Issuing refunds![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Go to **Sales > Orders** to find the order you want to refund.\n2.  If you set _Payment Action_ to _Authorize Only_, the only action you need to take is to press the **Cancel** button at the top of the page. However, if you chose to _Authorize and Capture_, proceed to the next step.\n3.  From the left sidebar, click **Invoices**, then click on the [invoice](https://docs.stripe.com/api/invoices \"invoices\") to refund it.\n4.  At the top right-hand corner, click **Credit Memo**.\n5.  Adjust the amount (if necessary) and click **Refund** at the bottom of the page to perform a live refund. By clicking **Refund Offline**, you only issue the refund in Adobe Commerce and not in Stripe.\n\n1.  For a partial refund, you can adjust the **Adjustment Fee**. This is the amount you don’t want to refund. In the screenshot above, by setting the adjustment fee to 10 USD, we’re refunding 53.87 USD and 10 USD is kept as a fee. You can ignore the **Adjustment Refund** field because we won’t refund an amount that is greater than the original payment of the customer.\n\nThe amount is now fully or partially refunded in Stripe and a note appears in the **Comments History** of the order.\n\n## Authorizing card payments and capturing later ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn your [card settings](https://docs.stripe.com/connectors/adobe-commerce/configuration#payments), you can set **Payment Action** to only authorize card payments when placing an order. The bank guarantees the amount and holds it on the customer’s card for up to 7 days. Failure to capture the payment by this time cancels the authorization and releases the funds.\n\nOptionally, you can set **Expired Authorizations** to attempt to re-authorize the payment in case you miss the 7-day window but it isn’t guaranteed to succeed.\n\nWhen ready to capture (for example, you shipped the product), follow these steps:\n\n1.  Go to **Sales > Orders**.\n2.  Find the relevant order.\n3.  Click **Invoice**.\n4.  If you need to issue a partial invoice, adjust the invoice items as shown in the video below. You can reduce the item quantity but not increase it.\n5.  Click **Submit Invoice** to capture and finalize the payment.\n\nAfter clicking **Submit Invoice**, you can see the captured funds in the Stripe Dashboard.\n\n## Creating orders![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can create an order and charge a customer’s card with details that you’ve received over the phone, directly from the Adobe Commerce admin panel:\n\n1.  Go to **Sales > Orders**.\n2.  At the top right hand side, click **Create New Order**.\n3.  Choose a customer, the store, and any products for that order.\n4.  Select a shipping method (if applicable) before filling in payment details.\n5.  When you’re ready to submit the order, select a saved payment method. Clicking the **Add new** button redirects you to the customer page in Stripe, where you can securely enter a new payment method.\n6.  Click **Submit Order**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/admin-create-orders.be0947d1846510897ad2fa16e62c72ab.png)\n\nPayment information for admin orders\n\nIf you set **Payment Action** to authorize and capture, we charge the card immediately. If you set **Payment Action** to authorize only, you must also [capture the payment](#capturing-later).\n\n## Send an invoice to the customer![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen creating a new order from your Adobe Commerce admin, you have the option to send an invoice link to the customer by email:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/admin-send-invoice.ac36fd329e005e4310d379702bcece25.png)\n\nSend an invoice to the customer\n\nYou can change the due date to help keeping track of late payments in your Stripe Dashboard.\n\nUsing this method is more secure than paying by card from the Admin Panel as you avoid collecting sensitive payment information over the phone. By opening the link in the email, the customer opens a [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page) which includes a payment form.",
  "title": "Using the Adobe Commerce admin panel | Stripe Documentation",
  "description": "Learn how to use the Adobe Commerce admin panel to configure the Stripe module for the Adobe Commerce platform.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/adobe-commerce/troubleshooting",
  "markdown": "# Troubleshooting for Adobe Commerce | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to troubleshoot the Stripe Connector for Adobe Commerce.\n\nUse this guide to troubleshoot the Stripe Connector for Adobe Commerce.\n\n## Installation issues ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe most common issue during the installation process is getting the following error when using Composer:\n\n`Composer package not found: Could not find a matching version of package stripe/stripe-payments`\n\nIf you encounter this problem, follow these steps:\n\n1.  Order the module from the [Adobe Marketplace](https://marketplace.magento.com/stripe-stripe-payments.html).\n2.  Delete the file under `~/.composer/auth.json` in case you entered the wrong Adobe Commerce API keys.\n3.  Run the Composer command again. You might have to enter a username and password. Make sure that you enter the Adobe Commerce API keys of the account that you used to place the order. You can [get your authentication keys](https://devdocs.magento.com/guides/v2.4/install-gde/prereq/connect-auth.html) from Adobe Commerce.\n\n## Upgrades and caching issues ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you upgrade the module but for some reason don’t see the new changes, you can manually clear the Adobe Commerce cache by deleting a set of directories. The official Adobe Commerce documentation describes which directories to delete for [Adobe Commerce 2.3](https://devdocs.magento.com/guides/v2.3/howdoi/php/php_clear-dirs.html) and [Adobe Commerce 2.4](https://devdocs.magento.com/guides/v2.4/howdoi/php/php_clear-dirs.html).\n\nAfter you delete these directories, run the following commands:\n\n`php bin/magento setup:upgrade php bin/magento cache:flush`\n\nIf you’re running in production mode, you have to compile and deploy your static assets:\n\n`php bin/magento setup:di:compile php bin/magento setup:static-content:deploy`\n\nIf you’re running Varnish, you must also restart Varnish after deleting the var/cache/\\* files. Some browsers also cache Adobe Commerce requests; if you still have caching issues, try a different browser.\n\n## No payment method at checkout ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe payment method may not show at checkout for a few possible reasons:\n\n*   You’re missing the Stripe PHP library or you’re using an old version. You can install this dependency by following step 3 of the [installation instructions](https://docs.stripe.com/connectors/adobe-commerce/install)\n*   You have another Stripe module installed that’s using an older version of the Stripe PHP library. Disable or uninstall any other active Stripe module.\n*   You didn’t [configure the Stripe API keys](https://docs.stripe.com/connectors/adobe-commerce/configuration#general-settings) properly.\n*   You limited the availability of the payment method to specific countries or currencies.\n\n## Apple Pay or Google Pay not appearing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you [configured the Payment Request button](https://docs.stripe.com/connectors/adobe-commerce/configuration#express-checkout) and it still doesn’t appear, try the following:\n\n*   Make sure that you enabled Apple Pay and Google Pay in your [payment methods settings](https://dashboard.stripe.com/settings/payment_methods).\n*   For Apple Pay, use Safari on an iPhone running iOS 10 and above.\n*   For Google Pay, use Chrome Desktop or Chrome Mobile with a logged in Google account.\n*   Make sure that you have at least one card in your Wallet.\n    *   In iOS, you can add a card by going to **Settings** > **Wallet** > **Apple Pay**.\n    *   In Chrome, you can add a card by going to **Settings** > **Autofill** > **Payment methods** > **Add new credit card**.\n*   Confirm that your [iOS device supports Apple Pay](https://stripe.com/apple-pay).\n*   Confirm that your [Android device supports Google Pay](https://docs.stripe.com/stripe-js/elements/payment-request-button).\n*   Confirm that your [domain is registered and verified](https://docs.stripe.com/payments/payment-methods/pmd-registration?dashboard-or-api=dashboard#register-your-domain).\n*   If your website domain starts with `www`, make sure the domain is `www.example.com` and not `example.com`.\n*   You must serve your website over HTTPS using a valid [TLS](https://docs.stripe.com/security/guide#tls \"TLS\") 1.2 certificate—check this from your browser or from [SSL Labs](https://www.ssllabs.com/ssltest/).\n*   Make sure that your HTTPS page doesn’t load any images, CSS, or JavaScript insecurely. You can check this by clicking the padlock on your browser URL bar.\n*   Make sure that you enabled the **Wallet** button in the module’s configuration section.\n*   Make sure that you configured a default fallback country (**Stores** > **Configuration** > **General** > **Country Options** > **Default Country**).\n*   Make sure that you’re not using an older Stripe API key. Apple Pay requires a modern API key, which starts with `pk_live_` or `pk_test_`. You can roll your publishable key in the [Developers section](https://dashboard.stripe.com/test/apikeys) of the Dashboard.\n*   If you’re using a OneStepCheckout module, you may additionally need to configure the OSC module to refresh the payment form when guest customers submit their billing address. In most cases, this isn’t necessary.\n\nIf Apple Pay appears at checkout, but it doesn’t appear on the product pages, it may be because of additional reasons:\n\n*   You disabled guest checkouts from the Adobe Commerce admin.\n*   Your website is serving your product pages without a valid TLS 1.2 certificate.\n*   You overwrote the **Add to Cart** button template in your theme. Try adding some text to `app/code/StripeIntegration/Payments/view/frontend/templates/express/product_button.phtml`. If your product pages remain unchanged, customize your theme and integrate the two templates together.\n*   JavaScript errors occur when Stripe.js is initializing. Check your browser console for any JavaScript errors related to Stripe.js.\n\n## Pending order stuck ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen creating an order, the initial status is `Pending Payment`, which indicates that the authorization of the payment by the customer’s bank is still pending. For all redirect-based payment methods, when an authorization occurs, Stripe notifies your website using [webhooks](https://docs.stripe.com/webhooks \"webhook\"). If your orders don’t change from `Pending Payment` to `Processing`, it might indicate that webhooks are missing or incorrect.\n\nGo to your [webhooks settings](https://dashboard.stripe.com/webhooks) to check if a webhook endpoint with your store URL exists. If not, you can try to manually create it by running the following command from your Magento root directory:\n\n`bin/magento stripe:webhooks:configure`\n\nIf the webhook endpoint already exists, check the **Error Rate** to identify the failing webhooks. You can click on the webhook endpoint to see the error messages. To get assistance on webhook issues that aren’t due to incorrect server configuration, contact [Stripe Support](https://support.stripe.com/) and share details about the errors you encounter.\n\nAfter fixing the webhook issue, you need to resend the `charge.succeeded` events that weren’t delivered correctly to your website. The module provides three commands to resend a single event, a range of events, or events within a date range:\n\n`bin/magento stripe:webhooks:process-event [-f|--force] <event_id> bin/magento stripe:webhooks:process-events-range <from_event_id> <to_event_id> bin/magento stripe:webhooks:process-events-date-range <from_date> [<to_date>]`\n\n#### Note\n\nYou can set a full date and time (`2021-12-21 11:22:33+0200`) or use any English textual datetime description (`last Monday`). This function uses your Magento default timezone unless specified otherwise.\n\nSee [strtotime](https://www.php.net/strtotime) for all the supported date formats.\n\nYou can get a list of all failed `charge.succeeded` events in the [Developers section](https://dashboard.stripe.com/events?type=charge.succeeded&delivery_success=false) of your Stripe Dashboard and decide which ones to resend using one of the commands above.\n\n## Error logging and server-side errors (HTTP 500) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAdobe Commerce logs any errors and exceptions it encounters during application runtime in the `var/log` directory. You can find these errors in the following two files:\n\n`var/log/system.log var/log/exception.log`\n\nIf you have SSH access, you can filter the error messages with the following command:\n\n`grep -i Stripe var/log/system.log`\n\nYou can display errors live in the console as they occur (or when you refresh a given page). To monitor errors, run the following command to watch the error log:\n\nIf you don’t have shell access, you can download this file and search for Stripe errors with a text editor.",
  "title": "Troubleshooting for Adobe Commerce | Stripe Documentation",
  "description": "Learn how to troubleshoot the Stripe Connector for Adobe Commerce.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/prestashop/installation",
  "markdown": "# Install the Stripe Connector for PrestaShop\n\n## Learn how to install and update the Stripe Connector for PrestaShop.\n\nUse the Stripe Connector for [PrestaShop](https://www.prestashop.com/en) to integrate [Stripe Elements](https://docs.stripe.com/payments/elements) and accept more than 25 payment methods with a single integration.\n\n## Install the connector![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the PrestaShop dashboard to install the connector.\n\n1.  Under **Modules**, select **Marketplace**.\n    \n2.  On the **Marketplace** tab, search for Stripe and then click **Install** to add the connector.\n    \n\n#### Note\n\nYou can also install the connector manually. [Download the zip file](https://addons.prestashop.com/en/payment-card-wallet/24922-stripe-official-sca-ready.html) and upload the module in the PrestaShop dashboard under **Module Manager**.\n\n## Update the connector ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the PrestaShop dashboard to update the connector when a new version is available. Under **Modules**, select **Module Manager**. On the **Modules** tab, for the Stripe connector, click **Upgrade** and then **Upgrade anyway**. When the update completes, a notification displays in the dashboard.",
  "title": "Install the Stripe Connector for PrestaShop | Stripe Documentation",
  "description": "Learn how to install and update the Stripe Connector for PrestaShop.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/adobe-commerce/subscriptions",
  "markdown": "# Enable subscriptions for Adobe Commerce products\n\n## Configure the Stripe Connector for Adobe Commerce to enable subscriptions for any Adobe Commerce product.\n\nYou can turn any [virtual](https://experienceleague.adobe.com/docs/commerce-admin/catalog/products/types/product-create-virtual.html?lang=en) or [simple](https://experienceleague.adobe.com/docs/commerce-admin/catalog/products/types/product-create-simple.html?lang=en) Adobe Commerce product into a subscription product from its configuration page in your admin panel. When a customer buys a subscription product, the module registers a recurring payment against that order using [Stripe Billing](https://stripe.com/billing). Stripe manages this subscription, attempting payment collection on a recurring basis based on the subscription settings in Adobe Commerce. Stripe can also notify the customer if the payment fails and ask them to update their billing details. You can control this in your [Subscriptions and emails settings](https://dashboard.stripe.com/settings/billing/automatic).\n\nOn payment success, your website receives a [webhook](https://docs.stripe.com/connectors/adobe-commerce/configuration#webhooks) notification from Stripe. The module automatically creates a new order in your Adobe Commerce admin panel for each renewal. These recurring orders don’t include the initial subscription fees, and the module recalculates the shipping and tax amounts for each individual recurring subscription product.\n\n## How to enable and configure subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can enable [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") for any Adobe Commerce product from the product configuration page. When creating or editing a product, scroll down until you see the **Stripe Subscriptions** section:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/configure-subscriptions.b12826232ddbe6ab5ac8e6419f8252ee.png)\n\nConfiguration options for subscriptions\n\nHere, you have the following options:\n\n*   **Subscription Enabled:** Turn this on to convert this product into a subscription and automatically create a subscription plan when customers check out with this product. You don’t need to create a subscription plan in your Stripe account. A subscription plan is automatically created for this product when your customers check out.\n*   **Frequency:** Select **Days**, **Weeks**, **Months**, or **Years**. The customer sees whatever you select here for the frequency. If you prefer to display **30 Days** instead of **1 Month**, set this to **Days** instead. If you select **Days**, the subscription cycle in your Stripe account reflects this.\n*   **Repeat Every:** Set the length of the billing cycle based on the specified frequency. For example, a value of 30 here with frequency of **Days** bills every 30 days.\n*   **Trial Days:** Enter the number of days before the first charge for the subscription (that is, the number of free days).\n*   **Initial Fee:** Enter an amount to charge in addition to the subscription price.\n*   **Start on specific date:** Enable to expose custom start date specification options. When customers purchase the subscription, it begins on the specified date instead of starting immediately.\n*   **Pick start date:** Specify the start date for the subscription. The format is a specific date, but the start date forwards to the next applicable billing cycle after the start date has passed. For example, if the start date is `01/01/2024`, a monthly subscription always starts on the 1st of the month, while a 6-month subscription always starts on either January 1st or July 1st.\n*   **First payment:** Specify how to collect the first payment when you enable a start date:\n    *   Collect it on the specified start date.\n    *   Collect the first payment when the order is placed, and all subsequent payments on the specified start date. This option is useful for physical product subscriptions that ship the first product immediately when ordered, with subsequent shipments conforming to the start date of the billing cycle.\n*   **Prorate first payment:** Setting an immediate first payment exposes this field. Enable this setting to account for the number of days from the date of the order placement to the subscription start date so the first payment reflects the shortened cycle before the full subscription begins.\n*   **Customers can change subscription:** Enable to allow customers to edit their subscription from the customer account section. They can change the quantity, customizable options, configurable options or bundle options of each order item. These are additional edit options to the shipping address, shipping method or payment method, which customers can always change at any time.\n*   **Prorate upgrades:** Enable to apply a fee to account for any price difference when a customer upgrades their subscription between billing cycles. Disable to defer the new subscription price until the next billing cycle.\n*   **Prorate downgrades:** Enable to credit the customer’s account balance when they downgrade their subscription mid-cycle and apply the credit to future subscription payments. Disable to apply the lower price to the next billing cycle.\n\n## Configurable subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use Magento [configurable products](https://experienceleague.adobe.com/docs/commerce-admin/catalog/products/types/product-create-configurable.html?lang=en) to offer multiple options to your customers for a single product. Customers can choose their preferred option using either a drop-down, a visual swatch, or a text swatch. Each option can be a simple or virtual product and that product can itself be a subscription.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/subscription-configurable.bc087bed26a306087b175e3681d2d1f0.png)\n\nConfigurable subscription\n\n1.  Go to **Stores** > **Attributes** > **Product**.\n    \n2.  Create an [attribute](https://experienceleague.adobe.com/docs/commerce-admin/catalog/products/types/product-create-configurable.html?lang=en#step-1%3A-choose-the-attributes) and choose your preferred input type and labels.\n    \n3.  Make sure to set the attribute to be on the **Global** scope.\n    \n4.  Go to **Stores** > **Attributes** > **Attribute Set** and add the attribute to an attribute set.\n    \n5.  Add the attribute set to your single products.\n    \n6.  You can now create a configurable product using the single products updated above.\n    \n\n## Bundled subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAdobe Commerce allows you to [bundle products](https://experienceleague.adobe.com/docs/commerce-admin/catalog/products/types/product-create-bundle.html?lang=en) when you want to sell multiple products together. This prevents customers from removing an individual product from the cart before checkout.\n\nWhen a bundle product includes at least one subscription, Stripe treats the price of the entire bundle as the subscription price. For recurring payments, Stripe collects both the amount of the entire bundle item and the individual subscription item of the bundle.\n\nAfter payment collection, Adobe Commerce automatically creates a recurring order that includes the entire bundle item (the subscription items and regular items from the original order). Inventory is then processed for the subscription and the other products in the bundle. This contrasts with carts that include subscriptions and regular products separately. In that case, recurring orders only include the subscription product.\n\nIf you want to combine a subscription product with a regular product and only bill the subscription product in the next cycle, you can use [grouped products](https://experienceleague.adobe.com/docs/commerce-admin/catalog/products/types/product-create-grouped.html?lang=en). Alternatively, you can configure an initial fee for the subscription when there’s no inventory to process.\n\n## Switch subscription plans![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCustomers can change the following from their account:\n\n*   Configurable, bundled, simple, and virtual subscriptions\n*   Customizable or configurable options\n*   Quantities\n*   Bundle options\n*   Shipping address or method\n*   Payment method\n\nCustomers can also switch between two or more plans as long as they belong to the same [configurable product](#configurable-subscriptions).\n\n1.  The customer logs into their account and goes to **My subscriptions**.\n    \n2.  They select the subscription they want to change and click **Change subscription**.\n    \n3.  The customer is redirected to the subscription product page, where they can change their plan, quantities, or other product options.\n    \n4.  When they click **Update cart**, they’re automatically redirected to the checkout page, where they can review the old and new subscription prices.\n    \n5.  The customer clicks **Update subscription**, which immediately updates the subscription price or plan. The customer is then redirected to **My subscriptions** in their account.\n    \n\n![](https://b.stripecdn.com/docs-statics-srv/assets/subscription-customer-update.3aac87ba9a5df4ecdad3277ccede9988.png)\n\nConfigurable subscription\n\nYou can enable or disable subscription changes for each subscription product separately or you can use the global setting under **Stores** > **Configuration** > **Sales** > **Payment Methods** > **Stripe** > **Subscriptions**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/subscription-enable-update-stripe-billing.b63b6a19302660c1daeaac8367977287.png)\n\nConfigurable subscription\n\n## Prorations for virtual subscriptions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe module supports [prorations](https://docs.stripe.com/billing/subscriptions/prorations) for virtual subscriptions. You can enable prorations for upgrades or downgrades separately.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/subscription-proration.5a1c316d68a7e111e2bd938e96b1daae.png)\n\nConfigurable subscription\n\nThe module compares what both the current and new plan cost for a 30-day period to determine whether or not it’s an upgrade or downgrade. If the cost of the new plan is lower, we consider it a downgrade. If the price remains the same or if it’s higher, we consider it an upgrade.\n\n*   For downgrades, we create a refund that we record as a credit memo on the original order.\n*   For upgrades that require an extra payment, we immediately create a new order with the prorated amount for the remainder of the billing period.\n*   For upgrades with the same cost, there’s no payment or refund and we add a comment to the original order to indicate that the customer changed their subscription.\n\nIn all three cases, the module creates the renewal order with the new plan at the next billing cycle.\n\n## Changing customer subscriptions in bulk from the command line ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can increase or reduce the subscription price for a specific product, or change the shipping cost, product name, or tax rates of an order. To do so, you must migrate existing subscriptions from an old plan to a new one using a CLI command within the Stripe module.\n\n`php bin/magento stripe:subscriptions:migrate-subscription-price <original_product_id> <new_product_id> [<starting_order_id> [<ending_order_id>]]`\n\nThis creates a new order for `new_product_id` as if the customer placed the order during checkout. The billing and shipping details are the same as the initial order, and it uses the same payment method for the subscription.\n\nThe module recalculates the order totals based on the new tax rules, shipping method, price changes, and so on. If the original order had any discounts, they also apply to the new order. The total doesn’t include any of the initial fees.\n\nSuccessfully placing the order cancels the original order, including the `original_product_id`. The module adds a comment to the original order mentioning the migration to a new order, and the cancellation of the associated subscription in Stripe. The customer also receives a new order email that tells them their subscription billing details have changed. They can review the new totals in the same email.\n\nIf the module can’t place the order for any reason, the built-in rollback system cancels the new order creation and leaves the original order intact.\n\nYou can use the `original_product_id` as the `new_product_id`, which means that the module only recalculates the order totals. It’s possible to migrate from simple subscription products (physical products with a single [SKU](https://docs.stripe.com/api/skus \"SKU\")) to virtual subscription products, but not the other way around. This limitation is because physical products require a shipping address but virtual products don’t.\n\nThe order ID parameters are optional. If they’re not specified, the script processes all orders in your website from all store views and all Stripe modes. If you have multiple Stripe accounts configured, the script migrates subscriptions from all Stripe accounts.\n\n## Migrate Stripe Subscriptions from another platform to Adobe Commerce![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo migrate subscriptions from another platform, you need to perform the following tasks:\n\n1.  Create a mapping between your Adobe Commerce customer IDs and the Stripe customer IDs in the “stripe\\_customers” database table of Adobe Commerce. You can do this with the following SQL statement in your database:\n    \n    `INSERT INTO stripe_customers(customer_id, stripe_id, customer_email) VALUES ('2', 'cus_xxxxxxxxxx', 'janedoe@example.com');`\n    \n2.  Create and configure all subscription products for old orders from the **Subscriptions by Stripe** tab under each product’s configuration page:\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/subscription-fields.bd3c35b64f2140b5a1e81a1ea87fffcd.png)\n    \n    Subscription configuration form\n    \n3.  Migrate the orders from your old platform to Adobe Commerce. If you plan on creating them manually from the Adobe Commerce admin area, you can use the **Check / Money Order** payment method so it doesn’t collect a live payment. After you finish the order migration, you can replace this payment method with Stripe using the following SQL command:\n    \n    `UPDATE sales_order_payment SET method='stripe_payments' WHERE method='checkmo';`\n    \n4.  After creating the orders and products successfully in Adobe Commerce, update the existing Subscriptions in your Stripe account to set the following metadata:\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/subscription-metadata.9626076f0ef6b57017a28ca259569d0e.png)\n    \n    Subscription metadata list\n    \n    #### Note\n    \n5.  Test the creation of recurring orders based on subscription renewals:\n    \n\n*   Check that you have at least one configured [webhook](https://docs.stripe.com/webhooks \"webhook\") in your Stripe Dashboard under **Developers** > **Webhooks**.\n*   From your **Stripe Events** section, locate an event that you want to test. The event type must be `invoice.payment_succeeded` and the Invoice must belong to a Subscription.\n*   From your Magento root directory, trigger the event with the following command: `bin/magento stripe:webhooks:process-event <event_id>`.\n*   Make sure there were no errors in the console and that the module created a recurring subscription order in Adobe Commerce.",
  "title": "Enable subscriptions for Adobe Commerce products | Stripe Documentation",
  "description": "Configure the Stripe Connector for Adobe Commerce to enable subscriptions for any Adobe Commerce product.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/sap-digital-payments/installation",
  "markdown": "# Stripe adapter for SAP Digital Payments Add-on\n\n## Learn how to install SAP Digital Payments Add-on (DPA).\n\n## Installation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFollow these steps to install the SAP DPA:\n\n1.  Install and configure the SAP DPA (directly from SAP).\n2.  [Onboard the DPA tenant](https://us-prod-dpa-doc.sap.stripeconnectors.com/docs/StripeSAPDPAAdapterUserGuide.pdf) on the Stripe Connector.",
  "title": "Stripe adapter for SAP Digital Payments Add-on | Stripe Documentation",
  "description": "Learn how to install SAP Digital Payments Add-on (DPA).",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/prestashop/configuration",
  "markdown": "# Configure the Stripe Connector for PrestaShop\n\n## Learn how to configure the Stripe Connector for PrestaShop.\n\nTo use Stripe with [PrestaShop](https://www.prestashop.com/en), you must [install](https://docs.stripe.com/connectors/prestashop/installation) and then configure the Stripe connector.\n\n## Configure the connector ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the PrestaShop dashboard to configure the connector.\n\n1.  Under **Modules**, select **Module Manager**.\n    \n2.  On the **Modules** tab, for the **Stripe payment module**, click **Configure**.\n    \n3.  Configure the Stripe Connector for PrestaShop:\n    \n    *   [Connect to Stripe to accept payments](https://docs.stripe.com/connectors/prestashop/configuration#connect-stripe)\n    *   [Choose your payment form](https://docs.stripe.com/connectors/prestashop/configuration#payment-form)\n    *   [Customize the payment form](https://docs.stripe.com/connectors/prestashop/configuration#customize-payment-form)\n    *   [Collect your customer’s postal code](https://docs.stripe.com/connectors/prestashop/configuration#postal-code)\n    *   [Choose how to capture funds](https://docs.stripe.com/connectors/prestashop/configuration#capture-funds)\n\n## Install the Stripe PrestaShop Commerce app![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse Stripe Apps to bolster security and simplify the use of distinct restricted keys for each integration with your Stripe account. The process of installing the Stripe App and acquiring the newly generated secret and publishable [keys](https://docs.stripe.com/keys) is essential for your integration with the PrestaShop Commerce connector. This approach eliminates the need to manually create your own restricted key or use a secret key. To integrate the PrestaShop Commerce app and reinforce your account’s security infrastructure:\n\n1.  Navigate to the [Stripe App Marketplace](https://marketplace.stripe.com/), then click [Install the PrestaShop Commerce app](https://marketplace.stripe.com/apps/install/link/com.stripe.PrestaShop.commerce).\n2.  Select the Stripe account where you want to install the app.\n3.  Review and approve the app permissions, install the app in test mode or live mode, then click **Install**.\n4.  After you install the app, store the keys in a safe place where you won’t lose them. To help yourself remember where you stored it, you can [leave a note on the key in the Dashboard](https://docs.stripe.com/keys#reveal-an-api-secret-key-live-mode).\n5.  Use the newly generated publishable key and secret key to finish the Connector configuration.\n6.  To manage the app or generate new security keys after installation, navigate to the application settings page in [test mode](https://dashboard.stripe.com/test/settings/apps/com.stripe.PrestaShop.commerce) or [live mode](https://dashboard.stripe.com/settings/apps/com.stripe.PrestaShop.commerce).\n\n## Connect to Stripe to accept payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConnect PrestaShop to your Stripe account to start accepting payments.\n\n1.  On the **Stripe Configure** page, click **Connect with Stripe**.\n2.  Navigate to the **Stripe Configure** page in the PrestaShop Dashboard, then paste the key from the Stripe PrestaShop app into the appropriate field.\n\n## Choose your payment form ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConfigure the payment form that displays to your customers during checkout. Under **Payment form settings**, you can choose from the following:\n\n*   **Integrated payment form**–The [Payment Element](https://docs.stripe.com/payments/payment-element) is an embeddable UI component that lets you accept 25+ payment methods with a single integration.\n\n![Integrated payment form with Payment Element](https://b.stripecdn.com/docs-statics-srv/assets/connector_payment_form_element.92e9bda6d112030dee8cd68a9af2a9eb.png)\n\n*   **Redirect to Stripe**–[Stripe Checkout](https://docs.stripe.com/payments/checkout) lets you redirect your customers to a Stripe-hosted, customizable checkout page to finalize payment.\n\n![Stripe-hosted checkout page](https://b.stripecdn.com/docs-statics-srv/assets/connector_payment_form_checkout.d40ed334159b3a72be24b0f86bbbb376.png)\n\n## Customize the payment form ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  Click the **Integrated payment form** radio button to expose the customization options.\n2.  Choose a [layout](https://docs.stripe.com/payments/payment-element#layout) for the **Integrated payment form**:\n    *   **Accordion with radio buttons**\n    *   **Accordion without radio buttons**\n    *   **Tabs**\n3.  Choose where to position the payment form:\n    *   **On top of the Shopware payment methods**\n    *   **At the bottom of the Shopware payment methods**\n    *   **With the Shopware payment methods**\n4.  Choose a prebuilt theme that most closely resembles your website:\n    *   **Stripe**\n    *   **Flat**\n    *   **Night**\n    *   **None**\n\nYou can also [customize the look and feel of Checkout](https://docs.stripe.com/payments/checkout/customization) (**Redirect to Stripe**).\n\n## Express Checkout Element![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nExpress Checkout Element allows you to display one-click payment buttons with Link, Apple Pay, Google Pay, PayPal, and Amazon Pay.\n\nStripe sorts the payment buttons dynamically based on customer location, detected environment, and other optimized conversion factors.\n\nOn the backoffice, you can customize Express Checkout Element after you check **Enable Express Checkout**.\n\n1.  Specify where to display the one-click payment buttons:\n    \n    *   On the **Product Page**\n    *   On the **Shopping Chart Page**\n    \n    ![Express checkout at product level](https://b.stripecdn.com/docs-statics-srv/assets/express-checkout-product.2e598dada8a10ad85b1478d6327e3c96.png)\n    \n    ![Express checkout at cart level](https://b.stripecdn.com/docs-statics-srv/assets/express-checkout-cart.5b7dbd005bbdd03688f74b9e63f0fd48.png)\n    \n2.  Choose different button themes and button types for Apple Pay, Google Pay and PayPal.\n\nBoth logged in and guest users can purchase through the Express Checkout buttons. Guest users will be able to enter their address through the payment interface.\n\n## Collect your customer’s postal code ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can specify whether or not to collect your customer’s postal code at checkout using the **Never collect the postal code** field. Stripe recommends collecting and verifying postal code information, which can help decrease the card decline rate.\n\n*   (Recommended) **Unselect** this field if you want to require a postal code at checkout. This applies to cards issued in Canada, the United Kingdom, or the United States.\n    \n*   **Select** this field if you don’t want to collect a postal code at checkout.\n    \n\n## Choose how to capture funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can specify how you want to authorize and capture funds using the **Enable separate authorization and capture** field.\n\n*   **Unselect** this field to use simultaneous authorization and capture. The issuing bank confirms that the cardholder can pay, and then transfers the funds automatically after confirmation.\n    \n*   **Select** this field to use separate authorization and capture. The authorization occurs first, and the capture occurs later.\n    \n\nYou can usually authorize a charge within a 7-day window.\n\nTo capture funds, do either of the following:\n\n*   In the PrestaShop dashboard, change the order’s payment status from `Authorized` to the status you specify in the **Catch status** field. For example, you can use `Shipped` as the catch status. The capture occurs automatically when the status changes.\n    \n    If the capture is unsuccessful, the status changes to the specified value in the **Transition to the following order status if the authorization expires before being captured** field.\n    \n*   In the Stripe Dashboard, under **Payments**, select **All payments**. On the **Uncaptured** tab, select the order and then click **Capture**.\n    \n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo refund a payment, you need the Stripe Payment ID for the order.\n\n1.  In the PrestaShop dashboard, under **Orders**, select **Orders**.\n    \n2.  Find the order you want to refund and copy the **Payment ID** under **Stripe**.\n    \n3.  To initiate a full or partial refund, do the following:\n    \n    1.  Go to the **Refund** tab on the **Stripe payment module**.\n        \n    2.  In the **Stripe Payment ID** field, paste the payment ID.\n        \n    3.  Select **Full refund** or **Partial refund**. If you want to initiate a partial refund, you must provide the amount to refund.\n        \n    4.  Click **Request Refund**.",
  "title": "Configure the Stripe Connector for PrestaShop | Stripe Documentation",
  "description": "Learn how to configure the Stripe Connector for PrestaShop.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/adobe-commerce/custom-storefront",
  "markdown": "# Build a custom storefront | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to build a custom storefront that supports Stripe payment features.\n\nAdobe Commerce can operate as a headless commerce platform that’s decoupled from its storefront. You can use the REST API or GraphQL API to build custom storefronts, such as progressive web apps (PWA), mobile apps, or frontends based on React, Vue, or other frameworks.\n\nThe Stripe module extends the REST API and GraphQL API by:\n\n*   Setting payment method tokens during order placement\n*   Performing 3D Secure customer authentication\n*   Managing customers’ saved payment methods\n\nThe Stripe module uses the REST API on the checkout page. You can find examples of how to use the API in the Stripe module directory under the `examples/` subdirectory. This guide uses the GraphQL API to build a custom storefront.\n\n[](#retrieve-initialization-parameters)\n\nTo initialize Stripe.js and the payment form on the front end, you need the Stripe [publishable API key](https://docs.stripe.com/keys#obtain-api-keys) that you configured in the admin area. You can retrieve the key and other initialization parameters using the following GraphQL mutation:\n\n`query { getStripeConfiguration { \tapiKey \t\tlocale \t\tappInfo \t\toptions { \t\t\tbetas \t\t\tapiVersion \t\t} \telementsOptions \t} }`\n\n[](#tokenize-payment-method)\n\nYou can use the [PaymentElement](https://docs.stripe.com/payments/payment-element) to collect a payment method from the customer during checkout. After the customer provides their payment method details and clicks **Place Order**, you can tokenize the payment method and use it to place the order. Calling `createPaymentMethod` [generates a payment method token](https://docs.stripe.com/payments/finalize-payments-on-the-server-legacy?type=payment#create-pm) from the details provided in the `PaymentElement`.\n\n`var stripe = Stripe(API_PUBLISHABLE_KEY);  var options = {   mode: 'payment',   amount: 1099,   currency: 'eur' };  var elements = stripe.elements(options); var paymentElement = elements.create('payment'); paymentElement.mount('#payment-element');  var placeOrder = function() {     elements.submit().then(function()     {         stripe.createPaymentMethod({             elements: elements,             params: {                 billing_details: {                     name: 'Jenny Rosen'                 }             }         }).then(function(result)         {             if (result && result.paymentMethod)             {                 // Success             }         });     }); }`\n\n[](#pass-tokenized-payment-method)\n\nAfter you obtain a payment method token, you must call `setPaymentMethodOnCart` to [set the payment method](https://developer.adobe.com/commerce/webapi/graphql/tutorials/checkout/set-payment-method/#set-payment-method-on-cart) on the order.\n\n`mutation {   setPaymentMethodOnCart(input: {       cart_id: \"CART_ID\"       payment_method: {         code: \"stripe_payments\"         stripe_payments: {           payment_method: \"PAYMENT_METHOD_ID\"           save_payment_method: true         }       }   }) {     cart {       selected_payment_method {         code       }     }   } }`\n\nUse the following parameters for `setPaymentMethodOnCart`:\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| `payment_method` | String | Use this parameter to pass the tokenized payment method ID. You can also pass saved payment method tokens when a customer chooses a saved payment method during checkout. |\n| `save_payment_method` | Boolean | Specify whether or not to save the payment method. |\n| `cvc_token` | String | If CVC is enabled for saved cards, use this parameter to pass the CVC token and perform verification. |\n\n[](#place-order)\n\nAfter you set the payment method token, you can use the Adobe Commerce `placeOrder` mutation to place an order:\n\n`mutation {   placeOrder(input: {cart_id: \"CART_ID\"}) {     order {       order_number       client_secret     }   } }`\n\nThe example above requests a `client_secret`, which isn’t a default `placeOrder` mutation parameter. The Stripe module adds this parameter for you to use after the order is placed to finalize details specific to the selected payment method. You can finalize payment with the `stripe.handleNextAction(client_secret)` method. Options include performing an inline 3D Secure authentication for cards, displaying a printable voucher for certain payment methods, or redirecting the customer externally for authentication.\n\n[](#order-placement-flow)\n\nPayment methods of type `card` or `link` that require 3D Secure (3DS) customer authentication go through the following process:\n\n1.  The order is placed in `Pending Payment` status.\n2.  The client secret is passed to the front end to perform the authentication.\n3.  After successful authentication, payment is collected client-side, and the customer is redirected to the order success page.\n4.  A `charge.succeeded` webhook event arrives at your website on the server side.\n5.  The module handles the event and changes the order status from `Payment Pending` to `processing`.\n\nThat procedure is the default for GraphQL, but not for the REST API. With the REST API, if customer authentication is required, the order placement fails with an `Authentication Required: client_secret` error. You must authenticate the payment using the `client_secret`, and the order placement must be attempted again following successful authentication. This approach’s advantage is that inventory isn’t held until the payment is successful. To employ this procedure with GraphQL, edit the module’s `etc/config.xml` file by adding `card` and `link` under the `<graphql_api>` node:\n\n`<manual_authentication>      <rest_api>card,link</rest_api>      <graphql_api>card,link</graphql_api> </manual_authentication>`\n\n[](#retrieve-payment-methods)\n\nYou can use `listStripePaymentMethods` to retrieve a list of saved payment methods for a customer in an active checkout session.\n\n`mutation {   listStripePaymentMethods {     id     created     type     fingerprint     label     icon     cvc     brand     exp_month     exp_year   } }`\n\n[](#save-payment-method)\n\nYou can use `addStripePaymentMethod` to save payment methods to a customer’s account. The `payment_method` parameter is the tokenized payment method ID. The tokenization process is similar to the tokenization process during the checkout flow.\n\n`mutation {   addStripePaymentMethod(     input: {       payment_method: \"PAYMENT_METHOD_ID\"     }   ) {     id     created     type     fingerprint     label     icon     cvc     brand     exp_month     exp_year   } }`\n\n[](#delete-payment-method)\n\nYou can use `deleteStripePaymentMethod` to allow customers to delete saved payment methods from their account.\n\nFor most use cases, we recommend passing a payment method fingerprint, which deletes all payment methods that match the fingerprint. The `listStripePaymentMethods` mutation automatically removes duplicates before returning recently added payment methods that match a specific fingerprint. But if you only delete a payment method by ID, the results of `listStripePaymentMethods` might include an older saved payment method with the same fingerprint.\n\n`mutation {   deleteStripePaymentMethod(     input: {       payment_method: \"paste a payment method ID here\"       fingerprint: null     }   ) }`",
  "title": "Build a custom storefront | Stripe Documentation",
  "description": "Learn how to build a custom storefront that supports Stripe payment features.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/mirakl/install",
  "markdown": "# Mirakl Connector installation | Stripe DocumentationThe Stripe Docs logo\n\n## Requirements![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInstalling and running the application requires the following:\n\n*   PHP 7.3+\n*   PostgreSQL\n*   A web server, Nginx recommended\n*   A valid SSL/[TLS](https://docs.stripe.com/security/guide#tls \"TLS\") certificate\n*   Supervisord or equivalent\n*   Crontab or equivalent\n\n## Install using Docker ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can build and start the application by embedding it in a container. See our [Docker sample](https://github.com/stripe/stripe-mirakl-connector/tree/master/examples/docker) for more information.\n\n## Install manually ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n1.  Install [Composer](https://getcomposer.org/download/).\n2.  Clone or download the [Mirakl Connector](https://github.com/stripe/stripe-mirakl-connector.git) from GitHub.\n3.  Move the content to your web server directory, for example, `/var/www`.\n4.  Download dependencies:\n\n`composer install --prefer-dist --no-dev`\n\n1.  Make sure you properly configured the [.env file](https://docs.stripe.com/connectors/mirakl/configuration).\n2.  Run the migrations to set up the database:\n\n`bin/console doctrine:migration:migrate --no-interaction`\n\nIf you encounter any errors at this stage, check the `DATABASE_URL` variable in your .env file.\n\n1.  Update your supervisor to automatically start and restart the workers.\n\nA [configuration example](https://github.com/stripe/stripe-mirakl-connector/blob/master/examples/docker/app/config/supervisord.conf) is available in our Docker sample. You can skip this step in a development environment and start the workers manually when needed, for example:\n\n`php bin/console messenger:consume process_transfers --time-limit=3600 --env=prod`\n\n1.  Update your job scheduler to run the commands periodically.\n\nA [configuration example](https://github.com/stripe/stripe-mirakl-connector/blob/master/examples/docker/app/config/crontab) is available in our Docker sample. You can skip this step in a development environment and start the jobs manually when needed, for example:\n\n`php bin/console connector:dispatch:process-transfer -q 2>&1`\n\n1.  Make sure that your web server is configured to use the `public` directory as document root.\n\n## Check your installation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOpen your terminal and run the following command to confirm that your application is up and running correctly:\n\n`curl -X GET \"https://connector-url/api/mappings\" \\   -H \"accept: application/json\" \\   -H \"X-AUTH-TOKEN:` \n\n`$OPERATOR_PASSWORD`\n\n`\"`\n\nYou should get a `200` response code along with an empty payload.\n\n## Security ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nOn your server, _restrict all inbound traffic_ to the connector except for the following endpoints:\n\n*   **/api/public/onboarding/refresh**\n    \n    Stripe redirects the seller to this URL to get a new onboarding link if it expires.\n    \n*   **/api/public/webhook/operator**\n    \n    Stripe notifies this endpoint when a payment is updated to map it with a Mirakl order within the connector.\n    \n*   **/api/public/webhook/sellers**\n    \n    Stripe notifies this endpoint when a Stripe account is updated to synchronize the seller’s status within the connector.\n    \n\nThese endpoints are safe to expose, they each have an internal protection mechanism. Other endpoints are not safe to expose unless protected by a strong `OPERATOR_PASSWORD`.",
  "title": "Mirakl Connector installation | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/mirakl/payments",
  "markdown": "# Payments using the Mirakl connector\n\nWe categorize [payment methods](https://docs.stripe.com/payments/payment-methods/overview) into seven families. Each family has similar features, a single integration, and common checkout experiences.\n\nYou can use one of our [existing connectors](https://docs.stripe.com/connectors) or [build your own integration](https://docs.stripe.com/payments) to accept payments.\n\n#### Note\n\nWhen implementing payments, don’t use any of the [Connect](https://docs.stripe.com/connect \"Connect\") charge types. The connector takes care of [splitting the funds](#payment-split) based on your Mirakl orders.\n\n## Payment creation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nChoose the payment method families according to the order workflow most adapted to your use case.\n\nBelow are some additional guidelines for adapting your payment integration to your workflows.\n\n### Pay on acceptance![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor cards, set the value of [capture\\_method](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-capture_method) option to `manual` when completing the PaymentIntent to authorize only. The connector [captures the funds automatically](#payment-validation) as soon as all sellers have accepted or refused their respective orders. The orders must be accepted or refused within 7 days, the validity period of an authorization.\n\nBecause the payment confirmation is immediate for bank redirects, wallets and buy now, pay later, we recommend setting up your orders to be accepted automatically and using refunds when sellers can’t fulfill their order.\n\n### Pay on delivery![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFor cards, you can authorize only during checkout if you have business rules in place to capture the payment within 7 days. Otherwise, [save the card](https://docs.stripe.com/payments/save-and-reuse) at checkout and authorize later.\n\nFor bank debits, you can save the bank account at checkout and initiate the payment after the seller accepts their order.\n\n### Pay on due date![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can use Stripe Billing to [send an invoice](https://docs.stripe.com/invoicing/dashboard) to your customers who can then pay using our [hosted invoice page](https://docs.stripe.com/invoicing/hosted-invoice-page).\n\n## Payment validation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo handle the payment validation of your Mirakl orders, you can rely on the built-in job or call the [PA01](https://help.mirakl.net/help/api-doc/operator/mmp.html#PA01) API yourself if you have specific needs such as offering coupons.\n\nTo enable the built-in job, you have to first map the Mirakl order with the successful Charge by updating the metadata:\n\n`curl https://api.stripe.com/v1/charges/ch_1Hmloy2eZvKYlo2C2Tx3W00V \\   -u` \n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`: \\   -d \"metadata[mirakl_commercial_order_id]\"=123`\n\nThe workflow starts when a seller accepts their logistic order.\n\n1.  The [payment validation job](https://docs.stripe.com/connectors/mirakl/reference#payment-validation) fetches newly accepted Mirakl orders.\n2.  The connector validates the payment in Mirakl.\n3.  For cards, the payment is captured when all the logistic orders are accepted or refused.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/payment-validation.b4e38338cc8ca2b4b9a6b54381e11fb8.svg)\n\n## Payment split![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe workflow starts when the payment is validated on Mirakl and captured on Stripe.\n\n1.  The [payment split job](https://docs.stripe.com/connectors/mirakl/reference#payment-split) fetches newly validated Mirakl orders.\n2.  The connector transfers the order amount to the seller after deducting your commission.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/payment-split.854d23364864078f73b0f85509048073.svg)\n\n## Payment refund![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe workflow starts when you request a refund on a Mirakl order.\n\n1.  The [payment refund job](https://docs.stripe.com/connectors/mirakl/reference#payment-refund) fetches newly refunded Mirakl orders.\n2.  The connector creates a refund on Stripe, validates the refund on Mirakl, and then reverses the transfer used to split the payment.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/payment-refund.542699f87703a1899287530589e40614.svg)",
  "title": "Payments using the Mirakl connector | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/mirakl/onboarding-sellers",
  "markdown": "# Onboarding sellers | Stripe DocumentationThe Stripe Docs logo\n\nYou can use [Express](https://docs.stripe.com/connect/express-accounts) or [Custom](https://docs.stripe.com/connect/custom-accounts) accounts with the [transfers](https://docs.stripe.com/connect/account-capabilities#transfers) capability to onboard your sellers.\n\n[Standard accounts](https://docs.stripe.com/connect/standard-accounts) aren’t supported.\n\n## Seller account initiation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe workflow starts when you create a new shop. If you invite the seller via email, the workflow starts when they submit the initial Mirakl form.\n\n1.  The [onboarding job](https://docs.stripe.com/connectors/mirakl/reference#onboarding) fetches newly created Mirakl shops.\n2.  The connector adds an onboarding link to each shop.\n3.  The seller finds the link in their Mirakl back office under **My Account**.\n4.  They complete their KYC/KYB on Stripe.\n5.  The seller is redirected to the `REDIRECT_ONBOARDING` URL.\n\nStripe then performs verification, asking for more information when needed. To handle this, see the [communication](#communication) guidelines.\n\n### Initiate the onboarding outside of Mirakl![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can build your own onboarding flow and then use the following API request to map the Stripe account with the Mirakl shop:\n\n`curl \\ \t-X POST \"https://connector-url/api/mappings\" \\ \t-H \"accept: application/json\" \\ \t-H \"X-AUTH-TOKEN:` \n\n`$OPERATOR_PASSWORD`\n\n`\" \\ \t-H \"Content-Type: application/json\" \\ \t-d \"{ \\\"miraklShopId\\\": 123, \\\"stripeUserId\\\": \\\"acct_1032D82eZvKYlo2C\\\"}\"`\n\n## Seller account update![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe workflow starts with the seller intending to update their information on Stripe.\n\n1.  The seller finds the link in their Mirakl back office under **My Account**.\n2.  They update their information on Stripe.\n3.  The shop custom field is updated with a fresh login link to their [Express dashboard](https://docs.stripe.com/connect/express-dashboard).\n4.  The KYC status is updated on Mirakl.\n\nThe last two steps are also performed when accounts are updated by the connector during the [account initiation workflow](#account-initiation-workflow) or when accounts are updated by Stripe, for example, a new document needs to be provided. You can receive a notification when that happens, see the [Account updated](https://docs.stripe.com/connectors/mirakl/reference#account-updated) notification.\n\nStripe then performs verification, asking for more information when needed. To handle this, see the [communication](#communication) guidelines.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/seller-account-update.952e89cdf275dc5c34146b87cd06b603.svg)\n\n## Communication![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can customize the visual appearance of the Stripe form with your brand’s name, color, and icon in your [Connect settings page](https://dashboard.stripe.com/account/applications/settings).\n\nBe sure to tell your sellers about the link available in their Mirakl account settings and the need to complete the onboarding on Stripe to receive their payouts. For example, you could customize some of the email templates sent to your sellers by Mirakl under **Settings** > **Notifications**.\n\nIf we require more information from your sellers, we’ll email them directly for Express accounts. You must inform the sellers yourself if you decided to use Custom accounts.\n\n#### Note\n\nIn test mode, no emails are sent.",
  "title": "Onboarding sellers | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/mirakl/payouts",
  "markdown": "# Stripe DocumentationThe Stripe Docs logo\n\n## Payouts\n\nThe amount and frequency of each [payout](https://docs.stripe.com/payouts \"payout\") to your sellers is controlled by Mirakl based on your settings.\n\nYou can customize your billing cycles under **Settings** > **Shops** > **Billing Cycles**. By default, your sellers receive their payouts on the 1st, 11th, and 21st of each month.\n\n## Seller settlement![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe workflow starts when Mirakl generates a new [invoice](https://docs.stripe.com/api/invoices \"invoices\").\n\n1.  The [payout job](https://docs.stripe.com/connectors/mirakl/reference#payout) fetches newly created Mirakl invoices.\n2.  The connector performs the following actions based on the invoice attributes:\n\n| Invoice attribute | Action taken |\n| --- | --- |\n| total\\_other\\_credits\\_incl\\_tax | Transfer from the operator to the seller. |\n| total\\_other\\_invoices\\_incl\\_tax | Transfer from the seller to the operator. |\n| total\\_subscription\\_incl\\_tax | Transfer from the seller to the operator. |\n| amount\\_transferred | Payout to the Seller. |\n\n#### Note\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/payout.514743e5e90d9862245e84cc1c9d3ea2.svg)",
  "title": "Payouts | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/mirakl/configuration",
  "markdown": "# Mirakl Connector configuration | Stripe DocumentationThe Stripe Docs logo\n\nBefore installing the connector, prepare a file with the variables below.\n\nWe provide a [configuration file sample](https://github.com/stripe/stripe-mirakl-connector/blob/master/.env.dist) in our repository that you can copy and rename to `.env`.\n\n## General settings![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Parameter | Description |\n| --- | --- |\n| APP\\_SECRET | To be generated. Commonly used to add more entropy to security related operations. Learn more on the [Symfony documentation](https://symfony.com/doc/current/reference/configuration/framework.html#secret). |\n| OPERATOR\\_PASSWORD | To be generated. Used to secure requests to the API exposed by the connector. Set the `X-AUTH-TOKEN` header to this value when calling the API. |\n| DATABASE\\_URL | The connection URL to your database. Learn more on the [Doctrine documentation](https://www.doctrine-project.org/projects/doctrine-dbal/en/2.9/reference/configuration.html#connecting-using-a-url). For example, `pgsql://symfony:symfony@db:5432/symfony?charset=UTF-8`. |\n| MESSENGER\\_TRANSPORT\\_DSN | The transport used for the queuing system. See the [Symfony Messenger documentation](https://symfony.com/doc/current/messenger.html#transports-async-queued-messages) for supported transports. For example, `amqp://guest:guest@localhost:5672/%2f/messages`. Defaults to `doctrine://default`. |\n| STRIPE\\_CLIENT\\_SECRET | Your Stripe API secret key available in your [API keys settings](https://dashboard.stripe.com/apikeys). We recommend creating a specific API key for the connector. Restricted keys are not supported. |\n| MIRAKL\\_HOST\\_NAME | Host name of your Mirakl Instance. For example, `https://mymarketplace.mirakl.net`. |\n| MIRAKL\\_API\\_KEY | The Mirakl operator key. Can be generated as a Mirakl operator in your API settings. We recommend creating a specific operator for the connector. |\n\n## Onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Parameter | Description |\n| --- | --- |\n| REDIRECT\\_ONBOARDING | The connector redirects the seller to this URL after completing their account creation on Stripe. Defaults to `$MIRAKL_HOST_NAME/mmp/shop/account/shop`. |\n| BASE\\_HOST | The domain of the server hosting your connector. For example, `stripe-mirakl.example.com`. |\n| SCHEME | The scheme used by your base host. Defaults to `https`. |\n| STRIPE\\_SELLERS\\_WEBHOOK\\_SECRET | Your Stripe webhook secret available in your [Connect webhook settings](https://dashboard.stripe.com/webhooks) when adding the endpoint, see below. |\n| MIRAKL\\_CUSTOM\\_FIELD\\_CODE | Code of the custom field that you have to add, see below. Defaults to `stripe-url`. |\n\n### Add a Stripe webhook endpoint for connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Go to your [webhook settings](https://dashboard.stripe.com/webhooks).\n2.  Add a [webhook](https://docs.stripe.com/webhooks \"webhook\") endpoint.\n3.  Set the URL to `<BASE_HOST>/api/public/webhook/sellers`.\n4.  Select **Listen to events on Connected accounts**.\n5.  Add `account.updated` in the **Events to send**:\n6.  Click **Add endpoint**.\n7.  Use the webhook secret for the `STRIPE_SELLERS_WEBHOOK_SECRET` environment variable.\n\n### Add a custom field to your Mirakl shops![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Log in to your Mirakl back office as an Operator.\n2.  Visit **Settings** > **Advanced Parameters** > **Shops**.\n3.  Go to the **Custom Fields** tab.\n4.  Use the following values to create a new field:\n\n| Parameter | Description |\n| --- | --- |\n| Code | Use `stripe-url` unless you chose a different key in your environment file. |\n| Type | `Link` |\n| Shops permissions | `Read only` |\n| Required field | `No` |\n\n## Payments![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n| Parameter | Description |\n| --- | --- |\n| PAYMENT\\_METADATA\\_COMMERCIAL\\_ORDER\\_ID | Metadata key used in Charges to convey the Mirakl commercial order ID. Defaults to `mirakl_commercial_order_id`. |\n| ENABLE\\_PRODUCT\\_PAYMENT\\_SPLIT | Enable the [payment split workflow](https://docs.stripe.com/connectors/mirakl/payments#payment-split) for product orders. Defaults to `false`. |\n| ENABLE\\_SERVICE\\_PAYMENT\\_SPLIT | Enable the [payment split workflow](https://docs.stripe.com/connectors/mirakl/payments#payment-split) for service orders. Defaults to `false`. |\n| ENABLE\\_PRODUCT\\_PAYMENT\\_REFUND | Enable the [payment refund workflow](https://docs.stripe.com/connectors/mirakl/payments#payment-refund) for product orders. Defaults to `false`. |\n| ENABLE\\_SERVICE\\_PAYMENT\\_REFUND | Enable the [payment refund workflow](https://docs.stripe.com/connectors/mirakl/payments#payment-refund) for service orders. Defaults to `false`. |\n| STRIPE\\_OPERATOR\\_WEBHOOK\\_SECRET | Your Stripe webhook secret available in your [account webhook settings](https://dashboard.stripe.com/webhooks) when adding the endpoint, see below. |\n\n### Add a Stripe webhook endpoint for your account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Go to your [webhook settings](https://dashboard.stripe.com/webhooks).\n2.  Add a webhook endpoint for your **account**.\n3.  Set the URL to `<BASE_HOST>/api/public/webhook/operator`.\n4.  Add the following in the **Events to send**: `charge.succeeded`, `charge.updated`.\n5.  Click **Add endpoint**.\n6.  Use the webhook secret for the `STRIPE_OPERATOR_WEBHOOK_SECRET` environment variable.\n\n## Notifications and alerting ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\n| Parameter | Description |\n| --- | --- |\n| MAILER\\_DSN | The entire Symfony Mailer configuration using a DSN-like URL format. Learn more on the [Symfony documentation](https://symfony.com/doc/current/components/mailer.html#mailer-dsn). For example, `smtp://user:pass@host:port`. Defaults to `smtp://null` (mailer disabled). |\n| TECHNICAL\\_ALERT\\_EMAIL | The recipicient of all technical alerts. For example, `myemail@example.com`. Defaults to empty. Required if mailer is enabled per `MAILER_DSN`. |\n| TECHNICAL\\_ALERT\\_EMAIL\\_FROM | The sender of all technical emails. Defaults to empty, required if mailer is configured. For example, `noreply@example.com`. |\n| OPERATOR\\_NOTIFICATION\\_URL | The endpoint on your server set to receive notifications from the connector. Defaults to empty (notifications disabled). |\n| MAIL\\_ON\\_NOTIFICATION\\_ENDPOINT\\_DOWN | Enable email alerts if a URL is provided in `OPERATOR_NOTIFICATION_URL` and that URL is not available or responds with an error. Defaults to `true`. |\n| MAIL\\_ON\\_NOTIFICATION\\_ENDPOINT\\_DOWN\\_COOLDOWN | Time between each email alert. Use `0` to disable throttling. The maximum value depends on the notification worker maximum life, that is, `3600` by default. Defaults to `10`. |",
  "title": "Mirakl Connector configuration | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/mirakl/reference",
  "markdown": "# Mirakl reference | Stripe DocumentationThe Stripe Docs logo\n\n## Scheduled jobs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Onboarding![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`php bin/console connector:sync:onboarding -q 2>&1`\n\n*   Default setting: every minute.\n*   Recommended setting: as often as possible.\n*   Description: fetch newly created Mirakl shops and add the onboarding link to their Mirakl back office.\n*   Documentation: [Onboarding workflow](https://docs.stripe.com/connectors/mirakl/onboarding-sellers).\n\n### Payment validation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`php bin/console connector:validate:pending-debit -q 2>&1`\n\n*   Default setting: every 5 minutes.\n*   Recommended setting: < 1 hour.\n*   Description: fetch newly accepted Mirakl orders, validate the payment on Mirakl, and capture it on Stripe.\n*   Documentation: [Payment validation workflow](https://docs.stripe.com/connectors/mirakl/payments#payment-validation).\n\n### Payment split![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`php bin/console connector:dispatch:process-transfer -q 2>&1`\n\n*   Default setting: every 5 minutes.\n*   Recommended setting: < 1 hour.\n*   Description: fetch newly debited Mirakl orders and create Stripe Transfers from the operator to the seller.\n*   Documentation: [Payment split workflow](https://docs.stripe.com/connectors/mirakl/payments#payment-split).\n\n### Payment refund![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`php bin/console connector:dispatch:process-refund -q 2>&1`\n\n*   Default setting: every 5 minutes.\n*   Recommended setting: < 1 hour.\n*   Description: fetch pending Mirakl refunds, create the refund on Stripe, validate it on Mirakl, and reverse the initial transfer.\n*   Documentation: [Payment refund workflow](https://docs.stripe.com/connectors/mirakl/payments#payment-refund).\n\n### Payout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`php bin/console connector:dispatch:process-payout -q 2>&1`\n\n*   Default setting: every day at 1am.\n*   Recommended setting: synchronized with your Mirakl billing cycles.\n*   Description: fetch newly created Mirakl [invoices](https://docs.stripe.com/api/invoices \"invoices\") and create Stripe Transfers and [Payouts](https://docs.stripe.com/payouts \"payout\").\n*   Documentation: [Payouts workflow](https://docs.stripe.com/connectors/mirakl/payouts#seller-settlement).\n\n### Alerting![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`php bin/console connector:notify:failed-operation -q 2>&1`\n\n*   Default setting: every day at 8am.\n*   Recommended setting: according to your preference.\n*   Description: if [enabled](https://docs.stripe.com/connectors/mirakl/configuration#alerting), send an email with all the failed transfers, refunds, and payouts.\n\n## Notification![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf [enabled](https://docs.stripe.com/connectors/mirakl/configuration#alerting), the connector sends server to server notifications in the following events.\n\n#### Note\n\nIf your endpoint is unreachable or returns an error, an email is sent to your `TECHNICAL_ALERT_EMAIL`.\n\n### Account updated![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA Stripe connected account was updated by the seller or Stripe.\n\n`{   \"type\": \"account.updated\",   \"payload\": {     \"miraklShopId\": 2000,     \"stripeUserId\": \"acct_1032D82eZvKYlo2C\"   } }`\n\n### Transfer failed![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA transfer failed during the [payment split job](#payment-split) or the [payout job](#payout).\n\n`{   \"type\": \"transfer.failed\",   \"payload\": {     \"internalId\": 5,     \"miraklId\": 123,     \"type\": \"TRANSFER_ORDER\",     \"stripeAccountId\": \"acct_1032D82eZvKYlo2C\",     \"miraklShopId\": 2003,     \"transferId\": null,     \"transactionId\": null,     \"amount\": 3400,     \"status\": \"TRANSFER_FAILED\",     \"failedReason\": \"Reason message\",     \"currency\": \"EUR\"   } }`\n\n### Refund failed![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA refund failed during the [payment refund job](#payment-refund) job.\n\n`{   \"type\": \"refund.failed\",   \"payload\": {     \"internalId\": 5,     \"miraklOrderId\": \"order_refunded_5\",     \"miraklRefundId\": \"1100\",     \"stripeRefundId\": null,     \"stripeReversalId\": \"trr_10\",     \"amount\": 3400,     \"status\": \"REFUND_FAILED\",     \"failedReason\": \"Reason message\",     \"currency\": \"EUR\"   } }`\n\n### Payout failed![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA payout failed during the [payout job](#payout).\n\n`{   \"type\": \"payout.failed\",   \"payload\": {     \"internalId\": 12,     \"amount\": 2300,     \"currency\": \"EUR\",     \"miraklInvoiceId\": 2000,     \"stripePayoutId\": null,     \"status\": \"PAYOUT_FAILED\",     \"failedReason\": \"Reason message\",   } }`",
  "title": "Mirakl reference | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/woocommerce/installation",
  "markdown": "# Install the connector | Stripe DocumentationThe Stripe Docs logo\n\n## Install the connectorBeta\n\n## Learn how to install the Stripe Tax Connector for WooCommerce.\n\nUse the Stripe Tax Connector for WooCommerce to automatically calculate [sales tax, VAT, and GST](https://docs.stripe.com/tax/calculating) for all of your transactions.\n\n## Download the connector![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nClick the button below to download the connector ZIP file. Don’t unzip or extract the file before installing it in your WordPress dashboard.\n\n[Download the Stripe Tax connector](https://d37ugbyn3rpeym.cloudfront.net/docs/stripe-tax-for-woocommerce-1.0.3.zip)\n\nIf your menu varies from the steps below, refer to the WordPress instructions to [install a plugin](https://wordpress.com/support/plugins/install-a-plugin).\n\n1.  Sign in to your [WordPress](http://wordpress.com/) account.\n2.  On the left side of your website’s dashboard, click **Plugins** > **Add New Plugin**.\n3.  On the **Plugins** page, click **Upload**.\n4.  Drag the Stripe Tax Connector zip file into the box or click the window to choose the file on your computer. The connector automatically installs and activates on your site.\n5.  Click **Manage plugin** to access the plugin settings.",
  "title": "Install the connector | Stripe Documentation",
  "description": "Learn how to install the Stripe Tax Connector for WooCommerce.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/woocommerce/configuration",
  "markdown": "# Configure the connector | Stripe DocumentationThe Stripe Docs logo\n\n## Configure the connectorBeta\n\n## Learn how to configure the Stripe Tax Connector for WooCommerce.\n\nAfter you [install](https://docs.stripe.com/connectors/woocommerce/installation) the Stripe Tax Connector for WooCommerce, you can connect it to your Stripe account and configure your tax settings.\n\nIf you previously configured these tax settings in the [Stripe Dashboard](https://dashboard.stripe.com/test/settings/tax), the values populate automatically in the Stripe Tax connector. You can edit the values in the connector and the changes automatically update in your Stripe Dashboard.\n\nIf your menu varies from the steps below, refer to the WordPress instructions to [use a plugin](https://wordpress.com/support/plugins/use-your-plugins/).\n\n[](#connect-stripe-account)\n\nOn your website’s dashboard, navigate to **WooCommerce** > **Settings**. On the **Stripe Tax** tab, click **Connect with Stripe** to log in to your Stripe account or create a new one.\n\nAfter successful authentication, navigate back to the Stripe Tax settings to continue with the configuration steps.\n\n[](#configure-tax-settings)\n\nOn the **Stripe Tax** tab, under **Configure your sales tax settings**, complete the following:\n\n1.  Enter your head office address, which is your company’s legal address.\n2.  Choose your default [product tax code](https://docs.stripe.com/tax/tax-codes), which allows Stripe to calculate the tax rate for categories of products.\n3.  Click **Save changes**.\n\nOn the **Tax** tab, you can decide if the prices you set for your products are inclusive or exclusive of tax.\n\n[](#tax-registrations)\n\nTax isn’t applied [until you add registrations](https://docs.stripe.com/tax/zero-tax#situations-where-stripe-calculates-zero-tax) for jurisdictions where you need to collect tax. Our [monitoring tool](https://docs.stripe.com/tax/monitoring) can help you understand where you might be registered or need to register.\n\nIf you’re already registered in certain jurisdictions and want to start collecting tax immediately, you can add those registrations to your configuration. You can only add tax registrations for [supported countries and registration types](https://docs.stripe.com/tax/supported-countries#supported-countries). Some jurisdictions might require additional information.\n\n### Add tax registration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nOn the **Stripe Tax** tab, under **Tax registrations**, click **Add new**. Choose the jurisdiction from the dropdown, then click **Save changes**.\n\n### Delete tax registration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo delete a registration, hover over the registration, then click **End immediately**. To delete multiple registrations, select them from the list, then click **End immediately** from the **Bulk actions** dropdown.\n\n[](#collect-taxes)\n\nTo start collecting taxes:\n\n*   On the **WooCommerce** > **General** tab, select **Enable tax rates and calculations**, then click **Save changes**. This setting enables rate configuration and tax calculation during the checkout process.\n    \n*   On the **WooCommerce** > **Stripe Tax** tab, select **Enable Stripe Tax**, then click **Save changes**. This setting enables automatic tax calculation and collection on all transactions.\n    \n\n[](#tax-reports)\n\nAfter you start collecting taxes, the Stripe Tax connector sends the transactions to Stripe Tax. You can then access tax reports and exports in the [Stripe Dashboard](https://dashboard.stripe.com/tax/registrations).\n\nLearn more about the types of [tax reports](https://docs.stripe.com/tax/reports) available in Stripe Tax.",
  "title": "Configure the connector | Stripe Documentation",
  "description": "Learn how to configure the Stripe Tax Connector for WooCommerce.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/shopware6/configuration",
  "markdown": "# Configure the Stripe Connector for Shopware 6\n\n## Learn how to configure the Stripe Connector for Shopware 6.\n\nTo use Stripe with [Shopware 6](https://www.shopware.com/en/), you must [install](https://docs.stripe.com/connectors/shopware6/installation) and then configure the Stripe connector.\n\n## Configure the connector ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the Shopware administration panel to configure the connector.\n\n1.  In the admin panel sidebar, under **Extensions**, select **My extensions**.\n    \n2.  On the **Apps** tab, for the Stripe connector, click the overflow menu () and select **Open extension**.\n    \n3.  Configure the Stripe Connector for Shopware 6:\n    \n    *   [Connect to Stripe to accept payments](https://docs.stripe.com/connectors/shopware6/configuration#connect-stripe)\n    *   [Choose your payment form](https://docs.stripe.com/connectors/shopware6/configuration#payment-form)\n    *   [Customize the payment form](https://docs.stripe.com/connectors/shopware6/configuration#customize-payment-form)\n    *   [Collect your customer’s postal code](https://docs.stripe.com/connectors/shopware6/configuration#postal-code)\n    *   [Choose how to capture funds](https://docs.stripe.com/connectors/shopware6/configuration#capture-funds)\n\n## Connect to Stripe to accept payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConnect Shopware to your Stripe account to start accepting payments. When you connect to a new account, you must reactivate your preferred payment methods.\n\n1.  On the **Stripe Configuration** page, click **Connect with Stripe in Live Mode**. If you want to test different app functionality without processing live payments, use **Connect with Stripe in Test Mode**.\n    \n2.  Provide your business information to [create your Stripe account](https://dashboard.stripe.com/register).\n    \n3.  After you create your Stripe account, log in to your [Stripe Dashboard](https://dashboard.stripe.com/).\n    \n4.  In the Stripe Dashboard, do the following:\n    \n    *   Under **Settings** > **Payment methods**, select your Shopware account from the **Select your platform** drop-down.\n        \n    *   Turn on your preferred payment methods individually or by using the **Turn on all** button.\n        \n\n## Choose your payment form ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nConfigure the payment form that displays to your customers during checkout. Under **Payment form settings**, you can choose from the following:\n\n*   **Integrated payment form**–The [Payment Element](https://docs.stripe.com/payments/payment-element) is an embeddable UI component that lets you accept 25+ payment methods with a single integration.\n\n![Integrated payment form with Payment Element](https://b.stripecdn.com/docs-statics-srv/assets/connector_payment_form_element.424e5b7d979120ca7615409e62bb86bc.png)\n\n*   **Redirect to Stripe**–[Stripe Checkout](https://docs.stripe.com/payments/checkout) lets you redirect your customers to a Stripe-hosted, customizable checkout page to finalize payment.\n\n![Stripe-hosted checkout page](https://b.stripecdn.com/docs-statics-srv/assets/connector_payment_form_checkout.9846147c723ca1610638c755de28ebc9.png)\n\n## Customize the payment form ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can customize the appearance of your checkout form in the Stripe Dashboard. Under **Select a theme for the integrated payment form**, choose one of the following: **Stripe**, **Night**, **Flat**, or **None**.\n\n## Collect your customer’s postal code ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can specify whether or not to collect your customer’s postal code at checkout using the **Never collect the postal code** field. Stripe recommends collecting and verifying postal code information, which can help decrease the card decline rate.\n\n*   (Recommended) **Unselect** this field if you want to require a postal code at checkout. This applies to cards issued in Canada, the United Kingdom, or the United States.\n    \n*   **Select** this field if you don’t want to collect a postal code at checkout.\n    \n\n## Choose how to capture funds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can specify how you want to authorize and capture funds.\n\n*   **Simultaneous authorization and capture**–The issuing bank confirms that the cardholder can pay, and then transfers the funds automatically after confirmation.\n    \n*   **Separate authorization and capture**–The authorization occurs first, and the capture occurs later. To capture funds, change the order’s payment status from `Authorized` to `Paid` or `Partially paid` in the Shopware administration panel.\n    \n\n## Refunds ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can refund any order with a `Paid` status. To initiate a refund, select the order under **Orders** > **Overview** in the Shopware administration panel. Change the order’s payment status from `Paid` to `Refunded`.",
  "title": "Configure the Stripe Connector for Shopware 6 | Stripe Documentation",
  "description": "Learn how to configure the Stripe Connector for Shopware 6.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/shopware6/installation",
  "markdown": "# Install the Stripe Connector for Shopware 6\n\n## Learn how to install and update the Stripe Connector for Shopware 6.\n\nUse the Stripe Connector for [Shopware 6](https://www.shopware.com/en/) to integrate [Stripe Elements](https://docs.stripe.com/payments/elements) and accept more than 25 payment methods with a single integration.\n\n## Install the connector![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the Shopware administration panel to install the connector.\n\n1.  In the admin panel sidebar, under **Extensions**, select **My extensions**.\n    \n2.  On the **My extensions** page, on the **Shopware Account** tab, enter your credentials, then click **Login**.\n    \n3.  In the admin panel sidebar, under **Extensions**, select **Store**.\n    \n4.  In the search bar, type Stripe.\n    \n5.  On the **Apps** tab, do the following to add the Stripe connector:\n    \n    *   For the Stripe app, click **Add extension**.\n    *   Accept the terms and conditions, and then click **Add extension for free**.\n    *   Click **Install extension**.\n\n## Add Stripe as a payment method![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen the installation completes, view the connector on your extensions page in the Shopware administration panel.\n\n1.  In the admin panel sidebar, under **Sales Channels**, select your [sales channel](https://docs.shopware.com/en/shopware-6-en/settings/saleschannel) to add Stripe as a payment method.\n    \n2.  Under **Payment and shipping**, select **Pay with Stripe** from the **Payment methods** drop-down.\n    \n3.  _(Optional)_ To display Stripe first at checkout, select **Pay with Stripe** from the **Default payment method** drop-down.\n    \n4.  Click **Save**.\n    \n\n## Update the connector ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the Shopware administration panel to update the connector when a new version is available. Under **Extensions**, select **My extensions**. To initialize the update process, select **Update** on the **Apps** tab for the Stripe connector.",
  "title": "Install the Stripe Connector for Shopware 6 | Stripe Documentation",
  "description": "Learn how to install and update the Stripe Connector for Shopware 6.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/salesforce-commerce-cloud/component-overview",
  "markdown": "# Install Stripe Connector for Salesforce B2C Commerce Shopfront Reference Architecture\n\n## Learn about the Stripe Connector for Salesforce Commerce Cloud Shopfront architecture.\n\n### Stripe Payment Element![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe [Payment Element](https://docs.stripe.com/payments/payment-element) modifies the default Commerce Cloud credit card collection and processing by using Stripe.js, a JavaScript library, to securely tokenize credit card data. Payments are then processed using the tokenized data, instead of raw credit card information.\n\nDuring checkout, the cartridge creates a PaymentIntent for any new cards or alternate payment methods that a customer enters. This tokenized data generates a Stripe Charge at the point of purchase.\n\n### Stripe.js sources![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen customers enter credit card or other payment information on the storefront, Stripe.js tokenizes it in interactions between Stripe and the client (browser). Unmasked credit card data is therefore never sent to the Commerce Cloud servers.\n\n### Stripe PaymentIntent![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe [PaymentIntent](https://docs.stripe.com/api/payment_intents) workflow guides you through the process of collecting a payment from your customer. A PaymentIntent transitions through [multiple statuses](https://docs.stripe.com/payments/paymentintents/lifecycle) throughout its lifetime as it interfaces with Stripe.js to perform authentication flows and creates, at most, one successful charge.\n\nThe system creates a Stripe Charge (authorize or capture, based on Business Manager configuration) from a successfully created and submitted Basket. All Stripe Charges are created against a Stripe payment source.\n\n### AVS auto-fail transactions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSite administrators can select a variety of AVS statuses to auto fail an order for. If the Stripe charge returns any of the selected statuses for either `address_line1_check` or `address_zip_check`, the order is auto-failed and the Stripe charge reversed. You can also manage these settings on the Stripe Dashboard. Supported payment methods:\n\n*   Cards (Visa, Mastercard, American Express, Discover, Diners Club, JCB, Alipay).\n*   The Payment Request button element gives you a single integration for Apple Pay, Google Pay, and the browser standard Payment Request API.\n\n## Limitations and constraints![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe offers a number of standard services that aren’t supported by the cartridge. These include support for subscriptions, plans, and coupons. There aren’t any known locale specific restrictions in the cartridge.\n\nThe included RELAY OCAPI configurations are included as examples only. A RELAY implementation requires additional configuration and testing along with the Stripe team. For any locale specific restrictions, see the [Stripe.js documentation](https://docs.stripe.com/js).\n\n## Compatibility![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAvailable since Commerce Cloud Platform Release 16.8, SFRA version 4.4.\n\nThe cartridge is available for installation on storefronts that support both controller and SFRA SiteGenesis implementations.\n\n## Privacy![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCommerce Cloud doesn’t store any unmasked credit card data. The cartridge tokenizes all payment data within direct client-to-Stripe communications and obscures any sensitive credit card data before it arrives on the Commerce Cloud servers. Similarly, all credit card data that Commerce Cloud retrieves from the Stripe servers is either masked, tokenized, or both.",
  "title": "Install Stripe Connector for Salesforce B2C Commerce Shopfront Reference Architecture | Stripe Documentation",
  "description": "Learn about the Stripe Connector for Salesforce Commerce Cloud Shopfront architecture.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/salesforce-commerce-cloud/implementation-guide",
  "markdown": "# Stripe Connector for Salesforce B2C Commerce implementation guide\n\n## Set up Business Manager![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Stripe Connector for Salesforce B2C Commerce (LINK Cartridge) requires several cartridges for full functionality. Additionally, controller and SFRA support is broken out into two separate cartridges, thereby facilitating the installation and use of one or the other models.\n\nImport all three cartridges into UX studio and associate them with a Server Connection.\n\n### Site cartridge assignment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Navigate to **Administration > Sites > Manage Sites**.\n2.  Click the site name for the storefront site you want to add Stripe functionality to.\n3.  Select the **Settings** tab.\n4.  For Storefront Reference Architecture (SFRA), add `app_stripe_sfra:int_stripe_sfra:int_stripe_core` to the cartridge path.\n\nRepeat these steps for each storefront site where you want to implement Stripe.\n\n### Business Manager cartridge assignment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Navigate to **Administration > Sites > Manage Sites**.\n2.  Click the **Business Manager Site** and then the **Manage the Business Manager site** link.\n3.  Add `int_stripe_core` to the cartridge path.\n\n### Metadata import![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Navigate to the metadata folder of the project and open the `stripe_site_template` folder.\n2.  Open the `sites` folder and edit the `siteIDHere` folder to the site ID of the site you want.\n3.  Add a folder for each site you want Stripe on.\n4.  Navigate to **Administration > Site Development > Site Import & Export**.\n5.  Compress the `stripe_site_template` folder into a zip file and import it.\n\n### Build Stripe styling![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf necessary, update the path to your base SFRA installation in `package.json` from the same root folder.\n\nNormally, there’s a top-level project folder in which the repositories of the SFRA base cartridge and all required plugins, libraries, and any other LINK cartridges are cloned. If you cloned the Stripe cartridge into that folder as well, you don’t need to update the `paths.base` property. If you haven’t cloned the cartridge into that folder, update the `paths.base` property in `package.json` with the relative path to the local directory containing the Storefront Reference Architecture repository. The following is the default `paths.base` value:\n\n`\"paths\": {   \"base\": \"../storefront-reference-architecture/cartridges/app_storefront_base/\" }`\n\nAfter you’re certain `package.json` has the correct path to SFRA cartridges, run the `npm run compile:scss` command from the root folder of the Stripe repository.\n\n### Add new payment processors![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThere are two payment processors used in the Stripe cartridge. `STRIPE_CREDIT` handles credit card payments while `STRIPE_APM` handles local payment methods such as bank transfers and giropay.\n\n#### Credit payment processor![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Navigate to **Merchant Tools > Ordering > Payment Processors** and click **New**.\n2.  In the new window, set the ID to `STRIPE_CREDIT` and click **Apply**.\n\n#### APM payment processor![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Navigate to **Merchant Tools > Ordering > Payment Processors** and click **New**.\n2.  In the new window, set the ID attribute to value `STRIPE_APM` and click **Apply**.\n\n### Update payment methods![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNavigate to **Merchant Tools > Ordering > Payment Methods**, click the **CREDIT\\_CARD** payment method, and select the **STRIPE\\_CREDIT** payment processor in the dropdown under the **CREDIT\\_CARD** details section.\n\nFor dynamic payment methods or the Payment Request Button, enable **STRIPE\\_APM\\_METHODS** to include payment methods supported by Stripe. See the [payment methods guide](https://stripe.com/payments/payment-methods-guide) for more details.\n\nTo utilize the Stripe Payment Request Button, enable the **STRIPE\\_PAYMENT\\_REQUEST\\_BTN** payment method. Refer to [payment request button](https://docs.stripe.com/stripe-js/elements/payment-request-button) for more details.\n\n## Install the Stripe Salesforce Commerce app![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse Stripe Apps to bolster security and simplify the use of distinct restricted keys for each integration with your Stripe account. The process of installing the Stripe App and acquiring the newly generated secret and publishable [keys](https://docs.stripe.com/keys) is essential for your integration with the Salesforce Commerce connector. This approach eliminates the need to manually create your own restricted key or use a secret key. To integrate the Salesforce Commerce app and reinforce your account’s security infrastructure:\n\n1.  Navigate to the [Stripe App Marketplace](https://marketplace.stripe.com/), then click [Install the Salesforce Commerce app](https://marketplace.stripe.com/apps/install/link/com.stripe.SalesforceCommerce).\n2.  Select the Stripe account where you want to install the app.\n3.  Review and approve the app permissions, install the app in test mode or live mode, then click **Install**.\n4.  After you install the app, store the keys in a safe place where you won’t lose them. To help yourself remember where you stored it, you can [leave a note on the key in the Dashboard](https://docs.stripe.com/keys#reveal-an-api-secret-key-live-mode).\n5.  Use the newly generated publishable key and secret key to finish the Connector configuration.\n6.  To manage the app or generate new security keys after installation, navigate to the application settings page in [test mode](https://dashboard.stripe.com/test/settings/apps/com.stripe.SalesforceCommerce) or [live mode](https://dashboard.stripe.com/settings/apps/com.stripe.SalesforceCommerce).\n\n## Configuration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUpdate **Merchant Tools > Site Preferences > Custom Site Preferences > Stripe Configurations** with site-specific values.\n\n*   Populate Stripe secret API key with the values from the Stripe Salesforce Commerce app.\n    \n*   Populate publishable API key with the values from the Stripe Salesforce Commerce app.\n    \n*   **Is this SFRA installation:** Set to `yes` if the current site is using SFRA.\n    \n*   **Capture Funds on Stripe Charge:** The default value is `true` (Yes). Set to `false` (No) to authorize Stripe charges instead.\n    \n*   **Stripe card element CSS style:** Set the CSS styling that the card element button inherits to fit within the overall storefront styles (for example, `{\"base\": {\"fontFamily\": \"Arial, sans-serif\",\"fontSize\": \"14px\",\"color\": \"#C1C7CD\"},\"invalid\": {\"color\": \"red\" } }`).\n    \n*   **Stripe API URL:** `https://js.stripe.com/v3/`\n    \n*   **Stripe Payment Request Button Style:** For the payment request button, select the limited CSS styling for the button. Refer to [styling the element](https://docs.stripe.com/stripe-js/elements/payment-request-button#styling-the-element) for more details.\n    \n*   **Apple Pay Verification String:** Enter the Apple verification string provided from the Stripe Dashboard. This is a one-time enablement. The Stripe console proxies the Apple Pay for a web verification string upon setup. Configure this in the sandbox if using the Payment Request Button as a form of payment on the storefront.\n    \n*   **Country Code (Stripe Payment Request Button):** This is the default country code (for example, US) for the Payment Request Button. You might need to customize on a multi-country single site in order to dynamically pass the country code rather than the site preference. Refer to [creating a payment request instance](https://docs.stripe.com/stripe-js/elements/payment-request-button) for more details.\n    \n*   **Stripe webhook signing secret:** Enter the [webhook](https://docs.stripe.com/webhooks \"webhook\") signing secret provided by the Stripe Dashboard. Stripe signs webhook events and passes a validation to SFCC. SFCC validates the contents of the message using this secret.\n    \n*   **Stripe Allowed Webhook Statuses:** Configure the [allowed statuses](#stripe-dashboard-set-up) for webhooks to respond to.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/configuration-webhook-statuses.01dca58aedb406537570122a457afa09.png)\n    \n*   **Allowed apm methods:**\n    \n    *   Enumeration of allowed payment methods from the Stripe API: `{ \"default\": [ \"p24\", \"eps\", \"sepa_debit\", \"ideal\", \"sofort\", \"bitcoin\", \"alipay\", \"bancontact\", \"giropay\" ], \"en_UK\": [ \"p24\", \"eps\" ], \"de_AT\": [ \"sofort\", \"ideal\" ] }`. Update this field per site locale to indicate which alternate payment methods are enabled for each locale. Refer to [sources](https://docs.stripe.com/sources) for more details.\n*   **Stripe Enabled:** Enables or disables the cartridge.\n    \n\n## Set up webhook endpoint and Apple Pay domain ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nSet up a new endpoint in the [Stripe Dashboard](https://dashboard.stripe.com/test/webhooks) with the Stripe-WebHook controller URL and subscribe to these events:\n\n*   `review.opened`\n*   `review.closed`\n*   `charge.succeeded`\n*   `source.canceled`\n*   `source.failed`\n*   `source.chargeable`\n*   `payment_intent.succeeded`\n*   `payment_intent.payment_failed`\n\nCopy the signing secret to the **Stripe Webhook Signing Secret** preference. Make sure that this value is set to your Stripe account’s country code.\n\nFor Apple Pay:\n\n1.  Update `RedirectURL.js`:\n\n`server.extend(page);  server.replace('Start', function (req, res, next) {   const URLRedirectMgr = require('dw/web/URLRedirectMgr');    // Intercept the incoming path request   if (URLRedirectMgr.getRedirectOrigin() === '/.well-known/apple-developer-merchantid-domain-association') {     res.render('stripe/util/apple');     return next();   }    const redirect = URLRedirectMgr.redirect;   const location = redirect ? redirect.location : null;   const redirectStatus = redirect ? redirect.getStatus() : null;    if (!location) {     res.setStatusCode(404);     res.render('error/notFound');   } else {     if (redirectStatus) {       res.setRedirectStatus(redirectStatus);     }     res.redirect(location);   }    return next(); });`\n\n1.  Set up an alias to one of the sites on the sandbox temporarily so that the domain can be verified in the Stripe Dashboard. The alias needs to be something like this:\n\n`{   \"__version\": \"1\",     \"settings\": {       \"http-host\": \"your.sandbox.domain.demandware.net\",       \"https-host\": \"your.sandbox.domain.demandware.net\",       \"default\": \"true\",       \"site-path\": \"/\",   },   \"your.sandbox.domain.demandware.net\": [     {       \"locale\": \"en_GB\",       \"if-site-path\": \"/\",     }   ] }`\n\nThe locale value needs to be a locale that isn’t disabled.\n\n1.  On the [Payment method domains page](https://dashboard.stripe.com/settings/payment_method_domains), click **Add a new domain**.\n2.  Enter your domain name.\n3.  Click **Save and continue**.\n4.  Download the [domain association file](https://stripe.com/files/apple-pay/apple-developer-merchantid-domain-association).\n5.  Host the file at `/.well-known/apple-developer-merchantid-domain-association`. For example, if you register `https://example.com`, make that file available at `https://example.com/.well-known/apple-developer-merchantid-domain-association`.\n6.  Click **Verify**.\n\n## Update storefront code![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe base LINK cartridge code contains support for all credit cards supported by Stripe. The list of allowed cards on the storefront is still limited by the Credit/Debit Cards list in Business Manager (Merchant Tools > Ordering > Payment Methods > Credit/Debit Cards).\n\nMake the following updates to the Storefront Code. Examples provided are based on SFRA version 4.4. The following sections detail the customizations made to SFRA code.\n\nThere are many controller endpoints that are appends instead of replaces. Those aren’t covered as they should work without doing anything.\n\nController updates are only required for replaced endpoints, as you might have already replaced that endpoint in your integration. Use the changes made to the base cartridge and add them to your already replaced controller. If you haven’t extended/replaced these endpoints, you don’t need to do anything.\n\n### Controller: CheckoutServices.js ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPath: `app_stripe_sfra/cartridge/controllers/CheckoutServices.js`\n\nRemove the payment instrument validation in the `SubmitPayment` endpoint:\n\n`if (!paymentMethodID && currentBasket.totalGrossPrice.value > 0) {   const noPaymentMethod = {};    noPaymentMethod[billingData.paymentMethod.htmlName] = Resource.msg(     'error.no.selected.payment.method',     'payment',     null   );    delete billingData.paymentInformation;   res.json({     form: billingForm,     fieldErrors: [noPaymentMethod],     serverErrors: [],     error: true   });   return; }  // Validate payment instrument const creditCardPaymentMethod = PaymentMgr.getPaymentMethod(PaymentInstrument.METHOD_CREDIT_CARD); const paymentCard = PaymentMgr.getPaymentCard(billingData.paymentInformation.cardType.value);  const applicablePaymentCards = creditCardPaymentMethod.getApplicablePaymentCards(   req.currentCustomer.raw,   req.geolocation.countryCode,   null );  if (!applicablePaymentCards.contains(paymentCard)) {   // Invalid payment instrument   const invalidPaymentMethod = Resource.msg('error.payment.not.valid', 'checkout', null);   delete billingData.paymentInformation;   res.json({     form: billingForm,     fieldErrors: [],     serverErrors: [invalidPaymentMethod],     error: true   });   return; }`\n\nUpdate the order creation code:\n\n`// Re-calculate the payments const calculatedPaymentTransactionTotal = COHelpers.calculatePaymentTransaction(currentBasket); if (calculatedPaymentTransactionTotal.error) {   res.json({       error: true,       errorMessage: Resource.msg('error.technical', 'checkout', null);   });   return next(); } const stripeCheckoutHelper = require('int_stripe_core').getCheckoutHelper(); const order = stripeCheckoutHelper.createOrder(currentBasket);  if (!order) {   res.json({     error: true,     errorMessage: Resource.msg('error.technical', 'checkout', null);   });   return next(); }`\n\nUpdate the order placement code:\n\n`var isAPMOrder = stripeCheckoutHelper.isAPMORder(order);  if (!isAPMOrder) {   var stripePaymentInstrument = stripeCheckoutHelper.getStripePaymentInstrument(order);    if (stripePaymentInstrument && order.custom.stripeIsPaymentIntentInReview) {     res.json({       error: false,       orderID: order.orderNo,       orderToken: order.orderToken,       continueUrl: URLUtils.url('Order-Confirm').toString()     });      return next();   }   // Places the order   var placeOrderResult = COHelpers.placeOrder(order, fraudDetectionStatus);    if(placeOrderResult.error) {     stripeCheckoutHelper.refundCharge(order);     res.json({       error: true,       errorMessage: Resource.msg('error.technical', 'checkout', null)     });   const fraudDetectionStatus = hooksHelper(     'app.fraud.detection',     'fraudDetection',     currentBasket,     require('*/cartridge/scripts/hooks/fraudDetection').fraudDetection   );    if (fraudDetectionStatus.status === 'fail') {     Transaction.wrap(function () {       OrderMgr.failOrder(order);     });      // Fraud detection failed     req.session.privacyCache.set('fraudDetectionStatus', true);      res.json({       error: true,       cartError: true,       redirectUrl: URLUtils.url('Error-ErrorCode', 'err', fraudDetectionStatus.errorCode).toString(),       errorMessage: Resource.msg('error.technical', 'checkout', null);     });     return next();   }   COHelpers.sendConfirmationEmail(order, req.locale.id);    // Reset usingMultiShip after successful Order placement   req.session.privacyCache.set('usingMultiShip', false);    res.json({     error: false,     orderID: order.orderNo,     orderToken: order.orderToken,     continueUrl: URLUtils.url('Order-Confirm').toString()   });    return next(); }`\n\n### Controller: PaymentInstruments.js ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPath: `app_stripe_sfra/cartridge/controllers/PaymentInstruments.js`\n\nReplace the `DeletePayment` endpoint with the following code:\n\n`server.replace('DeletePayment', function(req, res, next) {   var stripeHelper = require ('int_stripe_core').getStripeHelper();   var wallet = stripeHelper.getStripeWallet(customer);   var UUID = req.querystring.UUID;   wallet.removePaymentInstrument({ custom: { stripeId: UUID }});    res.json({  UUID: UUID });   next(); });`\n\n### Controller: RedirectURL.js ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPath: `app_stripe_sfra/cartridge/controllers/RedirectURL.js`\n\nAdd the following code to the `Start` function:\n\n`server.replace('Start', function (req, res, next) {   const URLRedirectMgr = require('dw/web/URLRedirectMgr');    // Intercept the incoming path request   if (URLRedirectMgr.getRedirectOrigin() === '/.well-known/apple-developer-merchantid-domain-association') {     res.render('stripe/util/apple');     return next();   }    const redirect = URLRedirectMgr.redirect;   const location = redirect ? redirect.location : null;   const redirectStatus = redirect ? redirect.getStatus() : null;    if (!location) {     res.setStatusCode(404);     res.render('error/notFound');   } else {     if (redirectStatus) {       res.setRedirectStatus(redirectStatus);     }     res.redirect(location);   }    return next(); });`\n\n## External interfaces![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe functionality relies heavily on external calls to Stripe services. All external interfaces use the service framework to communicate with the Stripe API.\n\nStripe accounts are free to create and use. Most communications with Stripe services are logged and accessible in the [Stripe Dashboard](https://dashboard.stripe.com/). We encourage you to use the Stripe Dashboard to monitor and test your integration. You can find the main configuration for integration of the Stripe services under Administration > Operations > Services with a different service for each external call:\n\n*   `stripe.http.addCard`\n*   `stripe.http.authorizePayment`\n*   `stripe.http.createCharge`\n*   `stripe.http.createCustomer`\n*   `stripe.http.deleteCard`\n*   `stripe.http.fetchCustomerCards`\n*   `stripe.http.fetchCustomerSources`\n*   `stripe.http.refundCharge`\n*   `stripe.http.retrieveCustomer`\n*   `stripe.http.service`\n*   `stripe.http.updateCard`\n\nAll of these services use the same profile and the same credentials. The only thing that may be different is whether or not the communication log is enabled and the log name prefix. Here is the configuration of some of the services:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/salesforce-addcard.af39346a7b5255e74be8acaa145593bc.png)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/salesforce-authorize.f02620c9923d170c73748fa7499339ef.png)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/salesforce-createcharge.3370eca839412304ffe706cecdcc942c.png)\n\n## Stripe Payment Element![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe cartridge supports Stripe Payment Element as a payment method.\n\nThe Payment Element is an embedded UI component that lets you accept up to 25+ payment methods with a single integration.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/payment-element.d9f32fe8ddd882f9cfe67f2b0d915b33.png)\n\nTo enable the Payment Element, navigate to **Business Manager > Merchant Tools > Ordering > Payment Methods** and enable the payment method with ID set to `STRIPE_PAYMENT_ELEMENT`. In storefront Checkout > Payment, there is a widget with all payment methods enabled in the Stripe [Dashboard](https://dashboard.stripe.com/settings/payment_methods).\n\nWhen you enable Payment Element in Business Manager, it can replace all other payment methods. You can disable all payment methods and use `STRIPE_PAYMENT_ELEMENT` instead.\n\nTo enable saving of payment methods for future use from Stripe Payment Element, navigate to **Business Manager > Custom Preferences > Stripe Configs** and set **Stripe Payment Element: Enable Save Payment Method for Future Purchases** to `Yes`.\n\nTo display a list of saved payment methods in checkout, navigate to **Business Manager > Payments Methods** and enable the `CREDIT_CARD` payment method. When it’s enabled with `STRIPE_PAYMENT_ELEMENT`, the credit card tab includes a list saved cards (if any).\n\n## Stripe Radar insights display![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nStripe LINK cartridge supports Radar insights view to showcase risk insights within the Orders section of Business Manager. [Radar](https://docs.stripe.com/radar) provides real-time fraud protection and requires no additional development time. Fraud professionals can add [Radar for Fraud Teams](https://stripe.com/radar/fraud-teams) to customize protection and get deeper insights.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/radar-insights.be63001444ae6c6898ac8de4a13ae00e.png)\n\nTo enable the insights display, navigate to **Business Manager > Merchant Tools > Custom Preferences > Stripe Configs** and set **Risk Score Data** to `Yes`.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/radar-configuration.54078bec7ed35de180bec62625dfde96.png)",
  "title": "Stripe Connector for Salesforce B2C Commerce implementation guide | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/salesforce-commerce-cloud/testing",
  "markdown": "# Test your SFRA integration | Stripe DocumentationThe Stripe Docs logo\n\n## Learn about testing your SFRA integration.\n\nAfter you install the cartridge and integrate it according to the instructions, try to place an order on your sandbox to test the storefront functionality.\n\nYou can find a number of [test credit card numbers](https://docs.stripe.com/testing) that you can use to test a variety of scenarios. However, the test cards only work while using your test secret and publishable API keys. You can’t use real credit card numbers with your test API keys.\n\nYou should monitor and test the integration against the Stripe Dashboard before going live. Stripe functions largely the same with both test and live transactions (aside from what credit card numbers you can use) . After you’ve completed and tested your integration, change your two Stripe API keys to take your integration live.\n\n## Checkout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Add a product into the cart and view the cart page or expand the mini cart.\n    \n2.  Click **Checkout** and check out as a Guest or log into your account.\n    \n3.  Fill the shipping address or select shipping address from the saved address and select the shipping method.\n    \n4.  Click **Next: Payment**.\n    \n5.  Fill in the billing address or select the billing address from the saved address, fill in the email and phone number and select the payment method as **Credit card** and enter test data from the [Stripe docs](https://docs.stripe.com/testing) or use the card number `4242424242424242` and any CVV and expiration date.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/testing-billing.5b22eb5c55cfd346eb8f6875486e137c.png)\n    \n6.  Click on **Next: Place Order**.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/testing-confirmation.3f48225e4cccaefe1a62fdeff435646e.png)\n    \n    If your test transaction was successful, the confirmation page will open.\n    \n\n## Checkout using the Payment Request Button![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Make sure you have at least one saved address and one credit card in your browser (Chrome).\n    \n2.  Add a product into the cart and view the cart page or expand the mini cart.\n    \n3.  Click **Checkout** and check out as a Guest or log into your account.\n    \n4.  Fill in the shipping address or select the shipping address from a saved address and select the shipping method.\n    \n5.  Click on **Next: Payment**.\n    \n6.  Click on **Pay now**.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/testing-paynow-button.d007d96ba5fd7c218c217e8f0c433ef2.png)\n    \n7.  When the dialog opens, fill in the payment information and click the **Pay**.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/testing-paymentsheet.db72272e07c385adf33c688bffad7149.png)\n    \n8.  Enter any CVC code and click **Confirm**.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/testing-paymentsheet-cvc.a3e176633d118ce3c186c174193bb39e.png)\n    \n9.  Clicking **Confirm** redirects you to the last page of the checkout. Click **Place Order**.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/testing-placeorder.edd7d82e1f398e4242e780b4dd36cee6.png)\n    \n    The confirmation page opens.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/testing-order-confirmation.07971ecaf576cebf3f5099ce6acbbc4d.png)",
  "title": "Test your SFRA integration | Stripe Documentation",
  "description": "Learn about testing your SFRA integration.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/woocommerce/testing",
  "markdown": "# Test the connector | Stripe DocumentationThe Stripe Docs logo\n\n## Test the connectorBeta\n\n## Test the tax calculation feature of the Stripe Tax Connector for WooCommerce.\n\nYou can test how the Stripe Tax Connector for WooCommerce calculates tax for your products by manually creating an order or through your checkout flow.\n\n## Example 1: Manual order creation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo calculate and add tax to a manually created order:\n\n1.  On your website’s dashboard, navigate to **WooCommerce** > **Orders**.\n2.  On the **Orders** page, click **Add new order**.\n3.  Add your customer and order information, then click **Recalculate**.\n\nIf you don’t see tax added, you might not have a [registration](https://docs.stripe.com/connectors/woocommerce/configuration#tax-registrations) in the customer’s jurisdiction.\n\n## Example 2: Checkout page![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo test how the connector calculates and adds tax on the checkout page:\n\n1.  View your shop as a customer.\n2.  Add a taxable product to your cart.\n3.  Enter an address in a jurisdiction where you have an active [registration](https://docs.stripe.com/connectors/woocommerce/configuration#tax-registrations).\n\nThe appropriate tax automatically calculates on the checkout page.",
  "title": "Test the connector | Stripe Documentation",
  "description": "Test the tax calculation feature of the Stripe Tax Connector for WooCommerce.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/salesforce-commerce-cloud/user-guide",
  "markdown": "# Stripe Salesforce Commerce Cloud Cartridge user guide\n\n## Learn how to use the Stripe Salesforce Commerce Cloud Cartridge.\n\n## Merchant roles and responsibilities![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAs soon as configurations and job schedules are set up, the functionality runs on demand—the merchant doesn’t need to perform any ongoing maintenance or other tasks.\n\n## Business Manager![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBusiness Manager settings and configuration notes are described in detail in the [implementation guide](https://docs.stripe.com/connectors/salesforce-commerce-cloud/implementation-guide).\n\nThe cartridge comes with two jobs:\n\n*   Stripe - Delete Custom Objects\n*   Stripe - Process Webhook Notifications\n\nEnable the **Stripe - Process Webhook Notifications** job for the desired site:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/userguide-siteassignments.6e5f58df010141fb6b2e306dff0d2db0.png)\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/userguide-notifications.e53f68c90c668d89feb1ba7bf4976344.png)\n\n## Storefront functionality![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### Saved credit cards![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen an authenticated customer selects a saved credit card on the payment page, they can see a list of their Stripe-saved payment sources as radio buttons rather than the default SiteGenesis select options.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/storefront-payment.b41658955e3b7ea13a0ee9f3e0fd9795.png)\n\n### Payment request button![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter a customer saves their address and credit card information in their browser, they see the payment request button (**Pay now**).\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/storefront-paynow.f5e387d720260d6d4dc1a27faed5a31a.png)\n\nThe customer sees **Pay now** or an Apple Pay button, depending on what their device and browser combination supports.",
  "title": "Stripe Salesforce Commerce Cloud Cartridge user guide | Stripe Documentation",
  "description": "Learn how to use the Stripe Salesforce Commerce Cloud Cartridge.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/salesforce-billing/install",
  "markdown": "# Installing Stripe for Salesforce Billing\n\n## Learn how to install Stripe for Salesforce Billing including the prerequisites.\n\n## Before you begin![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore you can install and configure the **Stripe Connector for Salesforce Billing** managed package, you have to install the **Salesforce CPQ** and **Salesforce Billing** managed packages. The package install links for both apps are available in the [**Salesforce Quote-to-Cash** install website](https://install.steelbrick.com/), and the configuration instructions for each package are in the following sections.\n\n## Install Salesforce CPQ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo install the Salesforce CPQ package, you must apply the **Salesforce CPQ License** permission set license to the user that will install the package in your organization.\n\nNavigate to the Salesforce Quote-to-Cash [website](https://install.steelbrick.com/), scroll down to the **Salesforce CPQ** package installation links, and select the most recent release. If you’re installing into a sandbox environment, click the **Sandbox** link. If you’re installing into a production environment, click the **Production** link. You might be prompted to log into your Salesforce organization if you haven’t logged in previously.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/salesforce-cpq-install.86a97352d2e50c5bcda9e98e4f246a0c.png)\n\nThe Salesforce CPQ installation links\n\nNext, make sure that **Install for All Users** is selected and click **Install**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/Salesforce-install-for-all-users.075e59fd13a25231252072473b753228.png)\n\nSalesforce CPQ install for all users\n\nYou’ll be asked to approve access to and from third-party websites. Check the **Grant Access** checkbox and click **Continue**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/salesforce-approve-third-party.34f5ae314d715d1bfeff38016e9034ac.png)\n\nApproving third-party access for Salesforce CPQ\n\nIf successful, you’ll receive an email telling you Salesforce CPQ is installed. After you receive the email, navigate to **Setup > Apps > Packaging > Installed Packages** and click **Configure** on Salesforce CPQ.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/installed-packages.f9d8b71b58f90255c31e6bacbb744081.png)\n\nSalesforce installed packages\n\nClick the **Pricing and Calculation tab** and click **Authorize new calculation service**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/pricing-and-calculation-tab.629f4b041efc6393f90591126cd07a81.png)\n\nSalesforce CPQ pricing and calculation configuration\n\nAs an optional but recommended step, click the **Order** tab, then check the **Allow Multiple Orders** checkbox and set the **Default Order Start Date** to **Quote Start Date**. After setting those fields, click **Save**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/order-tab.e9a9057b47ff2a654985d3481931b26a.png)\n\nSalesforce CPQ order configuration\n\nFor more information, see Salesforce documentation on [Install Salesforce Billing](https://help.salesforce.com/s/articleView?id=sf.blng_install_billing_package.htm&type=5).\n\n## Install Salesforce Billing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNavigate to the Salesforce Quote-to-Cash [website](https://install.steelbrick.com/), scroll down to the **Salesforce Billing** package installation links, and select the most recent release. If you’re installing it into a sandbox environment, click the **Sandbox** link, and if you’re installing it into a production environment, click the **Production** link. You may be prompted to log into your Salesforce organization if you haven’t done so previously.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/salesforce-billing-install.d3e00d0fefdc3a86240d5d92e351b4f3.png)\n\nThe Salesforce Billing installation links\n\nMake sure **Install for All Users** is selected, then click **Install**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/Salesforce-install-for-all-users.075e59fd13a25231252072473b753228.png)\n\nSalesforce Billing install for all users\n\nYou’ll receive an email telling you Salesforce Billing is installed. To verify, navigate to **Setup > Apps > Packaging > Installed Packages** and make sure the package is installed.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/salesforce-billing-installed-package.7161b4f6380a235ad5c05b715b451687.png)\n\nSalesforce installed packages\n\n## Install Stripe Connector for Salesforce Billing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nAfter you’ve installed both prerequisite packages, you can install the **Stripe Connector for Salesforce CPQ & Billing** managed package. Use the links below to install the package into your Salesforce organization or contact your Stripe representative to request the latest version:\n\n[Sandbox](https://test.salesforce.com/packaging/installPackage.apexp?p0=04t6g000008OXDw)\n\n[Production](https://login.salesforce.com/packaging/installPackage.apexp?p0=04t6g000008OXDw)\n\nYou may be prompted to log into your Salesforce org if you haven’t done so previously.\n\nMake sure **Install for Admins Only** is selected, then click **Install**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/stripe-salesforce-admins-only.ce050e830280859a49789029a91a0942.png)\n\nThe Stripe for Salesforce Billing installation process\n\nYou’ll be asked to approve access to and from third-party websites. Check the **Grant Access** checkbox and click **Continue**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/stripe-salesforce-third-party-access.3812aa661f1a6193c160878339cdcc8b.png)\n\nGrant third-party access to Stripe\n\nYou’ll receive an email telling you **Stripe for Salesforce Billing** is installed. To verify, navigate to **Setup > Apps > Packaging > Installed Packages** and make sure the package is installed.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/stripe-salesforce-installed-packages.36cc041c350eef6ecc1ed6d451e31f8f.png)\n\nSalesforce installed packages list",
  "title": "Installing Stripe for Salesforce Billing | Stripe Documentation",
  "description": "Learn how to install Stripe for Salesforce Billing including the prerequisites.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/salesforce-commerce-cloud/operations-and-maintenance",
  "markdown": "# Stripe LINK Cartridge Operations and Maintenance\n\n## Learn how to operate and maintain the Stripe LINK cartridge.\n\n## Data storage![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Stripe LINK cartridge extends Commerce Cloud to store several data points.\n\nCustomer profile: Stripe Customer ID, used to retrieve information about the customer’s record in your Stripe account.\n\n*   `stripeCustomerID(string)` - Store Stripe Customer ID\n\nOrder/basket custom attributes:\n\n*   `stripePaymentIntentID(String)` - Store PaymentIntent ID\n*   `stripeIsPaymentIntentInReview(Boolean)` - Store PaymentIntent in review\n\nPayment transaction custom attributes:\n\n*   `stripeChargeId(string)` - Store Charge ID\n*   `stripeChargeOutcomeData(text)` - Store Charge outcome data\n*   `stripeClientSecret(string)` - Store client secret\n*   `stripeJsonData(text)` - Store webhook JSON data\n*   `stripeOrderNumber(number)` - Store order number\n*   `stripeSourceCanCharge(boolean)` - Store if Stripe Source can be charged\n*   `stripeSourceId(string)` - Store Stripe Source ID\n\nPayment transaction custom attributes:\n\n*   `stripeChargeId(string)` - Store Charge ID\n*   `stripeCardID(string)` - Store card ID\n*   `stripeCustomerID(string)` - Store Customer ID\n*   `stripeDefaultCard(boolean)` - Store Stripe default card\n*   `stripeClientSecret(string)` - Store client secret\n*   `stripePRUsed(boolean)` - Store payment request button used\n*   `stripeSavePaymentInstrument(boolean)` - Store save payment instrument\n*   `stripeSourceID(string)` - Store Stripe Source ID\n\nCustom objects: The custom objects are listed in the Business Manager. Navigate to **Merchant Tools > Custom Objects > Custom Objects** to see the list of custom objects.\n\n*   `StripeWebhookNotifications`\n\n## Availability![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRefer to the [Stripe service level agreement](https://stripe.com/legal) to determine specific uptimes for the service. In case the service fails, no failover exists to allow transactions to proceed. Users receive a meaningful error message in this case.\n\n## Failover and recovery process ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf the Stripe service is unavailable, the user won’t be able to check out. You can track the service availability in SFCC using the Service Status.\n\n## Support![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you experience problems or have recommendations for improvements, please contact [Stripe Support](https://support.stripe.com/).\n\n## Upgrading the LINK cartridge![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBefore you upgrade, we recommend:\n\n*   Backing up your files and any other custom dependencies\n*   Installing the latest version from [LINK Marketplace](https://www.salesforce.com/products/commerce-cloud/partner-marketplace/partners/stripe/) in your test environment\n*   Testing the frontend UI and backend data integration\n*   Keeping a copy of any customizations you made to the module’s original code\n*   Porting over any customizations you made to the module’s code after upgrading and resolving any potential conflicts",
  "title": "Stripe LINK Cartridge Operations and Maintenance | Stripe Documentation",
  "description": "Learn how to operate and maintain the Stripe LINK cartridge.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/salesforce-billing/configuration",
  "markdown": "# Configure Stripe Connector for Salesforce Billing\n\n## Learn how to configure Stripe Connector for Salesforce Billing.\n\n## Assign permission sets![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis section guides you through setting up the **Permission Sets** that are necessary to use all three managed packages.\n\nNavigate to **Setup > Users > Permission Sets**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/salesforce-permission-sets.19fd69c9293ef680330abf05a25b31a9.png)\n\nThe Salesforce Permission Sets top-level view\n\nFor all admin users in your org, assign the following permission sets: **Salesforce Billing Admin**, **Salesforce CPQ Admin**, and **Stripe Payment Gateway Admin**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/set-permission-sets.78e1d12c36ddac5574674297177f0fda.png)\n\nProperly configured Admin Permission Sets\n\nFor all **standard users** that will process payments in your organization, assign the following permission sets: **Salesforce CPQ User** and **Stripe Payment Gateway User**. For Salesforce Billing permissions, follow the [Salesforce Billing Permissions Requirements](https://help.salesforce.com/s/articleView?id=sf.blng_profile_permissions.htm&type=5) documentation to manually provide standard users the permissions they need.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/non-admin-set-permission-sets.236dce83fc12446d8d52fed7fc11c387.png)\n\nProperly configured User Permission Sets\n\n## Assign page layouts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis section shows how to assign the correct **Page Layouts** for your users. Each page layout must contain all the base information and actions that you will need to go through the payment processing flows.\n\n### Opportunity page layout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNavigate to **Setup > Object Manager** and click the **Opportunity** object.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/object-manager-opportunity.a3117d0f572a9612e41a8c36d9479a6f.png)\n\nOpportunity in the Salesforce Object Manager\n\nClick the **Page Layouts** tab and click **Page Layout Assignment**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/opportunity-page-layouts.cdf0965f46dcb93fc2d8128fcd3448b6.png)\n\nOpportunity object Page Layouts\n\nClick **Edit assignment**, set the **Standard User** and **System Administrator** profiles to view the **CPQ Opportunity Layout**, and click **Save**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/set-opportunity-page-layouts.3a2c7be43b378b7ea4653663eb6632b7.png)\n\nOpportunity object Page Layouts\n\n### Account page layout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNavigate to **Setup > Object Manager** and click the **Account** object.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/object-manager-account.cfdfb4f7ec9452096966b443f9820907.png)\n\nAccount in the Salesforce Object Manager\n\nClick the **Page Layouts** tab and click **Page Layout Assignment**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/account-page-layouts.669295a3085521ff131ef9b292cd4b9f.png)\n\nAccount object Page Layouts\n\nClick **Edit assignment**, set the **Standard User** and **System Administrator** profiles to view the **Billing Account Layout**, and click **Save**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/set-account-page-layouts.f7347970b424b946ea5a4cb64765fe81.png)\n\nAccount object Page Layouts\n\n### Order page layout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNavigate to **Setup > Object Manager** and click the **Order** object.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/object-manager-order.bcf51650956642c8b4292cbadcd3da76.png)\n\nOrder in the Salesforce Object Manager\n\nClick the **Page Layouts** tab, and click **Page Layout Assignment**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/order-page-layouts.1ba7f916e6be6f05f43cd9846ebb759b.png)\n\nOrder object Page Layouts\n\nClick **Edit assignment**, set the **Standard User** and **System Administrator** profiles to view the **Billing Order Layout**, and click **Save**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/set-order-page-layouts.43b0ebd8a306c2e0673521a175a7dd21.png)\n\nOrder object Page Layouts\n\n### Order Product page layout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNavigate to **Setup > Object Manager** and click the **Order Product** object.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/object-manager-order-product.774f45a780b9a25e256450f905a8f7fd.png)\n\nOrder [Product](https://docs.stripe.com/api/products \"Products\") in the Salesforce Object Manager\n\nClick the **Page Layouts** tab, and click **Page Layout Assignment**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/order-product-page-layouts.5c8dbc5ebc011a3727b964d2c73c43b7.png)\n\nOrder Product object Page Layouts\n\nClick **Edit assignment**, set the **Standard User** and **System Administrator** profiles to view the **Billing Order Product Layout**, and click **Save**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/set-order-product-page-layouts.bd1d43cf44f58947aca57fc0154ea81e.png)\n\nOrder Product object Page Layouts\n\n### Product page layout![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nNavigate to **Setup > Object Manager** and click the **Product** object.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/object-manager-product.6786d5addf8fe59643048c36a5ee810a.png)\n\nProduct in the Salesforce Object Manager\n\nClick the **Page Layouts** tab, and click **Page Layout Assignment**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/product-page-layouts.ded4201125755efa40cab1ce1badba28.png)\n\nProduct object Page Layouts\n\nClick **Edit assignment**, set the **Standard User** and **System Administrator** profiles to view the **Billing Product Layout**, and click **Save**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/set-product-page-layouts.237b8eca522e212f8eeecdbf239de0c5.png)\n\nProduct object Page Layouts\n\n## Additional configuration steps![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThis section guides you through the final steps for the **Stripe Connector for Salesforce CPQ & Billing** to function properly on your organization. It consists of adding a few **buttons/actions** to page layouts, as well as adding new **picklist** values to picklist fields.\n\n### Add a refund action to Payment Method objects![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe **Refund UI** flow is packaged with Salesforce Billing, but it’s not available in the default configuration. Use the following steps to add the **Refund** action to the **Payment Page Layout**.\n\nNavigate to **Setup > Object Manager** and click the **Payment** object.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/object-manager-payment.8b35572c5abd063adced3a80c05be18f.png)\n\nPayment in the Salesforce Object Manager\n\nClick the **Page Layouts** tab, and click **Payment Layout**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/payment-page-layouts.398e352bb0ba598e1f43790095bb14fc.png)\n\nPayment object Page Layouts\n\nIn the pallete, click **Mobile & Lightning Actions**, drag the **Refund** action to the page layout (under the **Salesforce Mobile and Lightning Experience Actions** section), and click **Save**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/set-payment-page-layouts.fed8e1e250405d1e559d0ef2ec82342c.png)\n\nPayment object Page Layouts\n\n### Add a verify action to Payment Method objects![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nACH payment methods require the extra step of verifying the bank account. Salesforce Billing doesn’t have this capability, but it’s available in the Stripe for Salesforce Billing managed package. Use the following steps to add the **Verify** action to the **Payment Method Page Layout**.\n\nNavigate to **Setup > Object Manager** and click the **Payment Method** object.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/object-manager-payment-method.0b762f741509830b091dd9d81c0ca566.png)\n\nPayment Method in the Salesforce Object Manager\n\nClick the **Page Layouts** tab, and click **Payment Method Layout**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/payment-method-page-layouts.194f4f9716b140b7c606906e8b6a23d5.png)\n\nPayment Method object Page Layouts\n\nIn the pallete, click **Mobile & Lightning Actions**, drag the **Verify** action to the page layout (under the **Salesforce Mobile and Lightning Experience Actions** section), and click **Save**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/set-payment-method-page-layouts.2daec8b16ba3d6d393147191a1d0187b.png)\n\nPayment Method object Page Layouts\n\nThe **Stripe Connector for Salesforce CPQ & Billing** comes with its own flow for adding a new ACH Payment Method. The following steps will add the **New ACH Payment Method Button** to the Billing Account Page Layout.\n\nNavigate to **Setup > Object Manager** and click the **Account** object.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/object-manager-account.cfdfb4f7ec9452096966b443f9820907.png)\n\nAccount in the Salesforce Object Manager\n\nClick the **Page Layouts** tab, then click **Billing Account Layout**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/billing-account-page-layouts.9b1d25643e978f245951d660f2ecf78f.png)\n\nBilling Account object Page Layouts\n\nScroll down to the **Payment Methods Related List** and click the **wrench icon**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/billing-account-edit-layout.bf51c9be480c30c0bdabb6b1e5f596e3.png)\n\nEditing the Billing Account page layout\n\n1.  In the **Buttons section**, click the **plus icon**.\n2.  in the **Custom Buttons** sub-section, add the **New Payment Method ACH** to the **Selected Buttons** side.\n3.  Click **OK** and **Save** in the pallet.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/billing-account-buttons.22384b0168e6a821ce17a3fefa8ad388.png)\n\nEditing the Billing Account buttons\n\n### Add the Individual and Company bank account types on Payment Method objects![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe **Stripe API** requires you to pass a **bank account type** when creating a new **ACH** payment method. Use the following steps to add **Individual** and **Company** as bank account types in Salesforce.\n\nNavigate to **Setup > Object Manager** and click the **Payment Method** object.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/object-manager-payment-method.0b762f741509830b091dd9d81c0ca566.png)\n\nPayment Method in the Salesforce Object Manager\n\nClick the **Fields & Relationships** tab and click **Bank Account Type**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/payment-method-bank-account-types.1869efd334fefa2d7173b47d0072f210.png)\n\nBank Account types in the Salesforce Object Manager\n\nScroll down to the **Values** list and click **View Bank Account Type Value Set**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/bank-account-types-view-set.47611986be4c0191dce1fffac18f7c7e.png)\n\nViewing existing bank account types\n\nClick **New**\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/Salesforce-Click-New.542179d959948bea9efa446debff61c4.png)\n\nClick New\n\nAdd “Individual” and “Company” in the text field, select the **Add the new picklist values to all Record Types** checkbox, and click **Save**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/bank-account-types-save.31dcfbd0384a84e0f29961ac74185fc1.png)\n\nAdding new types of bank accounts\n\n### Add Stripe as a Payment Gateway field type picklist value![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou need to set up **Stripe** as a valid payment gateway to be used in **Salesforce Billing**. The following steps add **Stripe** as a **Gateway Type** for the **Payment Gateway** object.\n\nNavigate to **Setup > Object Manager** and click the **Payment Gateway** object.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/object-manager-payment-gateway.87a405cc173cb5ef1bb4a0e5843af2d7.png)\n\nPayment Gateway in the Salesforce Object Manager\n\nClick the **Fields & Relationships** tab and click **Gateway Type**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/object-manager-payment-gateway-type.70eaa6d002bbd002b389855f4b365cf8.png)\n\nPayment Gateway in the Salesforce Object Manager\n\nScroll down to the **Values** list and click **View Gateway Type Value Set**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/payment-gateway-types-view-set.68e406efd033b8f58ac1099c5f2bc7bd.png)\n\nViewing existing bank account types\n\nClick **New**\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/Salesforce-Click-New-PG.c5a26fb2af4caa4f59203fe712d857c6.png)\n\nAdding a new payment gateway Click Ok\n\nAdd **Stripe** into the text field, select the **Add the new picklist values to all Record Types** checkbox, and click **Save**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/payment-gateway-types-save.4c8907641b011bbb1ac0039376b77bd2.png)\n\nAdding a new payment gateway\n\n## Stripe Payment Gateway setup![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe final step to configure **Stripe Connector for Salesforce CPQ & Billing** is to go through the **Setup Assistant**. This is an app that comes with the managed package, and authorizes your Salesforce organization to be able to use the **Stripe Payment Gateway**.\n\nClick the **App Launcher** icon.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/salesforce-app-launcher.3e919f3259e2f134e2ce6b8b7fe54cad.png)\n\nSalesforce App Launcher\n\nIn the App Launcher, click the **Stripe Payment Gateway Setup** app.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/stripe-payment-gateway-setup-app-launcher.2410be3f45a06f15c9d900943ac5908c.png)\n\nSalesforce App Launcher\n\nClick **Get Started**\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/Stripe-Get-Started.10c17935a1e18a741ce257be0e238479.png)\n\nSalesforce App Launcher Get Started\n\nIf you’re ready to use Stripe for payment processing, you can toggle **Live Mode** on. Otherwise, you can stay in **Test Mode** to test the payment processing. When you make your decision, click **Authorize**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/Stripe-Click-Authorize.fe5bd11e14e56ad0f745e22739fb9910.png)\n\nSalesforce App Launcher Authorize\n\nYou’ll be prompted to log into your Stripe account. Enter your Stripe credentials and complete the flow. After successfully logging in, you’ll be redirected to the **System Connections** page. If you’ve successfully authorized, you’ll see the green **Authorized** message. Click **Finish** to complete the setup of the Stripe Payment Gateway.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/stripe-payment-gateway-authorized.8b6b6ae12de6cab6433c761decb3d9b3.png)\n\nCompleted Stripe Payment Gateway setup\n\nYou can exit the app and start using the Stripe Connector for Salesforce CPQ & Billing.",
  "title": "Configure Stripe Connector for Salesforce Billing | Stripe Documentation",
  "description": "Learn how to configure Stripe Connector for Salesforce Billing.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/salesforce-billing/ach",
  "markdown": "# ACH Considerations for Salesforce Billing\n\n## Learn about the ACH considerations for using Stripe for Salesforce Billing and CPQ.\n\nUsing Stripe as a payment gateway for ACH means that you can’t create new ACH payment methods in the Payment Center UI for Accounts. The Payment Center flow charges the payment method immediately, but Stripe requires an added verification step when using a bank account for ACH payments. Because of this incompatibility, adding an ACH payment method from this screen will always fail.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/payment-center-failure.838fb323c26d9e1b79ad78acf9b744e0.png)\n\nCreating ACH payment methods in the Payment Center UI will always fail\n\nUse the [New Payment Method ACH](https://docs.stripe.com/connectors/salesforce-billing/configuration#add-an-ach-payment-method-button-to-the-related-list-on-account-objects) flow directly from the **Payment Method Related List** on the **Account** within Salesforce instead.",
  "title": "ACH Considerations for Salesforce Billing | Stripe Documentation",
  "description": "Learn about the ACH considerations for using Stripe for Salesforce Billing and CPQ.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/salesforce-billing/bestpractices",
  "markdown": "# Best practices for using Stripe with Salesforce Billing\n\n## Learn how to set up Stripe with Salesforce billing.\n\nUse the information in this guide to learn how to import data, use payment center, test cards in payment center, and set batch size for optimal performance.\n\n## Data import options![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can add payment methods using the quick action on the Payment Methods related list, which you can access from the Account record. If you need additional help, refer to the Installation and Configuration guide.\n\n## Data import scenarios![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can also add Stripe customer data in other ways, such as with a data import using information from Stripe or by using a custom script. If you use these options, you need to make sure that you have certain values present in the Salesforce records.\n\nSee the following data import scenarios, and use whichever one best fits your use case for importing data.\n\n[](#section-1)\n\nTo import customers and payment methods, the Salesforce Admin needs to do the following:\n\n1.  Import Customer records (required fields).\n    *   Account Name\n    *   Stripe [Customer](https://docs.stripe.com/api/customers/retrieve) ID\n2.  Import payment method records (required fields).\n    *   Payment Gateway record ID\n    *   Active checkbox set to True\n    *   Payment Gateway Token\n\n[](#section-2)\n\nTo import existing customers and payment methods, the Salesforce Admin needs to do the following:\n\n1.  Insert the Account record:\n    *   Because the Account records already exist in Salesforce, Account records updated with the Stripe [Customer](https://docs.stripe.com/api/customers/retrieve) ID. There are multiple ways to match to an existing Account (such as an ID or Account Name).\n2.  Import payment methods required fields.\n    *   Payment Gateway record ID\n    *   Active checkbox set to **True**\n    *   Payment Gateway Token\n    *   Stripe [Customer](https://docs.stripe.com/api/customers/retrieve) ID\n\n[](#section-3)\n\nTo import only payment methods, the Salesforce Admin needs to do the following:\n\n1.  Import the required fields for payment methods.\n    *   Payment Gateway record ID\n    *   Active checkbox set to **True**\n    *   Payment Gateway Token\n\n[](#section-4)\n\nFrom Salesforce a user can create a payment in the payment center. The connector doesn’t support creating and charging Payment Methods simultaneously from the Payment Center.\n\nThis problem occurs when a new payment is entered, and save this payment for later use is selected.\n\n[](#section-5)\n\nStripe recommends setting the Payment creation batch size in Salesforce Billing to the upper limit, which is currently 70.\n\n1.  Navigate to Salesforce Setup and search for installed packages.\n2.  Click **Configure** next to the Salesforce Billing package.\n3.  Navigate to the **Payment** tab.\n4.  Adjust the Payment creation batch size as needed.",
  "title": "Best practices for using Stripe with Salesforce Billing | Stripe Documentation",
  "description": "Learn how to set up Stripe with Salesforce billing.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/plugins/stripe-connector-for-salesforce/configure-events",
  "markdown": "# Stripe for Salesforce Platform configure events guide\n\nStripe for Salesforce Platform allows for the automatic creation of webhooks inside of Stripe, and configures a listener for the Salesforce organization. These webhooks become records that are captured as [events](https://docs.stripe.com/api/events) for the [Customer object](https://docs.stripe.com/api/customers).\n\n1.  To configure **Stripe Events**, launch the Stripe Connector for Salesforce App wizard, navigate to **App Launcher > Stripe Universal Connector for Salesforce**\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_App.10a5208667229e897eb93dc0dfbb10c2.png)\n    \n2.  Select the **Stripe Account** to configure events on.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_EventSelectAccount.321dcb126c3c7c2b404fda439eee3719.png)\n    \n3.  Click **All Webhook Events**.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_EventAllWebhookEvents.258622d891a94d15e8489f12d15d8741.png)\n    \n4.  Select the Stripe Object to enable events for by clicking on the **Stripe Object** dropdown.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_EventStripeObject.aac82fa3b3dc146ed6e1c3c4abdeea12.png)\n    \n5.  Toggle the Events to listen for, and click **Save**.\n6.  Login to the **Stripe Dashboard** for the account the events were enabled for.\n7.  In the **Stripe Dashboard** Navigate to **Developers > Webhooks**. This will show newly created **Hosted Endpoint**.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_EventInStripe.4036ead39f5bd8e466c5f948b029d382.png)\n    \n\n## Use Stripe Event DLM operations![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCapture real-time Stripe Events via Webhooks and store them in the custom object “Stripe Events” within Salesforce. Utilize standard Data Lifecycle Management (DLM) triggers to automate interactions between Stripe and Salesforce, leveraging record trigger flows and APEX triggers.\n\n### Create a Salesforce flow trigger![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo create a **record trigger** Salesforce flow for the **Stripe Events**, complete the following steps:\n\n1.  In Salesforce From Setup, in the Quick Find box, enter Flow, and then select Flows.\n2.  Click **New Flow**.\n3.  Click **Record-Triggered Flow**, and then click Create.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_FlowCreate.bf147bde921adf3fba9aee0ef4a79e17.png)\n    \n4.  For **Select Object** select **Stripe Event**(stripeGC\\_\\_Stripe\\_Event\\_\\_c).\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_FlowObjectSelect.62f89fc8bb2f36aa43acf2481eafa2b2.png)\n    \n5.  Under **Set Entry Conditions** use stripeGC\\_\\_Event\\_Name\\_\\_c to define what event from Stripe this Salesforce Flow is for. Stripe Event Name **customer.created** is used for this example.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_FlowEntryConditions.39141458e11af42d957cddfd91a0596c.png)\n    \n6.  Click **Done**. The **Stripe Connector for Salesforce Platform** has **cast to** flow actions. These actions are part of the package in Salesforce.\n\n## Stripe Events Object and Location ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThis Salesforce package comes with a Stripe Events custom object in order to capture Stripe webhooks. The Stripe Events object tab is found by navigating to **App Launcher > Stripe for Salesforce Platform Lightning app**. **Example Stripe Event Object**\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_EventObject.614ec28e8eac72bc7b63979d8678b06c.png)",
  "title": "Stripe for Salesforce Platform configure events guide | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/stripe-connector-for-salesforce/enablement",
  "markdown": "# Stripe Connector for Salesforce Platform\n\n## Video enablement ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDive into our series of informative [videos](https://docs.stripe.com/plugins/stripe-connector-for-salesforce/videos) to learn more about how to integrate Stripe with Salesforce.\n\n## Usage examples ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nCheck out our [GitHub repository](https://github.com/stripe/salesforce-connector-examples) to see the example code for frequently requested integrations.\n\n*   **Sync objects:** Learn how to sync various objects.\n*   **Create payment pages:** Quickly set up payment pages.\n*   **Generate invoices from opportunities:** Transform opportunities into Stripe invoices.\n\n## Code examples ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe for Salesforce Platform has two primary ways to call Stripe from Salesforce. The first is to use invocations of classes directly, and the other is to use an agnostic method. The agnostic method mimics making a raw API call while leveraging the integrations built in authentication.\n\n*   [Examples using invocations](https://docs.stripe.com/connectors/stripe-connector-for-salesforce/enablement/code-examples-invocations)\n*   [Examples using the AgnosticInvocable](https://docs.stripe.com/connectors/stripe-connector-for-salesforce/enablement/code-examples-agnostic)",
  "title": "Stripe Connector for Salesforce Platform | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/plugins/stripe-connector-for-salesforce/configuration",
  "markdown": "# Stripe for Salesforce Platform Configuration\n\nThe Stripe for Salesforce Platform checks to prevent recursive actions. A logical loop occurs when one set of resources repeatedly detects and responds to updates from another set. For instance, if a flow listens to Stripe’s `customer.updated` events and then updates a Salesforce `Account`, but another flow is set up to detect updates to the Salesforce `Account` and then updates a Stripe customer, it creates a logical loop. This loop would run indefinitely.\n\n## Default Events excluded from recursion detection![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n|     |     |     |\n| --- | --- | --- |\n| charge.captured | charge.expired | charge.failed |\n| charge.pending | charge.refunded | charge.succeeded |\n| charge.updated | credit\\_note.created | credit\\_note.updated |\n| credit\\_note.voided | invoice.created | invoice.deleted |\n| invoice.finalization\\_failed | Invoice.finalized | invoice.marked\\_uncollectible |\n| invoice.paid | invoice.payment\\_action\\_required | invoice.payment\\_failed |\n| invoice.payment\\_succeeded | invoice.sent | invoice.upcoming |\n| invoice.updated | invoice.voided | invoiceitem.created |\n| invoiceitem.deleted | invoiceitem.updated | issuing\\_card.created |\n| issuing\\_card.updated | issuing\\_cardholder.created | issuing\\_cardholder.updated |\n| issuing\\_dispute.closed | issuing\\_dispute.created | issuing\\_dispute.funds\\_reinstated |\n| issuing\\_dispute.submitted | issuing\\_dispute.updated | issuing\\_transaction.created |\n| issuing\\_transaction.updated | mandate.updated | order.created |\n| order.payment\\_failed | order.payment\\_succeeded | order.updated |\n| payment\\_intent.amount\\_capturable\\_updated | payment\\_intent.canceled | payment\\_intent.created |\n| payment\\_intent.partially\\_funded | payment\\_intent.payment\\_failed | payment\\_intent.processing |\n| payment\\_intent.requires\\_action | payment\\_intent.succeeded | payment\\_link.created |\n| payment\\_link.updated | payment\\_method.attached | payment\\_method.automatically\\_updated |\n| payment\\_method.detached | payment\\_method.updated | payout.canceled |\n| payout.created | payout.failed | payout.paid |\n| payout.updated | quote.accepted | quote.canceled |\n| quote.created | quote.finalized | setup\\_intent.canceled |\n| setup\\_intent.created | setup\\_intent.requires\\_action | setup\\_intent.setup\\_failed |\n| setup\\_intent.succeeded | customer.source.created | customer.source.deleted |\n| customer.source.expiring | customer.source.updated | source.canceled |\n| source.chargeable | source.failed | source.mandate\\_notification |\n| source.refund\\_attributes\\_required |\n\n### Recursion detection configuration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can include and exclude specific events from recursion detection. If you’re an admin, you can modify these events in your settings by configuring recursion detection.\n\nThe **Recursion Detection Configuration** can be accessed by following these steps:\n\n1.  Navigate to **Setup** > **Custom Code** > **Custom Metadata Types**.\n2.  Under **Recursion Detection Configuration**, click **Manage Records**.\n3.  Next to **Default**, click **Edit**.\n\nWithin this configuration, an admin can add either **Included Events** or **Excluded Events**.\n\n## Configure sync preferences![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  To configure **Sync Preferences**, launch the Stripe Connector for Salesforce App wizard, navigate to **App Launcher > Stripe Universal Connector for Salesforce**\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_App.10a5208667229e897eb93dc0dfbb10c2.png)\n    \n2.  Click the **Sync Preferences** button.\n3.  Enable or disable **Enable Stripe Event Data Cleanup**.\n4.  Modify the **Maximum Stripe Event Records Retained (Count)**.\n5.  Enable or disable **Sync Log Records**.\n6.  Modify the **Maximum Sync Log Records Retained (Count)**.",
  "title": "Stripe for Salesforce Platform Configuration | Stripe Documentation",
  "description": null,
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/plugins/stripe-connector-for-salesforce/installation-guide",
  "markdown": "# Stripe for Salesforce Platform Installation Guide\n\n## Access the full Stripe platform from within Salesforce with low and no-code tools.\n\nIdentify what environment you want to install your app in. We provide separate installation options for test and production environments.\n\n*   To Install this Application from the Salesforce AppExchange , follow this [link](https://appexchange.salesforce.com/appxListingDetail?listingId=4dff0f8e-0b10-47c2-a3a3-f3905e7f7927). For users in Japan, [AppExchange Japan](https://appexchangejp.salesforce.com/appxListingDetail?listingId=a0N3u00000RgdoWEAR) is also available.\n\n1.  Login into the Salesforce organization you wish to install the package into.\n2.  After logging in, you’re directed to the installation page. Click **Continue** to begin the installation process.\n3.  We recommend installing **Install for Admins Only**. This option allows for controlling access and permissions after the package has been installed.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_AdminOnly.39c4e7785aaaacfa3a88ffd07b8d2aa1.png)\n    \n4.  **Approve Third-Party Access** check off the box and click **Continue** to start the package installation when the modal appears. As it states, this is to allow data to be sent back and forth between your Salesforce org and the Stripe PBO.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_3rdPartyAccess.f4fbd0b81b4316d943bb05bd522e07e8.png)\n    \n\n## Configure permission sets ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe package incorporates both the Stripe Connector Integration User and the Stripe Connector Data User permission sets. These sets enable different users within your organization to access specific application features.\n\n## Stripe Connector integration user ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Stripe Connector Integration User permission set must be assigned to any non-system administrator persona designated to manage setup log cleanup settings and event subscriptions. However, since system permissions are unable to be packaged due to limitations with Salesforce AppExchange apps. You must add additional permissions manually by cloning the permission set, in order for these users to access setup features.\n\n1.  **Clone Permission Set** To clone the permission set, navigate to **Setup > User > Permission Sets**.\n2.  Next to the **Stripe Connector Integration User** permission set, click **Clone**.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_PermissionSetClone.6ebe75de9179b7a3f83f748342ff13a7.png)\n    \n3.  Enter a new unique **Label** and **API Name**, then click **Save**.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_PermissionSetLable.0a61995ecec91fb6d1dc5ad4f0cb77a9.png)\n    \n4.  **Modify Permission Set** Navigate to **Setup > User > Permission Sets** and select your cloned permission set.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_PermissionSetClone.6ebe75de9179b7a3f83f748342ff13a7.png)\n    \n5.  Select **System Permissions**.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_PermissionSetPermissions.39daa8bb6675b52ceccaea30ba7ea353.png)\n    \n6.  Click **Edit** then select the **Download AppExchange Packages** permissions, and click **Save**.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_PermissionSetPermissionsDownload.65460764a93765adacf3b4b015c22fb0.png)\n    \n7.  Click **Save** again to confirm changes.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_PermissionSetPermissionsSave.d84d2adfacdd78fe185c4048907f1f84.png)\n    \n8.  **Assign Permission Set** to user(s) by navigating to **Setup > User > Permission Sets**.\n9.  Select your cloned permission set.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_PermissionSetClone.6ebe75de9179b7a3f83f748342ff13a7.png)\n    \n10.  From the Permission Set Overview page, click **Manage Assignments**.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_PermissionManageAssignments.185046c3016d23886673fdb213a096fe.png)\n    \n11.  Click **Add Assignments**.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_PermissionAddAssignments.bb1994dec3a8a6aad6c292b870bcaedb.png)\n    \n12.  Check the box next to the user(s) to assign permission set to and click **Next** at the bottom of the page.\n\n#### Stripe Connector data user ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe Stripe Connector Data User has the ability to perform operations on the `Stripe_Event__c` object records, which the Webhook Handler class creates. To provide non-admin users access to Stripe Event records, you must assign a data user permission set to their user profile.\n\n1.  Assign a permission set to a user by navigating to **Setup > User > Permission Sets**.\n2.  Select the **Stripe Connector Data User** permission set.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_PermissionSetPermissions_data.1ea42a4f84910f5186a9f5e411084ff1.png)\n    \n3.  From the **Permission Set Overview** page, click **Manage Assignments**.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_PermissionManageAssignments_data.0f15bdcc0b0e5d6a38d5082184a46d81.png)\n    \n4.  Click **Add Assignments**.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_PermissionAddAssignments_data.5ceefddb997ec6f16fe68ee969447979.png)\n    \n5.  Check the box next to a user to assign a permission set to them\n6.  Click **Next** at the bottom of the page.\n\n## Stripe for Salesforce Platform setup wizard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nWhen users first access the Stripe Connector for Salesforce app, they must complete an Initial Setup flow. This guided wizard flow helps users authorize an org, add a Stripe account, and configure sync preferences. After completing the initial setup, the Account Management tab becomes the users’ landing page. Here, they can add more Stripe accounts or navigate to other tabs to edit configuration settings.\n\n### Add a Stripe account using the setup wizard![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Launch the initial setup wizard, and navigate to **App Launcher > Stripe Universal Connector for Salesforce**\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_App.10a5208667229e897eb93dc0dfbb10c2.png)\n    \n2.  Click the **Get Started** button.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_AppGetStarted.78464fbff085da988de93c2d6de890d6.png)\n    \n3.  Click the **Authorize** button.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_AppGetStartedAuthorize.fe176d8502ff431cb46fe4bcb5ab59fb.png)\n    \n4.  After the new window opens, click **Allow** to grant access for your org.\n5.  Click the **Next** button.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_AppGetStartedAuthorizeNext.a696556bd86ed09857ef170e9032d39d.png)\n    \n6.  Select an option for adding an account, then click the **Log in to Stripe** button.\n\n*   **Test Mode**: Launches a window displaying your Stripe test mode accounts.\n*   **Live Mode**: Launches a window displaying your Stripe live mode accounts.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_AppGetStartedAuthorizeAccount.e51b1da06f1caf0065de32e6241125ad.png)\n    \n\n1.  Log into Stripe and select the account you wish to add.\n2.  After you select an account, click the **Next** button.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_AppGetStartedAuthorizeAccountNext.ded02a21b3970c98af817266ea1e30fe.png)\n    \n3.  (Optional) Click the **toggle** if you wish to enable the Stripe Events and Sync Logs cleanup.\n4.  If the cleanup trigger is active, enter the numerical value in the input box to set the desired amount of records to be retained in the Salesforce org.\n5.  Click the **Next** button.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_AppGetStartedRecordClean.e53021fe6e2fd9ff9270215033c35f00.png)\n    \n6.  Click the **Stripe API Version** dropdown.\n7.  Select the **Stripe API** version to install. If you’re unsure what version to install, select the latest version.\n8.  Click the **Install Package** button, which launches another window that you need to use to complete the installation of the extension package.\n9.  Click **Finish**\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/SFU_AppGetStartedAPIInstall.974d03ade65d799799f7b363c37d3b71.png)",
  "title": "Stripe for Salesforce Platform Installation Guide | Stripe Documentation",
  "description": "Access the full Stripe platform from within Salesforce with low and no-code tools.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/plugins/stripe-connector-for-salesforce/videos",
  "markdown": "# Stripe for Salesforce Platform enablement videos\n\n[Skip to content](#main-content)\n\n[\n\nCreate account\n\n\n\n](https://dashboard.stripe.com/register)\n\nor\n\n[\n\nSign in\n\n\n\n](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fplugins%2Fstripe-connector-for-salesforce%2Fvideos)\n\n[](https://docs.stripe.com/)\n\nSearch the docs or ask a question\n\n/\n\n[Create account](https://dashboard.stripe.com/register)\n\n[\n\nSign in\n\n\n\n](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fplugins%2Fstripe-connector-for-salesforce%2Fvideos)\n\n[\n\nGet started\n\n\n\n](https://docs.stripe.com/get-started)\n\n[\n\nPayments\n\n\n\n](https://docs.stripe.com/payments)\n\n[\n\nFinance automation\n\n\n\n](https://docs.stripe.com/finance-automation)\n\n[\n\nBanking as a service\n\n\n\n](https://docs.stripe.com/financial-services)\n\n[\n\nDeveloper tools\n\n\n\n](https://docs.stripe.com/development)\n\n[\n\nNo-code\n\n\n\n](https://docs.stripe.com/no-code)\n\n[\n\nGet started\n\n\n\n](https://docs.stripe.com/get-started)\n\n[\n\nPayments\n\n\n\n](https://docs.stripe.com/payments)\n\n[\n\nFinance automation\n\n\n\n](https://docs.stripe.com/finance-automation)\n\n[\n\nGet started\n\n\n\n](https://docs.stripe.com/get-started)\n\n[\n\nPayments\n\n\n\n](https://docs.stripe.com/payments)\n\n[\n\nFinance automation\n\n\n\n](https://docs.stripe.com/finance-automation)\n\n[\n\nBanking as a service\n\n\n\n](https://docs.stripe.com/financial-services)\n\n[\n\nDeveloper tools\n\n\n\n](https://docs.stripe.com/development)\n\n[Overview](https://docs.stripe.com/development)\n\nDeveloper tools\n\nSDKs\n\nAPI\n\nTesting\n\nWebhooks\n\nEvent Destinations\n\nStripe CLI\n\nStripe Shell\n\nDeveloper Dashboard\n\nWorkbench\n\n[Stripe for Visual Studio Code](https://docs.stripe.com/stripe-vscode \"Stripe for Visual Studio Code\")[File uploads](https://docs.stripe.com/file-upload)[Feedback](https://docs.stripe.com/dev-tools-csat \"Tell us about your experience with Stripe developer tools\")\n\nSecurity\n\nSecurity\n\nExtend Stripe\n\nStripe Apps\n\nStripe Connectors\n\n[Overview](https://docs.stripe.com/connectors \"Use connectors to integrate with Stripe and its products\")\n\nIntegrate a connector\n\n[Adobe Commerce](https://docs.stripe.com/connectors/adobe-commerce \"Learn about the Stripe Connector for Adobe Commerce\")\n\n[Mirakl](https://docs.stripe.com/connectors/mirakl \"Learn about the Stripe Connector for Mirakl\")\n\n[NetSuite](https://docs.stripe.com/connectors/netsuite/overview \"Learn about the Stripe Connector for NetSuite\")\n\n[PrestaShop](https://docs.stripe.com/connectors/prestashop \"Learn about the Stripe Connector for PrestaShop\")\n\n[Salesforce](https://docs.stripe.com/connectors/salesforce \"Learn about a Stripe Connector for Salesforce\")\n\n[Stripe Connector for Salesforce Platform](https://docs.stripe.com/connectors/stripe-connector-for-salesforce/overview \"Integrate the Stripe Connector for Salesforce\")\n\n[Installation](https://docs.stripe.com/plugins/stripe-connector-for-salesforce/installation-guide \"Install the Stripe Connector for Salesforce Platform\")\n\n[Configure events](https://docs.stripe.com/plugins/stripe-connector-for-salesforce/configure-events \"Configure events and webhooks\")\n\n[Enablement](https://docs.stripe.com/connectors/stripe-connector-for-salesforce/enablement \"Enable the Stripe Integration Builder for Salesforce\")\n\nEnablement videos\n\n[AgnosticInvocable code](https://docs.stripe.com/connectors/stripe-connector-for-salesforce/enablement/code-examples-agnostic \"Example code using the AgnosticInvocable\")\n\n[Class Invocables code](https://docs.stripe.com/connectors/stripe-connector-for-salesforce/enablement/code-examples-invocations \"Example code using class invocables\")\n\n[Configuration](https://docs.stripe.com/plugins/stripe-connector-for-salesforce/configuration \"Configure Stripe for the Salesforce Platform\")\n\n[Stripe Billing for Salesforce CPQ](https://docs.stripe.com/connectors/salesforce-cpq/overview \"Create and manage subscriptions on Stripe without leaving Salesforce\")\n\n[Salesforce Billing](https://docs.stripe.com/connectors/salesforce-billing \"Create and manage subscriptions on Stripe without leaving Salesforce\")\n\n[Salesforce Order Management](https://docs.stripe.com/connectors/salesforce-order-management \"Salesforce Order Management\")\n\n[Salesforce B2C Commerce](https://docs.stripe.com/connectors/salesforce-commerce-cloud \"Salesforce B2C Commerce Cloud Connector\")\n\n[SAP](https://docs.stripe.com/connectors/sap-digital-payments \"Learn how to add Stripe payment capabilities to SAP Digital Payment Add-on\")\n\n[Shopware 6](https://docs.stripe.com/connectors/shopware6 \"Learn about the Stripe Connector for Shopware 6\")\n\n[Stripe Tax for WooCommerce](https://docs.stripe.com/connectors/woocommerce \"Learn about the Stripe Tax Connector for WooCommerce\")\n\nPartner connectors\n\n[Build your own connector](https://docs.stripe.com/building-plugins)\n\nPartners\n\n[Partner ecosystem](https://docs.stripe.com/partners \"Learn about the Stripe Partner Program\")[Partner certification](https://docs.stripe.com/partners/training-and-certification \"Become a Stripe-certified architect or developer\")\n\n[Home](https://docs.stripe.com/ \"Home\")[Developer tools](https://docs.stripe.com/development \"Developer tools\")[Stripe Connectors](https://docs.stripe.com/connectors \"Stripe Connectors\")[Salesforce](https://docs.stripe.com/connectors/salesforce \"Salesforce\")[Stripe Connector for Salesforce Platform](https://docs.stripe.com/connectors/stripe-connector-for-salesforce/overview \"Stripe Connector for Salesforce Platform\")[Enablement](https://docs.stripe.com/connectors/stripe-connector-for-salesforce/enablement \"Enablement\")\n\n## Learn how to use Stripe with a Salesforce Platform.\n\n[](https://youtu.be/sixZCUCJnsA \"Install the Stripe for Salesforce Platform\")\n\n[Install the Stripe for Salesforce Platform](https://youtu.be/sixZCUCJnsA \"Install the Stripe for Salesforce Platform\")\n\n[\n\nLearn how to install the Stripe for Salesforce Platform, including its Connector and the latest API version.\n\n](https://youtu.be/sixZCUCJnsA \"Install the Stripe for Salesforce Platform\")\n\n[](https://youtu.be/IniG40ENN7Q \"Sync Objects from Stripe to Salesforce\")\n\n[Sync Objects from Stripe to Salesforce](https://youtu.be/IniG40ENN7Q \"Sync Objects from Stripe to Salesforce\")\n\n[\n\nLearn how to sync Stripe objects using Salesforce Flow.\n\n](https://youtu.be/IniG40ENN7Q \"Sync Objects from Stripe to Salesforce\")\n\n[](https://youtu.be/JS07wa5QtDQ \"How to add metadata to Stripe obejcts in Salesforce\")\n\n[How to add metadata to Stripe obejcts in Salesforce](https://youtu.be/JS07wa5QtDQ \"How to add metadata to Stripe obejcts in Salesforce\")\n\n[\n\nLearn how to add metadata to Stripe objects using Salesforce Flow.\n\n](https://youtu.be/JS07wa5QtDQ \"How to add metadata to Stripe obejcts in Salesforce\")\n\n[](https://youtu.be/5ZiL4GMCufU \"Utilize Stripe classes and parameters in Salesforce Flow\")\n\n[Utilize Stripe classes and parameters in Salesforce Flow](https://youtu.be/5ZiL4GMCufU \"Utilize Stripe classes and parameters in Salesforce Flow\")\n\n[\n\nUse Stripe classes and parameters within Salesforce, focusing on Checkout sessions and line items.\n\n](https://youtu.be/5ZiL4GMCufU \"Utilize Stripe classes and parameters in Salesforce Flow\")\n\n[](https://youtu.be/blNnCpRmats \"How to get Stripe classes and parameters from a Stripe Event\")\n\n[How to get Stripe classes and parameters from a Stripe Event](https://youtu.be/blNnCpRmats \"How to get Stripe classes and parameters from a Stripe Event\")\n\n[\n\nUse Stripe classes and parameters from a Stripe Event with Salesforce Flow, particularly focusing Stripe subscriptions and line items.\n\n](https://youtu.be/blNnCpRmats \"How to get Stripe classes and parameters from a Stripe Event\")\n\n[](https://youtu.be/mnKUlDwlquI \"How to create Stripe invoices from Salesforce opportunities\")\n\n[How to create Stripe invoices from Salesforce opportunities](https://youtu.be/mnKUlDwlquI \"How to create Stripe invoices from Salesforce opportunities\")\n\n[\n\nTutorial on how to create a Stripe Invoice from Salesforce Opportunities and opportunity line items.\n\n](https://youtu.be/mnKUlDwlquI \"How to create Stripe invoices from Salesforce opportunities\")\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Configure events](https://docs.stripe.com/plugins/stripe-connector-for-salesforce/configure-events)\n*   [Installation guide](https://docs.stripe.com/plugins/stripe-connector-for-salesforce/installation-guide)\n\nWas this page helpful?\n\nYesNo\n\nNeed help? [Contact Support](https://support.stripe.com/).\n\nJoin our [early access program](https://insiders.stripe.dev/).\n\nCheck out our [product changelog](https://stripe.com/blog/changelog).\n\nQuestions? [Contact Sales](https://stripe.com/contact/sales).\n\nPowered by [Markdoc](https://markdoc.dev/)\n\nSign up for developer updates:\n\nYou can unsubscribe at any time. Read our [privacy policy](https://stripe.com/privacy).",
  "title": "Stripe for Salesforce Platform enablement videos | Stripe Documentation",
  "description": "Learn how to use Stripe with a Salesforce Platform.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/salesforce-order-management/installation",
  "markdown": "# Install the Stripe Connector for Salesforce Order Management\n\n## Set up and configure the Stripe Connector.\n\n## Installation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse the following links to install the package into your Salesforce org. We recommend that you first install, set up, then test the app in a Salesforce sandbox environment before using it in your production org.\n\n*   [Production Package](https://login.salesforce.com/packagingSetupUI/ipLanding.app?apvId=04t6g000008Wod0)\n*   [Sandbox Package](https://test.salesforce.com/packagingSetupUI/ipLanding.app?apvId=04t6g000008Wod0)\n\nMake sure **Install for Admins Only** is selected, then click **Install**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/sfom-install.a95bc450897ae2c8fec49837590ce099.png)\n\nApprove access to and from third-party websites. Check the grant access checkbox and click **Continue**.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/sfom-3p-access.fea0d91a0e164d00b01c288cbe51475e.png)\n\nIf the installation takes time, you will receive an email telling you the package is installed.\n\nTo verify, navigate to **Setup > Apps > Packaging > Installed Packages** and make sure the package is installed.\n\n## Configuration![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInstructions in the following sections detail how to configure your integration.\n\n### Configure a Stripe Synchronous Payment Gateway Adapter![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Follow the instructions in step 3 of [Set Up a Synchronous Payment Gateway Adapter in Salesforce](https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_commercepayments_sync_adapter_setup.htm) to create a payment gateway provider. Here’s the set of values we recommend for the payload:\n    \n    `{ \"ApexAdapterId\": \"Output of this Query: SELECT Id FROM ApexClass WHERE Name IN ('StripeAdapter')\", \"DeveloperName\": \"StripeProvider\", \"MasterLabel\": \" StripeProvider\", \"IdempotencySupported\": \"No\", \"Comments\": \"Stripe Synchronous Payment Gateway Adapter\" }`\n    \n2.  Follow the instructions in step 4 of [Set Up a Synchronous Payment Gateway Adapter in Salesforce](https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_commercepayments_sync_adapter_setup.htm) to create a payment gateway record.\n    \n    Recommended values:\n    \n    | Field Label | Value |\n    | --- | --- |\n    | Name | SALESFORCE\\_PAYMENTS |\n    | Merchant Credential ID | Output of this query: `SELECT Id FROM NamedCredential WHERE DeveloperName = 'StripeAPI'` |\n    | Payment Gateway Provider | Output of the query (modify the query accordingly if your Stripe Synchronous Payment Gateway Provider is different than ‘StripeProvider’): `SELECT Id FROM PaymentGatewayProvider WHERE DeveloperName ='StripeProvider'` |\n    | Status | Active |\n    \n\n### Configure a Stripe Asynchronous Payment Gateway Adapter![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  Follow the instructions in [Set Up an Asynchronous Payment Gateway Adapter in Salesforce](https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_commercepayments_async_adapter_setup.htm) to configure the Stripe Asynchronous Payment Gateway Adapter (skip step 2 and 3 if you’ve already executed the same for the Stripe Synchronous Payment Gateway Adapter). To create an asynchronous Payment Gateway Provider (follow step 4 from the previously linked instruction). Here is the recommended set of values for the payload:\n    \n    `{ \"ApexAdapterId\": \"Output of this Query: SELECT Id FROM ApexClass WHERE Name IN (‘StripeAsyncAdapter’)\",   \"DeveloperName\": \"StripeAsyncAdapter\",   \"MasterLabel\": \" StripeAsyncAdapterProvider \",   \"IdempotencySupported\": \"No\",   \"Comments\": \"Stripe Asynchronous Payment Gateway Adapter\"   }`\n    \n2.  Follow the instruction from step 5 (Create a payment gateway record) in [Set Up an Asynchronous Payment Gateway Adapter in Salesforce](https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_commercepayments_async_adapter_setup.htm) to register the Stripe Asynchronous Payment Gateway record in Salesforce.\n    \n    Here are the recommended values for the fields to be inserted (if you’re creating a gateway record for the first time) or updated (if you have already created a gateway record while setting up the synchronous payment gateway adapter)\n    \n    | Field Label | Value |\n    | --- | --- |\n    | Name | SALESFORCE\\_PAYMENTS |\n    | Merchant Credential ID | Output of this query: `SELECT Id FROM NamedCredential WHERE DeveloperName = 'StripeAPI'` |\n    | Payment Gateway Provider | Output of the query (modify the query accordingly if your Stripe Synchronous Payment Gateway Provider is different than ‘StripeProvider’): `SELECT Id FROM PaymentGatewayProvider WHERE DeveloperName ='StripeAsyncAdapter'.` |\n    | Status | Active |\n    \n3.  Follow the instructions in step 6 to configure the webhook URL for Stripe. The typical format of the webhook URL is a publicly accessible, HTTPS URL. For example: https://mydomainname.my.salesforce-sites.com/subdomain/services/data/v\\[Replace\\_ME\\_version\\]/commerce/payments/notify%20?provider=<ID>\n    \n    `SELECT Id FROM PaymentGatewayProvider WHERE DeveloperName = ‘StripeAsyncAdapter’`\n    \n    \\[Replace\\_ME\\_version\\] with the API version of your org 49.0 and later\n    \n4.  Use the following steps to register your webhooks URL in Stripe:\n    \n    1.  Login to the [Stripe Dashboard](https://dashboard.stripe.com/dashboard).\n    2.  Go to the [Developers Dashboard](https://dashboard.stripe.com/developers).\n    3.  Click **Webhooks**.\n    4.  Click **Add Endpoint**.\n    5.  Enter your webhooks URL, then add the following events: `charge.refunded`, `charge.succeeded`, `charge.captured`.\n5.  Click **Add Endpoint**.\n    \n6.  Copy your webhook signing secret and save it for later use.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/sfom-stripe-copy-wh-secret.12c174e1793e7de05383881becda2805.png)\n    \n\n## Complete the configurations using Stripe OM Setup![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nInstructions in the following sections detail how to complete the configuration of your integration.\n\nIn your Salesforce Order Management org, go through the Stripe Setup Assistant to connect your org to your Stripe account.\n\n1.  Click the App Launcher, then click **View All**.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/sfom-launch-app-launcher.abb6c08a1cde704115918ebaddfe3ff4.png)\n    \n2.  Click **Stripe OM Setup**.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/sfom-launch-om-setup.d84d6c532e02356ab40073b2bec20f14.png)\n    \n3.  Click **Get Started**.\n    \n4.  Toggle live mode. We recommend leaving live mode disabled to test your Stripe integration without affecting your live data, and activating live mode when you’re ready to start processing real transactions with the Stripe Payment Gateway. Come back to this step and reauthorize your connection to switch between test mode and live mode. If you’re in live mode and you want to switch back to test mode, you don’t need to re-authorize.\n    \n5.  Click **Authorize**.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/sfom-authorize.d4883cff2b90cce49e6054a05daa9079.png)\n    \n    This allows Salesforce to access your Stripe data so you can capture and refund payments. The Stripe website opens to complete the authorization process, which might require you to enter login information or activate your Stripe account. When done, you’re redirected to this page to finish the setup process. After authorization is complete and successful, the following message displays:\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/sfom-authorize-complete.8ff6523255d2652a3dacaa56304c0090.png)\n    \n    Store the webhook signing secret for Stripe asynchronous payment processing.\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/sfom-store-wh-secret.9918a70a19d3886755228a68102c1979.png)\n    \n    1.  Add the webhook signing secret value in **Signing secret**.\n    2.  Click **Update**.\n    3.  A message appears on top to confirm successful insertion. Click **Finish**.\n\n### Modify existing order management flows![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe authentication with Stripe is using OAuth, where Stripe is the OAuth provider. Salesforce doesn’t support Stripe as an OAuth provider, therefore the OAuth token is obtained using a custom integration, leveraging an invocable action **getAccesToken**. This is packaged as part of the Stripe OM Connector Managed Package.\n\nIdentify the flow that initiates the payment or refund to Stripe and include the **getAccessToken** invocable method in an action just before the **Ensure Funds** action in the flow (as shown in the following example). The flows that you need to modify varies from the one shown in the following example.\n\n1.  Navigate to **Setup > Process Automation > Flows**.\n2.  Select the active **Flow** to use to capture funds.\n3.  Create a new **Action** that calls the `getAccessToken` invocable method.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/sfom-generate-token.4e707e9311288fd5e7f6e93a47dc638d.png)\n\n1.  Make sure that the **Get Access Token** action occurs before the **Capture Funds** action. After it completes, save a new version of this **Flow** to make sure that your processes use the new version.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/sfom-flowbuilder.22b239ea431eca499ef4cddd690ade94.png)\n\n1.  You can now use Stripe Payment as a payment method in your Order Management org. You can now place orders from Salesforce B2C Commerce Cloud and complete transactions, such as capture and refund transactions for payment methods that are associated with Salesforce commerce payments.",
  "title": "Install the Stripe Connector for Salesforce Order Management | Stripe Documentation",
  "description": "Set up and configure the Stripe Connector.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/salesforce-order-management/overview",
  "markdown": "# How the Connector for Salesforce Order Management works\n\n## Learn about the key components of the Stripe Connector for Salesforce Order Management.\n\nThe managed package contains the following key components needed for a configuration. After installation you can verify this setup by running the queries either through the developer console or SOQL Builder in VS Code.\n\n1.  StripeAPI the named credential.\n    \n    Execute the following query using the developer console or SOQL Builder in VSCode:\n    \n    `SELECT Id, DeveloperName, Endpoint FROM NamedCredential WHERE DeveloperName = 'StripeAPI'`\n    \n2.  Use the required Apex classes configured as the bridge between the Payments Platform in Salesforce and the Stripe Payment Gateway: StripeAdapter, StripeAsyncAdapter. These Apex classes for the synchronous and asynchronous adaptors respectively are for processing payments between Salesforce Order Management and Stripe.\n    \n    Execute the following query using the developer console or SOQL Builder in VS Code:\n    \n    `SELECT Id, Name, NamespacePrefix FROM ApexClass WHERE Name IN ('StripeAdapter','StripeAsyncAdapter')`\n    \n3.  Apply any required protected custom settings to store authentication secrets for the transactional calls to the Stripe Payment Gateway.\n    \n4.  Use an invocable Apex method (`getAccesToken`) to obtain the OAuth token for integration purposes.\n    \n5.  Use Lightning Pages required to authorize the Salesforce Connector in the subscribing org and Stripe Payment Gateway.",
  "title": "How the Connector for Salesforce Order Management works | Stripe Documentation",
  "description": "Learn about the key components of the Stripe Connector for Salesforce Order Management.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/salesforce-order-management/testing",
  "markdown": "# Testing the Stripe Connector for Salesforce Order Management\n\n## Best practices for testing your Stripe Connector and Salesforce B2C Commerce integration.\n\nUse the following steps to test your integration:\n\n*   In the Stripe Dashboard, toggle from live mode to test mode.\n*   Raise an order from Salesforce B2C Commerce Cloud.\n*   After the order is in the Salesforce Order Management environment, complete the required steps based on your mapped business process in SFOMS to fulfill the order or refund an order. Depending on your test case, this translates to triggering either of the flow core actions for order management – [Ensure Funds Async](https://help.salesforce.com/s/articleView?id=sf.flow_ref_elements_om_actions_ensure_funds_async.htm&type=5) or [Ensure Refunds Async](https://help.salesforce.com/s/articleView?id=sf.flow_ref_elements_om_actions_ensure_refunds_async.htm&type=5).\n*   Verify the status of your payment in the Stripe Dashboard, and check the payment gateway logs against the order payment summary.\n*   If the outcome is as expected, toggle from test mode to live mode. Reauthorize with Stripe, if required.\n*   If you are experiencing any issues, contact Stripe Support.\n\nIf your storefront is hosted on a Salesforce B2C environment, you should have an `account.demandware.com` login and Business Manager access through the following URL: https://production.demandware.net/on/demandware.store/Sites-Site.\n\n## Verify that Salesforce Commerce Cloud cartridge can collect payments with Stripe or Salesforce payments on Commerce Cloud![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nLog in to your Business Manager:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/sfom-verify-sfccb2c-1.213aaa94fd257b4e1c3a7a4e1f371e26.png)\n\nAlternatively:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/sfom-verify-sfccb2c-2.f84e63eb561d5a36669ab0e5bb9e1172.png)\n\n## Verify that your integration is enabled between SalesforceB2C Commerce Cloud and Salesforce Order Management![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n1.  In your Salesforce Order Management org, navigate to **Setup > Home > Feature Settings > Order Management**\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/sfom-verify-sfcc-om-1.2eedd5483a7fae74fc94ebba9667b83a.png)\n    \n2.  Then use the following route: **Setup > Home > Feature Settings > Connect to B2C Commerce > Manage Cloud-to-Cloud Connections**\n    \n    ![](https://b.stripecdn.com/docs-statics-srv/assets/sfom-verify-sfcc-om-2.fbcb617ab3d23a05ee262a157b1f91c9.png)\n    \n\n## Verify access to the CommercePayments API enabled by the PaymentPlatform org permission![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can validate whether you have access using one of the following methods.\n\nConfirm whether you’ve been assigned any of the following licenses:\n\n*   Salesforce Order Management\n*   Salesforce B2B\n*   Salesforce B2C\n\nUsing the following route in **Setup > Home > Company Information > Permission Set Licenses**, check for Commerce User (`CommerceUserPsl`), Lightning Order Management User (`LightningOrderManagementUserPsl`), B2B Buyer Permission Set One Seat (`B2BBuyerPsl`), B2B Buyer Manager Permission Set One Seat (`B2BBuyerManagerPsl`).\n\n## Verify the org API version![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nRefer to this help document: [https://help.salesforce.com/s/articleView?id=000334996&type=1](https://help.salesforce.com/s/articleView?id=000334996&type=1).\n\n## Get logs of payments and refunds in Salesforce![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can view logs for transactions made through the Salesforce Platform by navigating to **Order Summary Record > Order Payment Summary Record > Gateway Logs** in the **Related** tab. If you don’t see the gateway logs in the **Related** tab, contact your Salesforce administrator and include the gateway logs in the page layout.\n\nYou can also execute this SOQL in developer console or SOQL Builder in VSCode (Apply filters as required `OrderPaymentSummaryId` or `ReferencedEntityId`):\n\n`SELECT Id, OrderPaymentSummaryId, ReferencedEntityId,Request, Response, SfRefNumber, SfResultCode, GatewayRefNumber, GatewayAuthCode, GatewayDate, GatewayMessage, GatewayResultCode, GatewayResultCodeDescription, InteractionStatus FROM PaymentGatewayLog`\n\nThe `ReferencedEntityId` is a polymorphic field that points to a payment or refund record.",
  "title": "Testing the Stripe Connector for Salesforce Order Management | Stripe Documentation",
  "description": "Best practices for testing your Stripe Connector and Salesforce B2C Commerce integration.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/testing/test-clocks/simulate-subscriptions",
  "markdown": "# Simulate subscriptions | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to simulate subscriptions in a sandbox or test mode.\n\nSimulating a subscription shows you the events of a subscription, such as invoices and renewals, that are expected over the course of the simulation time.\n\n#### Note\n\nWhen you run a simulation on a subscription, it appears in the **Test clocks** tab of the Subscriptions page. You can delete it by clicking **Finish simulation**. Finishing a simulation deletes all objects associated with it, including the customer and subscription, from the sandbox or test mode. It doesn’t affect live mode.\n\nTo simulate a subscription:\n\n1.  Open the Dashboard and enable **Test mode**.\n2.  In the [subscriptions](https://dashboard.stripe.com/test/subscriptions) page, click the subscription to test.\n3.  Click **Run simulation** in the banner at the top of the page.\n    \n    #### Customer ineligible for simulation\n    \n    The **Run simulation** button might be disabled if the subscription’s customer:\n    \n    *   Is attached to more than three subscriptions, including [scheduled subscriptions](https://docs.stripe.com/billing/subscriptions/subscription-schedules)\n    *   Has a complex profile, with many quotes, invoices or other related objects\n    \n4.  In the modal, set the date and time to simulate and click **Advance time**.\n\nYou can advance time by any increment, but you can only advance them two intervals at a time from the initial frozen time. For example, if you have a monthly subscription, you can only advance the clock up to two months at a time.\n\nWhen the clock is done advancing, the banner updates and displays the clock’s current time.\n\nYou can continue to make changes to your simulation and advance the time for simulations like:\n\n*   Adding a [customer balance](https://docs.stripe.com/billing/customer/balance).\n*   Making a mid-cycle upgrade.\n*   [Adding one-off invoice items](https://docs.stripe.com/billing/invoices/subscription#adding-upcoming-invoice-items).\n\nRepeat as many times as you need to satisfy your test case.",
  "title": "Simulate subscriptions | Stripe Documentation",
  "description": "Learn how to simulate subscriptions in a sandbox or test mode.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/connectors/salesforce-order-management/operations-and-maintenance",
  "markdown": "# About the Stripe Connector for Salesforce Order Management\n\n## Learn about the core concepts of the connector.\n\n## Payment Intents![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nA [Payment Intent](https://docs.stripe.com/payments/payment-intents \"Payment Intents API\") is a Stripe object you can use to track a payment through its entire lifecycle, including any required authentication steps. To find the `PaymentIntent` in Salesforce Order Management, locate the Gateway Reference Number (`GatewayRefNumber`) field against the payment authorization record for an order summary.\n\nA payment authorization is relevant to both Stripe and the Salesforce OMS. An authorized amount is a sum that a business transmits to a credit or debit card processor to make sure a customer has sufficient funds to complete a purchase—the approved amount of money to be charged.\n\nThere are two [capture modes](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-capture_method) in the Stripe LINK cartridge for Salesforce B2C Commerce Cloud—authorize and capture. If the LINK cartridge is setup to authorize a payment during checkout, then a payment authorization record is created in Salesforce Order Management. You can view the payment authorization against an order summary using this route:\n\n**Order Summary Record > Order Payment Summary Record > Payment Authorizations in Related Tab**\n\nIf you don’t see `Refunds` in the **Related** tab, contact your Salesforce administrator and include the payment authorization related list in the page layout (as shown):\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/sfom-payment-auth-sc1.bb4f7cb8c5bce6a76d45fa975c210894.png)\n\nThe PaymentIntent ID (`pi_XXXXXX`) at Stripe is stored in the Gateway Reference Number (`GatewayRefNumber`) field of the payment authorization record. The Processing Mode (`ProcessingMode`) is set as `External`, which implies that the payment authorization was processed outside the Salesforce payment platform.\n\n## Payment![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf the capture mode in the Stripe LINK cartridge is set to `Capture`, then the payment is captured from the customer. In this case, a payment record is created in Salesforce Order Management. You can view the payment against an Order Summary using this route:\n\n**Order Summary Record > Order Payment Summary Record > Payments in Related Tab**\n\nIf you don’t see `Refunds` in the **Related tab**, contact your Salesforce administrator and include the payments related list in the page layout (as shown):\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/sfom-payment-sc1.8c48be7fc8849db13914a5f363fba750.png)\n\n## Balance Transaction ID![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe Balance Transaction ID (`txn_XXXXXXXXX`) against the PaymentIntent (`pi_XXXXXX`) at Stripe is stored in the Gateway Reference Number (`GatewayRefNumber`) field. The Processing Mode (`ProcessingMode`) is set as `External`, which means the payment was processed outside the Salesforce payment platform. In the event the payment was authorized in Salesforce B2C Commerce Cloud Storefront, and the amount was captured in Salesforce OMS later, the payment record is represented as shown:\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/sfom-baltxn-sc1.7eae0d579cb7f583f4270517d7bd5ab3.png)\n\nThe Salesforce Payment Gateway Id (`SFXXXXX`) against the Payment Intent (`pi_XXXXXX`) at Stripe is stored in the Gateway Reference Number (`GatewayRefNumber`) field. The Processing Mode (`ProcessingMode`) is set as `Salesforce`, which implies that the payment was processed by the Salesforce payment platform.\n\n## Refund![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf a refund is initiated from Salesforce OMS, you can trace it to a refund record by following this route:\n\n**Order Summary Record > Order Payment Summary Record > Refunds (in the Related tab)**\n\nIf you don’t see `Refunds` in the **Related** tab, contact your Salesforce administrator and include the refunds related list in the page layout (as shown):\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/sfom-refund-sc1.6ac94b1ed3162b35735ca3bbf0e6bd70.png)\n\nThe Salesforce Payment Gateway Id (`SFXXXXX`) is stored in the Gateway Reference Number (`GatewayRefNumber`) field. The Processing Mode (`ProcessingMode`) is set as `Salesforce`, which implies that the refund was processed by the Salesforce payment platform.\n\n## Payment gateway logs![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nYou can view logs for the transactions made with the Salesforce Platform by navigating to **Order Summary Record > Order Payment Summary Record > Gateway Logs** in the **Related** tab. If you don’t see the gateway logs in the **Related** tab, contact your Salesforce administrator and include the gateway logs in the related the page layout, or execute this SOQL in Developer Console or SOQL Builder in VS Code:\n\n`SELECT Id,OrderPaymentSummaryId, ReferencedEntityId,Request, Response, SfRefNumber, SfResultCode, GatewayRefNumber, GatewayAuthCode, GatewayDate, GatewayMessage, GatewayResultCode, GatewayResultCodeDescription, InteractionStatus FROM PaymentGatewayLog`",
  "title": "About the Stripe Connector for Salesforce Order Management | Stripe Documentation",
  "description": "Learn about the core concepts of the connector.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/invoicing/integration/testing",
  "markdown": "# Test Stripe Invoicing | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to test your Invoicing integration.\n\nUse these common scenarios to test your invoicing integration before taking it live.\n\n## Test webhook notifications ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe triggers event notifications when an [invoice’s](https://docs.stripe.com/api/invoices \"invoices\") [status changes](https://docs.stripe.com/invoicing/integration/workflow-transitions#status-transitions-endpoints). After you set up the Stripe CLI and link to your Stripe account, you can test webhooks by:\n\n*   Triggering event notifications with the [Stripe CLI](https://docs.stripe.com/stripe-cli).\n    \n*   Using the Dashboard to [create invoices](https://dashboard.stripe.com/test/invoices/create) in [test mode](https://docs.stripe.com/test-mode \"test mode\").\n    \n\nYou can add an endpoint and see its received events by going to [Webhooks](https://dashboard.stripe.com/test/webhooks) in the Dashboard.\n\n### Test events with fake data ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBy using the Stripe CLI to trigger events, you can see event notifications on your server as they come in. This means that you can check your webhook integration directly without complicating factors such as network tunnels or firewalls. When you use the Stripe CLI, the event your webhook receives contains fake data that doesn’t correlate to invoice information.\n\n### Test events with real data ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe most reliable way to test webhook notifications is to create test invoices for existing customers and handle the corresponding events.\n\n## Test payment failures ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo trigger payment failures for invoices, you can use the test credit card numbers in [Declined payments](https://docs.stripe.com/testing#declined-payments). If you want to simulate a declined payment for a card that’s been successfully attached to a customer, use **4000 0000 0000 0341** as their default payment method.\n\nDepending on your [retry settings](https://docs.stripe.com/invoicing/automatic-collection), you might have to wait a day or more to see the first retry attempt. To see what happens for a successful retry, you can use this waiting period to update the customer’s payment method to a working test card.\n\n## Test payments that require 3D Secure ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse the [**4000 0000 0000 3063**](https://docs.stripe.com/testing#regulatory-cards) card to simulate 3D Secure triggering for invoices. (You can also write [custom Radar rules](https://dashboard.stripe.com/test/radar/rules) in test mode to trigger authentication.) When Stripe triggers a 3D Secure authentication, you can test authenticating or failing the payment attempt in the 3DS dialog that opens. If the payment is authenticated successfully, the invoice is paid. When a payment attempt fails, the authentication attempt is unsuccessful and the invoice remains `open`.\n\n## Test bank transfer payments ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo test manual payments on invoices through bank transfers:\n\n1.  Create a testmode invoice with the collection method set to `send_invoice` and `payment_settings[payment_method_types]` array set to `[customer_balance]`.\n    \n2.  Find the invoice in the Dashboard and click **Send**. This generates a unique virtual bank account number for your customer.\n    \n3.  Retrieve your customer’s unique virtual bank account number using the \\[Customer Balance Funding Instructions API)(/docs/payments/customer-balance/funding-instructions#create-funding-instructions). You can also find your customer’s virtual banking details in the Hosted Invoice Page and PDF.\n    \n\n## Test customer tax ID verification ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nUse these magic tax IDs to trigger certain verification conditions in test mode. The tax ID type must be either the EU VAT Number or Australian Business Number (ABN).\n\n| Number | Type |\n| --- | --- |\n| `000000000` | Successful verification |\n| `111111111` | Unsuccessful verification |\n| `222222222` | Verification remains pending indefinitely |",
  "title": "Test Stripe Invoicing | Stripe Documentation",
  "description": "Learn how to test your Invoicing integration.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/boleto/set-up-subscription",
  "markdown": "# Use Boleto with subscriptions | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Boleto with subscriptions.\n\nLearn how to set up [Boleto](https://docs.stripe.com/payments/boleto) as a [payment method](https://docs.stripe.com/api/payment_methods \"PaymentMethods\"). Boleto is a voucher with a generated number that [Customers](https://docs.stripe.com/api/customers \"Customers\") can obtain from an ATM, a bank, an online bank portal, or an authorized agency.\n\n[](#enable-boleto)\n\nBefore you start your integration, go to **Manage payments that require confirmation** in your [Subscriptions and emails settings](https://dashboard.stripe.com/settings/billing/automatic) and enable **Send a Stripe-hosted link for customers to confirm their payments when required**.\n\n### Use Stripe Checkout Subscriptions only![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you create a subscription that uses [Stripe Checkout](https://docs.stripe.com/api/checkout/sessions), Stripe sends your customer a previously generated Boleto to their email address in each subscription cycle.\n\n1.  Go to your [Payment methods settings](https://dashboard.stripe.com/settings/payment_methods) and turn on Boleto as a payment method.\n    \n2.  Create a Checkout Session with at least one recurring price:\n    \n\n`curl https://api.stripe.com/v1/checkout/sessions \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\" \\   --data-urlencode success_url=\"https://example.com/success\" \\   --data-urlencode cancel_url=\"https://example.com/cancel\" \\   -d \"line_items[0][price]\"={{RECURRING_PRICE_ID}} \\   -d \"line_items[0][quantity]\"=1 \\  -d \"payment_method_options[boleto][expires_after_days]\"=3 \\  -d mode=subscription`\n\n[](#set-collection-method)\n\nYou can set the collection method in the Dashboard or [API](https://docs.stripe.com/api/invoices/create#create_invoice-collection_method). For invoices, you can choose to either send an invoice or charge your customer automatically. If you’re using the API, the `send_invoice` and `charge_automatically` values determine the collection method.\n\n|     | Send invoice | Charge automatically |\n| --- | --- | --- |\n| When to use | *   Your customer hasn’t defined their preferred payment method to pay invoices or subscriptions. In this case, you want to give them the option to use either a credit card or Boleto.<br>*   You’re missing important customer information required to use Boleto (full name, address, and tax ID). | *   Your customer already chose to pay for their invoices or subscriptions using boletos.<br>*   You have the customer information needed to create an invoice that uses Boleto (full name, address, and tax ID). |\n| Customer experience | *   Your customer needs to reenter their personal information details (full name, address, and tax ID) every time you send a new invoice, or for each new subscription cycle. This collection method doesn’t take into account the default payment method associated with that customer. | *   Your customer has Boleto set up as their default payment method. Your customer receives an email with a Boleto voucher every time you send them an invoice, or there’s a subscription cycle. |\n| Expiration and due dates | *   The invoice must contain a due date.<br>*   Stripe creates the boleto—regardless of the invoice due date—as soon as your customer enters the needed details. Because boletos have their own expiration date (the default is 3 days), the invoice due date and the boleto expiration date won’t necessarily match. The boleto might expire before or after the invoice is due. | *   The invoice doesn’t have a due date.<br>*   Stripe creates the boleto when the merchant creates the invoice with a selected expiration date (the default is 3 days). |\n\n[](#create-customers)\n\nCreate a customer for every new user or business you want to bill. When you create a new customer, set up a [minimal customer profile](#customer-profile) to help generate more useful invoices, and enable Smart Retries (if you’re an [Invoicing Plus](https://stripe.com/invoicing/pricing) user). After you set up your customer, you can issue one-off invoices or create [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\").\n\n#### Caution\n\nBefore you create a new customer, make sure that the customer doesn’t already exist in the Dashboard. Creating multiple customer entries for the same customer can cause you problems later on, such as when you need to reconcile transaction history or coordinate saved payment methods.\n\nYou can create and manage customers on the [Customers page](https://dashboard.stripe.com/customers) when you don’t want to use code to create a customer, or if you want to manually bill a customer with a one-off invoice.\n\n#### Note\n\nYou can also create a customer in the Dashboard during invoice creation.\n\n### Create a customer ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you create a new customer, you can set their account and billing information, such as **Email**, **Name**, and **Country**. You can also set a customer’s preferred language, currency, and other important details.\n\nTo create a customer, complete these steps:\n\n1.  Verify that the customer doesn’t already exist.\n    \n2.  Click **Add customer**, or press **N**, on the **Customers** page.\n    \n3.  At a minimum, enter your customer’s **Name** and **Account email**.\n    \n4.  Click **Add customer** in the dialog.\n    \n\n### Edit a customer ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo edit a customer’s profile, complete these steps:\n\n1.  Find the customer you want to modify and click the name on the **Customers** page.\n    \n2.  In the account information page, select **Actions** > **Edit information**.\n    \n3.  Make your changes to the customer profile.\n    \n4.  Click **Update customer**.\n    \n\n### Delete a customer ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo delete a customer, complete these steps:\n\n1.  Find the customer you want to delete on the **Customers** page.\n    \n2.  Click the checkbox next to your customer’s name followed by **Delete**. You can also click into the customer’s details page and select **Actions** > **Delete customer**.\n    \n\n[](#create-product-price)\n\nDefine all your business and product offerings in one place. [Products](https://docs.stripe.com/api/products \"Products\") define what you sell and [Prices](https://docs.stripe.com/api/prices \"Prices\") track how much and how often to charge. This is a core entity within Stripe that works with [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"), [invoices](https://docs.stripe.com/api/invoices \"invoices\"), and [Checkout](https://docs.stripe.com/payments/checkout).\n\nPrices enable these use cases:\n\n*   A software provider that charges a one-time setup fee whenever a user creates a new subscription.\n*   An e-commerce store that sends a recurring box of goods for 10 USD per month and wants to allow customers to purchase one-time add-ons.\n*   A professional services firm that can now create a standard list of services and choose from that list per invoice instead of typing out each line item by hand.\n*   A non-profit organization that allows donors to define a custom recurring donation amount per customer.\n\nYou can manage your product catalog with products and prices. Products define what you sell and prices track how much and how often to charge. Manage your products and their prices in the Dashboard or through the API.\n\nIf you used the Dashboard in test mode to set up your business, you can copy each of your products over to live mode by using **Copy to live mode** in the [Product catalog page](https://dashboard.stripe.com/products). Use our official libraries to access the Stripe API from your application.\n\n1.  Navigate to the **Product catalog** page, and click **Add product**.\n    \n2.  Select whether you want to create a **One-time product**, or a **Recurring one-time product**.\n    \n3.  Give your product a name, and assign it a price.\n    \n\n[](#create-subscription)\n\nYou can create and update subscriptions from the Dashboard or the API. Use the API if you have a large number of subscriptions to manage, or if you want to manage them programmatically.\n\n#### Note\n\n### Create a subscription ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo create a subscription:\n\n1.  Go to the **Payments** > **Subscriptions** page.\n    \n2.  Click **+Create subscription**.\n    \n3.  Find or add a customer.\n    \n4.  Enter the pricing and product information, which allows you to add multiple products, a coupon, or trial to the subscription.\n    \n\nIn the **Advanced** options section, you can optionally create [thresholds for metered usage](https://docs.stripe.com/products-prices/pricing-models#usage-based-pricing) or add [customized invoice](https://docs.stripe.com/invoicing/customize) fields. When you’re finished, click **Schedule subscription** or **Start subscription**. When scheduling a subscription you can start it immediately, the next month, or customize it. You can end the subscription immediately, after a number of cycles, or customize a date.\n\n### Edit a subscription ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo edit a subscription:\n\n1.  Go to the **Payments** > **Subscriptions** page.\n    \n2.  Find the subscription you want to modify, click the overflow menu (), then click **Update subscription**. You can also click the next to the subscription name. From this menu, you can also:\n    \n    *   **Cancel the subscription**. In the modal that opens, select the date to cancel the subscription—immediately, at the end of the current period, or on a custom date. You can also select the option to refund the last payment for this subscription and create a [credit note](https://docs.stripe.com/invoicing/dashboard/credit-notes) for your records.\n        \n    *   **Pause payment collection**. In the modal that opens, select the duration of the pause—indefinite or ending on a custom date, and how invoices should behave during the pause.\n        \n    *   **Share payment update link**. In the modal that opens, you can share a link with the customer to update their payment details. For more information, see [Share payment update link](https://docs.stripe.com/billing/subscriptions/update-payment-method).\n        \n3.  Add the changes you want to the subscription.\n    \n4.  Click **Update subscription**.\n    \n\n### Delete a subscription ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can’t delete a subscription object, but you can cancel it or pause payment collection. See [editing a subscription](#edit-susbscription) for those details.",
  "title": "Use Boleto with subscriptions | Stripe Documentation",
  "description": "Learn how to use Boleto with subscriptions.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage",
  "markdown": "# API and advanced usage | Stripe DocumentationThe Stripe Docs logo\n\n## Learn advanced strategies for using test clocks in the Dashboard and API.\n\nYou can create a test clock separately from a subscription for running advanced simulations. In this scenario you create the test clock first and then add different test cases to it.\n\nNot ready for a full integration? See [our guide](https://docs.stripe.com/billing/testing/test-clocks/simulate-subscriptions) for running simulations on subscriptions.\n\n![How to set a test clock to simulate subscription time elpasing.](https://b.stripecdn.com/docs-statics-srv/assets/test-clock-lifecycle.b711b9cf4feb52351e27958b8b924cb3.png)\n\nTest clock lifecycle\n\nFollow these steps to start using test clocks:\n\n1.  [Create a test clock](#create-clock)\n2.  [Set up your testing simulation](#setup-simulation)\n3.  [Advance the clock’s time](#advance-clock)\n4.  [Monitor and handle the changes](#monitor-changes)\n5.  [Update the simulation](#update-simulation)\n6.  [Delete the clock](#delete-clock)\n\nYou can advance the clock’s time, monitor changes, and update the simulation as often as you need to test different cases.\n\n[](#create-clock)\n\nTo start a simulation, create a clock and set its frozen time. The temporal starting point for all [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") associated with this clock. You can set this to a time in the future or in the past to test different simulations, but you can only move it forward in time after you set it.\n\nTo create a test clock in the Dashboard, follow the steps below. Set the Dashboard to **Test mode** to use test clocks.\n\n1.  Go to the **Subscriptions** [section](https://dashboard.stripe.com/test/subscriptions) under the **Billing** tab.\n2.  Click the [test clocks](https://dashboard.stripe.com/test/test-clocks) link in the banner.\n3.  Click **New simulation**.\n4.  In the **Create new simulation** modal, enter a name for the simulation. You can use this to describe the simulation you’re testing, like `Annual renewal` or `Free trial`.\n5.  Set the frozen time of the clock. This is the starting point for your simulation. You can set this to a time in the future or in the past, but you can only move it forward in time after you set it.\n\n[](#setup-simulation)\n\nNext, set up the test case for your simulation. You need to create a customer first, then a subscription for them.\n\nTo create a customer for your simulation through the Dashboard:\n\n1.  Go to the [test clocks](https://dashboard.stripe.com/test/test-clocks) page and find your test clock.\n2.  Click **Add** > **Add customer**.\n\nYou can’t choose existing customers during test clock simulations. You can add up to three new customers to each simulation.\n\nYou can optionally enter other [available properties](https://docs.stripe.com/billing/customer#properties-uses) for the customer, like their name, email, and billing information, but none are required. For some simulations, like testing free trials, you might not want to collect any billing information up front.\n\nNext, you can create up to three subscriptions or subscription schedules for your customer. To create a subscription for the customer through the Dashboard:\n\n1.  Go to the [test clocks](https://dashboard.stripe.com/test/test-clocks) page and find your test clock.\n    \n2.  Click **Add** > **Add subscription**. Select or search for your customer from the drop-down menu. You can also add the customer to a subscription through the customer page, by clicking **Actions** > **Create subscription**.\n    \n3.  Select a recurring product and price in the **Pricing** section.\n    \n4.  For the **Subscription schedule**, define the start and end date for the subscription and when to start the billing cycle.\n    \n5.  Choose a payment collection method:\n    \n    *   Select **Automatically charge a payment method on file** if you want to charge your customer when the billing cycle starts.\n    *   Select **Email invoice to the customer to pay manually** if you want to invoice your customer in arrears.\n6.  Click **Start test subscription** to start the subscription and billing cycle.\n    \n\nBoth the customer and subscription objects are associated with the clock object you created in the [first step](#create-clock). In the Dashboard, the icon indicates that an object is associated with a clock.\n\n[](#advance-clock)\n\nAfter you’ve created the test clock and set up your test case, advance the simulated time of the clock. The first time you do this, you’ll advance the time from the initial frozen time you set at the [creation of the clock](#create-clock). As you advance time, you can see how your integration works when subscriptions end, renew, or undergo other changes (like upgrading from a free trial to a paid subscription).\n\nYou can advance test clocks by any increment, but you can only advance them two intervals at a time from their initial frozen time. The length of the interval is based on the shortest subscription interval associated with the test clock, which is determined by the recurring price. For example, if you have a monthly subscription, you can only advance the clock up to two months at a time. If the test clock has no subscriptions or subscription schedules, you can advance it up to two years from the initial frozen time.\n\nTo advance time through the Dashboard:\n\n1.  Go to the [test clocks](https://dashboard.stripe.com/test/test-clocks) page and find your test clock.\n    \n2.  Click **Advance time**.\n    \n3.  Use the calendar modal to select the date you want to advance the clock to.\n    \n4.  Click **Advance**.\n    \n\nWhen the clock is done advancing, the banner updates and displays the clock’s current time.\n\n[](#monitor-changes)\n\nAfter a successful API request or Dashboard operation, the clock takes a few seconds to advance to the specified time. To know when the clock has changed state, you can use webhooks to listen for event notifications or you can poll the clock. The Dashboard also reflects the changes. For example, you can go to the [invoices page](https://dashboard.stripe.com/test/invoices) to check whether an invoice was created or paid for your subscription.\n\nIf you use [webhooks](https://docs.stripe.com/webhooks), listen to the following event notifications. Before production, make sure your integration correctly handles the other [billing-specific event notifications](https://docs.stripe.com/billing/subscriptions/webhooks) in addition to the ones listed below.\n\n| Event | Description |\n| --- | --- |\n| `test_helpers.test_clock.advancing` | The clock has started to advance but hasn’t reached the specified time. |\n| `test_helpers.test_clock.ready` | The clock has completed advancing to the specified time. |\n\nTo poll the state of the clock, [retrieve](https://docs.stripe.com/api/test_clocks/retrieve) it by ID to examine its `status`.\n\n`curl https://api.stripe.com/v1/test_helpers/test_clocks/{{CLOCK_ID}} \\  -u \"`\n\n`sk_test_4eC39HqLyjWDarjtT1zdp7dc`\n\n`:\"`\n\n[](#update-simulation)\n\nYou can continue to make changes to your simulation and [advance the clock](#advance-clock) for simulations like:\n\n*   Adding a [customer balance](https://docs.stripe.com/billing/customer/balance).\n*   Making a mid-cycle upgrade.\n*   [Adding one-off invoice items](https://docs.stripe.com/billing/invoices/subscription#adding-upcoming-invoice-items).\n\nAfter each update, [monitor the changes](#monitor-changes) again. Repeat as many times as you need to satisfy your test case.\n\n[](#delete-clock)\n\nTest clocks are automatically deleted 30 days after you create them, but you can delete them when you’re done testing to ensure a clean test environment.\n\nTo delete the clock and all of its associated test objects through the Dashboard:\n\n1.  Go to the [test clocks](https://dashboard.stripe.com/test/test-clocks) page and find your test clock.\n2.  Click **Finish simulation**.\n3.  In the confirmation modal, click **Finish**.\n\nDeleting the clock also deletes the test customers associated with the clock and cancels their subscriptions. Test clocks are only available in test mode, so you can’t delete any production objects when you delete a clock.\n\n[](#use-cases)\n\n### Test subscription renewals ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFirst, follow these steps to start using test clocks:\n\n1.  [Create a test clock](#create-clock)\n2.  [Set up your testing simulation](#setup-simulation)\n3.  [Advance the clock’s time](#advance-clock)\n4.  [Monitor and handle the changes](#monitor-changes)\n5.  [Update the simulation](#update-simulation)\n\nNext, you can test certain subscription renewals using test clocks. Let’s say that you’d like to test that a 50 USD/month subscription renews correctly. To simulate this situation using test clocks:\n\n*   Create a new test clock and set its `frozen_time` to January 1.\n*   Add a customer and add a payment method for the customer:\n\nTo add a payment method for a customer in the Dashboard:\n\n1.  From the customer account page, click **Add > Add card** from the **Payment methods** section.\n2.  Enter payment information. In this case, use the [test card](https://docs.stripe.com/testing#cards).\n3.  Click **Add card** in the modal.\n\n*   After adding a payment method for the customer, create a subscription for the new customer set at 50 USD/month. In doing so, the invoice of 50 USD is paid automatically and the subscription is `active`.\n    \n*   Advance the date to February 1 to see that an invoice of 50 USD is created. By default, the invoice appears in a `draft` state for [one hour](https://docs.stripe.com/billing/invoices/subscription#adding-draft-invoice-items).\n    \n*   Advance the time by one hour to see that the invoice is finalized and paid automatically.\n    \n\n### Test mid-cycle upgrades with prorations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFirst, follow these steps to start using test clocks:\n\n1.  [Create a test clock](#create-clock)\n2.  [Set up your testing simulation](#setup-simulation)\n3.  [Advance the clock’s time](#advance-clock)\n4.  [Monitor and handle the changes](#monitor-changes)\n5.  [Update the simulation](#update-simulation)\n\nNext, you can test prorations for customers who upgrade their plans in the middle of a billing cycle. Let’s say that you have two products. One product is 50 USD/month (‘basic plan’) and the other is 100 USD/month (‘premium plan’). In this case, you may want to test prorations for a customer who upgrades their ‘basic plan’ to the ‘premium plan’ in the middle of a billing cycle. To simulate this situation using test clocks:\n\n*   Create a new test clock and set its `frozen_time` to January 1.\n*   Create a customer and add their payment method. In this case, use the [test card](https://docs.stripe.com/testing#cards).\n*   Create a subscription for the ‘basic plan’ at 50 USD/month. After this is done, you’ll see that the 50 USD/month invoice is created, finalized, and automatically paid.\n*   Advance the date by two weeks. In this case, we’ll set the date to January 16.\n*   Upgrade the subscription to a ‘premium plan’ at 100 USD/month:\n\nTo upgrade a subscription using the Dashboard:\n\n1.  From the customer account page or the subscription details page, click the overflow menu () associated with a subscription, then select **Update subscription**.\n2.  Make your desired modifications.\n3.  Click **Update subscription** in the top right corner to apply the changes.\n\n*   After upgrading the subscription, the [customer.subscription.updated](https://docs.stripe.com/api/events/types#event_types-customer.subscription.updated) webhook event is created.\n    \n*   Pending invoice items are also created for the prorations. You’ll see a negative proration of -25 USD for the unused time with the ‘basic plan’ and a positive proration of 50 USD for using the ‘premium plan’ for half of the remaining month. At this point, no invoice has been generated.\n    \n*   Advance the date by two weeks. In this case, we’ll set the date to February 1. You’ll see that the subscription has cycled. An invoice has been generated in a `draft` state and has incorporated the pending invoice items, including a negative proration, a positive proration, and the total payment for the month of February, resulting in 125 USD. By default, the invoice appears in a `draft` state for around [one hour](https://docs.stripe.com/billing/invoices/subscription#adding-draft-invoice-items).\n    \n*   To finalize the invoice, advance the time by one hour.\n    \n\n### Test trials ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFirst, follow these steps to start using test clocks:\n\n1.  [Create a test clock](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#create-clock)\n2.  [Set up your testing simulation](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#setup-simulation)\n3.  [Advance the clock’s time](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#advance-clock)\n4.  [Monitor and handle the changes](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#monitor-changes)\n5.  [Update the simulation](https://docs.stripe.com/billing/testing/test-clocks/api-advanced-usage#update-simulation)\n\nNext, you can start testing trials with test clocks. Let’s say that you want customers to try your product for free with a seven-day trial before they start paying and want to collect payment information up front. To simulate this situation using test clocks, follow these steps:\n\n*   Create a new test clock and set its `frozen_time` to January 1.\n*   Add a customer and include their payment method. In this case, use a [test card](https://docs.stripe.com/testing#cards).\n*   Create a subscription and add a seven-day free trial period:\n\nTo add a trial period to an existing subscription using the Dashboard:\n\nFind the subscription you want to change.\n\n1.  Click **Actions**.\n2.  Click **Update subscription**.\n3.  Click **Add free trial** and enter seven in **Free trial days** field.\n4.  Click **Update subscription**.\n\n*   After creating a subscription with a seven-day free trial period, a subscription is created in a `trialing` state. An invoice of $0.00 is generated due to the free trial.\n*   Advance the date to January 5 to see the [customer.subscription.trial\\_will\\_end](https://docs.stripe.com/api/events/types#event_types-customer.subscription.trial_will_end) event notification. Stripe sends the notification three days before the trial ends. You can use this webhook event to inform your customers that the trial ends soon.\n*   Advance the date to January 8 to see that the subscription is now `paid` and an invoice for 50 USD is created.\n*   Advance the date by one cycle (for example, to February 8 for a monthly subscription) to see the subscription renew successfully.\n\n## Limitations ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nFor efficient advancement of test clocks, Stripe limits the complexity of each simulation to:\n\n*   three customers\n*   three subscriptions, including [scheduled subscriptions](https://docs.stripe.com/billing/subscriptions/subscription-schedules), per customer\n*   ten quotes that aren’t attached to customers\n\n### Caveats with payment processing![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTest clock advancement currently doesn’t support collecting payments through bank debits (for example, `us_bank_account` payment method types). Stripe collects payments after the test clock advances. To test payment failures:\n\n1.  Choose the **Cancel subscription after all payment retries fail** setting.\n    \n2.  Attach a `us_bank_account` payment method type to a customer that fails payments.\n    \n3.  Create a subscription under the customer.\n    \n4.  Advance the test clock to cycle and collect payment on a subscription.\n    \n\nAfter the Test Clock advances, the subscription remains in the `active` state. This indicates that the payment collection hasn’t be attempted during test clock advancement, and the subscription has yet to enter the `canceled` state due to `payment_failed`.\n\nListen to the `invoice.payment_failed` event to monitor the delayed subscription state and invoice payment. The `customer.subscription.deleted` event indicates that the subscription state is set to `canceled`.",
  "title": "API and advanced usage | Stripe Documentation",
  "description": "Learn advanced strategies for using test clocks in the Dashboard and API.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/atlas/signup",
  "markdown": "# How to start your business\n\n## Learn what you need to get started with Atlas.\n\nTo start a business using Stripe Atlas, you need to provide information about your company, founders, ownership, and company officers. Atlas provides legal information and self-serve tools that assist you in providing this information, filling out template documents, and filing these with the appropriate government offices. Atlas isn’t a law firm and doesn’t provide legal, tax, or accounting advice. Using Atlas isn’t a substitute for individual advice from qualified legal, tax, or accounting professionals.\n\nAtlas is appropriate for most founders, but not all. For example, if you’re contributing intellectual property (IP) to your company, Atlas’ use of a default, industry standard valuation might not accurately reflect the value of your IP. After you submit your information, Atlas fills out template entity formation documents. Double-check that the information you provided is accurate before submitting your Atlas application, because you likely need to work with a lawyer to make changes after your submission.\n\nWe charge 500 USD for company incorporation and then 100 USD annually each year to be your registered agent. We won’t charge you if you don’t submit, and we’ll refund your fee if we’re not able to support your business. Read more about Stripe’s [restricted businesses](https://support.stripe.com/questions/stripe-atlas-restricted-business-categories).\n\n#### Note\n\n## Information submission ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nReview the following table and submit the required information:\n\n| What we need | What to provide |\n| --- | --- |\n| Company structure | Select the type of entity structure that is right for you. Stripe Atlas supports forming Delaware C Corporations, Limited Liability Corporations (LLCs), and C Corporation subsidiaries. |\n| Company name | Enter a legal name for your company. The Atlas application will check if a name is available in the State of Delaware, but you can also check if a name is available on [Delaware’s website](https://icis.corp.delaware.gov/eCorp/EntitySearch/NameSearch.aspx). If you’re creating the new company as a subsidiary of an existing company, you also need to provide the following information about the existing parent company:<br><br>*   Parent company legal name<br>*   Parent company country<br>*   Parent company tax ID number |\n| Company description | Provide a few sentences to describe your company. We review this description to make sure that we can support your business. |\n| _(Optional)_ Company website | Provide a website or social media profile for your business. While this is optional, it helps us process your company more quickly. |\n| Company address | If you don’t have an official company address yet, you can use a virtual or home address. |\n| Company US phone number | You aren’t required to provide a company phone number to use Atlas. However, providing a phone number can expedite receiving your tax ID, which you need before you can accept payments through Stripe. We never call you for marketing purposes. |\n| Founders | We need to know a bit about you and any co-founders:<br><br>*   First and last name (that is, your name on a government ID)<br>*   Email address<br>*   Date of birth (only for the founder who submits the Atlas form)<br>*   Home address |\n| Ownership | Enter in the percentage of the company each founder owns (founder split) and reserve an equity pool for your team if you choose. |\n| Roles and officers | Choose your company’s role and officers:<br><br>*   Board of Directors (or LLC Managers): Choose who can make important company decisions.<br>*   C Corporation and Subsidiary roles: name a president and secretary for your company. The president is responsible for general company management. Your secretary is responsible for maintaining company records. |\n| Tax ID (Employer Identification Number or EIN) | Choose one of [two ways](#receive-tax-irs) to get your company’s tax ID (EIN) from the IRS: Standard (available to everyone) or Expedited (limited). |\n\n### Receive your Tax ID from the IRS ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nLearn more about the differences between standard and expedited processes when choosing to get your company’s Tax ID:\n\n*   Standard (available to everyone): 15–30 business days after incorporation.\n*   Expedited (limited): 1–2 business days after incorporation for no additional cost. Available if the account opener provides a US Social Security number (SSN), a US company address, and a US phone number.\n\nWe make a few assumptions when we submit your company’s EIN application to the IRS. We assume your company doesn’t:\n\n*   Have or expect to have any employees who will receive a Form W-2 in the next 12 months.\n*   Own a [highway motor vehicle](https://sa.www4.irs.gov/modiein/individual/help/keyword.jsp?keyword=Highway%20Motor%20Vehicle) with a [taxable gross weight](https://sa.www4.irs.gov/modiein/individual/help/keyword.jsp?keyword=Taxable%20Gross%20Weight) of 55,000 pounds or more.\n*   Need to file [Form 720](https://sa.www4.irs.gov/modiein/individual/help/keyword.jsp?keyword=Form%20%20720) (Quarterly Federal Excise Tax Return).\n*   Involve [gambling or wagering](https://sa.www4.irs.gov/modiein/individual/help/keyword.jsp?keyword=Gambling/Wagering).\n*   Sell or manufacture alcohol, tobacco, or firearms.\n\nIf any of the above assumptions are incorrect, you can simply file applicable employment taxes and/or excise taxes for your company.\n\n## How we use your information ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe uses your information to generate the legal documents necessary to form your company in Delaware, get an [EIN](https://docs.stripe.com/atlas/business-taxes#file-us-corp-tax) from the IRS, and file your [83(b) election](https://docs.stripe.com/atlas/83b-election). We also review your details to confirm that we can support your business. The [Stripe Atlas Agreement](https://stripe.com/atlas/legal) and the [Stripe Privacy Policy](https://stripe.com/us/privacy) give more details about the information we collect and how we use that information.\n\n## After you sign your documents ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter you sign your documents and submit the form, we review your information to make sure we have everything we need to form your company and to check that we can support your business within 1 business day. We might ask you clarifying questions or request additional details regarding your company. We’ll send you an email after you complete these steps. You can also track your approval progress in the [Dashboard](https://dashboard.stripe.com/atlas).\n\n### Company formation ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWe form your company after you submit the necessary information and we review it.\n\nRegistering your corporation in Delaware tends to take 1–2 business days. Your stock is issued after you’ve received your EIN and incorporation. If your company is a subsidiary of an existing company, Stripe Atlas provides templates that you can use with your lawyer.\n\n### Company documents ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter Stripe forms your company, you can view your documents in the [Company](https://dashboard.stripe.com/atlas/company) page in the Dashboard. The available documents depend on whether you’re forming a [C Corporation](https://docs.stripe.com/atlas/company-types?business-type=ccorp) or an [LLC](https://docs.stripe.com/atlas/company-types?business-type=llc).\n\nIf you formed a C Corporation, we include the following documents:\n\n*   Certificate of Incorporation.\n*   Bylaws, for governing your corporation.\n*   Board Approval.\n*   IRS Form SS-4 (to request an EIN for tax-reporting purposes).\n*   IRS Form 8821 (to give us permission to call the IRS on your behalf).\n\n## How we get your tax ID (EIN) ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAfter incorporation, we use your [Form SS-4](https://www.irs.gov/pub/irs-pdf/fss4.pdf) to request an EIN for your company from the IRS. You also complete [Form 8821](https://www.irs.gov/pub/irs-pdf/f8821.pdf), which allows us to call the IRS on your behalf to get your company’s EIN as fast as possible.\n\nIf you have a [Social Security number](https://www.ssa.gov/ssnumber/) (SSN) or [Individual Taxpayer Identification Number](https://www.irs.gov/individuals/individual-taxpayer-identification-number) (ITIN), Stripe Atlas can request an EIN on your company’s behalf through an online, expedited process that takes 1–2 business days. If you don’t have a SSN or ITIN, it generally takes 15–30 business days to receive your company’s EIN in your Dashboard and 6–8 weeks (or longer) to receive it by physical mail. After your company has its EIN, your company can activate Stripe payments, open a business banking account, and file US tax returns.\n\n#### Note\n\n## Registered agent service ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nDelaware requires that companies have a registered agent to receive official notices and maintain good standing. A registered agent is included as part of the initial 500 USD setup fee, and is renewed automatically each year thereafter for 100 USD. Your registered agent might contact you directly to share legal notices and communications from Delaware with you. Your registered agent address isn’t a general purpose mail-forwarding address for your company and shouldn’t be listed as a company address. You can separately use a virtual address service to receive general mail and for customer contact.",
  "title": "How to start your business | Stripe Documentation",
  "description": "Learn what you need to get started with Atlas.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/test-mode",
  "markdown": "# Test mode and use cases\n\n## Use test mode and our uses cases to test your integration.\n\nStripe’s test mode allows you to test your integration without making actual charges or payments. Test mode is a testing environment that simulates creating real objects without the risk of affecting real transactions or moving actual money. We recommend using our quality assurance (QA) testing use cases, and importing our [Postman collection](https://www.getpostman.com/collections/080102f58f29afa081d7) to aid you in the testing process.\n\n## Test mode ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn test mode, you can charge test credit cards as well as create test products and prices. You can also use test mode to simulate transactions to make sure that your integration works correctly. This feature helps to identify any bugs or errors in your Stripe implementation before you go live with actual payments.\n\nAfter you create a Stripe account, you can find a set of [test API keys](https://docs.stripe.com/keys#obtain-api-keys) in the [Stripe Dashboard](https://dashboard.stripe.com/test/apikeys). You can use these API keys to create and retrieve simulated data by making requests to the Stripe API. To start accepting real payments, you need to [activate your account](https://docs.stripe.com/get-started/account/activate), toggle off test mode, and use the live API keys in your integration. Stripe provides a number of resources for testing your integration.\n\n#### Impact on live mode\n\nIn the Dashboard, changing settings in test mode might also change them in live mode. Many Dashboard pages have a white notification box and disable live mode settings while in test mode. In this case, any settings still enabled are safe to use. If there’s no white callout, assume any changes made in test mode affect live mode settings (unless you see an orange test data banner).\n\n### Test mode versus live mode ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nAll Stripe API requests occur in either test mode or live mode. API objects in one mode aren’t accessible to the other. For instance, a test-mode [product object](https://docs.stripe.com/api/products/object) can’t be part of a live-mode payment.\n\n| Type | When to use | Objects | How to use | Considerations |\n| --- | --- | --- | --- | --- |\n| test mode | Use test mode, and its associated test API keys, as you build your integration. In test mode, card networks and payment providers don’t process payments. | API calls return simulated objects. For example, you can retrieve and use test `account`, `payment`, `customer`, `charge`, `refund`, `transfer`, `balance`, and `subscription` objects. | Use [test credit cards and accounts](https://docs.stripe.com/testing#cards). You can’t accept real payment methods or work with real accounts. | [Identity](https://docs.stripe.com/identity) doesn’t perform any verification checks. Also, Connect [account objects](https://docs.stripe.com/api/accounts/object) don’t return sensitive fields. |\n| live mode | Use live mode, and its associated live API keys, when you’re ready to launch your integration and accept real money. In live mode, card networks and payment providers do process payments. | API calls return real objects. For example, you can retrieve and use real `account`, `payment`, `customer`, `charge`, `refund`, `transfer`, `balance`, and `subscription` objects. | Accept real credit cards and work with customer accounts. You can accept actual payment authorizations, charges, and captures for credit cards and accounts. | Disputes have a more nuanced flow and a simpler [testing process](https://docs.stripe.com/testing#disputes). Also, some [payment methods](https://docs.stripe.com/payments/payment-methods) have a more nuanced flow and require more steps. |\n\nThe **Test mode** toggle in the Dashboard doesn’t affect your integration code. Your test and live mode API keys affect the behavior of your code.\n\n### Test card numbers ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe provides a set of [test card numbers](https://docs.stripe.com/testing#cards) that you can use to simulate various payment scenarios. You can use these test card numbers to create simulated payments in test mode without processing actual payments or charges.\n\nWhen you use test card numbers, you can enter any expiration date in the future and any three-digit CVC code to simulate a successful payment. If you want to simulate a failed payment, you can use specific test card numbers and CVC codes provided by Stripe.\n\nTest card numbers are only valid in test mode. Don’t use them for real payments.\n\n### Delete test data ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo delete all of your test data from your Stripe account, complete the following steps:\n\n1.  [Log in to the Dashboard](https://dashboard.stripe.com/) using your existing Stripe account.\n2.  While in test mode, click **Developers** and scroll down to the bottom of the **Overview** tab.\n3.  Click **Delete all test data…** The ensuing dialog gives you a list of all of your existing test data objects.\n4.  Click **Start deletion** to initiate the deletion process. You can’t undo the deletion of your test data.\n\nTest mode is temporarily unusable while the deletion process occurs.\n\n### Test email ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBy default, Stripe won’t send an email to customers in test mode. If you want to verify emails for invoices and receipts, you can set the email address for your [Team](https://dashboard.stripe.com/settings/team) on the `Customer` object or `receipt_email` attribute on the PaymentIntent.\n\n## Testing use cases ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe following table contains quality assurance (QA) testing use cases:\n\n| **Use case** | **Action** |\n| --- | --- |\n| Charge success (capturing immediately) | *   No error.<br>*   The charge appears as **Succeeded** in the Dashboard under [Payments](https://dashboard.stripe.com/payments).<br>*   Stripe captures the charge. |\n| PaymentIntent authorization success ([capturing funds for later](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method)) | `{   ...   \"capture_method\": \"manual\",   ...   \"status\": \"requires_capture\",   ... }` |\n| PaymentIntent capture success (capturing immediately or [capturing funds for later](https://docs.stripe.com/payments/place-a-hold-on-a-payment-method)) | `{     ...     \"status\": \"succeeded\",     ...   }` |\n| Charge fail | The charge appears as **Failed** in the Dashboard under [Payments](https://dashboard.stripe.com/payments).<br><br>`{   \"error\": {     \"charge\": \"ch_M8RkAWVyLbjkn1oJ\",     \"code\": \"card_declined\",     \"decline_code\": \"<<REASON HERE>>\",     \"doc_url\": \"[https://docs.stripe.com/error-codes#card-declined](https://docs.stripe.com/error-codes#card-declined)\",     \"message\": \"Your card was declined.\",     \"type\": \"card_error\"   } }` |\n| Radar block | No matter which version of Radar you use, it might block a charge due to [high risk](https://docs.stripe.com/radar/risk-evaluation#high-risk) or a [rule](https://docs.stripe.com/radar/rules). The response is the same as what you get when a charge fails. |\n| Charge disputed | *   The charge appears as **Disputed** in the Dashboard under [Payments](https://dashboard.stripe.com/payments).<br>*   Stripe debits the charge amount plus the dispute fee from the balance, creates a `Dispute` object along with its associated `charge.dispute.created` event.<br><br>`{   \"object\": {     \"id\": \"du_QfvJEU4Hzh79jwSJ\",     \"object\": \"dispute\",     \"charge_id\": \"ch_O1SJ4bOBs0dfxAHn\",     ...     \"status\": \"needs_response\"   } }` |\n| Charge inquiry opened | Inquiries are similar to disputes, with three key distinctions: no funds are withdrawn unless we elevate an inquiry to a dispute, they remain refundable until disputed, and have a different set of statuses. In this case, Stripe fires a `charge.dispute.created` event.<br><br>`{   \"object\": {     \"id\": \"du_ZBdFbe6VvYmBZ7s1\",     \"object\": \"dispute\",     \"charge_id\": \"ch_lyc5fKGS2eqX32gl\",     ...     \"is_charge_refundable\": true,     ...     \"status\": \"warning_needs_response\"   } }` |\n| Dispute won | *   When a customer wins a dispute, the funds of the original charge are restored to the account, less the dispute fee.<br>*   Stripe updates the existing `Dispute` object, and fires a `charge.dispute.closed` event.<br><br>`{   \"object\": {     \"id\": \"du_HK2UIDkvTdeY4Xbi\",     \"object\": \"dispute\",     \"charge_id\": \"ch_bzRb22cE1O3VzFxq\",     ...     \"status\": \"won\"   } }` |\n| Dispute lost | When a customer loses a dispute, Stripe updates the existing `Dispute` object, and fires a `charge.dispute.closed` event.<br><br>`{   \"object\": {     \"id\": \"du_u3aeF7tj9JmWdsd7\",     \"object\": \"dispute\",     \"charge_id\": \"ch_SlDZLYWRxOpugziT\",     ...     \"status\": \"lost\"   } }` |\n| Inquiry won | When you win an inquiry, your balance remains the same, as no funds were removed when you initially opened the inquiry. Stripe updates the existing `Dispute` object, and fires a `charge.dispute.closed` event.<br><br>`{   \"object\": {     \"id\": \"du_XQr5jHPRG3Y2bwFK\",     \"object\": \"dispute\",     \"charge_id\": \"ch_SY2ZjqSx9vNjrkvo\",     ...     \"status\": \"warning_closed\"   } }` |\n| Inquiry lost | *   When you lose an inquiry, it escalates to a dispute.<br>*   When it escalates to a dispute, its status changes with a `charge.dispute.updated` event, and funds are withdrawn in a `charge.dispute.funds_withdrawn` event:<br><br>`{   \"object\": {     \"id\": \"du_afqRd7GukO0KUitF\",     \"object\": \"dispute\",     \"charge_id\": \"ch_gbrLL7GgYlhrb8u5\",     ...     \"status\": \"needs_response\"   } }` |\n| Charge refunded | The charge appears as **Refunded** in the Dashboard under [Payments](https://dashboard.stripe.com/payments).<br><br>`{   \"id\": \"re_nKGgs4PBSs2JOhsm\",   \"object\": \"refund\",   \"amount\": \"<<FULL AMOUNT>>\",   \"charge\": \"ch_hJX0jADa2N8fSjkA\",   ...   \"payment_intent\": \"pi_Dyk2AjMRSXhCsy3P\", // if you're using PaymentIntents   ...   \"status\": \"succeeded\" }` |\n| Charge partially refunded | *   The charge appears as **Refunded** in the Dashboard under [Payments](https://dashboard.stripe.com/payments).<br>*   The refund amount is different from the charge amount, and you can still dispute partially-refunded charges.<br><br>`{   \"id\": \"re_LSCddGxrKyuBxIXd\",   \"object\": \"refund\",   \"amount\": \"<<PARTIAL AMOUNT>>\",   \"charge\": \"ch_o3P64OytoGb4qC9l\",   ...   \"payment_intent\": \"pi_YLB1BikJJwGBjwKE\", // if you are using PaymentIntents   ...   \"status\": \"succeeded\" }` |\n| Account balance goes negative | Make sure to test for a negative balance on Stripe and verify that your bank accounts can accept debits from us. |\n| Successful payout | If you enable webhooks for a [successful payout](https://docs.stripe.com/api/events/types#event_types-payout.paid) (recommended), test your handling of the event. |\n| Failed payout | If you enable webhooks for a [failed payout](https://docs.stripe.com/api/events/types#event_types-payout.failed) (recommended), test your handling of the event. |\n\n## Stripe’s Postman collection ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPostman is a widely-used API development tool. To make integrating Stripe easier, we provide a [Payments-specific Postman collection](https://www.getpostman.com/collections/080102f58f29afa081d7) with the tools you need to test the server-side component of your integration.\n\n### Import the collection ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo begin, you need to access the Postman app. You can use either the browser or desktop version. After launching the app, import the collection.\n\nTo start this process on the web, press the **Import** button at the top-left corner, followed by the **Link** option. Insert the [Payments collection](https://www.getpostman.com/collections/080102f58f29afa081d7) link. If you’re using the Postman desktop app, click **File > Import**. After successfully importing, the collection appears under **Collections**.\n\n![The Import dialog](https://b.stripecdn.com/docs-statics-srv/assets/postman-import-modal.9cae305f4da63f7bd88cb89885c2e884.png)\n\nThe import dialog\n\n### Use the collection ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo use the collection, navigate to the collection you just imported and click **Variables**. Copy your testmode Stripe [secret key](https://dashboard.stripe.com/test/apikeys) from the Stripe Dashboard, and paste it into the **Initial Value** field. After you complete this step, you’re ready to begin making requests.\n\nOther variables are populated by scripts during the runtime of the collection. For example, when creating a [customer](https://docs.stripe.com/api/customers/create), [price](https://docs.stripe.com/api/prices/create), [charge](https://docs.stripe.com/api/charges/object) or [PaymentIntent](https://docs.stripe.com/api/payment_intents/object), the system saves that ID through a script in the collection, which is then accessible for later requests, like issuing a refund.\n\n![The Variables Tab for the Collection](https://b.stripecdn.com/docs-statics-srv/assets/postman-variables-tab.791bd1b3fdb2d972387aa80b9e3555de.png)\n\nAdd a secret key to a Postman collection",
  "title": "Test mode and use cases | Stripe Documentation",
  "description": "Use test mode and our uses cases to test your integration.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/payments/boleto/set-up-invoices",
  "markdown": "# Use Boleto with invoices | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to use Boleto with invoices.\n\nLearn how to set up [Boleto](https://docs.stripe.com/payments/boleto) as a [payment method](https://docs.stripe.com/api/payment_methods \"PaymentMethods\"). Boleto is a voucher with a generated number that [Customers](https://docs.stripe.com/api/customers \"Customers\") can obtain from an ATM, a bank, an online bank portal, or an authorized agency.\n\n[](#enable-boleto-emails)\n\nBefore you start your integration, go to **Manage payments that require confirmation** in your [Subscriptions and emails settings](https://dashboard.stripe.com/settings/billing/automatic) and enable **Send a Stripe-hosted link for customers to confirm their payments when required**.\n\n[](#set-collection-method)\n\nYou can set the collection method in the Dashboard or [API](https://docs.stripe.com/api/invoices/create#create_invoice-collection_method). For invoices, you can choose to either send an invoice or charge your customer automatically. If you’re using the API, the `send_invoice` and `charge_automatically` values determine the collection method.\n\n|     | Send invoice | Charge automatically |\n| --- | --- | --- |\n| When to use | *   Your customer hasn’t defined their preferred payment method to pay invoices or subscriptions. In this case, you want to give them the option to use either a credit card or Boleto.<br>*   You’re missing important customer information required to use Boleto (full name, address, and tax ID). | *   Your customer already chose to pay for their invoices or subscriptions using boletos.<br>*   You have the customer information needed to create an invoice that uses Boleto (full name, address, and tax ID). |\n| Customer experience | *   Your customer needs to reenter their personal information details (full name, address, and tax ID) every time you send a new invoice, or for each new subscription cycle. This collection method doesn’t take into account the default payment method associated with that customer. | *   Your customer has Boleto set up as their default payment method. Your customer receives an email with a Boleto voucher every time you send them an invoice, or there’s a subscription cycle. |\n| Expiration and due dates | *   The invoice must contain a due date.<br>*   Stripe creates the boleto—regardless of the invoice due date—as soon as your customer enters the needed details. Because boletos have their own expiration date (the default is 3 days), the invoice due date and the boleto expiration date won’t necessarily match. The boleto might expire before or after the invoice is due. | *   The invoice doesn’t have a due date.<br>*   Stripe creates the boleto when the merchant creates the invoice with a selected expiration date (the default is 3 days). |\n\n[](#create-customers)\n\nCreate a customer for every new user or business you want to bill. When you create a new customer, set up a [minimal customer profile](#customer-profile) to help generate more useful invoices, and enable Smart Retries (if you’re an [Invoicing Plus](https://stripe.com/invoicing/pricing) user). After you set up your customer, you can issue one-off invoices or create [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\").\n\n#### Caution\n\nBefore you create a new customer, make sure that the customer doesn’t already exist in the Dashboard. Creating multiple customer entries for the same customer can cause you problems later on, such as when you need to reconcile transaction history or coordinate saved payment methods.\n\nYou can create and manage customers on the [Customers page](https://dashboard.stripe.com/customers) when you don’t want to use code to create a customer, or if you want to manually bill a customer with a one-off invoice.\n\n#### Note\n\nYou can also create a customer in the Dashboard during invoice creation.\n\n### Create a customer ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you create a new customer, you can set their account and billing information, such as **Email**, **Name**, and **Country**. You can also set a customer’s preferred language, currency, and other important details.\n\nTo create a customer, complete these steps:\n\n1.  Verify that the customer doesn’t already exist.\n    \n2.  Click **Add customer**, or press **N**, on the **Customers** page.\n    \n3.  At a minimum, enter your customer’s **Name** and **Account email**.\n    \n4.  Click **Add customer** in the dialog.\n    \n\n### Edit a customer ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo edit a customer’s profile, complete these steps:\n\n1.  Find the customer you want to modify and click the name on the **Customers** page.\n    \n2.  In the account information page, select **Actions** > **Edit information**.\n    \n3.  Make your changes to the customer profile.\n    \n4.  Click **Update customer**.\n    \n\n### Delete a customer ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo delete a customer, complete these steps:\n\n1.  Find the customer you want to delete on the **Customers** page.\n    \n2.  Click the checkbox next to your customer’s name followed by **Delete**. You can also click into the customer’s details page and select **Actions** > **Delete customer**.\n    \n\n[](#create-product-price)\n\nDefine all your business and product offerings in one place. [Products](https://docs.stripe.com/api/products \"Products\") define what you sell and [Prices](https://docs.stripe.com/api/prices \"Prices\") track how much and how often to charge. This is a core entity within Stripe that works with [subscriptions](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\"), [invoices](https://docs.stripe.com/api/invoices \"invoices\"), and [Checkout](https://docs.stripe.com/payments/checkout).\n\nPrices enable these use cases:\n\n*   A software provider that charges a one-time setup fee whenever a user creates a new subscription.\n*   An e-commerce store that sends a recurring box of goods for 10 USD per month and wants to allow customers to purchase one-time add-ons.\n*   A professional services firm that can now create a standard list of services and choose from that list per invoice instead of typing out each line item by hand.\n*   A non-profit organization that allows donors to define a custom recurring donation amount per customer.\n\nYou can manage your product catalog with products and prices. Products define what you sell and prices track how much and how often to charge. Manage your products and their prices in the Dashboard or through the API.\n\nIf you used the Dashboard in test mode to set up your business, you can copy each of your products over to live mode by using **Copy to live mode** in the [Product catalog page](https://dashboard.stripe.com/products). Use our official libraries to access the Stripe API from your application.\n\n1.  Navigate to the **Product catalog** page, and click **Add product**.\n    \n2.  Select whether you want to create a **One-time product**, or a **Recurring one-time product**.\n    \n3.  Give your product a name, and assign it a price.\n    \n\n[](#create-invoice)\n\nTo create and send an invoice, complete these steps:\n\n1.  In the Dashboard, go to the [Invoices overview page](https://dashboard.stripe.com/invoices), then click **Create Invoice** to open the [invoice editor](https://dashboard.stripe.com/invoices/create). Whenever you exit the invoice editor, Stripe saves a draft. To delete a draft invoice, click the overflow menu () next to an invoice on the [Invoices page](https://dashboard.stripe.com/invoices).\n2.  Choose an existing customer by entering their name.\n3.  Select your product under **Items**, and enter the **Quantity**. Stripe automatically populates the product’s price based on what you selected when you first created the product.\n4.  Optional Click **Item options** if you need to add a tax rate, coupon, or supply date.\n    \n    #### Note\n    \n5.  Optional Use the **Memo** box to provide more information to your customer. You can edit the memo on an invoice by clicking **Edit memo** on its details page.\n6.  Select the following invoice delivery option, depending on whether you want to send the invoice or charge your customer automatically:\n    \n    #### Note\n    \n    If you want to automatically charge your customer using Boleto, navigate to the [Customers page](https://dashboard.stripe.com/customers), click on the customer, and select **Add Boleto** under Payment methods.\n    \n    *   **Automatically charge a payment method on file**—Immediately charges the invoice amount to the payment method that you have on file for the customer. (Select **Boleto** as the payment option.)\n        \n    *   **Email invoice with link**—Enables Stripe to send an email with a payment page and an invoice PDF. (Select **Boleto** and **card** as the payment options.)\n        \n7.  Optional Expand **Advanced options**, and add [custom fields](https://docs.stripe.com/invoicing/customize#custom-fields). You can also choose whether you want item prices to **Include inclusive tax** or **Exclude tax**. To learn more, see [Net prices and taxes](https://docs.stripe.com/invoicing/taxes#net-price-taxes). Expand **Advanced options**, and add [custom fields](https://docs.stripe.com/invoicing/customize#custom-fields).\n8.  Click **Review invoice** and decide whether you want to include additional emails or continue editing. Send the invoice.\n\nIf you automatically charge your customer, they still need to pay the Boleto for the payment to succeed (despite the finalization of the invoice.) Stripe sends your customer an email with a link that they can visit to complete their Boleto payment.\n\nCreate an invoice with the Dashboard",
  "title": "Use Boleto with invoices | Stripe Documentation",
  "description": "Learn how to use Boleto with invoices.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-data/migrate-queries",
  "markdown": "# Migrate queries | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to migrate your Sigma queries from the version running on Presto v334 to the version running on Trino v414.\n\nWe upgraded Sigma’s query infrastructure from [Presto v334](https://trino.io/docs/334/sql.html) to [Trino v414](https://trino.io/docs/414/sql/select.html). Most queries run faster as a result of the upgrade, but a few queries might error unexpectedly or produce results in different formats.\n\nUse the following suggestions to make your Sigma queries compatible with Trino v414.\n\n## Invalid time zones![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `AMERICA/NEW_YORK` time zone is no longer valid in Trino v414.\n\n`-- FAILED: Presto error: NOT_SUPPORTED: Time zone not supported: AMERICA/NEW_YORK select     date_format(         c.created AT TIME ZONE 'AMERICA/NEW_YORK',         '%Y-%m-%d'     ) from     charges c`\n\nInstead, use `America/New_York`.\n\n`-- VALID select     date_format(         c.created AT TIME ZONE 'America/New_York',         '%Y-%m-%d'     ) from     charges c`\n\n## Invalid column references![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTrino v414 doesn’t allow referencing column names with their originating sub-query or conditional table expression (CTE) out of scope.\n\n`-- FAILED: Presto error: COLUMN_NOT_FOUND: Column 'c.created' cannot be resolved select c.created from (select created from charges c)`\n\nThe previous query is invalid because the sub-query `c` isn’t defined at the top level but is referenced at the top level, out of its defined scope.\n\n`-- VALID select created from (select created from charges c)`\n\n`-- VALID select c.created from (select created from charges) c`\n\nEither reference the column without the sub-query or define the sub-query at the same level as its reference.\n\n## Scientific notation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCasting a [double](https://trino.io/docs/414/language/types.html#double) to a [varchar](https://trino.io/docs/414/language/types.html#string) in Trino v414 produces results in scientific notation instead of decimal notation as in Presto v334.\n\n`-- RESULT: 1.0E2 select cast(100.0 as varchar)`\n\nTo maintain this decimal notation, cast the double as a [decimal](https://trino.io/docs/414/language/types.html#decimal) and then as a varchar.\n\n`-- RESULT: 100.0 select cast(cast(100.0 as decimal(18,1)) as varchar)`\n\n## Timestamp functions![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n### FROM\\_UNIXTIME![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTrino v414 assumes that the result timestamp is in UTC and adds a trailing “UTC” when using [from\\_unixtime](https://trino.io/docs/414/functions/datetime.html?highlight=from_unixtime#from_unixtime).\n\n`-- Trino v414 RESULT: 1970-01-01 00:00:00.000 UTC -- Presto v334 RESULT: 1970-01-01 00:00:00 +0000 select from_unixtime(0)`\n\nTo remove the trailing “UTC”, cast the result of `from_unixtime` as `timestamp`.\n\n`-- RESULT: 1970-01-01 00:00:00 +0000 select cast(from_unixtime(0) as timestamp)`\n\n### TO\\_ISO8601![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIn Presto v334, [to\\_iso8601](https://trino.io/docs/414/functions/datetime.html?highlight=to_iso8601#to_iso8601) adds a trailing Zulu time zone suffix (“Z”) to a timestamp without a time zone while Trino v414 doesn’t.\n\n`-- Presto v334 RESULT: 2024-04-01T00:00:00.000Z -- Trino v414 RESULT: 2024-04-01T00:00:00 select to_iso8601(timestamp '2024-04-01')`\n\nTo make sure the trailing Zulu time zone suffix is added, interpret the timestamp in UTC before calling `to_iso8601`.\n\n`-- RESULT: 2024-04-01T00:00:00Z select to_iso8601(timestamp '2024-04-01' at time zone 'UTC')`\n\n## Query non-determinism![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf you query is non-deterministic, regardless of the Sigma version, different executions can yield different results. Here are common query patterns that can lead to non-deterministic results.\n\n### Top K queries![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`-- POTENTIALLY NON-DETERMINISTIC select * from charges order by created DESC limit 10`\n\nIf the 10th and 11th latest created charges were created at the same time, there’s no guarantee which charge is returned. Make sure to also sort on a unique identifier for deterministic results.\n\n`-- DETERMINISTIC select * from charges order by created DESC, id limit 10`\n\n### Window aggregation![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n`-- POTENTIALLY NON-DETERMINISTIC select     * from     (         select             c.*,             row_number() over (                 partition by c.customer_id                 order by                     c.amount DESC             ) as row_rank         from             charges c     ) where     row_rank = 1`\n\nThe above query returns the biggest charge for each customer using [row\\_number](https://trino.io/docs/414/functions/window.html?highlight=row_number#row_number). See [window functions](https://trino.io/docs/414/functions/window.html). If a customer has multiple charges with the same maximum amount, there’s no guarantee which charge is returned.\n\nSort on a unique identifier in the window ordering for deterministic results.\n\n`-- DETERMINISTIC select     * from     (         select             c.*,             row_number() over (                 partition by c.customer_id                 order by                     c.amount DESC, c.created DESC, c.id             ) as row_rank         from             charges c     ) where     row_rank = 1`",
  "title": "Migrate queries | Stripe Documentation",
  "description": "Learn how to migrate your Sigma queries from the version running on Presto v334 to the version running on Trino v414.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/atlas/payments-business-bank",
  "markdown": "# Business bank accounts | Stripe DocumentationThe Stripe Docs logo\n\n## Use our banking partners to set up your business bank account.\n\nStripe Atlas founders can open a business bank account with one of our partners after forming a company. Our banking partners determine supportability and might not be able to support all businesses. After you complete your company formation process, you can [activate your US Stripe payments account](https://docs.stripe.com/get-started/account/activate) and add your bank account through the Dashboard.\n\n## Mercury ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nMercury works well for all startups. It lets startups open a 0 USD per month, FDIC-insured bank account from anywhere in the world. Mercury is best for high-growth tech startups. It offers startup-friendly features like free international USD wire transfers and access to venture debt, and allows customized banking options through the API. Atlas helps prefill fields for faster setup when you launch a Mercury application, and our users get 500 USD or more back when you deposit at least 10,000 USD within 60 days.\n\n#### Note\n\n### Set up a Mercury bank account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhen you apply for a Mercury business bank account, Atlas uses your information to prefill as many of these required fields as possible:\n\n*   A description of your business and link to your website (if available).\n    \n*   Filed formation (incorporation) documents from the state of Delaware. You can access these through the [Dashboard](https://dashboard.stripe.com/atlas/company).\n    \n*   Articles of Incorporation and a record of an EIN filing with the IRS (Form CP575, Form 147c, filed or completed Form SS-4, or a screenshot of the EIN confirmation from the IRS’s website). You can access these documents through the [Dashboard](https://dashboard.stripe.com/atlas/company). Atlas passes them to Mercury automatically if you launch a Mercury application from the Dashboard.\n    \n*   An international passport or US government ID for each founder or majority owner (more than 25%) of the company.\n    \n*   A residential address (doesn’t have to be in the US) of each beneficial owner of the company.\n    \n*   An email address for each beneficial owner of the company.\n    \n*   A US Social Security number for each beneficial owner of the company (if applicable).\n    \n*   A phone number for each beneficial owner of the company.\n    \n\nAtlas users can open a Mercury account after incorporation, before the IRS issues their EIN. After your EIN arrives, you must submit it to Mercury no later than 90 days after account opening. They may close your account if you don’t submit within that window.\n\n## Novo ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nNovo works well for US-based small businesses, solo entrepreneurs, and bootstrapped startups.\n\nTrusted by over 200,000 businesses, Novo is a financial platform that offers fee-free, no minimum checking accounts. Novo partners with Stripe to provide payouts in hours via Novo Boost, free of charge. Novo also offers free invoicing, budgeting, expense categorization tools, and integration with your favorite business apps. Atlas users may receive exclusive perks, including $500 back when you spend $10k on your Novo card in the first 90 days.\n\nAll customer deposits are FDIC insured up to $250,000 through Middlesex Federal Savings F.A.; Member FDIC.\n\nVisit Novo’s site to learn more [about them](https://www.novo.co/about) and [their features](https://www.novo.co/features).\n\n### Set up a Novo bank account ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIn addition to your company information from your Atlas documents, you’ll need to provide:\n\n*   A US social security number for one of your company’s founders\n    \n*   A business and residential address (these can be the same address)\n    \n*   A business and personal phone number (these can be the same phone number)\n    \n*   A valid government ID",
  "title": "Business bank accounts | Stripe Documentation",
  "description": "Use our banking partners to set up your business bank account.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/cli/help",
  "markdown": "# Stripe CLI Reference\n\n[cli](https://docs.stripe.com/cli)",
  "title": "Stripe CLI Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/stripe-data/query-connect-data",
  "markdown": "# Query Connect data | Stripe DocumentationThe Stripe Docs logo\n\n## Use Sigma and Data Pipeline to retrieve information about Connect.\n\n[Connect](https://docs.stripe.com/connect \"Connect\") platforms can report on their connected accounts using Sigma or Data Pipeline. You can write queries that run across your entire platform in much the same way as your own Stripe account.\n\nAdditional groups of Connect-specific tables within the schema are located in the **Connect** sections of the schema. If you don’t operate a Connect platform, these tables are not displayed.\n\n## Connected account information![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe `connected_accounts` table provides a list of [Account](https://docs.stripe.com/api#account_object) objects with information about connected accounts. This table is used for account-level information across all accounts on your platform, such as [business name](https://docs.stripe.com/api#account_object-business_name), [country](https://docs.stripe.com/api#account_object-country), or the user’s [email address](https://docs.stripe.com/api#account_object-email).\n\nThe following example uses the `connected_accounts` table to retrieve a list of five accounts for individuals located in the US that have [payouts](https://docs.stripe.com/payouts \"payout\") disabled because Stripe does not have the [required verification information](https://docs.stripe.com/connect/required-verification-information) to [verify their account](https://docs.stripe.com/connect/identity-verification).\n\n`select     id,     email,     legal_entity_address_city as city,     legal_entity_address_line1 as line1,     legal_entity_address_postal_code as zip,     legal_entity_address_state as state,     legal_entity_dob_day as dob_day,     legal_entity_dob_month as dob_month,     legal_entity_dob_year as dob_year,`\n\nAll the required fields for individual accounts in the US are retrieved as columns. This allows you to see what information has been provided, and what is needed, for each account. This can be seen in the example report below (some columns have been omitted for brevity).\n\n| id  | email | city | …   | id\\_provided | document\\_id |\n| --- | --- | --- | --- | --- | --- |\n| acct\\_VIZ1jhN… | jenny.rosen@example.com | San Francisco | …   | true | file\\_SAcgarB… |\n| acct\\_SHfBJ6z… | sophia.garcia@example.com |     | …   | false | file\\_oNNWAxQ… |\n| acct\\_0pd6iEe… | natalie.davis@example.com | Seattle | …   | true | file\\_tjZLIML… |\n| acct\\_N1yvO0s… | ella.thompson@example.com | Austin | …   | false | file\\_dWUBRC6… |\n| acct\\_Rz0jyzJ… | james.smith@example.com |     | …   | false | file\\_AhmskXV… |\n\n## Accounts with requirements ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nThe `connected_accounts` table also contains information about the `requirements` and `future_requirements` for connected accounts. Use the table to retrieve lists of accounts that have requirements currently due and will be disabled soon. Use the `future_requirements` columns to [handle verification updates](https://docs.stripe.com/connect/handle-verification-updates).\n\nThe following example uses the `connected_accounts` table to retrieve a list of accounts that have upcoming verification updates.\n\n`select   id,   business_name,   requirements_currently_due,   future_requirements_currently_due from   connected_accounts where   future_requirements_currently_due != ''`\n\nThe `requirements_past_due`, `requirements_currently_due`, `requirements_eventually_due`, `future_requirements_past_due`, `future_requirements_currently_due`, and `future_requirements_eventually_due` are comma-separated lists of requirements on the account.\n\n| id  | business\\_name | requirements\\_currently\\_due | future\\_requirements\\_currently\\_due |\n| --- | --- | --- | --- |\n| acct\\_1I7mkwXysoc4TB0h | RocketRides |     | business\\_profile.url |\n| acct\\_1UmyxtrJMVIZxX65 | Kavholm |     | individual.email,settings.payments.statement\\_descriptor |\n| acct\\_1a0voJPvQLAI1J6k | FurEver | external\\_account | settings.payments.statement\\_descriptor |\n| acct\\_1MZxdFpGA2VPw4zU | Pasha | business\\_profile.url | company.tax\\_id |\n\n## Transactional data for connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n[Transactional](https://docs.stripe.com/stripe-data/query-transactions) and [subscription](https://docs.stripe.com/stripe-data/query-billing-data) data for connected accounts is contained within the `connected_account_` tables. The available data for connected accounts is organized and structured in the same way as data for your own account.\n\nFor instance, the `balance_transactions` table, located in the **Payments** section, contains balance transaction data for your Stripe account. The `connected_account_balance_transactions` table, located in the **Connect - Payments** section, contains balance transaction data for your connected accounts. Each Connect-specific table has an additional `account` column containing the identifier of a connected account. This can be used when joining tables to build advanced queries.\n\nThe following example is based upon the default query that’s loaded into the editor. Instead of retrieving the ten most recent balance transactions on your account, it does so across all of your platform’s connected accounts.\n\n`select       date_format(created, '%m-%d-%Y') as day,       account, -- Added to include corresponding account identifier       id,       amount,       currency,       source_id,       type     from connected_account_balance_transactions -- Changed to use Connect-specific table     order by day desc     limit 5`\n\n| day | account | id  | amount | currency | source\\_id | type |\n| --- | --- | --- | --- | --- | --- | --- |\n| 7/12/2024 | acct\\_Jl0y0Jv… | txn\\_UyD7poD… | \\-1,000 | usd | re\\_oAP7jIW… | refund |\n| 7/12/2024 | acct\\_U9EITUu… | txn\\_mE6uSkF… | 1,000 | usd | ch\\_GWozPuI… | charge |\n| 7/12/2024 | acct\\_fdoSuFG… | txn\\_bFQ37Nc… | 1,000 | usd | ch\\_xDRAy7Z… | charge |\n| 7/12/2024 | acct\\_n7o4OAX… | txn\\_x1ywNGk… | 1,000 | eur | ch\\_Y86tmJG… | charge |\n| 7/12/2024 | acct\\_BMrewXM… | txn\\_rKX37NB… | \\-1,000 | usd | re\\_OEAs0WP… | refund |\n\nRefer to our [transactions](https://docs.stripe.com/stripe-data/query-transactions) and [subscriptions](https://docs.stripe.com/stripe-data/query-billing-data) documentation to learn more about querying transactional and subscription data. You can then supplement or adapt your queries with Connect-specific information to report on connected accounts.\n\n### Query charges on connected accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUse Sigma or Data Pipeline to report on the flow of funds to your connected accounts. How you do this depends on your platform’s approach to creating charges.\n\n## Direct charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your platform creates [direct charges](https://docs.stripe.com/connect/direct-charges) on a connected account, they appear on the connected account, not on your platform. This is analogous to a connected account making a charge request itself. Platforms can use the Connect-specific tables (for example, `connected_account_charges` or `connected_account_balance_transactions`) to report on direct charges.\n\nAccess the [direct charges query template](https://dashboard.stripe.com/sigma/queries/templates/Direct%20charges) to retrieve itemized information about application fees earned through direct charges, and reports on the connected account, transfer, and payment that is created.\n\n## Destination charges![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf your platform creates [destination charges](https://docs.stripe.com/connect/destination-charges) on behalf of connected accounts, charge information is available within your own account’s data. A separate transfer of the funds to the connected account is automatically created, which creates a payment on that account. For example, the [destination charges query template](https://dashboard.stripe.com/sigma/queries/templates/Destination%20charges) reports on transfers related to destination charges made by your platform. One way to analyze the flow of funds from a destination charge to a connected account is by joining the `transfer_id` column of the `charges` table to the `id` column of the `transfers` table. This example includes the original charge identifier and amount, the amount transferred to the connected account, and the connected account’s identifiers and resulting payment.\n\n`select   date_format(date_trunc('day', charges.created), '%y-%m-%d') as day,   charges.id,   charges.amount as charge_amount,   transfers.amount as transferred_amount,   transfers.destination_id from charges inner join transfers   on transfers.id=charges.transfer_id order by day desc limit 5`\n\n| day | id  | charge\\_amount | transferred\\_amount | destination\\_id |\n| --- | --- | --- | --- | --- |\n| 7/12/2024 | ch\\_acct\\_0YrsWTU… | 1,000 | 1,000 | acct\\_cNn3Z6X… |\n| 7/12/2024 | ch\\_acct\\_Ed4l2oy… | 800 | 800 | acct\\_5jBPVaf… |\n| 7/12/2024 | ch\\_acct\\_AdXvTFH… | 1,000 | 800 | acct\\_dBiQJoz… |\n| 7/12/2024 | ch\\_acct\\_t2GqKo1… | 1,100 | 950 | acct\\_wMhn6KX… |\n| 7/12/2024 | ch\\_acct\\_ILHPJTR… | 1,100 | 1,100 | acct\\_eN8tSIG… |\n\nPayment and transfer information for Connected accounts is also available within Connect-specific tables (for example, `connected_account_charges`).\n\n### Separate charges and transfers![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nReport on [separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers) using a similar approach to destination charges. All charges are created on your platform’s account, with funds separately transferred to connected accounts using [transfer groups](https://docs.stripe.com/connect/separate-charges-and-transfers). A payment is created on the connected account that references the transfer and transfer group.\n\nBoth the `charges` and `transfers` table include a `transfer_group` column. Payment, transfer, and transfer group information is available within the Connect-specific `connected_account_charges` table.",
  "title": "Query Connect data | Stripe Documentation",
  "description": "Use Sigma and Data Pipeline to retrieve information about Connect.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/atlas/business-taxes",
  "markdown": "# Business taxes | Stripe DocumentationThe Stripe Docs logo\n\n## Learn everything you need to know about business taxes.\n\nCompanies formed in Delaware are subject to yearly tax obligations, including:\n\n*   US federal and state corporate income tax as applicable.\n*   Delaware franchise tax (for C Corporations) or annual LLC tax (for Limited Liability Companies).\n*   A similar annual tax if your Delaware company also operates in other US states.\n\nStripe’s partners can assist you in meeting tax requirements for states outside Delaware. Make sure to watch the calendar, and plan ahead to meet any tax deadlines that apply to your business.\n\n#### Tax and accounting advice\n\nStripe isn’t an accounting firm and can’t provide tax or accounting advice. Consult legal and tax professionals for advice on how to meet ongoing obligations that apply to your company. Before you get started, you might want to review the Stripe Atlas guide on [business taxes](https://stripe.com/atlas/guides/business-taxes).\n\n## File US Income Tax ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWhat information you need to prepare depends on whether you’re forming a [C Corporation](https://docs.stripe.com/atlas/company-types?business-type=ccorp) or [LLC](https://docs.stripe.com/atlas/company-types?business-type=llc). Before working with an accountant and filing taxes, prepare as much of your company’s year-end financial data as possible. This is part of your [bookkeeping](https://stripe.com/atlas/guides/bookkeeping-and-accounting#what-is-bookkeeping-what-is-accounting) responsibilities. You can use tools like [Bench](https://bench.co/partner/stripe-atlas/?utm_campaign=support) or [Pilot](https://pilot.com/) to help you with this process.\n\nBe sure to have the following information for your corporation (as of the last day of the fiscal year that you’re filing for):\n\n*   **General business information**: This includes your EIN.\n    \n*   **Company financials**: You can learn about year-end financial reports in our guide [tax season](https://stripe.com/atlas/guides/tax-season#before-you-speak-to-an-accountant). If you don’t have any revenue or expenses for the past fiscal year, you might still need to file taxes.\n    \n*   **Company ownership**: Your corporation might have shares held by individual shareholders or business entities. Make sure the information reflects the current ownership.\n    \n*   **Additional information**: If your company employs people, owns property, operates locally in the US, or operates abroad, you might have additional tax and reporting requirements. Some of the taxes you might want to ask about include:\n    \n    *   Transfer pricing (if you’re based outside the US).\n    *   State taxes (if you have business activity in any US state).\n    *   Sales taxes.\n    *   Employment taxes.\n\nIf you’re still waiting for your EIN, you can enter **Applied For** and the application date (which you can find on your Form SS-4 in the Dashboard) in your tax forms.\n\n## Tax partners ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nEach US business is required to pay income taxes. We’ve partnered with tax and accounting advisors who specialize in working with startups to provide you affordable options for filing your corporate income taxes. Top startups use these services and they offer discounts for Stripe Atlas users. Each service specializes in a different area—choose the one that’s right for your company.\n\n1.  [Legalinc](https://stripe.legalinc.com/annualreport/1?new=1) is best for Delaware franchise tax help if this is the only filing you want help with at this time (you’ll still need to file federal taxes for the 2023 tax year). They’ll pre-fill your Delaware franchise tax filing with you Atlas company information.\n2.  [Mosey](https://mosey.com/stripe-atlas/) is best for startups that want ongoing help with registration and compliance filings in multiple states (including the Delaware franchise tax) without federal tax prep or bookkeeping.\n3.  [Bench](https://bench.co/partner/stripe-atlas/?utm_campaign=support) is best for pre-revenue startups or small startups who want recurring tax or bookkeeping services for state and federal taxes.\n4.  [Pilot](https://pilot.com/partner/atlas?utm_medium=web&utm_source=partner&utm_campaign=atlas_referrals) is best for startups planning to raise funding, who want recurring tax and bookkeeping services for state and federal taxes.\n5.  [Cleer](https://www.cleer.tax/partner/atlas) is best for startups that want one-time assistance with federal and state tax prep.\n\n## File taxes in Delaware ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYour company’s tax and reporting obligations in Delaware depend on whether you’re forming a [C Corporation](https://docs.stripe.com/atlas/company-types?business-type=ccorp) or an [LLC](https://docs.stripe.com/atlas/company-types?business-type=llc).\n\nAll Delaware C Corporations are required to pay the Delaware franchise tax and to file an annual report, which you can [pay online](https://corp.delaware.gov/paytaxes/) if you want to complete it yourself. Even companies with no revenue in the previous fiscal year should expect to pay some amount. If you want to hire a tax professional to complete this, you can work with one of our [tax partners](https://docs.stripe.com/atlas/business-taxes#tax-partners) or a tax advisor of your own choosing.\n\n### Delaware franchise tax ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou have the option to recalculate your taxes due on the Delaware website. Follow the steps below. Delaware sends notices using a calculation method that results in large tax bills for companies with more than 5,000 shares. Most Atlas companies find they pay less tax when they use the [Assumed Par Value Capital](https://corp.delaware.gov/frtaxcalc/) method instead of the default Authorized Shares method. You can read about [these methods](https://corp.delaware.gov/frtaxcalc.shtml) on Delaware’s website. If the franchise tax isn’t submitted by March 1, there is a 200 USD late fee and interest of 1.5% per month on the tax amount originally due.\n\n#### Pay Delaware franchise tax ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nComplete the following steps to pay your Delaware franchise tax. You can save your work and return to it later, just make sure to save your session number, which the Delaware portal gives you the option of sending to an email address for easier access.\n\n1.  Login to [the state of Delaware’s website](https://icis.corp.delaware.gov/ecorp/logintax.aspx?FilingType=FranchiseTax) with your seven digit Delaware Business Entity File Number.\n    *   You can easily find your company’s file number in two ways:\n        1.  Use [Delaware’s entity search tool](https://icis.corp.delaware.gov/ecorp/EntitySearch/NameSearch.aspx) with your company’s legal name.\n        2.  Find the State of Delaware stamp on the second page of your **Filed Certificate of Incorporation**. You can find this in the [Dashboard](https://dashboard.stripe.com/atlas/company).\n2.  Click on the **File annual report** link.\n3.  Enter your company information:\n    *   Complete the **Stock information** section to adjust your taxes owed shown in the upper right corner: enter the number of shares your company has issued, your gross assets (your **Total assets** on your corporate income tax return), and your **Asset date** (the same as your end of fiscal year). Then click the **Recalculate tax** button (can take some time to reload).\n    *   Complete all of the remaining required fields indicated with a red star.\n    *   If you haven’t adjusted your list of officers or directors since you incorporated, you can find these individuals in your **Board Approval** document in your [Dashboard](https://dashboard.stripe.com/atlas/company).\n4.  When all required information is complete, press the green **Continue filing** button to review your information for accuracy.\n5.  After you verify you entered all of the correct information, press the green **Proceed to payment** button.\n    *   You pay Delaware franchise tax and annual report filing fee either by credit card or ACH. After inputting your payment information, push the green **submit** button to finalize your Delaware state taxes.\n\n## State taxes beyond Delaware ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf your company operates in any US states other than Delaware, it might be subject to annual taxation, registration, and reporting requirements in the other states. Stripe recommends that you consult legal and tax professionals about what requirements apply to your business.\n\n## 2024 key tax season dates ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nPlan ahead to meet any tax deadlines that apply to your business. Refer to the following information if your company was active in 2023.\n\n*   March 1, 2024: [Delaware franchise tax](https://docs.stripe.com/atlas/business-taxes#file-delaware-tax) due (penalty for late payments: 200 USD fee and interest of 1.5% per month on the tax amount originally due).\n*   April 15, 2024: [US federal corporate income tax](https://docs.stripe.com/atlas/business-taxes?business-type=llc#file-us-corp-tax) due date.\n*   October 15, 2024: If you filed for an extension, this is the due date for filing [US corporate income taxes](https://docs.stripe.com/atlas/business-taxes#file-us-corp-tax).\n\nAlso, if your US company has employees or makes payments to US vendors, you might be required to file a US W-2 or 1099 form by January 31, 2024.\n\n### Dissolve your company ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nIf you aren’t operating your company anymore, you might still be obligated to file taxes every year until you dissolve it. When you dissolve a company, you might have tax filings and obligations for the year that you dissolve the company. You can work with our tax partners to figure out what your obligations are.\n\nC Corporations can be dissolved in the state of Delaware only after they pay Delaware franchise tax and file their annual report. LLCs can be dissolved only after they pay annual LLC tax (no annual report is required).\n\nYou can start the process of dissolving your company from the [Company tab](https://dashboard.stripe.com/atlas/company) of your Atlas Dashboard. You should consider working with a lawyer to ensure full dissolution of your company.\n\n## See also![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\n*   [Tax season guide](https://stripe.com/atlas/guides/tax-season)\n*   [Business taxes guide](https://stripe.com/atlas/guides/business-taxes)\n*   [Bookkeeping and accounting guide](https://stripe.com/guides/atlas/bookkeeping-and-accounting)\n*   [State of Delaware’s tax FAQ](https://corp.delaware.gov/taxfaq/)",
  "title": "Business taxes | Stripe Documentation",
  "description": "Learn everything you need to know about business taxes.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/atlas/how-atlas-works",
  "markdown": "# How Atlas works | Stripe DocumentationThe Stripe Docs logo\n\n## Learn what you can do with Atlas.\n\nStripe Atlas helps you set up your company by generating the documents you need, forming your company in Delaware, hiring a registered agent, and getting your US Tax ID. [Create an account](https://dashboard.stripe.com/register/atlas) to start your company with Stripe Atlas.\n\nWe help founders:\n\n*   Form a [C Corporation](https://docs.stripe.com/atlas/company-types?business-type=ccorp) or [Limited Liability Company (LLC)](https://docs.stripe.com/atlas/company-types?business-type=llc) in Delaware.\n    \n*   Get an [Employer Identification Number (EIN)](https://docs.stripe.com/atlas/signup#receive-tax-irs) from the US Internal Revenue Service (IRS).\n    \n*   Set up a [Delaware registered agent](https://docs.stripe.com/atlas/signup#agent-service).\n    \n*   Join the [Stripe Atlas Community](https://docs.stripe.com/atlas/partner-benefits#atlas-forum), a global community of entrepreneurs.\n    \n*   Create a [Stripe account](https://docs.stripe.com/get-started/account/activate) to accept payments from around the world.\n    \n*   Open a US [business bank account](https://docs.stripe.com/atlas/payments-business-bank).\n    \n*   Access 100,000 USD in exclusive benefits from Atlas partners, including legal and tax experts, and technology platforms.\n    \n*   Download free legal templates for common legal needs.\n    \n\n## Onboarding ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can start your US company with Stripe Atlas by creating a [Stripe account](https://dashboard.stripe.com/register/atlas) and submitting a short [Atlas form](https://docs.stripe.com/atlas/signup). After you complete the steps to form your company, you can [activate payments](https://docs.stripe.com/payments), open a [business bank account](https://docs.stripe.com/atlas/payments-business-bank), join the [Stripe Atlas Community](https://docs.stripe.com/atlas/partner-benefits#atlas-forum), and access other [partner benefits](https://docs.stripe.com/atlas/partner-benefits).\n\n## Pricing ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe Atlas costs 500 USD to set up the company and includes forming in Delaware and getting your company’s tax ID (EIN) from the IRS. We also maintain a Delaware [registered agent](https://docs.stripe.com/atlas/signup#agent-service) to keep your company in good standing for 100 USD per year. The first year is included in the 500 USD one-time setup fee.\n\n## Business costs ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou need to understand the tax, legal, and reporting obligations for all US companies, including:\n\n*   Filing US state and [federal taxes](https://docs.stripe.com/atlas/business-taxes) each year.\n    \n*   Maintaining a Delaware [registered agent](https://docs.stripe.com/atlas/signup#agent-service) to keep your company in good standing with Delaware. This is available to Stripe Atlas users for 100 USD per year. Your first year is included in the 500 USD one-time setup fee.\n    \n*   Filing [annual reports with the State of Delaware](https://docs.stripe.com/atlas/business-taxes#file-delaware-tax).\n    \n*   Ongoing state or country registration, reporting, and tax compliance requirements of the locations in which your business operates.\n    \n*   Maintaining a [business bank account](https://docs.stripe.com/atlas/payments-business-bank) (fees and eligibility might vary by bank).",
  "title": "How Atlas works | Stripe Documentation",
  "description": "Learn what you can do with Atlas.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-data/sigma-organizations",
  "markdown": "# Sigma for Organizations | Stripe DocumentationThe Stripe Docs logo\n\n## Sigma for OrganizationsInvite only\n\n## Query data across accounts belonging to an organization.\n\nIf you use [Stripe Organizations](https://docs.stripe.com/get-started/account/orgs) to unify your business across multiple Stripe accounts, you can run Sigma queries across multiple accounts with Sigma for Organizations. Using Sigma queries allows you to gain insights about your customers and payments across your entire business in the Dashboard.\n\n## Getting started ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nBefore you begin, complete the following steps:\n\n1.  [Create an organization](https://docs.stripe.com/get-started/account/orgs/build) and add all the accounts you want to include in your queries.\n2.  Enable Sigma in each account you want to include in your queries.\n3.  Make sure that you’re assigned a role at the organization-level with permissions to view reports (such as [Analyst](https://docs.stripe.com/get-started/account/teams/roles)) to run and execute Sigma queries.\n\n## Run Sigma queries across multiple accounts![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo run Sigma queries that span multiple accounts in your organization, follow these steps:\n\n1.  From the Dashboard, switch into your organization from the account picker, then click [**Sigma**](https://dashboard.stripe.com/org/sigma/queries).\n2.  Write a new query, choose from saved queries, or select from the list of templates.\n3.  To specify the accounts in scope of your query, click the **Run on accounts** dropdown in the top right corner, then click **Edit business accounts**.\n4.  Run the query across the accounts you selected.\n\n### Return results for each account![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nBy default, queries return results that include data across all selected accounts. To return results for each account, you can group results by `merchant_id`. For example, the following query returns the sum of payment intents in the last 14 days for each account and currency:\n\n`select   merchant_id,   currency,   sum(amount) as total_payment_volume_last_14d from payment_intents where created >= date_add('day', -14, current_date) group by 1, 2`\n\n| `merchant_id` | `currency` | `total_payment_volume_last_14d` |\n| --- | --- | --- |\n| acct\\_9N1RzRetYxbPISC | USD | 4934823 |\n| acct\\_gNe6FJafga1XLFg | CAD | 2235991 |\n| acct\\_2IE7oQNrZH2v55C | GBP | 1870021 |\n| acct\\_VOK3PNgEzg4FrcJ | EU  | 9008212 |\n\n### Filter accounts within a query![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo use the `merchant_id` field to filter results to specific accounts directly in your query, add a `WHERE merchant_id = 'acct_id'` clause. For example, the following query returns the total volume of payments in a specific account:\n\n`select   currency,   sum(amount) as total_payment_volume_last_14d from payment_intents where created >= date_add('day', -14, current_date) AND merchant_id in (   'acct_d8upQPPBbFtSIe1',   'acct_1fCSEPk3waoDZox' ) group by 1`\n\n| `currency` | `total_payment_volume_last_14d` |\n| --- | --- |\n| USD | 8833809 |\n| CAD | 9008212 |",
  "title": "Sigma for Organizations | Stripe Documentation",
  "description": "Query data across accounts belonging to an organization.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/issuing/cardholder/object",
  "markdown": "# Page not found | Stripe DocumentationThe Stripe Docs logo\n\nWe're sorry, we couldn't find the page you were looking for.\n\nTo view documentation for early access programs you’re enrolled in, [sign in to your Stripe account](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2F).\n\n[Return to Stripe Docs home](https://docs.stripe.com/)\n\n[\n\nStripe Docs\n\nExplore our guides and examples to integrate Stripe\n\n](https://docs.stripe.com/)[\n\nAPI Reference\n\nComplete reference documentation for the Stripe API\n\n](https://docs.stripe.com/api/)[\n\nSupport\n\nGet help with all of your Stripe products\n\n](https://support.stripe.com/)",
  "title": "Page not found | Stripe Documentation",
  "description": "Sorry, but the page you were looking for couldn't be found.",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/webhooks/signature",
  "markdown": "# Troubleshoot signature verification errors | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to fix a common error when listening to webhook events.\n\nWhen processing webhook events, we recommend securing your endpoint by [verifying](https://docs.stripe.com/webhooks#verify-official-libraries) that the event is coming from Stripe. You can verify this by using the `Stripe-Signature` header and calling the `constructEvent()` function with three parameters:\n\n*   `requestBody`: the request body string sent by Stripe\n*   `signature`: the Stripe-Signature header in the request sent by Stripe\n*   `endpointSecret`: the secret associated with your endpoint\n\n`Stripe::Webhook.construct_event(request_body, signature, endpoint_secret)`\n\nWhen calling this function, you might get a signature verification error.\n\n`Webhook signature verification failed. Err: No signatures found matching the expected signature for payload.`\n\nIf you get this error, at least one of the three parameters you passed to the above function is incorrect. The following steps explain how to verify that each parameter is correctly set.\n\n## Check the endpoint secret![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe most common error is using the wrong endpoint secret, so it’s important to confirm that it’s correct.\n\nIf you’re using a webhook endpoint created in the [Dashboard](https://dashboard.stripe.com/test/webhooks), open the endpoint in the Dashboard and click the **Reveal secret** link near the top of the page to view the secret.\n\n![Dashboard screenshot showing where to find the webhook secret key](https://b.stripecdn.com/docs-statics-srv/assets/dashboard-secret.ea91fb644ee376b25daee8438bc6a33c.png)\n\nIf you’re using the Stripe CLI, the secret is printed in the Terminal when you run the `stripe listen` command.\n\n![cli screenshot showing where to find the webhook secret key](https://b.stripecdn.com/docs-statics-srv/assets/cli-secret.43855dd95672a6d396ef8cf2eeb9e8fa.png)\n\nIn both cases, the secret starts with a `whsec_` prefix, but the secret itself is different. Don’t verify signatures on events forwarded by the CLI using the secret from a Dashboard-managed endpoint, or the other way around.\n\nFinally, print the `endpointSecret` used in your code, and make sure that it matches the one you found above.\n\n## Check the request body![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nThe request body must be the body string sent by Stripe in UTF-8 encoding without any changes. When you print it as a string it should look something like this.\n\n`{   \"id\": \"evt_xxx\",   \"object\": \"event\",   \"data\": {       ...   } }`\n\nSome frameworks try to be helpful and change the request body by doing things like adding or removing whitespace, reordering the key-value pairs, converting the string to JSON, or changing the encoding. All of these cases lead to a failed signature verification.\n\nThe following is a non-exhaustive list of frameworks that might parse or mutate the data using common configurations, and some tips on how to get the raw request body.\n\n### The stripe-node library with Express![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFollow our [integration quickstart guide](https://docs.stripe.com/webhooks/quickstart?lang=node).\n\n### The stripe-node library with Body Parser![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTry the various solutions listed in [this GitHub issue](https://github.com/stripe/stripe-node/issues/341).\n\n### The stripe-node library using Next.js endpoints![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTry disabling `bodyParser` and using `buffer(request)` as shown in [this example](https://github.com/stripe/stripe-node/blob/master/examples/webhook-signing/nextjs/pages/api/webhooks.ts) on GitHub.\n\n### The AWS API Gateway with Lambda function![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nFirst, in the API Gateway, set up a Body Mapping Template like this:\n\n*   Content-Type: `application/json`\n*   Template contents:\n\n`{   \"method\": \"$context.httpMethod\",   \"body\": $input.json('$'),   \"rawBody\": \"$util.escapeJavaScript($input.body).replaceAll(\"\\\\'\", \"'\")\",   \"headers\": {     #foreach($param in $input.params().header.keySet())     \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\"     #if($foreach.hasNext),#end     #end   } }`\n\nThen, in the Lambda function, access the raw body with the event’s `rawBody` property and the headers with the event’s `headers` property.\n\n## Check the signature![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nPrint the `signature` parameter, and confirm that it looks something like this.\n\nIf not, there’s probably an issue in your code when trying to extract the signature from the header.",
  "title": "Troubleshoot signature verification errors | Stripe Documentation",
  "description": "Learn how to fix a common error when listening to webhook events.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/workbench/shell",
  "markdown": "# Shell and API Explorer | Stripe DocumentationThe Stripe Docs logo\n\n## Shell and API ExplorerBeta\n\n## Use a command-line interface to manage your integration and explore APIs.\n\nShell is a command-line interface within Workbench that provides many of the same commands built into the [Stripe CLI](https://docs.stripe.com/stripe-cli). When using Workbench, a minimal Shell is always available at the bottom of the pane, or use the **Shell** tab to launch a full-screen session.\n\nUse the following Shell features to help you manage and debug your Stripe integration:\n\n*   **Autocompletion**: Shell provides tab completion for API requests and CLI commands.\n*   **API Explorer:** Use the built-in API Explorer to visually explore API resources and build API calls from Shell.\n\n## Initial setup![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nSign in to the [Dashboard](https://dashboard.stripe.com/). From the **Developers** menu, click **Workbench**. Switch to the **Shell** tab.\n\n#### Common mistake\n\nShell is read-only in live mode. Switch to [test mode](https://docs.stripe.com/test-mode) to run API requests that create, modify, or delete API objects.\n\n[](#listen)\n\n1.  From the command-line prompt, type `stripe listen` to listen for [webhook events](https://docs.stripe.com/webhooks#events-overview), then press **Enter** on your keyboard to run the command.\n\n> This listens to incoming events for your Stripe account.\n\n[](#first)\n\n1.  Click **New pane** to open a new session in a pane alongside your existing session.\n2.  Copy the command, paste it into the command-line prompt, then press **Enter** on your keyboard.\n3.  Copy the object identifier (in `id`) from the response for subsequent requests.\n\n`stripe products create \\ --name=\"Introductory offer (Monthly)\" \\ --description=\"$0.99 per month\"`\n\n> This creates a product with a name and description.\n\n[](#explorer)\n\n1.  Click **API Explorer** to show the interactive API Explorer on the right.\n2.  Choose the `Products` resource and the `Update` method. The API Explorer shows all the required and optional parameters for the Products resource.\n3.  Paste the object identifier from the previous step into the `Value` for the `id` path argument. When you provide the API Explorer with an existing object’s identifier, it loads the properties of the existing product.\n4.  Update the optional parameter `description` to 1.99 USD per month. The API Explorer automatically populates Shell with the equivalent API command to update the product’s description. Press **Enter** to run the command and update the product.\n5.  Click **Print SDK code** to see the equivalent code snippet in the language of your choice.\n\n## Available commands![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nShell provides multiple commands in addition to the `stripe` command (see the [Stripe CLI reference](https://docs.stripe.com/cli)).\n\n| Command | Purpose |\n| --- | --- |\n| `cd` | Navigates to other documentation pages |\n| `clear` | Clears all prior text from the shell |\n| `ls` | Lists Dashboard pages relative to the current one |\n| `pwd` | Prints the current page slug and title |\n| `shortcuts` | Displays keyboard shortcuts that you can use with Shell |\n| `stripe` | Available Stripe CLI commands (see the [complete reference](https://docs.stripe.com/cli)) |\n| `whoami` | Displays logged in merchant details |",
  "title": "Shell and API Explorer | Stripe Documentation",
  "description": "Use a command-line interface to manage your integration and explore APIs.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/webhooks/versioning",
  "markdown": "# Handle webhook versioning | Stripe DocumentationThe Stripe Docs logo\n\n## Learn how to upgrade the API version of your webhook endpoint.\n\nWebhook endpoints either have a specific API version set, or use the default API version of the Stripe account. To upgrade to a newer API version with no downtime, follow the steps below in test mode and then in live mode.\n\n## Create a new disabled webhook endpoint![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nCreate a new webhook endpoint with the following parameters:\n\n*   `url`: the same URL as your original webhook endpoint, but add a query parameter to distinguish between events sent to the two different endpoints. For example `https://example.com/webhooks?version=2024-04-10`.\n*   `enabled_events`: the same events as your original webhook endpoint.\n*   `api_version`: the API version you want to upgrade to. If you’re upgrading to the latest API version, you can use the Dashboard or the API to create the endpoint. For other versions, use the API to set a specific version.\n\nAfter you create the new webhook endpoint, disable it. You will re-enable it in the next step.\n\n![Two endpoints, but only the old one is sending events](https://b.stripecdn.com/docs-statics-srv/assets/diagram-1.ac21ab637180179813f503649b543e99.png)\n\n## Update your webhook code to ignore events sent to the new endpoint![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUpdate your event processing code:\n\n*   If the query parameter is for the older API version, process it as usual.\n*   If the query parameter is for the newer API version, ignore the event and return a 200 response to prevent delivery retries.\n\nNext, enable the new webhook endpoint that you created in the previous step. At this point every event is sent twice: once with the old API version and once with the new one.\n\n![Two endpoints sending events, but only processing the old one](https://b.stripecdn.com/docs-statics-srv/assets/diagram-2.f6b4d3cc0c78971b721fe173f19d5e28.png)\n\n## Update your webhook code to process events for the new endpoint![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nUpdate the version of the Stripe library you’re using to match the version of your new webhook endpoint. Make sure to read the changelog and handle any breaking changes.\n\nUpdate your event processing code:\n\n*   If the query parameter is for the older version, ignore the event. We recommend returning a 400 status to let Stripe automatically retry the event. This ensures that if you need to revert, events are re-sent to the older webhook endpoint.\n*   If the query parameter is for the new version, process it.\n\n![Two endpoints sending events, but only processing the new one](https://b.stripecdn.com/docs-statics-srv/assets/diagram-3.8a8b9da70ed66eca60434d406c82f476.png)\n\n## Monitor your new webhook endpoint![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf events aren’t being correctly handled by your new code, try the following:\n\n1.  Revert to the earlier version of your code.\n2.  Temporarily disable the new webhook endpoint.\n3.  Process the failed events (if you returned a 400 status as described in the previous step, Stripe automatically resends all the events).\n4.  Investigate and fix the issue.\n5.  Enable the new webhook endpoint and resume monitoring.\n\n## Disable the old webhook endpoint![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nIf the upgrade is successful, you can disable the old webhook endpoint. Delivery of events where you returned a 400 status won’t be retried after the webhook endpoint is disabled.\n\n![Two endpoints, but only the new one is sending events](https://b.stripecdn.com/docs-statics-srv/assets/diagram-4.907bbd1016f9fbe79283e8c35be7f3cd.png)",
  "title": "Handle webhook versioning | Stripe Documentation",
  "description": "Learn how to upgrade the API version of your webhook endpoint.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/stripe-shell/keyboard-shortcuts",
  "markdown": "# Keyboard shortcuts in the Stripe Shell\n\n## Learn about the keyboard shortcuts available for the Stripe Shell.\n\nThis page describes the keyboard shortcuts available for the Stripe Shell.\n\n## Expand and minimize the command-line terminal![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo open or minimize the command-line terminal:\n\n*   Press the `Control` + `Backtick` (on Windows, Linux, and macOS) keys on your keyboard.\n\n## Use command-line completion![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo use command-line completion, start typing _stripe_ and press the spacebar key:\n\n*   To navigate to the _next_ suggestion, start typing a command and press the `Tab` (on Windows, Linux, and macOS) key on your keyboard.\n*   To navigate to the _previous_ suggestion, start typing a command and press the `Shift` + `Tab` (on Windows, Linux, and macOS) key on your keyboard.\n*   Press the `Enter` (on Windows, Linux, and macOS) key on your keyboard to fill the command prompt with the selected command.\n\n#### Note\n\nIn addition to using the keyboard, you can also click command suggestions with your mouse.\n\n## Copy and paste text![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo copy and paste text at your cursor location:\n\n*   To copy some text, select the text in the terminal display using your mouse and press `Control` + `C` (on Windows or Linux) or `Command` + `C` (on macOS) on your keyboard.\n*   To paste some text, press `Control` + `V` (on Windows or Linux) or `Command` + `V` (on macOS) on your keyboard.\n\n#### Note\n\nIn addition to using the keyboard, you can also copy a Stripe resource identifier (for example, `prod_87dMmhDYE67`) directly by clicking the copy icon.\n\n## Navigate through command history![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo navigate through the command prompt history and fill the command prompt with the selected command:\n\n*   To navigate to the _previous_ command, use the `Up Arrow` (on Windows, Linux, or macOS) arrow key on your keyboard.\n*   To navigate to the _next_ command, use the `Down Arrow` (on Windows, Linux, or macOS) arrow key on your keyboard.\n*   Press the `Enter` key on your keyboard to run the selected command.\n\n## Move one character at a time![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo move the cursor position left or right by one character:\n\n*   To shift the cursor to the left, either press `Left Arrow` or `Control` + `B` (on Windows, Linux, or macOS) keys on your keyboard.\n*   To shift the cursor to the right, either press `Right Arrow` or `Control` + `F` (on Windows, Linux, or macOS) keys on your keyboard.\n\n## Jump to the beginning and end of the command prompt![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo move the cursor to the beginning or end of the command prompt:\n\n*   To jump to the beginning of the command prompt, press the `Control` + `Left Arrow` (on Windows or Linux) or `Command` + `Left Arrow` keys (on macOS) on your keyboard and insert some text at the cursor.\n*   To jump to the end of the command prompt, press the `Control` + `Right Arrow` (on Windows or Linux) or `Command` + `Right Arrow` (on macOS) keys on your keyboard and insert some text at the cursor.\n\n## Delete one word at a time in the command prompt![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo delete a word that precedes the cursor in the command prompt:\n\n*   Press the `Control` + `W` (on Windows, Linux, or macOS) keys on your keyboard.\n\n## Delete one character at a time![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo delete one character at a time in either direction:\n\n*   To delete the character _at_ the cursor, press the `Control` + `D` (on Windows, Linux, or macOS) keys on your keyboard.\n*   To delete one character _before_ the cursor, press the `Backspace` (on Windows, Linux, or macOS) key on your keyboard.\n\n## Remove characters from the cursor to the end of the prompt![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo trim the text at the cursor prompt to the end of the cursor prompt:\n\n*   Press the `Control` + `K` (on Windows, Linux, or macOS) keys on your keyboard.\n\n## Clear the command prompt![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo clear the command prompt:\n\n*   Press the `Control` + `U` (on Windows, Linux, or macOS) keys on your keyboard. This resets the cursor to the beginning of the command prompt.\n\n## Open a new terminal pane![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo open a new pane in the command-line terminal:\n\n*   Press the `Alt` + `Shift` + `D` (on Windows, Linux) or `Command` + `D` (on macOS) keys on your keyboard.\n\n#### Note\n\nIn addition to using the keyboard, you can also click the **New pane** icon in the top-right corner of the terminal window.\n\n## Navigate between open terminal panes![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo navigate to the left or right open terminal panes:\n\n*   To navigate to the left pane, press `Control` + `[` (on Windows or Linux) or `Command` + `[` (on macOS) on your keyboard.\n*   To navigate to the right pane, press `Control` + `]` (on Windows or Linux) or `Command` +`]` (on macOS) on your keyboard.\n\n#### Note\n\nIn addition to using the keyboard, you can simply click a pane directly.\n\n## Clear the terminal pane![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg)\n\nTo empty the terminal pane and clear all previously-run commands and their responses:\n\n*   Press the `Control` + `L` (on Windows or Linux) or `Command` + `K` (on macOS) keys on your keyboard.\n\n#### Note\n\nIn addition to using the keyboard, you can simply type `clear`.",
  "title": "Keyboard shortcuts in the Stripe Shell | Stripe Documentation",
  "description": "Learn about the keyboard shortcuts available for the Stripe Shell.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/coupons",
  "markdown": "# Coupons | Stripe API Reference\n\n## [The Coupon object](https://docs.stripe.com/api/coupons/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    amount\\_offnullable integer\n    \n    Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.\n    \n\n*   One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `forever`<br><br>Applies to all charges from a subscription with this coupon applied. |\n    | `once`<br><br>Applies to the first charge from a subscription with this coupon applied. |\n    | `repeating`<br><br>Applies to charges in the first `duration_in_months` months from a subscription with this coupon applied. |\n    \n*   #### \n    \n    duration\\_in\\_monthsnullable integer\n    \n    If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Name of the coupon displayed to customers on for instance invoices or receipts.\n    \n*   #### \n    \n    percent\\_offnullable float\n    \n    Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent\\_off of 50 will make a $100 invoice $50 instead.\n    \n\n### More attributes\n\n*   #### \n    \n    applies\\_tonullable objectExpandable\n    \n\n*   #### \n    \n    currency\\_optionsnullable objectExpandable\n    \n\n*   #### \n    \n    max\\_redemptionsnullable integer\n    \n*   #### \n    \n    redeem\\_bynullable timestamp\n    \n\n```\n{  \"id\": \"jMT0WJUD\",  \"object\": \"coupon\",  \"amount_off\": null,  \"created\": 1678037688,  \"currency\": null,  \"duration\": \"repeating\",  \"duration_in_months\": 3,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {},  \"name\": null,  \"percent_off\": 25.5,  \"redeem_by\": null,  \"times_redeemed\": 0,  \"valid\": true}\n```\n\n## [Create a coupon](https://docs.stripe.com/api/coupons/create)\n\nYou can create coupons easily via the [coupon management](https://dashboard.stripe.com/coupons) page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.\n\nA coupon has either a `percent_off` or an `amount_off` and `currency`. If you set an `amount_off`, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of 100 USD will have a final total of 0 USD if a coupon with an `amount_off` of 20000 is applied to it and an invoice with a subtotal of 300 USD will have a final total of 100 USD if a coupon with an `amount_off` of 20000 is applied to it.\n\n### Parameters\n\n*   A positive integer representing the amount to subtract from an invoice total (required if `percent_off` is not passed).\n    \n*   Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the `amount_off` parameter (required if `amount_off` is passed).\n    \n*   Specifies how long the discount will be in effect if used on a subscription. Defaults to `once`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `forever`<br><br>Applies to all charges from a subscription with this coupon applied. |\n    | `once`<br><br>Applies to the first charge from a subscription with this coupon applied. |\n    | `repeating`<br><br>Applies to charges in the first `duration_in_months` months from a subscription with this coupon applied. |\n    \n*   #### \n    \n    duration\\_in\\_monthsinteger\n    \n    Required only if `duration` is `repeating`, in which case it must be a positive integer that specifies the number of months the discount will be in effect.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set.\n    \n*   A positive float larger than 0, and smaller or equal to 100, that represents the discount the coupon will apply (required if `amount_off` is not passed).\n    \n\n### More parameters\n\n### Returns\n\nReturns the coupon object.\n\n```\ncurl https://api.stripe.com/v1/coupons \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d duration=repeating \\  -d duration_in_months=3 \\  -d percent_off=\"25.5\"\n```\n\n```\n{  \"id\": \"jMT0WJUD\",  \"object\": \"coupon\",  \"amount_off\": null,  \"created\": 1678037688,  \"currency\": null,  \"duration\": \"repeating\",  \"duration_in_months\": 3,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {},  \"name\": null,  \"percent_off\": 25.5,  \"redeem_by\": null,  \"times_redeemed\": 0,  \"valid\": true}\n```\n\n## [Update a coupon](https://docs.stripe.com/api/coupons/update)\n\nUpdates the metadata of a coupon. Other coupon details (currency, duration, amount\\_off) are, by design, not editable.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set.\n    \n\n### More parameters\n\n### Returns\n\nThe newly updated coupon object if the call succeeded. Otherwise, this call raises [an error](#errors), such as if the coupon has been deleted.\n\n```\ncurl https://api.stripe.com/v1/coupons/jMT0WJUD \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"jMT0WJUD\",  \"object\": \"coupon\",  \"amount_off\": null,  \"created\": 1678037688,  \"currency\": null,  \"duration\": \"repeating\",  \"duration_in_months\": 3,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": null,  \"percent_off\": 25.5,  \"redeem_by\": null,  \"times_redeemed\": 0,  \"valid\": true}\n```\n\n## [Retrieve a coupon](https://docs.stripe.com/api/coupons/retrieve)\n\nRetrieves the coupon with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a coupon if a valid coupon ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/coupons/jMT0WJUD \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"jMT0WJUD\",  \"object\": \"coupon\",  \"amount_off\": null,  \"created\": 1678037688,  \"currency\": null,  \"duration\": \"repeating\",  \"duration_in_months\": 3,  \"livemode\": false,  \"max_redemptions\": null,  \"metadata\": {},  \"name\": null,  \"percent_off\": 25.5,  \"redeem_by\": null,  \"times_redeemed\": 0,  \"valid\": true}\n```",
  "title": "Coupons | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/confirmation_tokens/retrieve",
  "markdown": "# Retrieve a ConfirmationToken | Stripe API Reference\n\nRetrieves an existing ConfirmationToken object\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the specified ConfirmationToken\n\nGET /v1/confirmation\\_tokens/:id\n\n```\ncurl https://api.stripe.com/v1/confirmation_tokens/ctoken_1NnQUf2eZvKYlo2CIObdtbnb \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"ctoken_1NnQUf2eZvKYlo2CIObdtbnb\",  \"object\": \"confirmation_token\",  \"created\": 1694025025,  \"expires_at\": 1694068225,  \"livemode\": true,  \"mandate_data\": null,  \"payment_intent\": null,  \"payment_method\": null,  \"payment_method_preview\": {    \"billing_details\": {      \"address\": {        \"city\": \"Hyde Park\",        \"country\": \"US\",        \"line1\": \"50 Sprague St\",        \"line2\": \"\",        \"postal_code\": \"02136\",        \"state\": \"MA\"      },      \"email\": \"jennyrosen@stripe.com\",      \"name\": \"Jenny Rosen\",      \"phone\": null    },    \"card\": {      \"brand\": \"visa\",      \"checks\": {        \"address_line1_check\": null,        \"address_postal_code_check\": null,        \"cvc_check\": null      },      \"country\": \"US\",      \"display_brand\": \"visa\",      \"exp_month\": 8,      \"exp_year\": 2026,      \"funding\": \"credit\",      \"generated_from\": null,      \"last4\": \"4242\",      \"networks\": {        \"available\": [          \"visa\"        ],        \"preferred\": null      },      \"three_d_secure_usage\": {        \"supported\": true      },      \"wallet\": null    },    \"type\": \"card\"  },  \"return_url\": \"https://example.com/return\",  \"setup_future_usage\": \"off_session\",  \"setup_intent\": null,  \"shipping\": {    \"address\": {      \"city\": \"Hyde Park\",      \"country\": \"US\",      \"line1\": \"50 Sprague St\",      \"line2\": \"\",      \"postal_code\": \"02136\",      \"state\": \"MA\"    },    \"name\": \"Jenny Rosen\",    \"phone\": null  }}\n```\n\n## [Create a test Confirmation Token](https://docs.stripe.com/api/confirmation_tokens/test_create)Test helper\n\nCreates a test mode Confirmation Token server side for your integration tests.\n\n### Parameters\n\n*   ID of an existing PaymentMethod.\n    \n*   #### \n    \n    payment\\_method\\_dataobject\n    \n    If provided, this hash will be used to create a PaymentMethod.\n    \n*   Return URL used to confirm the Intent.\n    \n*   Indicates that you intend to make future payments with this ConfirmationToken’s payment method.\n    \n    The presence of this property will [attach the payment method](https://docs.stripe.com/payments/save-during-payment) to the PaymentIntent’s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `off_session`<br><br>Use `off_session` if your customer may or may not be present in your checkout flow. |\n    | `on_session`<br><br>Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. |\n    \n*   Shipping information for this ConfirmationToken.\n    \n\n### Returns\n\nReturns a testmode Confirmation Token\n\nPOST /v1/test\\_helpers/confirmation\\_tokens\n\n```\ncurl https://api.stripe.com/v1/test_helpers/confirmation_tokens \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d payment_method=pm_card_visa\n```\n\n```\n{  \"id\": \"ctoken_1Ow71CL4FhS6zgoxWjxc7sfr\",  \"object\": \"confirmation_token\",  \"created\": 1710871450,  \"expires_at\": 1710914650,  \"livemode\": false,  \"payment_intent\": null,  \"payment_method_preview\": {    \"billing_details\": {      \"address\": {        \"city\": null,        \"country\": null,        \"line1\": null,        \"line2\": null,        \"postal_code\": null,        \"state\": null      },      \"email\": null,      \"name\": null,      \"phone\": null    },    \"card\": {      \"brand\": \"visa\",      \"checks\": {        \"address_line1_check\": null,        \"address_postal_code_check\": null,        \"cvc_check\": \"unchecked\"      },      \"country\": \"US\",      \"display_brand\": \"visa\",      \"exp_month\": 3,      \"exp_year\": 2025,      \"fingerprint\": \"jbGyCKrSRsFpOBWP\",      \"funding\": \"credit\",      \"generated_from\": null,      \"last4\": \"4242\",      \"networks\": {        \"available\": [          \"visa\"        ],        \"preferred\": null      },      \"three_d_secure_usage\": {        \"supported\": true      },      \"wallet\": null    },    \"type\": \"card\"  },  \"return_url\": null,  \"setup_future_usage\": null,  \"setup_intent\": null,  \"shipping\": null,  \"use_stripe_sdk\": true}\n```\n\n## [Tokens](https://docs.stripe.com/api/tokens)\n\nTokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. A token representing this information is returned to your server to use. Use our [recommended payments integrations](https://docs.stripe.com/payments) to perform this process on the client-side. This guarantees that no sensitive card data touches your server, and allows your integration to operate in a PCI-compliant way.\n\nIf you can’t use client-side tokenization, you can also create tokens using the API with either your publishable or secret API key. If your integration uses this method, you’re responsible for any PCI compliance that it might require, and you must keep your secret API key safe. Unlike with client-side tokenization, your customer’s information isn’t sent directly to Stripe, so we can’t determine how it’s handled or stored.\n\nYou can’t store or use tokens more than once. To store card or bank account information for later use, create [Customer](https://docs.stripe.com/api#customers) objects or [External accounts](https://docs.stripe.com/api#external_accounts). [Radar](https://docs.stripe.com/radar), our integrated solution for automatic fraud protection, performs best with integrations that use client-side tokenization.\n\nEndpoints\n\n[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_bank_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_card)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_cvc_update)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_person)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_pii)[GET/v1/tokens/:id](https://docs.stripe.com/api/tokens/retrieve)\n\n## [Cash Balance](https://docs.stripe.com/api/cash_balance)\n\nA customer’s `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve a ConfirmationToken | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/refunds/list",
  "markdown": "# List all refunds | Stripe API Reference\n\nReturns a list of all refunds you created. We return the refunds in sorted order, with the most recent refunds appearing first The 10 most recent refunds are always available by default on the Charge object.\n\n### Parameters\n\n*   Only return refunds for the charge specified by this charge ID.\n    \n*   Only return refunds for the PaymentIntent specified by this ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` refunds, starting after the `starting_after` refund. Each entry in the array is a separate Refund object. If no other refunds are available, the resulting array is empty. If you provide a non-existent charge ID, this call raises [an error](#errors).\n\n```\ncurl -G https://api.stripe.com/v1/refunds \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/refunds\",  \"has_more\": false,  \"data\": [    {      \"id\": \"re_1Nispe2eZvKYlo2Cd31jOCgZ\",      \"object\": \"refund\",      \"amount\": 1000,      \"balance_transaction\": \"txn_1Nispe2eZvKYlo2CYezqFhEx\",      \"charge\": \"ch_1NirD82eZvKYlo2CIvbtLWuY\",      \"created\": 1692942318,      \"currency\": \"usd\",      \"destination_details\": {        \"card\": {          \"reference\": \"123456789012\",          \"reference_status\": \"available\",          \"reference_type\": \"acquirer_reference_number\",          \"type\": \"refund\"        },        \"type\": \"card\"      },      \"metadata\": {},      \"payment_intent\": \"pi_1GszsK2eZvKYlo2CfhZyoZLp\",      \"reason\": null,      \"receipt_number\": null,      \"source_transfer_reversal\": null,      \"status\": \"succeeded\",      \"transfer_reversal\": null    }    {...}    {...}  ],}\n```\n\n## [Cancel a refund](https://docs.stripe.com/api/refunds/cancel)\n\nCancels a refund with a status of `requires_action`.\n\nYou can’t cancel refunds in other states. Only refunds for payment methods that require customer action can enter the `requires_action` state.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the refund object if the cancellation succeeds. This call raises [an error](#errors) if you can’t cancel the refund.\n\nPOST /v1/refunds/:id/cancel\n\n```\ncurl -X POST https://api.stripe.com/v1/refunds/re_1Nispe2eZvKYlo2Cd31jOCgZ/cancel \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"re_1Nispe2eZvKYlo2Cd31jOCgZ\",  \"object\": \"refund\",  \"amount\": 1000,  \"balance_transaction\": \"txn_1Nispe2eZvKYlo2CYezqFhEx\",  \"charge\": \"ch_1NirD82eZvKYlo2CIvbtLWuY\",  \"created\": 1692942318,  \"currency\": \"usd\",  \"failure_balance_transaction\": \"txn_3MmlLrLkdIwHu7ix0uke3Ezy\",  \"failure_reason\": \"merchant_request\",  \"metadata\": {},  \"payment_intent\": \"pi_1GszsK2eZvKYlo2CfhZyoZLp\",  \"reason\": null,  \"receipt_number\": null,  \"source_transfer_reversal\": null,  \"status\": \"canceled\",  \"transfer_reversal\": null}\n```\n\n## [Confirmation Token](https://docs.stripe.com/api/confirmation_tokens)\n\nConfirmationTokens help transport client side data collected by Stripe JS over to your server for confirming a PaymentIntent or SetupIntent. If the confirmation is successful, values present on the ConfirmationToken are written onto the Intent.\n\nTo learn more about how to use ConfirmationToken, visit the related guides:\n\n*   [Finalize payments on the server](https://docs.stripe.com/payments/finalize-payments-on-the-server)\n*   [Build two-step confirmation](https://docs.stripe.com/payments/build-a-two-step-confirmation).\n\n## [Tokens](https://docs.stripe.com/api/tokens)\n\nTokenization is the process Stripe uses to collect sensitive card or bank account details, or personally identifiable information (PII), directly from your customers in a secure manner. A token representing this information is returned to your server to use. Use our [recommended payments integrations](https://docs.stripe.com/payments) to perform this process on the client-side. This guarantees that no sensitive card data touches your server, and allows your integration to operate in a PCI-compliant way.\n\nIf you can’t use client-side tokenization, you can also create tokens using the API with either your publishable or secret API key. If your integration uses this method, you’re responsible for any PCI compliance that it might require, and you must keep your secret API key safe. Unlike with client-side tokenization, your customer’s information isn’t sent directly to Stripe, so we can’t determine how it’s handled or stored.\n\nYou can’t store or use tokens more than once. To store card or bank account information for later use, create [Customer](https://docs.stripe.com/api#customers) objects or [External accounts](https://docs.stripe.com/api#external_accounts). [Radar](https://docs.stripe.com/radar), our integrated solution for automatic fraud protection, performs best with integrations that use client-side tokenization.\n\nEndpoints\n\n[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_bank_account)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_card)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_cvc_update)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_person)[POST/v1/tokens](https://docs.stripe.com/api/tokens/create_pii)[GET/v1/tokens/:id](https://docs.stripe.com/api/tokens/retrieve)\n\n## [Cash Balance](https://docs.stripe.com/api/cash_balance)\n\nA customer’s `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all refunds | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/payment_method_domains/validate",
  "markdown": "# Validate an existing payment method domain\n\nSome payment methods such as Apple Pay require additional steps to verify a domain. If the requirements weren’t satisfied when the domain was created, the payment method will be inactive on the domain. The payment method doesn’t appear in Elements for this domain until it is active.\n\nTo activate a payment method on an existing payment method domain, complete the required validation steps specific to the payment method, and then validate the payment method domain with this endpoint.\n\nRelated guides: [Payment method domains](https://docs.stripe.com/payments/payment-methods/pmd-registration).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the updated payment method domain object.\n\nPOST /v1/payment\\_method\\_domains/:id/validate\n\n```\ncurl -X POST https://api.stripe.com/v1/payment_method_domains/pmd_1Nnrer2eZvKYlo2Cips79tWl/validate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pmd_1Nnrer2eZvKYlo2Cips79tWl\",  \"object\": \"payment_method_domain\",  \"apple_pay\": {    \"status\": \"active\"  },  \"created\": 1694129445,  \"domain_name\": \"example.com\",  \"enabled\": true,  \"google_pay\": {    \"status\": \"active\"  },  \"link\": {    \"status\": \"active\"  },  \"livemode\": false,  \"paypal\": {    \"status\": \"active\"  }}\n```\n\n## [Cash Balance](https://docs.stripe.com/api/cash_balance)\n\nA customer’s `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Validate an existing payment method domain | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/discounts",
  "markdown": "# Discounts | Stripe API Reference\n\nA discount represents the actual application of a [coupon](#coupons) or [promotion code](#promotion_codes). It contains information about when the discount began, when it will end, and what it is applied to.\n\nRelated guide: [Applying discounts to subscriptions](https://docs.stripe.com/billing/subscriptions/discounts)\n\n## [The Discount object](https://docs.stripe.com/api/discounts/object)\n\n### Attributes\n\n*   The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array.\n    \n*   Hash describing the coupon applied to create this discount.\n    \n*   #### \n    \n    customernullable stringExpandable\n    \n    The ID of the customer associated with this discount.\n    \n*   If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null.\n    \n*   Date that the coupon was applied.\n    \n*   #### \n    \n    subscriptionnullable string\n    \n    The subscription that this coupon is applied to, if it is applied to a particular subscription.\n    \n\n### More attributes\n\n*   #### \n    \n    checkout\\_sessionnullable string\n    \n\n*   #### \n    \n    invoice\\_itemnullable string\n    \n*   #### \n    \n    promotion\\_codenullable stringExpandable\n    \n*   #### \n    \n    subscription\\_itemnullable string\n    \n\n```\n{  \"id\": \"di_1M6vk22eZvKYlo2CYMGIhk14\",  \"object\": \"discount\",  \"checkout_session\": \"cs_test_b1mywbZHtQCQW2ncaItVPFqupwmfqNU4IMMdw3lArEBGt0QD0CZDrNQswR\",  \"coupon\": {    \"id\": \"wsd\",    \"object\": \"coupon\",    \"amount_off\": null,    \"created\": 1669116350,    \"currency\": null,    \"duration\": \"forever\",    \"duration_in_months\": null,    \"livemode\": false,    \"max_redemptions\": null,    \"metadata\": {},    \"name\": null,    \"percent_off\": 10,    \"redeem_by\": null,    \"times_redeemed\": 1,    \"valid\": true  },  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"end\": null,  \"invoice\": null,  \"invoice_item\": null,  \"promotion_code\": null,  \"start\": 1669120702,  \"subscription\": null}\n```\n\n## [Delete a customer discount](https://docs.stripe.com/api/discounts/delete)\n\nRemoves the currently applied discount on a customer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn object with a deleted flag set to true upon success. This call returns [an error](#errors) otherwise, such as if no discount exists on this customer.\n\nDELETE /v1/customers/:id/discount\n\n```\ncurl -X DELETE https://api.stripe.com/v1/customers/cus_9s6XKzkNRiz8i3/discount \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"discount\",  \"deleted\": true}\n```\n\n## [Delete a subscription discount](https://docs.stripe.com/api/discounts/subscription_delete)\n\nRemoves the currently applied discount on a subscription.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nAn object with a deleted flag set to true upon success. This call returns [an error](#errors) otherwise, such as if no discount exists on this subscription.\n\nDELETE /v1/subscriptions/:id/discount\n\n```\ncurl -X DELETE https://api.stripe.com/v1/subscriptions/sub_1NlcNX2eZvKYlo2CFqnrn9ow/discount \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"discount\",  \"deleted\": true}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Discounts | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/promotion_codes/list",
  "markdown": "# List all promotion codes | Stripe API Reference\n\nReturns a list of your promotion codes.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` promotion codes, starting after promotion code `starting_after`. Each entry in the array is a separate promotion code object. If no more promotion codes are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/promotion_codes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/promotion_codes\",  \"has_more\": false,  \"data\": [    {      \"id\": \"promo_1MiM6KLkdIwHu7ixrIaX4wgn\",      \"object\": \"promotion_code\",      \"active\": true,      \"code\": \"A1H1Q1MG\",      \"coupon\": {        \"id\": \"nVJYDOag\",        \"object\": \"coupon\",        \"amount_off\": null,        \"created\": 1678040164,        \"currency\": null,        \"duration\": \"repeating\",        \"duration_in_months\": 3,        \"livemode\": false,        \"max_redemptions\": null,        \"metadata\": {},        \"name\": null,        \"percent_off\": 25.5,        \"redeem_by\": null,        \"times_redeemed\": 0,        \"valid\": true      },      \"created\": 1678040164,      \"customer\": null,      \"expires_at\": null,      \"livemode\": false,      \"max_redemptions\": null,      \"metadata\": {},      \"restrictions\": {        \"first_time_transaction\": false,        \"minimum_amount\": null,        \"minimum_amount_currency\": null      },      \"times_redeemed\": 0    }    {...}    {...}  ],}\n```\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all promotion codes | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/payment_method_domains/list",
  "markdown": "# List payment method domains | Stripe API Reference\n\nLists the details of existing payment method domains.\n\n### Parameters\n\n*   The domain name that this payment method domain object represents.\n    \n*   Whether this payment method domain is enabled. If the domain is not enabled, payment methods will not appear in Elements\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of payment method domain objects.\n\nGET /v1/payment\\_method\\_domains\n\n```\ncurl -G https://api.stripe.com/v1/payment_method_domains \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/payment_method_domains\",  \"has_more\": false,  \"data\": [    {      \"id\": \"pmd_1Nnrer2eZvKYlo2Cips79tWl\",      \"object\": \"payment_method_domain\",      \"apple_pay\": {        \"status\": \"active\"      },      \"created\": 1694129445,      \"domain_name\": \"example.com\",      \"enabled\": true,      \"google_pay\": {        \"status\": \"active\"      },      \"link\": {        \"status\": \"active\"      },      \"livemode\": false,      \"paypal\": {        \"status\": \"active\"      }    }    {...}    {...}  ],}\n```\n\n## [Validate an existing payment method domain](https://docs.stripe.com/api/payment_method_domains/validate)\n\nSome payment methods such as Apple Pay require additional steps to verify a domain. If the requirements weren’t satisfied when the domain was created, the payment method will be inactive on the domain. The payment method doesn’t appear in Elements for this domain until it is active.\n\nTo activate a payment method on an existing payment method domain, complete the required validation steps specific to the payment method, and then validate the payment method domain with this endpoint.\n\nRelated guides: [Payment method domains](https://docs.stripe.com/payments/payment-methods/pmd-registration).\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the updated payment method domain object.\n\nPOST /v1/payment\\_method\\_domains/:id/validate\n\n```\ncurl -X POST https://api.stripe.com/v1/payment_method_domains/pmd_1Nnrer2eZvKYlo2Cips79tWl/validate \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"pmd_1Nnrer2eZvKYlo2Cips79tWl\",  \"object\": \"payment_method_domain\",  \"apple_pay\": {    \"status\": \"active\"  },  \"created\": 1694129445,  \"domain_name\": \"example.com\",  \"enabled\": true,  \"google_pay\": {    \"status\": \"active\"  },  \"link\": {    \"status\": \"active\"  },  \"livemode\": false,  \"paypal\": {    \"status\": \"active\"  }}\n```\n\n## [Cash Balance](https://docs.stripe.com/api/cash_balance)\n\nA customer’s `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.\n\n## [Customer Portal Session](https://docs.stripe.com/api/customer_portal/sessions)\n\nThe Billing customer portal is a Stripe-hosted UI for subscription and billing management.\n\nA portal configuration describes the functionality and features that you want to provide to your customers through the portal.\n\nA portal session describes the instantiation of the customer portal for a particular customer. By visiting the session’s URL, the customer can manage their subscriptions and billing details. For security reasons, sessions are short-lived and will expire if the customer does not visit the URL. Create sessions on-demand when customers intend to manage their subscriptions and billing details.\n\nRelated guide: [Customer management](https://docs.stripe.com/customer-management)\n\n## [Invoices](https://docs.stripe.com/api/invoices)\n\nInvoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.\n\nThey contain [invoice items](#invoiceitems), and proration adjustments that may be caused by subscription upgrades/downgrades (if necessary).\n\nIf your invoice is configured to be billed through automatic charges, Stripe automatically finalizes your invoice and attempts payment. Note that finalizing the invoice, [when automatic](https://docs.stripe.com/invoicing/integration/automatic-advancement-collection), does not happen immediately as the invoice is created. Stripe waits until one hour after the last webhook was successfully sent (or the last webhook timed out after failing). If you (and the platforms you may have connected to) have no webhooks configured, Stripe waits one hour after creation to finalize the invoice.\n\nIf your invoice is configured to be billed by sending an email, then based on your [email settings](https://dashboard.stripe.com/account/billing/automatic), Stripe will email the invoice to your customer and await payment. These emails can contain a link to a hosted page to pay the invoice.\n\nStripe applies any customer credit on the account before determining the amount due for the invoice (i.e., the amount that will be actually charged). If the amount due for the invoice is less than Stripe’s [minimum allowed charge per currency](https://docs.stripe.com/currencies#minimum-and-maximum-charge-amounts), the invoice is automatically marked paid, and we add the amount due to the customer’s credit balance which is applied to the next invoice.\n\nMore details on the customer’s credit balance are [here](https://docs.stripe.com/billing/customer/balance).\n\nRelated guide: [Send invoices to customers](https://docs.stripe.com/billing/invoices/sending)\n\nEndpoints\n\n[POST/v1/invoices](https://docs.stripe.com/api/invoices/create)[POST/v1/invoices/create\\_preview](https://docs.stripe.com/api/invoices/create_preview)[POST/v1/invoices/:id](https://docs.stripe.com/api/invoices/update)[POST/v1/invoices/:id/lines/:id](https://docs.stripe.com/api/invoices/update_line)[GET/v1/invoices/:id](https://docs.stripe.com/api/invoices/retrieve)[GET/v1/invoices/upcoming](https://docs.stripe.com/api/invoices/upcoming)[GET/v1/invoices/:id/lines](https://docs.stripe.com/api/invoices/invoice_lines)[GET/v1/invoices/upcoming/lines](https://docs.stripe.com/api/invoices/upcoming_invoice_lines)[GET/v1/invoices](https://docs.stripe.com/api/invoices/list)[DELETE/v1/invoices/:id](https://docs.stripe.com/api/invoices/delete)[POST/v1/invoices/:id/add\\_lines](https://docs.stripe.com/api/invoices/add_lines)[POST/v1/invoices/:id/remove\\_lines](https://docs.stripe.com/api/invoices/remove_lines)[POST/v1/invoices/:id/update\\_lines](https://docs.stripe.com/api/invoices/update_lines)[POST/v1/invoices/:id/finalize](https://docs.stripe.com/api/invoices/finalize)[POST/v1/invoices/:id/mark\\_uncollectible](https://docs.stripe.com/api/invoices/mark_uncollectible)[POST/v1/invoices/:id/pay](https://docs.stripe.com/api/invoices/pay)[GET/v1/invoices/search](https://docs.stripe.com/api/invoices/search)[POST/v1/invoices/:id/send](https://docs.stripe.com/api/invoices/send)[POST/v1/invoices/:id/void](https://docs.stripe.com/api/invoices/void)\n\n## [Meter Events](https://docs.stripe.com/api/billing/meter-event)\n\nA billing meter event represents a customer’s usage of a product. Meter events are used to bill a customer based on their usage. Meter events are associated with billing meters, which define the shape of the event’s payload and how those events are aggregated for billing.\n\n## [Meter Event Adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment)\n\nA billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List payment method domains | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/credit_notes/object",
  "markdown": "# The Credit Note object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n\n*   ID of the invoice.\n    \n*   Line items that make up the credit note\n    \n*   Customer-facing text that appears on the credit note PDF.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `duplicate` |\n    | `fraudulent` |\n    | `order_change` |\n    | `product_unsatisfactory` |\n    \n*   Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://docs.stripe.com/billing/invoices/credit-notes#voiding).\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `issued`<br><br>The credit note has been issued. |\n    | `void`<br><br>The credit note has been voided. |\n    \n*   The integer amount in cents representing the amount of the credit note, excluding exclusive tax and invoice level discounts.\n    \n*   The integer amount in cents representing the total amount of the credit note, including tax and all discount.\n    \n\n### More attributes\n\n*   #### \n    \n    customer\\_balance\\_transactionnullable stringExpandable\n    \n*   #### \n    \n    discount\\_amountintegerDeprecated\n    \n*   #### \n    \n    discount\\_amountsarray of objects\n    \n*   #### \n    \n    effective\\_atnullable timestamp\n    \n\n*   #### \n    \n    out\\_of\\_band\\_amountnullable integer\n    \n\n*   #### \n    \n    refundnullable stringExpandable\n    \n*   #### \n    \n    shipping\\_costnullable object\n    \n*   #### \n    \n    subtotal\\_excluding\\_taxnullable integer\n    \n*   #### \n    \n    tax\\_amountsarray of objects\n    \n*   #### \n    \n    total\\_excluding\\_taxnullable integer\n    \n\n*   #### \n    \n    voided\\_atnullable timestamp\n    \n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [The Credit Note Line Item object](https://docs.stripe.com/api/credit_notes/line_item)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   The integer amount in cents representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts.\n    \n*   #### \n    \n    amount\\_excluding\\_taxnullable integer\n    \n    The integer amount in cents representing the amount being credited for this line item, excluding all tax and discounts.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    Description of the item being credited.\n    \n*   #### \n    \n    discount\\_amountintegerDeprecated\n    \n    The integer amount in cents representing the discount being credited for this line item.\n    \n*   #### \n    \n    discount\\_amountsarray of objects\n    \n    The amount of discount calculated per discount for this line item\n    \n*   #### \n    \n    invoice\\_line\\_itemnullable string\n    \n    ID of the invoice line item being credited\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The number of units of product being credited.\n    \n*   #### \n    \n    tax\\_amountsarray of objects\n    \n    The amount of tax calculated per tax rate for this line item\n    \n*   #### \n    \n    tax\\_ratesarray of objects\n    \n    The tax rates which apply to the line item.\n    \n*   The type of the credit note line item, one of `invoice_line_item` or `custom_line_item`. When the type is `invoice_line_item` there is an additional `invoice_line_item` property on the resource the value of which is the id of the credited line item on the invoice.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `custom_line_item` |\n    | `invoice_line_item` |\n    \n*   #### \n    \n    unit\\_amountnullable integer\n    \n    The cost of each unit of product being credited.\n    \n*   #### \n    \n    unit\\_amount\\_decimalnullable decimal string\n    \n    Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.\n    \n*   #### \n    \n    unit\\_amount\\_excluding\\_taxnullable decimal string\n    \n    The amount in cents representing the unit amount being credited for this line item, excluding all tax and discounts.\n    \n\nThe Credit Note Line Item object\n\n```\n{  \"id\": \"cnli_1NPtOx2eZvKYlo2CBH1NpUsU\",  \"object\": \"credit_note_line_item\",  \"amount\": 749,  \"amount_excluding_tax\": 749,  \"description\": \"My First Invoice Item (created for API docs)\",  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice_line_item\": \"il_1NPtOx2eZvKYlo2CAUuq0WVl\",  \"livemode\": false,  \"quantity\": 1,  \"tax_amounts\": [],  \"tax_rates\": [],  \"type\": \"invoice_line_item\",  \"unit_amount\": null,  \"unit_amount_decimal\": null,  \"unit_amount_excluding_tax\": \"749\"}\n```\n\n## [Create a credit note](https://docs.stripe.com/api/credit_notes/create)\n\nIssue a credit note to adjust the amount of a finalized invoice. For a `status=open` invoice, a credit note reduces its `amount_due`. For a `status=paid` invoice, a credit note does not affect its `amount_due`. Instead, it can result in any combination of the following:\n\n*   Refund: create a new refund (using `refund_amount`) or link an existing refund (using `refund`).\n*   Customer balance credit: credit the customer’s balance (using `credit_amount`) which will be automatically applied to their next invoice when it’s finalized.\n*   Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using `out_of_band_amount`).\n\nFor post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.\n\nYou may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s `pre_payment_credit_notes_amount` or `post_payment_credit_notes_amount` depending on its `status` at the time of credit note creation.\n\n### Parameters\n\n*   ID of the invoice.\n    \n*   Line items that make up the credit note.\n    \n*   The credit note’s memo appears on the credit note PDF.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `duplicate` |\n    | `fraudulent` |\n    | `order_change` |\n    | `product_unsatisfactory` |\n    \n\n### More parameters\n\n*   #### \n    \n    out\\_of\\_band\\_amountinteger\n    \n\n### Returns\n\nReturns a credit note object if the call succeeded.\n\n```\ncurl https://api.stripe.com/v1/credit_notes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d invoice=in_1MxvRkLkdIwHu7ixABNtI99m\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [Update a credit note](https://docs.stripe.com/api/credit_notes/update)\n\nUpdates an existing credit note.\n\n### Parameters\n\n*   Credit note memo.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the updated credit note object if the call succeeded.\n\nPOST /v1/credit\\_notes/:id\n\n```\ncurl https://api.stripe.com/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {    \"order_id\": \"6735\"  },  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [Retrieve a credit note's line items](https://docs.stripe.com/api/credit_notes/lines)\n\nWhen retrieving a credit note, you’ll get a **lines** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of [line\\_item objects](#credit_note_line_item_object).\n\nGET /v1/credit\\_notes/:id/lines\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes/cn_1NPtPy2eZvKYlo2CPaEMGMY8/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/credit_notes/cn_1NPtPy2eZvKYlo2CPaEMGMY8/lines\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/credit_notes/cn_1Nn7fB2eZvKYlo2CuJ0wZBlA/lines\",      \"has_more\": false,      \"data\": [        {          \"id\": \"cnli_1Nn7fB2eZvKYlo2COYgPG88j\",          \"object\": \"credit_note_line_item\",          \"amount\": 799,          \"amount_excluding_tax\": 799,          \"description\": \"My First Invoice Item (created for API docs)\",          \"discount_amount\": 0,          \"discount_amounts\": [],          \"invoice_line_item\": \"il_1Nn7fB2eZvKYlo2C3GKZP9wi\",          \"livemode\": false,          \"quantity\": 1,          \"tax_amounts\": [],          \"tax_rates\": [],          \"type\": \"invoice_line_item\",          \"unit_amount\": null,          \"unit_amount_decimal\": null,          \"unit_amount_excluding_tax\": \"799\"        }      ]    }    {...}    {...}  ],}\n```",
  "title": "The Credit Note object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/credit_notes/line_item",
  "markdown": "# Credit Note Line Item | Stripe API Reference\n\n## [The Credit Note Line Item object](https://docs.stripe.com/api/credit_notes/line_item)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   The integer amount in cents representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts.\n    \n*   #### \n    \n    amount\\_excluding\\_taxnullable integer\n    \n    The integer amount in cents representing the amount being credited for this line item, excluding all tax and discounts.\n    \n*   #### \n    \n    descriptionnullable string\n    \n    Description of the item being credited.\n    \n*   #### \n    \n    discount\\_amountintegerDeprecated\n    \n    The integer amount in cents representing the discount being credited for this line item.\n    \n*   #### \n    \n    discount\\_amountsarray of objects\n    \n    The amount of discount calculated per discount for this line item\n    \n*   #### \n    \n    invoice\\_line\\_itemnullable string\n    \n    ID of the invoice line item being credited\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The number of units of product being credited.\n    \n*   #### \n    \n    tax\\_amountsarray of objects\n    \n    The amount of tax calculated per tax rate for this line item\n    \n*   #### \n    \n    tax\\_ratesarray of objects\n    \n    The tax rates which apply to the line item.\n    \n*   The type of the credit note line item, one of `invoice_line_item` or `custom_line_item`. When the type is `invoice_line_item` there is an additional `invoice_line_item` property on the resource the value of which is the id of the credited line item on the invoice.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `custom_line_item` |\n    | `invoice_line_item` |\n    \n*   #### \n    \n    unit\\_amountnullable integer\n    \n    The cost of each unit of product being credited.\n    \n*   #### \n    \n    unit\\_amount\\_decimalnullable decimal string\n    \n    Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.\n    \n*   #### \n    \n    unit\\_amount\\_excluding\\_taxnullable decimal string\n    \n    The amount in cents representing the unit amount being credited for this line item, excluding all tax and discounts.\n    \n\nThe Credit Note Line Item object\n\n```\n{  \"id\": \"cnli_1NPtOx2eZvKYlo2CBH1NpUsU\",  \"object\": \"credit_note_line_item\",  \"amount\": 749,  \"amount_excluding_tax\": 749,  \"description\": \"My First Invoice Item (created for API docs)\",  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice_line_item\": \"il_1NPtOx2eZvKYlo2CAUuq0WVl\",  \"livemode\": false,  \"quantity\": 1,  \"tax_amounts\": [],  \"tax_rates\": [],  \"type\": \"invoice_line_item\",  \"unit_amount\": null,  \"unit_amount_decimal\": null,  \"unit_amount_excluding_tax\": \"749\"}\n```\n\n## [Create a credit note](https://docs.stripe.com/api/credit_notes/create)\n\nIssue a credit note to adjust the amount of a finalized invoice. For a `status=open` invoice, a credit note reduces its `amount_due`. For a `status=paid` invoice, a credit note does not affect its `amount_due`. Instead, it can result in any combination of the following:\n\n*   Refund: create a new refund (using `refund_amount`) or link an existing refund (using `refund`).\n*   Customer balance credit: credit the customer’s balance (using `credit_amount`) which will be automatically applied to their next invoice when it’s finalized.\n*   Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using `out_of_band_amount`).\n\nFor post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.\n\nYou may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s `pre_payment_credit_notes_amount` or `post_payment_credit_notes_amount` depending on its `status` at the time of credit note creation.\n\n### Parameters\n\n*   ID of the invoice.\n    \n*   Line items that make up the credit note.\n    \n*   The credit note’s memo appears on the credit note PDF.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `duplicate` |\n    | `fraudulent` |\n    | `order_change` |\n    | `product_unsatisfactory` |\n    \n\n### More parameters\n\n*   #### \n    \n    out\\_of\\_band\\_amountinteger\n    \n\n### Returns\n\nReturns a credit note object if the call succeeded.\n\n```\ncurl https://api.stripe.com/v1/credit_notes \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d invoice=in_1MxvRkLkdIwHu7ixABNtI99m\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [Update a credit note](https://docs.stripe.com/api/credit_notes/update)\n\nUpdates an existing credit note.\n\n### Parameters\n\n*   Credit note memo.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the updated credit note object if the call succeeded.\n\nPOST /v1/credit\\_notes/:id\n\n```\ncurl https://api.stripe.com/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"cn_1MxvRqLkdIwHu7ixY0xbUcxk\",  \"object\": \"credit_note\",  \"amount\": 1099,  \"amount_shipping\": 0,  \"created\": 1681750958,  \"currency\": \"usd\",  \"customer\": \"cus_NjLgPhUokHubJC\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"invoice\": \"in_1MxvRkLkdIwHu7ixABNtI99m\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1MxvRqLkdIwHu7ixFpdhBFQf\",        \"object\": \"credit_note_line_item\",        \"amount\": 1099,        \"amount_excluding_tax\": 1099,        \"description\": \"T-shirt\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1MxvRlLkdIwHu7ixnkbntxUV\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"invoice_line_item\",        \"unit_amount\": 1099,        \"unit_amount_decimal\": \"1099\",        \"unit_amount_excluding_tax\": \"1099\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1MxvRqLkdIwHu7ixY0xbUcxk/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {    \"order_id\": \"6735\"  },  \"number\": \"C9E0C52C-0036-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1M2JTkLkdIwHu7ix/test_YWNjdF8xTTJKVGtMa2RJd0h1N2l4LF9Oak9FOUtQNFlPdk52UXhFd2Z4SU45alpEd21kd0Y4LDcyMjkxNzU50200cROQsSK2/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1099,  \"subtotal_excluding_tax\": 1099,  \"tax_amounts\": [],  \"total\": 1099,  \"total_excluding_tax\": 1099,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```\n\n## [Retrieve a credit note's line items](https://docs.stripe.com/api/credit_notes/lines)\n\nWhen retrieving a credit note, you’ll get a **lines** property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of [line\\_item objects](#credit_note_line_item_object).\n\nGET /v1/credit\\_notes/:id/lines\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes/cn_1NPtPy2eZvKYlo2CPaEMGMY8/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/credit_notes/cn_1NPtPy2eZvKYlo2CPaEMGMY8/lines\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/credit_notes/cn_1Nn7fB2eZvKYlo2CuJ0wZBlA/lines\",      \"has_more\": false,      \"data\": [        {          \"id\": \"cnli_1Nn7fB2eZvKYlo2COYgPG88j\",          \"object\": \"credit_note_line_item\",          \"amount\": 799,          \"amount_excluding_tax\": 799,          \"description\": \"My First Invoice Item (created for API docs)\",          \"discount_amount\": 0,          \"discount_amounts\": [],          \"invoice_line_item\": \"il_1Nn7fB2eZvKYlo2C3GKZP9wi\",          \"livemode\": false,          \"quantity\": 1,          \"tax_amounts\": [],          \"tax_rates\": [],          \"type\": \"invoice_line_item\",          \"unit_amount\": null,          \"unit_amount_decimal\": null,          \"unit_amount_excluding_tax\": \"799\"        }      ]    }    {...}    {...}  ],}\n```\n\n## [Retrieve a credit note preview's line items](https://docs.stripe.com/api/credit_notes/preview_lines)\n\nWhen retrieving a credit note preview, you’ll get a **lines** property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.\n\n### Parameters\n\n*   ID of the invoice.\n    \n*   Line items that make up the credit note.\n    \n*   The credit note’s memo appears on the credit note PDF.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `duplicate` |\n    | `fraudulent` |\n    | `order_change` |\n    | `product_unsatisfactory` |\n    \n\n### More parameters\n\n*   #### \n    \n    out\\_of\\_band\\_amountinteger\n    \n\n### Returns\n\nReturns a list of [line\\_item objects](#credit_note_line_item_object).\n\nGET /v1/credit\\_notes/preview/lines\n\n```\ncurl -G https://api.stripe.com/v1/credit_notes/preview/lines \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d invoice=in_1Nn8592eZvKYlo2Ci4yFC46f\n```\n\n```\n{  \"id\": \"cn_1Nn7fB2eZvKYlo2CuJ0wZBlA\",  \"object\": \"credit_note\",  \"amount\": 1451,  \"amount_shipping\": 0,  \"created\": 1693952641,  \"currency\": \"usd\",  \"customer\": \"cus_9s6XKzkNRiz8i3\",  \"customer_balance_transaction\": null,  \"discount_amount\": 0,  \"discount_amounts\": [],  \"effective_at\": null,  \"invoice\": \"in_1Nn7fB2eZvKYlo2C7meA67Xp\",  \"lines\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"cnli_1Nn7fB2eZvKYlo2Cp8nLMci9\",        \"object\": \"credit_note_line_item\",        \"amount\": 951,        \"amount_excluding_tax\": 951,        \"description\": \"My First Invoice Item (created for API docs)\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"invoice_line_item\": \"il_1Nn7fB2eZvKYlo2ChKG2H1tv\",        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [          {            \"amount\": 152,            \"inclusive\": false,            \"tax_rate\": \"txr_1Nn7fB2eZvKYlo2CcbF7zzmD\",            \"taxability_reason\": null,            \"taxable_amount\": 799          }        ],        \"tax_rates\": [          {            \"id\": \"txr_1Nn7fB2eZvKYlo2CcbF7zzmD\",            \"object\": \"tax_rate\",            \"active\": true,            \"country\": \"DE\",            \"created\": 1693952641,            \"description\": \"VAT Germany\",            \"display_name\": \"VAT\",            \"effective_percentage\": null,            \"inclusive\": false,            \"jurisdiction\": \"DE\",            \"livemode\": false,            \"metadata\": {},            \"percentage\": 19,            \"state\": null,            \"tax_type\": \"vat\"          }        ],        \"type\": \"invoice_line_item\",        \"unit_amount\": null,        \"unit_amount_decimal\": null,        \"unit_amount_excluding_tax\": \"951\"      },      {        \"id\": \"cnli_1Nn7fB2eZvKYlo2C7OxQLHdz\",        \"object\": \"credit_note_line_item\",        \"amount\": 500,        \"amount_excluding_tax\": 500,        \"description\": \"Service credit\",        \"discount_amount\": 0,        \"discount_amounts\": [],        \"livemode\": false,        \"quantity\": 1,        \"tax_amounts\": [],        \"tax_rates\": [],        \"type\": \"custom_line_item\",        \"unit_amount\": 500,        \"unit_amount_decimal\": \"500\",        \"unit_amount_excluding_tax\": \"500\"      }    ],    \"has_more\": false,    \"url\": \"/v1/credit_notes/cn_1Nn7fB2eZvKYlo2CuJ0wZBlA/lines\"  },  \"livemode\": false,  \"memo\": null,  \"metadata\": {},  \"number\": \"ABCD-1234-CN-01\",  \"out_of_band_amount\": null,  \"pdf\": \"https://pay.stripe.com/credit_notes/acct_1032D82eZvKYlo2C/cnst_123456789/pdf?s=ap\",  \"reason\": null,  \"refund\": null,  \"shipping_cost\": null,  \"status\": \"issued\",  \"subtotal\": 1451,  \"subtotal_excluding_tax\": 1451,  \"tax_amounts\": [    {      \"amount\": 152,      \"inclusive\": false,      \"tax_rate\": \"txr_1Nn7fB2eZvKYlo2CcbF7zzmD\",      \"taxability_reason\": null,      \"taxable_amount\": 799    }  ],  \"total\": 1451,  \"total_excluding_tax\": null,  \"type\": \"pre_payment\",  \"voided_at\": null}\n```",
  "title": "Credit Note Line Item | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/billing/invoices/create",
  "markdown": "# Use the Dashboard | Stripe DocumentationThe Stripe Docs logo\n\n## Create, send, and modify invoices from the Stripe Dashboard.\n\nLearn how to create, send, and modify an [invoice](https://docs.stripe.com/api/invoices \"invoices\") from the [Dashboard](https://dashboard.stripe.com/invoices). Invoices provide an itemized list of goods and services rendered, which includes the cost, quantity, and taxes. You can also use them as a tool to collect payment. To send invoices automatically, [integrate with the Invoicing API](https://docs.stripe.com/invoicing/integration).\n\n## Create an invoice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nTo create and send an invoice, complete the following steps:\n\n1.  In the Dashboard, go to the [Invoices overview page](https://dashboard.stripe.com/invoices) and click **Create Invoice** to open the [invoice editor](https://dashboard.stripe.com/invoices/create). Whenever you exit the invoice editor, Stripe saves a draft. (To delete a draft invoice, click the overflow menu () next to an invoice on the [Invoices page](https://dashboard.stripe.com/invoices).)\n    \n2.  Select an existing customer or click **Add new customer**. For new customers, you have to enter a name. You can optionally add an email address or other details.\n    \n3.  Optional Click the overflow menu () in the **Items** section to open the **Items Options** dialog. Choose the desired currency and tax rendering option for the invoice.\n    \n4.  Select **Add one-time item** to create a single, one-time item. To save a product for future use, select **Create new product**.\n    \n5.  Enter the **Quantity** and **Price** for your new item or product.\n    \n6.  Optional Click the **Item options** under each item to add a tax rate, coupon, or supply date.\n    \n    #### Note\n    \n7.  Optional Use the **Memo** box to provide more information to your customer. You can edit the memo on an invoice by clicking **Edit memo** on its details page.\n    \n8.  Select one of the following invoice delivery options:\n    \n    *   **Automatically charge a payment method on file**—Immediately charges the invoice amount to your customer’s payment method that you have on file.\n        \n    *   **Send invoice or payment page link manually**—Provides a payment link for you to send to customers after you confirm the invoice.\n        \n    *   **Email invoice with link**—Enables Stripe to send an email with a payment page and an invoice PDF.\n        \n    *   **Email invoice without link**—Enables Stripe to send an invoice PDF only.\n        \n9.  Optional Expand **Advanced options**, and add [custom fields](https://docs.stripe.com/invoicing/customize#custom-fields). To learn more, see [Net prices and taxes](https://docs.stripe.com/invoicing/taxes#net-price-taxes). Expand **Advanced options**, and add [custom fields](https://docs.stripe.com/invoicing/customize#custom-fields).\n    \n10.  Click **Review invoice** and decide whether you want to include additional emails or continue editing. Send the invoice.\n    \n\nCreate an invoice with the Dashboard\n\n## Modify an invoice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nWith the Dashboard, you can duplicate an invoice and modify the new copy. When you duplicate an invoice, Stripe copies all of the information on the original invoice except for credit notes, deleted (or archived) products, prices, coupons, discounts, and tax rates. If you made a mistake on an invoice you already created, duplicate it, make your corrections, and then send the new invoice. Remember to [void](https://docs.stripe.com/invoicing/overview#void) the incorrect invoice as well.\n\n#### Note\n\nYou can change the status of an [open](https://docs.stripe.com/invoicing/overview#open) invoice in the Dashboard by going to its details page and choosing **More** > **Change Invoice Status**.\n\nTo duplicate an invoice, [view your invoices](https://dashboard.stripe.com/invoices) and click the overflow menu () for the invoice you want to duplicate. Click **Duplicate invoice** to create, edit, and then send the new invoice.\n\n![](https://b.stripecdn.com/docs-statics-srv/assets/invoice-duplication.7f22a89383b54d5e45693f642942afa1.png)\n\nDuplicate an invoice from the Dashboard\n\n## Customize an invoice ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nYou can [customize invoices](https://docs.stripe.com/invoicing/customize) in several ways. These options allow you to add your own [branding](https://docs.stripe.com/invoicing/customize#brand-customization) and modify your invoices so that they comply in the jurisdictions ​​where you operate.\n\n## Invoice receipts ![](https://b.stripecdn.com/docs-statics-srv/assets/fcc3a1c24df6fcffface6110ca4963de.svg) \n\nStripe creates receipts when a customer pays an invoice, or makes any [subscription](https://docs.stripe.com/billing/subscriptions/creating \"subscriptions\") payment. We itemize the receipts for subscription and invoice payments to include line items, discounts, and taxes for the payment. To automatically send receipts, make sure that you enable the **Successful payments** option in your [Email settings](https://dashboard.stripe.com/settings/emails) and that you also add the customer’s email.\n\nAfter payment, the [Hosted Invoice Page](https://docs.stripe.com/invoicing/hosted-invoice-page) includes a link to a receipt that a customer can download for their own records. You can also manually send a receipt by clicking the **Send receipt** button on the **Invoice details** page. To email yourself a test receipt, go to your [Branding settings](https://dashboard.stripe.com/settings/branding) and hover over the email receipt to see the **Send test receipt** button. To learn more about email receipts, see [Email receipts](https://docs.stripe.com/receipts).",
  "title": "Use the Dashboard | Stripe Documentation",
  "description": "Create, send, and modify invoices from the Stripe Dashboard.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/billing/meter-event_adjustment/object",
  "markdown": "# The Meter Event Adjustment object\n\n### Attributes\n\n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Specifies which event to cancel.\n    \n*   The name of the meter event. Corresponds with the `event_name` field on a meter.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The meter event adjustment’s status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `complete`<br><br>The event adjustment has been processed. |\n    | `pending`<br><br>The event adjustment is still being processed. |\n    \n*   Specifies whether to cancel a single event or a range of events for a time period. Time period cancellation is not supported yet.\n    \n    Possible enum values\n    \n    `cancel`\n    \n    Cancel a single meter event by identifier.\n    \n\nThe Meter Event Adjustment object\n\n```\n{  \"object\": \"billing.meter_event_adjustment\",  \"livemode\": false,  \"status\": \"pending\",  \"event_name\": \"ai_search_api\",  \"type\": \"cancel\",  \"cancel\": {    \"identifier\": \"identifier_123\"  }}\n```\n\n## [Create a billing meter event adjustment](https://docs.stripe.com/api/billing/meter-event_adjustment/create)\n\nCreates a billing meter event adjustment\n\n### Parameters\n\n*   The name of the meter event. Corresponds with the `event_name` field on a meter.\n    \n*   Specifies whether to cancel a single event or a range of events for a time period. Time period cancellation is not supported yet.\n    \n    Possible enum values\n    \n    `cancel`\n    \n    Cancel a single meter event by identifier.\n    \n*   Specifies which event to cancel.\n    \n\n### Returns\n\nReturns a billing meter event adjustment\n\nPOST /v1/billing/meter\\_event\\_adjustments\n\n```\ncurl https://api.stripe.com/v1/billing/meter_event_adjustments \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d type=cancel \\  -d event_name=ai_search_api \\  -d \"cancel[identifier]\"=identifier_123\n```\n\n```\n{  \"object\": \"billing.meter_event_adjustment\",  \"livemode\": false,  \"status\": \"pending\",  \"event_name\": \"ai_search_api\",  \"type\": \"cancel\",  \"cancel\": {    \"identifier\": \"identifier_123\"  }}\n```\n\n## [Meter Event Summary](https://docs.stripe.com/api/billing/meter-event_summary)\n\nA billing meter event summary represents an aggregated view of a customer’s billing meter events within a specified timeframe. It indicates how much usage was accrued by a customer for that period.\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The Meter Event Adjustment object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/billing/meter-event_summary/object",
  "markdown": "# The Meter Event Summary object\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Aggregated value of all the events within `start_time` (inclusive) and `end_time` (inclusive). The aggregation strategy is defined on meter via `default_aggregation`.\n    \n*   End timestamp for this event summary (exclusive). Must be aligned with minute boundaries.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The meter associated with this event summary.\n    \n*   Start timestamp for this event summary (inclusive). Must be aligned with minute boundaries.\n    \n\nThe Meter Event Summary object\n\n```\n{  \"id\": \"mtrusg_test_6041CMAXJrFdZ56U76ce6L35Hz7xA3Tn58z5sY7bq6gM3XN5bx5Y459D4Xt2E17ko6M86kt7kV3bl5PM7LV59l4sY50b6oU5QD7bY3HP58z5sY7bq6gM3Y57LF2Dr7od3Hb8927gh4Tt4Lo4xO4ge60T81C6Y53gl4QS2D33ft3HC3Xi3Cy3Cy3Cy\",  \"object\": \"billing.meter_event_summary\",  \"aggregated_value\": 10,  \"end_time\": 1711659600,  \"livemode\": false,  \"meter\": \"mtr_test_61Q8nQMqIFK9fRQmr41CMAXJrFdZ5MnA\",  \"start_time\": 1711656000}\n```\n\n## [List billing meter event summaries](https://docs.stripe.com/api/billing/meter-event_summary/list)\n\nRetrieve a list of billing meter event summaries.\n\n### Parameters\n\n*   The customer for which to fetch event summaries.\n    \n*   #### \n    \n    end\\_timetimestampRequired\n    \n    The timestamp from when to stop aggregating meter events (exclusive). Must be aligned with minute boundaries.\n    \n*   Unique identifier for the object.\n    \n*   #### \n    \n    start\\_timetimestampRequired\n    \n    The timestamp from when to start aggregating meter events (inclusive). Must be aligned with minute boundaries.\n    \n*   #### \n    \n    value\\_grouping\\_windowenum\n    \n    Specifies what granularity to use when generating event summaries. If not specified, a single event summary would be returned for the specified time range. For hourly granularity, start and end times must align with hour boundaries (e.g., 00:00, 01:00, …, 23:00). For daily granularity, start and end times must align with UTC day boundaries (00:00 UTC).\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `day`<br><br>Generate event summaries per day. |\n    | `hour`<br><br>Generate event summaries per hour. |\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of billing meter event summaries.\n\nGET /v1/billing/meters/:id/event\\_summaries\n\n```\ncurl -G https://api.stripe.com/v1/billing/meters/mtr_test_61Q8nQMqIFK9fRQmr41CMAXJrFdZ5MnA/event_summaries \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d customer=cus_Pp40waj64hdRxb \\  -d start_time=1711584000 \\  -d end_time=1711666800 \\  -d value_grouping_window=hour\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"mtrusg_test_6041CMAXJrFdZ56U76ce6L35Hz7xA3Tn58z5sY7bq6gM3XN5bx5Y459D4Xt2E17ko6M86kt7kV3bl5PM7LV59l4sY50b6oU5QD7bY3HP58z5sY7bq6gM3Y57LF2Dr7od3Hb8927gh4Tt4Lo4xO4ge60T81C6Y53gl4QS2D33ft3HC3Xl3bk3Cy3Cy\",      \"object\": \"billing.meter_event_summary\",      \"aggregated_value\": 15,      \"end_time\": 1711663200,      \"livemode\": false,      \"meter\": \"mtr_test_61Q8nQMqIFK9fRQmr41CMAXJrFdZ5MnA\",      \"start_time\": 1711659600    },    {      \"id\": \"mtrusg_test_6041CMAXJrFdZ56U76ce6L35Hz7xA3Tn58z5sY7bq6gM3XN5bx5Y459D4Xt2E17ko6M86kt7kV3bl5PM7LV59l4sY50b6oU5QD7bY3HP58z5sY7bq6gM3Y57LF2Dr7od3Hb8927gh4Tt4Lo4xO4ge60T81C6Y53gl4QS2D33ft3HC3Xi3Cy3Cy3Cy\",      \"object\": \"billing.meter_event_summary\",      \"aggregated_value\": 10,      \"end_time\": 1711659600,      \"livemode\": false,      \"meter\": \"mtr_test_61Q8nQMqIFK9fRQmr41CMAXJrFdZ5MnA\",      \"start_time\": 1711656000    }  ],  \"has_more\": false,  \"url\": \"/v1/billing/meters/:id/event_summaries\"}\n```\n\n## [Plans](https://docs.stripe.com/api/plans)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\nPlans define the base price, currency, and billing cycle for recurring purchases of products. [Products](#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.\n\nFor example, you might have a single “gold” product that has plans for $10/month, $100/year, €9/month, and €90/year.\n\nRelated guides: [Set up a subscription](https://docs.stripe.com/billing/subscriptions/set-up-subscription) and more about [products and prices](https://docs.stripe.com/products-prices/overview).\n\n## [Tax IDs](https://docs.stripe.com/api/tax_ids)\n\nEndpoints\n\n[POST/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_create)[POST/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/create)[GET/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_retrieve)[GET/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/retrieve)[GET/v1/customers/:id/tax\\_ids](https://docs.stripe.com/api/tax_ids/customer_list)[GET/v1/tax\\_ids](https://docs.stripe.com/api/tax_ids/list)[DELETE/v1/customers/:id/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/customer_delete)[DELETE/v1/tax\\_ids/:id](https://docs.stripe.com/api/tax_ids/delete)\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The Meter Event Summary object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/plans/object",
  "markdown": "# The Plan object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Whether the plan can be used for new purchases.\n    \n*   The unit amount in cents to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.\n    \n\n*   The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   A brief description of the plan, hidden from customers.\n    \n*   #### \n    \n    productnullable stringExpandable\n    \n    The product whose pricing this plan determines.\n    \n\n### More attributes\n\n*   #### \n    \n    aggregate\\_usagenullable enum\n    \n*   #### \n    \n    amount\\_decimalnullable decimal string\n    \n\n*   #### \n    \n    tiersnullable array of objectsExpandable\n    \n\n*   #### \n    \n    transform\\_usagenullable object\n    \n*   #### \n    \n    trial\\_period\\_daysnullable integer\n    \n\n```\n{  \"id\": \"plan_NjpIbv3g3ZibnD\",  \"object\": \"plan\",  \"active\": true,  \"aggregate_usage\": null,  \"amount\": 1200,  \"amount_decimal\": \"1200\",  \"billing_scheme\": \"per_unit\",  \"created\": 1681851647,  \"currency\": \"usd\",  \"interval\": \"month\",  \"interval_count\": 1,  \"livemode\": false,  \"metadata\": {},  \"nickname\": null,  \"product\": \"prod_NjpI7DbZx6AlWQ\",  \"tiers_mode\": null,  \"transform_usage\": null,  \"trial_period_days\": null,  \"usage_type\": \"licensed\"}\n```\n\n## [Create a plan](https://docs.stripe.com/api/plans/create)\n\nYou can now model subscriptions more flexibly using the [Prices API](#prices). It replaces the Plans API and is backwards compatible to simplify your migration.\n\n### Parameters\n\n*   Specifies billing frequency. Either `day`, `week`, `month` or `year`.\n    \n*   The product whose pricing the created plan will represent. This can either be the ID of an existing product, or a dictionary containing fields used to create a [service product](https://docs.stripe.com/api#product_object-type).\n    \n*   Whether the plan is currently available for new subscriptions. Defaults to `true`.\n    \n*   #### \n    \n    amountintegerRequired unless billing\\_scheme=tiered\n    \n    A positive integer in cents (or 0 for a free plan) representing how much to charge on a recurring basis.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A brief description of the plan, hidden from customers.\n    \n\n### More parameters\n\n*   #### \n    \n    tiersarray of objectsRequired if billing\\_scheme=tiered\n    \n*   #### \n    \n    tiers\\_modeenumRequired if billing\\_scheme=tiered\n    \n\n### Returns\n\nReturns the plan object.\n\n```\ncurl https://api.stripe.com/v1/plans \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=1200 \\  -d currency=usd \\  -d interval=month \\  -d product=prod_NjpI7DbZx6AlWQ\n```\n\n```\n{  \"id\": \"plan_NjpIbv3g3ZibnD\",  \"object\": \"plan\",  \"active\": true,  \"aggregate_usage\": null,  \"amount\": 1200,  \"amount_decimal\": \"1200\",  \"billing_scheme\": \"per_unit\",  \"created\": 1681851647,  \"currency\": \"usd\",  \"interval\": \"month\",  \"interval_count\": 1,  \"livemode\": false,  \"metadata\": {},  \"nickname\": null,  \"product\": \"prod_NjpI7DbZx6AlWQ\",  \"tiers_mode\": null,  \"transform_usage\": null,  \"trial_period_days\": null,  \"usage_type\": \"licensed\"}\n```\n\n## [Update a plan](https://docs.stripe.com/api/plans/update)\n\nUpdates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.\n\n### Parameters\n\n*   Whether the plan is currently available for new subscriptions.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   A brief description of the plan, hidden from customers.\n    \n\n### More parameters\n\n### Returns\n\nThe updated plan object is returned upon success. Otherwise, this call raises [an error](#errors).\n\n```\ncurl https://api.stripe.com/v1/plans/plan_NjpIbv3g3ZibnD \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"plan_NjpIbv3g3ZibnD\",  \"object\": \"plan\",  \"active\": true,  \"aggregate_usage\": null,  \"amount\": 1200,  \"amount_decimal\": \"1200\",  \"billing_scheme\": \"per_unit\",  \"created\": 1681851647,  \"currency\": \"usd\",  \"interval\": \"month\",  \"interval_count\": 1,  \"livemode\": false,  \"metadata\": {    \"order_id\": \"6735\"  },  \"nickname\": null,  \"product\": \"prod_NjpI7DbZx6AlWQ\",  \"tiers_mode\": null,  \"transform_usage\": null,  \"trial_period_days\": null,  \"usage_type\": \"licensed\"}\n```\n\n## [Retrieve a plan](https://docs.stripe.com/api/plans/retrieve)\n\nRetrieves the plan with the given ID.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a plan if a valid plan ID was provided. Raises [an error](#errors) otherwise.\n\n```\ncurl https://api.stripe.com/v1/plans/plan_NjpIbv3g3ZibnD \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"plan_NjpIbv3g3ZibnD\",  \"object\": \"plan\",  \"active\": true,  \"aggregate_usage\": null,  \"amount\": 1200,  \"amount_decimal\": \"1200\",  \"billing_scheme\": \"per_unit\",  \"created\": 1681851647,  \"currency\": \"usd\",  \"interval\": \"month\",  \"interval_count\": 1,  \"livemode\": false,  \"metadata\": {},  \"nickname\": null,  \"product\": \"prod_NjpI7DbZx6AlWQ\",  \"tiers_mode\": null,  \"transform_usage\": null,  \"trial_period_days\": null,  \"usage_type\": \"licensed\"}\n```\n\n## [List all plans](https://docs.stripe.com/api/plans/list)\n\nReturns a list of your plans.\n\n### Parameters\n\n*   Only return plans that are active or inactive (e.g., pass `false` to list all inactive plans).\n    \n*   Only return plans for the given product.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` plans, starting after plan `starting_after`. Each entry in the array is a separate plan object. If no more plans are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/plans \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/plans\",  \"has_more\": false,  \"data\": [    {      \"id\": \"plan_NjpIbv3g3ZibnD\",      \"object\": \"plan\",      \"active\": true,      \"aggregate_usage\": null,      \"amount\": 1200,      \"amount_decimal\": \"1200\",      \"billing_scheme\": \"per_unit\",      \"created\": 1681851647,      \"currency\": \"usd\",      \"interval\": \"month\",      \"interval_count\": 1,      \"livemode\": false,      \"metadata\": {},      \"nickname\": null,      \"product\": \"prod_NjpI7DbZx6AlWQ\",      \"tiers_mode\": null,      \"transform_usage\": null,      \"trial_period_days\": null,      \"usage_type\": \"licensed\"    }    {...}    {...}  ],}\n```",
  "title": "The Plan object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/fee_refunds/object",
  "markdown": "# The Application Fee Refund object\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ffee_refunds%2Fobject)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Amount, in cents.\n    \n\n*   ID of the application fee that was refunded.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n\n### More attributes\n\n*   #### \n    \n    balance\\_transactionnullable stringExpandable\n    \n\nThe Application Fee Refund object\n\n```\n{  \"id\": \"fr_1MtJRpKbnvuxQXGuM6Ww0D24\",  \"object\": \"fee_refund\",  \"amount\": 100,  \"balance_transaction\": null,  \"created\": 1680651573,  \"currency\": \"usd\",  \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",  \"metadata\": {}}\n```\n\n## [Create an application fee refund](https://docs.stripe.com/api/fee_refunds/create)\n\nRefunds an application fee that has previously been collected but not yet refunded. Funds will be refunded to the Stripe account from which the fee was originally collected.\n\nYou can optionally refund only part of an application fee. You can do so multiple times, until the entire fee has been refunded.\n\nOnce entirely refunded, an application fee can’t be refunded again. This method will raise an error when called on an already-refunded application fee, or when trying to refund more money than is left on an application fee.\n\n### Parameters\n\n*   A positive integer, in _cents_, representing how much of this fee to refund. Can refund only up to the remaining unrefunded amount of the fee.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the `Application Fee Refund` object if the refund succeeded. Raises [an error](#errors) if the fee has already been refunded, or if an invalid fee identifier was provided.\n\nPOST /v1/application\\_fees/:id/refunds\n\n```\ncurl -X POST https://api.stripe.com/v1/application_fees/fr_1MtJRpKbnvuxQXGuM6Ww0D24/refunds \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fr_1MtJRpKbnvuxQXGuM6Ww0D24\",  \"object\": \"fee_refund\",  \"amount\": 100,  \"balance_transaction\": null,  \"created\": 1680651573,  \"currency\": \"usd\",  \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",  \"metadata\": {}}\n```\n\n## [Update an application fee refund](https://docs.stripe.com/api/fee_refunds/update)\n\nUpdates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\nThis request only accepts metadata as an argument.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the application fee refund object if the update succeeded. This call will raise [an error](#errors) if update parameters are invalid.\n\nPOST /v1/application\\_fees/:id/refunds/:id\n\n```\ncurl https://api.stripe.com/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN/refunds/fr_1MtJRpKbnvuxQXGuM6Ww0D24 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"fr_1MtJRpKbnvuxQXGuM6Ww0D24\",  \"object\": \"fee_refund\",  \"amount\": 100,  \"balance_transaction\": null,  \"created\": 1680651573,  \"currency\": \"usd\",  \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",  \"metadata\": {    \"order_id\": \"6735\"  }}\n```\n\n## [Retrieve an application fee refund](https://docs.stripe.com/api/fee_refunds/retrieve)\n\nBy default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the application fee refund object.\n\nGET /v1/application\\_fees/:id/refunds/:id\n\n```\ncurl https://api.stripe.com/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN/refunds/fr_1MtJRpKbnvuxQXGuM6Ww0D24 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fr_1MtJRpKbnvuxQXGuM6Ww0D24\",  \"object\": \"fee_refund\",  \"amount\": 100,  \"balance_transaction\": null,  \"created\": 1680651573,  \"currency\": \"usd\",  \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",  \"metadata\": {}}\n```\n\n## [List all application fee refunds](https://docs.stripe.com/api/fee_refunds/list)\n\nYou can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional refunds.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` refunds, starting after `starting_after`. Each entry in the array is a separate application fee refund object. If no more refunds are available, the resulting array will be empty. If you provide a non-existent application fee ID, this call raises [an error](#errors).\n\nGET /v1/application\\_fees/:id/refunds\n\n```\ncurl -G https://api.stripe.com/v1/application_fees/fr_1MtJRpKbnvuxQXGuM6Ww0D24/refunds \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/application_fees/fr_1MtJRpKbnvuxQXGuM6Ww0D24/refunds\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fr_1MtJRpKbnvuxQXGuM6Ww0D24\",      \"object\": \"fee_refund\",      \"amount\": 100,      \"balance_transaction\": null,      \"created\": 1680651573,      \"currency\": \"usd\",      \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",      \"metadata\": {}    }    {...}    {...}  ],}\n```",
  "title": "The Application Fee Refund object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/billing/meter/object",
  "markdown": "# The Meter object | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fbilling%2Fmeter%2Fobject)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   Fields that specify how to map a meter event to a customer.\n    \n*   The meter’s name.\n    \n*   The name of the meter event to record usage for. Corresponds with the `event_name` field on meter events.\n    \n*   #### \n    \n    event\\_time\\_windownullable enum\n    \n    The time window to pre-aggregate meter events for, if any.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `day`<br><br>Events are pre-aggregated in daily buckets. |\n    | `hour`<br><br>Events are pre-aggregated in hourly buckets. |\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The meter’s status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The meter is active. |\n    | `inactive`<br><br>The meter is inactive. No more events for this meter will be accepted. The meter cannot be attached to a price. |\n    \n*   The timestamps at which the meter status changed.\n    \n*   Time at which the object was last updated. Measured in seconds since the Unix epoch.\n    \n*   Fields that specify how to calculate a meter event’s value.\n    \n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Create a billing meter](https://docs.stripe.com/api/billing/meter/create)\n\nCreates a billing meter\n\n### Parameters\n\n*   #### \n    \n    default\\_aggregationobjectRequired\n    \n    The default settings to aggregate a meter’s events with.\n    \n*   #### \n    \n    display\\_namestringRequired\n    \n    The meter’s name.\n    \n*   The name of the meter event to record usage for. Corresponds with the `event_name` field on meter events.\n    \n*   Fields that specify how to map a meter event to a customer.\n    \n*   The time window to pre-aggregate meter events for, if any.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `day`<br><br>Events are pre-aggregated in daily buckets. |\n    | `hour`<br><br>Events are pre-aggregated in hourly buckets. |\n    \n*   Fields that specify how to calculate a meter event’s value.\n    \n\n### Returns\n\nReturns a billing meter\n\n```\ncurl https://api.stripe.com/v1/billing/meters \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d display_name=\"Search API Calls\" \\  -d event_name=ai_search_api \\  -d \"default_aggregation[formula]\"=sum \\  -d \"value_settings[event_payload_key]\"=tokens \\  -d \"customer_mapping[type]\"=by_id \\  -d \"customer_mapping[event_payload_key]\"=stripe_customer_id\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704824589,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Update a billing meter](https://docs.stripe.com/api/billing/meter/update)\n\nUpdates a billing meter\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n*   The meter’s name.\n    \n\n### Returns\n\nReturns a billing meter\n\nPOST /v1/billing/meters/:id\n\n```\ncurl https://api.stripe.com/v1/billing/meters/mtr_123 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d display_name=\"Updated Display Name\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Updated Display Name\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [Retrieve a billing meter](https://docs.stripe.com/api/billing/meter/retrieve)\n\nRetrieves a billing meter given an ID\n\n### Parameters\n\n*   Unique identifier for the object.\n    \n\n### Returns\n\nReturns a billing meter\n\nGET /v1/billing/meters/:id\n\n```\ncurl https://api.stripe.com/v1/billing/meters/mtr_123 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"mtr_123\",  \"object\": \"billing.meter\",  \"created\": 1704824589,  \"customer_mapping\": {    \"type\": \"by_id\",    \"event_payload_key\": \"stripe_customer_id\"  },  \"default_aggregation\": {    \"formula\": \"sum\"  },  \"display_name\": \"Search API Calls\",  \"event_name\": \"ai_search_api\",  \"event_time_window\": null,  \"livemode\": false,  \"status\": \"active\",  \"status_transitions\": {    \"deactivated_at\": null  },  \"updated\": 1704898330,  \"value_settings\": {    \"event_payload_key\": \"tokens\"  }}\n```\n\n## [List billing meters](https://docs.stripe.com/api/billing/meter/list)\n\nRetrieve a list of billing meters.\n\n### Parameters\n\n*   Filter results to only include meters with the given status.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `active`<br><br>The meter is active. |\n    | `inactive`<br><br>The meter is inactive. No more events for this meter will be accepted. The meter cannot be attached to a price. |\n    \n\n### More parameters\n\n### Returns\n\nReturns a list of billing meters.\n\n```\ncurl https://api.stripe.com/v1/billing/meters \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"list\",  \"data\": [    {      \"id\": \"mtr_123\",      \"object\": \"billing.meter\",      \"created\": 1704824589,      \"customer_mapping\": {        \"type\": \"by_id\",        \"event_payload_key\": \"stripe_customer_id\"      },      \"default_aggregation\": {        \"formula\": \"sum\"      },      \"display_name\": \"Search API Calls\",      \"event_name\": \"ai_search_api\",      \"event_time_window\": null,      \"livemode\": false,      \"status\": \"active\",      \"status_transitions\": {        \"deactivated_at\": null      },      \"updated\": 1704898330,      \"value_settings\": {        \"event_payload_key\": \"tokens\"      }    }  ],  \"has_more\": true,  \"url\": \"v1/billing/meters\"}\n```",
  "title": "The Meter object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/test_clocks/object",
  "markdown": "# The Test Clock object | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftest_clocks%2Fobject)\n\n## [The Test Clock object](https://docs.stripe.com/api/test_clocks/object)Test helper\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   Time at which this clock is scheduled to auto delete.\n    \n*   Time at which all objects belonging to this clock are frozen.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   The custom name supplied at creation.\n    \n*   The status of the Test Clock.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `advancing`<br><br>In the process of advancing time for the test clock objects. |\n    | `internal_failure`<br><br>Failed to advance time. Future requests to advance time will fail. |\n    | `ready`<br><br>All test clock objects have advanced to the `frozen_time`. |\n    \n\n```\n{  \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",  \"object\": \"test_helpers.test_clock\",  \"created\": 1680112806,  \"deletes_after\": 1680717606,  \"frozen_time\": 1577836800,  \"livemode\": false,  \"name\": null,  \"status\": \"ready\"}\n```\n\n## [Create a test clock](https://docs.stripe.com/api/test_clocks/create)Test helper\n\nCreates a new test clock that can be attached to new customers and quotes.\n\n### Parameters\n\n*   #### \n    \n    frozen\\_timetimestampRequired\n    \n    The initial frozen time for this test clock.\n    \n*   The name for this test clock.\n    \n\n### Returns\n\nThe newly created `TestClock` object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nPOST /v1/test\\_helpers/test\\_clocks\n\n```\ncurl https://api.stripe.com/v1/test_helpers/test_clocks \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d frozen_time=1577836800\n```\n\n```\n{  \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",  \"object\": \"test_helpers.test_clock\",  \"created\": 1680112806,  \"deletes_after\": 1680717606,  \"frozen_time\": 1577836800,  \"livemode\": false,  \"name\": null,  \"status\": \"ready\"}\n```\n\n## [Retrieve a test clock](https://docs.stripe.com/api/test_clocks/retrieve)Test helper\n\nRetrieves a test clock.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the `TestClock` object. Otherwise, this call raises [an error](#errors).\n\nGET /v1/test\\_helpers/test\\_clocks/:id\n\n```\ncurl https://api.stripe.com/v1/test_helpers/test_clocks/clock_1Mr3I22eZvKYlo2Ck0rgMqd7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",  \"object\": \"test_helpers.test_clock\",  \"created\": 1680112806,  \"deletes_after\": 1680717606,  \"frozen_time\": 1577836800,  \"livemode\": false,  \"name\": null,  \"status\": \"ready\"}\n```\n\n## [List all test clocks](https://docs.stripe.com/api/test_clocks/list)Test helper\n\nReturns a list of your test clocks.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` test clocks, starting after `starting_after`. Each entry in the array is a separate test clock object. If no more test clocks are available, the resulting array will be empty.\n\nGET /v1/test\\_helpers/test\\_clocks\n\n```\ncurl -G https://api.stripe.com/v1/test_helpers/test_clocks \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/test_helpers/test_clocks\",  \"has_more\": false,  \"data\": [    {      \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",      \"object\": \"test_helpers.test_clock\",      \"created\": 1680112806,      \"deletes_after\": 1680717606,      \"frozen_time\": 1577836800,      \"livemode\": false,      \"name\": null,      \"status\": \"ready\"    }    {...}    {...}  ],}\n```\n\n## [Delete a test clock](https://docs.stripe.com/api/test_clocks/delete)Test helper\n\nDeletes a test clock.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nThe deleted `TestClock` object is returned upon success. Otherwise, this call raises [an error](#errors).\n\nDELETE /v1/test\\_helpers/test\\_clocks/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/test_helpers/test_clocks/clock_1Mr3I22eZvKYlo2Ck0rgMqd7 \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"clock_1Mr3I22eZvKYlo2Ck0rgMqd7\",  \"object\": \"test_helpers.test_clock\",  \"deleted\": true}\n```",
  "title": "The Test Clock object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/js/tokens/create_token?type=pii",
  "markdown": "# Stripe JS Reference\n\n[js](https://docs.stripe.com/js)",
  "title": "Stripe JS Reference",
  "description": "",
  "languageCode": "en"
},
{
  "url": "https://docs.stripe.com/api/country_specs/object",
  "markdown": "# The Country Spec object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object. Represented as the ISO country code for this country.\n    \n*   The default currency for this country. This applies to both payment methods and bank accounts.\n    \n*   #### \n    \n    supported\\_bank\\_account\\_currenciesobject\n    \n    Currencies that can be accepted in the specific country (for transfers).\n    \n*   #### \n    \n    supported\\_payment\\_currenciesarray of strings\n    \n    Currencies that can be accepted in the specified country (for payments).\n    \n*   #### \n    \n    supported\\_payment\\_methodsarray of strings\n    \n    Payment methods available in the specified country. You may need to enable some payment methods (e.g., [ACH](https://stripe.com/docs/ach)) on your account before they appear in this list. The `stripe` payment method refers to [charging through your platform](https://stripe.com/docs/connect/destination-charges).\n    \n*   #### \n    \n    supported\\_transfer\\_countriesarray of strings\n    \n    Countries that can accept transfers from the specified country.\n    \n\n### More attributes\n\n*   #### \n    \n    verification\\_fieldsobject\n    \n\n```\n{  \"id\": \"US\",  \"object\": \"country_spec\",  \"default_currency\": \"usd\",  \"supported_bank_account_currencies\": {    \"usd\": [      \"US\"    ]  },  \"supported_payment_currencies\": [    \"usd\",    \"aed\",    \"afn\",    \"...\"  ],  \"supported_payment_methods\": [    \"ach\",    \"card\",    \"stripe\"  ],  \"supported_transfer_countries\": [    \"US\",    \"AE\",    \"AG\",    \"AL\",    \"AM\",    \"AR\",    \"AT\",    \"AU\",    \"BA\",    \"BE\",    \"BG\",    \"BH\",    \"BO\",    \"CA\",    \"CH\",    \"CI\",    \"CL\",    \"CO\",    \"CR\",    \"CY\",    \"CZ\",    \"DE\",    \"DK\",    \"DO\",    \"EC\",    \"EE\",    \"EG\",    \"ES\",    \"ET\",    \"FI\",    \"FR\",    \"GB\",    \"GH\",    \"GM\",    \"GR\",    \"GT\",    \"GY\",    \"HK\",    \"HR\",    \"HU\",    \"ID\",    \"IE\",    \"IL\",    \"IS\",    \"IT\",    \"JM\",    \"JO\",    \"JP\",    \"KE\",    \"KH\",    \"KR\",    \"KW\",    \"LC\",    \"LI\",    \"LK\",    \"LT\",    \"LU\",    \"LV\",    \"MA\",    \"MD\",    \"MG\",    \"MK\",    \"MN\",    \"MO\",    \"MT\",    \"MU\",    \"MX\",    \"MY\",    \"NA\",    \"NG\",    \"NL\",    \"NO\",    \"NZ\",    \"OM\",    \"PA\",    \"PE\",    \"PH\",    \"PL\",    \"PT\",    \"PY\",    \"QA\",    \"RO\",    \"RS\",    \"RW\",    \"SA\",    \"SE\",    \"SG\",    \"SI\",    \"SK\",    \"SN\",    \"SV\",    \"TH\",    \"TN\",    \"TR\",    \"TT\",    \"TZ\",    \"UY\",    \"UZ\",    \"VN\",    \"ZA\",    \"BD\",    \"BJ\",    \"MC\",    \"NE\",    \"SM\",    \"AZ\",    \"BN\",    \"BT\",    \"AO\",    \"DZ\",    \"TW\",    \"BS\",    \"BW\",    \"GA\",    \"LA\",    \"MZ\",    \"KZ\",    \"PK\"  ],  \"verification_fields\": {    \"company\": {      \"additional\": [],      \"minimum\": [        \"business_profile.mcc\",        \"business_profile.url\",        \"business_type\",        \"company.address.city\",        \"company.address.line1\",        \"company.address.postal_code\",        \"company.address.state\",        \"company.name\",        \"company.owners_provided\",        \"company.phone\",        \"company.tax_id\",        \"external_account\",        \"owners.address.city\",        \"owners.address.line1\",        \"owners.address.postal_code\",        \"owners.address.state\",        \"owners.dob.day\",        \"owners.dob.month\",        \"owners.dob.year\",        \"owners.email\",        \"owners.first_name\",        \"owners.id_number\",        \"owners.last_name\",        \"owners.phone\",        \"owners.ssn_last_4\",        \"owners.verification.document\",        \"representative.address.city\",        \"representative.address.line1\",        \"representative.address.postal_code\",        \"representative.address.state\",        \"representative.dob.day\",        \"representative.dob.month\",        \"representative.dob.year\",        \"representative.email\",        \"representative.first_name\",        \"representative.id_number\",        \"representative.last_name\",        \"representative.phone\",        \"representative.relationship.executive\",        \"representative.relationship.title\",        \"representative.ssn_last_4\",        \"representative.verification.document\",        \"tos_acceptance.date\",        \"tos_acceptance.ip\"      ]    },    \"individual\": {      \"additional\": [],      \"minimum\": [        \"business_profile.mcc\",        \"business_profile.url\",        \"business_type\",        \"external_account\",        \"individual.address.city\",        \"individual.address.line1\",        \"individual.address.postal_code\",        \"individual.address.state\",        \"individual.dob.day\",        \"individual.dob.month\",        \"individual.dob.year\",        \"individual.email\",        \"individual.first_name\",        \"individual.id_number\",        \"individual.last_name\",        \"individual.phone\",        \"individual.ssn_last_4\",        \"individual.verification.document\",        \"tos_acceptance.date\",        \"tos_acceptance.ip\"      ]    }  }}\n```\n\n## [Retrieve a Country Spec](https://docs.stripe.com/api/country_specs/retrieve)\n\nReturns a Country Spec for a given Country code.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a [country\\_spec](#country_spec_object) object if a valid country code is provided, and raises [an error](#errors) otherwise.\n\nGET /v1/country\\_specs/:id\n\n```\ncurl https://api.stripe.com/v1/country_specs/US \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"US\",  \"object\": \"country_spec\",  \"default_currency\": \"usd\",  \"supported_bank_account_currencies\": {    \"usd\": [      \"US\"    ]  },  \"supported_payment_currencies\": [    \"usd\",    \"aed\",    \"afn\",    \"...\"  ],  \"supported_payment_methods\": [    \"ach\",    \"card\",    \"stripe\"  ],  \"supported_transfer_countriesverification_fields\": {    \"company\": {      \"additional\": [],      \"minimum\": [        \"business_profile.mcc\",        \"business_profile.url\",        \"business_type\",        \"company.address.city\",        \"company.address.line1\",        \"company.address.postal_code\",        \"company.address.state\",        \"company.name\",        \"company.owners_provided\",        \"company.phone\",        \"company.tax_id\",        \"external_account\",        \"owners.address.city\",        \"owners.address.line1\",        \"owners.address.postal_code\",        \"owners.address.state\",        \"owners.dob.day\",        \"owners.dob.month\",        \"owners.dob.year\",        \"owners.email\",        \"owners.first_name\",        \"owners.id_number\",        \"owners.last_name\",        \"owners.phone\",        \"owners.ssn_last_4\",        \"owners.verification.document\",        \"representative.address.city\",        \"representative.address.line1\",        \"representative.address.postal_code\",        \"representative.address.state\",        \"representative.dob.day\",        \"representative.dob.month\",        \"representative.dob.year\",        \"representative.email\",        \"representative.first_name\",        \"representative.id_number\",        \"representative.last_name\",        \"representative.phone\",        \"representative.relationship.executive\",        \"representative.relationship.title\",        \"representative.ssn_last_4\",        \"representative.verification.document\",        \"tos_acceptance.date\",        \"tos_acceptance.ip\"      ]    },    \"individual\": {      \"additional\": [],      \"minimum\": [        \"business_profile.mcc\",        \"business_profile.url\",        \"business_type\",        \"external_account\",        \"individual.address.city\",        \"individual.address.line1\",        \"individual.address.postal_code\",        \"individual.address.state\",        \"individual.dob.day\",        \"individual.dob.month\",        \"individual.dob.year\",        \"individual.email\",        \"individual.first_name\",        \"individual.id_number\",        \"individual.last_name\",        \"individual.phone\",        \"individual.ssn_last_4\",        \"individual.verification.document\",        \"tos_acceptance.date\",        \"tos_acceptance.ip\"      ]    }  }}\n```\n\n## [List Country Specs](https://docs.stripe.com/api/country_specs/list)\n\nLists all Country Spec objects available in the API.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of country\\_spec objects.\n\n```\ncurl -G https://api.stripe.com/v1/country_specs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/country_specs\",  \"has_more\": false,  \"data\": [    {      \"id\": \"US\",      \"object\": \"country_spec\",      \"default_currency\": \"usd\",      \"supported_bank_account_currencies\": {        \"usd\": [          \"US\"        ]      },      \"supported_payment_currencies\": [        \"usd\",        \"aed\",        \"afn\",        \"...\"      ],      \"supported_payment_methods\": [        \"ach\",        \"card\",        \"stripe\"      ],      \"supported_transfer_countriesverification_fields\": {        \"company\": {          \"additional\": [],          \"minimum\": [            \"business_profile.mcc\",            \"business_profile.url\",            \"business_type\",            \"company.address.city\",            \"company.address.line1\",            \"company.address.postal_code\",            \"company.address.state\",            \"company.name\",            \"company.owners_provided\",            \"company.phone\",            \"company.tax_id\",            \"external_account\",            \"owners.address.city\",            \"owners.address.line1\",            \"owners.address.postal_code\",            \"owners.address.state\",            \"owners.dob.day\",            \"owners.dob.month\",            \"owners.dob.year\",            \"owners.email\",            \"owners.first_name\",            \"owners.id_number\",            \"owners.last_name\",            \"owners.phone\",            \"owners.ssn_last_4\",            \"owners.verification.document\",            \"representative.address.city\",            \"representative.address.line1\",            \"representative.address.postal_code\",            \"representative.address.state\",            \"representative.dob.day\",            \"representative.dob.month\",            \"representative.dob.year\",            \"representative.email\",            \"representative.first_name\",            \"representative.id_number\",            \"representative.last_name\",            \"representative.phone\",            \"representative.relationship.executive\",            \"representative.relationship.title\",            \"representative.ssn_last_4\",            \"representative.verification.document\",            \"tos_acceptance.date\",            \"tos_acceptance.ip\"          ]        },        \"individual\": {          \"additional\": [],          \"minimum\": [            \"business_profile.mcc\",            \"business_profile.url\",            \"business_type\",            \"external_account\",            \"individual.address.city\",            \"individual.address.line1\",            \"individual.address.postal_code\",            \"individual.address.state\",            \"individual.dob.day\",            \"individual.dob.month\",            \"individual.dob.year\",            \"individual.email\",            \"individual.first_name\",            \"individual.id_number\",            \"individual.last_name\",            \"individual.phone\",            \"individual.ssn_last_4\",            \"individual.verification.document\",            \"tos_acceptance.date\",            \"tos_acceptance.ip\"          ]        }      }    }    {...}    {...}  ],}\n```\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The Country Spec object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/radar/early_fraud_warnings/object",
  "markdown": "# The Early Fraud Warning object\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   String representing the object’s type. Objects of the same type share the same value.\n    \n*   An EFW is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an EFW, in order to avoid receiving a dispute later.\n    \n*   ID of the charge this early fraud warning is for, optionally expanded.\n    \n*   Time at which the object was created. Measured in seconds since the Unix epoch.\n    \n*   The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`.\n    \n*   Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.\n    \n*   #### \n    \n    payment\\_intentnullable stringExpandable\n    \n    ID of the Payment Intent this early fraud warning is for, optionally expanded.\n    \n\nThe Early Fraud Warning object\n\n```\n{  \"id\": \"issfr_1NnrwHBw2dPENLoi9lnhV3RQ\",  \"object\": \"radar.early_fraud_warning\",  \"actionable\": true,  \"charge\": \"ch_1234\",  \"created\": 123456789,  \"fraud_type\": \"misc\",  \"livemode\": false}\n```\n\n## [Retrieve an early fraud warning](https://docs.stripe.com/api/radar/early_fraud_warnings/retrieve)\n\nRetrieves the details of an early fraud warning that has previously been created.\n\nPlease refer to the [early fraud warning](#early_fraud_warning_object) object reference for more details.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an EarlyFraudWarning if a valid identifier was provided.\n\nGET /v1/radar/early\\_fraud\\_warnings/:id\n\n```\ncurl https://api.stripe.com/v1/radar/early_fraud_warnings/issfr_1NnrwHBw2dPENLoi9lnhV3RQ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"issfr_1NnrwHBw2dPENLoi9lnhV3RQ\",  \"object\": \"radar.early_fraud_warning\",  \"actionable\": true,  \"charge\": \"ch_1234\",  \"created\": 123456789,  \"fraud_type\": \"misc\",  \"livemode\": false}\n```\n\n## [List all early fraud warnings](https://docs.stripe.com/api/radar/early_fraud_warnings/list)\n\nReturns a list of early fraud warnings.\n\n### Parameters\n\n*   Only return early fraud warnings for the charge specified by this charge ID.\n    \n*   Only return early fraud warnings that were created during the given date interval.\n    \n*   Only return early fraud warnings for charges that were created by the PaymentIntent specified by this PaymentIntent ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` EarlyFraudWarnings, starting after EarlyFraudWarnings `starting_after`. Each entry in the array is a separate EarlyFraudWarning object. If no more EarlyFraudWarnings are available, the resulting array will be empty.\n\nGET /v1/radar/early\\_fraud\\_warnings\n\n```\ncurl -G https://api.stripe.com/v1/radar/early_fraud_warnings \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/radar/early_fraud_warnings\",  \"has_more\": false,  \"data\": [    {      \"id\": \"issfr_1NnrwHBw2dPENLoi9lnhV3RQ\",      \"object\": \"radar.early_fraud_warning\",      \"actionable\": true,      \"charge\": \"ch_1234\",      \"created\": 123456789,      \"fraud_type\": \"misc\",      \"livemode\": false    }    {...}    {...}  ],}\n```\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The Early Fraud Warning object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/radar/value_lists/object",
  "markdown": "# The Value List object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The name of the value list for use in rules.\n    \n*   The type of items in the value list. One of `card_fingerprint`, `us_bank_account_fingerprint`, `sepa_debit_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`.\n    \n    Possible enum values\n    \n    |     |\n    | --- |\n    | `card_bin` |\n    | `card_fingerprint` |\n    | `case_sensitive_string` |\n    | `country` |\n    | `customer_id` |\n    | `email` |\n    | `ip_address` |\n    | `sepa_debit_fingerprint` |\n    | `string` |\n    | `us_bank_account_fingerprint` |\n    \n*   List of items contained within this value list.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The name of the value list.\n    \n\n### More attributes\n\n```\n{  \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",  \"object\": \"radar.value_list\",  \"alias\": \"custom_ip_blocklist\",  \"created\": 1680201894,  \"created_by\": \"API\",  \"item_type\": \"ip_address\",  \"list_items\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MrQSwLkdIwHu7ixWOGS5c8M\"  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Custom IP Blocklist\"}\n```\n\n## [Create a value list](https://docs.stripe.com/api/radar/value_lists/create)\n\nCreates a new `ValueList` object, which can then be referenced in rules.\n\n### Parameters\n\n*   The name of the value list for use in rules.\n    \n*   The human-readable name of the value list.\n    \n*   Type of the items in the value list. One of `card_fingerprint`, `us_bank_account_fingerprint`, `sepa_debit_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`. Use `string` if the item type is unknown or mixed.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns a `ValueList` object if creation succeeds.\n\nPOST /v1/radar/value\\_lists\n\n```\ncurl https://api.stripe.com/v1/radar/value_lists \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"Custom IP Blocklist\" \\  -d alias=custom_ip_blocklist \\  -d item_type=ip_address\n```\n\n```\n{  \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",  \"object\": \"radar.value_list\",  \"alias\": \"custom_ip_blocklist\",  \"created\": 1680201894,  \"created_by\": \"API\",  \"item_type\": \"ip_address\",  \"list_items\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MrQSwLkdIwHu7ixWOGS5c8M\"  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Custom IP Blocklist\"}\n```\n\n## [Update a value list](https://docs.stripe.com/api/radar/value_lists/update)\n\nUpdates a `ValueList` object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that `item_type` is immutable.\n\n### Parameters\n\n*   The name of the value list for use in rules.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The human-readable name of the value list.\n    \n\n### Returns\n\nReturns an updated `ValueList` object if a valid identifier was provided.\n\nPOST /v1/radar/value\\_lists/:id\n\n```\ncurl https://api.stripe.com/v1/radar/value_lists/rsl_1MrQSwLkdIwHu7ixWOGS5c8M \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d name=\"Updated IP Blocklist\"\n```\n\n```\n{  \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",  \"object\": \"radar.value_list\",  \"alias\": \"custom_ip_blocklist\",  \"created\": 1680201894,  \"created_by\": \"API\",  \"item_type\": \"ip_address\",  \"list_items\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MrQSwLkdIwHu7ixWOGS5c8M\"  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Updated IP Blocklist\"}\n```\n\n## [Retrieve a value list](https://docs.stripe.com/api/radar/value_lists/retrieve)\n\nRetrieves a `ValueList` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `ValueList` object if a valid identifier was provided.\n\nGET /v1/radar/value\\_lists/:id\n\n```\ncurl https://api.stripe.com/v1/radar/value_lists/rsl_1MrQSwLkdIwHu7ixWOGS5c8M \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",  \"object\": \"radar.value_list\",  \"alias\": \"custom_ip_blocklist\",  \"created\": 1680201894,  \"created_by\": \"API\",  \"item_type\": \"ip_address\",  \"list_items\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MrQSwLkdIwHu7ixWOGS5c8M\"  },  \"livemode\": false,  \"metadata\": {},  \"name\": \"Custom IP Blocklist\"}\n```\n\n## [List all value lists](https://docs.stripe.com/api/radar/value_lists/list)\n\nReturns a list of `ValueList` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   The alias used to reference the value list when writing rules.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` lists, starting after list `starting_after`. Each entry in the array is a separate `ValueList` object. If no more lists are available, the resulting array will be empty.\n\nGET /v1/radar/value\\_lists\n\n```\ncurl -G https://api.stripe.com/v1/radar/value_lists \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/radar/value_lists\",  \"has_more\": false,  \"data\": [    {      \"id\": \"rsl_1MrQSwLkdIwHu7ixWOGS5c8M\",      \"object\": \"radar.value_list\",      \"alias\": \"custom_ip_blocklist\",      \"created\": 1680201894,      \"created_by\": \"API\",      \"item_type\": \"ip_address\",      \"list_items\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MrQSwLkdIwHu7ixWOGS5c8M\"      },      \"livemode\": false,      \"metadata\": {},      \"name\": \"Custom IP Blocklist\"    }    {...}    {...}  ],}\n```",
  "title": "The Value List object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/radar/reviews/object",
  "markdown": "# The Review object | Stripe API Reference\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    chargenullable stringExpandable\n    \n    The charge associated with this review.\n    \n*   If `true`, the review needs action.\n    \n*   #### \n    \n    payment\\_intentnullable stringExpandable\n    \n    The PaymentIntent ID associated with this review, if one exists.\n    \n*   The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.\n    \n\n### More attributes\n\n*   #### \n    \n    billing\\_zipnullable string\n    \n*   #### \n    \n    closed\\_reasonnullable enum\n    \n\n*   #### \n    \n    ip\\_addressnullable string\n    \n*   #### \n    \n    ip\\_address\\_locationnullable object\n    \n\n```\n{  \"id\": \"prv_1NVyFt2eZvKYlo2CjubqF1xm\",  \"object\": \"review\",  \"billing_zip\": null,  \"charge\": null,  \"closed_reason\": null,  \"created\": 1689864901,  \"ip_address\": null,  \"ip_address_location\": null,  \"livemode\": false,  \"open\": true,  \"opened_reason\": \"rule\",  \"payment_intent\": \"pi_3NVy8c2eZvKYlo2C055h7pkd\",  \"reason\": \"rule\",  \"session\": null}\n```\n\n## [Retrieve a review](https://docs.stripe.com/api/radar/reviews/retrieve)\n\nRetrieves a `Review` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `Review` object if a valid identifier was provided.\n\n```\ncurl https://api.stripe.com/v1/reviews/prv_1NVyFt2eZvKYlo2CjubqF1xm \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prv_1NVyFt2eZvKYlo2CjubqF1xm\",  \"object\": \"review\",  \"billing_zip\": null,  \"charge\": null,  \"closed_reason\": null,  \"created\": 1689864901,  \"ip_address\": null,  \"ip_address_location\": null,  \"livemode\": false,  \"open\": true,  \"opened_reason\": \"rule\",  \"payment_intent\": \"pi_3NVy8c2eZvKYlo2C055h7pkd\",  \"reason\": \"rule\",  \"session\": null}\n```\n\n## [List all open reviews](https://docs.stripe.com/api/radar/reviews/list)\n\nReturns a list of `Review` objects that have `open` set to `true`. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` reviews, starting after review `starting_after`. Each entry in the array is a separate `Review` object. If no more reviews are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/reviews \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/reviews\",  \"has_more\": false,  \"data\": [    {      \"id\": \"prv_1NVyFt2eZvKYlo2CjubqF1xm\",      \"object\": \"review\",      \"billing_zip\": null,      \"charge\": null,      \"closed_reason\": null,      \"created\": 1689864901,      \"ip_address\": null,      \"ip_address_location\": null,      \"livemode\": false,      \"open\": true,      \"opened_reason\": \"rule\",      \"payment_intent\": \"pi_3NVy8c2eZvKYlo2C055h7pkd\",      \"reason\": \"rule\",      \"session\": null    }    {...}    {...}  ],}\n```\n\n## [Approve a review](https://docs.stripe.com/api/radar/reviews/approve)\n\nApproves a `Review` object, closing it and removing it from the list of reviews.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the approved `Review` object.\n\nPOST /v1/reviews/:id/approve\n\n```\ncurl -X POST https://api.stripe.com/v1/reviews/prv_1NVyFt2eZvKYlo2CjubqF1xm/approve \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"prv_1NVyFt2eZvKYlo2CjubqF1xm\",  \"object\": \"review\",  \"billing_zip\": null,  \"charge\": null,  \"closed_reason\": null,  \"created\": 1689864901,  \"ip_address\": null,  \"ip_address_location\": null,  \"livemode\": false,  \"open\": true,  \"opened_reason\": \"rule\",  \"payment_intent\": \"pi_3NVy8c2eZvKYlo2C055h7pkd\",  \"reason\": \"rule\",  \"session\": null}\n```\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "The Review object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/transfer_reversals/object",
  "markdown": "# The Transfer Reversal object | Stripe API Reference\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Ftransfer_reversals%2Fobject)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   Amount, in cents.\n    \n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   ID of the transfer that was reversed.\n    \n\n### More attributes\n\n*   #### \n    \n    balance\\_transactionnullable stringExpandable\n    \n\n*   #### \n    \n    destination\\_payment\\_refundnullable stringExpandable\n    \n*   #### \n    \n    source\\_refundnullable stringExpandable\n    \n\nThe Transfer Reversal object\n\n```\n{  \"id\": \"trr_1Mio2eLkdIwHu7ixN5LPJS4a\",  \"object\": \"transfer_reversal\",  \"amount\": 400,  \"balance_transaction\": \"txn_1Mio2eLkdIwHu7ixosfrbjhW\",  \"created\": 1678147568,  \"currency\": \"usd\",  \"destination_payment_refund\": \"pyr_1Mio2eQ9PRzxEwkZYewpaIFB\",  \"metadata\": {},  \"source_refund\": null,  \"transfer\": \"tr_1Mio2dLkdIwHu7ixsUuCxJpu\"}\n```\n\n## [Create a transfer reversal](https://docs.stripe.com/api/transfer_reversals/create)\n\nWhen you create a new reversal, you must specify a transfer to create it on.\n\nWhen reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.\n\nOnce entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.\n\n### Parameters\n\n*   A positive integer in cents representing how much of this transfer to reverse. Can only reverse up to the unreversed amount remaining of the transfer. Partial transfer reversals are only allowed for transfers to Stripe Accounts. Defaults to the entire transfer amount.\n    \n*   An arbitrary string which you can attach to a reversal object. This will be unset if you POST an empty value.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    refund\\_application\\_feeboolean\n    \n\n### Returns\n\nReturns a transfer reversal object if the reversal succeeded. Raises [an error](#errors) if the transfer has already been reversed or an invalid transfer identifier was provided.\n\nPOST /v1/transfers/:id/reversals\n\n```\ncurl https://api.stripe.com/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d amount=400\n```\n\n```\n{  \"id\": \"trr_1Mio2eLkdIwHu7ixN5LPJS4a\",  \"object\": \"transfer_reversal\",  \"amount\": 400,  \"balance_transaction\": \"txn_1Mio2eLkdIwHu7ixosfrbjhW\",  \"created\": 1678147568,  \"currency\": \"usd\",  \"destination_payment_refund\": \"pyr_1Mio2eQ9PRzxEwkZYewpaIFB\",  \"metadata\": {},  \"source_refund\": null,  \"transfer\": \"tr_1Mio2dLkdIwHu7ixsUuCxJpu\"}\n```\n\n## [Update a reversal](https://docs.stripe.com/api/transfer_reversals/update)\n\nUpdates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\nThis request only accepts metadata and description as arguments.\n\n### Parameters\n\n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### Returns\n\nReturns the reversal object if the update succeeded. This call will raise [an error](#errors) if update parameters are invalid.\n\nPOST /v1/transfers/:id/reversals/:id\n\n```\ncurl https://api.stripe.com/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals/trr_1Mio2eLkdIwHu7ixN5LPJS4a \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"trr_1Mio2eLkdIwHu7ixN5LPJS4a\",  \"object\": \"transfer_reversal\",  \"amount\": 400,  \"balance_transaction\": \"txn_1Mio2eLkdIwHu7ixosfrbjhW\",  \"created\": 1678147568,  \"currency\": \"usd\",  \"destination_payment_refund\": \"pyr_1Mio2eQ9PRzxEwkZYewpaIFB\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"source_refund\": null,  \"transfer\": \"tr_1Mio2dLkdIwHu7ixsUuCxJpu\"}\n```\n\n## [Retrieve a reversal](https://docs.stripe.com/api/transfer_reversals/retrieve)\n\nBy default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the reversal object.\n\nGET /v1/transfers/:id/reversals/:id\n\n```\ncurl https://api.stripe.com/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals/trr_1Mio2eLkdIwHu7ixN5LPJS4a \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"trr_1Mio2eLkdIwHu7ixN5LPJS4a\",  \"object\": \"transfer_reversal\",  \"amount\": 400,  \"balance_transaction\": \"txn_1Mio2eLkdIwHu7ixosfrbjhW\",  \"created\": 1678147568,  \"currency\": \"usd\",  \"destination_payment_refund\": \"pyr_1Mio2eQ9PRzxEwkZYewpaIFB\",  \"metadata\": {},  \"source_refund\": null,  \"transfer\": \"tr_1Mio2dLkdIwHu7ixsUuCxJpu\"}\n```\n\n## [List all reversals](https://docs.stripe.com/api/transfer_reversals/list)\n\nYou can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional reversals.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` reversals, starting after reversal `starting_after`. Each entry in the array is a separate reversal object. If no more reversals are available, the resulting array will be empty. If you provide a non-existent transfer ID, this call raises [an error](#errors).\n\nGET /v1/transfers/:id/reversals\n\n```\ncurl -G https://api.stripe.com/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/transfers/tr_1Mio2dLkdIwHu7ixsUuCxJpu/reversals\",  \"has_more\": false,  \"data\": [    {      \"id\": \"trr_1Mio2eLkdIwHu7ixN5LPJS4a\",      \"object\": \"transfer_reversal\",      \"amount\": 400,      \"balance_transaction\": \"txn_1Mio2eLkdIwHu7ixosfrbjhW\",      \"created\": 1678147568,      \"currency\": \"usd\",      \"destination_payment_refund\": \"pyr_1Mio2eQ9PRzxEwkZYewpaIFB\",      \"metadata\": {},      \"source_refund\": null,      \"transfer\": \"tr_1Mio2dLkdIwHu7ixsUuCxJpu\"    }    {...}    {...}  ],}\n```",
  "title": "The Transfer Reversal object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/external_account_cards/list",
  "markdown": "# List all cards | Stripe API Reference\n\nYou can see a list of the cards that belong to a [connected account](https://docs.stripe.com/connect/accounts). The 10 most recent external accounts are available on the account object. If you need more than 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional cards.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of the cards stored on the account.\n\nGET /v1/accounts/:id/external\\_accounts\n\n```\ncurl -G https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d object=card\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"card_1NAz2x2eZvKYlo2C75wJ1YUs\",      \"object\": \"card\",      \"address_city\": null,      \"address_country\": null,      \"address_line1\": null,      \"address_line1_check\": null,      \"address_line2\": null,      \"address_state\": null,      \"address_zip\": null,      \"address_zip_check\": null,      \"brand\": \"Visa\",      \"country\": \"US\",      \"cvc_check\": \"pass\",      \"dynamic_last4\": null,      \"exp_month\": 8,      \"exp_year\": 2024,      \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",      \"funding\": \"credit\",      \"last4\": \"4242\",      \"metadata\": {},      \"name\": null,      \"redaction\": null,      \"tokenization_method\": null,      \"wallet\": null,      \"account\": \"acct_1032D82eZvKYlo2C\"    }    {...}    {...}  ],}\n```\n\n## [Delete a card](https://docs.stripe.com/api/external_account_cards/delete)\n\nYou can delete cards from a connected account where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nThere are restrictions for deleting a card with `default_for_currency` set to true. You cannot delete a card if any of the following apply:\n\n*   The card’s `currency` is the same as the connected account’s [default\\_currency](https://docs.stripe.com/api/accounts/object#account_object-default_currency).\n*   There is another external account (card or bank account) with the same currency as the card.\n\nTo delete a card, you must first replace the default external account by setting `default_for_currency` with another external account in the same currency.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the deleted card object.\n\nDELETE /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/card_1NAz2x2eZvKYlo2C75wJ1YUs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"card_1NAz2x2eZvKYlo2C75wJ1YUs\",  \"object\": \"card\",  \"deleted\": true}\n```\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all cards | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/radar/value_list_items/object",
  "markdown": "# The Value List Item object\n\n*   API Reference\n*   [Docs](https://docs.stripe.com/)\n*   [Support](https://support.stripe.com/)\n*   [Sign in →](https://dashboard.stripe.com/login?redirect=https%3A%2F%2Fdocs.stripe.com%2Fapi%2Fradar%2Fvalue_list_items%2Fobject)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The value of the item.\n    \n*   The identifier of the value list this item belongs to.\n    \n\n### More attributes\n\nThe Value List Item object\n\n```\n{  \"id\": \"rsli_1MxxosLkdIwHu7ixxvA1yKiZ\",  \"object\": \"radar.value_list_item\",  \"created\": 1681760074,  \"created_by\": \"API\",  \"livemode\": false,  \"value\": \"1.2.3.4\",  \"value_list\": \"rsl_1MxxosLkdIwHu7ixNiiD01Kj\"}\n```\n\n## [Create a value list item](https://docs.stripe.com/api/radar/value_list_items/create)\n\nCreates a new `ValueListItem` object, which is added to the specified parent value list.\n\n### Parameters\n\n*   The value of the item (whose type must match the type of the parent value list).\n    \n*   The identifier of the value list which the created item will be added to.\n    \n\n### Returns\n\nReturns a `ValueListItem` object if creation succeeds.\n\nPOST /v1/radar/value\\_list\\_items\n\n```\ncurl https://api.stripe.com/v1/radar/value_list_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d value_list=rsl_1MxxosLkdIwHu7ixNiiD01Kj \\  -d value=\"1.2.3.4\"\n```\n\n```\n{  \"id\": \"rsli_1MxxosLkdIwHu7ixxvA1yKiZ\",  \"object\": \"radar.value_list_item\",  \"created\": 1681760074,  \"created_by\": \"API\",  \"livemode\": false,  \"value\": \"1.2.3.4\",  \"value_list\": \"rsl_1MxxosLkdIwHu7ixNiiD01Kj\"}\n```\n\n## [Retrieve a value list item](https://docs.stripe.com/api/radar/value_list_items/retrieve)\n\nRetrieves a `ValueListItem` object.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a `ValueListItem` object if a valid identifier was provided.\n\nGET /v1/radar/value\\_list\\_items/:id\n\n```\ncurl https://api.stripe.com/v1/radar/value_list_items/rsli_1MxxosLkdIwHu7ixxvA1yKiZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rsli_1MxxosLkdIwHu7ixxvA1yKiZ\",  \"object\": \"radar.value_list_item\",  \"created\": 1681760074,  \"created_by\": \"API\",  \"livemode\": false,  \"value\": \"1.2.3.4\",  \"value_list\": \"rsl_1MxxosLkdIwHu7ixNiiD01Kj\"}\n```\n\n## [List all value list items](https://docs.stripe.com/api/radar/value_list_items/list)\n\nReturns a list of `ValueListItem` objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\n\n### Parameters\n\n*   Identifier for the parent value list this item belongs to.\n    \n*   Return items belonging to the parent list whose value matches the specified value (using an “is like” match).\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` items, starting after item `starting_after`. Each entry in the array is a separate `ValueListItem` object. If no more items are available, the resulting array will be empty.\n\nGET /v1/radar/value\\_list\\_items\n\n```\ncurl -G https://api.stripe.com/v1/radar/value_list_items \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d value_list=rsl_1MxxosLkdIwHu7ixNiiD01Kj\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/radar/value_list_items\",  \"has_more\": false,  \"data\": [    {      \"id\": \"rsl_1MxxosLkdIwHu7ixNiiD01Kj\",      \"object\": \"radar.value_list\",      \"alias\": \"custom_ip_blocklist\",      \"created\": 1681760074,      \"created_by\": \"API\",      \"item_type\": \"ip_address\",      \"list_items\": {        \"object\": \"list\",        \"data\": [],        \"has_more\": false,        \"total_count\": 0,        \"url\": \"/v1/radar/value_list_items?value_list=rsl_1MxxosLkdIwHu7ixNiiD01Kj\"      },      \"livemode\": false,      \"metadata\": {},      \"name\": \"Custom IP Blocklist\"    }    {...}    {...}  ],}\n```\n\n## [Delete a value list item](https://docs.stripe.com/api/radar/value_list_items/delete)\n\nDeletes a `ValueListItem` object, removing it from its parent value list.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an object with the deleted `ValueListItem` object’s ID and a deleted parameter on success. Otherwise, this call raises [an error](#errors).\n\nDELETE /v1/radar/value\\_list\\_items/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/radar/value_list_items/rsli_1MxxosLkdIwHu7ixxvA1yKiZ \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"rsli_1MxxosLkdIwHu7ixxvA1yKiZ\",  \"object\": \"radar.value_list_item\",  \"deleted\": true}\n```",
  "title": "The Value List Item object | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/external_account_cards",
  "markdown": "# External Account Cards | Stripe API Reference\n\n## [The External Account Card object](https://docs.stripe.com/api/external_account_cards/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   #### \n    \n    accountnullable stringExpandableAvailable conditionally\n    \n    The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead. This property is only available for accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n    \n*   #### \n    \n    address\\_citynullable string\n    \n    City/District/Suburb/Town/Village.\n    \n*   #### \n    \n    address\\_countrynullable string\n    \n    Billing address country, if provided when creating card.\n    \n*   #### \n    \n    address\\_line1nullable string\n    \n    Address line 1 (Street address/PO Box/Company name).\n    \n*   #### \n    \n    address\\_line2nullable string\n    \n    Address line 2 (Apartment/Suite/Unit/Building).\n    \n*   #### \n    \n    address\\_statenullable string\n    \n    State/County/Province/Region.\n    \n*   #### \n    \n    address\\_zipnullable string\n    \n    ZIP or postal code.\n    \n*   #### \n    \n    address\\_zip\\_checknullable string\n    \n    If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.\n    \n*   Card brand. Can be `American Express`, `Diners Club`, `Discover`, `Eftpos Australia`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.\n    \n*   Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you’ve collected.\n    \n*   #### \n    \n    currencynullable enumAvailable conditionally\n    \n    Three-letter [ISO code for currency](https://stripe.com/docs/payouts). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency. This property is only available for accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n    \n*   If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn’t been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge).\n    \n*   #### \n    \n    default\\_for\\_currencynullable booleanAvailable conditionally\n    \n    Whether this card is the default external account for its currency. This property is only available for accounts where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.\n    \n*   Two-digit number representing the card’s expiration month.\n    \n*   Four-digit number representing the card’s expiration year.\n    \n*   #### \n    \n    fingerprintnullable string\n    \n    Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.\n    \n    _As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card—one for India and one for the rest of the world._\n    \n*   Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.\n    \n*   The last four digits of the card.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   Cardholder name.\n    \n*   For external accounts that are cards, possible values are `new` and `errored`. If a payout fails, the status is set to `errored` and [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) are stopped until account details are updated.\n    \n\n### More attributes\n\n*   #### \n    \n    address\\_line1\\_checknullable string\n    \n*   #### \n    \n    available\\_payout\\_methodsnullable array of enums\n    \n*   #### \n    \n    customernullable stringExpandable\n    \n*   #### \n    \n    dynamic\\_last4nullable string\n    \n*   #### \n    \n    tokenization\\_methodnullable string\n    \n*   #### \n    \n    walletnullable objectPreview feature\n    \n\nThe External Account Card object\n\n```\n{  \"id\": \"card_1MvoiELkdIwHu7ixOeFGbN9D\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"customer\": \"cus_NhD8HD2bY8dP3V\",  \"cvc_check\": null,  \"dynamic_last4\": null,  \"exp_month\": 4,  \"exp_year\": 2024,  \"fingerprint\": \"mToisGZ01V71BCos\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {},  \"name\": null,  \"tokenization_method\": null,  \"wallet\": null}\n```\n\n## [Create a card](https://docs.stripe.com/api/external_account_cards/create)\n\nWhen you create a new debit card, you must specify a [connected account](#accounts) to create it on. You can only specify connected accounts where [account.controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nIf the account has no default destination card, then the new card will become the default. However, if the owner already has a default then it will not change. To change the default, you should set `default_for_currency` to `true`.\n\n### Parameters\n\n*   #### \n    \n    external\\_accountobject | stringRequired\n    \n    A token, like the ones returned by [Stripe.js](https://docs.stripe.com/js) or a dictionary containing a user’s card details (with the options shown below). Stripe will automatically validate the card.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n\n### Returns\n\nReturns the card object\n\nPOST /v1/accounts/:id/external\\_accounts\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d external_account=tok_visa_debit\n```\n\n```\n{  \"id\": \"card_1NAiaG2eZvKYlo2CDXvcMb6m\",  \"object\": \"card\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"cvc_check\": \"pass\",  \"dynamic_last4\": null,  \"exp_month\": 8,  \"exp_year\": 2024,  \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {},  \"name\": null,  \"redaction\": null,  \"tokenization_method\": null,  \"wallet\": null}\n```\n\n## [Update a card](https://docs.stripe.com/api/external_account_cards/update)\n\nIf you need to update only some card details, like the billing address or expiration date, you can do so without having to re-enter the full card details. Stripe also works directly with card networks so that your customers can [continue using your service](https://stripe.com/docs/saving-cards#automatic-card-updates) without interruption.\n\n### Parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n    When set to true, this becomes the default external account for its currency.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns the card object.\n\nPOST /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/card_1NBLeN2eZvKYlo2CIq1o7Pzs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"card_1NBLeN2eZvKYlo2CIq1o7Pzs\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"cvc_check\": \"pass\",  \"dynamic_last4\": null,  \"exp_month\": 8,  \"exp_year\": 2024,  \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"Jenny Rosen\",  \"redaction\": null,  \"tokenization_method\": null,  \"wallet\": null,  \"account\": \"acct_1032D82eZvKYlo2C\"}\n```\n\n## [Retrieve a card](https://docs.stripe.com/api/external_account_cards/retrieve)\n\nBy default, you can see the 10 most recent external accounts stored on a [connected account](https://docs.stripe.com/connect/accounts) directly on the object. You can also retrieve details about a specific card stored on the account.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the card object.\n\nGET /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/card_1NAinb2eZvKYlo2C1Fm9mZsu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"card_1NAinb2eZvKYlo2C1Fm9mZsu\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"cvc_check\": \"pass\",  \"dynamic_last4\": null,  \"exp_month\": 8,  \"exp_year\": 2024,  \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {},  \"name\": null,  \"redaction\": null,  \"tokenization_method\": null,  \"wallet\": null,  \"account\": \"acct_1032D82eZvKYlo2C\"}\n```",
  "title": "External Account Cards | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/usage_records/subscription_item_summary_list",
  "markdown": "# List all subscription item period summaries\n\nFor the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).\n\nThe list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` summaries, starting after summary `starting_after`. Each entry in the array is a separate summary object. If no more summaries are available, the resulting array is empty.\n\nGET /v1/subscription\\_items/:id/usage\\_record\\_summaries\n\n```\ncurl -G https://api.stripe.com/v1/subscription_items/si_E9xjsAhGRXCCWe/usage_record_summaries \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscription_items/si_E9xjsAhGRXCCWe/usage_record_summaries\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/subscription_items/si_E9xjsAhGRXCCWe/usage_record_summaries\",      \"has_more\": false,      \"data\": [        {          \"id\": \"sis_1Bnyrd2eZvKYlo2CuVcUbXln\",          \"object\": \"usage_record_summary\",          \"invoice\": \"in_1Bnyrd2eZvKYlo2CSV57GLV8\",          \"livemode\": false,          \"period\": {            \"end\": 0,            \"start\": null          },          \"subscription_item\": \"si_18UXa82eZvKYlo2CbYoIEZVv\",          \"total_usage\": 1        }      ]    }    {...}    {...}  ],}\n```\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all subscription item period summaries | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/account/reject",
  "markdown": "# Reject an account | Stripe API Reference\n\nWith [Connect](https://docs.stripe.com/connect), you can reject accounts that you have flagged as suspicious.\n\nOnly accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be rejected. Test-mode accounts can be rejected at any time. Live-mode accounts can only be rejected after all balances are zero.\n\n### Parameters\n\n*   The reason for rejecting the account. Can be `fraud`, `terms_of_service`, or `other`.\n    \n\n### Returns\n\nReturns an account with `payouts_enabled` and `charges_enabled` set to false on success. If the account ID does not exist, this call raises [an error](#errors).\n\nPOST /v1/accounts/:id/reject\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/reject \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d reason=fraud\n```\n\n```\n{  \"id\": \"acct_1Nv0FGQ9RKHgCVdK\",  \"object\": \"account\",  \"business_profile\": {    \"annual_revenue\": null,    \"estimated_worker_count\": null,    \"mcc\": null,    \"name\": null,    \"product_description\": null,    \"support_address\": null,    \"support_email\": null,    \"support_phone\": null,    \"support_url\": null,    \"url\": null  },  \"business_type\": null,  \"capabilities\": {},  \"charges_enabled\": false,  \"controller\": {    \"fees\": {      \"payer\": \"application\"    },    \"is_controller\": true,    \"losses\": {      \"payments\": \"application\"    },    \"requirement_collection\": \"stripe\",    \"stripe_dashboard\": {      \"type\": \"express\"    },    \"type\": \"application\"  },  \"country\": \"US\",  \"created\": 1385798567,  \"default_currency\": \"usd\",  \"details_submitted\": true,  \"email\": \"jenny.rosen@example.com\",  \"external_accounts\": {    \"object\": \"list\",    \"data\": [],    \"has_more\": false,    \"total_count\": 0,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/external_accounts\"  },  \"future_requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [],    \"disabled_reason\": null,    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"login_links\": {    \"object\": \"list\",    \"total_count\": 0,    \"has_more\": false,    \"url\": \"/v1/accounts/acct_1Nv0FGQ9RKHgCVdK/login_links\",    \"data\": []  },  \"metadata\": {},  \"payouts_enabled\": true,  \"requirements\": {    \"alternatives\": [],    \"current_deadline\": null,    \"currently_due\": [      \"business_profile.mcc\",      \"business_profile.product_description\",      \"business_profile.support_phone\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"person_8UayFKIMRJklog.first_name\",      \"person_8UayFKIMRJklog.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"disabled_reason\": \"rejected.fraud\",    \"errors\": [],    \"eventually_due\": [      \"business_profile.mcc\",      \"business_profile.product_description\",      \"business_profile.support_phone\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"person_8UayFKIMRJklog.first_name\",      \"person_8UayFKIMRJklog.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"past_due\": [      \"business_profile.mcc\",      \"business_profile.product_description\",      \"business_profile.support_phone\",      \"business_profile.url\",      \"business_type\",      \"external_account\",      \"person_8UayFKIMRJklog.first_name\",      \"person_8UayFKIMRJklog.last_name\",      \"tos_acceptance.date\",      \"tos_acceptance.ip\"    ],    \"pending_verification\": []  },  \"settings\": {    \"bacs_debit_payments\": {      \"display_name\": null,      \"service_user_number\": null    },    \"branding\": {      \"icon\": null,      \"logo\": null,      \"primary_color\": null,      \"secondary_color\": null    },    \"card_issuing\": {      \"tos_acceptance\": {        \"date\": null,        \"ip\": null      }    },    \"card_payments\": {      \"decline_on\": {        \"avs_failure\": false,        \"cvc_failure\": false      },      \"statement_descriptor_prefix\": null,      \"statement_descriptor_prefix_kanji\": null,      \"statement_descriptor_prefix_kana\": null    },    \"dashboard\": {      \"display_name\": null,      \"timezone\": \"Etc/UTC\"    },    \"invoices\": {      \"default_account_tax_ids\": null    },    \"payments\": {      \"statement_descriptor\": null,      \"statement_descriptor_kana\": null,      \"statement_descriptor_kanji\": null    },    \"payouts\": {      \"debit_negative_balances\": true,      \"schedule\": {        \"delay_days\": 2,        \"interval\": \"daily\"      },      \"statement_descriptor\": null    },    \"sepa_debit_payments\": {}  },  \"tos_acceptance\": {    \"date\": null,    \"ip\": null,    \"user_agent\": null  },  \"type\": \"none\"}\n```\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Reject an account | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/application_fees/retrieve",
  "markdown": "# Retrieve an application fee | Stripe API Reference\n\nRetrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns an application fee object if a valid identifier was provided, and raises [an error](#errors) otherwise.\n\nGET /v1/application\\_fees/:id\n\n```\ncurl https://api.stripe.com/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",  \"object\": \"application_fee\",  \"account\": \"acct_164wxjKbnvuxQXGu\",  \"amount\": 105,  \"amount_refunded\": 105,  \"application\": \"ca_32D88BD1qLklliziD7gYQvctJIhWBSQ7\",  \"balance_transaction\": \"txn_1032HU2eZvKYlo2CEPtcnUvl\",  \"charge\": \"ch_1B73DOKbnvuxQXGurbwPqzsu\",  \"created\": 1506609734,  \"currency\": \"gbp\",  \"livemode\": false,  \"originating_transaction\": null,  \"refunded\": true,  \"refunds\": {    \"object\": \"list\",    \"data\": [      {        \"id\": \"fr_1MBoV6KbnvuxQXGucP0PaPPO\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284508,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoU0KbnvuxQXGu2wCCz4Bb\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284441,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoRzKbnvuxQXGuvKkBKkSR\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284315,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoPOKbnvuxQXGueOBnke22\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284154,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoOGKbnvuxQXGu6EPQI2Zp\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670284084,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MBoMUKbnvuxQXGu8Y0Peaoy\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670283974,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1MAgZBKbnvuxQXGuLTUrgGeq\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1670015681,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_1JAu9EKbnvuxQXGuRdZYkxVW\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1625738880,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {          \"order_id\": \"6735\"        }      },      {        \"id\": \"fr_1HZK0UKbnvuxQXGuS428gH0W\",        \"object\": \"fee_refund\",        \"amount\": 0,        \"balance_transaction\": null,        \"created\": 1602005482,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      },      {        \"id\": \"fr_D0s7fGBKB40Twy\",        \"object\": \"fee_refund\",        \"amount\": 138,        \"balance_transaction\": \"txn_1CaqNg2eZvKYlo2C75cA3Euk\",        \"created\": 1528486576,        \"currency\": \"usd\",        \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",        \"metadata\": {}      }    ],    \"has_more\": false,    \"url\": \"/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN/refunds\"  },  \"fee_source\": {    \"charge\": \"ch_1B73DOKbnvuxQXGurbwPqzsu\",    \"type\": \"charge\"  }}\n```\n\n## [List all application fees](https://docs.stripe.com/api/application_fees/list)\n\nReturns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.\n\n### Parameters\n\n*   Only return application fees for the charge specified by this charge ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` application fees, starting after application fee `starting_after`. Each entry in the array is a separate application fee object. If no more fees are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/application_fees \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/application_fees\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",      \"object\": \"application_fee\",      \"account\": \"acct_164wxjKbnvuxQXGu\",      \"amount\": 105,      \"amount_refunded\": 105,      \"application\": \"ca_32D88BD1qLklliziD7gYQvctJIhWBSQ7\",      \"balance_transaction\": \"txn_1032HU2eZvKYlo2CEPtcnUvl\",      \"charge\": \"ch_1B73DOKbnvuxQXGurbwPqzsu\",      \"created\": 1506609734,      \"currency\": \"gbp\",      \"livemode\": false,      \"originating_transaction\": null,      \"refunded\": true,      \"refunds\": {        \"object\": \"list\",        \"data\": [          {            \"id\": \"fr_1MBoV6KbnvuxQXGucP0PaPPO\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284508,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoU0KbnvuxQXGu2wCCz4Bb\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284441,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoRzKbnvuxQXGuvKkBKkSR\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284315,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoPOKbnvuxQXGueOBnke22\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284154,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoOGKbnvuxQXGu6EPQI2Zp\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284084,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoMUKbnvuxQXGu8Y0Peaoy\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670283974,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MAgZBKbnvuxQXGuLTUrgGeq\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670015681,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1JAu9EKbnvuxQXGuRdZYkxVW\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1625738880,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {              \"order_id\": \"6735\"            }          },          {            \"id\": \"fr_1HZK0UKbnvuxQXGuS428gH0W\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1602005482,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_D0s7fGBKB40Twy\",            \"object\": \"fee_refund\",            \"amount\": 138,            \"balance_transaction\": \"txn_1CaqNg2eZvKYlo2C75cA3Euk\",            \"created\": 1528486576,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          }        ],        \"has_more\": false,        \"url\": \"/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN/refunds\"      },      \"fee_source\": {        \"charge\": \"ch_1B73DOKbnvuxQXGurbwPqzsu\",        \"type\": \"charge\"      }    }    {...}    {...}  ],}\n```\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Retrieve an application fee | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/external_account_cards/update",
  "markdown": "# Update a card | Stripe API Reference\n\nIf you need to update only some card details, like the billing address or expiration date, you can do so without having to re-enter the full card details. Stripe also works directly with card networks so that your customers can [continue using your service](https://stripe.com/docs/saving-cards#automatic-card-updates) without interruption.\n\n### Parameters\n\n*   #### \n    \n    default\\_for\\_currencyboolean\n    \n    When set to true, this becomes the default external account for its currency.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n\n### More parameters\n\n### Returns\n\nReturns the card object.\n\nPOST /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/card_1NBLeN2eZvKYlo2CIq1o7Pzs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d \"metadata[order_id]\"=6735\n```\n\n```\n{  \"id\": \"card_1NBLeN2eZvKYlo2CIq1o7Pzs\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"cvc_check\": \"pass\",  \"dynamic_last4\": null,  \"exp_month\": 8,  \"exp_year\": 2024,  \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {    \"order_id\": \"6735\"  },  \"name\": \"Jenny Rosen\",  \"redaction\": null,  \"tokenization_method\": null,  \"wallet\": null,  \"account\": \"acct_1032D82eZvKYlo2C\"}\n```\n\n## [Retrieve a card](https://docs.stripe.com/api/external_account_cards/retrieve)\n\nBy default, you can see the 10 most recent external accounts stored on a [connected account](https://docs.stripe.com/connect/accounts) directly on the object. You can also retrieve details about a specific card stored on the account.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the card object.\n\nGET /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/card_1NAinb2eZvKYlo2C1Fm9mZsu \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"card_1NAinb2eZvKYlo2C1Fm9mZsu\",  \"object\": \"card\",  \"address_city\": null,  \"address_country\": null,  \"address_line1\": null,  \"address_line1_check\": null,  \"address_line2\": null,  \"address_state\": null,  \"address_zip\": null,  \"address_zip_check\": null,  \"brand\": \"Visa\",  \"country\": \"US\",  \"cvc_check\": \"pass\",  \"dynamic_last4\": null,  \"exp_month\": 8,  \"exp_year\": 2024,  \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",  \"funding\": \"credit\",  \"last4\": \"4242\",  \"metadata\": {},  \"name\": null,  \"redaction\": null,  \"tokenization_method\": null,  \"wallet\": null,  \"account\": \"acct_1032D82eZvKYlo2C\"}\n```\n\n## [List all cards](https://docs.stripe.com/api/external_account_cards/list)\n\nYou can see a list of the cards that belong to a [connected account](https://docs.stripe.com/connect/accounts). The 10 most recent external accounts are available on the account object. If you need more than 10, you can use this API method and the `limit` and `starting_after` parameters to page through additional cards.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nReturns a list of the cards stored on the account.\n\nGET /v1/accounts/:id/external\\_accounts\n\n```\ncurl -G https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d object=card\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts\",  \"has_more\": false,  \"data\": [    {      \"id\": \"card_1NAz2x2eZvKYlo2C75wJ1YUs\",      \"object\": \"card\",      \"address_city\": null,      \"address_country\": null,      \"address_line1\": null,      \"address_line1_check\": null,      \"address_line2\": null,      \"address_state\": null,      \"address_zip\": null,      \"address_zip_check\": null,      \"brand\": \"Visa\",      \"country\": \"US\",      \"cvc_check\": \"pass\",      \"dynamic_last4\": null,      \"exp_month\": 8,      \"exp_year\": 2024,      \"fingerprint\": \"Xt5EWLLDS7FJjR1c\",      \"funding\": \"credit\",      \"last4\": \"4242\",      \"metadata\": {},      \"name\": null,      \"redaction\": null,      \"tokenization_method\": null,      \"wallet\": null,      \"account\": \"acct_1032D82eZvKYlo2C\"    }    {...}    {...}  ],}\n```\n\n## [Delete a card](https://docs.stripe.com/api/external_account_cards/delete)\n\nYou can delete cards from a connected account where [controller.requirement\\_collection](https://docs.stripe.com/api/accounts/object#account_object-controller-requirement_collection) is `application` (includes [Custom accounts](https://docs.stripe.com/connect/custom-accounts)).\n\nThere are restrictions for deleting a card with `default_for_currency` set to true. You cannot delete a card if any of the following apply:\n\n*   The card’s `currency` is the same as the connected account’s [default\\_currency](https://docs.stripe.com/api/accounts/object#account_object-default_currency).\n*   There is another external account (card or bank account) with the same currency as the card.\n\nTo delete a card, you must first replace the default external account by setting `default_for_currency` with another external account in the same currency.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns the deleted card object.\n\nDELETE /v1/accounts/:id/external\\_accounts/:id\n\n```\ncurl -X DELETE https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/external_accounts/card_1NAz2x2eZvKYlo2C75wJ1YUs \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"card_1NAz2x2eZvKYlo2C75wJ1YUs\",  \"object\": \"card\",  \"deleted\": true}\n```\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Update a card | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/application_fees/list",
  "markdown": "# List all application fees | Stripe API Reference\n\nReturns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.\n\n### Parameters\n\n*   Only return application fees for the charge specified by this charge ID.\n    \n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` application fees, starting after application fee `starting_after`. Each entry in the array is a separate application fee object. If no more fees are available, the resulting array will be empty.\n\n```\ncurl -G https://api.stripe.com/v1/application_fees \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/application_fees\",  \"has_more\": false,  \"data\": [    {      \"id\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",      \"object\": \"application_fee\",      \"account\": \"acct_164wxjKbnvuxQXGu\",      \"amount\": 105,      \"amount_refunded\": 105,      \"application\": \"ca_32D88BD1qLklliziD7gYQvctJIhWBSQ7\",      \"balance_transaction\": \"txn_1032HU2eZvKYlo2CEPtcnUvl\",      \"charge\": \"ch_1B73DOKbnvuxQXGurbwPqzsu\",      \"created\": 1506609734,      \"currency\": \"gbp\",      \"livemode\": false,      \"originating_transaction\": null,      \"refunded\": true,      \"refunds\": {        \"object\": \"list\",        \"data\": [          {            \"id\": \"fr_1MBoV6KbnvuxQXGucP0PaPPO\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284508,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoU0KbnvuxQXGu2wCCz4Bb\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284441,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoRzKbnvuxQXGuvKkBKkSR\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284315,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoPOKbnvuxQXGueOBnke22\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284154,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoOGKbnvuxQXGu6EPQI2Zp\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670284084,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MBoMUKbnvuxQXGu8Y0Peaoy\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670283974,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1MAgZBKbnvuxQXGuLTUrgGeq\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1670015681,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_1JAu9EKbnvuxQXGuRdZYkxVW\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1625738880,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {              \"order_id\": \"6735\"            }          },          {            \"id\": \"fr_1HZK0UKbnvuxQXGuS428gH0W\",            \"object\": \"fee_refund\",            \"amount\": 0,            \"balance_transaction\": null,            \"created\": 1602005482,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          },          {            \"id\": \"fr_D0s7fGBKB40Twy\",            \"object\": \"fee_refund\",            \"amount\": 138,            \"balance_transaction\": \"txn_1CaqNg2eZvKYlo2C75cA3Euk\",            \"created\": 1528486576,            \"currency\": \"usd\",            \"fee\": \"fee_1B73DOKbnvuxQXGuhY8Aw0TN\",            \"metadata\": {}          }        ],        \"has_more\": false,        \"url\": \"/v1/application_fees/fee_1B73DOKbnvuxQXGuhY8Aw0TN/refunds\"      },      \"fee_source\": {        \"charge\": \"ch_1B73DOKbnvuxQXGurbwPqzsu\",        \"type\": \"charge\"      }    }    {...}    {...}  ],}\n```\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "List all application fees | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/usage_records",
  "markdown": "# Usage Records | Stripe API Reference\n\nEndpoints\n\n[POST/v1/subscription\\_items/:id/usage\\_records](https://docs.stripe.com/api/usage_records/create)[GET/v1/subscription\\_items/:id/usage\\_record\\_summaries](https://docs.stripe.com/api/usage_records/subscription_item_summary_list)\n\n## [The Usage Record object](https://docs.stripe.com/api/usage_records/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The usage quantity for the specified date.\n    \n*   The ID of the subscription item this usage record contains data for.\n    \n*   The timestamp when this usage occurred.\n    \n\n### More attributes\n\n```\n{  \"id\": \"mbur_1IJ3zE2eZvKYlo2CsJAtf1Jl\",  \"object\": \"usage_record\",  \"livemode\": false,  \"quantity\": 100,  \"subscription_item\": \"si_IutmSSymhsWA5i\",  \"timestamp\": 1571252444}\n```\n\n## [Create a usage record](https://docs.stripe.com/api/usage_records/create)\n\nCreates a usage record for a specified subscription item and date, and fills it with a quantity.\n\nUsage records provide `quantity` information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the [metered billing](https://stripe.com/docs/billing/subscriptions/metered-billing) plan, Stripe helps you send accurate invoices to your customers.\n\nThe default calculation for usage is to add up all the `quantity` values of the usage records within a billing period. You can change this default behavior with the billing plan’s `aggregate_usage` [parameter](https://docs.stripe.com/api/plans/create#create_plan-aggregate_usage). When there is more than one usage record with the same timestamp, Stripe adds the `quantity` values together. In most cases, this is the desired resolution, however, you can change this behavior with the `action` parameter.\n\nThe default pricing model for metered billing is [per-unit pricing](https://docs.stripe.com/api/plans/object#plan_object-billing_scheme). For finer granularity, you can configure metered billing to have a [tiered pricing](https://stripe.com/docs/billing/subscriptions/tiers) model.\n\n### Parameters\n\n*   The usage quantity for the specified timestamp.\n    \n*   Valid values are `increment` (default) or `set`. When using `increment` the specified `quantity` will be added to the usage at the specified timestamp. The `set` action will overwrite the usage quantity at that timestamp. If the subscription has [billing thresholds](https://docs.stripe.com/api/subscriptions/object#subscription_object-billing_thresholds), `increment` is the only allowed value.\n    \n*   #### \n    \n    timestampstring | timestamp\n    \n    The timestamp for the usage event. This timestamp must be within the current billing period of the subscription of the provided `subscription_item`, and must not be in the future. When passing `\"now\"`, Stripe records usage for the current time. Default is `\"now\"` if a value is not provided.\n    \n\n### Returns\n\nReturns the usage record object.\n\nPOST /v1/subscription\\_items/:id/usage\\_records\n\n```\ncurl https://api.stripe.com/v1/subscription_items/si_IutmSSymhsWA5i/usage_records \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d quantity=100 \\  -d timestamp=1571252444\n```\n\n```\n{  \"id\": \"mbur_1IJ3zE2eZvKYlo2CsJAtf1Jl\",  \"object\": \"usage_record\",  \"livemode\": false,  \"quantity\": 100,  \"subscription_item\": \"si_IutmSSymhsWA5i\",  \"timestamp\": 1571252444}\n```\n\n## [List all subscription item period summaries](https://docs.stripe.com/api/usage_records/subscription_item_summary_list)\n\nFor the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).\n\nThe list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.\n\n### Parameters\n\nNo parameters.\n\n### More parameters\n\n### Returns\n\nA dictionary with a `data` property that contains an array of up to `limit` summaries, starting after summary `starting_after`. Each entry in the array is a separate summary object. If no more summaries are available, the resulting array is empty.\n\nGET /v1/subscription\\_items/:id/usage\\_record\\_summaries\n\n```\ncurl -G https://api.stripe.com/v1/subscription_items/si_E9xjsAhGRXCCWe/usage_record_summaries \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d limit=3\n```\n\n```\n{  \"object\": \"list\",  \"url\": \"/v1/subscription_items/si_E9xjsAhGRXCCWe/usage_record_summaries\",  \"has_more\": false,  \"data\": [    {      \"object\": \"list\",      \"url\": \"/v1/subscription_items/si_E9xjsAhGRXCCWe/usage_record_summaries\",      \"has_more\": false,      \"data\": [        {          \"id\": \"sis_1Bnyrd2eZvKYlo2CuVcUbXln\",          \"object\": \"usage_record_summary\",          \"invoice\": \"in_1Bnyrd2eZvKYlo2CSV57GLV8\",          \"livemode\": false,          \"period\": {            \"end\": 0,            \"start\": null          },          \"subscription_item\": \"si_18UXa82eZvKYlo2CbYoIEZVv\",          \"total_usage\": 1        }      ]    }    {...}    {...}  ],}\n```\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Usage Records | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/account_sessions",
  "markdown": "# Account Session | Stripe API Reference\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [The Account Session object](https://docs.stripe.com/api/account_sessions/object)\n\n### Attributes\n\n*   The ID of the account the AccountSession was created for\n    \n*   The client secret of this AccountSession. Used on the client to set up secure access to the given `account`.\n    \n    The client secret can be used to provide access to `account` from your frontend. It should not be stored, logged, or exposed to anyone other than the connected account. Make sure that you have TLS enabled on any page that includes the client secret.\n    \n    Refer to our docs to [setup Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components) and learn about how `client_secret` should be handled.\n    \n*   Each key of the dictionary represents an embedded component, and each embedded component maps to its configuration (e.g. whether it has been enabled or not).\n    \n*   The timestamp at which this AccountSession will expire.\n    \n\n### More attributes\n\nThe Account Session object\n\n```\n{  \"object\": \"account_session\",  \"account\": \"acct_1NkDjjJyhOZfPCWt\",  \"client_secret\": \"_OXIKXxEihJokDBnDoe2sgG5OGSO2Q12shKvbeboxpALZGng\",  \"expires_at\": 1693261123,  \"livemode\": false,  \"components\": {    \"account_management\": {      \"enabled\": false,      \"features\": {        \"external_account_collection\": true      }    },    \"account_onboarding\": {      \"enabled\": true,      \"features\": {        \"external_account_collection\": true      }    },    \"balances\": {      \"enabled\": true,      \"features\": {        \"edit_payout_schedule\": false,        \"instant_payouts\": false,        \"standard_payouts\": false,        \"external_account_collection\": true      }    },    \"documents\": {      \"enabled\": false,      \"features\": {}    },    \"notification_banner\": {      \"enabled\": false,      \"features\": {        \"external_account_collection\": true      }    },    \"payment_details\": {      \"enabled\": false,      \"features\": {        \"capture_payments\": true,        \"destination_on_behalf_of_charge_management\": false,        \"dispute_management\": true,        \"refund_management\": true      }    },    \"payments\": {      \"enabled\": true,      \"features\": {        \"capture_payments\": true,        \"destination_on_behalf_of_charge_management\": false,        \"dispute_management\": true,        \"refund_management\": true      }    },    \"payouts\": {      \"enabled\": true,      \"features\": {        \"edit_payout_schedule\": false,        \"instant_payouts\": false,        \"standard_payouts\": false,        \"external_account_collection\": true      }    },    \"payouts_list\": {      \"enabled\": false,      \"features\": {}    }  }}\n```\n\n## [Create an Account Session](https://docs.stripe.com/api/account_sessions/create)\n\nCreates a AccountSession object that includes a single-use token that the platform can use on their front-end to grant client-side API access.\n\n### Parameters\n\n*   The identifier of the account to create an Account Session for.\n    \n*   Each key of the dictionary represents an embedded component, and each embedded component maps to its configuration (e.g. whether it has been enabled or not).\n    \n\n### Returns\n\nReturns an Account Session object if the call succeeded.\n\nPOST /v1/account\\_sessions\n\n```\ncurl https://api.stripe.com/v1/account_sessions \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\" \\  -d account=acct_1NkDjjJyhOZfPCWt \\  -d \"components[account_onboarding][enabled]\"=true \\  -d \"components[payments][enabled]\"=true \\  -d \"components[payouts][enabled]\"=true \\  -d \"components[balances][enabled]\"=true\n```\n\n```\n{  \"object\": \"account_session\",  \"account\": \"acct_1NkDjjJyhOZfPCWt\",  \"client_secret\": \"_OXIKXxEihJokDBnDoe2sgG5OGSO2Q12shKvbeboxpALZGng\",  \"expires_at\": 1693261123,  \"livemode\": false,  \"components\": {    \"account_management\": {      \"enabled\": false,      \"features\": {        \"external_account_collection\": true      }    },    \"account_onboarding\": {      \"enabled\": true,      \"features\": {        \"external_account_collection\": true      }    },    \"balances\": {      \"enabled\": true,      \"features\": {        \"edit_payout_schedule\": false,        \"instant_payouts\": false,        \"standard_payouts\": false,        \"external_account_collection\": true      }    },    \"documents\": {      \"enabled\": false,      \"features\": {}    },    \"notification_banner\": {      \"enabled\": false,      \"features\": {        \"external_account_collection\": true      }    },    \"payment_details\": {      \"enabled\": false,      \"features\": {        \"capture_payments\": true,        \"destination_on_behalf_of_charge_management\": false,        \"dispute_management\": true,        \"refund_management\": true      }    },    \"payments\": {      \"enabled\": true,      \"features\": {        \"capture_payments\": true,        \"destination_on_behalf_of_charge_management\": false,        \"dispute_management\": true,        \"refund_management\": true      }    },    \"payouts\": {      \"enabled\": true,      \"features\": {        \"edit_payout_schedule\": false,        \"instant_payouts\": false,        \"standard_payouts\": false,        \"external_account_collection\": true      }    },    \"payouts_list\": {      \"enabled\": false,      \"features\": {}    }  }}\n```\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Account Session | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/accounts/login_link",
  "markdown": "# Login Links | Stripe API Reference\n\nLogin Links are single-use URLs for a connected account to access the Express Dashboard. The connected account’s [account.controller.stripe\\_dashboard.type](https://docs.stripe.com/api/accounts/object#account_object-controller-stripe_dashboard-type) must be `express` to have access to the Express Dashboard.\n\n## [The Login Link object](https://docs.stripe.com/api/accounts/login_link/object)\n\n### Attributes\n\n*   The URL for the login link.\n    \n\n### More attributes\n\n```\n{  \"object\": \"login_link\",  \"created\": 1686084879,  \"url\": \"https://connect.stripe.com/express/acct_1032D82eZvKYlo2C/F44eiGHh5sEV\"}\n```\n\n## [Create a login link](https://docs.stripe.com/api/accounts/login_link/create)\n\nCreates a single-use login link for a connected account to access the Express Dashboard.\n\n**You can only create login links for accounts that use the [Express Dashboard](https://docs.stripe.com/connect/express-dashboard) and are connected to your platform**.\n\n### Parameters\n\nNo parameters.\n\n### Returns\n\nReturns a login link object if the call succeeded.\n\nPOST /v1/accounts/:id/login\\_links\n\n```\ncurl -X POST https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/login_links \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"object\": \"login_link\",  \"created\": 1686084879,  \"url\": \"https://connect.stripe.com/express/acct_1032D82eZvKYlo2C/F44eiGHh5sEV\"}\n```\n\n## [Account Links](https://docs.stripe.com/api/account_links)\n\nAccount Links are the means by which a Connect platform grants a connected account permission to access Stripe-hosted applications, such as Connect Onboarding.\n\nRelated guide: [Connect Onboarding](https://docs.stripe.com/connect/custom/hosted-onboarding)\n\n## [Account Session](https://docs.stripe.com/api/account_sessions)\n\nAn AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.\n\nWe recommend that you create an AccountSession each time you need to display an embedded component to your user. Do not save AccountSessions to your database as they expire relatively quickly, and cannot be used more than once.\n\nRelated guide: [Connect embedded components](https://docs.stripe.com/connect/get-started-connect-embedded-components)\n\n## [Application Fees](https://docs.stripe.com/api/application_fees)\n\nWhen you collect a transaction fee on top of a charge made for your user (using [Connect](https://docs.stripe.com/connect)), an `Application Fee` object is created in your account. You can list, retrieve, and refund application fees.\n\nRelated guide: [Collecting application fees](https://docs.stripe.com/connect/direct-charges#collect-fees)\n\n## [Country Specs](https://docs.stripe.com/api/country_specs)\n\nStripe needs to collect certain pieces of information about each account created. These requirements can differ depending on the account’s country. The Country Specs API makes these rules available to your integration.\n\nYou can also view the information from this API call as [an online guide](https://docs.stripe.com/connect/required-verification-information).\n\n## [Person](https://docs.stripe.com/api/persons)\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [Transfers](https://docs.stripe.com/api/transfers)\n\nA `Transfer` object is created when you move funds between Stripe accounts as part of Connect.\n\nBefore April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. This behavior has since been split out into a [Payout](#payout_object) object, with corresponding payout endpoints. For more information, read about the [transfer/payout split](https://docs.stripe.com/transfer-payout-split).\n\nRelated guide: [Creating separate charges and transfers](https://docs.stripe.com/connect/separate-charges-and-transfers)\n\n## [Secrets](https://docs.stripe.com/api/secret_management)\n\nSecret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.\n\nThe primary resource in Secret Store is a `secret`. Other apps can’t view secrets created by an app. Additionally, secrets are scoped to provide further permission control.\n\nAll Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don’t change per-user, like a third-party API key.\n\nA `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.\n\nRelated guide: [Store data between page reloads](https://docs.stripe.com/stripe-apps/store-auth-data-custom-objects)\n\nEndpoints\n\n[GET/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/list)[POST/v1/apps/secrets/delete](https://docs.stripe.com/api/apps/secret_store/delete)[GET/v1/apps/secrets/find](https://docs.stripe.com/api/apps/secret_store/find)[POST/v1/apps/secrets](https://docs.stripe.com/api/apps/secret_store/set)\n\n## [Reviews](https://docs.stripe.com/api/radar/reviews)\n\nReviews can be used to supplement automated fraud detection with human expertise.\n\nLearn more about [Radar](https://docs.stripe.com/radar) and reviewing payments [here](https://docs.stripe.com/radar/reviews).\n\n## [Authorizations](https://docs.stripe.com/api/issuing/authorizations)\n\nEndpoints\n\n[POST/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/update)[GET/v1/issuing/authorizations/:id](https://docs.stripe.com/api/issuing/authorizations/retrieve)[GET/v1/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/list)[POST/v1/issuing/authorizations/:id/approve](https://docs.stripe.com/api/issuing/authorizations/approve)[POST/v1/issuing/authorizations/:id/decline](https://docs.stripe.com/api/issuing/authorizations/decline)[POST/v1/test\\_helpers/issuing/authorizations](https://docs.stripe.com/api/issuing/authorizations/test_mode_create)[POST/v1/test\\_helpers/issuing/authorizations/:id/capture](https://docs.stripe.com/api/issuing/authorizations/test_mode_capture)[POST/v1/test\\_helpers/issuing/authorizations/:id/expire](https://docs.stripe.com/api/issuing/authorizations/test_mode_expire)[POST/v1/test\\_helpers/issuing/authorizations/:id/finalize\\_amount](https://docs.stripe.com/api/issuing/authorizations/test_mode_finalize_amount)[POST/v1/test\\_helpers/issuing/authorizations/:id/increment](https://docs.stripe.com/api/issuing/authorizations/test_mode_increment)[POST/v1/test\\_helpers/issuing/authorizations/:id/fraud\\_challenges/respond](https://docs.stripe.com/api/issuing/authorizations/respond_to_fraud_challenges)[POST/v1/test\\_helpers/issuing/authorizations/:id/reverse](https://docs.stripe.com/api/issuing/authorizations/test_mode_reverse)\n\n## [Cards](https://docs.stripe.com/api/issuing/cards)\n\nEndpoints\n\n[POST/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/create)[POST/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/update)[GET/v1/issuing/cards/:id](https://docs.stripe.com/api/issuing/cards/retrieve)[GET/v1/issuing/cards](https://docs.stripe.com/api/issuing/cards/list)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/deliver](https://docs.stripe.com/api/issuing/cards/test_mode_deliver)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/fail](https://docs.stripe.com/api/issuing/cards/test_mode_fail)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/return](https://docs.stripe.com/api/issuing/cards/test_mode_return)[POST/v1/test\\_helpers/issuing/cards/:id/shipping/ship](https://docs.stripe.com/api/issuing/cards/test_mode_ship)\n\n## [Physical Bundles](https://docs.stripe.com/api/issuing/physical_bundles)\n\nA Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.\n\n## [Reader](https://docs.stripe.com/api/terminal/readers)\n\nEndpoints\n\n[POST/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/create)[POST/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/update)[GET/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/retrieve)[GET/v1/terminal/readers](https://docs.stripe.com/api/terminal/readers/list)[DELETE/v1/terminal/readers/:id](https://docs.stripe.com/api/terminal/readers/delete)[POST/v1/terminal/readers/:id/cancel\\_action](https://docs.stripe.com/api/terminal/readers/cancel_action)[POST/v1/terminal/readers/:id/collect\\_inputs](https://docs.stripe.com/api/terminal/readers/collect_inputs)[POST/v1/terminal/readers/:id/confirm\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/confirm_payment_intent)[POST/v1/terminal/readers/:id/collect\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/collect_payment_method)[POST/v1/terminal/readers/:id/process\\_payment\\_intent](https://docs.stripe.com/api/terminal/readers/process_payment_intent)[POST/v1/terminal/readers/:id/process\\_setup\\_intent](https://docs.stripe.com/api/terminal/readers/process_setup_intent)[POST/v1/terminal/readers/:id/refund\\_payment](https://docs.stripe.com/api/terminal/readers/refund_payment)[POST/v1/terminal/readers/:id/set\\_reader\\_display](https://docs.stripe.com/api/terminal/readers/set_reader_display)[POST/v1/test\\_helpers/terminal/readers/:id/present\\_payment\\_method](https://docs.stripe.com/api/terminal/readers/present_payment_method)\n\n## [Terminal Hardware Product](https://docs.stripe.com/api/terminal/hardware_products)Preview feature\n\nA TerminalHardwareProduct is a category of hardware devices that are generally similar, but may have variations depending on the country it’s shipped to.\n\nTerminalHardwareSKUs represent variations within the same Product (for example, a country specific device). For example, WisePOS E is a TerminalHardwareProduct and a WisePOS E - US and WisePOS E - UK are TerminalHardwareSKUs.\n\n## [Terminal Hardware SKU](https://docs.stripe.com/api/terminal/hardware_skus)Preview feature\n\nA TerminalHardwareSKU represents a SKU for Terminal hardware. A SKU is a representation of a product available for purchase, containing information such as the name, price, and images.\n\n## [Transaction Entries](https://docs.stripe.com/api/treasury/transaction_entries)\n\nTransactionEntries represent individual units of money movements within a single [Transaction](#transactions).\n\n## [Scheduled Queries](https://docs.stripe.com/api/sigma/scheduled_queries)\n\nIf you have [scheduled a Sigma query](https://docs.stripe.com/sigma/scheduled-queries), you’ll receive a `sigma.scheduled_query_run.created` webhook each time the query runs. The webhook contains a `ScheduledQueryRun` object, which you can use to retrieve the query results.\n\n## [Report Types](https://docs.stripe.com/api/reporting/report_type)\n\nThe Report Type resource corresponds to a particular type of report, such as the “Activity summary” or “Itemized payouts” reports. These objects are identified by an ID belonging to a set of enumerated values. See [API Access to Reports documentation](https://docs.stripe.com/reporting/statements/api) for those Report Type IDs, along with required and optional parameters.\n\nNote that certain report types can only be run based on your live-mode data (not test-mode data), and will error when queried without a [live-mode API key](https://docs.stripe.com/keys#test-live-modes).\n\n## [Session](https://docs.stripe.com/api/financial_connections/sessions)\n\nA Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.\n\n## [Verification Report](https://docs.stripe.com/api/identity/verification_reports)\n\nA VerificationReport is the result of an attempt to collect and verify data from a user. The collection of verification checks performed is determined from the `type` and `options` parameters used. You can find the result of each verification check performed in the appropriate sub-resource: `document`, `id_number`, `selfie`.\n\nEach VerificationReport contains a copy of any data collected by the user as well as reference IDs which can be used to access collected images through the [FileUpload](https://docs.stripe.com/api/files) API. To configure and create VerificationReports, use the [VerificationSession](https://docs.stripe.com/api/identity/verification_sessions) API.\n\nRelated guide: [Accessing verification results](https://docs.stripe.com/identity/verification-sessions#results).\n\n## [Crypto Onramp Quotes](https://docs.stripe.com/api/crypto/onramp_quotes)\n\nCrypto Onramp Quotes are estimated quotes for onramp conversions into all the different cryptocurrencies on different networks. The Quotes API allows you to display quotes in your product UI before directing the user to the onramp widget.\n\nRelated guide: [Quotes API](https://docs.stripe.com/crypto/quotes-api)\n\n## [Climate Product](https://docs.stripe.com/api/climate/product)\n\nA Climate product represents a type of carbon removal unit available for reservation. You can retrieve it to see the current price and availability.\n\n## [Forwarding Request](https://docs.stripe.com/api/forwarding/request)\n\nInstructs Stripe to make a request on your behalf using the destination URL. The destination URL is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials provided during onboarding, and injects card details from the payment\\_method into the request.\n\nStripe redacts all sensitive fields and headers, including authentication credentials and card numbers, before storing the request and response data in the forwarding Request object, which are subject to a 30-day retention period.\n\nYou can provide a Stripe idempotency key to make sure that requests with the same key result in only one outbound request. The Stripe idempotency key provided should be unique and different from any idempotency keys provided on the underlying third-party request.\n\nForwarding Requests are synchronous requests that return a response or time out according to Stripe’s limits.\n\nRelated guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).\n\nEndpoints\n\n[POST/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/create)[GET/v1/forwarding/requests/:id](https://docs.stripe.com/api/forwarding/forwarding_requests/retrieve)[GET/v1/forwarding/requests](https://docs.stripe.com/api/forwarding/forwarding_requests/list)",
  "title": "Login Links | Stripe API Reference",
  "description": "Complete reference documentation for the Stripe API. Includes code snippets and examples for our Python, Java, PHP, Node.js, Go, Ruby, and .NET libraries.",
  "languageCode": "en-US"
},
{
  "url": "https://docs.stripe.com/api/persons",
  "markdown": "# Person | Stripe API Reference\n\nEndpoints\n\n[POST/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/create)[POST/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/update)[GET/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/retrieve)[GET/v1/accounts/:id/persons](https://docs.stripe.com/api/persons/list)[DELETE/v1/accounts/:id/persons/:id](https://docs.stripe.com/api/persons/delete)\n\n## [The Person object](https://docs.stripe.com/api/persons/object)\n\n### Attributes\n\n*   Unique identifier for the object.\n    \n*   The account the person is associated with.\n    \n\n*   The person’s date of birth.\n    \n*   The person’s email address.\n    \n*   #### \n    \n    first\\_namenullable string\n    \n    The person’s first name.\n    \n*   The person’s last name.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.\n    \n*   The person’s phone number.\n    \n*   Describes the person’s relationship to the account.\n    \n*   #### \n    \n    requirementsnullable object\n    \n    Information about the requirements for this person, including what information needs to be collected, and by when.\n    \n\n### More attributes\n\n*   #### \n    \n    additional\\_tos\\_acceptancesobject\n    \n*   #### \n    \n    address\\_kananullable object\n    \n*   #### \n    \n    address\\_kanjinullable object\n    \n\n*   #### \n    \n    first\\_name\\_kananullable string\n    \n*   #### \n    \n    first\\_name\\_kanjinullable string\n    \n*   #### \n    \n    full\\_name\\_aliasesnullable array of strings\n    \n*   #### \n    \n    future\\_requirementsnullable object\n    \n\n*   #### \n    \n    id\\_number\\_providedboolean\n    \n*   #### \n    \n    id\\_number\\_secondary\\_providednullable boolean\n    \n*   #### \n    \n    last\\_name\\_kananullable string\n    \n*   #### \n    \n    last\\_name\\_kanjinullable string\n    \n*   #### \n    \n    maiden\\_namenullable string\n    \n*   #### \n    \n    nationalitynullable string\n    \n*   #### \n    \n    political\\_exposurenullable enum\n    \n*   #### \n    \n    registered\\_addressnullable object\n    \n*   #### \n    \n    ssn\\_last\\_4\\_providedboolean\n    \n\n## [Create a person](https://docs.stripe.com/api/persons/create)\n\nCreates a new person.\n\n### Parameters\n\n*   The person’s date of birth.\n    \n*   The person’s email address.\n    \n*   The person’s first name.\n    \n*   The person’s ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii).\n    \n*   The person’s last name.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The person’s phone number.\n    \n*   The relationship that this person has with the account’s legal entity.\n    \n*   The last four digits of the person’s Social Security number (U.S. only).\n    \n\n### More parameters\n\n*   #### \n    \n    additional\\_tos\\_acceptancesobject\n    \n\n*   #### \n    \n    full\\_name\\_aliasesarray of strings\n    \n\n*   #### \n    \n    id\\_number\\_secondarystring\n    \n\n### Returns\n\nReturns a person object.\n\nPOST /v1/accounts/:id/persons\n\n```\ncurl -X POST https://api.stripe.com/v1/accounts/acct_1032D82eZvKYlo2C/persons \\  -u \"sk_test_4eC39Hq...arjtT1zdp7dcsk_test_4eC39HqLyjWDarjtT1zdp7dc:\"\n```\n\n```\n{  \"id\": \"person_1N9XNb2eZvKYlo2CjPX7xF6F\",  \"object\": \"person\",  \"account\": \"acct_1032D82eZvKYlo2C\",  \"created\": 1684518375,  \"dob\": {    \"day\": null,    \"month\": null,    \"year\": null  },  \"first_name\": null,  \"future_requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"id_number_provided\": false,  \"last_name\": null,  \"metadata\": {},  \"relationship\": {    \"director\": false,    \"executive\": false,    \"owner\": false,    \"percent_ownership\": null,    \"representative\": false,    \"title\": null  },  \"requirements\": {    \"alternatives\": [],    \"currently_due\": [],    \"errors\": [],    \"eventually_due\": [],    \"past_due\": [],    \"pending_verification\": []  },  \"ssn_last_4_provided\": false,  \"verification\": {    \"additional_document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"details\": null,    \"details_code\": null,    \"document\": {      \"back\": null,      \"details\": null,      \"details_code\": null,      \"front\": null    },    \"status\": \"unverified\"  }}\n```\n\n## [Update a person](https://docs.stripe.com/api/persons/update)\n\nUpdates an existing person.\n\n### Parameters\n\n*   The person’s date of birth.\n    \n*   The person’s email address.\n    \n*   The person’s first name.\n    \n*   The person’s ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii).\n    \n*   The person’s last name.\n    \n*   Set of [key-value pairs](https://docs.stripe.com/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.\n    \n*   The person’s phone number.\n    \n*   The relationship that this person has with the account’s legal entity.\n    \n*   The last four digits of the person’s Social Security number (U.S. only).\n    \n\n### More parameters\n\n*   #### \n    \n    additional\\_tos\\_acceptancesobject\n    \n\n*   #### \n    \n    full\\_name\\_aliasesarray of strings\n    \n\n*   #### \n    \n    id\\_number\\_secondarystring\n    \n\n### Returns\n\nReturns a person object.\n\nPOST /v1/accounts/:id/persons/:id\n\n```\ncurl https://api.str